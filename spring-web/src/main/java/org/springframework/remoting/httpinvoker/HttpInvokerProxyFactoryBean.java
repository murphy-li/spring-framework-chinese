/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.remoting.httpinvoker;

import org.springframework.aop.framework.ProxyFactory;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * {@link FactoryBean} for HTTP invoker proxies. Exposes the proxied service
 * for use as a bean reference, using the specified service interface.
 *
 * <p>The service URL must be an HTTP URL exposing an HTTP invoker service.
 * Optionally, a codebase URL can be specified for on-demand dynamic code download
 * from a remote location. For details, see HttpInvokerClientInterceptor docs.
 *
 * <p>Serializes remote invocation objects and deserializes remote invocation
 * result objects. Uses Java serialization just like RMI, but provides the
 * same ease of setup as Caucho's HTTP-based Hessian protocol.
 *
 * <p><b>HTTP invoker is the recommended protocol for Java-to-Java remoting.</b>
 * It is more powerful and more extensible than Hessian, at the expense of
 * being tied to Java. Nevertheless, it is as easy to set up as Hessian,
 * which is its main advantage compared to RMI.
 *
 * <p><b>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:
 * Manipulated input streams could lead to unwanted code execution on the server
 * during the deserialization step. As a consequence, do not expose HTTP invoker
 * endpoints to untrusted clients but rather just between your own services.</b>
 * In general, we strongly recommend any other message format (e.g. JSON) instead.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see #setServiceInterface
 * @see #setServiceUrl
 * @see #setCodebaseUrl
 * @see HttpInvokerClientInterceptor
 * @see HttpInvokerServiceExporter
 * @see org.springframework.remoting.rmi.RmiProxyFactoryBean
 * @see org.springframework.remoting.caucho.HessianProxyFactoryBean
 */
/**
 * {@link  FactoryBean}用于HTTP调用程序代理。 
 * 使用指定的服务接口公开代理的服务以用作Bean引用。 
 *  <p>服务URL必须是公开HTTP调用程序服务的HTTP URL。 
 * 可以选择指定一个代码库URL，以便从远程位置按需下载动态代码。 
 * 有关详细信息，请参见HttpInvokerClientInterceptor文档。 
 *  <p>序列化远程调用对象，并反序列化远程调用结果对象。 
 * 与RMI一样，使用Java序列化，但是提供了与Caucho基于HTTP的Hessian协议相同的简便设置。 
 *  <p> <b> HTTP调用程序是Java到Java远程处理的推荐协议。 
 * </ b>与Hessian相比，HTTP调用程序功能更强大且可扩展，但以与Java绑定为代价。 
 * 尽管如此，它的设置就像Hessian一样容易，这是它与RMI相比的主要优势。 
 *  <p> <b>警告：请注意由于不安全的Java反序列化而引起的漏洞：操纵输入流可能会在反序列化步骤中导致服务器上不必要的代码执行。 
 * 因此，请勿将HTTP调用程序终结点暴露给不受信任的客户端，而应该暴露给您自己的服务之间。 
 * </ b>通常，我们强烈建议您使用其他任何消息格式（例如JSON）。 
 *  @author  Juergen Hoeller @since 1.1起
 * @see  #setServiceInterface 
 * @see  #setServiceUrl 
 * @see  #setCodebaseUrl 
 * @see  HttpInvokerClientInterceptor 
 * @see  HttpInvokerServiceExporter 
 * @see  org.springframework.remoting.rmi.RmiProxyFactoryBean 
 * @see  org.springframework.remoting.caucho.HessianProxyFactoryBean
 */
public class HttpInvokerProxyFactoryBean extends HttpInvokerClientInterceptor implements FactoryBean<Object> {

	@Nullable
	private Object serviceProxy;


	@Override
	public void afterPropertiesSet() {
		super.afterPropertiesSet();
		Class<?> ifc = getServiceInterface();
		Assert.notNull(ifc, "Property 'serviceInterface' is required");
		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(getBeanClassLoader());
	}


	@Override
	@Nullable
	public Object getObject() {
		return this.serviceProxy;
	}

	@Override
	public Class<?> getObjectType() {
		return getServiceInterface();
	}

	@Override
	public boolean isSingleton() {
		return true;
	}

}
