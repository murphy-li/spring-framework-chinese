/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.bind;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

/**
 * {@link ServletRequestBindingException} subclass that indicates an unsatisfied
 * parameter condition, as typically expressed using an {@code @RequestMapping}
 * annotation at the {@code @Controller} type level.
 *
 * @author Juergen Hoeller
 * @since 3.0
 * @see org.springframework.web.bind.annotation.RequestMapping#params()
 */
/**
 * {@link  ServletRequestBindingException}子类，指示不满意的参数条件，通常使用{@code  @Controller}类型级别的{@code  @RequestMapping}注解表示。 
 *  @author  Juergen Hoeller @始于3.0 
 * @see  org.springframework.web.bind.annotation.RequestMapping＃params（）
 */
@SuppressWarnings("serial")
public class UnsatisfiedServletRequestParameterException extends ServletRequestBindingException {

	private final List<String[]> paramConditions;

	private final Map<String, String[]> actualParams;


	/**
	 * Create a new UnsatisfiedServletRequestParameterException.
	 * @param paramConditions the parameter conditions that have been violated
	 * @param actualParams the actual parameter Map associated with the ServletRequest
	 */
	/**
	 * 创建一个新的UnsatisfiedServletRequestParameterException。 
	 *  
	 * @param  paramConditions违反了参数条件
	 * @param  actualParams与ServletRequest关联的实际参数Map
	 */
	public UnsatisfiedServletRequestParameterException(String[] paramConditions, Map<String, String[]> actualParams) {
		super("");
		this.paramConditions = Arrays.<String[]>asList(paramConditions);
		this.actualParams = actualParams;
	}

	/**
	 * Create a new UnsatisfiedServletRequestParameterException.
	 * @param paramConditions all sets of parameter conditions that have been violated
	 * @param actualParams the actual parameter Map associated with the ServletRequest
	 * @since 4.2
	 */
	/**
	 * 创建一个新的UnsatisfiedServletRequestParameterException。 
	 *  
	 * @param  paramConditions违反了所有参数条件集
	 * @param  actualParams与ServletRequest @4.2起关联的实际参数Map
	 */
	public UnsatisfiedServletRequestParameterException(List<String[]> paramConditions,
			Map<String, String[]> actualParams) {

		super("");
		Assert.notEmpty(paramConditions, "Parameter conditions must not be empty");
		this.paramConditions = paramConditions;
		this.actualParams = actualParams;
	}


	@Override
	public String getMessage() {
		StringBuilder sb = new StringBuilder("Parameter conditions ");
		int i = 0;
		for (String[] conditions : this.paramConditions) {
			if (i > 0) {
				sb.append(" OR ");
			}
			sb.append("\"");
			sb.append(StringUtils.arrayToDelimitedString(conditions, ", "));
			sb.append("\"");
			i++;
		}
		sb.append(" not met for actual request parameters: ");
		sb.append(requestParameterMapToString(this.actualParams));
		return sb.toString();
	}

	/**
	 * Return the parameter conditions that have been violated or the first group
	 * in case of multiple groups.
	 * @see org.springframework.web.bind.annotation.RequestMapping#params()
	 */
	/**
	 * 返回违反的参数条件； 
	 * 如果有多个组，则返回第一组。 
	 *  
	 * @see  org.springframework.web.bind.annotation.RequestMapping＃params（）
	 */
	public final String[] getParamConditions() {
		return this.paramConditions.get(0);
	}

	/**
	 * Return all parameter condition groups that have been violated.
	 * @since 4.2
	 * @see org.springframework.web.bind.annotation.RequestMapping#params()
	 */
	/**
	 * 返回所有违反的参数条件组。 
	 *  @since 4.2 
	 * @see  org.springframework.web.bind.annotation.RequestMapping＃params（）
	 */
	public final List<String[]> getParamConditionGroups() {
		return this.paramConditions;
	}

	/**
	 * Return the actual parameter Map associated with the ServletRequest.
	 * @see javax.servlet.ServletRequest#getParameterMap()
	 */
	/**
	 * 返回与ServletRequest关联的实际参数Map。 
	 *  
	 * @see  javax.servlet.ServletRequest＃getParameterMap（）
	 */
	public final Map<String, String[]> getActualParams() {
		return this.actualParams;
	}


	private static String requestParameterMapToString(Map<String, String[]> actualParams) {
		StringBuilder result = new StringBuilder();
		for (Iterator<Map.Entry<String, String[]>> it = actualParams.entrySet().iterator(); it.hasNext();) {
			Map.Entry<String, String[]> entry = it.next();
			result.append(entry.getKey()).append('=').append(ObjectUtils.nullSafeToString(entry.getValue()));
			if (it.hasNext()) {
				result.append(", ");
			}
		}
		return result.toString();
	}

}
