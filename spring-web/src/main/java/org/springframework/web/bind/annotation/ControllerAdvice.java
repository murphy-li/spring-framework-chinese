/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.bind.annotation;

import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.core.annotation.AliasFor;
import org.springframework.stereotype.Component;

/**
 * Specialization of {@link Component @Component} for classes that declare
 * {@link ExceptionHandler @ExceptionHandler}, {@link InitBinder @InitBinder}, or
 * {@link ModelAttribute @ModelAttribute} methods to be shared across
 * multiple {@code @Controller} classes.
 *
 * <p>Classes annotated with {@code @ControllerAdvice} can be declared explicitly
 * as Spring beans or auto-detected via classpath scanning. All such beans are
 * sorted based on {@link org.springframework.core.Ordered Ordered} semantics or
 * {@link org.springframework.core.annotation.Order @Order} /
 * {@link javax.annotation.Priority @Priority} declarations, with {@code Ordered}
 * semantics taking precedence over {@code @Order} / {@code @Priority} declarations.
 * {@code @ControllerAdvice} beans are then applied in that order at runtime.
 * Note, however, that {@code @ControllerAdvice} beans that implement
 * {@link org.springframework.core.PriorityOrdered PriorityOrdered} are <em>not</em>
 * given priority over {@code @ControllerAdvice} beans that implement {@code Ordered}.
 * In addition, {@code Ordered} is not honored for scoped {@code @ControllerAdvice}
 * beans &mdash; for example if such a bean has been configured as a request-scoped
 * or session-scoped bean.  For handling exceptions, an {@code @ExceptionHandler}
 * will be picked on the first advice with a matching exception handler method. For
 * model attributes and data binding initialization, {@code @ModelAttribute} and
 * {@code @InitBinder} methods will follow {@code @ControllerAdvice} order.
 *
 * <p>Note: For {@code @ExceptionHandler} methods, a root exception match will be
 * preferred to just matching a cause of the current exception, among the handler
 * methods of a particular advice bean. However, a cause match on a higher-priority
 * advice will still be preferred over any match (whether root or cause level)
 * on a lower-priority advice bean. As a consequence, please declare your primary
 * root exception mappings on a prioritized advice bean with a corresponding order.
 *
 * <p>By default, the methods in an {@code @ControllerAdvice} apply globally to
 * all controllers. Use selectors such as {@link #annotations},
 * {@link #basePackageClasses}, and {@link #basePackages} (or its alias
 * {@link #value}) to define a more narrow subset of targeted controllers.
 * If multiple selectors are declared, boolean {@code OR} logic is applied, meaning
 * selected controllers should match at least one selector. Note that selector checks
 * are performed at runtime, so adding many selectors may negatively impact
 * performance and add complexity.
 *
 * @author Rossen Stoyanchev
 * @author Brian Clozel
 * @author Sam Brannen
 * @since 3.2
 * @see org.springframework.stereotype.Controller
 * @see RestControllerAdvice
 */
/**
 * {@link  Component @Component}的特殊化，用于声明要在之间共享的{{@link> ExceptionHandler @ExceptionHandler}，{<@link> InitBinder @InitBinder}或{@link  ModelAttribute @ModelAttribute}方法的类多个{@code  @Controller}类。 
 *  <p>用{@code  @ControllerAdvice}注释的类可以显式声明为Spring bean或通过类路径扫描自动检测。 
 * 所有此类bean均基于{@link  org.springframework.core.Ordered Ordered}语义或{@link  org.springframework.core.annotation.Order @Order} / {@link  javax.annotation。 
 *  Priority @Priority}声明，具有{@code  Ordered}语义，优先于{@code  @Order} / {@code  @Priority}声明。 
 * 然后在运行时以该顺序应用{@code  @ControllerAdvice} bean。 
 * 但是请注意，实现了{@link  org.springframework.core.PriorityOrdered PriorityOrdered}的{@code  @ControllerAdvice} Bean比{@code  @ControllerAdvice}的优先级<em> not </ em>实现{@code  Ordered}的bean。 
 * 另外，对于有作用域的{@code  @ControllerAdvice} Bean，不推荐使用{@code  Ordered} －例如，如果已将此类Bean配置为请求范围或会话范围的Bean。 
 * 为了处理异常，将在第一个建议中使用匹配的异常处理程序方法选择一个{@code  @ExceptionHandler}。 
 * 对于模型属性和数据绑定初始化，{<@code> @ModelAttribute}和{@code  @InitBinder}方法将遵循{@code  @ControllerAdvice}的顺序。 
 *  <p>注意：对于{@code  @ExceptionHandler}方法，在特定建议bean的处理程序方法中，与仅匹配导致当前异常的原因相比，将首选与根异常匹配。 
 * 但是，与优先级较低的建议Bean上的任何匹配项（根或原因级别）相比，优先级较高的建议上的原因匹配仍将是首选。 
 * 因此，请在具有相应顺序的优先通知bean上声明您的主根异常映射。 
 *  <p>默认情况下，{<@code> @ControllerAdvice}中的方法全局应用于所有控制器。 
 * 使用选择器，例如{@link  #annotations}，{<@link> #basePackageClasses}和{@link  #basePackages}（或其别名{@link  #value}）来定义更狭窄的子集目标控制器。 
 * 如果声明了多个选择器，则将使用布尔值{@code  OR}逻辑，这意味着选定的控制器应至少匹配一个选择器。 
 * 请注意，选择器检查是在运行时执行的，因此添加许多选择器可能会对性能产生负面影响并增加复杂性。 
 *  @author  Rossen Stoyanchev @author  Brian Clozel @author  Sam Brannen @since 3.2 
 * @see  org.springframework.stereotype.Controller 
 * @see  RestControllerAdvice
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface ControllerAdvice {

	/**
	 * Alias for the {@link #basePackages} attribute.
	 * <p>Allows for more concise annotation declarations &mdash; for example,
	 * {@code @ControllerAdvice("org.my.pkg")} is equivalent to
	 * {@code @ControllerAdvice(basePackages = "org.my.pkg")}.
	 * @since 4.0
	 * @see #basePackages
	 */
	/**
	 * {@link  #basePackages}属性的别名。 
	 *  <p>允许使用更简洁的注释声明-例如，{@code  @ControllerAdvice（"org.my.pkg"）}等效于{@code  @ControllerAdvice（basePackages ="org.my.pkg"）}。 
	 *  @始于4.0 
	 * @see  #basePackages
	 */
	@AliasFor("basePackages")
	String[] value() default {};

	/**
	 * Array of base packages.
	 * <p>Controllers that belong to those base packages or sub-packages thereof
	 * will be included &mdash; for example,
	 * {@code @ControllerAdvice(basePackages = "org.my.pkg")} or
	 * {@code @ControllerAdvice(basePackages = {"org.my.pkg", "org.my.other.pkg"})}.
	 * <p>{@link #value} is an alias for this attribute, simply allowing for
	 * more concise use of the annotation.
	 * <p>Also consider using {@link #basePackageClasses} as a type-safe
	 * alternative to String-based package names.
	 * @since 4.0
	 */
	/**
	 * 基本软件包数组。 
	 *  <p>将包含属于那些基本软件包或其子软件包的控制器-例如，{@code  @ControllerAdvice（basePackages ="org.my.pkg"）}或{@code  @ControllerAdvice（ basePackages = {"org.my.pkg"，"org.my.other.pkg"}）}。 
	 *  <p> {<@link> #value}是此属性的别名，只是允许更简洁地使用注释。 
	 *  <p>还可以考虑将{@link  #basePackageClasses}用作基于字符串的程序包名称的类型安全替代。 
	 *  @始于4.0
	 */
	@AliasFor("value")
	String[] basePackages() default {};

	/**
	 * Type-safe alternative to {@link #basePackages} for specifying the packages
	 * in which to select controllers to be advised by the {@code @ControllerAdvice}
	 * annotated class.
	 * <p>Consider creating a special no-op marker class or interface in each package
	 * that serves no purpose other than being referenced by this attribute.
	 * @since 4.0
	 */
	/**
	 * {@link  #basePackages}的类型安全替代品，用于指定要在其中选择要由{@code  @ControllerAdvice}注释类建议的控制器的软件包。 
	 *  <p>请考虑在每个程序包中创建一个特殊的无操作标记类或接口，该类或接口除了被该属性引用外没有其他用途。 
	 *  @始于4.0
	 */
	Class<?>[] basePackageClasses() default {};

	/**
	 * Array of classes.
	 * <p>Controllers that are assignable to at least one of the given types
	 * will be advised by the {@code @ControllerAdvice} annotated class.
	 * @since 4.0
	 */
	/**
	 * 类数组。 
	 *  <p>可分配给至少一种给定类型的控制器将由{@code  @ControllerAdvice}注释类建议。 
	 *  @始于4.0
	 */
	Class<?>[] assignableTypes() default {};

	/**
	 * Array of annotation types.
	 * <p>Controllers that are annotated with at least one of the supplied annotation
	 * types will be advised by the {@code @ControllerAdvice} annotated class.
	 * <p>Consider creating a custom composed annotation or use a predefined one,
	 * like {@link RestController @RestController}.
	 * @since 4.0
	 */
	/**
	 * 注释类型数组。 
	 *  <p>使用至少一种提供的注释类型进行注释的控制器将由{@code  @ControllerAdvice}注释类建议。 
	 *  <p>考虑创建一个自定义的组合注释，或使用预定义的注释，例如{@link  RestController @RestController}。 
	 *  @始于4.0
	 */
	Class<? extends Annotation>[] annotations() default {};

}
