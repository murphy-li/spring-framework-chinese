/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.bind;

import javax.servlet.ServletRequest;

import org.springframework.beans.MutablePropertyValues;
import org.springframework.lang.Nullable;
import org.springframework.validation.BindException;
import org.springframework.web.multipart.MultipartRequest;
import org.springframework.web.util.WebUtils;

/**
 * Special {@link org.springframework.validation.DataBinder} to perform data binding
 * from servlet request parameters to JavaBeans, including support for multipart files.
 *
 * <p>See the DataBinder/WebDataBinder superclasses for customization options,
 * which include specifying allowed/required fields, and registering custom
 * property editors.
 *
 * <p>Can also be used for manual data binding in custom web controllers:
 * for example, in a plain Controller implementation or in a MultiActionController
 * handler method. Simply instantiate a ServletRequestDataBinder for each binding
 * process, and invoke {@code bind} with the current ServletRequest as argument:
 *
 * <pre class="code">
 * MyBean myBean = new MyBean();
 * // apply binder to custom target object
 * ServletRequestDataBinder binder = new ServletRequestDataBinder(myBean);
 * // register custom editors, if desired
 * binder.registerCustomEditor(...);
 * // trigger actual binding of request parameters
 * binder.bind(request);
 * // optionally evaluate binding errors
 * Errors errors = binder.getErrors();
 * ...</pre>
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see #bind(javax.servlet.ServletRequest)
 * @see #registerCustomEditor
 * @see #setAllowedFields
 * @see #setRequiredFields
 * @see #setFieldMarkerPrefix
 */
/**
 * 特殊的{@link  org.springframework.validation.DataBinder}用于执行从servlet请求参数到JavaBeans的数据绑定，包括对多部分文件的支持。 
 *  <p>请参阅DataBinder / WebDataBinder超类以获取自定义选项，这些自定义选项包括指定允许/必需的字段以及注册自定义属性编辑器。 
 *  <p>还可以用于自定义Web控制器中的手动数据绑定：例如，在普通的Controller实现中或在MultiActionController处理程序方法中。 
 * 只需为每个绑定过程实例化一个ServletRequestDataBinder，然后使用当前的ServletRequest作为参数调用{@code  bind}：<pre class ="code"> MyBean myBean = new MyBean（）; //将活页夹应用于自定义目标对象ServletRequestDataBinder活页夹= new ServletRequestDataBinder（myBean）; //注册自定义编辑器，如果需要的话，binder.registerCustomEditor（...）; //触发请求参数的实际绑定bind.bind（request）; //可选地评估绑定错误错误错误= binder.getErrors（）; ... </ pre> @author  Rod Johnson @author  Juergen Hoeller 
 * @see  #bind（javax.servlet.ServletRequest）
 * @see  #registerCustomEditor 
 * @see  #setAllowedFields 
 * @see  #setRequiredFields 
 * @see  #setFieldMarkerPrefix
 */
public class ServletRequestDataBinder extends WebDataBinder {

	/**
	 * Create a new ServletRequestDataBinder instance, with default object name.
	 * @param target the target object to bind onto (or {@code null}
	 * if the binder is just used to convert a plain parameter value)
	 * @see #DEFAULT_OBJECT_NAME
	 */
	/**
	 * 使用默认的对象名称创建一个新的ServletRequestDataBinder实例。 
	 *  
	 * @param 将目标对象绑定到目标对象（如果仅使用绑定器来转换纯参数值，则为{@code  null}）
	 * @see  #DEFAULT_OBJECT_NAME
	 */
	public ServletRequestDataBinder(@Nullable Object target) {
		super(target);
	}

	/**
	 * Create a new ServletRequestDataBinder instance.
	 * @param target the target object to bind onto (or {@code null}
	 * if the binder is just used to convert a plain parameter value)
	 * @param objectName the name of the target object
	 */
	/**
	 * 创建一个新的ServletRequestDataBinder实例。 
	 *  
	 * @param 将目标对象绑定到目标（或者如果绑定程序仅用于转换纯参数值，则为{@code  null}）
	 * @param  objectName目标对象的名称
	 */
	public ServletRequestDataBinder(@Nullable Object target, String objectName) {
		super(target, objectName);
	}


	/**
	 * Bind the parameters of the given request to this binder's target,
	 * also binding multipart files in case of a multipart request.
	 * <p>This call can create field errors, representing basic binding
	 * errors like a required field (code "required"), or type mismatch
	 * between value and bean property (code "typeMismatch").
	 * <p>Multipart files are bound via their parameter name, just like normal
	 * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,
	 * invoking a "setUploadedFile" setter method.
	 * <p>The type of the target property for a multipart file can be MultipartFile,
	 * byte[], or String. The latter two receive the contents of the uploaded file;
	 * all metadata like original file name, content type, etc are lost in those cases.
	 * @param request request with parameters to bind (can be multipart)
	 * @see org.springframework.web.multipart.MultipartHttpServletRequest
	 * @see org.springframework.web.multipart.MultipartFile
	 * @see #bind(org.springframework.beans.PropertyValues)
	 */
	/**
	 * 将给定请求的参数绑定到此绑定器的目标，如果是多部分请求，也将绑定多部分文件。 
	 *  <p>此调用可以创建字段错误，表示基本的绑定错误，例如必填字段（代码"required"），或者value和bean属性之间的类型不匹配（代码"typeMismatch"）。 
	 *  <p>多部分文件通过其参数名称进行绑定，就像普通的HTTP参数一样：即，将"uploadedFile"绑定到"uploadedFile"bean属性，并调用"setUploadedFile"setter方法。 
	 *  <p>多部分文件的目标属性的类型可以是MultipartFile，byte []或String。 
	 * 后两个接收上载文件的内容。 
	 * 在这种情况下，所有的元数据（例如原始文件名，内容类型等）都将丢失。 
	 *  
	 * @param 具有绑定参数的请求请求（可以是多部分的）
	 * @see  org.springframework.web.multipart.MultipartHttpServletRequest 
	 * @see  org.springframework.web.multipart.MultipartFile 
	 * @see  #bind（org。 
	 *  springframework.beans.PropertyValues）
	 */
	public void bind(ServletRequest request) {
		MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request);
		MultipartRequest multipartRequest = WebUtils.getNativeRequest(request, MultipartRequest.class);
		if (multipartRequest != null) {
			bindMultipart(multipartRequest.getMultiFileMap(), mpvs);
		}
		addBindValues(mpvs, request);
		doBind(mpvs);
	}

	/**
	 * Extension point that subclasses can use to add extra bind values for a
	 * request. Invoked before {@link #doBind(MutablePropertyValues)}.
	 * The default implementation is empty.
	 * @param mpvs the property values that will be used for data binding
	 * @param request the current request
	 */
	/**
	 * 子类可用于为请求添加额外的绑定值的扩展点。 
	 * 在{@link  #doBind（MutablePropertyValues）}之前调用。 
	 * 默认实现为空。 
	 *  
	 * @param  mpvs将用于数据绑定的属性值
	 * @param 请求当前请求
	 */
	protected void addBindValues(MutablePropertyValues mpvs, ServletRequest request) {
	}

	/**
	 * Treats errors as fatal.
	 * <p>Use this method only if it's an error if the input isn't valid.
	 * This might be appropriate if all input is from dropdowns, for example.
	 * @throws ServletRequestBindingException subclass of ServletException on any binding problem
	 */
	/**
	 * 将错误视为致命错误。 
	 *  <p>仅当输入无效时发生错误时，才使用此方法。 
	 * 例如，如果所有输入均来自下拉菜单，则这可能是适当的。 
	 *  
	 * @throws 关于任何绑定问题的ServletException的ServletRequestBindingException子类
	 */
	public void closeNoCatch() throws ServletRequestBindingException {
		if (getBindingResult().hasErrors()) {
			throw new ServletRequestBindingException(
					"Errors binding onto object '" + getBindingResult().getObjectName() + "'",
					new BindException(getBindingResult()));
		}
	}

}
