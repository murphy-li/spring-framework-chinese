/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.bind;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.beans.MutablePropertyValues;
import org.springframework.beans.PropertyValue;
import org.springframework.core.CollectionFactory;
import org.springframework.lang.Nullable;
import org.springframework.validation.DataBinder;
import org.springframework.web.multipart.MultipartFile;

/**
 * Special {@link DataBinder} for data binding from web request parameters
 * to JavaBean objects. Designed for web environments, but not dependent on
 * the Servlet API; serves as base class for more specific DataBinder variants,
 * such as {@link org.springframework.web.bind.ServletRequestDataBinder}.
 *
 * <p>Includes support for field markers which address a common problem with
 * HTML checkboxes and select options: detecting that a field was part of
 * the form, but did not generate a request parameter because it was empty.
 * A field marker allows to detect that state and reset the corresponding
 * bean property accordingly. Default values, for parameters that are otherwise
 * not present, can specify a value for the field other then empty.
 *
 * @author Juergen Hoeller
 * @author Scott Andrews
 * @author Brian Clozel
 * @since 1.2
 * @see #registerCustomEditor
 * @see #setAllowedFields
 * @see #setRequiredFields
 * @see #setFieldMarkerPrefix
 * @see #setFieldDefaultPrefix
 * @see ServletRequestDataBinder
 */
/**
 * 特殊的{@link  DataBinder}用于将数据从Web请求参数绑定到JavaBean对象。 
 * 专为Web环境而设计，但不依赖Servlet API； 
 * 用作更特定的DataBinder变体的基类，例如{@link  org.springframework.web.bind.ServletRequestDataBinder}。 
 *  <p>包括对字段标记的支持，该字段标记解决了HTML复选框的常见问题并选择了选项：检测到字段是表单的一部分，但未生成请求参数，因为该字段为空。 
 * 字段标记允许检测该状态并相应地重置相应的bean属性。 
 * 对于原本不存在的参数，默认值可以为字段指定其他值，然后再为空。 
 *  @author  Juergen Hoeller @author 斯科特·安德鲁斯@author  Brian Clozel @since 1.2起setFieldDefaultPrefix 
 * @see  ServletRequestDataBinder
 */
public class WebDataBinder extends DataBinder {

	/**
	 * Default prefix that field marker parameters start with, followed by the field
	 * name: e.g. "_subscribeToNewsletter" for a field "subscribeToNewsletter".
	 * <p>Such a marker parameter indicates that the field was visible, that is,
	 * existed in the form that caused the submission. If no corresponding field
	 * value parameter was found, the field will be reset. The value of the field
	 * marker parameter does not matter in this case; an arbitrary value can be used.
	 * This is particularly useful for HTML checkboxes and select options.
	 * @see #setFieldMarkerPrefix
	 */
	/**
	 * 字段标记参数以其开头的默认前缀，后跟字段名称：例如字段"subscribeToNewsletter"的"_subscribeToNewsletter"。 
	 *  <p>这样的标记参数表明该字段是可见的，也就是说，以导致提交的形式存在。 
	 * 如果未找到相应的字段值参数，则将重置该字段。 
	 * 在这种情况下，字段标记参数的值无关紧要； 
	 * 可以使用任意值。 
	 * 这对于HTML复选框和选择选项特别有用。 
	 *  
	 * @see  #setFieldMarkerPrefix
	 */
	public static final String DEFAULT_FIELD_MARKER_PREFIX = "_";

	/**
	 * Default prefix that field default parameters start with, followed by the field
	 * name: e.g. "!subscribeToNewsletter" for a field "subscribeToNewsletter".
	 * <p>Default parameters differ from field markers in that they provide a default
	 * value instead of an empty value.
	 * @see #setFieldDefaultPrefix
	 */
	/**
	 * 字段默认参数以其开头的默认前缀，后跟字段名称：例如字段"subscribeToNewsletter"的"！ 
	 * subscribeToNewsletter"。 
	 *  <p>默认参数与字段标记的不同之处在于，它们提供默认值而不是空值。 
	 *  
	 * @see  #setFieldDefaultPrefix
	 */
	public static final String DEFAULT_FIELD_DEFAULT_PREFIX = "!";

	@Nullable
	private String fieldMarkerPrefix = DEFAULT_FIELD_MARKER_PREFIX;

	@Nullable
	private String fieldDefaultPrefix = DEFAULT_FIELD_DEFAULT_PREFIX;

	private boolean bindEmptyMultipartFiles = true;


	/**
	 * Create a new WebDataBinder instance, with default object name.
	 * @param target the target object to bind onto (or {@code null}
	 * if the binder is just used to convert a plain parameter value)
	 * @see #DEFAULT_OBJECT_NAME
	 */
	/**
	 * 使用默认的对象名称创建一个新的WebDataBinder实例。 
	 *  
	 * @param 将目标对象绑定到目标对象（如果仅使用绑定器来转换纯参数值，则为{@code  null}）
	 * @see  #DEFAULT_OBJECT_NAME
	 */
	public WebDataBinder(@Nullable Object target) {
		super(target);
	}

	/**
	 * Create a new WebDataBinder instance.
	 * @param target the target object to bind onto (or {@code null}
	 * if the binder is just used to convert a plain parameter value)
	 * @param objectName the name of the target object
	 */
	/**
	 * 创建一个新的WebDataBinder实例。 
	 *  
	 * @param 将目标对象绑定到目标（或者如果绑定程序仅用于转换纯参数值，则为{@code  null}）
	 * @param  objectName目标对象的名称
	 */
	public WebDataBinder(@Nullable Object target, String objectName) {
		super(target, objectName);
	}


	/**
	 * Specify a prefix that can be used for parameters that mark potentially
	 * empty fields, having "prefix + field" as name. Such a marker parameter is
	 * checked by existence: You can send any value for it, for example "visible".
	 * This is particularly useful for HTML checkboxes and select options.
	 * <p>Default is "_", for "_FIELD" parameters (e.g. "_subscribeToNewsletter").
	 * Set this to null if you want to turn off the empty field check completely.
	 * <p>HTML checkboxes only send a value when they're checked, so it is not
	 * possible to detect that a formerly checked box has just been unchecked,
	 * at least not with standard HTML means.
	 * <p>One way to address this is to look for a checkbox parameter value if
	 * you know that the checkbox has been visible in the form, resetting the
	 * checkbox if no value found. In Spring web MVC, this typically happens
	 * in a custom {@code onBind} implementation.
	 * <p>This auto-reset mechanism addresses this deficiency, provided
	 * that a marker parameter is sent for each checkbox field, like
	 * "_subscribeToNewsletter" for a "subscribeToNewsletter" field.
	 * As the marker parameter is sent in any case, the data binder can
	 * detect an empty field and automatically reset its value.
	 * @see #DEFAULT_FIELD_MARKER_PREFIX
	 */
	/**
	 * 指定一个前缀，该前缀可用于以"前缀+字段"作为名称的标记可能为空的字段的参数。 
	 * 这样的标记参数将通过存在性检查：您可以为其发送任何值，例如"visible"。 
	 * 这对于HTML复选框和选择选项特别有用。 
	 *  <p>对于"_FIELD"参数，默认值为"_"（例如"_subscribeToNewsletter"）。 
	 * 如果要完全关闭空白字段检查，请将其设置为null。 
	 *  <p> HTML复选框仅在被选中时才发送值，因此无法检测到以前未选中的复选框，至少没有使用标准HTML手段。 
	 *  <p>解决此问题的一种方法是，如果您知道复选框已在表单中可见，则查找复选框参数值，如果未找到该值，则重置该复选框。 
	 * 在Spring Web MVC中，这通常发生在自定义{@code  onBind}实现中。 
	 *  <p>如果为每个复选框字段发送了标记参数，例如为"subscribeToNewsletter"字段发送了"_subscribeToNewsletter"，则此自动重置机制将解决此缺陷。 
	 * 无论如何发送标记参数，数据绑定程序都可以检测到空字段并自动重置其值。 
	 *  
	 * @see  #DEFAULT_FIELD_MARKER_PREFIX
	 */
	public void setFieldMarkerPrefix(@Nullable String fieldMarkerPrefix) {
		this.fieldMarkerPrefix = fieldMarkerPrefix;
	}

	/**
	 * Return the prefix for parameters that mark potentially empty fields.
	 */
	/**
	 * 返回标记可能为空字段的参数的前缀。 
	 * 
	 */
	@Nullable
	public String getFieldMarkerPrefix() {
		return this.fieldMarkerPrefix;
	}

	/**
	 * Specify a prefix that can be used for parameters that indicate default
	 * value fields, having "prefix + field" as name. The value of the default
	 * field is used when the field is not provided.
	 * <p>Default is "!", for "!FIELD" parameters (e.g. "!subscribeToNewsletter").
	 * Set this to null if you want to turn off the field defaults completely.
	 * <p>HTML checkboxes only send a value when they're checked, so it is not
	 * possible to detect that a formerly checked box has just been unchecked,
	 * at least not with standard HTML means.  A default field is especially
	 * useful when a checkbox represents a non-boolean value.
	 * <p>The presence of a default parameter preempts the behavior of a field
	 * marker for the given field.
	 * @see #DEFAULT_FIELD_DEFAULT_PREFIX
	 */
	/**
	 * 指定前缀，该前缀可用于表示默认值字段的参数，并以"前缀+字段"作为名称。 
	 * 如果未提供默认字段，则使用该字段的值。 
	 *  <p>对于"！ 
	 * FIELD"参数（例如，"！ 
	 * subscribeToNewsletter"），默认值为"！ 
	 * "。 
	 * 如果您要完全关闭该字段的默认值，请将其设置为null。 
	 *  <p> HTML复选框仅在被选中时才发送值，因此无法检测到以前未选中的复选框，至少没有使用标准HTML手段。 
	 * 当复选框代表非布尔值时，默认字段特别有用。 
	 *  <p>默认参数的存在会抢占给定字段的字段标记的行为。 
	 *  
	 * @see  #DEFAULT_FIELD_DEFAULT_PREFIX
	 */
	public void setFieldDefaultPrefix(@Nullable String fieldDefaultPrefix) {
		this.fieldDefaultPrefix = fieldDefaultPrefix;
	}

	/**
	 * Return the prefix for parameters that mark default fields.
	 */
	/**
	 * 返回标记默认字段的参数的前缀。 
	 * 
	 */
	@Nullable
	public String getFieldDefaultPrefix() {
		return this.fieldDefaultPrefix;
	}

	/**
	 * Set whether to bind empty MultipartFile parameters. Default is "true".
	 * <p>Turn this off if you want to keep an already bound MultipartFile
	 * when the user resubmits the form without choosing a different file.
	 * Else, the already bound MultipartFile will be replaced by an empty
	 * MultipartFile holder.
	 * @see org.springframework.web.multipart.MultipartFile
	 */
	/**
	 * 设置是否绑定空的MultipartFile参数。 
	 * 默认值为"true"。 
	 *  <p>如果要在用户重新提交表单而不选择其他文件时保留已经绑定的MultipartFile，请关闭此选项。 
	 * 否则，已经绑定的MultipartFile将被一个空的MultipartFile持有者替换。 
	 *  
	 * @see  org.springframework.web.multipart.MultipartFile
	 */
	public void setBindEmptyMultipartFiles(boolean bindEmptyMultipartFiles) {
		this.bindEmptyMultipartFiles = bindEmptyMultipartFiles;
	}

	/**
	 * Return whether to bind empty MultipartFile parameters.
	 */
	/**
	 * 返回是否绑定空的MultipartFile参数。 
	 * 
	 */
	public boolean isBindEmptyMultipartFiles() {
		return this.bindEmptyMultipartFiles;
	}


	/**
	 * This implementation performs a field default and marker check
	 * before delegating to the superclass binding process.
	 * @see #checkFieldDefaults
	 * @see #checkFieldMarkers
	 */
	/**
	 * 此实现在委派给超类绑定过程之前执行字段默认值和标记检查。 
	 *  
	 * @see  #checkFieldDefaults 
	 * @see  #checkFieldMarkers
	 */
	@Override
	protected void doBind(MutablePropertyValues mpvs) {
		checkFieldDefaults(mpvs);
		checkFieldMarkers(mpvs);
		super.doBind(mpvs);
	}

	/**
	 * Check the given property values for field defaults,
	 * i.e. for fields that start with the field default prefix.
	 * <p>The existence of a field defaults indicates that the specified
	 * value should be used if the field is otherwise not present.
	 * @param mpvs the property values to be bound (can be modified)
	 * @see #getFieldDefaultPrefix
	 */
	/**
	 * 检查给定的属性值以获取字段默认值，即以字段默认前缀开头的字段。 
	 *  <p>默认情况下，字段的存在指示如果不存在该字段，则应使用指定的值。 
	 *  
	 * @param  mpvs绑定属性值（可以修改）
	 * @see  #getFieldDefaultPrefix
	 */
	protected void checkFieldDefaults(MutablePropertyValues mpvs) {
		String fieldDefaultPrefix = getFieldDefaultPrefix();
		if (fieldDefaultPrefix != null) {
			PropertyValue[] pvArray = mpvs.getPropertyValues();
			for (PropertyValue pv : pvArray) {
				if (pv.getName().startsWith(fieldDefaultPrefix)) {
					String field = pv.getName().substring(fieldDefaultPrefix.length());
					if (getPropertyAccessor().isWritableProperty(field) && !mpvs.contains(field)) {
						mpvs.add(field, pv.getValue());
					}
					mpvs.removePropertyValue(pv);
				}
			}
		}
	}

	/**
	 * Check the given property values for field markers,
	 * i.e. for fields that start with the field marker prefix.
	 * <p>The existence of a field marker indicates that the specified
	 * field existed in the form. If the property values do not contain
	 * a corresponding field value, the field will be considered as empty
	 * and will be reset appropriately.
	 * @param mpvs the property values to be bound (can be modified)
	 * @see #getFieldMarkerPrefix
	 * @see #getEmptyValue(String, Class)
	 */
	/**
	 * 检查字段标记的给定属性值，即以字段标记前缀开头的字段。 
	 *  <p>字段标记的存在表示指定的字段以表格形式存在。 
	 * 如果属性值不包含相应的字段值，则该字段将被视为空字段并将被适当地重置。 
	 *  
	 * @param  mpvs要绑定的属性值（可以修改）
	 * @see  #getFieldMarkerPrefix 
	 * @see  #getEmptyValue（String，Class）
	 */
	protected void checkFieldMarkers(MutablePropertyValues mpvs) {
		String fieldMarkerPrefix = getFieldMarkerPrefix();
		if (fieldMarkerPrefix != null) {
			PropertyValue[] pvArray = mpvs.getPropertyValues();
			for (PropertyValue pv : pvArray) {
				if (pv.getName().startsWith(fieldMarkerPrefix)) {
					String field = pv.getName().substring(fieldMarkerPrefix.length());
					if (getPropertyAccessor().isWritableProperty(field) && !mpvs.contains(field)) {
						Class<?> fieldType = getPropertyAccessor().getPropertyType(field);
						mpvs.add(field, getEmptyValue(field, fieldType));
					}
					mpvs.removePropertyValue(pv);
				}
			}
		}
	}

	/**
	 * Determine an empty value for the specified field.
	 * <p>The default implementation delegates to {@link #getEmptyValue(Class)}
	 * if the field type is known, otherwise falls back to {@code null}.
	 * @param field the name of the field
	 * @param fieldType the type of the field
	 * @return the empty value (for most fields: {@code null})
	 */
	/**
	 * 确定指定字段的空值。 
	 *  <p>如果字段类型已知，则默认实现将委托给{@link  #getEmptyValue（Class）}，否则回退到{@code  null}。 
	 *  
	 * @param 字段的名称
	 * @param 字段键入字段的类型
	 * @return 空值（对于大多数字段：{@code  null}）
	 */
	@Nullable
	protected Object getEmptyValue(String field, @Nullable Class<?> fieldType) {
		return (fieldType != null ? getEmptyValue(fieldType) : null);
	}

	/**
	 * Determine an empty value for the specified field.
	 * <p>The default implementation returns:
	 * <ul>
	 * <li>{@code Boolean.FALSE} for boolean fields
	 * <li>an empty array for array types
	 * <li>Collection implementations for Collection types
	 * <li>Map implementations for Map types
	 * <li>else, {@code null} is used as default
	 * </ul>
	 * @param fieldType the type of the field
	 * @return the empty value (for most fields: {@code null})
	 * @since 5.0
	 */
	/**
	 * 确定指定字段的空值。 
	 *  <p>默认实现返回：<ul> <li> {<@code> Boolean.FALSE}用于布尔字段<li>用于数组类型的空数组<li>用于集合类型的Collection实现<li>用于Map的Map实现类型<li> else，默认使用{@code  null} </ ul> 
	 * @param 字段键入字段的类型
	 * @return 空值（对于大多数字段：{@code  null} ）@从5.0
	 */
	@Nullable
	public Object getEmptyValue(Class<?> fieldType) {
		try {
			if (boolean.class == fieldType || Boolean.class == fieldType) {
				// Special handling of boolean property.
				return Boolean.FALSE;
			}
			else if (fieldType.isArray()) {
				// Special handling of array property.
				return Array.newInstance(fieldType.getComponentType(), 0);
			}
			else if (Collection.class.isAssignableFrom(fieldType)) {
				return CollectionFactory.createCollection(fieldType, 0);
			}
			else if (Map.class.isAssignableFrom(fieldType)) {
				return CollectionFactory.createMap(fieldType, 0);
			}
		}
		catch (IllegalArgumentException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug("Failed to create default value - falling back to null: " + ex.getMessage());
			}
		}
		// Default value: null.
		return null;
	}


	/**
	 * Bind all multipart files contained in the given request, if any
	 * (in case of a multipart request). To be called by subclasses.
	 * <p>Multipart files will only be added to the property values if they
	 * are not empty or if we're configured to bind empty multipart files too.
	 * @param multipartFiles a Map of field name String to MultipartFile object
	 * @param mpvs the property values to be bound (can be modified)
	 * @see org.springframework.web.multipart.MultipartFile
	 * @see #setBindEmptyMultipartFiles
	 */
	/**
	 * 绑定给定请求中包含的所有多部分文件（如果有的话）（对于多部分请求）。 
	 * 由子类调用。 
	 *  <p>只有在不为空或者我们也配置为绑定空的多部分文件时，多部分文件才会被添加到属性值中。 
	 *  
	 * @param  multipartFiles字段名称字符串到MultipartFile对象的映射
	 * @param  mpvs要绑定的属性值（可以修改）
	 * @see  org.springframework.web.multipart.MultipartFile 
	 * @see  #setBindEmptyMultipartFiles
	 */
	protected void bindMultipart(Map<String, List<MultipartFile>> multipartFiles, MutablePropertyValues mpvs) {
		multipartFiles.forEach((key, values) -> {
			if (values.size() == 1) {
				MultipartFile value = values.get(0);
				if (isBindEmptyMultipartFiles() || !value.isEmpty()) {
					mpvs.add(key, value);
				}
			}
			else {
				mpvs.add(key, values);
			}
		});
	}

}
