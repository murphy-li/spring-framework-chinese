/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.multipart;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;

import org.springframework.core.io.InputStreamSource;
import org.springframework.core.io.Resource;
import org.springframework.lang.Nullable;
import org.springframework.util.FileCopyUtils;

/**
 * A representation of an uploaded file received in a multipart request.
 *
 * <p>The file contents are either stored in memory or temporarily on disk.
 * In either case, the user is responsible for copying file contents to a
 * session-level or persistent store as and if desired. The temporary storage
 * will be cleared at the end of request processing.
 *
 * @author Juergen Hoeller
 * @author Trevor D. Cook
 * @since 29.09.2003
 * @see org.springframework.web.multipart.MultipartHttpServletRequest
 * @see org.springframework.web.multipart.MultipartResolver
 */
/**
 * 多部分请求中收到的上载文件的表示形式。 
 *  <p>文件内容要么存储在内存中，要么临时存储在磁盘上。 
 * 在任何一种情况下，用户都有责任根据需要将文件内容复制到会话级或持久性存储中。 
 * 临时存储将在请求处理结束时清除。 
 *  @author  Juergen Hoeller @author  Trevor D.Cook @自29.09.2003 
 * @see  org.springframework.web.multipart.MultipartHttpServletRequest 
 * @see  org.springframework.web.multipart.MultipartResolver
 */
public interface MultipartFile extends InputStreamSource {

	/**
	 * Return the name of the parameter in the multipart form.
	 * @return the name of the parameter (never {@code null} or empty)
	 */
	/**
	 * 以多部分形式返回参数名称。 
	 *  
	 * @return 参数名称（不要{@code  null}或为空）
	 */
	String getName();

	/**
	 * Return the original filename in the client's filesystem.
	 * <p>This may contain path information depending on the browser used,
	 * but it typically will not with any other than Opera.
	 * @return the original filename, or the empty String if no file has been chosen
	 * in the multipart form, or {@code null} if not defined or not available
	 * @see org.apache.commons.fileupload.FileItem#getName()
	 * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename
	 */
	/**
	 * 返回客户端文件系统中的原始文件名。 
	 *  <p>其中可能包含路径信息，具体取决于所使用的浏览器，但通常不包含Opera以外的其他任何信息。 
	 *  
	 * @return 原始文件名； 
	 * 如果未以多部分形式选择文件，则为空字符串； 
	 * 如果未定义或不可用，则为{@code  null} 
	 * @see  org.apache.commons.fileupload.FileItem #getName（）
	 * @see  org.springframework.web.multipart.commons.CommonsMultipartFile＃setPreserveFilename
	 */
	@Nullable
	String getOriginalFilename();

	/**
	 * Return the content type of the file.
	 * @return the content type, or {@code null} if not defined
	 * (or no file has been chosen in the multipart form)
	 */
	/**
	 * 返回文件的内容类型。 
	 *  
	 * @return 内容类型，如果未定义，则为{<@@code> null}（或者没有以多部分形式选择文件）
	 */
	@Nullable
	String getContentType();

	/**
	 * Return whether the uploaded file is empty, that is, either no file has
	 * been chosen in the multipart form or the chosen file has no content.
	 */
	/**
	 * 返回上载的文件是否为空，即，是否没有以多部分形式选择文件或选择的文件没有内容。 
	 * 
	 */
	boolean isEmpty();

	/**
	 * Return the size of the file in bytes.
	 * @return the size of the file, or 0 if empty
	 */
	/**
	 * 返回文件的大小（以字节为单位）。 
	 *  
	 * @return 文件的大小； 
	 * 如果为空，则为0
	 */
	long getSize();

	/**
	 * Return the contents of the file as an array of bytes.
	 * @return the contents of the file as bytes, or an empty byte array if empty
	 * @throws IOException in case of access errors (if the temporary store fails)
	 */
	/**
	 * 以字节数组形式返回文件的内容。 
	 *  
	 * @return 以字节为单位的文件内容，如果为空，则为空的字节数组。 
	 * 
	 * @throws  IOException如果发生访问错误（如果临时存储失败）
	 */
	byte[] getBytes() throws IOException;

	/**
	 * Return an InputStream to read the contents of the file from.
	 * <p>The user is responsible for closing the returned stream.
	 * @return the contents of the file as stream, or an empty stream if empty
	 * @throws IOException in case of access errors (if the temporary store fails)
	 */
	/**
	 * 返回一个InputStream，以从中读取文件的内容。 
	 *  <p>用户负责关闭返回的流。 
	 *  
	 * @return 作为流的文件内容，如果为空，则为空流
	 * @throws  IOException，如果发生访问错误（如果临时存储失败）
	 */
	@Override
	InputStream getInputStream() throws IOException;

	/**
	 * Return a Resource representation of this MultipartFile. This can be used
	 * as input to the {@code RestTemplate} or the {@code WebClient} to expose
	 * content length and the filename along with the InputStream.
	 * @return this MultipartFile adapted to the Resource contract
	 * @since 5.1
	 */
	/**
	 * 返回此MultipartFile的资源表示形式。 
	 * 可以将其用作{@code  RestTemplate}或{@code  WebClient}的输入，以显示内容长度和文件名以及InputStream。 
	 *  
	 * @return 此MultipartFile自5.1起开始适应资源合同
	 */
	default Resource getResource() {
		return new MultipartFileResource(this);
	}

	/**
	 * Transfer the received file to the given destination file.
	 * <p>This may either move the file in the filesystem, copy the file in the
	 * filesystem, or save memory-held contents to the destination file. If the
	 * destination file already exists, it will be deleted first.
	 * <p>If the target file has been moved in the filesystem, this operation
	 * cannot be invoked again afterwards. Therefore, call this method just once
	 * in order to work with any storage mechanism.
	 * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage
	 * may be container-dependent, including the base directory for relative
	 * destinations specified here (e.g. with Servlet 3.0 multipart handling).
	 * For absolute destinations, the target file may get renamed/moved from its
	 * temporary location or newly copied, even if a temporary copy already exists.
	 * @param dest the destination file (typically absolute)
	 * @throws IOException in case of reading or writing errors
	 * @throws IllegalStateException if the file has already been moved
	 * in the filesystem and is not available anymore for another transfer
	 * @see org.apache.commons.fileupload.FileItem#write(File)
	 * @see javax.servlet.http.Part#write(String)
	 */
	/**
	 * 将收到的文件传输到给定的目标文件。 
	 *  <p>这可以在文件系统中移动文件，在文件系统中复制文件，或将内存保存的内容保存到目标文件。 
	 * 如果目标文件已经存在，则将首先删除它。 
	 *  <p>如果目标文件已在文件系统中移动，则此操作之后不能再次调用。 
	 * 因此，只需调用一次此方法即可使用任何存储机制。 
	 *  <p> <b>注意：</ b>取决于基础提供程序，临时存储可能取决于容器，包括此处指定的相对目标的基本目录（例如，使用Servlet 3.0多部分处理）。 
	 * 对于绝对目标，即使已经存在临时副本，目标文件也可能会从其临时位置重命名/移动或重新复制。 
	 *  
	 * @param 存放目标文件（通常是绝对文件）
	 * @throws 发生读取或写入错误时发生IOException > org.apache.commons.fileupload.FileItem＃write（File）
	 * @see  javax.servlet.http.Part＃write（String）
	 */
	void transferTo(File dest) throws IOException, IllegalStateException;

	/**
	 * Transfer the received file to the given destination file.
	 * <p>The default implementation simply copies the file input stream.
	 * @since 5.1
	 * @see #getInputStream()
	 * @see #transferTo(File)
 	 */
	/**
	 * 将收到的文件传输到给定的目标文件。 
	 *  <p>默认实现只是复制文件输入流。 
	 *  @since 5.1 
	 * @see  #getInputStream（）
	 * @see  #transferTo（File）
	 */
	default void transferTo(Path dest) throws IOException, IllegalStateException {
		FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));
	}

}
