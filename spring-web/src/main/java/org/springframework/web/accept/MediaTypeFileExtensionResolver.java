/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.accept;

import java.util.List;

import org.springframework.http.MediaType;

/**
 * Strategy to resolve a {@link MediaType} to a list of file extensions &mdash;
 * for example, to resolve "application/json" to "json".
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 将{@link  MediaType}解析为文件扩展名列表的策略-例如，将"application / json"解析为"json"。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public interface MediaTypeFileExtensionResolver {

	/**
	 * Resolve the given media type to a list of file extensions.
	 * @param mediaType the media type to resolve
	 * @return a list of extensions or an empty list (never {@code null})
	 */
	/**
	 * 将给定的媒体类型解析为文件扩展名列表。 
	 *  
	 * @param  mediaType键入要解析的媒体类型
	 * @return 扩展列表或空列表（永远{@code  null}）
	 */
	List<String> resolveFileExtensions(MediaType mediaType);

	/**
	 * Get all registered file extensions.
	 * @return a list of extensions or an empty list (never {@code null})
	 */
	/**
	 * 获取所有注册的文件扩展名。 
	 *  
	 * @return 扩展名列表或空列表（决不{<@@code> null}）
	 */
	List<String> getAllFileExtensions();

}
