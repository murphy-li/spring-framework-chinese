/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.accept;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.http.MediaType;
import org.springframework.http.MediaTypeFactory;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.web.context.ServletContextAware;

/**
 * Factory to create a {@code ContentNegotiationManager} and configure it with
 * {@link ContentNegotiationStrategy} instances.
 *
 * <p>This factory offers properties that in turn result in configuring the
 * underlying strategies. The table below shows the property names, their
 * default settings, as well as the strategies that they help to configure:
 *
 * <table>
 * <tr>
 * <th>Property Setter</th>
 * <th>Default Value</th>
 * <th>Underlying Strategy</th>
 * <th>Enabled Or Not</th>
 * </tr>
 * <tr>
 * <td>{@link #setFavorPathExtension favorPathExtension}</td>
 * <td>true</td>
 * <td>{@link PathExtensionContentNegotiationStrategy}</td>
 * <td>Enabled</td>
 * </tr>
 * <tr>
 * <td>{@link #setFavorParameter favorParameter}</td>
 * <td>false</td>
 * <td>{@link ParameterContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * <tr>
 * <td>{@link #setIgnoreAcceptHeader ignoreAcceptHeader}</td>
 * <td>false</td>
 * <td>{@link HeaderContentNegotiationStrategy}</td>
 * <td>Enabled</td>
 * </tr>
 * <tr>
 * <td>{@link #setDefaultContentType defaultContentType}</td>
 * <td>null</td>
 * <td>{@link FixedContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * <tr>
 * <td>{@link #setDefaultContentTypeStrategy defaultContentTypeStrategy}</td>
 * <td>null</td>
 * <td>{@link ContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * </table>
 *
 * <p>Alternatively you can avoid use of the above convenience builder
 * methods and set the exact strategies to use via
 * {@link #setStrategies(List)}.
 *
 * <p><strong>Note:</strong> As of 5.2.4,
 * {@link #setFavorPathExtension(boolean) favorPathExtension} and
 * {@link #setIgnoreUnknownPathExtensions(boolean) ignoreUnknownPathExtensions}
 * are deprecated in order to discourage use of path extensions for content
 * negotiation as well as for request mapping (with similar deprecations in
 * {@link org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
 * RequestMappingHandlerMapping}). For further context, please read issue
 * <a href="https://github.com/spring-projects/spring-framework/issues/24179">#24719</a>.
 *
 * @author Rossen Stoyanchev
 * @author Brian Clozel
 * @since 3.2
 */
/**
 * 工厂创建一个{@code  ContentNegotiationManager}并使用{@link  ContentNegotiationStrategy}实例对其进行配置。 
 *  <p>此工厂提供的属性反过来会导致配置基础策略。 
 * 下表显示了属性名称，它们的默认设置以及有助于配置的策略：<table> <tr> <th>属性设置器</ th> <th>默认值</ th> <th>底层策略</ th> <th>是否启用</ th> </ tr> <tr> <td> {<@link> #setFavorPathExtensionfavorPathExtension} </ td> <td> true </ td> <td> {@link  PathExtensionContentNegotiationStrategy} </ td> <td>已启用</ td> </ tr> <tr> <td> {<@link> #setFavorParameteravourParameter} </ td> <td> false </ td> <td> {<@link> ParameterContentNegotiationStrategy} </ td> <td>关闭</ td> </ tr> <tr> <td> {<@link> #setIgnoreAcceptHeader ignoreAcceptHeader} </ td> <td> false < / td> <td> {<@link> HeaderContentNegotiationStrategy} </ td> <td>已启用</ td> </ tr> <tr> <td> {<@link> #setDefaultContentType defaultContentType} </ td> <td >空</ td> <td> {<@link> FixedContentNegotiationStrategy} </ td> <td>关闭</ td> </ tr> <tr> <td> {<@link> #setDefaultContentTypeStrategy defaultContentTypeStrategy} </ td > <td>空</ td> <td> {<@link> ContentNegotiationStrategy} </ td> < td>关闭</ td> </ tr> </ table> <p>或者，您可以避免使用上述便捷构建器方法，而可以通过{@link  #setStrategies（List）}设置要使用的确切策略。 
 *  <p> <strong>注意：</ strong>从5.2.4版本开始，不建议使用{@link  #setFavorPathExtension（boolean）favorPathExtension}和{@link  #setIgnoreUnknownPathExtensions（boolean）ignoreUnknownPathExtensions}，以阻止使用内容协商和请求映射的路径扩展（在{@link  org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping RequestMappingHandlerMapping}中使用类似的弃用）。 
 * 有关更多背景信息，请阅读问题<a href="https://github.com/spring-projects/spring-framework/issues/24179">＃24719 </a>。 
 *  @author 罗森·斯托扬切夫@author  Brian Clozel @3.2起
 */
public class ContentNegotiationManagerFactoryBean
		implements FactoryBean<ContentNegotiationManager>, ServletContextAware, InitializingBean {

	@Nullable
	private List<ContentNegotiationStrategy> strategies;


	private boolean favorPathExtension = true;

	private boolean favorParameter = false;

	private boolean ignoreAcceptHeader = false;

	private Map<String, MediaType> mediaTypes = new HashMap<>();

	private boolean ignoreUnknownPathExtensions = true;

	@Nullable
	private Boolean useRegisteredExtensionsOnly;

	private String parameterName = "format";

	@Nullable
	private ContentNegotiationStrategy defaultNegotiationStrategy;

	@Nullable
	private ContentNegotiationManager contentNegotiationManager;

	@Nullable
	private ServletContext servletContext;


	/**
	 * Set the exact list of strategies to use.
	 * <p><strong>Note:</strong> use of this method is mutually exclusive with
	 * use of all other setters in this class which customize a default, fixed
	 * set of strategies. See class level doc for more details.
	 * @param strategies the strategies to use
	 * @since 5.0
	 */
	/**
	 * 设置要使用的策略的确切列表。 
	 *  <p> <strong>注意</ strong>：此方法的使用与该类中的所有其他设置器（定义默认的固定策略集）互斥。 
	 * 有关更多详细信息，请参见类级文档。 
	 *  
	 * @param 策略自@5.0起使用策略
	 */
	public void setStrategies(@Nullable List<ContentNegotiationStrategy> strategies) {
		this.strategies = (strategies != null ? new ArrayList<>(strategies) : null);
	}

	/**
	 * Whether the path extension in the URL path should be used to determine
	 * the requested media type.
	 * <p>By default this is set to {@code true} in which case a request
	 * for {@code /hotels.pdf} will be interpreted as a request for
	 * {@code "application/pdf"} regardless of the 'Accept' header.
	 * @deprecated as of 5.2.4. See class-level note on the deprecation of path
	 * extension config options.
	 */
	/**
	 * URL路径中的路径扩展是否应用于确定请求的媒体类型。 
	 *  <p>默认情况下，此设置为{@code  true}，在这种情况下，对{@code  /hotels.pdf}的请求将被解释为对{@code "application / pdf"}的请求无论"Accept"标头如何。 
	 * 从5.2.4开始不推荐使用。 
	 * 请参阅有关弃用路径扩展配置选项的类级别注释。 
	 * 
	 */
	@Deprecated
	public void setFavorPathExtension(boolean favorPathExtension) {
		this.favorPathExtension = favorPathExtension;
	}

	/**
	 * Add a mapping from a key to a MediaType where the key are normalized to
	 * lowercase and may have been extracted from a path extension, a filename
	 * extension, or passed as a query parameter.
	 * <p>The {@link #setFavorParameter(boolean) parameter strategy} requires
	 * such mappings in order to work while the {@link #setFavorPathExtension(boolean)
	 * path extension strategy} can fall back on lookups via
	 * {@link ServletContext#getMimeType} and
	 * {@link org.springframework.http.MediaTypeFactory}.
	 * <p><strong>Note:</strong> Mappings registered here may be accessed via
	 * {@link ContentNegotiationManager#getMediaTypeMappings()} and may be used
	 * not only in the parameter and path extension strategies. For example,
	 * with the Spring MVC config, e.g. {@code @EnableWebMvc} or
	 * {@code <mvc:annotation-driven>}, the media type mappings are also plugged
	 * in to:
	 * <ul>
	 * <li>Determine the media type of static resources served with
	 * {@code ResourceHttpRequestHandler}.
	 * <li>Determine the media type of views rendered with
	 * {@code ContentNegotiatingViewResolver}.
	 * <li>Whitelist extensions for RFD attack detection (check the Spring
	 * Framework reference docs for details).
	 * </ul>
	 * @param mediaTypes media type mappings
	 * @see #addMediaType(String, MediaType)
	 * @see #addMediaTypes(Map)
	 */
	/**
	 * 添加从键到MediaType的映射，其中键被标准化为小写，并且可能已从路径扩展名，文件名扩展名提取或作为查询参数传递。 
	 *  <p> {<@link> #setFavorParameter（boolean）参数策略}需要这样的映射才能起作用，而{@link  #setFavorPathExtension（boolean）路径扩展​​策略}可以通过{<@link > ServletContext＃getMimeType}和{@link  org.springframework.http.MediaTypeFactory}。 
	 *  <p> <strong>注意</ strong>：在此处注册的映射可以通过{@link  ContentNegotiationManager＃getMediaTypeMappings（）}访问，并且不仅可以在参数和路径扩展策略中使用。 
	 * 例如，使用Spring MVC配置，例如{@code  @EnableWebMvc}或{@code  <mvc：annotation-driven>}，媒体类型映射也插入到：<ul> <li>确定由{@code  ResourceHttpRequestHandler}。 
	 *  <li>确定使用{@code  ContentNegotiatingViewResolver}渲染的视图的媒体类型。 
	 *  <li>用于RFD攻击检测的白名单扩展（有关详细信息，请参见Spring Framework参考文档）。 
	 *  </ ul> 
	 * @param  mediaTypes媒体类型映射
	 * @see  #addMediaType（String，MediaType）
	 * @see  #addMediaTypes（Map）
	 */
	public void setMediaTypes(Properties mediaTypes) {
		if (!CollectionUtils.isEmpty(mediaTypes)) {
			mediaTypes.forEach((key, value) ->
					addMediaType((String) key, MediaType.valueOf((String) value)));
		}
	}

	/**
	 * An alternative to {@link #setMediaTypes} for programmatic registrations.
	 */
	/**
	 * {@link  #setMediaTypes}的替代方法，用于程序化注册。 
	 * 
	 */
	public void addMediaType(String key, MediaType mediaType) {
		this.mediaTypes.put(key.toLowerCase(Locale.ENGLISH), mediaType);
	}

	/**
	 * An alternative to {@link #setMediaTypes} for programmatic registrations.
	 */
	/**
	 * {@link  #setMediaTypes}的替代方法，用于程序化注册。 
	 * 
	 */
	public void addMediaTypes(@Nullable Map<String, MediaType> mediaTypes) {
		if (mediaTypes != null) {
			mediaTypes.forEach(this::addMediaType);
		}
	}

	/**
	 * Whether to ignore requests with path extension that cannot be resolved
	 * to any media type. Setting this to {@code false} will result in an
	 * {@code HttpMediaTypeNotAcceptableException} if there is no match.
	 * <p>By default this is set to {@code true}.
	 * @deprecated as of 5.2.4. See class-level note on the deprecation of path
	 * extension config options.
	 */
	/**
	 * 是否忽略无法解析为任何媒体类型的具有路径扩展名的请求。 
	 * 如果不匹配，则将其设置为{@code  false}将导致{@code  HttpMediaTypeNotAcceptableException}。 
	 *  <p>默认情况下，此设置为{@code  true}。 
	 * 从5.2.4开始不推荐使用。 
	 * 请参阅有关弃用路径扩展配置选项的类级别注释。 
	 * 
	 */
	@Deprecated
	public void setIgnoreUnknownPathExtensions(boolean ignore) {
		this.ignoreUnknownPathExtensions = ignore;
	}

	/**
	 * Indicate whether to use the Java Activation Framework as a fallback option
	 * to map from file extensions to media types.
	 * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which
	 * has reverse behavior.
	 */
	/**
	 * 指示是否使用Java激活框架作为后备选项，以从文件扩展名映射到媒体类型。 
	 *  @从5.0开始不推荐使用，而推荐使用{@link  #setUseRegisteredExtensionsOnly（boolean）}，它具有相反的行为。 
	 * 
	 */
	@Deprecated
	public void setUseJaf(boolean useJaf) {
		setUseRegisteredExtensionsOnly(!useJaf);
	}

	/**
	 * When {@link #setFavorPathExtension favorPathExtension} or
	 * {@link #setFavorParameter(boolean)} is set, this property determines
	 * whether to use only registered {@code MediaType} mappings or to allow
	 * dynamic resolution, e.g. via {@link MediaTypeFactory}.
	 * <p>By default this is not set in which case dynamic resolution is on.
	 */
	/**
	 * 设置{@link  #setFavorPathExtension preferredPathExtension}或{@link  #setFavorParameter（boolean）}时，此属性确定是仅使用注册的{@code  MediaType}映射还是允许动态解析，例如通过{@link  MediaTypeFactory}。 
	 *  <p>默认情况下未设置此选项，在这种情况下将启用动态分辨率。 
	 * 
	 */
	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {
		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;
	}

	private boolean useRegisteredExtensionsOnly() {
		return (this.useRegisteredExtensionsOnly != null && this.useRegisteredExtensionsOnly);
	}

	/**
	 * Whether a request parameter ("format" by default) should be used to
	 * determine the requested media type. For this option to work you must
	 * register {@link #setMediaTypes media type mappings}.
	 * <p>By default this is set to {@code false}.
	 * @see #setParameterName
	 */
	/**
	 * 是否应使用请求参数（默认为"格式"）来确定请求的媒体类型。 
	 * 为了使该选项起作用，您必须注册{@link  #setMediaTypes媒体类型映射}。 
	 *  <p>默认情况下，此设置为{@code  false}。 
	 *  
	 * @see  #setParameterName
	 */
	public void setFavorParameter(boolean favorParameter) {
		this.favorParameter = favorParameter;
	}

	/**
	 * Set the query parameter name to use when {@link #setFavorParameter} is on.
	 * <p>The default parameter name is {@code "format"}.
	 */
	/**
	 * 设置在打开{@link  #setFavorParameter}时使用的查询参数名称。 
	 *  <p>默认参数名称为{@code "format"}。 
	 * 
	 */
	public void setParameterName(String parameterName) {
		Assert.notNull(parameterName, "parameterName is required");
		this.parameterName = parameterName;
	}

	/**
	 * Whether to disable checking the 'Accept' request header.
	 * <p>By default this value is set to {@code false}.
	 */
	/**
	 * 是否禁用检查"接受"请求标头。 
	 *  <p>默认情况下，此值设置为{@code  false}。 
	 * 
	 */
	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {
		this.ignoreAcceptHeader = ignoreAcceptHeader;
	}

	/**
	 * Set the default content type to use when no content type is requested.
	 * <p>By default this is not set.
	 * @see #setDefaultContentTypeStrategy
	 */
	/**
	 * 设置默认内容类型以在不请求任何内容类型时使用。 
	 *  <p>默认情况下未设置。 
	 *  
	 * @see  #setDefaultContentTypeStrategy
	 */
	public void setDefaultContentType(MediaType contentType) {
		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentType);
	}

	/**
	 * Set the default content types to use when no content type is requested.
	 * <p>By default this is not set.
	 * @since 5.0
	 * @see #setDefaultContentTypeStrategy
	 */
	/**
	 * 设置不请求任何内容类型时要使用的默认内容类型。 
	 *  <p>默认情况下未设置。 
	 *  @since 5.0 
	 * @see  #setDefaultContentTypeStrategy
	 */
	public void setDefaultContentTypes(List<MediaType> contentTypes) {
		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes);
	}

	/**
	 * Set a custom {@link ContentNegotiationStrategy} to use to determine
	 * the content type to use when no content type is requested.
	 * <p>By default this is not set.
	 * @since 4.1.2
	 * @see #setDefaultContentType
	 */
	/**
	 * 设置自定义{@link  ContentNegotiationStrategy}，以用于确定在不请求任何内容类型时要使用的内容类型。 
	 *  <p>默认情况下未设置。 
	 *  @since 4.1.2 
	 * @see  #setDefaultContentType
	 */
	public void setDefaultContentTypeStrategy(ContentNegotiationStrategy strategy) {
		this.defaultNegotiationStrategy = strategy;
	}

	/**
	 * Invoked by Spring to inject the ServletContext.
	 */
	/**
	 * 由Spring调用以注入ServletContext。 
	 * 
	 */
	@Override
	public void setServletContext(ServletContext servletContext) {
		this.servletContext = servletContext;
	}


	@Override
	public void afterPropertiesSet() {
		build();
	}

	/**
	 * Create and initialize a {@link ContentNegotiationManager} instance.
	 * @since 5.0
	 */
	/**
	 * 创建并初始化{@link  ContentNegotiationManager}实例。 
	 *  @5.0起
	 */
	@SuppressWarnings("deprecation")
	public ContentNegotiationManager build() {
		List<ContentNegotiationStrategy> strategies = new ArrayList<>();

		if (this.strategies != null) {
			strategies.addAll(this.strategies);
		}
		else {
			if (this.favorPathExtension) {
				PathExtensionContentNegotiationStrategy strategy;
				if (this.servletContext != null && !useRegisteredExtensionsOnly()) {
					strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes);
				}
				else {
					strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);
				}
				strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);
				if (this.useRegisteredExtensionsOnly != null) {
					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly);
				}
				strategies.add(strategy);
			}
			if (this.favorParameter) {
				ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes);
				strategy.setParameterName(this.parameterName);
				if (this.useRegisteredExtensionsOnly != null) {
					strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly);
				}
				else {
					strategy.setUseRegisteredExtensionsOnly(true);  // backwards compatibility
				}
				strategies.add(strategy);
			}
			if (!this.ignoreAcceptHeader) {
				strategies.add(new HeaderContentNegotiationStrategy());
			}
			if (this.defaultNegotiationStrategy != null) {
				strategies.add(this.defaultNegotiationStrategy);
			}
		}

		this.contentNegotiationManager = new ContentNegotiationManager(strategies);

		// Ensure media type mappings are available via ContentNegotiationManager#getMediaTypeMappings()
		// independent of path extension or parameter strategies.

		if (!CollectionUtils.isEmpty(this.mediaTypes) && !this.favorPathExtension && !this.favorParameter) {
			this.contentNegotiationManager.addFileExtensionResolvers(
					new MappingMediaTypeFileExtensionResolver(this.mediaTypes));
		}

		return this.contentNegotiationManager;
	}


	@Override
	@Nullable
	public ContentNegotiationManager getObject() {
		return this.contentNegotiationManager;
	}

	@Override
	public Class<?> getObjectType() {
		return ContentNegotiationManager.class;
	}

	@Override
	public boolean isSingleton() {
		return true;
	}

}
