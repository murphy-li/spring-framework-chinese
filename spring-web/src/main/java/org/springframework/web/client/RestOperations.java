/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.client;

import java.net.URI;
import java.util.Map;
import java.util.Set;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;

/**
 * Interface specifying a basic set of RESTful operations.
 * Implemented by {@link RestTemplate}. Not often used directly, but a useful
 * option to enhance testability, as it can easily be mocked or stubbed.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 3.0
 * @see RestTemplate
 */
/**
 * 指定一组基本的RESTful操作的接口。 
 * 由{@link  RestTemplate}实现。 
 * 它不经常直接使用，而是增强可测试性的有用选项，因为它很容易被嘲笑或存根。 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @从3.0开始
 * @see  RestTemplate
 */
public interface RestOperations {

	// GET

	/**
	 * Retrieve a representation by doing a GET on the specified URL.
	 * The response (if any) is converted and returned.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 */
	/**
	 * 通过在指定的URL上进行GET检索表示形式。 
	 * 响应（如果有）将被转换并返回。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @param  uri使变量可变以扩展模板
	 * @return 转换后的对象
	 */
	@Nullable
	<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;

	/**
	 * Retrieve a representation by doing a GET on the URI template.
	 * The response (if any) is converted and returned.
	 * <p>URI Template variables are expanded using the given map.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @param uriVariables the map containing variables for the URI template
	 * @return the converted object
	 */
	/**
	 * 通过在URI模板上执行GET检索表示形式。 
	 * 响应（如果有）将被转换并返回。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @param  uriVariables包含URI模板变量的映射
	 * @return 转换后的对象
	 */
	@Nullable
	<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Retrieve a representation by doing a GET on the URL .
	 * The response (if any) is converted and returned.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @return the converted object
	 */
	/**
	 * 通过对URL进行GET检索表示形式。 
	 * 响应（如果有）将被转换并返回。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @return 转换后的对象
	 */
	@Nullable
	<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;

	/**
	 * Retrieve an entity by doing a GET on the specified URL.
	 * The response is converted and stored in an {@link ResponseEntity}.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the entity
	 * @since 3.0.2
	 */
	/**
	 * 通过在指定的URL上执行GET检索实体。 
	 * 响应被转换并存储在{@link  ResponseEntity}中。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @param  uriVariables变量以扩展模板
	 * @return 实体@since 3.0.2起
	 */
	<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)
			throws RestClientException;

	/**
	 * Retrieve a representation by doing a GET on the URI template.
	 * The response is converted and stored in an {@link ResponseEntity}.
	 * <p>URI Template variables are expanded using the given map.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @param uriVariables the map containing variables for the URI template
	 * @return the converted object
	 * @since 3.0.2
	 */
	/**
	 * 通过在URI模板上执行GET检索表示形式。 
	 * 响应被转换并存储在{@link  ResponseEntity}中。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @param  uriVariables包含URI模板变量的映射
	 * @return 转换后的对象@since 3.0.2
	 */
	<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)
			throws RestClientException;

	/**
	 * Retrieve a representation by doing a GET on the URL .
	 * The response is converted and stored in an {@link ResponseEntity}.
	 * @param url the URL
	 * @param responseType the type of the return value
	 * @return the converted object
	 * @since 3.0.2
	 */
	/**
	 * 通过对URL进行GET检索表示形式。 
	 * 响应被转换并存储在{@link  ResponseEntity}中。 
	 *  
	 * @param  url URL 
	 * @param  responseType返回值的类型
	 * @return 转换后的对象@since 3.0.2起
	 */
	<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;


	// HEAD

	/**
	 * Retrieve all headers of the resource specified by the URI template.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param uriVariables the variables to expand the template
	 * @return all HTTP headers of that resource
	 */
	/**
	 * 检索URI模板指定的资源的所有标头。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  URL URL 
	 * @param  uri可变变量以扩展模板
	 * @return 该资源的所有HTTP标头
	 */
	HttpHeaders headForHeaders(String url, Object... uriVariables) throws RestClientException;

	/**
	 * Retrieve all headers of the resource specified by the URI template.
	 * <p>URI Template variables are expanded using the given map.
	 * @param url the URL
	 * @param uriVariables the map containing variables for the URI template
	 * @return all HTTP headers of that resource
	 */
	/**
	 * 检索URI模板指定的资源的所有标头。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  
	 * @param  URL URL 
	 * @param  uri对包含URI模板变量的映射进行变量映射
	 * @return 该资源的所有HTTP标头
	 */
	HttpHeaders headForHeaders(String url, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Retrieve all headers of the resource specified by the URL.
	 * @param url the URL
	 * @return all HTTP headers of that resource
	 */
	/**
	 * 检索URL指定的资源的所有标头。 
	 *  
	 * @param 将该URL的URL 
	 * @return  URL的所有HTTP标头
	 */
	HttpHeaders headForHeaders(URI url) throws RestClientException;


	// POST

	/**
	 * Create a new resource by POSTing the given object to the URI template, and returns the value of
	 * the {@code Location} header. This header typically indicates where the new resource is stored.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @return the value for the {@code Location} header
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URI模板来创建新资源，并返回{@code  Location}标头的值。 
	 * 此标头通常指示新资源的存储位置。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @return  {<@的值代码>位置}标头
	 * @see  HttpEntity
	 */
	@Nullable
	URI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URI template, and returns the value of
	 * the {@code Location} header. This header typically indicates where the new resource is stored.
	 * <p>URI Template variables are expanded using the given map.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @return the value for the {@code Location} header
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URI模板来创建新资源，并返回{@code  Location}标头的值。 
	 * 此标头通常指示新资源的存储位置。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 * <p>实体的主体或{@code  request}本身，可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}来创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @return  {<@的值代码>位置}标头
	 * @see  HttpEntity
	 */
	@Nullable
	URI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)
			throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URL, and returns the value of the
	 * {@code Location} header. This header typically indicates where the new resource is stored.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @return the value for the {@code Location} header
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URL来创建新资源，并返回{@code  Location}标头的值。 
	 * 此标头通常指示新资源的存储位置。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可以为{@code  null}）
	 * @return  {@code  Location}标头的值
	 * @see  HttpEntity
	 */
	@Nullable
	URI postForLocation(URI url, @Nullable Object request) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URI template,
	 * and returns the representation found in the response.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URI模板来创建新资源，并返回在响应中找到的表示形式。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  responseType返回值的类型
	 * @param  uri可变变量以扩展模板
	 * @return 转换后的对象
	 * @see  HttpEntity
	 */
	@Nullable
	<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,
			Object... uriVariables) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URI template,
	 * and returns the representation found in the response.
	 * <p>URI Template variables are expanded using the given map.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URI模板来创建新资源，并返回在响应中找到的表示形式。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  responseType返回值的类型
	 * @param  uri可变变量以扩展模板
	 * @return 转换后的对象
	 * @see  HttpEntity
	 */
	@Nullable
	<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,
			Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URL,
	 * and returns the representation found in the response.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param responseType the type of the return value
	 * @return the converted object
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URL来创建新资源，并返回在响应中找到的表示形式。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  responseType返回值的类型
	 * @return 转换后的对象
	 * @see  HttpEntity
	 */
	@Nullable
	<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URI template,
	 * and returns the response as {@link ResponseEntity}.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @since 3.0.2
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URI模板来创建新资源，并将响应作为{@link  ResponseEntity}返回。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @return 从3.0开始的转换对象。 
	 *  2 
	 * @see  HttpEntity
	 */
	<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,
			Object... uriVariables) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URI template,
	 * and returns the response as {@link HttpEntity}.
	 * <p>URI Template variables are expanded using the given map.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @since 3.0.2
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象过帐到URI模板来创建新资源，并将响应返回为{@link  HttpEntity}。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @return 从3.0开始的转换对象。 
	 *  2 
	 * @see  HttpEntity
	 */
	<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,
			Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Create a new resource by POSTing the given object to the URL,
	 * and returns the response as {@link ResponseEntity}.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p>The body of the entity, or {@code request} itself, can be a
	 * {@link org.springframework.util.MultiValueMap MultiValueMap} to create a multipart request.
	 * The values in the {@code MultiValueMap} can be any Object representing the body of the part,
	 * or an {@link org.springframework.http.HttpEntity HttpEntity} representing a part with body
	 * and headers.
	 * @param url the URL
	 * @param request the Object to be POSTed (may be {@code null})
	 * @return the converted object
	 * @since 3.0.2
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象发布到URL来创建新资源，并将响应作为{@link  ResponseEntity}返回。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p>实体的主体或{@code  request}本身可以是{@link  org.springframework.util.MultiValueMap MultiValueMap}以创建多部分请求。 
	 *  {@code  MultiValueMap}中的值可以是表示零件主体的任何Object，也可以是表示具有主体和标题的零件的{@link  org.springframework.http.HttpEntity HttpEntity}。 
	 *  
	 * @param  url URL 
	 * @param 请求要发布的对象（可能是{@code  null}）
	 * @return 转换后的对象@3.0.2起
	 * @see  HttpEntity
	 */
	<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)
			throws RestClientException;


	// PUT

	/**
	 * Create or update a resource by PUTting the given object to the URI.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * @param url the URL
	 * @param request the Object to be PUT (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象放入URI来创建或更新资源。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  
	 * @param  url URL 
	 * @param 请求对象为PUT（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @see  HttpEntity
	 */
	void put(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;

	/**
	 * Creates a new resource by PUTting the given object to URI template.
	 * <p>URI Template variables are expanded using the given map.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * @param url the URL
	 * @param request the Object to be PUT (may be {@code null})
	 * @param uriVariables the variables to expand the template
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象放入URI模板来创建新资源。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  
	 * @param  url URL 
	 * @param 请求对象为PUT（可能为{@code  null}）
	 * @param  uriVariables变量以扩展模板
	 * @see  HttpEntity
	 */
	void put(String url, @Nullable Object request, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Creates a new resource by PUTting the given object to URL.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * @param url the URL
	 * @param request the Object to be PUT (may be {@code null})
	 * @see HttpEntity
	 */
	/**
	 * 通过将给定对象放入URL来创建新资源。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  
	 * @param  url URL 
	 * @param 要求将对象放入PUT（可能为{@code  null}）
	 * @see  HttpEntity
	 */
	void put(URI url, @Nullable Object request) throws RestClientException;


	// PATCH

	/**
	 * Update a resource by PATCHing the given object to the URI template,
	 * and return the representation found in the response.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p><b>NOTE: The standard JDK HTTP library does not support HTTP PATCH.
	 * You need to use the Apache HttpComponents or OkHttp request factory.</b>
	 * @param url the URL
	 * @param request the object to be PATCHed (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @since 4.3.5
	 * @see HttpEntity
	 * @see RestTemplate#setRequestFactory
	 * @see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory
	 * @see org.springframework.http.client.OkHttp3ClientHttpRequestFactory
	 */
	/**
	 * 通过将给定对象修补到URI模板来更新资源，并返回在响应中找到的表示形式。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p> <b>注意：标准JDK HTTP库不支持HTTP PATCH。 
	 * 您需要使用Apache HttpComponents或OkHttp请求工厂。 
	 * </ b> 
	 * @param  url URL 
	 * @param 请求修补对象（可能为{@code  null}）
	 * @param  responseType the返回值的类型
	 * @param  uriVariables变量以扩展模板
	 * @return 转换后的对象@since 4.3.5 
	 * @see  HttpEntity 
	 * @see  RestTemplate＃setRequestFactory 
	 * @see  org.springframework.http。 
	 *  client.HttpComponentsAsyncClientHttpRequestFactory 
	 * @see  org.springframework.http.client.OkHttp3ClientHttpRequestFactory
	 */
	@Nullable
	<T> T patchForObject(String url, @Nullable Object request, Class<T> responseType, Object... uriVariables)
			throws RestClientException;

	/**
	 * Update a resource by PATCHing the given object to the URI template,
	 * and return the representation found in the response.
	 * <p>URI Template variables are expanded using the given map.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p><b>NOTE: The standard JDK HTTP library does not support HTTP PATCH.
	 * You need to use the Apache HttpComponents or OkHttp request factory.</b>
	 * @param url the URL
	 * @param request the object to be PATCHed (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand the template
	 * @return the converted object
	 * @since 4.3.5
	 * @see HttpEntity
	 * @see RestTemplate#setRequestFactory
	 * @see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory
	 * @see org.springframework.http.client.OkHttp3ClientHttpRequestFactory
	 */
	/**
	 * 通过将给定对象修补到URI模板来更新资源，并返回在响应中找到的表示形式。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p> <b>注意：标准JDK HTTP库不支持HTTP PATCH。 
	 * 您需要使用Apache HttpComponents或OkHttp请求工厂。 
	 * </ b> 
	 * @param  url URL 
	 * @param 请求修补对象（可能为{@code  null}）
	 * @param  responseType the返回值的类型
	 * @param  uriVariables变量以扩展模板
	 * @return 转换后的对象@since 4.3.5 
	 * @see  HttpEntity 
	 * @see  RestTemplate＃setRequestFactory 
	 * @see  org.springframework.http。 
	 *  client.HttpComponentsAsyncClientHttpRequestFactory 
	 * @see  org.springframework.http.client.OkHttp3ClientHttpRequestFactory
	 */
	@Nullable
	<T> T patchForObject(String url, @Nullable Object request, Class<T> responseType,
			Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Update a resource by PATCHing the given object to the URL,
	 * and return the representation found in the response.
	 * <p>The {@code request} parameter can be a {@link HttpEntity} in order to
	 * add additional HTTP headers to the request.
	 * <p><b>NOTE: The standard JDK HTTP library does not support HTTP PATCH.
	 * You need to use the Apache HttpComponents or OkHttp request factory.</b>
	 * @param url the URL
	 * @param request the object to be PATCHed (may be {@code null})
	 * @param responseType the type of the return value
	 * @return the converted object
	 * @since 4.3.5
	 * @see HttpEntity
	 * @see RestTemplate#setRequestFactory
	 * @see org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory
	 * @see org.springframework.http.client.OkHttp3ClientHttpRequestFactory
	 */
	/**
	 * 通过将给定对象修补到URL来更新资源，并返回响应中找到的表示形式。 
	 *  <p> {<@code> request}参数可以是{@link  HttpEntity}，以便向请求中添加其他HTTP标头。 
	 *  <p> <b>注意：标准JDK HTTP库不支持HTTP PATCH。 
	 * 您需要使用Apache HttpComponents或OkHttp请求工厂。 
	 * </ b> 
	 * @param  url URL 
	 * @param 请求修补对象（可能为{@code  null}）
	 * @param  responseType the返回值的类型
	 * @return 转换后的对象@始于4.3.5 
	 * @see  HttpEntity 
	 * @see  RestTemplate＃setRequestFactory 
	 * @see  org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory 
	 * @see  org.springframework。 
	 *  http.client.OkHttp3ClientHttpRequestFactory
	 */
	@Nullable
	<T> T patchForObject(URI url, @Nullable Object request, Class<T> responseType)
			throws RestClientException;



	// DELETE

	/**
	 * Delete the resources at the specified URI.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param uriVariables the variables to expand in the template
	 */
	/**
	 * 删除指定URI处的资源。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  uri使变量在模板中扩展
	 */
	void delete(String url, Object... uriVariables) throws RestClientException;

	/**
	 * Delete the resources at the specified URI.
	 * <p>URI Template variables are expanded using the given map.
	 *
	 * @param url the URL
	 * @param uriVariables the variables to expand the template
	 */
	/**
	 * 删除指定URI处的资源。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  uri使变量可变以扩展模板
	 */
	void delete(String url, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Delete the resources at the specified URL.
	 * @param url the URL
	 */
	/**
	 * 删除指定URL上的资源。 
	 *  
	 * @param  URL URL
	 */
	void delete(URI url) throws RestClientException;


	// OPTIONS

	/**
	 * Return the value of the Allow header for the given URI.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param uriVariables the variables to expand in the template
	 * @return the value of the allow header
	 */
	/**
	 * 返回给定URI的Allow标头的值。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  uri可变变量以在模板中扩展
	 * @return  allow标头的值
	 */
	Set<HttpMethod> optionsForAllow(String url, Object... uriVariables) throws RestClientException;

	/**
	 * Return the value of the Allow header for the given URI.
	 * <p>URI Template variables are expanded using the given map.
	 * @param url the URL
	 * @param uriVariables the variables to expand in the template
	 * @return the value of the allow header
	 */
	/**
	 * 返回给定URI的Allow标头的值。 
	 *  <p> URI模板变量使用给定的映射进行扩展。 
	 *  
	 * @param  url URL 
	 * @param  uri可变变量以在模板中扩展
	 * @return  allow标头的值
	 */
	Set<HttpMethod> optionsForAllow(String url, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Return the value of the Allow header for the given URL.
	 * @param url the URL
	 * @return the value of the allow header
	 */
	/**
	 * 返回给定URL的Allow标头的值。 
	 *  
	 * @param  URL URL 
	 * @return  allow标头的值
	 */
	Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;


	// exchange

	/**
	 * Execute the HTTP method to the given URI template, writing the given request entity to the request, and
	 * returns the response as {@link ResponseEntity}.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the request
	 * may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand in the template
	 * @return the response as entity
	 * @since 3.0.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity要写入请求的实体（标头和/或正文）可以为{@code  null} ）
	 * @param  responseType返回值的类型
	 * @param  uriVariables将变量扩展为模板
	 * @return 作为实体@0.2.3起的响应
	 */
	<T> ResponseEntity<T> exchange(String url, HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			Class<T> responseType, Object... uriVariables) throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, writing the given request entity to the request, and
	 * returns the response as {@link ResponseEntity}.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the request
	 * (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand in the template
	 * @return the response as entity
	 * @since 3.0.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity要写入请求的实体（标题和/或主体）（可以为{@code  null }）
	 * @param  responseType返回值的类型
	 * @param  uriVariables将变量扩展为模板
	 * @return 作为实体@0.2.3起的响应
	 */
	<T> ResponseEntity<T> exchange(String url, HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, writing the given request entity to the request, and
	 * returns the response as {@link ResponseEntity}.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the request
	 * (may be {@code null})
	 * @param responseType the type of the return value
	 * @return the response as entity
	 * @since 3.0.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 *  
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity要写入请求的实体（标题和/或主体）（可以为{@code  null }）
	 * @param  responseType返回值的类型
	 * @return 作为实体@since 3.0.2起的响应
	 */
	<T> ResponseEntity<T> exchange(URI url, HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			Class<T> responseType) throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, writing the given
	 * request entity to the request, and returns the response as {@link ResponseEntity}.
	 * The given {@link ParameterizedTypeReference} is used to pass generic type information:
	 * <pre class="code">
	 * ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt; myBean =
	 *     new ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;() {};
	 *
	 * ResponseEntity&lt;List&lt;MyBean&gt;&gt; response =
	 *     template.exchange(&quot;https://example.com&quot;,HttpMethod.GET, null, myBean);
	 * </pre>
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the
	 * request (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand in the template
	 * @return the response as entity
	 * @since 3.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 * 给定的{@link  ParameterizedTypeReference}用于传递通用类型信息：<pre class ="code"> ParameterizedTypeReference <List <MyBean >> myBean = new ParameterizedTypeReference <List <MyBean >>（）{}; ResponseEntity <List <MyBean >> response = template.exchange（"https://example.com"，HttpMethod.GET，null，myBean）; </ pre> 
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity实体（标头和/或正文）写入请求（可以是{@code  null}）
	 * @param  responseType返回值的类型
	 * @param  uriVariables将变量扩展到模板
	 * @return 中，将响应从实体3.2开始
	 */
	<T> ResponseEntity<T> exchange(String url,HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			ParameterizedTypeReference<T> responseType, Object... uriVariables) throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, writing the given
	 * request entity to the request, and returns the response as {@link ResponseEntity}.
	 * The given {@link ParameterizedTypeReference} is used to pass generic type information:
	 * <pre class="code">
	 * ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt; myBean =
	 *     new ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;() {};
	 *
	 * ResponseEntity&lt;List&lt;MyBean&gt;&gt; response =
	 *     template.exchange(&quot;https://example.com&quot;,HttpMethod.GET, null, myBean);
	 * </pre>
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the request
	 * (may be {@code null})
	 * @param responseType the type of the return value
	 * @param uriVariables the variables to expand in the template
	 * @return the response as entity
	 * @since 3.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 * 给定的{@link  ParameterizedTypeReference}用于传递通用类型信息：<pre class ="code"> ParameterizedTypeReference <List <MyBean >> myBean = new ParameterizedTypeReference <List <MyBean >>（）{}; ResponseEntity <List <MyBean >> response = template.exchange（"https://example.com"，HttpMethod.GET，null，myBean）; </ pre> 
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity实体（标头和/或正文）写入请求（可以是{@code  null}）
	 * @param  responseType返回值的类型
	 * @param  uriVariables将变量扩展到模板
	 * @return 中，将响应从实体3.2开始
	 */
	<T> ResponseEntity<T> exchange(String url, HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			ParameterizedTypeReference<T> responseType, Map<String, ?> uriVariables) throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, writing the given
	 * request entity to the request, and returns the response as {@link ResponseEntity}.
	 * The given {@link ParameterizedTypeReference} is used to pass generic type information:
	 * <pre class="code">
	 * ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt; myBean =
	 *     new ParameterizedTypeReference&lt;List&lt;MyBean&gt;&gt;() {};
	 *
	 * ResponseEntity&lt;List&lt;MyBean&gt;&gt; response =
	 *     template.exchange(&quot;https://example.com&quot;,HttpMethod.GET, null, myBean);
	 * </pre>
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestEntity the entity (headers and/or body) to write to the request
	 * (may be {@code null})
	 * @param responseType the type of the return value
	 * @return the response as entity
	 * @since 3.2
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，将给定的请求实体写入请求，并以{@link  ResponseEntity}返回响应。 
	 * 给定的{@link  ParameterizedTypeReference}用于传递通用类型信息：<pre class ="code"> ParameterizedTypeReference <List <MyBean >> myBean = new ParameterizedTypeReference <List <MyBean >>（）{}; ResponseEntity <List <MyBean >> response = template.exchange（"https://example.com"，HttpMethod.GET，null，myBean）; </ pre> 
	 * @param  url URL 
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  requestEntity实体（标头和/或正文）写入请求（可以是{@code  null}）
	 * @param  responseType返回值的类型
	 * @return 作为实体@3.2起的响应
	 */
	<T> ResponseEntity<T> exchange(URI url, HttpMethod method, @Nullable HttpEntity<?> requestEntity,
			ParameterizedTypeReference<T> responseType) throws RestClientException;

	/**
	 * Execute the request specified in the given {@link RequestEntity} and return
	 * the response as {@link ResponseEntity}. Typically used in combination
	 * with the static builder methods on {@code RequestEntity}, for instance:
	 * <pre class="code">
	 * MyRequest body = ...
	 * RequestEntity request = RequestEntity
	 *     .post(new URI(&quot;https://example.com/foo&quot;))
	 *     .accept(MediaType.APPLICATION_JSON)
	 *     .body(body);
	 * ResponseEntity&lt;MyResponse&gt; response = template.exchange(request, MyResponse.class);
	 * </pre>
	 * @param requestEntity the entity to write to the request
	 * @param responseType the type of the return value
	 * @return the response as entity
	 * @since 4.1
	 */
	/**
	 * 执行给定的{@link  RequestEntity}中指定的请求，并将响应作为{@link  ResponseEntity}返回。 
	 * 通常与{@code  RequestEntity}上的静态生成器方法结合使用，例如：<pre class ="code"> MyRequest body = ... RequestEntity request = RequestEntity .post（new URI（"https：// example.com/foo"））.accept（MediaType.APPLICATION_JSON）.body（body）; ResponseEntity <MyResponse> response = template.exchange（request，MyResponse.class）; </ pre> 
	 * @param  requestEntity要写入请求的实体
	 * @param  responseType返回值的类型
	 * @return 响应自实体@始于4.1
	 */
	<T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType)
			throws RestClientException;

	/**
	 * Execute the request specified in the given {@link RequestEntity} and return
	 * the response as {@link ResponseEntity}. The given
	 * {@link ParameterizedTypeReference} is used to pass generic type information:
	 * <pre class="code">
	 * MyRequest body = ...
	 * RequestEntity request = RequestEntity
	 *     .post(new URI(&quot;https://example.com/foo&quot;))
	 *     .accept(MediaType.APPLICATION_JSON)
	 *     .body(body);
	 * ParameterizedTypeReference&lt;List&lt;MyResponse&gt;&gt; myBean =
	 *     new ParameterizedTypeReference&lt;List&lt;MyResponse&gt;&gt;() {};
	 * ResponseEntity&lt;List&lt;MyResponse&gt;&gt; response = template.exchange(request, myBean);
	 * </pre>
	 * @param requestEntity the entity to write to the request
	 * @param responseType the type of the return value
	 * @return the response as entity
	 * @since 4.1
	 */
	/**
	 * 执行给定的{@link  RequestEntity}中指定的请求，并将响应作为{@link  ResponseEntity}返回。 
	 * 给定的{@link  ParameterizedTypeReference}用于传递通用类型信息：<pre class ="code"> MyRequest主体= ... RequestEntity请求= RequestEntity .post（new URI（"https://example.com/ foo"））.accept（MediaType.APPLICATION_JSON）.body（body）; ParameterizedTypeReference <List <MyResponse >> myBean = new ParameterizedTypeReference <List <MyResponse >>（）{}; ResponseEntity <List <MyResponse >> response = template.exchange（request，myBean）; </ pre> 
	 * @param  requestEntity要写入请求的实体
	 * @param  responseType返回值的类型
	 * @return 响应自实体@始于4.1
	 */
	<T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)
			throws RestClientException;


	// General execution

	/**
	 * Execute the HTTP method to the given URI template, preparing the request with the
	 * {@link RequestCallback}, and reading the response with a {@link ResponseExtractor}.
	 * <p>URI Template variables are expanded using the given URI variables, if any.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestCallback object that prepares the request
	 * @param responseExtractor object that extracts the return value from the response
	 * @param uriVariables the variables to expand in the template
	 * @return an arbitrary object, as returned by the {@link ResponseExtractor}
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，使用{@link  RequestCallback}准备请求，并使用{@link  ResponseExtractor}读取响应。 
	 *  <p> URI模板变量使用给定的URI变量（如果有）进行扩展。 
	 *  
	 * @param 为URL 
	 * @param 方法的URL传递HTTP方法（GET，POST等）。 
	 * 
	 * @param 请求请求的requestCallback对象
	 * @param  responseExtractor对象，该对象从响应
	 * @param 中提取返回值uriVariable变量以在模板
	 * @return 中扩展为任意对象，由{@link  ResponseExtractor}返回
	 */
	@Nullable
	<T> T execute(String url, HttpMethod method, @Nullable RequestCallback requestCallback,
			@Nullable ResponseExtractor<T> responseExtractor, Object... uriVariables)
			throws RestClientException;

	/**
	 * Execute the HTTP method to the given URI template, preparing the request with the
	 * {@link RequestCallback}, and reading the response with a {@link ResponseExtractor}.
	 * <p>URI Template variables are expanded using the given URI variables map.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestCallback object that prepares the request
	 * @param responseExtractor object that extracts the return value from the response
	 * @param uriVariables the variables to expand in the template
	 * @return an arbitrary object, as returned by the {@link ResponseExtractor}
	 */
	/**
	 * 对给定的URI模板执行HTTP方法，使用{@link  RequestCallback}准备请求，并使用{@link  ResponseExtractor}读取响应。 
	 *  <p> URI模板变量使用给定的URI变量映射进行扩展。 
	 *  
	 * @param 为URL 
	 * @param 方法的URL传递HTTP方法（GET，POST等）。 
	 * 
	 * @param 请求请求的requestCallback对象
	 * @param  responseExtractor对象，该对象从响应
	 * @param 中提取返回值uriVariable变量以在模板
	 * @return 中扩展为任意对象，由{@link  ResponseExtractor}返回
	 */
	@Nullable
	<T> T execute(String url, HttpMethod method, @Nullable RequestCallback requestCallback,
			@Nullable ResponseExtractor<T> responseExtractor, Map<String, ?> uriVariables)
			throws RestClientException;

	/**
	 * Execute the HTTP method to the given URL, preparing the request with the
	 * {@link RequestCallback}, and reading the response with a {@link ResponseExtractor}.
	 * @param url the URL
	 * @param method the HTTP method (GET, POST, etc)
	 * @param requestCallback object that prepares the request
	 * @param responseExtractor object that extracts the return value from the response
	 * @return an arbitrary object, as returned by the {@link ResponseExtractor}
	 */
	/**
	 * 对给定的URL执行HTTP方法，使用{@link  RequestCallback}准备请求，并使用{@link  ResponseExtractor}读取响应。 
	 *  
	 * @param 为URL 
	 * @param 方法的URL传递HTTP方法（GET，POST等）。 
	 * 
	 * @param 准备请求的requestCallback对象。 
	 * 由{@link  ResponseExtractor}返回的任意对象
	 */
	@Nullable
	<T> T execute(URI url, HttpMethod method, @Nullable RequestCallback requestCallback,
			@Nullable ResponseExtractor<T> responseExtractor) throws RestClientException;

}
