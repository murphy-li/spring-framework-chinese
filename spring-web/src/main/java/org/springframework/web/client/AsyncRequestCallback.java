/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.client;

import java.io.IOException;

/**
 * Callback interface for code that operates on an
 * {@link org.springframework.http.client.AsyncClientHttpRequest}. Allows to
 * manipulate the request headers, and write to the request body.
 *
 * <p>Used internally by the {@link AsyncRestTemplate}, but also useful for
 * application code.
 *
 * @author Arjen Poutsma
 * @see org.springframework.web.client.AsyncRestTemplate#execute
 * @since 4.0
 * @deprecated as of Spring 5.0, in favor of
 * {@link org.springframework.web.reactive.function.client.ExchangeFilterFunction}
 */
/**
 * 在{@link  org.springframework.http.client.AsyncClientHttpRequest}上运行的代码的回调接口。 
 * 允许操作请求标头，并写入请求正文。 
 *  <p>由{@link  AsyncRestTemplate}内部使用，但对于应用程序代码也很有用。 
 *  @author  Arjen Poutsma 
 * @see  org.springframework.web.client.AsyncRestTemplate＃execute @since 4.0从Spring 5.0起不推荐使用，而推荐使用{@link  org.springframework.web.reactive.function.client .ExchangeFilterFunction}
 */
@FunctionalInterface
@Deprecated
public interface AsyncRequestCallback {

	/**
	 * Gets called by {@link AsyncRestTemplate#execute} with an opened {@code ClientHttpRequest}.
	 * Does not need to care about closing the request or about handling errors:
	 * this will all be handled by the {@code RestTemplate}.
	 * @param request the active HTTP request
	 * @throws java.io.IOException in case of I/O errors
	 */
	/**
	 * 由{@link  AsyncRestTemplate＃execute}使用打开的{@code  ClientHttpRequest}进行调用。 
	 * 无需关心关闭请求或处理错误：这一切都将由{@code  RestTemplate}处理。 
	 *  
	 * @param 请求活动的HTTP请求
	 * @throws  java.io.IOException如果发生I / O错误
	 */
	void doWithRequest(org.springframework.http.client.AsyncClientHttpRequest request) throws IOException;

}
