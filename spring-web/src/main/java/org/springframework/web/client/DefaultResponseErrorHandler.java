/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.client;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.ObjectUtils;

/**
 * Spring's default implementation of the {@link ResponseErrorHandler} interface.
 *
 * <p>This error handler checks for the status code on the {@link ClientHttpResponse}:
 * Any code with series {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR}
 * or {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR} is considered to be
 * an error; this behavior can be changed by overriding the {@link #hasError(HttpStatus)}
 * method. Unknown status codes will be ignored by {@link #hasError(ClientHttpResponse)}.
 *
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @since 3.0
 * @see RestTemplate#setErrorHandler
 */
/**
 * Spring的{@link  ResponseErrorHandler}接口的默认实现。 
 *  <p>此错误处理程序将检查{@link  ClientHttpResponse}上的状态码：系列为<< @link> org.springframework.http.HttpStatus.Series＃CLIENT_ERROR}或{@link  org的任何代码。 
 *  springframework.http.HttpStatus.Series＃SERVER_ERROR}被视为错误； 
 * 可以通过重写{@link  #hasError（HttpStatus）}方法来更改此行为。 
 *  {@link  #hasError（ClientHttpResponse）}将忽略未知的状态代码。 
 *  @author  Arjen Poutsma @author  Rossen Stoyanchev @author  Juergen Hoeller @since 3.0 
 * @see  RestTemplate＃setErrorHandler
 */
public class DefaultResponseErrorHandler implements ResponseErrorHandler {

	/**
	 * Delegates to {@link #hasError(HttpStatus)} (for a standard status enum value) or
	 * {@link #hasError(int)} (for an unknown status code) with the response status code.
	 * @see ClientHttpResponse#getRawStatusCode()
	 * @see #hasError(HttpStatus)
	 * @see #hasError(int)
	 */
	/**
	 * 代表{@link  #hasError（HttpStatus）}（用于标准状态枚举值）或{@link  #hasError（int）}（用于未知状态代码）以及响应状态代码。 
	 *  
	 * @see  ClientHttpResponse＃getRawStatusCode（）
	 * @see  #hasError（HttpStatus）
	 * @see  #hasError（int）
	 */
	@Override
	public boolean hasError(ClientHttpResponse response) throws IOException {
		int rawStatusCode = response.getRawStatusCode();
		HttpStatus statusCode = HttpStatus.resolve(rawStatusCode);
		return (statusCode != null ? hasError(statusCode) : hasError(rawStatusCode));
	}

	/**
	 * Template method called from {@link #hasError(ClientHttpResponse)}.
	 * <p>The default implementation checks {@link HttpStatus#isError()}.
	 * Can be overridden in subclasses.
	 * @param statusCode the HTTP status code as enum value
	 * @return {@code true} if the response indicates an error; {@code false} otherwise
	 * @see HttpStatus#isError()
	 */
	/**
	 * 从{@link  #hasError（ClientHttpResponse）}调用的模板方法。 
	 *  <p>默认实现检查{@link  HttpStatus＃isError（）}。 
	 * 可以在子类中覆盖。 
	 *  
	 * @param  statusCode如果响应指示错误，则将HTTP状态代码作为枚举值
	 * @return  {@code  true}； 
	 * 否则，返回false。 
	 *  {@code  false}否则为
	 * @see  HttpStatus＃isError（）
	 */
	protected boolean hasError(HttpStatus statusCode) {
		return statusCode.isError();
	}

	/**
	 * Template method called from {@link #hasError(ClientHttpResponse)}.
	 * <p>The default implementation checks if the given status code is
	 * {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or
	 * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR}.
	 * Can be overridden in subclasses.
	 * @param unknownStatusCode the HTTP status code as raw value
	 * @return {@code true} if the response indicates an error; {@code false} otherwise
	 * @since 4.3.21
	 * @see org.springframework.http.HttpStatus.Series#CLIENT_ERROR
	 * @see org.springframework.http.HttpStatus.Series#SERVER_ERROR
	 */
	/**
	 * 从{@link  #hasError（ClientHttpResponse）}调用的模板方法。 
	 *  <p>默认实现检查给定的状态码是{@link  org.springframework.http.HttpStatus.Series＃CLIENT_ERROR CLIENT_ERROR}还是{@link  org.springframework.http.HttpStatus.Series＃SERVER_ERROR SERVER_ERROR} 。 
	 * 可以在子类中覆盖。 
	 *  
	 * @param  unknownStatusCode如果响应指示错误，则将HTTP状态代码作为原始值
	 * @return  {@code  true}； 
	 * 否则，返回true。 
	 *  {@code  false}否则@since 4.3.21 
	 * @see  org.springframework.http.HttpStatus.Series＃CLIENT_ERROR 
	 * @see  org.springframework.http.HttpStatus.Series＃SERVER_ERROR
	 */
	protected boolean hasError(int unknownStatusCode) {
		HttpStatus.Series series = HttpStatus.Series.resolve(unknownStatusCode);
		return (series == HttpStatus.Series.CLIENT_ERROR || series == HttpStatus.Series.SERVER_ERROR);
	}

	/**
	 * Delegates to {@link #handleError(ClientHttpResponse, HttpStatus)} with the
	 * response status code.
	 * @throws UnknownHttpStatusCodeException in case of an unresolvable status code
	 * @see #handleError(ClientHttpResponse, HttpStatus)
	 */
	/**
	 * 使用响应状态代码委托给{@link  #handleError（ClientHttpResponse，HttpStatus）}。 
	 *  
	 * @throws 状态代码无法解析时出现UnknownHttpStatusCodeException 
	 * @see  #handleError（ClientHttpResponse，HttpStatus）
	 */
	@Override
	public void handleError(ClientHttpResponse response) throws IOException {
		HttpStatus statusCode = HttpStatus.resolve(response.getRawStatusCode());
		if (statusCode == null) {
			String message = getErrorMessage(
					response.getRawStatusCode(), response.getStatusText(),
					getResponseBody(response), getCharset(response));
			throw new UnknownHttpStatusCodeException(message,
					response.getRawStatusCode(), response.getStatusText(),
					response.getHeaders(), getResponseBody(response), getCharset(response));
		}
		handleError(response, statusCode);
	}

	/**
	 * Return error message with details from the response body, possibly truncated:
	 * <pre>
	 * 404 Not Found: [{'id': 123, 'message': 'my very long... (500 bytes)]
	 * </pre>
	 */
	/**
	 * 返回错误消息，其中包含来自响应正文的详细信息，可能会被截断：<pre> 404未找到：[{'id'：123，'message'：'我很长...（500字节）] </ pre>
	 */
	private String getErrorMessage(
			int rawStatusCode, String statusText, @Nullable byte[] responseBody, @Nullable Charset charset) {

		String preface = rawStatusCode + " " + statusText + ": ";
		if (ObjectUtils.isEmpty(responseBody)) {
			return preface + "[no body]";
		}

		charset = charset == null ? StandardCharsets.UTF_8 : charset;
		int maxChars = 200;

		if (responseBody.length < maxChars * 2) {
			return preface + "[" + new String(responseBody, charset) + "]";
		}

		try {
			Reader reader = new InputStreamReader(new ByteArrayInputStream(responseBody), charset);
			CharBuffer buffer = CharBuffer.allocate(maxChars);
			reader.read(buffer);
			reader.close();
			buffer.flip();
			return preface + "[" + buffer.toString() + "... (" + responseBody.length + " bytes)]";
		}
		catch (IOException ex) {
			// should never happen
			throw new IllegalStateException(ex);
		}
	}

	/**
	 * Handle the error in the given response with the given resolved status code.
	 * <p>The default implementation throws an {@link HttpClientErrorException}
	 * if the status code is {@link org.springframework.http.HttpStatus.Series#CLIENT_ERROR
	 * CLIENT_ERROR}, an {@link HttpServerErrorException} if it is
	 * {@link org.springframework.http.HttpStatus.Series#SERVER_ERROR SERVER_ERROR},
	 * or an {@link UnknownHttpStatusCodeException} in other cases.
	 * @since 5.0
	 * @see HttpClientErrorException#create
	 * @see HttpServerErrorException#create
	 */
	/**
	 * 使用给定的已解决状态代码处理给定响应中的错误。 
	 *  <p>如果状态代码为{@link  org.springframework.http.HttpStatus.Series＃CLIENT_ERROR CLIENT_ERROR}，则默认实现会抛出{@link  HttpClientErrorException}； 
	 * 如果是，则抛出{{@link> HttpServerErrorException} {@link  org.springframework.http.HttpStatus.Series＃SERVER_ERROR SERVER_ERROR}，或者在其他情况下为{@link  UnknownHttpStatusCodeException}。 
	 *  @since 5.0 
	 * @see  HttpClientErrorException＃create 
	 * @see  HttpServerErrorException＃create
	 */
	protected void handleError(ClientHttpResponse response, HttpStatus statusCode) throws IOException {
		String statusText = response.getStatusText();
		HttpHeaders headers = response.getHeaders();
		byte[] body = getResponseBody(response);
		Charset charset = getCharset(response);
		String message = getErrorMessage(statusCode.value(), statusText, body, charset);

		switch (statusCode.series()) {
			case CLIENT_ERROR:
				throw HttpClientErrorException.create(message, statusCode, statusText, headers, body, charset);
			case SERVER_ERROR:
				throw HttpServerErrorException.create(message, statusCode, statusText, headers, body, charset);
			default:
				throw new UnknownHttpStatusCodeException(message, statusCode.value(), statusText, headers, body, charset);
		}
	}

	/**
	 * Determine the HTTP status of the given response.
	 * @param response the response to inspect
	 * @return the associated HTTP status
	 * @throws IOException in case of I/O errors
	 * @throws UnknownHttpStatusCodeException in case of an unknown status code
	 * that cannot be represented with the {@link HttpStatus} enum
	 * @since 4.3.8
	 * @deprecated as of 5.0, in favor of {@link #handleError(ClientHttpResponse, HttpStatus)}
	 */
	/**
	 * 确定给定响应的HTTP状态。 
	 *  
	 * @param 响应以检查
	 * @return 关联的HTTP状态
	 * @throws  IOException（如果发生I / O错误）
	 * @throws  UnknownHttpStatusCodeException（如果未知状态代码无法用{<@表示） link> HttpStatus}枚举@since 4.3.8自5.0起不推荐使用，而推荐使用{@link  #handleError（ClientHttpResponse，HttpStatus）}
	 */
	@Deprecated
	protected HttpStatus getHttpStatusCode(ClientHttpResponse response) throws IOException {
		HttpStatus statusCode = HttpStatus.resolve(response.getRawStatusCode());
		if (statusCode == null) {
			throw new UnknownHttpStatusCodeException(response.getRawStatusCode(), response.getStatusText(),
					response.getHeaders(), getResponseBody(response), getCharset(response));
		}
		return statusCode;
	}

	/**
	 * Read the body of the given response (for inclusion in a status exception).
	 * @param response the response to inspect
	 * @return the response body as a byte array,
	 * or an empty byte array if the body could not be read
	 * @since 4.3.8
	 */
	/**
	 * 读取给定响应的正文（包括在状态异常中）。 
	 *  
	 * @param 响应以检查响应
	 * @return 响应主体为字节数组，如果从4.3.8开始无法读取主体，则为空字节数组
	 */
	protected byte[] getResponseBody(ClientHttpResponse response) {
		try {
			return FileCopyUtils.copyToByteArray(response.getBody());
		}
		catch (IOException ex) {
			// ignore
		}
		return new byte[0];
	}

	/**
	 * Determine the charset of the response (for inclusion in a status exception).
	 * @param response the response to inspect
	 * @return the associated charset, or {@code null} if none
	 * @since 4.3.8
	 */
	/**
	 * 确定响应的字符集（用于包含在状态异常中）。 
	 *  
	 * @param 响应，以检查
	 * @return 关联的字符集； 
	 * 如果没有，则返回{@code  null} @4.3.3起
	 */
	@Nullable
	protected Charset getCharset(ClientHttpResponse response) {
		HttpHeaders headers = response.getHeaders();
		MediaType contentType = headers.getContentType();
		return (contentType != null ? contentType.getCharset() : null);
	}

}
