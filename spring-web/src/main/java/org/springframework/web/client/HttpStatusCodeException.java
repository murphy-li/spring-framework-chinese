/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.client;

import java.nio.charset.Charset;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.lang.Nullable;
import org.springframework.util.StringUtils;

/**
 * Abstract base class for exceptions based on an {@link HttpStatus}.
 *
 * @author Arjen Poutsma
 * @author Chris Beams
 * @author Rossen Stoyanchev
 * @since 3.0
 */
/**
 * 基于{@link  HttpStatus}的异常的抽象基类。 
 *  @author  Arjen Poutsma @author 克里斯·比姆斯（Chris Beams）@author  Rossen Stoyanchev @since 3.0
 */
public abstract class HttpStatusCodeException extends RestClientResponseException {

	private static final long serialVersionUID = 5696801857651587810L;


	private final HttpStatus statusCode;


	/**
	 * Construct a new instance with an {@link HttpStatus}.
	 * @param statusCode the status code
	 */
	/**
	 * 使用{@link  HttpStatus}构造一个新实例。 
	 *  
	 * @param  statusCode状态码
	 */
	protected HttpStatusCodeException(HttpStatus statusCode) {
		this(statusCode, statusCode.name(), null, null, null);
	}

	/**
	 * Construct a new instance with an {@link HttpStatus} and status text.
	 * @param statusCode the status code
	 * @param statusText the status text
	 */
	/**
	 * 使用{@link  HttpStatus}和状态文本构造一个新实例。 
	 *  
	 * @param  statusCode状态代码
	 * @param  statusText状态文本
	 */
	protected HttpStatusCodeException(HttpStatus statusCode, String statusText) {
		this(statusCode, statusText, null, null, null);
	}

	/**
	 * Construct instance with an {@link HttpStatus}, status text, and content.
	 * @param statusCode the status code
	 * @param statusText the status text
	 * @param responseBody the response body content, may be {@code null}
	 * @param responseCharset the response body charset, may be {@code null}
	 * @since 3.0.5
	 */
	/**
	 * 使用{@link  HttpStatus}，状态文本和内容构造实例。 
	 *  
	 * @param  statusCode状态代码
	 * @param  statusText状态文本
	 * @param  responseBody响应正文内容，可以为{@code  null} 
	 * @param  responseCharset响应正文字符集，可以为{<@代码> null} @3.0.5起
	 */
	protected HttpStatusCodeException(HttpStatus statusCode, String statusText,
			@Nullable byte[] responseBody, @Nullable Charset responseCharset) {

		this(statusCode, statusText, null, responseBody, responseCharset);
	}

	/**
	 * Construct instance with an {@link HttpStatus}, status text, content, and
	 * a response charset.
	 * @param statusCode the status code
	 * @param statusText the status text
	 * @param responseHeaders the response headers, may be {@code null}
	 * @param responseBody the response body content, may be {@code null}
	 * @param responseCharset the response body charset, may be {@code null}
	 * @since 3.1.2
	 */
	/**
	 * 使用{@link  HttpStatus}，状态文本，内容和响应字符集构造实例。 
	 *  
	 * @param  statusCode状态代码
	 * @param  statusText状态文本
	 * @param  responseHeaders响应标头，可以为{@code  null} 
	 * @param  responseBody响应正文内容，可以为{<@code > null} 
	 * @param  responseCharset响应主体字符集，可能为{@code  null} @从3.1.2开始
	 */
	protected HttpStatusCodeException(HttpStatus statusCode, String statusText,
			@Nullable HttpHeaders responseHeaders, @Nullable byte[] responseBody, @Nullable Charset responseCharset) {

		this(getMessage(statusCode, statusText),
				statusCode, statusText, responseHeaders, responseBody, responseCharset);
	}

	/**
	 * Construct instance with an {@link HttpStatus}, status text, content, and
	 * a response charset.
	 * @param message the exception message
	 * @param statusCode the status code
	 * @param statusText the status text
	 * @param responseHeaders the response headers, may be {@code null}
	 * @param responseBody the response body content, may be {@code null}
	 * @param responseCharset the response body charset, may be {@code null}
	 * @since 5.2.2
	 */
	/**
	 * 使用{@link  HttpStatus}，状态文本，内容和响应字符集构造实例。 
	 *  
	 * @param 消息异常消息
	 * @param  statusCode状态代码
	 * @param  statusText状态文本
	 * @param  responseHeaders响应头，可以为{@code  null} 
	 * @param  responseBody响应正文内容，可能为{@code  null} 
	 * @param  responseCharset响应主体字符集，可能为{@code  null} @从5.2.2开始
	 */
	protected HttpStatusCodeException(String message, HttpStatus statusCode, String statusText,
			@Nullable HttpHeaders responseHeaders, @Nullable byte[] responseBody, @Nullable Charset responseCharset) {

		super(message, statusCode.value(), statusText, responseHeaders, responseBody, responseCharset);
		this.statusCode = statusCode;
	}

	private static String getMessage(HttpStatus statusCode, String statusText) {
		if (!StringUtils.hasLength(statusText)) {
			statusText = statusCode.getReasonPhrase();
		}
		return statusCode.value() + " " + statusText;
	}

	/**
	 * Return the HTTP status code.
	 */
	/**
	 * 返回HTTP状态代码。 
	 * 
	 */
	public HttpStatus getStatusCode() {
		return this.statusCode;
	}

}
