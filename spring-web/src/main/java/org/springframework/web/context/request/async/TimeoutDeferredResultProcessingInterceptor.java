/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.request.async;

import org.springframework.web.context.request.NativeWebRequest;

/**
 * Sends a 503 (SERVICE_UNAVAILABLE) in case of a timeout if the response is not
 * already committed. As of 4.2.8 this is done indirectly by returning
 * {@link AsyncRequestTimeoutException} as the result of processing which is
 * then handled by Spring MVC's default exception handling as a 503 error.
 *
 * <p>Registered at the end, after all other interceptors and
 * therefore invoked only if no other interceptor handles the timeout.
 *
 * <p>Note that according to RFC 7231, a 503 without a 'Retry-After' header is
 * interpreted as a 500 error and the client should not retry. Applications
 * can install their own interceptor to handle a timeout and add a 'Retry-After'
 * header if necessary.
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 如果尚未提交响应，则在超时的情况下发送503（SERVICE_UNAVAILABLE）。 
 * 从4.2.8版本开始，这是通过返回{@link  AsyncRequestTimeoutException}作为处理结果而间接完成的，然后由Spring MVC的默认异常处理作为503错误进行处理。 
 *  <p>在所有其他拦截器之后注册，因此仅在没有其他拦截器处理超时的情况下才调用。 
 *  <p>请注意，根据RFC 7231，没有"Retry-After"标头的503被解释为500错误，并且客户端不应重试。 
 * 应用程序可以安装自己的拦截器来处理超时，并在必要时添加"Retry-After"标头。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public class TimeoutDeferredResultProcessingInterceptor implements DeferredResultProcessingInterceptor {

	@Override
	public <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> result) throws Exception {
		result.setErrorResult(new AsyncRequestTimeoutException());
		return false;
	}

}
