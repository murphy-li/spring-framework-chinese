/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.support;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;

import org.springframework.core.env.Environment;
import org.springframework.core.env.MutablePropertySources;
import org.springframework.core.env.PropertySource;
import org.springframework.core.env.PropertySource.StubPropertySource;
import org.springframework.core.env.StandardEnvironment;
import org.springframework.jndi.JndiLocatorDelegate;
import org.springframework.jndi.JndiPropertySource;
import org.springframework.lang.Nullable;
import org.springframework.web.context.ConfigurableWebEnvironment;

/**
 * {@link Environment} implementation to be used by {@code Servlet}-based web
 * applications. All web-related (servlet-based) {@code ApplicationContext} classes
 * initialize an instance by default.
 *
 * <p>Contributes {@code ServletConfig}, {@code ServletContext}, and JNDI-based
 * {@link PropertySource} instances. See {@link #customizePropertySources} method
 * documentation for details.
 *
 * @author Chris Beams
 * @since 3.1
 * @see StandardEnvironment
 */
/**
 * 基于{@code  Servlet}的Web应用程序将使用的{@link  Environment}实现。 
 * 默认情况下，所有与Web相关的（基于Servlet的）{<@code> ApplicationContext}类都将初始化一个实例。 
 *  <p>贡献{@code  ServletConfig}，{<@code> ServletContext}和基于JNDI的{@link  PropertySource}实例。 
 * 有关详细信息，请参见{@link  #customizePropertySources}方法文档。 
 *  @author 克里斯·比姆斯（Chris Beams）自3.1起
 * @see  StandardEnvironment
 */
public class StandardServletEnvironment extends StandardEnvironment implements ConfigurableWebEnvironment {

	/** Servlet context init parameters property source name: {@value}. */
	/**
	 * Servlet上下文初始化参数属性源名称：{@value}。 
	 * 
	 */
	public static final String SERVLET_CONTEXT_PROPERTY_SOURCE_NAME = "servletContextInitParams";

	/** Servlet config init parameters property source name: {@value}. */
	/**
	 * Servlet配置初始化参数属性源名称：{@value}。 
	 * 
	 */
	public static final String SERVLET_CONFIG_PROPERTY_SOURCE_NAME = "servletConfigInitParams";

	/** JNDI property source name: {@value}. */
	/**
	 * JNDI属性源名称：{@value}。 
	 * 
	 */
	public static final String JNDI_PROPERTY_SOURCE_NAME = "jndiProperties";


	/**
	 * Customize the set of property sources with those contributed by superclasses as
	 * well as those appropriate for standard servlet-based environments:
	 * <ul>
	 * <li>{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}
	 * <li>{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}
	 * <li>{@value #JNDI_PROPERTY_SOURCE_NAME}
	 * </ul>
	 * <p>Properties present in {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} will
	 * take precedence over those in {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}, and
	 * properties found in either of the above take precedence over those found in
	 * {@value #JNDI_PROPERTY_SOURCE_NAME}.
	 * <p>Properties in any of the above will take precedence over system properties and
	 * environment variables contributed by the {@link StandardEnvironment} superclass.
	 * <p>The {@code Servlet}-related property sources are added as
	 * {@link StubPropertySource stubs} at this stage, and will be
	 * {@linkplain #initPropertySources(ServletContext, ServletConfig) fully initialized}
	 * once the actual {@link ServletContext} object becomes available.
	 * @see StandardEnvironment#customizePropertySources
	 * @see org.springframework.core.env.AbstractEnvironment#customizePropertySources
	 * @see ServletConfigPropertySource
	 * @see ServletContextPropertySource
	 * @see org.springframework.jndi.JndiPropertySource
	 * @see org.springframework.context.support.AbstractApplicationContext#initPropertySources
	 * @see #initPropertySources(ServletContext, ServletConfig)
	 */
	/**
	 * 使用超类提供的属性以及适用于基于标准servlet的环境的属性来定制属性源集：<ul> <li> {@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME} <li> {@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME} <li> {@value #JNDI_PROPERTY_SOURCE_NAME} </ ul> <p>在{@value #SERVLET_CONFIG_PROPERTY_SOURCE_NAME}中存在的属性将优先于在{@value #SERVLET_CONTEXT_PROPERTY_SOURCE_NAME}中的属性，并且在上述任何一个中找到的属性都优先于在{@value＃中找到的属性JNDI_PROPERTY_SOURCE_NAME}。 
	 *  <p>以上任何一项中的属性将优先于{@link  StandardEnvironment}超类提供的系统属性和环境变量。 
	 *  <p>与{@code  Servlet}相关的属性源在此阶段作为{@link  StubPropertySource stubs}添加，并且将被{@link  plain #initPropertySources（ServletContext，ServletConfig）完全初始化}实际的{@link  ServletContext}对象变得可用。 
	 *  
	 * @see  StandardEnvironment＃customizePropertySources 
	 * @see  org.springframework.core.env.AbstractEnvironment＃customizePropertySources 
	 * @see  ServletConfigPropertySource 
	 * @see  ServletContextPropertySource 
	 * @see  org.springframework.jndi.JndiPropertySource 
	 * @see  org。 
	 *  .context.support.AbstractApplicationContext＃initPropertySources 
	 * @see  #initPropertySources（ServletContext，ServletConfig）
	 */
	@Override
	protected void customizePropertySources(MutablePropertySources propertySources) {
		propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));
		propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));
		if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) {
			propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));
		}
		super.customizePropertySources(propertySources);
	}

	@Override
	public void initPropertySources(@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {
		WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);
	}

}
