/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.support;

import org.springframework.context.ApplicationEvent;
import org.springframework.lang.Nullable;

/**
 * Event raised when a request is handled within an ApplicationContext.
 *
 * <p>Supported by Spring's own FrameworkServlet (through a specific
 * ServletRequestHandledEvent subclass), but can also be raised by any
 * other web component.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since January 17, 2001
 * @see ServletRequestHandledEvent
 * @see org.springframework.web.servlet.FrameworkServlet
 * @see org.springframework.context.ApplicationContext#publishEvent
 */
/**
 * 在ApplicationContext中处理请求时引发的事件。 
 *  <p>由Spring自己的FrameworkServlet支持（通过特定的ServletRequestHandledEvent子类），但也可以由任何其他Web组件引发。 
 *  @author  Rod Johnson @author  Juergen Hoeller @自2001年1月17日以来
 * @see  ServletRequestHandledEvent 
 * @see  org.springframework.web.servlet.FrameworkServlet 
 * @see  org.springframework.context.ApplicationContext＃publishEvent
 */
@SuppressWarnings("serial")
public class RequestHandledEvent extends ApplicationEvent {

	/** Session id that applied to the request, if any. */
	/**
	 * 应用于请求的会话ID（如果有）。 
	 * 
	 */
	@Nullable
	private String sessionId;

	/** Usually the UserPrincipal. */
	/**
	 * 通常是UserPrincipal。 
	 * 
	 */
	@Nullable
	private String userName;

	/** Request processing time. */
	/**
	 * 要求处理时间。 
	 * 
	 */
	private final long processingTimeMillis;

	/** Cause of failure, if any. */
	/**
	 * 失败原因（如果有）。 
	 * 
	 */
	@Nullable
	private Throwable failureCause;


	/**
	 * Create a new RequestHandledEvent with session information.
	 * @param source the component that published the event
	 * @param sessionId the id of the HTTP session, if any
	 * @param userName the name of the user that was associated with the
	 * request, if any (usually the UserPrincipal)
	 * @param processingTimeMillis the processing time of the request in milliseconds
	 */
	/**
	 * 使用会话信息创建一个新的RequestHandledEvent。 
	 *  
	 * @param 提供发布事件的组件
	 * @param  sessionId HTTP会话的ID（如果有的话）
	 * @param  userName与请求关联的用户名（如果有的话）（通常是UserPrincipal）
	 * @param  processingTimeMillis请求的处理时间（以毫秒为单位）
	 */
	public RequestHandledEvent(Object source, @Nullable String sessionId, @Nullable String userName,
			long processingTimeMillis) {

		super(source);
		this.sessionId = sessionId;
		this.userName = userName;
		this.processingTimeMillis = processingTimeMillis;
	}

	/**
	 * Create a new RequestHandledEvent with session information.
	 * @param source the component that published the event
	 * @param sessionId the id of the HTTP session, if any
	 * @param userName the name of the user that was associated with the
	 * request, if any (usually the UserPrincipal)
	 * @param processingTimeMillis the processing time of the request in milliseconds
	 * @param failureCause the cause of failure, if any
	 */
	/**
	 * 使用会话信息创建一个新的RequestHandledEvent。 
	 *  
	 * @param 提供发布事件的组件
	 * @param  sessionId HTTP会话的ID（如果有的话）
	 * @param  userName与请求关联的用户名（如果有的话）（通常是UserPrincipal）
	 * @param  processingTimeMillis请求的处理时间（以毫秒为单位）
	 * @param  failure引起失败的原因（如果有）
	 */
	public RequestHandledEvent(Object source, @Nullable String sessionId, @Nullable String userName,
			long processingTimeMillis, @Nullable Throwable failureCause) {

		this(source, sessionId, userName, processingTimeMillis);
		this.failureCause = failureCause;
	}


	/**
	 * Return the processing time of the request in milliseconds.
	 */
	/**
	 * 返回请求的处理时间（以毫秒为单位）。 
	 * 
	 */
	public long getProcessingTimeMillis() {
		return this.processingTimeMillis;
	}

	/**
	 * Return the id of the HTTP session, if any.
	 */
	/**
	 * 返回HTTP会话的ID（如果有）。 
	 * 
	 */
	@Nullable
	public String getSessionId() {
		return this.sessionId;
	}

	/**
	 * Return the name of the user that was associated with the request
	 * (usually the UserPrincipal).
	 * @see javax.servlet.http.HttpServletRequest#getUserPrincipal()
	 */
	/**
	 * 返回与请求关联的用户名（通常是UserPrincipal）。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getUserPrincipal（）
	 */
	@Nullable
	public String getUserName() {
		return this.userName;
	}

	/**
	 * Return whether the request failed.
	 */
	/**
	 * 返回请求是否失败。 
	 * 
	 */
	public boolean wasFailure() {
		return (this.failureCause != null);
	}

	/**
	 * Return the cause of failure, if any.
	 */
	/**
	 * 返回失败原因（如果有）。 
	 * 
	 */
	@Nullable
	public Throwable getFailureCause() {
		return this.failureCause;
	}


	/**
	 * Return a short description of this event, only involving
	 * the most important context data.
	 */
	/**
	 * 返回此事件的简短描述，仅涉及最重要的上下文数据。 
	 * 
	 */
	public String getShortDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("session=[").append(this.sessionId).append("]; ");
		sb.append("user=[").append(this.userName).append("]; ");
		return sb.toString();
	}

	/**
	 * Return a full description of this event, involving
	 * all available context data.
	 */
	/**
	 * 返回此事件的完整描述，包括所有可用的上下文数据。 
	 * 
	 */
	public String getDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("session=[").append(this.sessionId).append("]; ");
		sb.append("user=[").append(this.userName).append("]; ");
		sb.append("time=[").append(this.processingTimeMillis).append("ms]; ");
		sb.append("status=[");
		if (!wasFailure()) {
			sb.append("OK");
		}
		else {
			sb.append("failed: ").append(this.failureCause);
		}
		sb.append(']');
		return sb.toString();
	}

	@Override
	public String toString() {
		return ("RequestHandledEvent: " + getDescription());
	}

}
