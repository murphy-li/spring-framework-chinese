/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.support;

import org.springframework.lang.Nullable;

/**
 * Servlet-specific subclass of RequestHandledEvent,
 * adding servlet-specific context information.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see org.springframework.web.servlet.FrameworkServlet
 * @see org.springframework.context.ApplicationContext#publishEvent
 */
/**
 * RequestHandledEvent的特定于Servlet的子类，添加了特定于Servlet的上下文信息。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  org.springframework.web.servlet.FrameworkServlet 
 * @see  org.springframework.context.ApplicationContext＃publishEvent
 */
@SuppressWarnings("serial")
public class ServletRequestHandledEvent extends RequestHandledEvent {

	/** URL that triggered the request. */
	/**
	 * 触发请求的URL。 
	 * 
	 */
	private final String requestUrl;

	/** IP address that the request came from. */
	/**
	 * 请求来自的IP地址。 
	 * 
	 */
	private final String clientAddress;

	/** Usually GET or POST. */
	/**
	 * 通常是GET或POST。 
	 * 
	 */
	private final String method;

	/** Name of the servlet that handled the request. */
	/**
	 * 处理请求的servlet的名称。 
	 * 
	 */
	private final String servletName;

	/** HTTP status code of the response. */
	/**
	 * 响应的HTTP状态代码。 
	 * 
	 */
	private final int statusCode;


	/**
	 * Create a new ServletRequestHandledEvent.
	 * @param source the component that published the event
	 * @param requestUrl the URL of the request
	 * @param clientAddress the IP address that the request came from
	 * @param method the HTTP method of the request (usually GET or POST)
	 * @param servletName the name of the servlet that handled the request
	 * @param sessionId the id of the HTTP session, if any
	 * @param userName the name of the user that was associated with the
	 * request, if any (usually the UserPrincipal)
	 * @param processingTimeMillis the processing time of the request in milliseconds
	 */
	/**
	 * 创建一个新的ServletRequestHandledEvent。 
	 *  
	 * @param 来源发布事件的组件
	 * @param  requestUrl请求的URL 
	 * @param  clientAddress请求来自的IP地址
	 * @param 方法请求的HTTP方法（通常是GET或POST ）
	 * @param  servletName处理请求的servlet的名称
	 * @param  sessionId HTTP会话的ID（如果有的话）
	 * @param  userName与请求关联的用户名（如果有的话（通常） UserPrincipal）
	 * @param  processingTimeMillis请求的处理时间（以毫秒为单位）
	 */
	public ServletRequestHandledEvent(Object source, String requestUrl,
			String clientAddress, String method, String servletName,
			@Nullable String sessionId, @Nullable String userName, long processingTimeMillis) {

		super(source, sessionId, userName, processingTimeMillis);
		this.requestUrl = requestUrl;
		this.clientAddress = clientAddress;
		this.method = method;
		this.servletName = servletName;
		this.statusCode = -1;
	}

	/**
	 * Create a new ServletRequestHandledEvent.
	 * @param source the component that published the event
	 * @param requestUrl the URL of the request
	 * @param clientAddress the IP address that the request came from
	 * @param method the HTTP method of the request (usually GET or POST)
	 * @param servletName the name of the servlet that handled the request
	 * @param sessionId the id of the HTTP session, if any
	 * @param userName the name of the user that was associated with the
	 * request, if any (usually the UserPrincipal)
	 * @param processingTimeMillis the processing time of the request in milliseconds
	 * @param failureCause the cause of failure, if any
	 */
	/**
	 * 创建一个新的ServletRequestHandledEvent。 
	 *  
	 * @param 来源发布事件的组件
	 * @param  requestUrl请求的URL 
	 * @param  clientAddress请求来自的IP地址
	 * @param 方法请求的HTTP方法（通常是GET或POST ）
	 * @param  servletName处理请求的servlet的名称
	 * @param  sessionId HTTP会话的ID（如果有的话）
	 * @param  userName与请求关联的用户名（如果有的话（通常） UserPrincipal）
	 * @param  processingTimeMillis请求的处理时间（以毫秒为单位）
	 * @param  failure引起失败的原因（如果有）
	 */
	public ServletRequestHandledEvent(Object source, String requestUrl,
			String clientAddress, String method, String servletName, @Nullable String sessionId,
			@Nullable String userName, long processingTimeMillis, @Nullable Throwable failureCause) {

		super(source, sessionId, userName, processingTimeMillis, failureCause);
		this.requestUrl = requestUrl;
		this.clientAddress = clientAddress;
		this.method = method;
		this.servletName = servletName;
		this.statusCode = -1;
	}

	/**
	 * Create a new ServletRequestHandledEvent.
	 * @param source the component that published the event
	 * @param requestUrl the URL of the request
	 * @param clientAddress the IP address that the request came from
	 * @param method the HTTP method of the request (usually GET or POST)
	 * @param servletName the name of the servlet that handled the request
	 * @param sessionId the id of the HTTP session, if any
	 * @param userName the name of the user that was associated with the
	 * request, if any (usually the UserPrincipal)
	 * @param processingTimeMillis the processing time of the request in milliseconds
	 * @param failureCause the cause of failure, if any
	 * @param statusCode the HTTP status code of the response
	 */
	/**
	 * 创建一个新的ServletRequestHandledEvent。 
	 *  
	 * @param 来源发布事件的组件
	 * @param  requestUrl请求的URL 
	 * @param  clientAddress请求来自的IP地址
	 * @param 方法请求的HTTP方法（通常是GET或POST ）
	 * @param  servletName处理请求的servlet的名称
	 * @param  sessionId HTTP会话的ID（如果有的话）
	 * @param  userName与请求关联的用户名（如果有的话（通常） UserPrincipal）
	 * @param  processingTimeMillis请求的处理时间（以毫秒为单位）
	 * @param  failure引起失败的原因（如果有的话）
	 * @param  statusCode响应的HTTP状态代码
	 */
	public ServletRequestHandledEvent(Object source, String requestUrl,
			String clientAddress, String method, String servletName, @Nullable String sessionId,
			@Nullable String userName, long processingTimeMillis, @Nullable Throwable failureCause, int statusCode) {

		super(source, sessionId, userName, processingTimeMillis, failureCause);
		this.requestUrl = requestUrl;
		this.clientAddress = clientAddress;
		this.method = method;
		this.servletName = servletName;
		this.statusCode = statusCode;
	}


	/**
	 * Return the URL of the request.
	 */
	/**
	 * 返回请求的URL。 
	 * 
	 */
	public String getRequestUrl() {
		return this.requestUrl;
	}

	/**
	 * Return the IP address that the request came from.
	 */
	/**
	 * 返回请求来自的IP地址。 
	 * 
	 */
	public String getClientAddress() {
		return this.clientAddress;
	}

	/**
	 * Return the HTTP method of the request (usually GET or POST).
	 */
	/**
	 * 返回请求的HTTP方法（通常是GET或POST）。 
	 * 
	 */
	public String getMethod() {
		return this.method;
	}

	/**
	 * Return the name of the servlet that handled the request.
	 */
	/**
	 * 返回处理请求的servlet的名称。 
	 * 
	 */
	public String getServletName() {
		return this.servletName;
	}

	/**
	 * Return the HTTP status code of the response or -1 if the status
	 * code is not available.
	 * @since 4.1
	 */
	/**
	 * 返回响应的HTTP状态代码； 
	 * 如果状态代码不可用，则返回-1。 
	 *  @始于4.1
	 */
	public int getStatusCode() {
		return this.statusCode;
	}

	@Override
	public String getShortDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("url=[").append(getRequestUrl()).append("]; ");
		sb.append("client=[").append(getClientAddress()).append("]; ");
		sb.append(super.getShortDescription());
		return sb.toString();
	}

	@Override
	public String getDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("url=[").append(getRequestUrl()).append("]; ");
		sb.append("client=[").append(getClientAddress()).append("]; ");
		sb.append("method=[").append(getMethod()).append("]; ");
		sb.append("servlet=[").append(getServletName()).append("]; ");
		sb.append(super.getDescription());
		return sb.toString();
	}

	@Override
	public String toString() {
		return "ServletRequestHandledEvent: " + getDescription();
	}

}
