/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.support;

import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;

import org.springframework.beans.factory.support.BeanNameGenerator;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;
import org.springframework.context.annotation.AnnotationConfigRegistry;
import org.springframework.context.annotation.AnnotationConfigUtils;
import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;
import org.springframework.context.annotation.ScopeMetadataResolver;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.context.ContextLoader;

/**
 * {@link org.springframework.web.context.WebApplicationContext WebApplicationContext}
 * implementation which accepts <em>component classes</em> as input &mdash; in particular
 * {@link org.springframework.context.annotation.Configuration @Configuration}-annotated
 * classes, but also plain {@link org.springframework.stereotype.Component @Component}
 * classes and JSR-330 compliant classes using {@code javax.inject} annotations.
 *
 * <p>Allows for registering classes one by one (specifying class names as config
 * location) as well as for classpath scanning (specifying base packages as config location).
 *
 * <p>This is essentially the equivalent of
 * {@link org.springframework.context.annotation.AnnotationConfigApplicationContext
 * AnnotationConfigApplicationContext} for a web environment.
 *
 * <p>To make use of this application context, the
 * {@linkplain ContextLoader#CONTEXT_CLASS_PARAM "contextClass"} context-param for
 * ContextLoader and/or "contextClass" init-param for FrameworkServlet must be set to
 * the fully-qualified name of this class.
 *
 * <p>As of Spring 3.1, this class may also be directly instantiated and injected into
 * Spring's {@code DispatcherServlet} or {@code ContextLoaderListener} when using the
 * {@link org.springframework.web.WebApplicationInitializer WebApplicationInitializer}
 * code-based alternative to {@code web.xml}. See its Javadoc for details and usage examples.
 *
 * <p>Unlike {@link XmlWebApplicationContext}, no default configuration class locations
 * are assumed. Rather, it is a requirement to set the
 * {@linkplain ContextLoader#CONFIG_LOCATION_PARAM "contextConfigLocation"}
 * context-param for {@link ContextLoader} and/or "contextConfigLocation" init-param for
 * FrameworkServlet.  The param-value may contain both fully-qualified
 * class names and base packages to scan for components. See {@link #loadBeanDefinitions}
 * for exact details on how these locations are processed.
 *
 * <p>As an alternative to setting the "contextConfigLocation" parameter, users may
 * implement an {@link org.springframework.context.ApplicationContextInitializer
 * ApplicationContextInitializer} and set the
 * {@linkplain ContextLoader#CONTEXT_INITIALIZER_CLASSES_PARAM "contextInitializerClasses"}
 * context-param / init-param. In such cases, users should favor the {@link #refresh()}
 * and {@link #scan(String...)} methods over the {@link #setConfigLocation(String)}
 * method, which is primarily for use by {@code ContextLoader}.
 *
 * <p>Note: In case of multiple {@code @Configuration} classes, later {@code @Bean}
 * definitions will override ones defined in earlier loaded files. This can be leveraged
 * to deliberately override certain bean definitions via an extra {@code @Configuration}
 * class.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.0
 * @see org.springframework.context.annotation.AnnotationConfigApplicationContext
 */
/**
 * {@link  org.springframework.web.context.WebApplicationContext WebApplicationContext}实现接受<em>组件类</ em>作为输入-特别是{@link  org.springframework.context.annotation.Configuration @Configuration}注释的类，但也包括普通的{@link  org.springframework.stereotype.Component @Component}类和使用{@code  javax.inject}注释的JSR-330兼容类。 
 *  <p>允许一个接一个地注册类（将类名指定为配置位置），以及进行类路径扫描（将基本包指定为配置位置）。 
 *  <p>对于网络环境，这基本上等同于{@link  org.springframework.context.annotation.AnnotationConfigApplicationContext AnnotationConfigApplicationContext}。 
 *  <p>要使用此应用程序上下文，必须将用于ContextLoader的{@link  plain ContextLoader＃CONTEXT_CLASS_PARAM"contextClass"}上下文参数和/或FrameworkServlet的"contextClass"init-param设置为完全限定的名称这个班级的<p>从Spring 3.1开始，使用{@link  org.springframework.web.WebApplicationInitializer WebApplicationInitializer时，也可以直接实例化此类并将其注入Spring的{@code  DispatcherServlet}或{@code  ContextLoaderListener}中。 
 *  }基于代码的替代{@code  web.xml}。 
 * 有关详细信息和用法示例，请参见其Javadoc。 
 *  <p>与{@link  XmlWebApplicationContext}不同，不假定默认配置类位置。 
 * 而是需要为{@link  ContextLoader}设置{@link  plain ContextLoader＃CONFIG_LOCATION_PARAM"contextConfigLocation"}上下文参数和/或为FrameworkServlet设置"contextConfigLocation"init参数。 
 *  param-value可能包含完全合格的类名和用于扫描组件的基本包。 
 * 有关如何处理这些位置的确切详细信息，请参见{@link  #loadBeanDefinitions}。 
 *  <p>作为设置"contextConfigLocation"参数的替代方法，用户可以实现{@link  org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}并设置{@link  plain ContextLoader＃CONTEXT_INITIALIZER_CLASSES_PARAM"contextInitializerClasses"}上下文-参数/初始化参数。 
 * 在这种情况下，相对于{@link  #setConfigLocation（String）}方法，用户应该更喜欢{@link  #refresh（）}和{@link  #scan（String ...）}方法主要供{@code  ContextLoader}使用。 
 *  <p>注意：如果有多个{@code  @Configuration}类，则以后的{@code  @Bean}定义将覆盖较早加载的文件中定义的定义。 
 * 通过额外的{@code  @Configuration}类，可以利用它来故意覆盖某些Bean定义。 
 *  @author 克里斯·比姆斯（Chris Beams）@author 于尔根·霍勒（Juergen Hoeller）@从3.0开始
 * @see  org.springframework.context.annotation.AnnotationConfigApplicationContext
 */
public class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext
		implements AnnotationConfigRegistry {

	@Nullable
	private BeanNameGenerator beanNameGenerator;

	@Nullable
	private ScopeMetadataResolver scopeMetadataResolver;

	private final Set<Class<?>> componentClasses = new LinkedHashSet<>();

	private final Set<String> basePackages = new LinkedHashSet<>();


	/**
	 * Set a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}
	 * and/or {@link ClassPathBeanDefinitionScanner}.
	 * <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}.
	 * @see AnnotatedBeanDefinitionReader#setBeanNameGenerator
	 * @see ClassPathBeanDefinitionScanner#setBeanNameGenerator
	 */
	/**
	 * 设置自定义的{@link  BeanNameGenerator}与{@link  AnnotatedBeanDefinitionReader}和/或{@link  ClassPathBeanDefinitionScanner}一起使用。 
	 *  <p>默认值为{@link  org.springframework.context.annotation.AnnotationBeanNameGenerator}。 
	 *  
	 * @see  AnnotatedBeanDefinitionReader＃setBeanNameGenerator 
	 * @see  ClassPathBeanDefinitionScanner＃setBeanNameGenerator
	 */
	public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {
		this.beanNameGenerator = beanNameGenerator;
	}

	/**
	 * Return the custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}
	 * and/or {@link ClassPathBeanDefinitionScanner}, if any.
	 */
	/**
	 * 返回自定义{{@link> BeanNameGenerator}，以与{@link  AnnotatedBeanDefinitionReader}和/或{@link  ClassPathBeanDefinitionScanner}（如果有）一起使用。 
	 * 
	 */
	@Nullable
	protected BeanNameGenerator getBeanNameGenerator() {
		return this.beanNameGenerator;
	}

	/**
	 * Set a custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}
	 * and/or {@link ClassPathBeanDefinitionScanner}.
	 * <p>Default is an {@link org.springframework.context.annotation.AnnotationScopeMetadataResolver}.
	 * @see AnnotatedBeanDefinitionReader#setScopeMetadataResolver
	 * @see ClassPathBeanDefinitionScanner#setScopeMetadataResolver
	 */
	/**
	 * 设置自定义{@link  ScopeMetadataResolver}以便与{@link  AnnotatedBeanDefinitionReader}和/或{@link  ClassPathBeanDefinitionScanner}一起使用。 
	 *  <p>默认值为{@link  org.springframework.context.annotation.AnnotationScopeMetadataResolver}。 
	 *  
	 * @see  AnnotatedBeanDefinitionReader＃setScopeMetadataResolver 
	 * @see  ClassPathBeanDefinitionScanner＃setScopeMetadataResolver
	 */
	public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {
		this.scopeMetadataResolver = scopeMetadataResolver;
	}

	/**
	 * Return the custom {@link ScopeMetadataResolver} for use with {@link AnnotatedBeanDefinitionReader}
	 * and/or {@link ClassPathBeanDefinitionScanner}, if any.
	 */
	/**
	 * 返回自定义{@link  ScopeMetadataResolver}，以与{@link  AnnotatedBeanDefinitionReader}和/或{@link  ClassPathBeanDefinitionScanner}（如果有）一起使用。 
	 * 
	 */
	@Nullable
	protected ScopeMetadataResolver getScopeMetadataResolver() {
		return this.scopeMetadataResolver;
	}


	/**
	 * Register one or more component classes to be processed.
	 * <p>Note that {@link #refresh()} must be called in order for the context
	 * to fully process the new classes.
	 * @param componentClasses one or more component classes,
	 * e.g. {@link org.springframework.context.annotation.Configuration @Configuration} classes
	 * @see #scan(String...)
	 * @see #loadBeanDefinitions(DefaultListableBeanFactory)
	 * @see #setConfigLocation(String)
	 * @see #refresh()
	 */
	/**
	 * 注册一个或多个要处理的组件类。 
	 *  <p>请注意，必须调用{@link  #refresh（）}才能使上下文完全处理新类。 
	 *  
	 * @param  componentClasses一个或多个组件类，例如{@link  org.springframework.context.annotation.Configuration @Configuration}类
	 * @see  #scan（String ...）
	 * @see  #loadBeanDefinitions（DefaultListableBeanFactory）
	 * @see  #setConfigLocation（String）<@查看> #refresh（）
	 */
	@Override
	public void register(Class<?>... componentClasses) {
		Assert.notEmpty(componentClasses, "At least one component class must be specified");
		Collections.addAll(this.componentClasses, componentClasses);
	}

	/**
	 * Perform a scan within the specified base packages.
	 * <p>Note that {@link #refresh()} must be called in order for the context
	 * to fully process the new classes.
	 * @param basePackages the packages to check for component classes
	 * @see #loadBeanDefinitions(DefaultListableBeanFactory)
	 * @see #register(Class...)
	 * @see #setConfigLocation(String)
	 * @see #refresh()
	 */
	/**
	 * 在指定的基本程序包中执行扫描。 
	 *  <p>请注意，必须调用{@link  #refresh（）}才能使上下文完全处理新类。 
	 *  
	 * @param  base打包软件包以检查组件类
	 * @see  #loadBeanDefinitions（DefaultListableBeanFactory）
	 * @see  #register（Class ...）
	 * @see  #setConfigLocation（String）
	 * @see  #refresh（）
	 */
	@Override
	public void scan(String... basePackages) {
		Assert.notEmpty(basePackages, "At least one base package must be specified");
		Collections.addAll(this.basePackages, basePackages);
	}


	/**
	 * Register a {@link org.springframework.beans.factory.config.BeanDefinition} for
	 * any classes specified by {@link #register(Class...)} and scan any packages
	 * specified by {@link #scan(String...)}.
	 * <p>For any values specified by {@link #setConfigLocation(String)} or
	 * {@link #setConfigLocations(String[])}, attempt first to load each location as a
	 * class, registering a {@code BeanDefinition} if class loading is successful,
	 * and if class loading fails (i.e. a {@code ClassNotFoundException} is raised),
	 * assume the value is a package and attempt to scan it for component classes.
	 * <p>Enables the default set of annotation configuration post processors, such that
	 * {@code @Autowired}, {@code @Required}, and associated annotations can be used.
	 * <p>Configuration class bean definitions are registered with generated bean
	 * definition names unless the {@code value} attribute is provided to the stereotype
	 * annotation.
	 * @param beanFactory the bean factory to load bean definitions into
	 * @see #register(Class...)
	 * @see #scan(String...)
	 * @see #setConfigLocation(String)
	 * @see #setConfigLocations(String[])
	 * @see AnnotatedBeanDefinitionReader
	 * @see ClassPathBeanDefinitionScanner
	 */
	/**
	 * 为{@link  #register（Class ...）}指定的任何类注册一个{@link  org.springframework.beans.factory.config.BeanDefinition}并扫描{@link ＃ scan（String ...）}。 
	 *  <p>对于由{@link  #setConfigLocation（String）}或{@link  #setConfigLocations（String []）}指定的任何值，请首先尝试将每个位置加载为类，并注册{<@code > BeanDefinition}，如果类加载成功，并且类加载失败（即引发{@code  ClassNotFoundException}），则假定该值是一个包，并尝试对其进行扫描以查找组件类。 
	 *  <p>启用注释配置后处理器的默认集合，例如可以使用{@code  @Autowired}，{<@code> @Required}和关联的注释。 
	 *  <p>除非将{@code  value}属性提供给构造型注释，否则将使用生成的Bean定义名称注册配置类Bean定义。 
	 *  
	 * @param  beanFactory bean工厂将bean定义加载到
	 * @see  #register（Class ...）
	 * @see  #scan（String ...）
	 * @see  #setConfigLocation（String）
	 * @see  #setConfigLocations（String []）
	 * @see  AnnotatedBeanDefinitionReader 
	 * @see  ClassPathBeanDefinitionScanner
	 */
	@Override
	protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {
		AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory);
		ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory);

		BeanNameGenerator beanNameGenerator = getBeanNameGenerator();
		if (beanNameGenerator != null) {
			reader.setBeanNameGenerator(beanNameGenerator);
			scanner.setBeanNameGenerator(beanNameGenerator);
			beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);
		}

		ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver();
		if (scopeMetadataResolver != null) {
			reader.setScopeMetadataResolver(scopeMetadataResolver);
			scanner.setScopeMetadataResolver(scopeMetadataResolver);
		}

		if (!this.componentClasses.isEmpty()) {
			if (logger.isDebugEnabled()) {
				logger.debug("Registering component classes: [" +
						StringUtils.collectionToCommaDelimitedString(this.componentClasses) + "]");
			}
			reader.register(ClassUtils.toClassArray(this.componentClasses));
		}

		if (!this.basePackages.isEmpty()) {
			if (logger.isDebugEnabled()) {
				logger.debug("Scanning base packages: [" +
						StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]");
			}
			scanner.scan(StringUtils.toStringArray(this.basePackages));
		}

		String[] configLocations = getConfigLocations();
		if (configLocations != null) {
			for (String configLocation : configLocations) {
				try {
					Class<?> clazz = ClassUtils.forName(configLocation, getClassLoader());
					if (logger.isTraceEnabled()) {
						logger.trace("Registering [" + configLocation + "]");
					}
					reader.register(clazz);
				}
				catch (ClassNotFoundException ex) {
					if (logger.isTraceEnabled()) {
						logger.trace("Could not load class for config location [" + configLocation +
								"] - trying package scan. " + ex);
					}
					int count = scanner.scan(configLocation);
					if (count == 0 && logger.isDebugEnabled()) {
						logger.debug("No component classes found for specified class/package [" + configLocation + "]");
					}
				}
			}
		}
	}


	/**
	 * Build an {@link AnnotatedBeanDefinitionReader} for the given bean factory.
	 * <p>This should be pre-configured with the {@code Environment} (if desired)
	 * but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.
	 * @param beanFactory the bean factory to load bean definitions into
	 * @since 4.1.9
	 * @see #getEnvironment()
	 * @see #getBeanNameGenerator()
	 * @see #getScopeMetadataResolver()
	 */
	/**
	 * 为给定的bean工厂构建一个{@link  AnnotatedBeanDefinitionReader}。 
	 *  <p>应该使用{@code  Environment}（如果需要）进行预配置，但尚未使用{@code  BeanNameGenerator}或{@code  ScopeMetadataResolver}进行预配置。 
	 *  
	 * @param  beanFactory bean工厂，用于将bean定义加载到@since 4.1.9起。 
	 * 
	 * @see  #getEnvironment（）
	 * @see  #getBeanNameGenerator（）
	 * @see  #getScopeMetadataResolver（）
	 */
	protected AnnotatedBeanDefinitionReader getAnnotatedBeanDefinitionReader(DefaultListableBeanFactory beanFactory) {
		return new AnnotatedBeanDefinitionReader(beanFactory, getEnvironment());
	}

	/**
	 * Build a {@link ClassPathBeanDefinitionScanner} for the given bean factory.
	 * <p>This should be pre-configured with the {@code Environment} (if desired)
	 * but not with a {@code BeanNameGenerator} or {@code ScopeMetadataResolver} yet.
	 * @param beanFactory the bean factory to load bean definitions into
	 * @since 4.1.9
	 * @see #getEnvironment()
	 * @see #getBeanNameGenerator()
	 * @see #getScopeMetadataResolver()
	 */
	/**
	 * 为给定的bean工厂构建一个{@link  ClassPathBeanDefinitionScanner}。 
	 *  <p>应该使用{@code  Environment}（如果需要）进行预配置，但尚未使用{@code  BeanNameGenerator}或{@code  ScopeMetadataResolver}进行预配置。 
	 *  
	 * @param  beanFactory bean工厂，用于将bean定义加载到@since 4.1.9起。 
	 * 
	 * @see  #getEnvironment（）
	 * @see  #getBeanNameGenerator（）
	 * @see  #getScopeMetadataResolver（）
	 */
	protected ClassPathBeanDefinitionScanner getClassPathBeanDefinitionScanner(DefaultListableBeanFactory beanFactory) {
		return new ClassPathBeanDefinitionScanner(beanFactory, true, getEnvironment());
	}

}
