/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.request.async;

import java.util.concurrent.Callable;

import org.springframework.core.task.AsyncTaskExecutor;
import org.springframework.web.context.request.NativeWebRequest;

/**
 * Intercepts concurrent request handling, where the concurrent result is
 * obtained by executing a {@link Callable} on behalf of the application with
 * an {@link AsyncTaskExecutor}.
 *
 * <p>A {@code CallableProcessingInterceptor} is invoked before and after the
 * invocation of the {@code Callable} task in the asynchronous thread, as well
 * as on timeout/error from a container thread, or after completing for any reason
 * including a timeout or network error.
 *
 * <p>As a general rule exceptions raised by interceptor methods will cause
 * async processing to resume by dispatching back to the container and using
 * the Exception instance as the concurrent result. Such exceptions will then
 * be processed through the {@code HandlerExceptionResolver} mechanism.
 *
 * <p>The {@link #handleTimeout(NativeWebRequest, Callable) handleTimeout} method
 * can select a value to be used to resume processing.
 *
 * @author Rossen Stoyanchev
 * @author Rob Winch
 * @since 3.2
 */
/**
 * 拦截并发请求处理，并发结果是通过使用{@link  AsyncTaskExecutor}代表应用程序执行{@link  Callable}来获得的。 
 *  <p>在异步线程中调用{@code  Callable}任务之前和之后，容器线程超时或错误时或完成任何任务之后，将调用{@code  CallableProcessingInterceptor}原因包括超时或网络错误。 
 *  <p>作为一般规则，拦截器方法引发的异常将通过分派回容器并将Exception实例用作并发结果来恢复异步处理。 
 * 然后将通过{@code  HandlerExceptionResolver}机制处理此类异常。 
 *  <p> {<@link> #handleTimeout（NativeWebRequest，Callable）handleTimeout}方法可以选择一个用于恢复处理的值。 
 *  @author  Rossen Stoyanchev @author  Rob Winch @从3.2开始
 */
public interface CallableProcessingInterceptor {

	/**
	 * Constant indicating that no result has been determined by this
	 * interceptor, giving subsequent interceptors a chance.
	 * @see #handleTimeout
	 * @see #handleError
	 */
	/**
	 * 指示此拦截器尚未确定结果的常数，为后续的拦截器提供机会。 
	 *  
	 * @see  #handleTimeout 
	 * @see  #handleError
	 */
	Object RESULT_NONE = new Object();

	/**
	 * Constant indicating that the response has been handled by this interceptor
	 * without a result and that no further interceptors are to be invoked.
	 * @see #handleTimeout
	 * @see #handleError
	 */
	/**
	 * 指示该响应已由此拦截器处理而没有结果并且将不再调用其他拦截器的常数。 
	 *  
	 * @see  #handleTimeout 
	 * @see  #handleError
	 */
	Object RESPONSE_HANDLED = new Object();


	/**
	 * Invoked <em>before</em> the start of concurrent handling in the original
	 * thread in which the {@code Callable} is submitted for concurrent handling.
	 * <p>This is useful for capturing the state of the current thread just prior to
	 * invoking the {@link Callable}. Once the state is captured, it can then be
	 * transferred to the new {@link Thread} in
	 * {@link #preProcess(NativeWebRequest, Callable)}. Capturing the state of
	 * Spring Security's SecurityContextHolder and migrating it to the new Thread
	 * is a concrete example of where this is useful.
	 * <p>The default implementation is empty.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @throws Exception in case of errors
	 */
	/**
	 * 在提交了{@code  Callable}进行并发处理的原始线程中，在并发处理开始之前<em> </ em>进行调用。 
	 *  <p>这对于在调用{@link  Callable}之前捕获当前线程的状态很有用。 
	 * 捕获状态后，可以将其传输到{@link  #preProcess（NativeWebRequest，Callable）}中的新{@link 线程}。 
	 * 捕获Spring Security的SecurityContextHolder的状态并将其迁移到新的Thread是一个有用的具体示例。 
	 *  <p>默认实现为空。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @throws 错误时发生异常
	 */
	default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {
	}

	/**
	 * Invoked <em>after</em> the start of concurrent handling in the async
	 * thread in which the {@code Callable} is executed and <em>before</em> the
	 * actual invocation of the {@code Callable}.
	 * <p>The default implementation is empty.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @throws Exception in case of errors
	 */
	/**
	 * 在<em>之后</ em>在执行{@code  Callable}的异步线程中开始并发处理，在<em>之前</ em>实际调用{@code  Callable }。 
	 *  <p>默认实现为空。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @throws 错误时发生异常
	 */
	default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {
	}

	/**
	 * Invoked <em>after</em> the {@code Callable} has produced a result in the
	 * async thread in which the {@code Callable} is executed. This method may
	 * be invoked later than {@code afterTimeout} or {@code afterCompletion}
	 * depending on when the {@code Callable} finishes processing.
	 * <p>The default implementation is empty.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @param concurrentResult the result of concurrent processing, which could
	 * be a {@link Throwable} if the {@code Callable} raised an exception
	 * @throws Exception in case of errors
	 */
	/**
	 * 在<em>之后</ em>调用{@code  Callable}在异步线程中产生了执行{@code  Callable}的结果。 
	 * 取决于{@code  Callable}何时完成处理，可以在{@code  afterTimeout}之后或{@code  afterCompletion}之后调用此方法。 
	 *  <p>默认实现为空。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @param  parallelResult并发处理的结果，如果{@code 可调用，则可能是{@link  Throwable} }引发异常
	 * @throws 发生错误时发生异常
	 */
	default <T> void postProcess(NativeWebRequest request, Callable<T> task,
			Object concurrentResult) throws Exception {
	}

	/**
	 * Invoked from a container thread when the async request times out before
	 * the {@code Callable} task completes. Implementations may return a value,
	 * including an {@link Exception}, to use instead of the value the
	 * {@link Callable} did not return in time.
	 * <p>The default implementation always returns {@link #RESULT_NONE}.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @return a concurrent result value; if the value is anything other than
	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing
	 * is resumed and subsequent interceptors are not invoked
	 * @throws Exception in case of errors
	 */
	/**
	 * 在{@code  Callable}任务完成之前，异步请求超时时从容器线程调用。 
	 * 实现可能会返回一个包含{@link 异常}的值，以代替{@link  Callable}未及时返回的值。 
	 *  <p>默认实现始终返回{@link  #RESULT_NONE}。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @return 并发结果值； 
	 * 如果该值不是{@link  #RESULT_NONE}或{@link  #RESPONSE_HANDLED}以外的任何值，则恢复并发处理，并且不调用后续的拦截器
	 * @throws 错误时发生异常
	 */
	default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {
		return RESULT_NONE;
	}

	/**
	 * Invoked from a container thread when an error occurred while processing
	 * the async request before the {@code Callable} task completes.
	 * Implementations may return a value, including an {@link Exception}, to
	 * use instead of the value the {@link Callable} did not return in time.
	 * <p>The default implementation always returns {@link #RESULT_NONE}.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @param t the error that occurred while request processing
	 * @return a concurrent result value; if the value is anything other than
	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing
	 * is resumed and subsequent interceptors are not invoked
	 * @throws Exception in case of errors
	 * @since 5.0
	 */
	/**
	 * 在{@code  Callable}任务完成之前处理异步请求时发生错误时，从容器线程调用。 
	 * 实现可能会返回一个包含{@link 异常}的值，以代替{@link  Callable}未及时返回的值。 
	 *  <p>默认实现始终返回{@link  #RESULT_NONE}。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @param 请求处理
	 * @return 并发结果值时发生的错误； 
	 * 如果该值不是{@link  #RESULT_NONE}或{@link  #RESPONSE_HANDLED}以外的任何值，则恢复并发处理，并且不调用后续的拦截器
	 * @throws 自5.0起出现错误的异常
	 */
	default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception {
		return RESULT_NONE;
	}

	/**
	 * Invoked from a container thread when async processing completes for any
	 * reason including timeout or network error.
	 * <p>The default implementation is empty.
	 * @param request the current request
	 * @param task the task for the current async request
	 * @throws Exception in case of errors
	 */
	/**
	 * 当异步处理由于任何原因（包括超时或网络错误）而完成时，从容器线程调用。 
	 *  <p>默认实现为空。 
	 *  
	 * @param 请求当前请求
	 * @param 任务当前异步请求的任务
	 * @throws 错误时发生异常
	 */
	default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {
	}

}
