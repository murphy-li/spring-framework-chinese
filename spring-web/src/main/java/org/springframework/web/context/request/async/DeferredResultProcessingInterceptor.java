/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.request.async;

import org.springframework.web.context.request.NativeWebRequest;

/**
 * Intercepts concurrent request handling, where the concurrent result is
 * obtained by waiting for a {@link DeferredResult} to be set from a thread
 * chosen by the application (e.g. in response to some external event).
 *
 * <p>A {@code DeferredResultProcessingInterceptor} is invoked before the start
 * of async processing, after the {@code DeferredResult} is set as well as on
 * timeout/error, or after completing for any reason including a timeout or network
 * error.
 *
 * <p>As a general rule exceptions raised by interceptor methods will cause
 * async processing to resume by dispatching back to the container and using
 * the Exception instance as the concurrent result. Such exceptions will then
 * be processed through the {@code HandlerExceptionResolver} mechanism.
 *
 * <p>The {@link #handleTimeout(NativeWebRequest, DeferredResult) handleTimeout}
 * method can set the {@code DeferredResult} in order to resume processing.
 *
 * @author Rossen Stoyanchev
 * @author Rob Winch
 * @since 3.2
 */
/**
 * 拦截并发请求处理，其中并发结果是通过等待从应用程序选择的线程中设置{@link  DeferredResult}来获得的（例如，响应某些外部事件）。 
 *  <p>在开始异步处理之前，设置{@code  DeferredResult}之后，超时/错误时或由于某种原因（包括超时或网络）而完成后，将调用{@code  DeferredResultProcessingInterceptor}错误。 
 *  <p>作为一般规则，拦截器方法引发的异常将通过分派回容器并将Exception实例用作并发结果来恢复异步处理。 
 * 然后将通过{@code  HandlerExceptionResolver}机制处理此类异常。 
 *  <p> {<@link> #handleTimeout（NativeWebRequest，DeferredResult）handleTimeout}方法可以设置{@code  DeferredResult}以便继续处理。 
 *  @author  Rossen Stoyanchev @author  Rob Winch @从3.2开始
 */
public interface DeferredResultProcessingInterceptor {

	/**
	 * Invoked immediately before the start of concurrent handling, in the same
	 * thread that started it. This method may be used to capture state just prior
	 * to the start of concurrent processing with the given {@code DeferredResult}.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request
	 * @throws Exception in case of errors
	 */
	/**
	 * 在并发处理开始之前立即在与启动并发处理相同的线程中调用。 
	 * 此方法可用于在开始使用给定{@code  DeferredResult}进行并发处理之前捕获状态。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult 
	 * @throws 错误时发生异常
	 */
	default <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult)
			throws Exception {
	}

	/**
	 * Invoked immediately after the start of concurrent handling, in the same
	 * thread that started it. This method may be used to detect the start of
	 * concurrent processing with the given {@code DeferredResult}.
	 * <p>The {@code DeferredResult} may have already been set, for example at
	 * the time of its creation or by another thread.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request
	 * @throws Exception in case of errors
	 */
	/**
	 * 并发处理开始后立即在与启动并发处理相同的线程中调用。 
	 * 此方法可用于检测使用给定{@code  DeferredResult}进行的并发处理的开始。 
	 *  <p> {<@code> DeferredResult}可能已经被设置，例如在创建它时或由另一个线程设置。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult 
	 * @throws 错误时发生异常
	 */
	default <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult)
			throws Exception {
	}

	/**
	 * Invoked after a {@code DeferredResult} has been set, via
	 * {@link DeferredResult#setResult(Object)} or
	 * {@link DeferredResult#setErrorResult(Object)}, and is also ready to
	 * handle the concurrent result.
	 * <p>This method may also be invoked after a timeout when the
	 * {@code DeferredResult} was created with a constructor accepting a default
	 * timeout result.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request
	 * @param concurrentResult the result to which the {@code DeferredResult}
	 * @throws Exception in case of errors
	 */
	/**
	 * 在设置{@code  DeferredResult}后，通过{@link  DeferredResult＃setResult（Object）}或{@link  DeferredResult＃setErrorResult（Object）}调用，并且还准备处理并发结果。 
	 *  <p>在使用构造函数接受默认超时结果创建{@code  DeferredResult}时，超时后也可以调用此方法。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult 
	 * @param  current并发结果{@code  DeferredResult} 
	 * @throws 发生错误时的异常结果
	 */
	default <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult,
			Object concurrentResult) throws Exception {
	}

	/**
	 * Invoked from a container thread when an async request times out before
	 * the {@code DeferredResult} has been set. Implementations may invoke
	 * {@link DeferredResult#setResult(Object) setResult} or
	 * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request; if the
	 * {@code DeferredResult} is set, then concurrent processing is resumed and
	 * subsequent interceptors are not invoked
	 * @return {@code true} if processing should continue, or {@code false} if
	 * other interceptors should not be invoked
	 * @throws Exception in case of errors
	 */
	/**
	 * 在设置{@code  DeferredResult}之前，异步请求超时时从容器线程调用。 
	 * 实现可以调用{@link  DeferredResult＃setResult（Object）setResult}或{@link  DeferredResult＃setErrorResult（Object）setErrorResult}以恢复处理。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult； 
	 * 如果设置了{@code  DeferredResult}，则恢复并发处理，并且不调用后续的拦截器
	 * @return  {@code  true}，如果应该继续处理，或者{@code  false}，如果其他拦截器错误时不应调用
	 * @throws 异常
	 */
	default <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult)
			throws Exception {

		return true;
	}

	/**
	 * Invoked from a container thread when an error occurred while processing an async request
	 * before the {@code DeferredResult} has been set. Implementations may invoke
	 * {@link DeferredResult#setResult(Object) setResult} or
	 * {@link DeferredResult#setErrorResult(Object) setErrorResult} to resume processing.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request; if the
	 * {@code DeferredResult} is set, then concurrent processing is resumed and
	 * subsequent interceptors are not invoked
	 * @param t the error that occurred while request processing
	 * @return {@code true} if error handling should continue, or {@code false} if
	 * other interceptors should by bypassed and not be invoked
	 * @throws Exception in case of errors
	 */
	/**
	 * 在设置{@code  DeferredResult}之前处理异步请求时发生错误时，从容器线程调用。 
	 * 实现可以调用{@link  DeferredResult＃setResult（Object）setResult}或{@link  DeferredResult＃setErrorResult（Object）setErrorResult}以恢复处理。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult； 
	 * 如果设置了{@code  DeferredResult}，则恢复并发处理并且不调用后续的拦截器
	 * @param 如果请求处理应在请求处理时发生的错误
	 * @return  {@code  true}继续，或者如果其他拦截器应该绕过而不被调用，则返回{@code  false} 
	 * @throws 错误时发生异常
	 */
	default <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult,
			Throwable t) throws Exception {

		return true;
	}

	/**
	 * Invoked from a container thread when an async request completed for any
	 * reason including timeout and network error. This method is useful for
	 * detecting that a {@code DeferredResult} instance is no longer usable.
	 * @param request the current request
	 * @param deferredResult the DeferredResult for the current request
	 * @throws Exception in case of errors
	 */
	/**
	 * 当异步请求由于任何原因（包括超时和网络错误）而完成时，从容器线程调用。 
	 * 该方法对于检测{@code  DeferredResult}实例不再可用是很有用的。 
	 *  
	 * @param 请求当前请求
	 * @param  deferredResult当前请求的DeferredResult 
	 * @throws 错误时发生异常
	 */
	default <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult)
			throws Exception {
	}

}
