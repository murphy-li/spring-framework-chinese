/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.context.request;

import java.security.Principal;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;

import org.springframework.lang.Nullable;

/**
 * Generic interface for a web request. Mainly intended for generic web
 * request interceptors, giving them access to general request metadata,
 * not for actual handling of the request.
 *
 * @author Juergen Hoeller
 * @author Brian Clozel
 * @since 2.0
 * @see WebRequestInterceptor
 */
/**
 * Web请求的通用接口。 
 * 主要用于通用Web请求拦截器，使它们可以访问通用请求元数据，而不用于实际处理请求。 
 *  @author  Juergen Hoeller @author 布赖恩·克洛泽尔​​（Brian Clozel）@since 2.0起
 * @see  WebRequestInterceptor
 */
public interface WebRequest extends RequestAttributes {

	/**
	 * Return the request header of the given name, or {@code null} if none.
	 * <p>Retrieves the first header value in case of a multi-value header.
	 * @since 3.0
	 * @see javax.servlet.http.HttpServletRequest#getHeader(String)
	 */
	/**
	 * 返回给定名称的请求标头，如果没有，则返回{@code  null}。 
	 *  <p>在多值标头的情况下检索第一个标头值。 
	 *  @since 3.0 
	 * @see  javax.servlet.http.HttpServletRequest＃getHeader（String）
	 */
	@Nullable
	String getHeader(String headerName);

	/**
	 * Return the request header values for the given header name,
	 * or {@code null} if none.
	 * <p>A single-value header will be exposed as an array with a single element.
	 * @since 3.0
	 * @see javax.servlet.http.HttpServletRequest#getHeaders(String)
	 */
	/**
	 * 返回给定标头名称的请求标头值，如果没有，则返回{@code  null}。 
	 *  <p>单值标头将作为具有单个元素的数组公开。 
	 *  @since 3.0 
	 * @see  javax.servlet.http.HttpServletRequest＃getHeaders（String）
	 */
	@Nullable
	String[] getHeaderValues(String headerName);

	/**
	 * Return a Iterator over request header names.
	 * @since 3.0
	 * @see javax.servlet.http.HttpServletRequest#getHeaderNames()
	 */
	/**
	 * 通过请求标头名称返回迭代器。 
	 *  @since 3.0 
	 * @see  javax.servlet.http.HttpServletRequest＃getHeaderNames（）
	 */
	Iterator<String> getHeaderNames();

	/**
	 * Return the request parameter of the given name, or {@code null} if none.
	 * <p>Retrieves the first parameter value in case of a multi-value parameter.
	 * @see javax.servlet.http.HttpServletRequest#getParameter(String)
	 */
	/**
	 * 返回给定名称的请求参数，如果没有，则返回{@code  null}。 
	 *  <p>在多值参数的情况下检索第一个参数值。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getParameter（String）
	 */
	@Nullable
	String getParameter(String paramName);

	/**
	 * Return the request parameter values for the given parameter name,
	 * or {@code null} if none.
	 * <p>A single-value parameter will be exposed as an array with a single element.
	 * @see javax.servlet.http.HttpServletRequest#getParameterValues(String)
	 */
	/**
	 * 返回给定参数名称的请求参数值，如果没有，则返回{@code  null}。 
	 *  <p>单值参数将作为具有单个元素的数组公开。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getParameterValues（String）
	 */
	@Nullable
	String[] getParameterValues(String paramName);

	/**
	 * Return a Iterator over request parameter names.
	 * @since 3.0
	 * @see javax.servlet.http.HttpServletRequest#getParameterNames()
	 */
	/**
	 * 通过请求参数名称返回一个Iterator。 
	 *  @since 3.0 
	 * @see  javax.servlet.http.HttpServletRequest＃getParameterNames（）
	 */
	Iterator<String> getParameterNames();

	/**
	 * Return a immutable Map of the request parameters, with parameter names as map keys
	 * and parameter values as map values. The map values will be of type String array.
	 * <p>A single-value parameter will be exposed as an array with a single element.
	 * @see javax.servlet.http.HttpServletRequest#getParameterMap()
	 */
	/**
	 * 返回请求参数的不变Map，其中参数名称作为映射键，参数值作为映射值。 
	 * 映射值将为String数组类型。 
	 *  <p>单值参数将作为具有单个元素的数组公开。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getParameterMap（）
	 */
	Map<String, String[]> getParameterMap();

	/**
	 * Return the primary Locale for this request.
	 * @see javax.servlet.http.HttpServletRequest#getLocale()
	 */
	/**
	 * 返回此请求的主要语言环境。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getLocale（）
	 */
	Locale getLocale();

	/**
	 * Return the context path for this request
	 * (usually the base path that the current web application is mapped to).
	 * @see javax.servlet.http.HttpServletRequest#getContextPath()
	 */
	/**
	 * 返回此请求的上下文路径（通常是当前Web应用程序映射到的基本路径）。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getContextPath（）
	 */
	String getContextPath();

	/**
	 * Return the remote user for this request, if any.
	 * @see javax.servlet.http.HttpServletRequest#getRemoteUser()
	 */
	/**
	 * 返回此请求的远程用户（如果有）。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getRemoteUser（）
	 */
	@Nullable
	String getRemoteUser();

	/**
	 * Return the user principal for this request, if any.
	 * @see javax.servlet.http.HttpServletRequest#getUserPrincipal()
	 */
	/**
	 * 返回此请求的用户主体（如果有）。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getUserPrincipal（）
	 */
	@Nullable
	Principal getUserPrincipal();

	/**
	 * Determine whether the user is in the given role for this request.
	 * @see javax.servlet.http.HttpServletRequest#isUserInRole(String)
	 */
	/**
	 * 确定用户是否在此请求的给定角色中。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃isUserInRole（String）
	 */
	boolean isUserInRole(String role);

	/**
	 * Return whether this request has been sent over a secure transport
	 * mechanism (such as SSL).
	 * @see javax.servlet.http.HttpServletRequest#isSecure()
	 */
	/**
	 * 返回此请求是否已通过安全传输机制（例如SSL）发送。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃isSecure（）
	 */
	boolean isSecure();

	/**
	 * Check whether the requested resource has been modified given the
	 * supplied last-modified timestamp (as determined by the application).
	 * <p>This will also transparently set the "Last-Modified" response header
	 * and HTTP status when applicable.
	 * <p>Typical usage:
	 * <pre class="code">
	 * public String myHandleMethod(WebRequest webRequest, Model model) {
	 *   long lastModified = // application-specific calculation
	 *   if (request.checkNotModified(lastModified)) {
	 *     // shortcut exit - no further processing necessary
	 *     return null;
	 *   }
	 *   // further request processing, actually building content
	 *   model.addAttribute(...);
	 *   return "myViewName";
	 * }</pre>
	 * <p>This method works with conditional GET/HEAD requests, but
	 * also with conditional POST/PUT/DELETE requests.
	 * <p><strong>Note:</strong> you can use either
	 * this {@code #checkNotModified(long)} method; or
	 * {@link #checkNotModified(String)}. If you want enforce both
	 * a strong entity tag and a Last-Modified value,
	 * as recommended by the HTTP specification,
	 * then you should use {@link #checkNotModified(String, long)}.
	 * <p>If the "If-Modified-Since" header is set but cannot be parsed
	 * to a date value, this method will ignore the header and proceed
	 * with setting the last-modified timestamp on the response.
	 * @param lastModifiedTimestamp the last-modified timestamp in
	 * milliseconds that the application determined for the underlying
	 * resource
	 * @return whether the request qualifies as not modified,
	 * allowing to abort request processing and relying on the response
	 * telling the client that the content has not been modified
	 */
	/**
	 * 给定所提供的上次修改的时间戳（由应用程序确定），检查请求的资源是否已被修改。 
	 *  <p>这还将在适用时透明地设置"最后修改的"响应标头和HTTP状态。 
	 *  <p>典型用法：<pre class ="code"> public String myHandleMethod（WebRequest webRequest，Model model）{long lastModified = //特定于应用程序的计算if（request.checkNotModified（lastModified））{//快捷方式退出-否进一步处理必要返回null； 
	 *  } //进一步处理请求，实际构建内容模型。 
	 * 返回"myViewName"； 
	 *  } </ pre> <p>此方法适用于条件GET / HEAD请求，也适用于条件POST / PUT / DELETE请求。 
	 *  <p> <strong>注意</ strong>：您可以使用此{@code  #checkNotModified（long）}方法； 
	 * 或{@link  #checkNotModified（String）}。 
	 * 如果要同时执行强实体标签和HTTP规范建议的Last-Modified值，则应使用{@link  #checkNotModified（String，long）}。 
	 *  <p>如果设置了"If-Modified-Since"标头，但无法将其解析为日期值，则此方法将忽略标头，并继续在响应上设置最后修改的时间戳。 
	 *  
	 * @param  lastModifiedTimestamp应用程序为基础资源确定的最后修改的时间戳（以毫秒为单位）。 
	 * 
	 * @return 请求是否符合未修改的条件，从而允许中止请求处理并依靠响应告诉客户端内容未修改被修改
	 */
	boolean checkNotModified(long lastModifiedTimestamp);

	/**
	 * Check whether the requested resource has been modified given the
	 * supplied {@code ETag} (entity tag), as determined by the application.
	 * <p>This will also transparently set the "ETag" response header
	 * and HTTP status when applicable.
	 * <p>Typical usage:
	 * <pre class="code">
	 * public String myHandleMethod(WebRequest webRequest, Model model) {
	 *   String eTag = // application-specific calculation
	 *   if (request.checkNotModified(eTag)) {
	 *     // shortcut exit - no further processing necessary
	 *     return null;
	 *   }
	 *   // further request processing, actually building content
	 *   model.addAttribute(...);
	 *   return "myViewName";
	 * }</pre>
	 * <p><strong>Note:</strong> you can use either
	 * this {@code #checkNotModified(String)} method; or
	 * {@link #checkNotModified(long)}. If you want enforce both
	 * a strong entity tag and a Last-Modified value,
	 * as recommended by the HTTP specification,
	 * then you should use {@link #checkNotModified(String, long)}.
	 * @param etag the entity tag that the application determined
	 * for the underlying resource. This parameter will be padded
	 * with quotes (") if necessary.
	 * @return true if the request does not require further processing.
	 */
	/**
	 * 给定由应用程序确定的提供的{@code  ETag}（实体标签），检查请求的资源是否已被修改。 
	 *  <p>这还将在适用时透明地设置"ETag"响应标头和HTTP状态。 
	 *  <p>典型用法：<pre class ="code">公共字符串myHandleMethod（WebRequest webRequest，模型模型）{字符串eTag = // //特定于应用程序的计算if（request.checkNotModified（eTag））{//快捷方式退出-否进一步处理必要返回null； 
	 *  } //进一步处理请求，实际构建内容模型。 
	 * 返回"myViewName"； 
	 *  } </ pre> <p> <strong>注意：</ strong>：您可以使用此{@code  #checkNotModified（String）}方法； 
	 * 或{@link  #checkNotModified（long）}。 
	 * 如果要同时执行强实体标签和HTTP规范建议的Last-Modified值，则应使用{@link  #checkNotModified（String，long）}。 
	 *  
	 * @param 标记应用程序为基础资源确定的实体标记。 
	 * 如有必要，此参数将用引号（"）填充。 
	 * 
	 * @return 如果请求不需要进一步处理，则为true。 
	 * 
	 */
	boolean checkNotModified(String etag);

	/**
	 * Check whether the requested resource has been modified given the
	 * supplied {@code ETag} (entity tag) and last-modified timestamp,
	 * as determined by the application.
	 * <p>This will also transparently set the "ETag" and "Last-Modified"
	 * response headers, and HTTP status when applicable.
	 * <p>Typical usage:
	 * <pre class="code">
	 * public String myHandleMethod(WebRequest webRequest, Model model) {
	 *   String eTag = // application-specific calculation
	 *   long lastModified = // application-specific calculation
	 *   if (request.checkNotModified(eTag, lastModified)) {
	 *     // shortcut exit - no further processing necessary
	 *     return null;
	 *   }
	 *   // further request processing, actually building content
	 *   model.addAttribute(...);
	 *   return "myViewName";
	 * }</pre>
	 * <p>This method works with conditional GET/HEAD requests, but
	 * also with conditional POST/PUT/DELETE requests.
	 * <p><strong>Note:</strong> The HTTP specification recommends
	 * setting both ETag and Last-Modified values, but you can also
	 * use {@code #checkNotModified(String)} or
	 * {@link #checkNotModified(long)}.
	 * @param etag the entity tag that the application determined
	 * for the underlying resource. This parameter will be padded
	 * with quotes (") if necessary.
	 * @param lastModifiedTimestamp the last-modified timestamp in
	 * milliseconds that the application determined for the underlying
	 * resource
	 * @return true if the request does not require further processing.
	 * @since 4.2
	 */
	/**
	 * 给定所提供的{@code  ETag}（实体标签）和上次修改的时间戳（由应用程序确定），检查请求的资源是否已被修改。 
	 *  <p>这还将透明地设置"ETag"和"上次修改"响应标头以及适用时的HTTP状态。 
	 *  <p>典型用法：<pre class ="code">公共字符串myHandleMethod（WebRequest webRequest，模型模型）{字符串eTag = //特定于应用程序的计算long lastModified = //特定于应用程序的计算if（request.checkNotModified（eTag ，lastModified））{//快捷方式退出-无需进一步处理就返回null； 
	 *  } //进一步处理请求，实际构建内容模型。 
	 * 返回"myViewName"； 
	 *  } </ pre> <p>此方法适用于条件GET / HEAD请求，也适用于条件POST / PUT / DELETE请求。 
	 *  <p> <strong>注意：</ strong> HTTP规范建议同时设置ETag和Last-Modified值，但您也可以使用{@code  #checkNotModified（String）}或{@link  #checkNotModified（长）}。 
	 *  
	 * @param 标记应用程序为基础资源确定的实体标记。 
	 * 必要时，此参数将用引号（"）填充。 
	 * 
	 * @param  lastModifiedTimestamp应用程序为基础资源确定的最后修改的时间戳（以毫秒为单位）
	 * @return 如果请求不需要进一步处理，则为true。 
	 * @4.2
	 */
	boolean checkNotModified(@Nullable String etag, long lastModifiedTimestamp);

	/**
	 * Get a short description of this request,
	 * typically containing request URI and session id.
	 * @param includeClientInfo whether to include client-specific
	 * information such as session id and user name
	 * @return the requested description as String
	 */
	/**
	 * 获取此请求的简短描述，通常包含请求URI和会话ID。 
	 *  
	 * @param  includeClientInfo是否包含特定于客户端的信息，例如会话ID和用户名
	 * @return 请求的描述为字符串
	 */
	String getDescription(boolean includeClientInfo);

}
