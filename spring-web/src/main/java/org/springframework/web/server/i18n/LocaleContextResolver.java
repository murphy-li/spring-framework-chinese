/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.server.i18n;

import org.springframework.context.i18n.LocaleContext;
import org.springframework.lang.Nullable;
import org.springframework.web.server.ServerWebExchange;

/**
 * Interface for web-based locale context resolution strategies that allows
 * for both locale context resolution via the request and locale context modification
 * via the HTTP exchange.
 *
 * <p>The {@link org.springframework.context.i18n.LocaleContext} object can potentially
 * includes associated time zone and other locale related information.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 * @see LocaleContext
 */
/**
 * 基于Web的语言环境上下文解析策略的接口，它既可以通过请求进行语言环境上下文解析，又可以通过HTTP交换进行语言环境上下文修改。 
 *  <p> {<@link> org.springframework.context.i18n.LocaleContext}对象可以潜在地包括关联的时区和其他与语言环境相关的信息。 
 *  @author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）@从5.0开始
 * @see  LocaleContext
 */
public interface LocaleContextResolver {

	/**
	 * Resolve the current locale context via the given exchange.
	 * <p>The returned context may be a
	 * {@link org.springframework.context.i18n.TimeZoneAwareLocaleContext},
	 * containing a locale with associated time zone information.
	 * Simply apply an {@code instanceof} check and downcast accordingly.
	 * <p>Custom resolver implementations may also return extra settings in
	 * the returned context, which again can be accessed through downcasting.
	 * @param exchange current server exchange
	 * @return the current locale context (never {@code null})
	 */
	/**
	 * 通过给定的交换解析当前的语言环境。 
	 *  <p>返回的上下文可以是{@link  org.springframework.context.i18n.TimeZoneAwareLocaleContext}，其中包含具有关联的时区信息的语言环境。 
	 * 只需应用{@code  instanceof}检查并相应地向下转换。 
	 *  <p>自定义解析器实现也可能会在返回的上下文中返回额外的设置，这些设置又可以通过向下转换进行访问。 
	 *  
	 * @param 交换当前服务器交换
	 * @return 当前区域设置上下文（从不{@code  null}）
	 */
	LocaleContext resolveLocaleContext(ServerWebExchange exchange);

	/**
	 * Set the current locale context to the given one,
	 * potentially including a locale with associated time zone information.
	 * @param exchange current server exchange
	 * @param localeContext the new locale context, or {@code null} to clear the locale
	 * @throws UnsupportedOperationException if the LocaleResolver implementation
	 * does not support dynamic changing of the locale or time zone
	 * @see org.springframework.context.i18n.SimpleLocaleContext
	 * @see org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	/**
	 * 将当前语言环境设置为给定的语言环境，可能包括具有相关时区信息的语言环境。 
	 *  
	 * @param 交换当前服务器交换
	 * @param  localeContext新的语言环境，或使用{@code  null}清除语言环境
	 * @throws  UnsupportedOperationException如果LocaleResolver实现不支持动态更改语言环境或时区
	 * @see  org.springframework.context.i18n.SimpleLocaleContext 
	 * @see  org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	void setLocaleContext(ServerWebExchange exchange, @Nullable LocaleContext localeContext);

}
