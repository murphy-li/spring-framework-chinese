/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.server;

import java.security.Principal;
import java.time.Instant;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

import reactor.core.publisher.Mono;

import org.springframework.context.ApplicationContext;
import org.springframework.context.i18n.LocaleContext;
import org.springframework.http.codec.multipart.Part;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.MultiValueMap;

/**
 * Contract for an HTTP request-response interaction. Provides access to the HTTP
 * request and response and also exposes additional server-side processing
 * related properties and features such as request attributes.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * HTTP请求-响应交互的合同。 
 * 提供对HTTP请求和响应的访问，还公开其他与服务器端处理相关的属性和功能，例如请求属性。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface ServerWebExchange {

	/**
	 * Name of {@link #getAttributes() attribute} whose value can be used to
	 * correlate log messages for this exchange. Use {@link #getLogPrefix()} to
	 * obtain a consistently formatted prefix based on this attribute.
	 * @since 5.1
	 * @see #getLogPrefix()
	 */
	/**
	 * {@link  #getAttributes（）attribute}的名称，其值可用于关联此交换的日志消息。 
	 * 使用{@link  #getLogPrefix（）}基于此属性获取格式一致的前缀。 
	 *  @since 5.1 
	 * @see  #getLogPrefix（）
	 */
	String LOG_ID_ATTRIBUTE = ServerWebExchange.class.getName() + ".LOG_ID";


	/**
	 * Return the current HTTP request.
	 */
	/**
	 * 返回当前的HTTP请求。 
	 * 
	 */
	ServerHttpRequest getRequest();

	/**
	 * Return the current HTTP response.
	 */
	/**
	 * 返回当前的HTTP响应。 
	 * 
	 */
	ServerHttpResponse getResponse();

	/**
	 * Return a mutable map of request attributes for the current exchange.
	 */
	/**
	 * 返回当前交换的请求属性的可变映射。 
	 * 
	 */
	Map<String, Object> getAttributes();

	/**
	 * Return the request attribute value if present.
	 * @param name the attribute name
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回请求属性值（如果存在）。 
	 *  
	 * @param 名称属性名称
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	default <T> T getAttribute(String name) {
		return (T) getAttributes().get(name);
	}

	/**
	 * Return the request attribute value or if not present raise an
	 * {@link IllegalArgumentException}.
	 * @param name the attribute name
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回请求属性值，如果不存在，则引发{@link  IllegalArgumentException}。 
	 *  
	 * @param 名称属性名称
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	default <T> T getRequiredAttribute(String name) {
		T value = getAttribute(name);
		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing");
		return value;
	}

	/**
	 * Return the request attribute value, or a default, fallback value.
	 * @param name the attribute name
	 * @param defaultValue a default value to return instead
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回请求属性值或默认的后备值。 
	 *  
	 * @param 命名属性名称
	 * @param  defaultValue代替默认值返回的默认值
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	default <T> T getAttributeOrDefault(String name, T defaultValue) {
		return (T) getAttributes().getOrDefault(name, defaultValue);
	}

	/**
	 * Return the web session for the current request. Always guaranteed  to
	 * return an instance either matching to the session id requested by the
	 * client, or with a new session id either because the client did not
	 * specify one or because the underlying session had expired. Use of this
	 * method does not automatically create a session. See {@link WebSession}
	 * for more details.
	 */
	/**
	 * 返回当前请求的Web会话。 
	 * 始终保证返回一个实例，该实例要么与客户端请求的会话ID匹配，要么返回新的会话ID，这是因为客户端未指定一个实例或基础会话已过期。 
	 * 使用此方法不会自动创建会话。 
	 * 有关更多详细信息，请参见{@link  WebSession}。 
	 * 
	 */
	Mono<WebSession> getSession();

	/**
	 * Return the authenticated user for the request, if any.
	 */
	/**
	 * 返回请求的经过身份验证的用户（如果有）。 
	 * 
	 */
	<T extends Principal> Mono<T> getPrincipal();

	/**
	 * Return the form data from the body of the request if the Content-Type is
	 * {@code "application/x-www-form-urlencoded"} or an empty map otherwise.
	 * <p><strong>Note:</strong> calling this method causes the request body to
	 * be read and parsed in full and the resulting {@code MultiValueMap} is
	 * cached so that this method is safe to call more than once.
	 */
	/**
	 * 如果Content-Type为{@code "application / x-www-form-urlencoded"}，则返回请求正文的表单数据，否则返回空映射。 
	 *  <p> <strong>注意：</ strong>：调用此方法将导致对请求正文进行完整读取和解析，并缓存生成的{@code  MultiValueMap}，以便可以安全地多次调用此方法。 
	 * 
	 */
	Mono<MultiValueMap<String, String>> getFormData();

	/**
	 * Return the parts of a multipart request if the Content-Type is
	 * {@code "multipart/form-data"} or an empty map otherwise.
	 * <p><strong>Note:</strong> calling this method causes the request body to
	 * be read and parsed in full and the resulting {@code MultiValueMap} is
	 * cached so that this method is safe to call more than once.
	 * <p><strong>Note:</strong>the {@linkplain Part#content() contents} of each
	 * part is not cached, and can only be read once.
	 */
	/**
	 * 如果Content-Type为{@code "multipart / form-data"}或返回空映射，则返回多部分请求的部分。 
	 *  <p> <strong>注意：</ strong>：调用此方法将导致对请求正文进行完整读取和解析，并缓存生成的{@code  MultiValueMap}，以便可以安全地多次调用此方法。 
	 *  <p> <strong>注意</ strong>：每个部分的{@link 普通部分#content（）内容}不会被缓存，只能读取一次。 
	 * 
	 */
	Mono<MultiValueMap<String, Part>> getMultipartData();

	/**
	 * Return the {@link LocaleContext} using the configured
	 * {@link org.springframework.web.server.i18n.LocaleContextResolver}.
	 */
	/**
	 * 使用配置的{@link  org.springframework.web.server.i18n.LocaleContextResolver}返回{@link  LocaleContext}。 
	 * 
	 */
	LocaleContext getLocaleContext();

	/**
	 * Return the {@link ApplicationContext} associated with the web application,
	 * if it was initialized with one via
	 * {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext(ApplicationContext)}.
	 * @since 5.0.3
	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#applicationContext(ApplicationContext)
	 */
	/**
	 * 如果通过{@link  org.springframework.web.server.adapter.WebHttpHandlerBuilder＃applicationContext（ApplicationContext）}使用该应用程序进行了初始化，则返回与该Web应用程序关联的{@link  ApplicationContext}。 
	 *  @since 5.0.3 
	 * @see  org.springframework.web.server.adapter.WebHttpHandlerBuilder＃applicationContext（ApplicationContext）
	 */
	@Nullable
	ApplicationContext getApplicationContext();

	/**
	 * Returns {@code true} if the one of the {@code checkNotModified} methods
	 * in this contract were used and they returned true.
	 */
	/**
	 * 如果使用了该合同中的一种{@code  checkNotModified}方法，并且它们返回true，则返回{@code  true}。 
	 * 
	 */
	boolean isNotModified();

	/**
	 * An overloaded variant of {@link #checkNotModified(String, Instant)} with
	 * a last-modified timestamp only.
	 * @param lastModified the last-modified time
	 * @return whether the request qualifies as not modified
	 */
	/**
	 * {@link  #checkNotModified（String，Instant）}的重载变体，仅带有最后修改的时间戳。 
	 *  
	 * @param  lastModified最后修改时间
	 * @return 请求是否符合未修改的条件
	 */
	boolean checkNotModified(Instant lastModified);

	/**
	 * An overloaded variant of {@link #checkNotModified(String, Instant)} with
	 * an {@code ETag} (entity tag) value only.
	 * @param etag the entity tag for the underlying resource.
	 * @return true if the request does not require further processing.
	 */
	/**
	 * {@link  #checkNotModified（String，Instant）}的重载变体，仅具有{@code  ETag}（实体标签）值。 
	 *  
	 * @param 标记基础资源的实体标记。 
	 *  
	 * @return 如果请求不需要进一步处理，则为true。 
	 * 
	 */
	boolean checkNotModified(String etag);

	/**
	 * Check whether the requested resource has been modified given the supplied
	 * {@code ETag} (entity tag) and last-modified timestamp as determined by
	 * the application. Also transparently prepares the response, setting HTTP
	 * status, and adding "ETag" and "Last-Modified" headers when applicable.
	 * This method works with conditional GET/HEAD requests as well as with
	 * conditional POST/PUT/DELETE requests.
	 * <p><strong>Note:</strong> The HTTP specification recommends setting both
	 * ETag and Last-Modified values, but you can also use
	 * {@code #checkNotModified(String)} or
	 * {@link #checkNotModified(Instant)}.
	 * @param etag the entity tag that the application determined for the
	 * underlying resource. This parameter will be padded with quotes (")
	 * if necessary.
	 * @param lastModified the last-modified timestamp that the application
	 * determined for the underlying resource
	 * @return true if the request does not require further processing.
	 */
	/**
	 * 给定所提供的{@code  ETag}（实体标签）和应用程序最后确定的时间戳，检查请求的资源是否已被修改。 
	 * 还要透明地准备响应，设置HTTP状态，并在适用时添加"ETag"和"Last-Modified"标头。 
	 * 此方法适用于条件GET / HEAD请求以及条件POST / PUT / DELETE请求。 
	 *  <p> <strong>注意：</ strong> HTTP规范建议同时设置ETag和Last-Modified值，但您也可以使用{@code  #checkNotModified（String）}或{@link  #checkNotModified（瞬间）}。 
	 *  
	 * @param 标记应用程序为基础资源确定的实体标记。 
	 * 如果需要，此参数将用引号（"）填充。 
	 * 
	 * @param  lastModified应用程序为基础资源确定的最后修改的时间戳
	 * @return 如果请求不需要进一步处理，则为true。 
	 * 
	 */
	boolean checkNotModified(@Nullable String etag, Instant lastModified);

	/**
	 * Transform the given url according to the registered transformation function(s).
	 * By default, this method returns the given {@code url}, though additional
	 * transformation functions can by registered with {@link #addUrlTransformer}
	 * @param url the URL to transform
	 * @return the transformed URL
	 */
	/**
	 * 根据注册的转换函数转换给定的url。 
	 * 默认情况下，此方法将返回给定的{@code  url}，尽管可以通过向{@link  #addUrlTransformer}注册其他转换功能<URL> URL转换
	 * @return 转换后的URL。 
	 * 
	 */
	String transformUrl(String url);

	/**
	 * Register an additional URL transformation function for use with {@link #transformUrl}.
	 * The given function can be used to insert an id for authentication, a nonce for CSRF
	 * protection, etc.
	 * <p>Note that the given function is applied after any previously registered functions.
	 * @param transformer a URL transformation function to add
	 */
	/**
	 * 注册其他网址转换功能，以与{@link  #transformUrl}一起使用。 
	 * 给定功能可用于插入用于身份验证的ID，用于CSRF保护的随机数等。 
	 * <p>请注意，给定功能在任何先前注册的功能之后应用。 
	 *  
	 * @param 转换要添加的URL转换功能
	 */
	void addUrlTransformer(Function<String, String> transformer);

	/**
	 * Return a log message prefix to use to correlate messages for this exchange.
	 * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}
	 * along with some extra formatting so that the prefix can be conveniently
	 * prepended with no further formatting no separators required.
	 * @return the log message prefix or an empty String if the
	 * {@link #LOG_ID_ATTRIBUTE} is not set.
	 * @since 5.1
	 */
	/**
	 * 返回日志消息前缀，以用于关联此交换的消息。 
	 * 前缀基于属性{@link  #LOG_ID_ATTRIBUTE}的值以及一些额外的格式，因此可以方便地在前缀之前添加前缀，而无需进一步的格式化，而无需分隔符。 
	 *  
	 * @return 日志消息前缀，如果未设置{@link  #LOG_ID_ATTRIBUTE}，则为空字符串。 
	 *  @5.1起
	 */
	String getLogPrefix();

	/**
	 * Return a builder to mutate properties of this exchange by wrapping it
	 * with {@link ServerWebExchangeDecorator} and returning either mutated
	 * values or delegating back to this instance.
	 */
	/**
	 * 通过使用{@link  ServerWebExchangeDecorator}将其包装起来，并返回变异值或委派回该实例，来返回构建器以改变此交换的属性。 
	 * 
	 */
	default Builder mutate() {
		return new DefaultServerWebExchangeBuilder(this);
	}


	/**
	 * Builder for mutating an existing {@link ServerWebExchange}.
	 * Removes the need
	 */
	/**
	 * 用于更改现有{@link  ServerWebExchange}的生成器。 
	 * 消除了需求
	 */
	interface Builder {

		/**
		 * Configure a consumer to modify the current request using a builder.
		 * <p>Effectively this:
		 * <pre>
		 * exchange.mutate().request(builder-> builder.method(HttpMethod.PUT));
		 *
		 * // vs...
		 *
		 * ServerHttpRequest request = exchange.getRequest().mutate()
		 *     .method(HttpMethod.PUT)
		 *     .build();
		 *
		 * exchange.mutate().request(request);
		 * </pre>
		 * @see ServerHttpRequest#mutate()
		 */
		/**
		 * 配置使用者以使用构建器修改当前请求。 
		 *  <p>有效地是这样的：<pre> exchange.mutate（）。 
		 * request（builder-> builder.method（HttpMethod.PUT））; // vs ... ServerHttpRequest request = exchange.getRequest（）。 
		 * mutate（）.method（HttpMethod.PUT）.build（）; exchange.mutate（）。 
		 * request（请求）; </ pre> 
		 * @see  ServerHttpRequest＃mutate（）
		 */
		Builder request(Consumer<ServerHttpRequest.Builder> requestBuilderConsumer);

		/**
		 * Set the request to use especially when there is a need to override
		 * {@link ServerHttpRequest} methods. To simply mutate request properties
		 * see {@link #request(Consumer)} instead.
		 * @see org.springframework.http.server.reactive.ServerHttpRequestDecorator
		 */
		/**
		 * 设置请求以使用，尤其是在需要覆盖{@link  ServerHttpRequest}方法时。 
		 * 要简单地更改请求属性，请参阅{@link  #request（Consumer）}。 
		 *  
		 * @see  org.springframework.http.server.reactive.ServerHttpRequestDecorator
		 */
		Builder request(ServerHttpRequest request);

		/**
		 * Set the response to use.
		 * @see org.springframework.http.server.reactive.ServerHttpResponseDecorator
		 */
		/**
		 * 设置要使用的响应。 
		 *  
		 * @see  org.springframework.http.server.reactive.ServerHttpResponseDecorator
		 */
		Builder response(ServerHttpResponse response);

		/**
		 * Set the {@code Mono<Principal>} to return for this exchange.
		 */
		/**
		 * 设置{@code  Mono <Principal>}以返回此交换。 
		 * 
		 */
		Builder principal(Mono<Principal> principalMono);

		/**
		 * Build a {@link ServerWebExchange} decorator with the mutated properties.
		 */
		/**
		 * 使用变异的属性构建一个{@link  ServerWebExchange}装饰器。 
		 * 
		 */
		ServerWebExchange build();
	}

}
