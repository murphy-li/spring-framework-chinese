/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.server;

import java.lang.reflect.Method;

import org.springframework.core.MethodParameter;
import org.springframework.http.HttpStatus;
import org.springframework.lang.Nullable;

/**
 * Exception for an {@link HttpStatus#INTERNAL_SERVER_ERROR} that exposes extra
 * information about a controller method that failed, or a controller method
 * argument that could not be resolved.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * {@link  HttpStatus＃INTERNAL_SERVER_ERROR}的异常，它公开有关失败的控制器方法或无法解析的控制器方法参数的额外信息。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
@SuppressWarnings("serial")
public class ServerErrorException extends ResponseStatusException {

	@Nullable
	private final Method handlerMethod;

	@Nullable
	private final MethodParameter parameter;


	/**
	 * Constructor for a 500 error with a reason and an optional cause.
	 * @since 5.0.5
	 */
	/**
	 * 500错误的构造方法，包含一个原因和一个可选原因。 
	 *  @5.0.5起
	 */
	public ServerErrorException(String reason, @Nullable Throwable cause) {
		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);
		this.handlerMethod = null;
		this.parameter = null;
	}

	/**
	 * Constructor for a 500 error with a handler {@link Method} and an optional cause.
	 * @since 5.0.5
	 */
	/**
	 * 带有处理程序{@link 方法}的500错误的构造方法和一个可选原因。 
	 *  @5.0.5起
	 */
	public ServerErrorException(String reason, Method handlerMethod, @Nullable Throwable cause) {
		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);
		this.handlerMethod = handlerMethod;
		this.parameter = null;
	}

	/**
	 * Constructor for a 500 error with a {@link MethodParameter} and an optional cause.
	 */
	/**
	 * 带有{@link  MethodParameter}和可选原因的500错误的构造方法。 
	 * 
	 */
	public ServerErrorException(String reason, MethodParameter parameter, @Nullable Throwable cause) {
		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);
		this.handlerMethod = parameter.getMethod();
		this.parameter = parameter;
	}

	/**
	 * Constructor for a 500 error linked to a specific {@code MethodParameter}.
	 * @deprecated in favor of {@link #ServerErrorException(String, MethodParameter, Throwable)}
	 */
	/**
	 * 链接到特定{@code  MethodParameter}的500错误的构造函数。 
	 *  @不推荐使用{@link  #ServerErrorException（String，MethodParameter，Throwable）}
	 */
	@Deprecated
	public ServerErrorException(String reason, MethodParameter parameter) {
		this(reason, parameter, null);
	}

	/**
	 * Constructor for a 500 error with a reason only.
	 * @deprecated in favor of {@link #ServerErrorException(String, Throwable)}
	 */
	/**
	 * 500错误的构造方法仅出于原因。 
	 *  @不建议使用{@link  #ServerErrorException（String，Throwable）}
	 */
	@Deprecated
	public ServerErrorException(String reason) {
		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);
		this.handlerMethod = null;
		this.parameter = null;
	}


	/**
	 * Return the handler method associated with the error, if any.
	 * @since 5.0.5
	 */
	/**
	 * 返回与错误关联的处理程序方法（如果有）。 
	 *  @5.0.5起
	 */
	@Nullable
	public Method getHandlerMethod() {
		return this.handlerMethod;
	}

	/**
	 * Return the specific method parameter associated with the error, if any.
	 */
	/**
	 * 返回与错误关联的特定方法参数（如果有）。 
	 * 
	 */
	@Nullable
	public MethodParameter getMethodParameter() {
		return this.parameter;
	}

}
