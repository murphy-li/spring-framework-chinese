/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.server;

import java.time.Duration;
import java.time.Instant;
import java.util.Map;

import reactor.core.publisher.Mono;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Main contract for using a server-side session that provides access to session
 * attributes across HTTP requests.
 *
 * <p>The creation of a {@code WebSession} instance does not automatically start
 * a session thus causing the session id to be sent to the client (typically via
 * a cookie). A session starts implicitly when session attributes are added.
 * A session may also be created explicitly via {@link #start()}.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 使用服务器端会话的主要合同，该会话可跨HTTP请求提供对会话属性的访问。 
 *  <p>创建{@code  WebSession}实例不会自动启动会话，从而导致将会话ID发送到客户端（通常通过cookie）。 
 * 添加会话属性后，会话将隐式启动。 
 * 也可以通过{@link  #start（）}显式创建会话。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface WebSession {

	/**
	 * Return a unique session identifier.
	 */
	/**
	 * 返回唯一的会话标识符。 
	 * 
	 */
	String getId();

	/**
	 * Return a map that holds session attributes.
	 */
	/**
	 * 返回包含会话属性的映射。 
	 * 
	 */
	Map<String, Object> getAttributes();

	/**
	 * Return the session attribute value if present.
	 * @param name the attribute name
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回会话属性值（如果存在）。 
	 *  
	 * @param 名称属性名称
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	default <T> T getAttribute(String name) {
		return (T) getAttributes().get(name);
	}

	/**
	 * Return the session attribute value or if not present raise an
	 * {@link IllegalArgumentException}.
	 * @param name the attribute name
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回会话属性值，如果不存在，则引发{@link  IllegalArgumentException}。 
	 *  
	 * @param 名称属性名称
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	default <T> T getRequiredAttribute(String name) {
		T value = getAttribute(name);
		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");
		return value;
	}

	/**
	 * Return the session attribute value, or a default, fallback value.
	 * @param name the attribute name
	 * @param defaultValue a default value to return instead
	 * @param <T> the attribute type
	 * @return the attribute value
	 */
	/**
	 * 返回会话属性值或默认的后备值。 
	 *  
	 * @param 命名属性名称
	 * @param  defaultValue代替默认值返回的默认值
	 * @param  <T>属性类型
	 * @return 属性值
	 */
	@SuppressWarnings("unchecked")
	default <T> T getAttributeOrDefault(String name, T defaultValue) {
		return (T) getAttributes().getOrDefault(name, defaultValue);
	}

	/**
	 * Force the creation of a session causing the session id to be sent when
	 * {@link #save()} is called.
	 */
	/**
	 * 强制创建会话，导致在调用{@link  #save（）}时发送会话ID。 
	 * 
	 */
	void start();

	/**
	 * Whether a session with the client has been started explicitly via
	 * {@link #start()} or implicitly by adding session attributes.
	 * If "false" then the session id is not sent to the client and the
	 * {@link #save()} method is essentially a no-op.
	 */
	/**
	 * 通过{@link  #start（）}显式启动与客户端的会话，还是通过添加会话属性来隐式启动。 
	 * 如果为"false"，则不会将会话ID发送给客户端，并且{@link  #save（）}方法本质上是无操作的。 
	 * 
	 */
	boolean isStarted();

	/**
	 * Generate a new id for the session and update the underlying session
	 * storage to reflect the new id. After a successful call {@link #getId()}
	 * reflects the new session id.
	 * @return completion notification (success or error)
	 */
	/**
	 * 为该会话生成一个新的ID，并更新基础会话存储以反映该新ID。 
	 * 成功调用后，{<@link> #getId（）}反映新的会话ID。 
	 *  
	 * @return 完成通知（成功或错误）
	 */
	Mono<Void> changeSessionId();

	/**
	 * Invalidate the current session and clear session storage.
	 * @return completion notification (success or error)
	 */
	/**
	 * 使当前会话无效，并清除会话存储。 
	 *  
	 * @return 完成通知（成功或错误）
	 */
	Mono<Void> invalidate();

	/**
	 * Save the session through the {@code WebSessionStore} as follows:
	 * <ul>
	 * <li>If the session is new (i.e. created but never persisted), it must have
	 * been started explicitly via {@link #start()} or implicitly by adding
	 * attributes, or otherwise this method should have no effect.
	 * <li>If the session was retrieved through the {@code WebSessionStore},
	 * the implementation for this method must check whether the session was
	 * {@link #invalidate() invalidated} and if so return an error.
	 * </ul>
	 * <p>Note that this method is not intended for direct use by applications.
	 * Instead it is automatically invoked just before the response is
	 * committed.
	 * @return {@code Mono} to indicate completion with success or error
	 */
	/**
	 * 通过{@code  WebSessionStore}保存会话，如下所示：<ul> <li>如果会话是新会话（即已创建但从未持久），则它必须已经通过{@link  #start（）显式启动。 
	 *  }或通过添加属性隐式地创建，否则此方法应该无效。 
	 *  <li>如果通过{@code  WebSessionStore}检索了会话，则此方法的实现必须检查该会话是否为{@link  #invalidate（）invalidate}，如果是，则返回错误。 
	 *  </ ul> <p>请注意，此方法不适用于应用程序直接使用。 
	 * 而是在响应提交之前自动调用它。 
	 *  
	 * @return  {@code  Mono}表示成功或错误完成
	 */
	Mono<Void> save();

	/**
	 * Return {@code true} if the session expired after {@link #getMaxIdleTime()
	 * maxIdleTime} elapsed.
	 * <p>Typically expiration checks should be automatically made when a session
	 * is accessed, a new {@code WebSession} instance created if necessary, at
	 * the start of request processing so that applications don't have to worry
	 * about expired session by default.
	 */
	/**
	 * 如果会话在{@link  #getMaxIdleTime（）maxIdleTime}之后过期，则返回{@code  true}。 
	 *  <p>通常，在访问会话时应自动进行过期检查，并在请求处理开始时根据需要创建一个新的{@code  WebSession}实例，这样应用程序就不必担心默认情况下过期的会话。 
	 * 
	 */
	boolean isExpired();

	/**
	 * Return the time when the session was created.
	 */
	/**
	 * 返回创建会话的时间。 
	 * 
	 */
	Instant getCreationTime();

	/**
	 * Return the last time of session access as a result of user activity such
	 * as an HTTP request. Together with {@link #getMaxIdleTime()
	 * maxIdleTimeInSeconds} this helps to determine when a session is
	 * {@link #isExpired() expired}.
	 */
	/**
	 * 返回由于用户活动（例如HTTP请求）而导致的会话访问的上次时间。 
	 * 与{@link  #getMaxIdleTime（）maxIdleTimeInSeconds}一起使用，有助于确定会话何时{@link  #isExpired（）过期}。 
	 * 
	 */
	Instant getLastAccessTime();

	/**
	 * Configure the max amount of time that may elapse after the
	 * {@link #getLastAccessTime() lastAccessTime} before a session is considered
	 * expired. A negative value indicates the session should not expire.
	 */
	/**
	 * 配置在{@link  #getLastAccessTime（）lastAccessTime}之后，会话被视为过期之前可能经过的最长时间。 
	 * 负值表示会话不应过期。 
	 * 
	 */
	void setMaxIdleTime(Duration maxIdleTime);

	/**
	 * Return the maximum time after the {@link #getLastAccessTime()
	 * lastAccessTime} before a session expires. A negative time indicates the
	 * session doesn't expire.
	 */
	/**
	 * 返回会话到期之前{@link  #getLastAccessTime（）lastAccessTime}之后的最长时间。 
	 * 负时间表示会话未过期。 
	 * 
	 */
	Duration getMaxIdleTime();

}
