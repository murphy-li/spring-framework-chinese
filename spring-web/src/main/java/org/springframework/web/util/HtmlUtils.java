/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.util;

import org.springframework.util.Assert;

/**
 * Utility class for HTML escaping.
 *
 * <p>Escapes and unescapes based on the W3C HTML 4.01 recommendation, handling
 * character entity references.
 *
 * <p>Reference:
 * <a href="https://www.w3.org/TR/html4/charset.html">https://www.w3.org/TR/html4/charset.html</a>
 *
 * <p>For a comprehensive set of String escaping utilities, consider
 * <a href="https://commons.apache.org/proper/commons-text/">Apache Commons Text</a>
 * and its {@code StringEscapeUtils} class. We do not use that class here in order
 * to avoid a runtime dependency on Commons Text just for HTML escaping. Furthermore,
 * Spring's HTML escaping is more flexible and 100% HTML 4.0 compliant.
 *
 * @author Juergen Hoeller
 * @author Martin Kersten
 * @author Craig Andrews
 * @since 01.03.2003
 */
/**
 * HTML转义的实用程序类。 
 *  <p>基于W3C HTML 4.01建议的转义和不转义，用于处理字符实体引用。 
 *  <p>参考：<a href="https://www.w3.org/TR/html4/charset.html"> https://www.w3.org/TR/html4/charset.html </a> <p>对于一组全面的字符串转义实用程序，请考虑<a href="https://commons.apache.org/proper/commons-text/"> Apache Commons Text </a>及其{@code  StringEscapeUtils}类。 
 * 为了避免运行时仅出于HTML转义对Commons Text的依赖，我们在此不使用该类。 
 * 此外，Spring的HTML转义更加灵活，并且100％兼容HTML 4.0。 
 *  @author  Juergen Hoeller @author  Martin Kersten @author  Craig Andrews @自01.03.2003
 */
public abstract class HtmlUtils {

	/**
	 * Shared instance of pre-parsed HTML character entity references.
	 */
	/**
	 * 预先解析的HTML字符实体引用的共享实例。 
	 * 
	 */
	private static final HtmlCharacterEntityReferences characterEntityReferences =
			new HtmlCharacterEntityReferences();


	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding
	 * entity reference (e.g. {@code &lt;}).
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @return the escaped string
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>将所有特殊字符转义为其相应的实体引用（例如{@code  <}）。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @return 转义的字符串
	 */
	public static String htmlEscape(String input) {
		return htmlEscape(input, WebUtils.DEFAULT_CHARACTER_ENCODING);
	}

	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding
	 * entity reference (e.g. {@code &lt;}) at least as required by the
	 * specified encoding. In other words, if a special character does
	 * not have to be escaped for the given encoding, it may not be.
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @param encoding the name of a supported {@link java.nio.charset.Charset charset}
	 * @return the escaped string
	 * @since 4.1.2
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>至少按照指定的编码要求，将所有特殊字符转义为其相应的实体引用（例如{@code  <}）。 
	 * 换句话说，如果对于给定的编码，不必转义特殊字符，则可能不必转义。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @param ，该字符串编码受支持的{@link  java.nio.charset.Charset charset}的名称。 
	 * 
	 * @return 转义的字符串@4.1起。 
	 *  2
	 */
	public static String htmlEscape(String input, String encoding) {
		Assert.notNull(input, "Input is required");
		Assert.notNull(encoding, "Encoding is required");
		StringBuilder escaped = new StringBuilder(input.length() * 2);
		for (int i = 0; i < input.length(); i++) {
			char character = input.charAt(i);
			String reference = characterEntityReferences.convertToReference(character, encoding);
			if (reference != null) {
				escaped.append(reference);
			}
			else {
				escaped.append(character);
			}
		}
		return escaped.toString();
	}

	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding numeric
	 * reference in decimal format (&#<i>Decimal</i>;).
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @return the escaped string
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>以十进制格式（＆＃<i> Decimal </ i>;）将所有特殊字符转义为其相应的数字参考。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @return 转义的字符串
	 */
	public static String htmlEscapeDecimal(String input) {
		return htmlEscapeDecimal(input, WebUtils.DEFAULT_CHARACTER_ENCODING);
	}

	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding numeric
	 * reference in decimal format (&#<i>Decimal</i>;) at least as required by the
	 * specified encoding. In other words, if a special character does
	 * not have to be escaped for the given encoding, it may not be.
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @param encoding the name of a supported {@link java.nio.charset.Charset charset}
	 * @return the escaped string
	 * @since 4.1.2
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>至少按指定编码的要求，将所有特殊字符转为十进制格式（＆＃<i> Decimal </ i>;）的相应数字参考。 
	 * 换句话说，如果对于给定的编码，不必转义特殊字符，则可能不必转义。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @param ，该字符串编码受支持的{@link  java.nio.charset.Charset charset}的名称。 
	 * 
	 * @return 转义的字符串@4.1起。 
	 *  2
	 */
	public static String htmlEscapeDecimal(String input, String encoding) {
		Assert.notNull(input, "Input is required");
		Assert.notNull(encoding, "Encoding is required");
		StringBuilder escaped = new StringBuilder(input.length() * 2);
		for (int i = 0; i < input.length(); i++) {
			char character = input.charAt(i);
			if (characterEntityReferences.isMappedToReference(character, encoding)) {
				escaped.append(HtmlCharacterEntityReferences.DECIMAL_REFERENCE_START);
				escaped.append((int) character);
				escaped.append(HtmlCharacterEntityReferences.REFERENCE_END);
			}
			else {
				escaped.append(character);
			}
		}
		return escaped.toString();
	}

	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding numeric
	 * reference in hex format (&#x<i>Hex</i>;).
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @return the escaped string
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>将所有特殊字符转义为十六进制格式（＆＃x <i> Hex </ i>;）。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @return 转义的字符串
	 */
	public static String htmlEscapeHex(String input) {
		return htmlEscapeHex(input, WebUtils.DEFAULT_CHARACTER_ENCODING);
	}

	/**
	 * Turn special characters into HTML character references.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation.
	 * <p>Escapes all special characters to their corresponding numeric
	 * reference in hex format (&#x<i>Hex</i>;) at least as required by the
	 * specified encoding. In other words, if a special character does
	 * not have to be escaped for the given encoding, it may not be.
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (unescaped) input string
	 * @param encoding the name of a supported {@link java.nio.charset.Charset charset}
	 * @return the escaped string
	 * @since 4.1.2
	 */
	/**
	 * 将特殊字符转换为HTML字符引用。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集。 
	 *  <p>至少按照指定的编码要求，将所有特殊字符转为十六进制格式（＆＃x <i> Hex </ i>;）的相应数字参考。 
	 * 换句话说，如果对于给定的编码，不必转义特殊字符，则可能不必转义。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（未转义的）输入字符串
	 * @param ，该字符串编码受支持的{@link  java.nio.charset.Charset charset}的名称。 
	 * 
	 * @return 转义的字符串@4.1起。 
	 *  2
	 */
	public static String htmlEscapeHex(String input, String encoding) {
		Assert.notNull(input, "Input is required");
		Assert.notNull(encoding, "Encoding is required");
		StringBuilder escaped = new StringBuilder(input.length() * 2);
		for (int i = 0; i < input.length(); i++) {
			char character = input.charAt(i);
			if (characterEntityReferences.isMappedToReference(character, encoding)) {
				escaped.append(HtmlCharacterEntityReferences.HEX_REFERENCE_START);
				escaped.append(Integer.toString(character, 16));
				escaped.append(HtmlCharacterEntityReferences.REFERENCE_END);
			}
			else {
				escaped.append(character);
			}
		}
		return escaped.toString();
	}

	/**
	 * Turn HTML character references into their plain text UNICODE equivalent.
	 * <p>Handles complete character set defined in HTML 4.01 recommendation
	 * and all reference types (decimal, hex, and entity).
	 * <p>Correctly converts the following formats:
	 * <blockquote>
	 * &amp;#<i>Entity</i>; - <i>(Example: &amp;amp;) case sensitive</i>
	 * &amp;#<i>Decimal</i>; - <i>(Example: &amp;#68;)</i><br>
	 * &amp;#x<i>Hex</i>; - <i>(Example: &amp;#xE5;) case insensitive</i><br>
	 * </blockquote>
	 * <p>Gracefully handles malformed character references by copying original
	 * characters as is when encountered.
	 * <p>Reference:
	 * <a href="https://www.w3.org/TR/html4/sgml/entities.html">
	 * https://www.w3.org/TR/html4/sgml/entities.html
	 * </a>
	 * @param input the (escaped) input string
	 * @return the unescaped string
	 */
	/**
	 * 将HTML字符引用转换为其等效的纯文本UNICODE。 
	 *  <p>处理HTML 4.01建议中定义的完整字符集以及所有引用类型（十进制，十六进制和实体）。 
	 *  <p>正确转换以下格式：<blockquote>＆＃<i> Entity </ i>; -<i>（示例：＆）区分大小写</ i>＆＃<i>十进制</ i>; -<i>（示例：D）</ i> <br>＆＃x <i>十六进制</ i>; -<i>（示例：å）不区分大小写</ i> <br> </ blockquote> <p>通过复制原始字符（如遇到一样）来优雅地处理格式错误的字符引用。 
	 *  <p>参考：<a href="https://www.w3.org/TR/html4/sgml/entities.html"> https://www.w3.org/TR/html4/sgml/entities.html </a> 
	 * @param 输入（转义的）输入字符串
	 * @return 未转义的字符串
	 */
	public static String htmlUnescape(String input) {
		return new HtmlCharacterEntityDecoder(characterEntityReferences, input).decode();
	}

}
