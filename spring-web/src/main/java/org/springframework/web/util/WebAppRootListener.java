/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.util;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

/**
 * Listener that sets a system property to the web application root directory.
 * The key of the system property can be defined with the "webAppRootKey" init
 * parameter at the servlet context level (i.e. context-param in web.xml),
 * the default key is "webapp.root".
 *
 * <p>Can be used for toolkits that support substitution with system properties
 * (i.e. System.getProperty values), like log4j's "${key}" syntax within log
 * file locations.
 *
 * <p>Note: This listener should be placed before ContextLoaderListener in {@code web.xml},
 * at least when used for log4j. Log4jConfigListener sets the system property
 * implicitly, so there's no need for this listener in addition to it.
 *
 * <p><b>WARNING</b>: Some containers, e.g. Tomcat, do NOT keep system properties separate
 * per web app. You have to use unique "webAppRootKey" context-params per web app
 * then, to avoid clashes. Other containers like Resin do isolate each web app's
 * system properties: Here you can use the default key (i.e. no "webAppRootKey"
 * context-param at all) without worrying.
 *
 * <p><b>WARNING</b>: The WAR file containing the web application needs to be expanded
 * to allow for setting the web app root system property. This is by default not
 * the case when a WAR file gets deployed to WebLogic, for example. Do not use
 * this listener in such an environment!
 *
 * @author Juergen Hoeller
 * @since 18.04.2003
 * @see WebUtils#setWebAppRootSystemProperty
 * @see System#getProperty
 */
/**
 * 将系统属性设置为Web应用程序根目录的侦听器。 
 * 可以在Servlet上下文级别（即web.xml中的context-param）使用"webAppRootKey"init参数定义系统属性的键，默认键为"webapp.root"。 
 *  <p>可用于支持用系统属性（即System.getProperty值）替换的工具箱，例如日志文件位置中log4j的"$ {key}"语法。 
 *  <p>注意：此侦听器应至少在用于log4j时放在{@code  web.xml}中的ContextLoaderListener之前。 
 *  Log4jConfigListener隐式设置系统属性，因此除此侦听器外，不需要它。 
 *  <p> <b>警告</ b>：某些容器，例如Tomcat，请勿将每个Web应用程序的系统属性分开。 
 * 然后，您必须为每个Web应用程序使用唯一的"webAppRootKey"上下文参数，以避免冲突。 
 * 其他容器（例如Resin）确实隔离了每个Web应用程序的系统属性：在这里您可以使用默认键（即完全没有"webAppRootKey"上下文参数），而不必担心。 
 *  <p> <b>警告</ b>：需要扩展包含Web应用程序的WAR文件，以允许设置Web应用程序根系统属性。 
 * 例如，默认情况下不是将WAR文件部署到WebLogic的情况。 
 * 不要在这样的环境中使用此监听器！ 
 *  @author  Juergen Hoeller @2003年4月18日开始
 * @see  WebUtils＃setWebAppRootSystemProperty 
 * @see  System＃getProperty
 */
public class WebAppRootListener implements ServletContextListener {

	@Override
	public void contextInitialized(ServletContextEvent event) {
		WebUtils.setWebAppRootSystemProperty(event.getServletContext());
	}

	@Override
	public void contextDestroyed(ServletContextEvent event) {
		WebUtils.removeWebAppRootSystemProperty(event.getServletContext());
	}

}
