/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.util.pattern;

import org.springframework.http.server.PathContainer;

/**
 * Parser for URI path patterns producing {@link PathPattern} instances that can
 * then be matched to requests.
 *
 * <p>The {@link PathPatternParser} and {@link PathPattern} are specifically
 * designed for use with HTTP URL paths in web applications where a large number
 * of URI path patterns, continuously matched against incoming requests,
 * motivates the need for efficient matching.
 *
 * <p>For details of the path pattern syntax see {@link PathPattern}.
 *
 * @author Andy Clement
 * @since 5.0
 */
/**
 * URI路径模式的解析器，生成{@link  PathPattern}实例，然后可以将其与请求进行匹配。 
 *  <p> {@link  PathPatternParser}和{@link  PathPattern}专为与Web应用程序中的HTTP URL路径一起使用而设计，其中大量URI路径模式与传入请求不断匹配，从而激发了高效匹配。 
 *  <p>有关路径模式语法的详细信息，请参见{@link  PathPattern}。 
 *  @author  Andy Clement @从5.0开始
 */
public class PathPatternParser {

	private boolean matchOptionalTrailingSeparator = true;

	private boolean caseSensitive = true;

	private PathContainer.Options pathOptions = PathContainer.Options.HTTP_PATH;


	/**
	 * Whether a {@link PathPattern} produced by this parser should should
	 * automatically match request paths with a trailing slash.
	 *
	 * <p>If set to {@code true} a {@code PathPattern} without a trailing slash
	 * will also match request paths with a trailing slash. If set to
	 * {@code false} a {@code PathPattern} will only match request paths with
	 * a trailing slash.
	 *
	 * <p>The default is {@code true}.
	 */
	/**
	 * 此解析器生成的{@link  PathPattern}是否应自动将请求路径与斜杠匹配。 
	 *  <p>如果设置为{@code  true}，则不带斜杠的{@code  PathPattern}也将匹配带斜杠的请求路径。 
	 * 如果设置为{@code  false}，则{@code  PathPattern}将仅匹配带有斜杠的请求路径。 
	 *  <p>默认值为{@code  true}。 
	 * 
	 */
	public void setMatchOptionalTrailingSeparator(boolean matchOptionalTrailingSeparator) {
		this.matchOptionalTrailingSeparator = matchOptionalTrailingSeparator;
	}

	/**
	 * Whether optional trailing slashing match is enabled.
	 */
	/**
	 * 是否启用了可选的尾部斜杠匹配。 
	 * 
	 */
	public boolean isMatchOptionalTrailingSeparator() {
		return this.matchOptionalTrailingSeparator;
	}

	/**
	 * Whether path pattern matching should be case-sensitive.
	 * <p>The default is {@code true}.
	 */
	/**
	 * 路径模式匹配是否应区分大小写。 
	 *  <p>默认值为{@code  true}。 
	 * 
	 */
	public void setCaseSensitive(boolean caseSensitive) {
		this.caseSensitive = caseSensitive;
	}

	/**
	 * Whether case-sensitive pattern matching is enabled.
	 */
	/**
	 * 是否启用区分大小写的模式匹配。 
	 * 
	 */
	public boolean isCaseSensitive() {
		return this.caseSensitive;
	}

	/**
	 * Set options for parsing patterns. These should be the same as the
	 * options used to parse input paths.
	 * <p>{@link org.springframework.http.server.PathContainer.Options#HTTP_PATH}
	 * is used by default.
	 * @since 5.2
	 */
	/**
	 * 设置解析模式的选项。 
	 * 这些应该与用于解析输入路径的选项相同。 
	 * 默认情况下，使用<p> {<@link> org.springframework.http.server.PathContainer.Options＃HTTP_PATH}。 
	 *  @5.2起
	 */
	public void setPathOptions(PathContainer.Options pathOptions) {
		this.pathOptions = pathOptions;
	}

	/**
	 * Return the {@link #setPathOptions configured} pattern parsing options.
	 * @since 5.2
	 */
	/**
	 * 返回{@link  #setPathOptions已配置}模式分析选项。 
	 *  @5.2起
	 */
	public PathContainer.Options getPathOptions() {
		return this.pathOptions;
	}


	/**
	 * Process the path pattern content, a character at a time, breaking it into
	 * path elements around separator boundaries and verifying the structure at each
	 * stage. Produces a PathPattern object that can be used for fast matching
	 * against paths. Each invocation of this method delegates to a new instance of
	 * the {@link InternalPathPatternParser} because that class is not thread-safe.
	 * @param pathPattern the input path pattern, e.g. /foo/{bar}
	 * @return a PathPattern for quickly matching paths against request paths
	 * @throws PatternParseException in case of parse errors
	 */
	/**
	 * 处理路径模式内容，一次处理一个字符，将其分解为分隔符边界周围的路径元素，并在每个阶段验证结构。 
	 * 产生一个PathPattern对象，该对象可用于快速匹配路径。 
	 * 每次调用此方法都将委托给{@link  InternalPathPatternParser}的新实例，因为该类不是线程安全的。 
	 *  
	 * @param  path设置输入路径模式，例如/ foo / {bar} 
	 * @return 一个PathPattern，用于在遇到解析错误的情况下快速将路径与请求路径
	 * @throws  PatternParseException相匹配
	 */
	public PathPattern parse(String pathPattern) throws PatternParseException {
		return new InternalPathPatternParser(this).parse(pathPattern);
	}

}
