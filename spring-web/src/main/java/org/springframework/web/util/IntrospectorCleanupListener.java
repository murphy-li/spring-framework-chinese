/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.util;

import java.beans.Introspector;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.springframework.beans.CachedIntrospectionResults;

/**
 * Listener that flushes the JDK's {@link java.beans.Introspector JavaBeans Introspector}
 * cache on web app shutdown. Register this listener in your {@code web.xml} to
 * guarantee proper release of the web application class loader and its loaded classes.
 *
 * <p><b>If the JavaBeans Introspector has been used to analyze application classes,
 * the system-level Introspector cache will hold a hard reference to those classes.
 * Consequently, those classes and the web application class loader will not be
 * garbage-collected on web app shutdown!</b> This listener performs proper cleanup,
 * to allow for garbage collection to take effect.
 *
 * <p>Unfortunately, the only way to clean up the Introspector is to flush
 * the entire cache, as there is no way to specifically determine the
 * application's classes referenced there. This will remove cached
 * introspection results for all other applications in the server too.
 *
 * <p>Note that this listener is <i>not</i> necessary when using Spring's beans
 * infrastructure within the application, as Spring's own introspection results
 * cache will immediately flush an analyzed class from the JavaBeans Introspector
 * cache and only hold a cache within the application's own ClassLoader.
 *
 * <b>Although Spring itself does not create JDK Introspector leaks, note that this
 * listener should nevertheless be used in scenarios where the Spring framework classes
 * themselves reside in a 'common' ClassLoader (such as the system ClassLoader).</b>
 * In such a scenario, this listener will properly clean up Spring's introspection cache.
 *
 * <p>Application classes hardly ever need to use the JavaBeans Introspector
 * directly, so are normally not the cause of Introspector resource leaks.
 * Rather, many libraries and frameworks do not clean up the Introspector:
 * e.g. Struts and Quartz.
 *
 * <p>Note that a single such Introspector leak will cause the entire web
 * app class loader to not get garbage collected! This has the consequence that
 * you will see all the application's static class resources (like singletons)
 * around after web app shutdown, which is not the fault of those classes!
 *
 * <p><b>This listener should be registered as the first one in {@code web.xml},
 * before any application listeners such as Spring's ContextLoaderListener.</b>
 * This allows the listener to take full effect at the right time of the lifecycle.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see java.beans.Introspector#flushCaches()
 * @see org.springframework.beans.CachedIntrospectionResults#acceptClassLoader
 * @see org.springframework.beans.CachedIntrospectionResults#clearClassLoader
 */
/**
 * 在Web应用程序关闭时刷新JDK的{@link  java.beans.Introspector JavaBeans Introspector}缓存的侦听器。 
 * 在您的{@code  web.xml}中注册此侦听器，以确保正确释放Web应用程序类加载器及其加载的类。 
 *  <p> <b>如果使用JavaBeans Introspector分析应用程序类，则系统级Introspector缓存将保留对这些类的硬引用。 
 * 因此，这些类和Web应用程序类加载器将不会在Web应用程序关闭时被垃圾收集！ 
 * </ b>此侦听器会执行适当的清除操作，以使垃圾收集生效。 
 *  <p>不幸的是，清理Introspector的唯一方法是刷新整个缓存，因为没有办法专门确定在那里引用的应用程序的类。 
 * 这也将删除服务器中所有其他应用程序的缓存自省结果。 
 *  <p>请注意，在应用程序中使用Spring的bean基础结构时，此侦听器不是<i>不必要</ i>，因为Spring自身的自省结果缓存将立即从JavaBeans Introspector缓存中清除已分析的类，而仅将缓存保留在JavaBeans内部。 
 * 应用程序自己的ClassLoader。 
 *  <b>尽管Spring本身不会造成JDK Introspector泄漏，但是请注意，该侦听器仍应在Spring框架类本身位于"通用"ClassLoader（例如系统ClassLoader）中的情况下使用。 
 * </ b>在这种情况下，此侦听器将正确清理Spring的自省缓存。 
 *  <p>应用程序类几乎不需要直接使用JavaBeans Introspector，因此通常不是导致Introspector资源泄漏的原因。 
 * 相反，许多库和框架无法清理Introspector：例如支柱和石英。 
 *  <p>请注意，一次这样的Introspector泄漏将导致整个Web应用程序类加载器无法收集垃圾！ 
 * 这样做的结果是，在Web应用程序关闭后，您将看到所有应用程序的静态类资源（如单例），这不是这些类的错！ 
 *  <p> <b>此侦听器应注册为{@code  web.xml}中的第一个侦听器，之前应为诸如Spring的ContextLoaderListener之类的任何应用程序侦听器。 
 * </ b>这样，该侦听器即可在右侧完全生效。 
 * 生命周期的时间。 
 *  @author  Juergen Hoeller @since 1.1起
 * @see  java.beans.Introspector＃flushCaches（）
 * @see  org.springframework.beans.CachedIntrospectionResults＃acceptClassLoader 
 * @see  org.springframework.beans.CachedIntrospectionResults＃clearClassLoader
 */
public class IntrospectorCleanupListener implements ServletContextListener {

	@Override
	public void contextInitialized(ServletContextEvent event) {
		CachedIntrospectionResults.acceptClassLoader(Thread.currentThread().getContextClassLoader());
	}

	@Override
	public void contextDestroyed(ServletContextEvent event) {
		CachedIntrospectionResults.clearClassLoader(Thread.currentThread().getContextClassLoader());
		Introspector.flushCaches();
	}

}
