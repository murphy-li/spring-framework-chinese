/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.jsf;

import javax.faces.application.NavigationHandler;
import javax.faces.context.FacesContext;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.lang.Nullable;
import org.springframework.web.context.WebApplicationContext;

/**
 * JSF NavigationHandler implementation that delegates to a NavigationHandler
 * bean obtained from the Spring root WebApplicationContext.
 *
 * <p>Configure this handler proxy in your {@code faces-config.xml} file
 * as follows:
 *
 * <pre class="code">
 * &lt;application&gt;
 *   ...
 *   &lt;navigation-handler&gt;
 * 	   org.springframework.web.jsf.DelegatingNavigationHandlerProxy
 *   &lt;/navigation-handler&gt;
 *   ...
 * &lt;/application&gt;</pre>
 *
 * By default, the Spring ApplicationContext will be searched for the NavigationHandler
 * under the bean name "jsfNavigationHandler". In the simplest case, this is a plain
 * Spring bean definition like the following. However, all of Spring's bean configuration
 * power can be applied to such a bean, in particular all flavors of dependency injection.
 *
 * <pre class="code">
 * &lt;bean name="jsfNavigationHandler" class="mypackage.MyNavigationHandler"&gt;
 *   &lt;property name="myProperty" ref="myOtherBean"/&gt;
 * &lt;/bean&gt;</pre>
 *
 * The target NavigationHandler bean will typically extend the standard JSF
 * NavigationHandler class. However, note that decorating the original
 * NavigationHandler (the JSF provider's default handler) is <i>not</i> supported
 * in such a scenario, since we can't inject the original handler in standard
 * JSF style (that is, as constructor argument).
 *
 * <p>For <b>decorating the original NavigationHandler</b>, make sure that your
 * target bean extends Spring's <b>DecoratingNavigationHandler</b> class. This
 * allows to pass in the original handler as method argument, which this proxy
 * automatically detects. Note that a DecoratingNavigationHandler subclass
 * will still work as standard JSF NavigationHandler as well!
 *
 * <p>This proxy may be subclassed to change the bean name used to search for the
 * navigation handler, change the strategy used to obtain the target handler,
 * or change the strategy used to access the ApplicationContext (normally obtained
 * via {@link FacesContextUtils#getWebApplicationContext(FacesContext)}).
 *
 * @author Juergen Hoeller
 * @author Colin Sampaleanu
 * @since 1.2.7
 * @see DecoratingNavigationHandler
 */
/**
 * JSF NavigationHandler实现，该实现委派给从Spring根WebApplicationContext获得的NavigationHandler bean。 
 *  <p>在您的{@code  faces-config.xml}文件中配置此处理程序代理，如下所示：<pre class ="code"> <application> ... <navigation-handler> org.springframework.web.jsf .DelegatingNavigationHandlerProxy </ navigation-handler> ... </ application> </ pre>默认情况下，将在bean名称"jsfNavigationHandler"下搜索Spring ApplicationContext中的NavigationHandler。 
 * 在最简单的情况下，这是一个普通的Spring bean定义，如下所示。 
 * 但是，Spring的所有bean配置功能都可以应用于此类bean，尤其是所有类型的依赖项注入。 
 *  <pre class ="code"> <bean name ="jsfNavigationHandler"class ="mypackage.MyNavigationHandler"> <property name ="myProperty"ref ="myOtherBean"/> </ bean> </ pre>目标NavigationHandler bean将通常扩展标准的JSF NavigationHandler类。 
 * 但是，请注意，在这种情况下，<i> </ i>不支持装饰原始NavigationHandler（JSF提供程序的默认处理程序），因为我们无法以标准JSF样式（即，作为构造函数参数）注入原始处理程序。 
 *  ）。 
 *  <p>对于<b>装饰原始NavigationHandler </ b>，请确保目标bean扩展了Spring的<b> DecoratingNavigationHandler </ b>类。 
 * 这允许将原始处理程序作为方法参数传入，此代理自动检测该方法参数。 
 * 请注意，DecoratingNavigationHandler子类仍将仍然作为标准JSF NavigationHandler起作用！ 
 *  <p>此代理可以被子类化，以更改用于搜索导航处理程序的bean名称，更改用于获取目标处理程序的策略或更改用于访问ApplicationContext的策略（通常通过{@link  FacesContextUtils获得#getWebApplicationContext（FacesContext）}）。 
 *  @author  Juergen Hoeller @author  Colin Sampaleanu @1.2.7起
 * @see  DecoratingNavigationHandler
 */
public class DelegatingNavigationHandlerProxy extends NavigationHandler {

	/**
	 * Default name of the target bean in the Spring application context:
	 * "jsfNavigationHandler".
	 */
	/**
	 * Spring应用程序上下文中目标bean的默认名称："jsfNavigationHandler"。 
	 * 
	 */
	public static final String DEFAULT_TARGET_BEAN_NAME = "jsfNavigationHandler";

	@Nullable
	private NavigationHandler originalNavigationHandler;


	/**
	 * Create a new DelegatingNavigationHandlerProxy.
	 */
	/**
	 * 创建一个新的DelegatingNavigationHandlerProxy。 
	 * 
	 */
	public DelegatingNavigationHandlerProxy() {
	}

	/**
	 * Create a new DelegatingNavigationHandlerProxy.
	 * @param originalNavigationHandler the original NavigationHandler
	 */
	/**
	 * 创建一个新的DelegatingNavigationHandlerProxy。 
	 *  
	 * @param  originalNavigationHandler原始的NavigationHandler
	 */
	public DelegatingNavigationHandlerProxy(NavigationHandler originalNavigationHandler) {
		this.originalNavigationHandler = originalNavigationHandler;
	}


	/**
	 * Handle the navigation request implied by the specified parameters,
	 * through delegating to the target bean in the Spring application context.
	 * <p>The target bean needs to extend the JSF NavigationHandler class.
	 * If it extends Spring's DecoratingNavigationHandler, the overloaded
	 * {@code handleNavigation} method with the original NavigationHandler
	 * as argument will be used. Else, the standard {@code handleNavigation}
	 * method will be called.
	 */
	/**
	 * 通过委派给Spring应用程序上下文中的目标bean，处理指定参数隐含的导航请求。 
	 *  <p>目标bean需要扩展JSF NavigationHandler类。 
	 * 如果它扩展了Spring的DecoratingNavigationHandler，将使用以原始NavigationHandler作为参数的重载{@code  handleNavigation}方法。 
	 * 否则，将调用标准的{@code  handleNavigation}方法。 
	 * 
	 */
	@Override
	public void handleNavigation(FacesContext facesContext, String fromAction, String outcome) {
		NavigationHandler handler = getDelegate(facesContext);
		if (handler instanceof DecoratingNavigationHandler) {
			((DecoratingNavigationHandler) handler).handleNavigation(
					facesContext, fromAction, outcome, this.originalNavigationHandler);
		}
		else {
			handler.handleNavigation(facesContext, fromAction, outcome);
		}
	}

	/**
	 * Return the target NavigationHandler to delegate to.
	 * <p>By default, a bean with the name "jsfNavigationHandler" is obtained
	 * from the Spring root WebApplicationContext, for every invocation.
	 * @param facesContext the current JSF context
	 * @return the target NavigationHandler to delegate to
	 * @see #getTargetBeanName
	 * @see #getBeanFactory
	 */
	/**
	 * 返回要委派的目标NavigationHandler。 
	 *  <p>默认情况下，对于每次调用，都会从Spring根WebApplicationContext获得名称为"jsfNavigationHandler"的bean。 
	 *  
	 * @param  facesContext当前JSF上下文<@r​​eturn>要委派给
	 * @see  #getTargetBeanName 
	 * @see  #getBeanFactory的目标NavigationHandler
	 */
	protected NavigationHandler getDelegate(FacesContext facesContext) {
		String targetBeanName = getTargetBeanName(facesContext);
		return getBeanFactory(facesContext).getBean(targetBeanName, NavigationHandler.class);
	}

	/**
	 * Return the name of the target NavigationHandler bean in the BeanFactory.
	 * Default is "jsfNavigationHandler".
	 * @param facesContext the current JSF context
	 * @return the name of the target bean
	 */
	/**
	 * 返回BeanFactory中目标NavigationNavigator bean的名称。 
	 * 默认值为"jsfNavigationHandler"。 
	 *  
	 * @param  facesContext当前的JSF上下文<@r​​eturn>目标bean的名称
	 */
	protected String getTargetBeanName(FacesContext facesContext) {
		return DEFAULT_TARGET_BEAN_NAME;
	}

	/**
	 * Retrieve the Spring BeanFactory to delegate bean name resolution to.
	 * <p>Default implementation delegates to {@code getWebApplicationContext}.
	 * Can be overridden to provide an arbitrary BeanFactory reference to resolve
	 * against; usually, this will be a full Spring ApplicationContext.
	 * @param facesContext the current JSF context
	 * @return the Spring BeanFactory (never {@code null})
	 * @see #getWebApplicationContext
	 */
	/**
	 * 检索Spring BeanFactory来将bean名称解析委托给它。 
	 *  <p>默认实现委托给{@code  getWebApplicationContext}。 
	 * 可以重写以提供要解决的任意BeanFactory引用； 
	 * 通常，这将是完整的Spring ApplicationContext。 
	 *  
	 * @param  facesContext当前的JSF上下文<@r​​eturn> Spring BeanFactory（从不{@code  null}）
	 * @see  #getWebApplicationContext
	 */
	protected BeanFactory getBeanFactory(FacesContext facesContext) {
		return getWebApplicationContext(facesContext);
	}

	/**
	 * Retrieve the web application context to delegate bean name resolution to.
	 * <p>Default implementation delegates to FacesContextUtils.
	 * @param facesContext the current JSF context
	 * @return the Spring web application context (never {@code null})
	 * @see FacesContextUtils#getRequiredWebApplicationContext
	 */
	/**
	 * 检索Web应用程序上下文以委托Bean名称解析。 
	 *  <p>默认实现委托给FacesContextUtils。 
	 *  
	 * @param  facesContext当前的JSF上下文<@r​​eturn> Spring Web应用程序上下文（绝不{@code  null}）
	 * @see  FacesContextUtils＃getRequiredWebApplicationContext
	 */
	protected WebApplicationContext getWebApplicationContext(FacesContext facesContext) {
		return FacesContextUtils.getRequiredWebApplicationContext(facesContext);
	}

}
