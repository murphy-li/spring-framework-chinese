/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.jsf;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.util.WebUtils;

/**
 * Convenience methods to retrieve Spring's root {@link WebApplicationContext}
 * for a given JSF {@link FacesContext}. This is useful for accessing a
 * Spring application context from custom JSF-based code.
 *
 * <p>Analogous to Spring's WebApplicationContextUtils for the ServletContext.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see org.springframework.web.context.ContextLoader
 * @see org.springframework.web.context.support.WebApplicationContextUtils
 */
/**
 * 为给定的JSF {@link  FacesContext}检索Spring的根{@link  WebApplicationContext}的便捷方法。 
 * 这对于从基于JSF的自定义代码访问Spring应用程序上下文很有用。 
 *  <p>类似于Spring的ServletContext的WebApplicationContextUtils。 
 *  @author  Juergen Hoeller @since 1.1起
 * @see  org.springframework.web.context.ContextLoader 
 * @see  org.springframework.web.context.support.WebApplicationContextUtils
 */
public abstract class FacesContextUtils {

	/**
	 * Find the root {@link WebApplicationContext} for this web app, typically
	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}.
	 * <p>Will rethrow an exception that happened on root context startup,
	 * to differentiate between a failed context startup and no context at all.
	 * @param fc the FacesContext to find the web application context for
	 * @return the root WebApplicationContext for this web app, or {@code null} if none
	 * @see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
	 */
	/**
	 * 找到此Web应用程序的根{@link  WebApplicationContext}，该根目录通常是通过{@link  org.springframework.web.context.ContextLoaderListener}加载的。 
	 *  <p>将重新抛出根上下文启动时发生的异常，以区分失败的上下文启动和根本没有上下文。 
	 *  
	 * @param 通过FacesContext查找此Web应用程序的根WebApplicationContext的Web应用程序上下文，如果没有，则为{@@code> null} 
	 * @see  org.springframework.web.context.WebApplicationContext＃ ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
	 */
	@Nullable
	public static WebApplicationContext getWebApplicationContext(FacesContext fc) {
		Assert.notNull(fc, "FacesContext must not be null");
		Object attr = fc.getExternalContext().getApplicationMap().get(
				WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
		if (attr == null) {
			return null;
		}
		if (attr instanceof RuntimeException) {
			throw (RuntimeException) attr;
		}
		if (attr instanceof Error) {
			throw (Error) attr;
		}
		if (!(attr instanceof WebApplicationContext)) {
			throw new IllegalStateException("Root context attribute is not of type WebApplicationContext: " + attr);
		}
		return (WebApplicationContext) attr;
	}

	/**
	 * Find the root {@link WebApplicationContext} for this web app, typically
	 * loaded via {@link org.springframework.web.context.ContextLoaderListener}.
	 * <p>Will rethrow an exception that happened on root context startup,
	 * to differentiate between a failed context startup and no context at all.
	 * @param fc the FacesContext to find the web application context for
	 * @return the root WebApplicationContext for this web app
	 * @throws IllegalStateException if the root WebApplicationContext could not be found
	 * @see org.springframework.web.context.WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
	 */
	/**
	 * 找到此Web应用程序的根{@link  WebApplicationContext}，该根目录通常是通过{@link  org.springframework.web.context.ContextLoaderListener}加载的。 
	 *  <p>将重新抛出根上下文启动时发生的异常，以区分失败的上下文启动和根本没有上下文。 
	 *  
	 * @param 如果无法找到根WebApplicationContext，请在FacesContext中查找此Web应用程序的根WebApplicationContext 
	 * @return 的Web应用程序上下文。 
	 * IllegalStateException如果找不到根WebApplicationContext，请参见org.springframework.web.context。 
	 *  WebApplicationContext＃ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE
	 */
	public static WebApplicationContext getRequiredWebApplicationContext(FacesContext fc) throws IllegalStateException {
		WebApplicationContext wac = getWebApplicationContext(fc);
		if (wac == null) {
			throw new IllegalStateException("No WebApplicationContext found: no ContextLoaderListener registered?");
		}
		return wac;
	}

	/**
	 * Return the best available mutex for the given session:
	 * that is, an object to synchronize on for the given session.
	 * <p>Returns the session mutex attribute if available; usually,
	 * this means that the HttpSessionMutexListener needs to be defined
	 * in {@code web.xml}. Falls back to the Session reference itself
	 * if no mutex attribute found.
	 * <p>The session mutex is guaranteed to be the same object during
	 * the entire lifetime of the session, available under the key defined
	 * by the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a
	 * safe reference to synchronize on for locking on the current session.
	 * <p>In many cases, the Session reference itself is a safe mutex
	 * as well, since it will always be the same object reference for the
	 * same active logical session. However, this is not guaranteed across
	 * different servlet containers; the only 100% safe way is a session mutex.
	 * @param fc the FacesContext to find the session mutex for
	 * @return the mutex object (never {@code null})
	 * @see org.springframework.web.util.WebUtils#SESSION_MUTEX_ATTRIBUTE
	 * @see org.springframework.web.util.HttpSessionMutexListener
	 */
	/**
	 * 返回给定会话的最佳可用互斥量：即，要在给定会话上进行同步的对象。 
	 *  <p>返回会话互斥属性（如果有）； 
	 * 通常，这意味着需要在{@code  web.xml}中定义HttpSessionMutexListener。 
	 * 如果没有找到互斥锁属性，则退回到会话引用本身。 
	 *  <p>在会话的整个生命周期中，保证会话互斥体是同一对象，可以在{@code  SESSION_MUTEX_ATTRIBUTE}常量定义的键下使用。 
	 * 它用作同步以锁定当前会话的安全参考。 
	 *  <p>在许多情况下，会话引用本身也是一个安全的互斥体，因为对于同一活动的逻辑会话，它始终是相同的对象引用。 
	 * 但是，不能保证在不同的servlet容器之间都能做到这一点。 
	 * 唯一的100％安全方法是会话互斥。 
	 *  
	 * @param  fs FacesContext为
	 * @return 互斥对象找到会话互斥体（永远{<@@code> null}）
	 * @see  org.springframework.web.util.WebUtils＃SESSION_MUTEX_ATTRIBUTE 
	 * @see  org .springframework.web.util.HttpSessionMutexListener
	 */
	@Nullable
	public static Object getSessionMutex(FacesContext fc) {
		Assert.notNull(fc, "FacesContext must not be null");
		ExternalContext ec = fc.getExternalContext();
		Object mutex = ec.getSessionMap().get(WebUtils.SESSION_MUTEX_ATTRIBUTE);
		if (mutex == null) {
			mutex = ec.getSession(true);
		}
		return mutex;
	}

}
