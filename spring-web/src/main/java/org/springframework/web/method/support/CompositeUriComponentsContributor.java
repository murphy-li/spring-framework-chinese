/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.method.support;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.core.MethodParameter;
import org.springframework.core.convert.ConversionService;
import org.springframework.format.support.DefaultFormattingConversionService;
import org.springframework.lang.Nullable;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * A {@link UriComponentsContributor} containing a list of other contributors
 * to delegate and also encapsulating a specific {@link ConversionService} to
 * use for formatting method argument values to Strings.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 一个{@link  UriComponentsContributor}包含要委托的其他贡献者列表，并且还封装了一个特定的{@link  ConversionService}以用于将方法参数值格式化为String。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public class CompositeUriComponentsContributor implements UriComponentsContributor {

	private final List<Object> contributors = new LinkedList<>();

	private final ConversionService conversionService;


	/**
	 * Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or
	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented
	 * by the same class, the most convenient option is to obtain the configured
	 * {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}
	 * and provide that to this constructor.
	 * @param contributors a collection of {@link UriComponentsContributor}
	 * or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.
	 */
	/**
	 * 从{@link  UriComponentsContributor UriComponentsContributors}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合创建实例。 
	 * 由于这两种方法都倾向于由同一类实现，因此最方便的选择是在{@code  RequestMappingHandlerAdapter}中获取已配置的{@code  HandlerMethodArgumentResolvers}，并将其提供给此构造函数。 
	 *  
	 * @param 提供{{@link> UriComponentsContributor}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合。 
	 * 
	 */
	public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {
		Collections.addAll(this.contributors, contributors);
		this.conversionService = new DefaultFormattingConversionService();
	}

	/**
	 * Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or
	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented
	 * by the same class, the most convenient option is to obtain the configured
	 * {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}
	 * and provide that to this constructor.
	 * @param contributors a collection of {@link UriComponentsContributor}
	 * or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.
	 */
	/**
	 * 从{@link  UriComponentsContributor UriComponentsContributors}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合创建实例。 
	 * 由于这两种方法都倾向于由同一类实现，因此最方便的选择是在{@code  RequestMappingHandlerAdapter}中获取已配置的{@code  HandlerMethodArgumentResolvers}，并将其提供给此构造函数。 
	 *  
	 * @param 提供{{@link> UriComponentsContributor}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合。 
	 * 
	 */
	public CompositeUriComponentsContributor(Collection<?> contributors) {
		this(contributors, null);
	}

	/**
	 * Create an instance from a collection of {@link UriComponentsContributor UriComponentsContributors} or
	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}. Since both of these tend to be implemented
	 * by the same class, the most convenient option is to obtain the configured
	 * {@code HandlerMethodArgumentResolvers} in the {@code RequestMappingHandlerAdapter}
	 * and provide that to this constructor.
	 * <p>If the {@link ConversionService} argument is {@code null},
	 * {@link org.springframework.format.support.DefaultFormattingConversionService}
	 * will be used by default.
	 * @param contributors a collection of {@link UriComponentsContributor}
	 * or {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.
	 * @param cs a ConversionService to use when method argument values
	 * need to be formatted as Strings before being added to the URI
	 */
	/**
	 * 从{@link  UriComponentsContributor UriComponentsContributors}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合创建实例。 
	 * 由于这两种方法都倾向于由同一类实现，因此最方便的选择是在{@code  RequestMappingHandlerAdapter}中获取已配置的{@code  HandlerMethodArgumentResolvers}，并将其提供给此构造函数。 
	 *  <p>如果{@link  ConversionService}参数为{@code  null}，则默认情况下将使用{@link  org.springframework.format.support.DefaultFormattingConversionService}。 
	 *  
	 * @param 提供{{@link> UriComponentsContributor}或{@link  HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}的集合。 
	 *  
	 * @param  cs当要添加到URI之前需要将方法参数值格式化为字符串时使用的ConversionService
	 */
	public CompositeUriComponentsContributor(@Nullable Collection<?> contributors, @Nullable ConversionService cs) {
		if (contributors != null) {
			this.contributors.addAll(contributors);
		}
		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService());
	}


	public boolean hasContributors() {
		return this.contributors.isEmpty();
	}

	@Override
	public boolean supportsParameter(MethodParameter parameter) {
		for (Object contributor : this.contributors) {
			if (contributor instanceof UriComponentsContributor) {
				if (((UriComponentsContributor) contributor).supportsParameter(parameter)) {
					return true;
				}
			}
			else if (contributor instanceof HandlerMethodArgumentResolver) {
				if (((HandlerMethodArgumentResolver) contributor).supportsParameter(parameter)) {
					return false;
				}
			}
		}
		return false;
	}

	@Override
	public void contributeMethodArgument(MethodParameter parameter, Object value,
			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {

		for (Object contributor : this.contributors) {
			if (contributor instanceof UriComponentsContributor) {
				UriComponentsContributor ucc = (UriComponentsContributor) contributor;
				if (ucc.supportsParameter(parameter)) {
					ucc.contributeMethodArgument(parameter, value, builder, uriVariables, conversionService);
					break;
				}
			}
			else if (contributor instanceof HandlerMethodArgumentResolver) {
				if (((HandlerMethodArgumentResolver) contributor).supportsParameter(parameter)) {
					break;
				}
			}
		}
	}

	/**
	 * An overloaded method that uses the ConversionService created at construction.
	 */
	/**
	 * 使用在构造时创建的ConversionService的重载方法。 
	 * 
	 */
	public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,
			Map<String, Object> uriVariables) {

		this.contributeMethodArgument(parameter, value, builder, uriVariables, this.conversionService);
	}

}
