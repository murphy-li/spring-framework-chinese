/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.method.support;

import org.springframework.core.MethodParameter;
import org.springframework.lang.Nullable;

/**
 * A return value handler that supports async types. Such return value types
 * need to be handled with priority so the async value can be "unwrapped".
 *
 * <p><strong>Note: </strong> implementing this contract is not required but it
 * should be implemented when the handler needs to be prioritized ahead of others.
 * For example custom (async) handlers, by default ordered after built-in
 * handlers, should take precedence over {@code @ResponseBody} or
 * {@code @ModelAttribute} handling, which should occur once the async value is
 * ready. By contrast, built-in (async) handlers are already ordered ahead of
 * sync handlers.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 */
/**
 * 支持异步类型的返回值处理程序。 
 * 此类返回值类型需要优先处理，以便可以"展开"异步值。 
 *  <p> <strong>注意：</ strong>不需要执行此合同，但是当需要优先处理处理程序时，应该执行此合同。 
 * 例如，自定义（异步）处理程序（默认情况下在内置处理程序之后排序）应优先于{@code  @ResponseBody}或{@code  @ModelAttribute}处理，它们应在异步值准备好后进行。 
 * 相比之下，内置（异步）处理程序已经在同步处理程序之前进行了排序。 
 *  @author  Rossen Stoyanchev @从4.2开始
 */
public interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler {

	/**
	 * Whether the given return value represents asynchronous computation.
	 * @param returnValue the value returned from the handler method
	 * @param returnType the return type
	 * @return {@code true} if the return value type represents an async value
	 */
	/**
	 * 给定的返回值是否表示异步计算。 
	 *  
	 * @param  returnValue从处理程序方法返回的值
	 * @param  returnType返回类型
	 * @return  {@code  true}，如果返回值类型表示异步值
	 */
	boolean isAsyncReturnValue(@Nullable Object returnValue, MethodParameter returnType);

}
