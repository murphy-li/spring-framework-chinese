/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http;

import java.util.function.Supplier;

import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferFactory;

/**
 * A "reactive" HTTP output message that accepts output as a {@link Publisher}.
 *
 * <p>Typically implemented by an HTTP request on the client-side or an
 * HTTP response on the server-side.
 *
 * @author Arjen Poutsma
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * 一种"反应性"HTTP输出消息，接受作为{@link  Publisher}的输出。 
 *  <p>通常由客户端的HTTP请求或服务器端的HTTP响应实现。 
 *  @author  Arjen Poutsma @author 塞巴斯蒂安·德勒兹@5.0起
 */
public interface ReactiveHttpOutputMessage extends HttpMessage {

	/**
	 * Return a {@link DataBufferFactory} that can be used to create the body.
	 * @return a buffer factory
	 * @see #writeWith(Publisher)
	 */
	/**
	 * 返回一个{@link  DataBufferFactory}可用于创建主体。 
	 *  
	 * @return 缓冲区工厂
	 * @see  #writeWith（Publisher）
	 */
	DataBufferFactory bufferFactory();

	/**
	 * Register an action to apply just before the HttpOutputMessage is committed.
	 * <p><strong>Note:</strong> the supplied action must be properly deferred,
	 * e.g. via {@link Mono#defer} or {@link Mono#fromRunnable}, to ensure it's
	 * executed in the right order, relative to other actions.
	 * @param action the action to apply
	 */
	/**
	 * 注册一个操作，以在HttpOutputMessage提交之前应用。 
	 *  <p> <strong>注意</ strong>：必须正确推迟提供的操作，例如通过{@link  Mono＃defer}或{@link  Mono＃fromRunnable}，以确保相对于其他操作，它以正确的顺序执行。 
	 *  
	 * @param 操作适用的操作
	 */
	void beforeCommit(Supplier<? extends Mono<Void>> action);

	/**
	 * Whether the HttpOutputMessage is committed.
	 */
	/**
	 * HttpOutputMessage是否已提交。 
	 * 
	 */
	boolean isCommitted();

	/**
	 * Use the given {@link Publisher} to write the body of the message to the
	 * underlying HTTP layer.
	 * @param body the body content publisher
	 * @return a {@link Mono} that indicates completion or error
	 */
	/**
	 * 使用给定的{@link  Publisher}将消息的正文写入基础的HTTP层。 
	 *  
	 * @param 正文正文内容发布者
	 * @return 表示完成或错误的{@link  Mono}
	 */

	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);

	/**
	 * Use the given {@link Publisher} of {@code Publishers} to write the body
	 * of the HttpOutputMessage to the underlying HTTP layer, flushing after
	 * each {@code Publisher<DataBuffer>}.
	 * @param body the body content publisher
	 * @return a {@link Mono} that indicates completion or error
	 */
	/**
	 * 使用{@code  Publishers}中给定的{@link  Publisher}将HttpOutputMessage的主体写入基础HTTP层，并在每个{@code  Publisher <DataBuffer>}之后刷新。 
	 *  
	 * @param 正文正文内容发布者
	 * @return 表示完成或错误的{@link  Mono}
	 */
	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);

	/**
	 * Indicate that message handling is complete, allowing for any cleanup or
	 * end-of-processing tasks to be performed such as applying header changes
	 * made via {@link #getHeaders()} to the underlying HTTP message (if not
	 * applied already).
	 * <p>This method should be automatically invoked at the end of message
	 * processing so typically applications should not have to invoke it.
	 * If invoked multiple times it should have no side effects.
	 * @return a {@link Mono} that indicates completion or error
	 */
	/**
	 * 指示消息处理已完成，允许执行任何清理或处理结束任务，例如将通过{@link  #getHeaders（）}进行的标头更改应用于基础HTTP消息（如果尚未应用）。 
	 *  <p>此方法应在消息处理结束时自动调用，因此通常应用程序不必调用它。 
	 * 如果多次调用它应该没有副作用。 
	 *  
	 * @return 表示完成或错误的{@link  Mono}
	 */
	Mono<Void> setComplete();

}
