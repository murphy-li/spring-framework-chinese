/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.converter.json;

import com.fasterxml.jackson.databind.ser.FilterProvider;

import org.springframework.lang.Nullable;

/**
 * A simple holder for the POJO to serialize via
 * {@link MappingJackson2HttpMessageConverter} along with further
 * serialization instructions to be passed in to the converter.
 *
 * <p>On the server side this wrapper is added with a
 * {@code ResponseBodyInterceptor} after content negotiation selects the
 * converter to use but before the write.
 *
 * <p>On the client side, simply wrap the POJO and pass it in to the
 * {@code RestTemplate}.
 *
 * @author Rossen Stoyanchev
 * @since 4.1
 */
/**
 * 一个简单的POJO持有人，可以通过{@link  MappingJackson2HttpMessageConverter}进行序列化，并将进一步的序列化指令传递给转换器。 
 *  <p>在服务器端，此包装器在内容协商选择要使用的转换器之后但在写入之前添加了{@code  ResponseBodyInterceptor}。 
 *  <p>在客户端，只需包装POJO并将其传递到{@code  RestTemplate}。 
 *  @author  Rossen Stoyanchev @从4.1开始
 */
public class MappingJacksonValue {

	private Object value;

	@Nullable
	private Class<?> serializationView;

	@Nullable
	private FilterProvider filters;


	/**
	 * Create a new instance wrapping the given POJO to be serialized.
	 * @param value the Object to be serialized
	 */
	/**
	 * 创建一个新实例，包装要给定的POJO进行序列化。 
	 *  
	 * @param 值要序列化的对象
	 */
	public MappingJacksonValue(Object value) {
		this.value = value;
	}


	/**
	 * Modify the POJO to serialize.
	 */
	/**
	 * 修改POJO以进行序列化。 
	 * 
	 */
	public void setValue(Object value) {
		this.value = value;
	}

	/**
	 * Return the POJO that needs to be serialized.
	 */
	/**
	 * 返回需要序列化的POJO。 
	 * 
	 */
	public Object getValue() {
		return this.value;
	}

	/**
	 * Set the serialization view to serialize the POJO with.
	 * @see com.fasterxml.jackson.databind.ObjectMapper#writerWithView(Class)
	 * @see com.fasterxml.jackson.annotation.JsonView
	 */
	/**
	 * 设置序列化视图以序列化POJO。 
	 *  
	 * @see  com.fasterxml.jackson.databind.ObjectMapper＃writerWithView（Class）
	 * @see  com.fasterxml.jackson.annotation.JsonView
	 */
	public void setSerializationView(@Nullable Class<?> serializationView) {
		this.serializationView = serializationView;
	}

	/**
	 * Return the serialization view to use.
	 * @see com.fasterxml.jackson.databind.ObjectMapper#writerWithView(Class)
	 * @see com.fasterxml.jackson.annotation.JsonView
	 */
	/**
	 * 返回要使用的序列化视图。 
	 *  
	 * @see  com.fasterxml.jackson.databind.ObjectMapper＃writerWithView（Class）
	 * @see  com.fasterxml.jackson.annotation.JsonView
	 */
	@Nullable
	public Class<?> getSerializationView() {
		return this.serializationView;
	}

	/**
	 * Set the Jackson filter provider to serialize the POJO with.
	 * @since 4.2
	 * @see com.fasterxml.jackson.databind.ObjectMapper#writer(FilterProvider)
	 * @see com.fasterxml.jackson.annotation.JsonFilter
	 * @see Jackson2ObjectMapperBuilder#filters(FilterProvider)
	 */
	/**
	 * 设置Jackson过滤器提供程序以序列化POJO。 
	 *  @since 4.2 
	 * @see  com.fasterxml.jackson.databind.ObjectMapper＃writer（FilterProvider）
	 * @see  com.fasterxml.jackson.annotation.JsonFilter 
	 * @see  Jackson2ObjectMapperBuilder＃filters（FilterProvider）
	 */
	public void setFilters(@Nullable FilterProvider filters) {
		this.filters = filters;
	}

	/**
	 * Return the Jackson filter provider to use.
	 * @since 4.2
	 * @see com.fasterxml.jackson.databind.ObjectMapper#writer(FilterProvider)
	 * @see com.fasterxml.jackson.annotation.JsonFilter
	 */
	/**
	 * 返回使用的Jackson过滤器提供程序。 
	 *  @since 4.2 
	 * @see  com.fasterxml.jackson.databind.ObjectMapper＃writer（FilterProvider）
	 * @see  com.fasterxml.jackson.annotation.JsonFilter
	 */
	@Nullable
	public FilterProvider getFilters() {
		return this.filters;
	}

}
