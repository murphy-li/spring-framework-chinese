/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.converter.xml;

import java.nio.charset.StandardCharsets;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import org.springframework.http.MediaType;
import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.util.Assert;

/**
 * Implementation of {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverter}
 * that can read and write XML using <a href="https://github.com/FasterXML/jackson-dataformat-xml">
 * Jackson 2.x extension component for reading and writing XML encoded data</a>.
 *
 * <p>By default, this converter supports {@code application/xml}, {@code text/xml}, and
 * {@code application/*+xml} with {@code UTF-8} character set. This can be overridden by
 * setting the {@link #setSupportedMediaTypes supportedMediaTypes} property.
 *
 * <p>The default constructor uses the default configuration provided by {@link Jackson2ObjectMapperBuilder}.
 *
 * <p>Compatible with Jackson 2.9 and higher, as of Spring 5.0.
 *
 * @author Sebastien Deleuze
 * @since 4.1
 */
/**
 * {@link  org.springframework.http.converter.HttpMessageConverter HttpMessageConverter}的实现，可以使用<a href="https://github.com/FasterXML/jackson-dataformat-xml"> Jackson 2读写XML。 
 *  x扩展组件，用于读取和写入XML编码的数据</a>。 
 *  <p>默认情况下，此转换器支持{@code  UTF-8}字符的{@code  application / xml}，{<@code> text / xml}和{@code  application + xml}组。 
 * 可以通过设置{@link  #setSupportedMediaTypessupportedMediaTypes}属性来覆盖此属性。 
 *  <p>默认构造函数使用{@link  Jackson2ObjectMapperBuilder}提供的默认配置。 
 *  <p>从Spring 5.0开始，与Jackson 2.9和更高版本兼容。 
 *  @author 塞巴斯蒂安·德勒兹@4.1起
 */
public class MappingJackson2XmlHttpMessageConverter extends AbstractJackson2HttpMessageConverter {

	/**
	 * Construct a new {@code MappingJackson2XmlHttpMessageConverter} using default configuration
	 * provided by {@code Jackson2ObjectMapperBuilder}.
	 */
	/**
	 * 使用{@code  Jackson2ObjectMapperBuilder}提供的默认配置构造一个新的{@code  MappingJackson2XmlHttpMessageConverter}。 
	 * 
	 */
	public MappingJackson2XmlHttpMessageConverter() {
		this(Jackson2ObjectMapperBuilder.xml().build());
	}

	/**
	 * Construct a new {@code MappingJackson2XmlHttpMessageConverter} with a custom {@link ObjectMapper}
	 * (must be a {@link XmlMapper} instance).
	 * You can use {@link Jackson2ObjectMapperBuilder} to build it easily.
	 * @see Jackson2ObjectMapperBuilder#xml()
	 */
	/**
	 * 使用自定义{@link  ObjectMapper}（必须是{@link  XmlMapper}实例）构造一个新的{@code  MappingJackson2XmlHttpMessageConverter}。 
	 * 您可以使用{@link  Jackson2ObjectMapperBuilder}轻松构建它。 
	 *  
	 * @see  Jackson2ObjectMapperBuilder＃xml（）
	 */
	public MappingJackson2XmlHttpMessageConverter(ObjectMapper objectMapper) {
		super(objectMapper, new MediaType("application", "xml", StandardCharsets.UTF_8),
				new MediaType("text", "xml", StandardCharsets.UTF_8),
				new MediaType("application", "*+xml", StandardCharsets.UTF_8));
		Assert.isInstanceOf(XmlMapper.class, objectMapper, "XmlMapper required");
	}


	/**
	 * {@inheritDoc}
	 * The {@code ObjectMapper} parameter must be a {@link XmlMapper} instance.
	 */
	/**
	 * {@inheritDoc} {@code  ObjectMapper}参数必须是{@link  XmlMapper}实例。 
	 * 
	 */
	@Override
	public void setObjectMapper(ObjectMapper objectMapper) {
		Assert.isInstanceOf(XmlMapper.class, objectMapper, "XmlMapper required");
		super.setObjectMapper(objectMapper);
	}

}
