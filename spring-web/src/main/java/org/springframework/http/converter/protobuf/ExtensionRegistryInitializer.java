/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.converter.protobuf;

import com.google.protobuf.ExtensionRegistry;

/**
 * Google Protocol Messages can contain message extensions that can be parsed if
 * the appropriate configuration has been registered in the {@code ExtensionRegistry}.
 *
 * <p>This interface provides a facility to populate the {@code ExtensionRegistry}.
 *
 * @author Alex Antonov
 * @author Sebastien Deleuze
 * @since 4.1
 * @see <a href="https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/ExtensionRegistry">
 * com.google.protobuf.ExtensionRegistry</a>
 * @deprecated as of Spring Framework 5.1, use {@link ExtensionRegistry} based constructors instead
 */
/**
 * 如果已在{@code  ExtensionRegistry}中注册了适当的配置，则Google协议消息可以包含可以解析的消息扩展名。 
 *  <p>此接口提供了一种用于填充{@code  ExtensionRegistry}的功能。 
 *  @author 亚历克斯·安东诺夫（Alex Antonov）@author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）@始于4.1 
 * @see  <a href ="https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/自Spring Framework 5.1起不推荐使用ExtensionRegistry"> com.google.protobuf.ExtensionRegistry </a> @，建议改用基于{@link  ExtensionRegistry}的构造函数
 */
@Deprecated
public interface ExtensionRegistryInitializer {

	/**
	 * Initializes the {@code ExtensionRegistry} with Protocol Message extensions.
	 * @param registry the registry to populate
	 */
	/**
	 * 使用协议消息扩展名初始化{@code  ExtensionRegistry}。 
	 *  
	 * @param 注册表要填充的注册表
	 */
	void initializeExtensionRegistry(ExtensionRegistry registry);

}
