/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.converter.xml;

import java.io.IOException;

import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConversionException;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;

/**
 * Abstract base class for {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverters}
 * that convert from/to XML.
 *
 * <p>By default, subclasses of this converter support {@code text/xml}, {@code application/xml}, and {@code
 * application/*-xml}. This can be overridden by setting the {@link #setSupportedMediaTypes(java.util.List)
 * supportedMediaTypes} property.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 3.0
 * @param <T> the converted object type
 */
/**
 * {@link  org.springframework.http.converter.HttpMessageConverter HttpMessageConverters}的抽象基类，它们可以将XML转换为XML。 
 *  <p>默认情况下，此转换器的子类支持{@code  text / xml}，{<@code> application / xml}和{@code  application -xml}。 
 * 可以通过设置{@link  #setSupportedMediaTypes（java.util.List）supportedMediaTypes}属性来覆盖此属性。 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @从3.0开始
 * @param  <T>转换后的对象类型
 */
public abstract class AbstractXmlHttpMessageConverter<T> extends AbstractHttpMessageConverter<T> {

	private final TransformerFactory transformerFactory = TransformerFactory.newInstance();


	/**
	 * Protected constructor that sets the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes}
	 * to {@code text/xml} and {@code application/xml}, and {@code application/*-xml}.
	 */
	/**
	 * 受保护的构造函数，用于将{@link  #setSupportedMediaTypes（java.util.List）supportedMediaTypes}设置为{@code  text / xml}和{@code  application / xml}，以及{@code  application- xml}。 
	 * 
	 */
	protected AbstractXmlHttpMessageConverter() {
		super(MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml"));
	}


	@Override
	public final T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage)
			throws IOException, HttpMessageNotReadableException {

		try {
			return readFromSource(clazz, inputMessage.getHeaders(), new StreamSource(inputMessage.getBody()));
		}
		catch (IOException | HttpMessageConversionException ex) {
			throw ex;
		}
		catch (Exception ex) {
			throw new HttpMessageNotReadableException("Could not unmarshal to [" + clazz + "]: " + ex.getMessage(),
					ex, inputMessage);
		}
	}

	@Override
	protected final void writeInternal(T t, HttpOutputMessage outputMessage)
			throws IOException, HttpMessageNotWritableException {

		try {
			writeToResult(t, outputMessage.getHeaders(), new StreamResult(outputMessage.getBody()));
		}
		catch (IOException | HttpMessageConversionException ex) {
			throw ex;
		}
		catch (Exception ex) {
			throw new HttpMessageNotWritableException("Could not marshal [" + t + "]: " + ex.getMessage(), ex);
		}
	}

	/**
	 * Transforms the given {@code Source} to the {@code Result}.
	 * @param source the source to transform from
	 * @param result the result to transform to
	 * @throws TransformerException in case of transformation errors
	 */
	/**
	 * 将给定的{@code  Source}转换为{@code  Result}。 
	 *  
	 * @param 源要从
	 * @param 进行转换的源，结果要在转换错误的情况下转换为
	 * @throws  TransformerException
	 */
	protected void transform(Source source, Result result) throws TransformerException {
		this.transformerFactory.newTransformer().transform(source, result);
	}


	/**
	 * Abstract template method called from {@link #read(Class, HttpInputMessage)}.
	 * @param clazz the type of object to return
	 * @param headers the HTTP input headers
	 * @param source the HTTP input body
	 * @return the converted object
	 * @throws Exception in case of I/O or conversion errors
	 */
	/**
	 * 从{@link  #read（Class，HttpInputMessage）}调用的抽象模板方法。 
	 *  
	 * @param 讨论要返回的对象的类型
	 * @param 标头HTTP输入标头
	 * @param 源HTTP输入正文
	 * @return 转换后的对象
	 * @throws  I / O或转换错误时发生异常
	 */
	protected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source) throws Exception;

	/**
	 * Abstract template method called from {@link #writeInternal(Object, HttpOutputMessage)}.
	 * @param t the object to write to the output message
	 * @param headers the HTTP output headers
	 * @param result the HTTP output body
	 * @throws Exception in case of I/O or conversion errors
	 */
	/**
	 * 从{@link  #writeInternal（Object，HttpOutputMessage）}调用的抽象模板方法。 
	 *  
	 * @param  t写入输出消息的对象
	 * @param 标头HTTP输出标头
	 * @param 导致HTTP输出主体
	 * @throws  I / O或转换错误时发生异常
	 */
	protected abstract void writeToResult(T t, HttpHeaders headers, Result result) throws Exception;

}
