/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.converter.protobuf;

import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.util.JsonFormat;

import org.springframework.lang.Nullable;

/**
 * Subclass of {@link ProtobufHttpMessageConverter} which enforces the use of Protobuf 3 and
 * its official library {@code "com.google.protobuf:protobuf-java-util"} for JSON processing.
 *
 * <p>Most importantly, this class allows for custom JSON parser and printer configurations
 * through the {@link JsonFormat} utility. If no special parser or printer configuration is
 * given, default variants will be used instead.
 *
 * <p>Requires Protobuf 3.x and {@code "com.google.protobuf:protobuf-java-util"} 3.x,
 * with 3.3 or higher recommended.
 *
 * @author Juergen Hoeller
 * @author Sebastien Deleuze
 * @since 5.0
 * @see JsonFormat#parser()
 * @see JsonFormat#printer()
 * @see #ProtobufJsonFormatHttpMessageConverter(JsonFormat.Parser, JsonFormat.Printer)
 */
/**
 * {@link  ProtobufHttpMessageConverter}的子类，它强制使用Protobuf 3及其官方库{@code "com.google.protobuf：protobuf-java-util"}进行JSON处理。 
 *  <p>最重要的是，此类通过{@link  JsonFormat}实用程序允许自定义JSON解析器和打印机配置。 
 * 如果未提供特殊的解析器或打印机配置，则将使用默认变体。 
 *  <p>需要Protobuf 3.x和{@code "com.google.protobuf：protobuf-java-util"} 3.x，建议使用3.3或更高版本。 
 *  @author  Juergen Hoeller @author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）@自5.0起
 * @see  JsonFormat＃parser（）
 * @see  JsonFormat＃printer（）
 */
public class ProtobufJsonFormatHttpMessageConverter extends ProtobufHttpMessageConverter {

	/**
	 * Constructor with default instances of {@link JsonFormat.Parser},
	 * {@link JsonFormat.Printer}, and {@link ExtensionRegistry}.
	 */
	/**
	 * 带有{@link  JsonFormat.Parser}，{<@link> JsonFormat.Printer}和{@link  ExtensionRegistry}的默认实例的构造方法。 
	 * 
	 */
	public ProtobufJsonFormatHttpMessageConverter() {
		this(null,  null, (ExtensionRegistry)null);
	}

	/**
	 * Constructor with given instances of {@link JsonFormat.Parser},
	 * {@link JsonFormat.Printer}, and a default instance of {@link ExtensionRegistry}.
	 */
	/**
	 * 具有给定实例{@link  JsonFormat.Parser}，{<@link> JsonFormat.Printer}的构造函数，以及默认实例{@link  ExtensionRegistry}的构造方法。 
	 * 
	 */
	public ProtobufJsonFormatHttpMessageConverter(
			@Nullable JsonFormat.Parser parser, @Nullable JsonFormat.Printer printer) {

		this(parser, printer, (ExtensionRegistry)null);
	}

	/**
	 * Constructor with given instances of {@link JsonFormat.Parser},
	 * {@link JsonFormat.Printer}, and {@link ExtensionRegistry}.
	 */
	/**
	 * 具有给定实例{@link  JsonFormat.Parser}，{<@link> JsonFormat.Printer}和{@link  ExtensionRegistry}的构造方法。 
	 * 
	 */
	public ProtobufJsonFormatHttpMessageConverter(@Nullable JsonFormat.Parser parser,
			@Nullable JsonFormat.Printer printer, @Nullable ExtensionRegistry extensionRegistry) {

		super(new ProtobufJavaUtilSupport(parser, printer), extensionRegistry);
	}

	/**
	 * Construct a new {@code ProtobufJsonFormatHttpMessageConverter} with the given
	 * {@code JsonFormat.Parser} and {@code JsonFormat.Printer} configuration, also
	 * accepting an initializer that allows the registration of message extensions.
	 * @param parser the JSON parser configuration
	 * @param printer the JSON printer configuration
	 * @param registryInitializer an initializer for message extensions
	 * @deprecated as of 5.1, in favor of
	 * {@link #ProtobufJsonFormatHttpMessageConverter(JsonFormat.Parser, JsonFormat.Printer, ExtensionRegistry)}
	 */
	/**
	 * 使用给定的{@code  JsonFormat.Parser}和{@code  JsonFormat.Printer}配置构造一个新的{@code  ProtobufJsonFormatHttpMessageConverter}，并接受允许注册消息扩展名的初始化程序。 
	 *  
	 * @param 解析器JSON解析器配置
	 * @param 打印机JSON打印机配置
	 * @param  RegistryInitializer从5.1开始弃用的消息扩展名的初始化程序，自{{@link> #ProtobufJsonFormatHttpMessageConverter（JsonFormat.Parser，JsonFormat .Printer，ExtensionRegistry）}
	 */
	@Deprecated
	public ProtobufJsonFormatHttpMessageConverter(@Nullable JsonFormat.Parser parser,
			@Nullable JsonFormat.Printer printer, @Nullable ExtensionRegistryInitializer registryInitializer) {

		super(new ProtobufJavaUtilSupport(parser, printer), null);
		if (registryInitializer != null) {
			registryInitializer.initializeExtensionRegistry(this.extensionRegistry);
		}
	}

}
