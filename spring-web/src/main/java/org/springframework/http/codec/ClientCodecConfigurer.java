/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.codec;

import org.springframework.core.codec.Decoder;
import org.springframework.core.codec.Encoder;

/**
 * Extension of {@link CodecConfigurer} for HTTP message reader and writer
 * options relevant on the client side.
 *
 * <p>HTTP message readers for the following are registered by default:
 * <ul>{@code byte[]}
 * <li>{@link java.nio.ByteBuffer}
 * <li>{@link org.springframework.core.io.buffer.DataBuffer DataBuffer}
 * <li>{@link org.springframework.core.io.Resource Resource}
 * <li>{@link String}
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,String&gt;} for form data
 * <li>JSON and Smile, if Jackson is present
 * <li>XML, if JAXB2 is present
 * <li>Server-Sent Events
 * </ul>
 *
 * <p>HTTP message writers registered by default:
 * <ul>{@code byte[]}
 * <li>{@link java.nio.ByteBuffer}
 * <li>{@link org.springframework.core.io.buffer.DataBuffer DataBuffer}
 * <li>{@link org.springframework.core.io.Resource Resource}
 * <li>{@link String}
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,String&gt;} for form data
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,Object&gt;} for multipart data
 * <li>JSON and Smile, if Jackson is present
 * <li>XML, if JAXB2 is present
 * </ul>
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * {@link  CodecConfigurer}的扩展，用于客户端上相关的HTTP消息读取器和写入器选项。 
 *  <p>以下内容的HTTP消息阅读器默认已注册：<ul> {<@code> byte []} <li> {<@link> java.nio.ByteBuffer} <li> {<@link> org。 
 *  springframework.core.io.buffer.DataBuffer DataBuffer} <li> {<@link> org.springframework.core.io.Resource Resource} <li> {<@link> String} <li> {<@link> org.org用于表单数据<li> JSON和Smile的springframework.util.MultiValueMap MultiValueMap <String，String>}，如果存在Jackson的<li> XML，如果存在JAXB2的<li>服务器发送的事件</ ul> <p> HTTP缺省情况下注册的消息编写者：<ul> {<@code> byte []} <li> {<@link> java.nio.ByteBuffer} <li> {<@link> org.springframework.core.io.buffer。 
 *  DataBuffer DataBuffer} <li> {<@link> org.springframework.core.io.Resource Resource} <li> {<@link> String} <li> {<@link> org.springframework.util.MultiValueMap MultiValueMap <String ，String>}用于表单数据<li> {<@link> org.springframework.util.MultiValueMap MultiValueMap <String，Object>}用于多部分数据<li> JSON和Smile（如果存在Jackson）<li> XML（如果JAXB2）存在</ ul> @author  Rossen Stoyanchev @从5.0开始
 */
public interface ClientCodecConfigurer extends CodecConfigurer {

	/**
	 * {@inheritDoc}
	 * <p>On the client side, built-in default also include customizations related
	 * to multipart readers and writers, as well as the decoder for SSE.
	 */
	/**
	 * {@inheritDoc} <p>在客户端，内置默认值还包括与多部分读取器和写入器以及SSE解码器有关的自定义。 
	 * 
	 */
	@Override
	ClientDefaultCodecs defaultCodecs();

	/**
	 * {@inheritDoc}.
	 */
	/**
	 * {@inheritDoc}。 
	 * 
	 */
	@Override
	ClientCodecConfigurer clone();


	/**
	 * Static factory method for a {@code ClientCodecConfigurer}.
	 */
	/**
	 * {@code  ClientCodecConfigurer}的静态工厂方法。 
	 * 
	 */
	static ClientCodecConfigurer create() {
		return CodecConfigurerFactory.create(ClientCodecConfigurer.class);
	}


	/**
	 * {@link CodecConfigurer.DefaultCodecs} extension with extra client-side options.
	 */
	/**
	 * {@link  CodecConfigurer.DefaultCodecs}扩展，带有额外的客户端选项。 
	 * 
	 */
	interface ClientDefaultCodecs extends DefaultCodecs {

		/**
		 * Configure encoders or writers for use with
		 * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter
		 * MultipartHttpMessageWriter}.
		 */
		/**
		 * 配置编码器或编写器，以与{@link  org.springframework.http.codec.multipart.MultipartHttpMessageWriter MultipartHttpMessageWriter}一起使用。 
		 * 
		 */
		MultipartCodecs multipartCodecs();

		/**
		 * Configure the {@code Decoder} to use for Server-Sent Events.
		 * <p>By default if this is not set, and Jackson is available, the
		 * {@link #jackson2JsonDecoder} override is used instead. Use this property
		 * if you want to further customize the SSE decoder.
		 * <p>Note that {@link #maxInMemorySize(int)}, if configured, will be
		 * applied to the given decoder.
		 * @param decoder the decoder to use
		 */
		/**
		 * 配置{@code 解码器}以用于服务器发送的事件。 
		 *  <p>默认情况下，如果未设置此项并且Jackson可用，则改用{@link ＃jackson2JsonDecoder}覆盖。 
		 * 如果要进一步自定义SSE解码器，请使用此属性。 
		 *  <p>请注意，{<@link> #maxInMemorySize（int）}（如果已配置）将应用于给定的解码器。 
		 *  
		 * @param 解码器解码器使用
		 */
		void serverSentEventDecoder(Decoder<?> decoder);
	}


	/**
	 * Registry and container for multipart HTTP message writers.
	 */
	/**
	 * 多部分HTTP消息编写器的注册表和容器。 
	 * 
	 */
	interface MultipartCodecs {

		/**
		 * Add a Part {@code Encoder}, internally wrapped with
		 * {@link EncoderHttpMessageWriter}.
		 * @param encoder the encoder to add
		 */
		/**
		 * 添加一个部分{@code  Encoder}，内部包裹有{@link  EncoderHttpMessageWriter}。 
		 *  
		 * @param 编码器要添加的编码器
		 */
		MultipartCodecs encoder(Encoder<?> encoder);

		/**
		 * Add a Part {@link HttpMessageWriter}. For writers of type
		 * {@link EncoderHttpMessageWriter} consider using the shortcut
		 * {@link #encoder(Encoder)} instead.
		 * @param writer the writer to add
		 */
		/**
		 * 添加一个部分{@link  HttpMessageWriter}。 
		 * 对于类型为{@link  EncoderHttpMessageWriter}的编写者，可以考虑使用快捷方式{@link  #encoder（Encoder）}。 
		 *  
		 * @param 作家作家要添加
		 */
		MultipartCodecs writer(HttpMessageWriter<?> writer);
	}

}
