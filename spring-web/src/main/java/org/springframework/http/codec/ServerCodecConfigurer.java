/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.codec;

import org.springframework.core.codec.Encoder;

/**
 * Extension of {@link CodecConfigurer} for HTTP message reader and writer
 * options relevant on the server side.
 *
 * <p>HTTP message readers for the following are registered by default:
 * <ul>{@code byte[]}
 * <li>{@link java.nio.ByteBuffer}
 * <li>{@link org.springframework.core.io.buffer.DataBuffer DataBuffer}
 * <li>{@link org.springframework.core.io.Resource Resource}
 * <li>{@link String}
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,String&gt;} for form data
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,Object&gt;} for multipart data
 * <li>JSON and Smile, if Jackson is present
 * <li>XML, if JAXB2 is present
 * </ul>
 *
 * <p>HTTP message writers registered by default:
 * <ul>{@code byte[]}
 * <li>{@link java.nio.ByteBuffer}
 * <li>{@link org.springframework.core.io.buffer.DataBuffer DataBuffer}
 * <li>{@link org.springframework.core.io.Resource Resource}
 * <li>{@link String}
 * <li>{@link org.springframework.util.MultiValueMap
 * MultiValueMap&lt;String,String&gt;} for form data
 * <li>JSON and Smile, if Jackson is present
 * <li>XML, if JAXB2 is present
 * <li>Server-Sent Events
 * </ul>
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * {@link  CodecConfigurer}的扩展，用于服务器端相关的HTTP消息读取器和写入器选项。 
 *  <p>以下内容的HTTP消息阅读器默认已注册：<ul> {<@code> byte []} <li> {<@link> java.nio.ByteBuffer} <li> {<@link> org。 
 *  springframework.core.io.buffer.DataBuffer DataBuffer} <li> {<@link> org.springframework.core.io.Resource Resource} <li> {<@link> String} <li> {<@link> org.org用于表单数据<li> {<@link>的org.springframework.util.MultiValueMap MultiValueMap <String，Object>}的springframework.util.MultiValueMap MultiValueMap <String，String>}用于多部分数据<li> JSON和Smile，如果Jackson是存在<li> XML（如果存在JAXB2的话）</ ul> <p>默认情况下注册的HTTP消息编写器：<ul> {<@code> byte []} <li> {<@link> java.nio.ByteBuffer} <li> {<@link> org.springframework.core.io.buffer.DataBuffer DataBuffer} <li> {<@link> org.springframework.core.io.Resource Resource} <li> {<@link>字符串} <li> {<@link> org.springframework.util.MultiValueMap MultiValueMap <String，String>}用于表单数据<li> JSON和Smile（如果存在Jackson）<li> XML（如果存在JAXB2）<li>已发送事件</ ul> @author  Rossen Stoyanchev @从5.0开始
 */
public interface ServerCodecConfigurer extends CodecConfigurer {

	/**
	 * {@inheritDoc}
	 * <p>On the server side, built-in default also include customizations
	 * related to the encoder for SSE.
	 */
	/**
	 * {@inheritDoc} <p>在服务器端，内置默认值还包括与SSE编码器相关的自定义项。 
	 * 
	 */
	@Override
	ServerDefaultCodecs defaultCodecs();

	/**
	 * {@inheritDoc}.
	 */
	/**
	 * {@inheritDoc}。 
	 * 
	 */
	@Override
	ServerCodecConfigurer clone();


	/**
	 * Static factory method for a {@code ServerCodecConfigurer}.
	 */
	/**
	 * {@code  ServerCodecConfigurer}的静态工厂方法。 
	 * 
	 */
	static ServerCodecConfigurer create() {
		return CodecConfigurerFactory.create(ServerCodecConfigurer.class);
	}


	/**
	 * {@link CodecConfigurer.DefaultCodecs} extension with extra client-side options.
	 */
	/**
	 * {@link  CodecConfigurer.DefaultCodecs}扩展，带有额外的客户端选项。 
	 * 
	 */
	interface ServerDefaultCodecs extends DefaultCodecs {

		/**
		 * Configure the {@code HttpMessageReader} to use for multipart requests.
		 * <p>By default, if
		 * <a href="https://github.com/synchronoss/nio-multipart">Synchronoss NIO Multipart</a>
		 * is present, this is set to
		 * {@link org.springframework.http.codec.multipart.MultipartHttpMessageReader
		 * MultipartHttpMessageReader} created with an instance of
		 * {@link org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader
		 * SynchronossPartHttpMessageReader}.
		 * <p>Note that {@link #maxInMemorySize(int)} and/or
		 * {@link #enableLoggingRequestDetails(boolean)}, if configured, will be
		 * applied to the given reader, if applicable.
		 * @param reader the message reader to use for multipart requests.
		 * @since 5.1.11
		 */
		/**
		 * 配置{@code  HttpMessageReader}以用于多部分请求。 
		 *  <p>默认情况下，如果存在<a href="https://github.com/synchronoss/nio-multipart"> Synchronoss NIO Multipart </a>，则将其设置为{@link  org.springframework。 
		 * 使用{@link  org.springframework.http.codec.multipart.SynchronossPartHttpMessageReader SynchronossPartHttpMessageReader}实例创建的http.codec.multipart.MultipartHttpMessageReader} MultipartHttpMessageReader}。 
		 *  <p>请注意，如果适用，{<@link> #maxInMemorySize（int）}和/或{@link  #enableLoggingRequestDetails（boolean）}将应用于给定的阅读器。 
		 *  
		 * @param  reader消息阅读器，用于多部分请求。 
		 *  @自5.1.11起
		 */
		void multipartReader(HttpMessageReader<?> reader);

		/**
		 * Configure the {@code Encoder} to use for Server-Sent Events.
		 * <p>By default if this is not set, and Jackson is available, the
		 * {@link #jackson2JsonEncoder} override is used instead. Use this method
		 * to customize the SSE encoder.
		 */
		/**
		 * 配置{@code 编码器}以用于服务器发送的事件。 
		 *  <p>默认情况下，如果未设置此项，并且杰克逊可用，则使用{@link ＃jackson2JsonEncoder}替代。 
		 * 使用此方法来自定义SSE编码器。 
		 * 
		 */
		void serverSentEventEncoder(Encoder<?> encoder);
	}

}
