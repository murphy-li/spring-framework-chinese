/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.codec;

import java.util.List;
import java.util.Map;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.springframework.core.MethodParameter;
import org.springframework.core.ResolvableType;
import org.springframework.http.MediaType;
import org.springframework.http.ReactiveHttpInputMessage;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.lang.Nullable;

/**
 * Strategy for reading from a {@link ReactiveHttpInputMessage} and decoding
 * the stream of bytes to Objects of type {@code <T>}.
 *
 * @author Rossen Stoyanchev
 * @author Arjen Poutsma
 * @author Sebastien Deleuze
 * @since 5.0
 * @param <T> the type of objects in the decoded output stream
 */
/**
 * 从{@link  ReactiveHttpInputMessage}读取并将字节流解码为{@code  <T>}类型的对象的策略。 
 *  @author  Rossen Stoyanchev @author  Arjen Poutsma @author  Sebastien Deleuze @since 5.0 
 * @param  <T>解码输出流中对象的类型
 */
public interface HttpMessageReader<T> {

	/**
	 * Return the {@link MediaType}'s that this reader supports.
	 */
	/**
	 * 返回此阅读器支持的{@link  MediaType}。 
	 * 
	 */
	List<MediaType> getReadableMediaTypes();

	/**
	 * Whether the given object type is supported by this reader.
	 * @param elementType the type of object to check
	 * @param mediaType the media type for the read (possibly {@code null})
	 * @return {@code true} if readable, {@code false} otherwise
	 */
	/**
	 * 该阅读器是否支持给定的对象类型。 
	 *  
	 * @param  elementType要检查的对象的类型
	 * @param  mediaType读取的媒体类型（可能为{@code  null}）
	 * @return  {@code  true}（如果可读），{<@code > false}否则
	 */
	boolean canRead(ResolvableType elementType, @Nullable MediaType mediaType);

	/**
	 * Read from the input message and encode to a stream of objects.
	 * @param elementType the type of objects in the stream which must have been
	 * previously checked via {@link #canRead(ResolvableType, MediaType)}
	 * @param message the message to read from
	 * @param hints additional information about how to read and decode the input
	 * @return the decoded stream of elements
	 */
	/**
	 * 从输入消息中读取并编码为对象流。 
	 *  
	 * @param  elementType流中必须事先通过{@link  #canRead（ResolvableType，MediaType）}检查的对象的类型
	 * @param 消息从
	 * @param 读取的消息提示有关以下内容的其他信息如何读取和解码输入
	 * @return 解码后的元素流
	 */
	Flux<T> read(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints);

	/**
	 * Read from the input message and encode to a single object.
	 * @param elementType the type of objects in the stream which must have been
	 * previously checked via {@link #canRead(ResolvableType, MediaType)}
	 * @param message the message to read from
	 * @param hints additional information about how to read and decode the input
	 * @return the decoded object
	 */
	/**
	 * 从输入消息中读取并编码为单个对象。 
	 *  
	 * @param  elementType流中必须事先通过{@link  #canRead（ResolvableType，MediaType）}检查过的对象的类型
	 * @param 消息要从
	 * @param 读取的消息提示有关以下内容的其他信息如何读取和解码输入
	 * @return 解码对象
	 */
	Mono<T> readMono(ResolvableType elementType, ReactiveHttpInputMessage message, Map<String, Object> hints);

	/**
	 * Server-side only alternative to
	 * {@link #read(ResolvableType, ReactiveHttpInputMessage, Map)}
	 * with additional context available.
	 * @param actualType the actual type of the target method parameter;
	 * for annotated controllers, the {@link MethodParameter} can be accessed
	 * via {@link ResolvableType#getSource()}.
	 * @param elementType the type of Objects in the output stream
	 * @param request the current request
	 * @param response the current response
	 * @param hints additional information about how to read the body
	 * @return the decoded stream of elements
	 */
	/**
	 * 仅在服务器端替代{@link  #read（ResolvableType，ReactiveHttpInputMessage，Map）}，并提供其他上下文。 
	 *  
	 * @param  actualType目标方法参数的实际类型； 
	 * 对于带注释的控制器，可以通过{@link  ResolvableType＃getSource（）}访问{@link  MethodParameter}。 
	 *  
	 * @param  elementType输出流中对象的类型
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param 提示有关如何读取主体的其他信息
	 * @return 解码后的流元素
	 */
	default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,
			ServerHttpResponse response, Map<String, Object> hints) {

		return read(elementType, request, hints);
	}

	/**
	 * Server-side only alternative to
	 * {@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)}
	 * with additional, context available.
	 * @param actualType the actual type of the target method parameter;
	 * for annotated controllers, the {@link MethodParameter} can be accessed
	 * via {@link ResolvableType#getSource()}.
	 * @param elementType the type of Objects in the output stream
	 * @param request the current request
	 * @param response the current response
	 * @param hints additional information about how to read the body
	 * @return the decoded stream of elements
	 */
	/**
	 * 仅在服务器端替代{@link  #readMono（ResolvableType，ReactiveHttpInputMessage，Map）}，并提供其他上下文。 
	 *  
	 * @param  actualType目标方法参数的实际类型； 
	 * 对于带注释的控制器，可以通过{@link  ResolvableType＃getSource（）}访问{@link  MethodParameter}。 
	 *  
	 * @param  elementType输出流中对象的类型
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param 提示有关如何读取主体的其他信息
	 * @return 解码后的流元素
	 */
	default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,
			ServerHttpResponse response, Map<String, Object> hints) {

		return readMono(elementType, request, hints);
	}

}
