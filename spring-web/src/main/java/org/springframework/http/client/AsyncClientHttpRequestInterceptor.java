/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.client;

import java.io.IOException;

import org.springframework.http.HttpRequest;
import org.springframework.util.concurrent.ListenableFuture;

/**
 * Intercepts client-side HTTP requests. Implementations of this interface can be
 * {@linkplain org.springframework.web.client.AsyncRestTemplate#setInterceptors registered}
 * with the {@link org.springframework.web.client.AsyncRestTemplate} as to modify
 * the outgoing {@link HttpRequest} and/or register to modify the incoming
 * {@link ClientHttpResponse} with help of a
 * {@link org.springframework.util.concurrent.ListenableFutureAdapter}.
 *
 * <p>The main entry point for interceptors is {@link #intercept}.
 *
 * @author Jakub Narloch
 * @author Rossen Stoyanchev
 * @since 4.3
 * @see org.springframework.web.client.AsyncRestTemplate
 * @see org.springframework.http.client.support.InterceptingAsyncHttpAccessor
 * @deprecated as of Spring 5.0, in favor of
 * {@link org.springframework.web.reactive.function.client.ExchangeFilterFunction}
 */
/**
 * 拦截客户端HTTP请求。 
 * 该接口的实现可以是{@link  plain org.springframework.web.client.AsyncRestTemplate＃setInterceptorsregistered}，其中{@link  org.springframework.web.client.AsyncRestTemplate}可以修改传出的{<@link> HttpRequest}和/或注册，以借助{@link  org.springframework.util.concurrent.ListenableFutureAdapter}修改传入的{@link  ClientHttpResponse}。 
 *  <p>拦截器的主要入口点是{@link  #intercept}。 
 *  @author  Jakub Narloch @author  Rossen Stoyanchev @从4.3开始
 * @see  org.springframework.web.client.AsyncRestTemplate 
 * @see  org.springframework.http.client.support.InterceptingAsyncHttpAccessor @从Spring 5.0开始弃用，支持{@link  org.springframework.web.reactive.function.client.ExchangeFilterFunction}
 */
@Deprecated
public interface AsyncClientHttpRequestInterceptor {

	/**
	 * Intercept the given request, and return a response future. The given
	 * {@link AsyncClientHttpRequestExecution} allows the interceptor to pass on
	 * the request to the next entity in the chain.
	 * <p>An implementation might follow this pattern:
	 * <ol>
	 * <li>Examine the {@linkplain HttpRequest request} and body</li>
	 * <li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper
	 * wrap} the request to filter HTTP attributes.</li>
	 * <li>Optionally modify the body of the request.</li>
	 * <li>One of the following:
	 * <ul>
	 * <li>execute the request through {@link ClientHttpRequestExecution}</li>
	 * <li>don't execute the request to block the execution altogether</li>
	 * </ul>
	 * <li>Optionally adapt the response to filter HTTP attributes with the help of
	 * {@link org.springframework.util.concurrent.ListenableFutureAdapter
	 * ListenableFutureAdapter}.</li>
	 * </ol>
	 * @param request the request, containing method, URI, and headers
	 * @param body the body of the request
	 * @param execution the request execution
	 * @return the response future
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 拦截给定的请求，并返回将来的响应。 
	 * 给定的{@link  AsyncClientHttpRequestExecution}允许拦截器将请求传递给链中的下一个实体。 
	 *  <p>实现可能会遵循以下模式：<ol> <li>检查{@link 纯HttpRequest请求}和正文</ li> <li>（可选）{<@link>纯org.springframework.http.client .support.HttpRequestWrapper包装}请求以过滤HTTP属性。 
	 * </ li> <li>（可选）修改请求的正文。 
	 * </ li> <li>以下内容之一：<ul> <li>通过执行请求{@link  ClientHttpRequestExecution} </ li> <li>不执行请求以完全阻止执行</ li> </ ul> <li>可选地，在{@link  org.springframework.util.concurrent.ListenableFutureAdapter ListenableFutureAdapter}。 
	 * </ li> </ ol> 
	 * @param 请求请求，其中包含方法，URI和标头
	 * @param 主体为请求主体<
	 * @param>执行请求执行
	 * @return 响应将来
	 * @throws  IOException（如果发生I / O错误）
	 */
	ListenableFuture<ClientHttpResponse> intercept(HttpRequest request, byte[] body,
			AsyncClientHttpRequestExecution execution) throws IOException;

}
