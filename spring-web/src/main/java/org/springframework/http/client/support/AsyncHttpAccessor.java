/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.client.support;

import java.io.IOException;
import java.net.URI;

import org.apache.commons.logging.Log;

import org.springframework.http.HttpLogging;
import org.springframework.http.HttpMethod;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Base class for {@link org.springframework.web.client.AsyncRestTemplate}
 * and other HTTP accessing gateway helpers, defining common properties
 * such as the {@link org.springframework.http.client.AsyncClientHttpRequestFactory}
 * to operate on.
 *
 * <p>Not intended to be used directly. See
 * {@link org.springframework.web.client.AsyncRestTemplate}.
 *
 * @author Arjen Poutsma
 * @since 4.0
 * @see org.springframework.web.client.AsyncRestTemplate
 * @deprecated as of Spring 5.0, with no direct replacement
 */
/**
 * {@link  org.springframework.web.client.AsyncRestTemplate}和其他HTTP访问网关助手的基类，定义了要操作的公共属性，例如{@link  org.springframework.http.client.AsyncClientHttpRequestFactory}。 
 *  <p>不打算直接使用。 
 * 参见{@link  org.springframework.web.client.AsyncRestTemplate}。 
 *  @author  Arjen Poutsma @从4.0开始
 * @see  org.springframework.web.client.AsyncRestTemplate @从Spring 5.0开始不推荐使用，没有直接替换
 */
@Deprecated
public class AsyncHttpAccessor {

	/** Logger available to subclasses. */
	/**
	 * 记录器可用于子类。 
	 * 
	 */
	protected final Log logger = HttpLogging.forLogName(getClass());

	@Nullable
	private org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory;


	/**
	 * Set the request factory that this accessor uses for obtaining {@link
	 * org.springframework.http.client.ClientHttpRequest HttpRequests}.
	 */
	/**
	 * 设置此访问器用于获取{@link  org.springframework.http.client.ClientHttpRequest HttpRequests}的请求工厂。 
	 * 
	 */
	public void setAsyncRequestFactory(
			org.springframework.http.client.AsyncClientHttpRequestFactory asyncRequestFactory) {

		Assert.notNull(asyncRequestFactory, "AsyncClientHttpRequestFactory must not be null");
		this.asyncRequestFactory = asyncRequestFactory;
	}

	/**
	 * Return the request factory that this accessor uses for obtaining {@link
	 * org.springframework.http.client.ClientHttpRequest HttpRequests}.
	 */
	/**
	 * 返回此访问器用于获取{@link  org.springframework.http.client.ClientHttpRequest HttpRequests}的请求工厂。 
	 * 
	 */
	public org.springframework.http.client.AsyncClientHttpRequestFactory getAsyncRequestFactory() {
		Assert.state(this.asyncRequestFactory != null, "No AsyncClientHttpRequestFactory set");
		return this.asyncRequestFactory;
	}

	/**
	 * Create a new {@link org.springframework.http.client.AsyncClientHttpRequest} via this template's
	 * {@link org.springframework.http.client.AsyncClientHttpRequestFactory}.
	 * @param url the URL to connect to
	 * @param method the HTTP method to execute (GET, POST, etc.)
	 * @return the created request
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 通过此模板的{@link  org.springframework.http.client.AsyncClientHttpRequestFactory}创建一个新的{@link  org.springframework.http.client.AsyncClientHttpRequest}。 
	 *  
	 * @param  URL连接到
	 * @param 方法的URL HTTP方法执行（GET，POST等）
	 * @return 创建的请求
	 * @throws  IOException（如果发生I / O错误）
	 */
	protected org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(URI url, HttpMethod method)
			throws IOException {

		org.springframework.http.client.AsyncClientHttpRequest request =
				getAsyncRequestFactory().createAsyncRequest(url, method);
		if (logger.isDebugEnabled()) {
			logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"");
		}
		return request;
	}

}
