/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.client;

import java.io.IOException;

import org.springframework.http.HttpRequest;

/**
 * Intercepts client-side HTTP requests. Implementations of this interface can be
 * {@linkplain org.springframework.web.client.RestTemplate#setInterceptors registered}
 * with the {@link org.springframework.web.client.RestTemplate RestTemplate},
 * as to modify the outgoing {@link ClientHttpRequest} and/or the incoming
 * {@link ClientHttpResponse}.
 *
 * <p>The main entry point for interceptors is
 * {@link #intercept(HttpRequest, byte[], ClientHttpRequestExecution)}.
 *
 * @author Arjen Poutsma
 * @since 3.1
 */
/**
 * 拦截客户端HTTP请求。 
 * 此接口的实现可以是{@link  plain org.springframework.web.client.RestTemplate＃setInterceptors已注册}，并已{{@link> org.springframework.web.client.RestTemplate RestTemplate}进行了修改， @link  ClientHttpRequest}和/或传入的{@link  ClientHttpResponse}。 
 *  <p>拦截器的主要入口点是{@link  #intercept（HttpRequest，byte []，ClientHttpRequestExecution）}。 
 *  @author  Arjen Poutsma @从3.1开始
 */
@FunctionalInterface
public interface ClientHttpRequestInterceptor {

	/**
	 * Intercept the given request, and return a response. The given
	 * {@link ClientHttpRequestExecution} allows the interceptor to pass on the
	 * request and response to the next entity in the chain.
	 * <p>A typical implementation of this method would follow the following pattern:
	 * <ol>
	 * <li>Examine the {@linkplain HttpRequest request} and body</li>
	 * <li>Optionally {@linkplain org.springframework.http.client.support.HttpRequestWrapper
	 * wrap} the request to filter HTTP attributes.</li>
	 * <li>Optionally modify the body of the request.</li>
	 * <li><strong>Either</strong>
	 * <ul>
	 * <li>execute the request using
	 * {@link ClientHttpRequestExecution#execute(org.springframework.http.HttpRequest, byte[])},</li>
	 * <strong>or</strong>
	 * <li>do not execute the request to block the execution altogether.</li>
	 * </ul>
	 * <li>Optionally wrap the response to filter HTTP attributes.</li>
	 * </ol>
	 * @param request the request, containing method, URI, and headers
	 * @param body the body of the request
	 * @param execution the request execution
	 * @return the response
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 拦截给定的请求，并返回响应。 
	 * 给定的{@link  ClientHttpRequestExecution}允许拦截器将请求和响应传递给链中的下一个实体。 
	 *  <p>此方法的典型实现将遵循以下模式：<ol> <li>检查{@link  plain HttpRequest请求}和正文</ li> <li>（可选）{<@link> plain org。 
	 *  springframework.http.client.support.HttpRequestWrapper包装}请求以过滤HTTP属性。 
	 * </ li> <li>（可选）修改请求的正文。 
	 * </ li> <li> <strong>任何一个</ strong> <ul > <li>使用{@link  ClientHttpRequestExecution＃execute（org.springframework.http.HttpRequest，byte []）}执行请求，</ li> <strong>或</ strong> <li>不执行请求完全阻止执行。 
	 * </ li> </ ul> <li>（可选）包装响应以过滤HTTP属性。 
	 * </ li> </ ol> 
	 * @param 请求该请求，其中包含方法，URI和标头
	 * @param 正文请求正文
	 * @param 执行请求执行
	 * @return 响应
	 * @throws  IOException（在发生I / O错误时）
	 */
	ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)
			throws IOException;

}
