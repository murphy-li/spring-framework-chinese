/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.server.reactive;

import java.net.InetSocketAddress;
import java.net.URI;
import java.util.function.Consumer;

import org.springframework.http.HttpCookie;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.ReactiveHttpInputMessage;
import org.springframework.http.server.RequestPath;
import org.springframework.lang.Nullable;
import org.springframework.util.MultiValueMap;

/**
 * Represents a reactive server-side HTTP request.
 *
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @author Sam Brannen
 * @since 5.0
 */
/**
 * 表示反应式服务器端HTTP请求。 
 *  @author  Arjen Poutsma @author  Rossen Stoyanchev @author  Sam Brannen @自5.0
 */
public interface ServerHttpRequest extends HttpRequest, ReactiveHttpInputMessage {

	/**
	 * Return an id that represents the underlying connection, if available,
	 * or the request for the purpose of correlating log messages.
	 * @since 5.1
	 * @see org.springframework.web.server.ServerWebExchange#getLogPrefix()
	 */
	/**
	 * 返回一个表示基础连接（如果可用）或用于关联日志消息的请求的ID。 
	 *  @since 5.1 
	 * @see  org.springframework.web.server.ServerWebExchange＃getLogPrefix（）
	 */
	String getId();

	/**
	 * Returns a structured representation of the request path including the
	 * context path + path within application portions, path segments with
	 * encoded and decoded values, and path parameters.
	 */
	/**
	 * 返回请求路径的结构化表示，包括应用程序部分中的上下文路径+路径，具有编码和解码值的路径段以及路径参数。 
	 * 
	 */
	RequestPath getPath();

	/**
	 * Return a read-only map with parsed and decoded query parameter values.
	 */
	/**
	 * 返回带有已解析和已解码查询参数值的只读映射。 
	 * 
	 */
	MultiValueMap<String, String> getQueryParams();

	/**
	 * Return a read-only map of cookies sent by the client.
	 */
	/**
	 * 返回客户端发送的cookie的只读映射。 
	 * 
	 */
	MultiValueMap<String, HttpCookie> getCookies();

	/**
	 * Return the remote address where this request is connected to, if available.
	 */
	/**
	 * 返回此请求所连接的远程地址（如果有）。 
	 * 
	 */
	@Nullable
	default InetSocketAddress getRemoteAddress() {
		return null;
	}

	/**
	 * Return the local address the request was accepted on, if available.
	 * 5.2.3
	 */
	/**
	 * 返回接受请求的本地地址（如果有）。 
	 *  5.2.3
	 */
	@Nullable
	default InetSocketAddress getLocalAddress() {
		return null;
	}

	/**
	 * Return the SSL session information if the request has been transmitted
	 * over a secure protocol including SSL certificates, if available.
	 * @return the session information, or {@code null} if none available
	 * @since 5.0.2
	 */
	/**
	 * 如果已通过包括SSL证书（如果有）的安全协议传输了请求，则返回SSL会话信息。 
	 *  
	 * @return 会话信息，如果没有可用，则{@code  null}（自5.0.2开始）
	 */
	@Nullable
	default SslInfo getSslInfo() {
		return null;
	}

	/**
	 * Return a builder to mutate properties of this request by wrapping it
	 * with {@link ServerHttpRequestDecorator} and returning either mutated
	 * values or delegating back to this instance.
	 */
	/**
	 * 通过使用{@link  ServerHttpRequestDecorator}将请求包装起来，返回一个生成器以对该请求的属性进行更改，并返回更改后的值或委派回该实例。 
	 * 
	 */
	default ServerHttpRequest.Builder mutate() {
		return new DefaultServerHttpRequestBuilder(this);
	}


	/**
	 * Builder for mutating an existing {@link ServerHttpRequest}.
	 */
	/**
	 * 用于更改现有{@link  ServerHttpRequest}的生成器。 
	 * 
	 */
	interface Builder {

		/**
		 * Set the HTTP method to return.
		 */
		/**
		 * 将HTTP方法设置为return。 
		 * 
		 */
		Builder method(HttpMethod httpMethod);

		/**
		 * Set the URI to use with the following conditions:
		 * <ul>
		 * <li>If {@link #path(String) path} is also set, it overrides the path
		 * of the URI provided here.
		 * <li>If {@link #contextPath(String) contextPath} is also set, or
		 * already present, it must match the start of the path of the URI
		 * provided here.
		 * </ul>
		 */
		/**
		 * 设置URI以在以下条件下使用：<ul> <li>如果还设置了{@link  #path（String）path}，它将覆盖此处提供的URI的路径。 
		 *  <li>如果{@link  #contextPath（String）contextPath}也已设置或已经存在，则它必须与此处提供的URI路径的开头匹配。 
		 *  </ ul>
		 */
		Builder uri(URI uri);

		/**
		 * Set the path to use instead of the {@code "rawPath"} of the URI of
		 * the request with the following conditions:
		 * <ul>
		 * <li>If {@link #uri(URI) uri} is also set, the path given here
		 * overrides the path of the given URI.
		 * <li>If {@link #contextPath(String) contextPath} is also set, or
		 * already present, it must match the start of the path given here.
		 * <li>The given value must begin with a slash.
		 * </ul>
		 */
		/**
		 * 在以下条件下，设置要使用的路径来代替请求的URI的{@code "rawPath"}：<ul> <li>如果还设置了{@link  #uri（URI）uri} ，此处给出的路径将覆盖给定URI的路径。 
		 *  <li>如果{@link  #contextPath（String）contextPath}也已设置或已经存在，则它必须与此处给定路径的开头匹配。 
		 *  <li>给定值必须以斜杠开头。 
		 *  </ ul>
		 */
		Builder path(String path);

		/**
		 * Set the contextPath to use.
		 * <p>The given value must be a valid {@link RequestPath#contextPath()
		 * contextPath} and it must match the start of the path of the URI of
		 * the request. That means changing the contextPath, implies also
		 * changing the path via {@link #path(String)}.
		 */
		/**
		 * 设置要使用的contextPath。 
		 *  <p>给定值必须是有效的{@link  RequestPath＃contextPath（）contextPath}，并且它必须与请求URI路径的开头匹配。 
		 * 这意味着更改contextPath，这还意味着还可以通过{@link  #path（String）}来更改路径。 
		 * 
		 */
		Builder contextPath(String contextPath);

		/**
		 * Set or override the specified header values under the given name.
		 * <p>If you need to add header values, remove headers, etc., use
		 * {@link #headers(Consumer)} for greater control.
		 * @param headerName the header name
		 * @param headerValues the header values
		 * @since 5.1.9
		 * @see #headers(Consumer)
		 */
		/**
		 * 在给定名称下设置或覆盖指定的标头值。 
		 *  <p>如果需要添加标题值，删除标题等，请使用{@link  #headers（Consumer）}进行更好的控制。 
		 *  
		 * @param  headerName标头名称
		 * @param  headerValues标头值@5.1.9起
		 * @see  #headers（Consumer）
		 */
		Builder header(String headerName, String... headerValues);

		/**
		 * Manipulate request headers. The provided {@code HttpHeaders} contains
		 * current request headers, so that the {@code Consumer} can
		 * {@linkplain HttpHeaders#set(String, String) overwrite} or
		 * {@linkplain HttpHeaders#remove(Object) remove} existing values, or
		 * use any other {@link HttpHeaders} methods.
		 * @see #header(String, String...)
		 */
		/**
		 * 处理请求标头。 
		 * 提供的{@code  HttpHeaders}包含当前请求标头，以便{@code  Consumer}可以{@link  plain HttpHeaders＃set（String，String）overwrite}或{@link  plain HttpHeaders＃ remove（Object）remove}现有值，或使用任何其他{@link  HttpHeaders}方法。 
		 *  
		 * @see  #header（字符串，字符串...）
		 */
		Builder headers(Consumer<HttpHeaders> headersConsumer);

		/**
		 * Set the SSL session information. This may be useful in environments
		 * where TLS termination is done at the router, but SSL information is
		 * made available in some other way such as through a header.
		 * @since 5.0.7
		 */
		/**
		 * 设置SSL会话信息。 
		 * 这在路由器完成TLS终止但以其他方式（例如通过标头）使SSL信息可用的环境中可能很有用。 
		 *  @5.0.7起
		 */
		Builder sslInfo(SslInfo sslInfo);

		/**
		 * Build a {@link ServerHttpRequest} decorator with the mutated properties.
		 */
		/**
		 * 使用变异的属性构建一个{@link  ServerHttpRequest}装饰器。 
		 * 
		 */
		ServerHttpRequest build();
	}

}
