/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.server.reactive;

import org.springframework.http.HttpStatus;
import org.springframework.http.ReactiveHttpOutputMessage;
import org.springframework.http.ResponseCookie;
import org.springframework.lang.Nullable;
import org.springframework.util.MultiValueMap;

/**
 * Represents a reactive server-side HTTP response.
 *
 * @author Arjen Poutsma
 * @author Sebastien Deleuze
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 表示反应式服务器端HTTP响应。 
 *  @author  Arjen Poutsma @author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）@author  Rossen Stoyanchev @since 5.0
 */
public interface ServerHttpResponse extends ReactiveHttpOutputMessage {

	/**
	 * Set the HTTP status code of the response.
	 * @param status the HTTP status as an {@link HttpStatus} enum value
	 * @return {@code false} if the status code change wasn't processed because
	 * the HTTP response is committed, {@code true} if successfully set.
	 */
	/**
	 * 设置响应的HTTP状态代码。 
	 *  
	 * @param 将HTTP状态设置为{@link  HttpStatus}枚举值
	 * @return  {@code  false}，如果由于提交了HTTP响应而未处理状态代码更改，则{<@code > true}（如果成功设置）。 
	 * 
	 */
	boolean setStatusCode(@Nullable HttpStatus status);

	/**
	 * Return the status code that has been set, or otherwise fall back on the
	 * status of the response from the underlying server. The return value may
	 * be {@code null} if the status code value is outside the
	 * {@link HttpStatus} enum range, or if there is no default value from the
	 * underlying server.
	 */
	/**
	 * 返回已设置的状态代码，否则返回来自基础服务器的响应状态。 
	 * 如果状态代码值不在{@link  HttpStatus}枚举范围内，或者基础服务器没有默认值，则返回值可以为{@code  null}。 
	 * 
	 */
	@Nullable
	HttpStatus getStatusCode();

	/**
	 * Set the HTTP status code to the given value (potentially non-standard and
	 * not resolvable through the {@link HttpStatus} enum) as an integer.
	 * @param value the status code value
	 * @return {@code false} if the status code change wasn't processed because
	 * the HTTP response is committed, {@code true} if successfully set.
	 * @since 5.2.4
	 */
	/**
	 * 将HTTP状态代码设置为整数（给定值）（可能是非标准值，并且无法通过{@link  HttpStatus}枚举解析）。 
	 *  
	 * @param 设置状态代码值
	 * @return  {@code  false}如果由于提交了HTTP响应而未处理状态代码更改，则设置成功，则设置{@code  true}。 
	 *  @从5.2.4开始
	 */
	default boolean setRawStatusCode(@Nullable Integer value) {
		if (value == null) {
			return setStatusCode(null);
		}
		else {
			HttpStatus httpStatus = HttpStatus.resolve(value);
			if (httpStatus == null) {
				throw new IllegalStateException(
						"Unresolvable HttpStatus for general ServerHttpResponse: " + value);
			}
			return setStatusCode(httpStatus);
		}
	}

	/**
	 * Return the status code that has been set, or otherwise fall back on the
	 * status of the response from the underlying server. The return value may
	 * be {@code null} if there is no default value from the underlying server.
	 * @since 5.2.4
	 */
	/**
	 * 返回已设置的状态代码，否则返回来自基础服务器的响应状态。 
	 * 如果基础服务器没有默认值，则返回值可以为{@code  null}。 
	 *  @从5.2.4开始
	 */
	@Nullable
	default Integer getRawStatusCode() {
		HttpStatus httpStatus = getStatusCode();
		return (httpStatus != null ? httpStatus.value() : null);
	}

	/**
	 * Return a mutable map with the cookies to send to the server.
	 */
	/**
	 * 返回带有cookie的可变映射以发送到服务器。 
	 * 
	 */
	MultiValueMap<String, ResponseCookie> getCookies();

	/**
	 * Add the given {@code ResponseCookie}.
	 * @param cookie the cookie to add
	 * @throws IllegalStateException if the response has already been committed
	 */
	/**
	 * 添加给定的{@code  ResponseCookie}。 
	 *  
	 * @param  cookie如果要提交响应，则要添加
	 * @throws  IllegalStateException的cookie
	 */
	void addCookie(ResponseCookie cookie);

}
