/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http.server;

/**
 * A control that can put the processing of an HTTP request in asynchronous mode during
 * which the response remains open until explicitly closed.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 可以将HTTP请求的处理置于异步模式的控件，在该模式下，响应保持打开状态，直到显式关闭为止。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public interface ServerHttpAsyncRequestControl {

	/**
	 * Enable asynchronous processing after which the response remains open until a call
	 * to {@link #complete()} is made or the server times out the request. Once enabled,
	 * additional calls to this method are ignored.
	 */
	/**
	 * 启用异步处理，此后响应保持打开状态，直到调用{@link  #complete（）}或服务器使请求超时为止。 
	 * 一旦启用，对该方法的其他调用将被忽略。 
	 * 
	 */
	void start();

	/**
	 * A variation on {@link #start()} that allows specifying a timeout value to use to
	 * use for asynchronous processing. If {@link #complete()} is not called within the
	 * specified value, the request times out.
	 */
	/**
	 * {@link  #start（）}的一种变体，它允许指定用于异步处理的超时值。 
	 * 如果未在指定值内调用{@link  #complete（）}，则请求超时。 
	 * 
	 */
	void start(long timeout);

	/**
	 * Return whether asynchronous request processing has been started.
	 */
	/**
	 * 返回是否已开始异步请求处理。 
	 * 
	 */
	boolean isStarted();

	/**
	 * Mark asynchronous request processing as completed.
	 */
	/**
	 * 将异步请求处理标记为已完成。 
	 * 
	 */
	void complete();

	/**
	 * Return whether asynchronous request processing has been completed.
	 */
	/**
	 * 返回异步请求处理是否已完成。 
	 * 
	 */
	boolean isCompleted();

}
