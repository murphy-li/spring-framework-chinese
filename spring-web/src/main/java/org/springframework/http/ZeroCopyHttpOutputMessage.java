/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.http;

import java.io.File;
import java.nio.file.Path;

import reactor.core.publisher.Mono;

/**
 * Sub-interface of {@code ReactiveOutputMessage} that has support for "zero-copy"
 * file transfers.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 5.0
 * @see <a href="https://en.wikipedia.org/wiki/Zero-copy">Zero-copy</a>
 */
/**
 * {@code  ReactiveOutputMessage}的子接口具有对"零复制"文件传输的支持。 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @从5.0起
 * @see  <a href="https://en.wikipedia.org/wiki/Zero-copy">零复制</a>
 */
public interface ZeroCopyHttpOutputMessage extends ReactiveHttpOutputMessage {

	/**
	 * Use the given {@link File} to write the body of the message to the underlying
	 * HTTP layer.
	 * @param file the file to transfer
	 * @param position the position within the file from which the transfer is to begin
	 * @param count the number of bytes to be transferred
	 * @return a publisher that indicates completion or error.
	 */
	/**
	 * 使用给定的{@link  File}将消息的正文写入基础的HTTP层。 
	 *  
	 * @param 文件要传输的文件
	 * @param 在文件中开始传输的位置
	 * @param 计算要传输的字节数
	 * @return 指示完成或错误的发布者。 
	 * 
	 */
	default Mono<Void> writeWith(File file, long position, long count) {
		return writeWith(file.toPath(), position, count);
	}

	/**
	 * Use the given {@link Path} to write the body of the message to the underlying
	 * HTTP layer.
	 * @param file the file to transfer
	 * @param position the position within the file from which the transfer is to begin
	 * @param count the number of bytes to be transferred
	 * @return a publisher that indicates completion or error.
	 * @since 5.1
	 */
	/**
	 * 使用给定的{@link  Path}将消息的正文写入基础HTTP层。 
	 *  
	 * @param 文件要传输的文件
	 * @param 在文件中开始传输的位置
	 * @param 计算要传输的字节数
	 * @return 指示完成或错误的发布者。 
	 *  @5.1起
	 */
	Mono<Void> writeWith(Path file, long position, long count);

}
