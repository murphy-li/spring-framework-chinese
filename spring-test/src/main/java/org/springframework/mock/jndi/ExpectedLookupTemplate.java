/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.mock.jndi;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.naming.NamingException;

import org.springframework.jndi.JndiTemplate;

/**
 * Simple extension of the JndiTemplate class that always returns a given object.
 *
 * <p>Very useful for testing. Effectively a mock object.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @deprecated Deprecated as of Spring Framework 5.2 in favor of complete solutions from
 * third parties such as <a href="https://github.com/h-thurow/Simple-JNDI">Simple-JNDI</a>
 */
/**
 * JndiTemplate类的简单扩展，该类始终返回给定的对象。 
 *  <p>对测试非常有用。 
 * 有效地是一个模拟对象。 
 *  @author  Rod Johnson @author  Juergen Hoeller @deprecated从Spring Framework 5.2开始不推荐使用，而支持第三方的完整解决方案，例如<a href ="https://github.com/h-thurow/Simple-JNDI ">简单JNDI </a>
 */
@Deprecated
public class ExpectedLookupTemplate extends JndiTemplate {

	private final Map<String, Object> jndiObjects = new ConcurrentHashMap<>(16);


	/**
	 * Construct a new JndiTemplate that will always return given objects for
	 * given names. To be populated through {@code addObject} calls.
	 * @see #addObject(String, Object)
	 */
	/**
	 * 构造一个新的JndiTemplate，它将始终为给定名称返回给定对象。 
	 * 通过{@code  addObject}调用进行填充。 
	 *  
	 * @see  #addObject（字符串，对象）
	 */
	public ExpectedLookupTemplate() {
	}

	/**
	 * Construct a new JndiTemplate that will always return the given object,
	 * but honour only requests for the given name.
	 * @param name the name the client is expected to look up
	 * @param object the object that will be returned
	 */
	/**
	 * 构造一个新的JndiTemplate，它将始终返回给定的对象，但仅接受对给定名称的请求。 
	 *  
	 * @param 名称希望客户端查找的名称
	 * @param 对象将返回的对象
	 */
	public ExpectedLookupTemplate(String name, Object object) {
		addObject(name, object);
	}


	/**
	 * Add the given object to the list of JNDI objects that this template will expose.
	 * @param name the name the client is expected to look up
	 * @param object the object that will be returned
	 */
	/**
	 * 将给定对象添加到此模板将公开的JNDI对象列表中。 
	 *  
	 * @param 名称希望客户端查找的名称
	 * @param 对象将返回的对象
	 */
	public void addObject(String name, Object object) {
		this.jndiObjects.put(name, object);
	}

	/**
	 * If the name is the expected name specified in the constructor, return the
	 * object provided in the constructor. If the name is unexpected, a
	 * respective NamingException gets thrown.
	 */
	/**
	 * 如果名称是构造函数中指定的期望名称，则返回构造函数中提供的对象。 
	 * 如果名称意外，则将抛出相应的NamingException。 
	 * 
	 */
	@Override
	public Object lookup(String name) throws NamingException {
		Object object = this.jndiObjects.get(name);
		if (object == null) {
			throw new NamingException("Unexpected JNDI name '" + name + "': expecting " + this.jndiObjects.keySet());
		}
		return object;
	}

}
