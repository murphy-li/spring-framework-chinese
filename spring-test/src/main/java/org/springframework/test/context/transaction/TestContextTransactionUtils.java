/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.transaction;

import java.util.Map;

import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryUtils;
import org.springframework.beans.factory.ListableBeanFactory;
import org.springframework.lang.Nullable;
import org.springframework.test.context.TestContext;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionManager;
import org.springframework.transaction.annotation.TransactionManagementConfigurer;
import org.springframework.transaction.interceptor.DelegatingTransactionAttribute;
import org.springframework.transaction.interceptor.TransactionAttribute;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.StringUtils;

/**
 * Utility methods for working with transactions and data access related beans
 * within the <em>Spring TestContext Framework</em>.
 *
 * <p>Mainly for internal use within the framework.
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @since 4.1
 */
/**
 * 在<em> Spring TestContext Framework </ em>中用于处理事务和与数据访问相关的bean的实用方法。 
 *  <p>主要供框架内部使用。 
 *  @author  Sam Brannen @author  Juergen Hoeller @始于4.1
 */
public abstract class TestContextTransactionUtils {

	/**
	 * Default bean name for a {@link DataSource}: {@code "dataSource"}.
	 */
	/**
	 * {@link  DataSource}的默认bean名称：{@code "dataSource"}。 
	 * 
	 */
	public static final String DEFAULT_DATA_SOURCE_NAME = "dataSource";

	/**
	 * Default bean name for a {@link PlatformTransactionManager}:
	 * {@code "transactionManager"}.
	 */
	/**
	 * {@link  PlatformTransactionManager}的默认bean名称：{@code "transactionManager"}。 
	 * 
	 */
	public static final String DEFAULT_TRANSACTION_MANAGER_NAME = "transactionManager";


	private static final Log logger = LogFactory.getLog(TestContextTransactionUtils.class);


	/**
	 * Retrieve the {@link DataSource} to use for the supplied {@linkplain TestContext
	 * test context}.
	 * <p>The following algorithm is used to retrieve the {@code DataSource} from
	 * the {@link org.springframework.context.ApplicationContext ApplicationContext}
	 * of the supplied test context:
	 * <ol>
	 * <li>Look up the {@code DataSource} by type and name, if the supplied
	 * {@code name} is non-empty, throwing a {@link BeansException} if the named
	 * {@code DataSource} does not exist.
	 * <li>Attempt to look up the single {@code DataSource} by type.
	 * <li>Attempt to look up the <em>primary</em> {@code DataSource} by type.
	 * <li>Attempt to look up the {@code DataSource} by type and the
	 * {@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}.
	 * </ol>
	 * @param testContext the test context for which the {@code DataSource}
	 * should be retrieved; never {@code null}
	 * @param name the name of the {@code DataSource} to retrieve
	 * (may be {@code null} or <em>empty</em>)
	 * @return the {@code DataSource} to use, or {@code null} if not found
	 * @throws BeansException if an error occurs while retrieving an explicitly
	 * named {@code DataSource}
	 */
	/**
	 * 检索{@link 数据源}以用于提供的{@link  plain TestContext测试上下文}。 
	 *  <p>以下算法用于从提供的测试上下文的{@link  org.springframework.context.ApplicationContext ApplicationContext}中检索{@code  DataSource}：<ol> <li>查找{如果提供的{@code  name}是非空的，则按类型和名称表示@code  DataSource}，如果命名的{@code  DataSource}不存在，则抛出{@link  BeansException}。 
	 *  <li>尝试按类型查找单个{@code  DataSource}。 
	 *  <li>尝试按类型查找<em>主要</ em> {@code 数据源}。 
	 *  <li>尝试按类型和{@link  plain #DEFAULT_DATA_SOURCE_NAME默认数据源名称}查找{@code  DataSource}。 
	 *  </ ol> 
	 * @param  testContext测试环境，应为其获取{@code  DataSource}； 
	 * 从不{@code  null} 
	 * @param 命名要检索的{@code  DataSource}的名称（可以是{@code  null}或<em> empty </ em>）
	 * @return  {@code  DataSource}使用，如果找不到，则返回{@code  null} 
	 * @throws  BeansException如果在检索显式命名的{@code  DataSource}时发生错误
	 */
	@Nullable
	public static DataSource retrieveDataSource(TestContext testContext, @Nullable String name) {
		Assert.notNull(testContext, "TestContext must not be null");
		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();

		try {
			// Look up by type and explicit name
			if (StringUtils.hasText(name)) {
				return bf.getBean(name, DataSource.class);
			}
		}
		catch (BeansException ex) {
			logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s",
					name, testContext), ex);
			throw ex;
		}

		try {
			if (bf instanceof ListableBeanFactory) {
				ListableBeanFactory lbf = (ListableBeanFactory) bf;

				// Look up single bean by type
				Map<String, DataSource> dataSources =
						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, DataSource.class);
				if (dataSources.size() == 1) {
					return dataSources.values().iterator().next();
				}

				try {
					// look up single bean by type, with support for 'primary' beans
					return bf.getBean(DataSource.class);
				}
				catch (BeansException ex) {
					logBeansException(testContext, ex, PlatformTransactionManager.class);
				}
			}

			// look up by type and default name
			return bf.getBean(DEFAULT_DATA_SOURCE_NAME, DataSource.class);
		}
		catch (BeansException ex) {
			logBeansException(testContext, ex, DataSource.class);
			return null;
		}
	}

	/**
	 * Retrieve the {@linkplain PlatformTransactionManager transaction manager}
	 * to use for the supplied {@linkplain TestContext test context}.
	 * <p>The following algorithm is used to retrieve the transaction manager
	 * from the {@link org.springframework.context.ApplicationContext ApplicationContext}
	 * of the supplied test context:
	 * <ol>
	 * <li>Look up the transaction manager by type and explicit name, if the supplied
	 * {@code name} is non-empty, throwing a {@link BeansException} if the named
	 * transaction manager does not exist.
	 * <li>Attempt to look up the single transaction manager by type.
	 * <li>Attempt to look up the <em>primary</em> transaction manager by type.
	 * <li>Attempt to look up the transaction manager via a
	 * {@link TransactionManagementConfigurer}, if present.
	 * <li>Attempt to look up the transaction manager by type and the
	 * {@linkplain #DEFAULT_TRANSACTION_MANAGER_NAME default transaction manager
	 * name}.
	 * </ol>
	 * @param testContext the test context for which the transaction manager
	 * should be retrieved; never {@code null}
	 * @param name the name of the transaction manager to retrieve
	 * (may be {@code null} or <em>empty</em>)
	 * @return the transaction manager to use, or {@code null} if not found
	 * @throws BeansException if an error occurs while retrieving an explicitly
	 * named transaction manager
	 * @throws IllegalStateException if more than one TransactionManagementConfigurer
	 * exists in the ApplicationContext
	 */
	/**
	 * 检索{@link  plain PlatformTransactionManager事务管理器}，以用于提供的{@link  plain TestContext测试上下文}。 
	 *  <p>以下算法用于从提供的测试上下文的{@link  org.springframework.context.ApplicationContext ApplicationContext}中检索事务管理器：<ol> <li>按类型和显式查找事务管理器名称，如果提供的{@code 名称}是非空的，如果指定的事务管理器不存在，则抛出{@link  BeansException}。 
	 *  <li>尝试按类型查找单个事务管理器。 
	 *  <li>尝试按类型查找<em>主要</ em>事务管理器。 
	 *  <li>尝试通过{@link  TransactionManagementConfigurer}查找事务管理器（如果存在）。 
	 *  <li>尝试按类型和{@link  plain #DEFAULT_TRANSACTION_MANAGER_NAME默认事务管理器名称}查找事务管理器。 
	 *  </ ol> 
	 * @param  testContext应为其获取事务管理器的测试上下文； 
	 * 从不{@code  null} 
	 * @param 命名要检索的事务管理器的名称（可以是{@code  null}或<em> empty </ em>）
	 * @return 要使用的事务管理器，如果找不到，则返回{@code  null} 
	 * @throws  BeansException，如果在ApplicationContext中存在多个TransactionManagementConfigurer时，在检索显式命名的事务管理器
	 * @throws  IllegalStateException时发生错误
	 */
	@Nullable
	public static PlatformTransactionManager retrieveTransactionManager(TestContext testContext, @Nullable String name) {
		Assert.notNull(testContext, "TestContext must not be null");
		BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();

		try {
			// Look up by type and explicit name
			if (StringUtils.hasText(name)) {
				return bf.getBean(name, PlatformTransactionManager.class);
			}
		}
		catch (BeansException ex) {
			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s",
					name, testContext), ex);
			throw ex;
		}

		try {
			if (bf instanceof ListableBeanFactory) {
				ListableBeanFactory lbf = (ListableBeanFactory) bf;

				// Look up single bean by type
				Map<String, PlatformTransactionManager> txMgrs =
						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, PlatformTransactionManager.class);
				if (txMgrs.size() == 1) {
					return txMgrs.values().iterator().next();
				}

				try {
					// Look up single bean by type, with support for 'primary' beans
					return bf.getBean(PlatformTransactionManager.class);
				}
				catch (BeansException ex) {
					logBeansException(testContext, ex, PlatformTransactionManager.class);
				}

				// Look up single TransactionManagementConfigurer
				Map<String, TransactionManagementConfigurer> configurers =
						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, TransactionManagementConfigurer.class);
				Assert.state(configurers.size() <= 1,
						"Only one TransactionManagementConfigurer may exist in the ApplicationContext");
				if (configurers.size() == 1) {
					TransactionManager tm = configurers.values().iterator().next().annotationDrivenTransactionManager();
					if (tm instanceof PlatformTransactionManager) {
						return (PlatformTransactionManager) tm;
					}
					else {
						throw new IllegalStateException(
								"Specified transaction manager is not a PlatformTransactionManager: " + tm);
					}
				}
			}

			// look up by type and default name
			return bf.getBean(DEFAULT_TRANSACTION_MANAGER_NAME, PlatformTransactionManager.class);
		}
		catch (BeansException ex) {
			logBeansException(testContext, ex, PlatformTransactionManager.class);
			return null;
		}
	}

	private static void logBeansException(TestContext testContext, BeansException ex, Class<?> beanType) {
		if (logger.isDebugEnabled()) {
			logger.debug(String.format("Caught exception while retrieving %s for test context %s",
				beanType.getSimpleName(), testContext), ex);
		}
	}

	/**
	 * Create a delegating {@link TransactionAttribute} for the supplied target
	 * {@link TransactionAttribute} and {@link TestContext}, using the names of
	 * the test class and test method to build the name of the transaction.
	 * @param testContext the {@code TestContext} upon which to base the name
	 * @param targetAttribute the {@code TransactionAttribute} to delegate to
	 * @return the delegating {@code TransactionAttribute}
	 */
	/**
	 * 使用测试类的名称和测试方法来建立事务的名称，为提供的目标{@link  TransactionAttribute}和{@link  TestContext}创建一个委托{@link  TransactionAttribute}。 
	 *  
	 * @param  testContext {@code  TestContext}作为名称
	 * @param  targetAttribute的基础，{@code  TransactionAttribute}委托给委托的<< return> {@code  TransactionAttribute}
	 */
	public static TransactionAttribute createDelegatingTransactionAttribute(
			TestContext testContext, TransactionAttribute targetAttribute) {

		Assert.notNull(testContext, "TestContext must not be null");
		Assert.notNull(targetAttribute, "Target TransactionAttribute must not be null");
		return new TestContextTransactionAttribute(targetAttribute, testContext);
	}


	@SuppressWarnings("serial")
	private static class TestContextTransactionAttribute extends DelegatingTransactionAttribute {

		private final String name;

		public TestContextTransactionAttribute(TransactionAttribute targetAttribute, TestContext testContext) {
			super(targetAttribute);
			this.name = ClassUtils.getQualifiedMethodName(testContext.getTestMethod(), testContext.getTestClass());
		}

		@Override
		@Nullable
		public String getName() {
			return this.name;
		}
	}

}
