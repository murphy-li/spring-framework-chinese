/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import org.springframework.context.ApplicationContext;

/**
 * Strategy interface for loading an {@link ApplicationContext application context}
 * for an integration test managed by the Spring TestContext Framework.
 *
 * <p>The {@code SmartContextLoader} SPI supersedes the {@link ContextLoader} SPI
 * introduced in Spring 2.5: a {@code SmartContextLoader} can choose to process
 * either resource locations or annotated classes. Furthermore, a
 * {@code SmartContextLoader} can set active bean definition profiles in the
 * context that it loads (see {@link MergedContextConfiguration#getActiveProfiles()}
 * and {@link #loadContext(MergedContextConfiguration)}).
 *
 * <p>See the Javadoc for {@link ContextConfiguration @ContextConfiguration}
 * for a definition of <em>annotated class</em>.
 *
 * <p>Clients of a {@code SmartContextLoader} should call
 * {@link #processContextConfiguration(ContextConfigurationAttributes)
 * processContextConfiguration()} prior to calling
 * {@link #loadContext(MergedContextConfiguration) loadContext()}. This gives a
 * {@code SmartContextLoader} the opportunity to provide custom support for
 * modifying resource locations or detecting default resource locations or
 * default configuration classes. The results of
 * {@link #processContextConfiguration(ContextConfigurationAttributes)
 * processContextConfiguration()} should be merged for all classes in the
 * hierarchy of the root test class and then supplied to
 * {@link #loadContext(MergedContextConfiguration) loadContext()}.
 *
 * <p>Even though {@code SmartContextLoader} extends {@code ContextLoader},
 * clients should favor {@code SmartContextLoader}-specific methods over those
 * defined in {@code ContextLoader}, particularly because a
 * {@code SmartContextLoader} may choose not to support methods defined in the
 * {@code ContextLoader} SPI.
 *
 * <p>Concrete implementations must provide a {@code public} no-args constructor.
 *
 * <p>Spring provides the following out-of-the-box implementations:
 * <ul>
 * <li>{@link org.springframework.test.context.support.DelegatingSmartContextLoader DelegatingSmartContextLoader}</li>
 * <li>{@link org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader}</li>
 * <li>{@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader}</li>
 * <li>{@link org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader}</li>
 * <li>{@link org.springframework.test.context.web.WebDelegatingSmartContextLoader WebDelegatingSmartContextLoader}</li>
 * <li>{@link org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader}</li>
 * <li>{@link org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader}</li>
 * </ul>
 *
 * @author Sam Brannen
 * @since 3.1
 * @see ContextConfiguration
 * @see ActiveProfiles
 * @see ContextConfigurationAttributes
 * @see MergedContextConfiguration
 */
/**
 * 用于为Spring TestContext Framework管理的集成测试加载{@link  ApplicationContext应用程序上下文}的策略接口。 
 *  <p> {<@code> SmartContextLoader} SPI取代了Spring 2.5中引入的{@link  ContextLoader} SPI：{@code  SmartContextLoader}可以选择处理资源位置或带注释的类。 
 * 此外，{<@code> SmartContextLoader}可以在其加载的上下文中设置活动的Bean定义配置文件（请参见{@link  MergedContextConfiguration＃getActiveProfiles（）}和{@link  #loadContext（MergedContextConfiguration）}）。 
 *  <p>请参阅Java文档{@link  ContextConfiguration @ContextConfiguration}，以获取<em>带注释的类</ em>的定义。 
 *  <p> {<@code> SmartContextLoader}的客户端应在调用{@link  #loadContext（MergedContextConfiguration）loadContext（）}之前调用{@link  #processContextConfiguration（ContextConfigurationAttributes）processContextConfiguration（）}。 
 * 这为{@code  SmartContextLoader}提供了提供自定义支持的机会，以修改资源位置或检测默认资源位置或默认配置类。 
 * 对于根测试类的层次结构中的所有类，应合并{@link  #processContextConfiguration（ContextConfigurationAttributes）processContextConfiguration（）}的结果，然后将其提供给{@link  #loadContext（MergedContextConfiguration）loadContext（）}。 
 *  <p>即使{@code  SmartContextLoader}扩展了{@code  ContextLoader}，客户端也应优先使用{@code  SmartContextLoader}特定的方法，而不是{@code  ContextLoader}中定义的方法，尤其是因为{ @code  SmartContextLoader}可以选择不支持{@code  ContextLoader} SPI中定义的方法。 
 *  <p>具体实现必须提供一个{@code  public}无参数构造函数。 
 *  <p> Spring提供了以下现成的实现：<ul> <li> {<@link> org.springframework.test.context.support.DelegatingSmartContextLoader DelegatingSmartContextLoader} </ li> <li> {<@链接> org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader} </ li> <li> {<@link> org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader} </ li> <li> {<@链接> org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader} </ li> <li> {<@link> org.springframework.test.context.web.Web.WebDelegatingSmartContextLoader WebDelegatingSmartContextLoader} </ li> <li> {<@链接> org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader} </ li> <li> {<@link> org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader} </ li> </ ul> </ ul>作者> Sam Brannen @since 3.1 
 * @see  ContextConfiguration 
 * @see  ActiveProfiles 
 * @see  ContextConfig urationAttributes 
 * @see  MergedContextConfiguration
 */
public interface SmartContextLoader extends ContextLoader {

	/**
	 * Processes the {@link ContextConfigurationAttributes} for a given test class.
	 * <p>Concrete implementations may choose to <em>modify</em> the {@code locations}
	 * or {@code classes} in the supplied {@link ContextConfigurationAttributes},
	 * <em>generate</em> default configuration locations, or <em>detect</em>
	 * default configuration classes if the supplied values are {@code null}
	 * or empty.
	 * <p><b>Note</b>: in contrast to a standard {@code ContextLoader}, a
	 * {@code SmartContextLoader} <b>must</b> <em>preemptively</em> verify that
	 * a generated or detected default actually exists before setting the corresponding
	 * {@code locations} or {@code classes} property in the supplied
	 * {@link ContextConfigurationAttributes}. Consequently, leaving the
	 * {@code locations} or {@code classes} property empty signals that
	 * this {@code SmartContextLoader} was not able to generate or detect defaults.
	 * @param configAttributes the context configuration attributes to process
	 */
	/**
	 * 处理给定测试类的{@link  ContextConfigurationAttributes}。 
	 *  <p>具体实现可以选择对提供的{@link  ContextConfigurationAttributes}中的{@code 位置}或{@code 类}进行<em>修改</ em>，<em>生成</ em >默认配置位置，或者如果提供的值为{@code  null}或为空，则<em> detect </ em>默认配置类。 
	 *  <p> <b>注意</ b>：与标准{@code  ContextLoader}相比，{<@code> SmartContextLoader} <b>必须</ b> <em>先行</ em>验证在提供的{@link  ContextConfigurationAttributes}中设置相应的{@code 位置}或{@code 类}属性之前，实际上已经存在生成或检测到的默认值。 
	 * 因此，将{@code 位置}或{@code 类}属性留空表示此{@code  SmartContextLoader}无法生成或检测默认值。 
	 *  
	 * @param  configAttributes要处理的上下文配置属性
	 */
	void processContextConfiguration(ContextConfigurationAttributes configAttributes);

	/**
	 * Loads a new {@link ApplicationContext context} based on the supplied
	 * {@link MergedContextConfiguration merged context configuration},
	 * configures the context, and finally returns the context in a fully
	 * <em>refreshed</em> state.
	 * <p>Concrete implementations should register annotation configuration
	 * processors with bean factories of
	 * {@link ApplicationContext application contexts} loaded by this
	 * {@code SmartContextLoader}. Beans will therefore automatically be
	 * candidates for annotation-based dependency injection using
	 * {@link org.springframework.beans.factory.annotation.Autowired @Autowired},
	 * {@link javax.annotation.Resource @Resource}, and
	 * {@link javax.inject.Inject @Inject}. In addition, concrete implementations
	 * should set the active bean definition profiles in the context's
	 * {@link org.springframework.core.env.Environment Environment}.
	 * <p>Any {@code ApplicationContext} loaded by a
	 * {@code SmartContextLoader} <strong>must</strong> register a JVM
	 * shutdown hook for itself. Unless the context gets closed early, all context
	 * instances will be automatically closed on JVM shutdown. This allows for
	 * freeing of external resources held by beans within the context (e.g.,
	 * temporary files).
	 * @param mergedConfig the merged context configuration to use to load the
	 * application context
	 * @return a new application context
	 * @throws Exception if context loading failed
	 * @see #processContextConfiguration(ContextConfigurationAttributes)
	 * @see org.springframework.context.annotation.AnnotationConfigUtils
	 * #registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry)
	 * @see MergedContextConfiguration#getActiveProfiles()
	 * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment()
	 */
	/**
	 * 根据提供的{@link  MergedContextConfiguration合并上下文配置}加载新的{@link  ApplicationContext上下文}，配置上下文，最后以完全<em> refreshed </ em>状态返回上下文。 
	 *  <p>具体实现应在此{@code  SmartContextLoader}加载的{@link  ApplicationContext应用程序上下文}的bean工厂中注册注释配置处理器。 
	 * 因此，使用{@link  org.springframework.beans.factory.annotation.Autowired @Autowired}，{<@link> javax.annotation.Resource @Resource}和{@link  javax.inject.Inject @Inject}。 
	 * 另外，具体的实现应在上下文的{@link  org.springframework.core.env.Environment Environment}中设置活动bean定义配置文件。 
	 *  <p>由{@code  SmartContextLoader}加载的任何{@code  ApplicationContext} <strong>必须</ strong>为自己注册一个JVM关闭钩子。 
	 * 除非上下文提前关闭，否则所有上下文实例将在JVM关闭时自动关闭。 
	 * 这允许释放由上下文中的bean所持有的外部资源（例如临时文件）。 
	 *  
	 * @param  mergedConfig用于加载应用程序上下文的合并上下文配置
	 * @return 新的应用程序上下文
	 * @throws 如果上下文加载失败，则异常
	 * @see  #processContextConfiguration（ContextConfigurationAttributes）
	 * @see  org.springframework。 
	 *  context.annotation.AnnotationConfigUtils #registerAnnotationConfigProcessors（org.springframework.beans.factory.support.BeanDefinitionRegistry）
	 * @see  MergedContextConfiguration＃getActiveProfiles（）
	 * @see  org.springframework.context.ConfigurableApplicationContext＃getEnvironment（）
	 */
	ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception;

}
