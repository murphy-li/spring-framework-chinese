/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.function.Function;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEvent;
import org.springframework.core.AttributeAccessor;
import org.springframework.lang.Nullable;
import org.springframework.test.annotation.DirtiesContext.HierarchyMode;

/**
 * {@code TestContext} encapsulates the context in which a test is executed,
 * agnostic of the actual testing framework in use.
 *
 * <p>As of Spring Framework 5.0, concrete implementations are highly encouraged
 * to implement a <em>copy constructor</em> in order to allow the immutable state
 * and attributes of a {@code TestContext} to be used as a template for additional
 * contexts created for parallel test execution. The copy constructor must accept a
 * single argument of the type of the concrete implementation. Any implementation
 * that does not provide a copy constructor will likely fail in an environment
 * that executes tests concurrently.
 *
 * @author Sam Brannen
 * @since 2.5
 * @see TestContextManager
 * @see TestExecutionListener
 */
/**
 * {@code  TestContext}封装了在其中执行测试的上下文，而与使用的实际测试框架无关。 
 *  <p>从Spring Framework 5.0开始，强烈鼓励具体实现实现<em> copy构造器</ em>，以允许将{@code  TestContext}的不可变状态和属性用作模板。 
 * 为并行测试执行创建的其他上下文。 
 * 复制构造函数必须接受具体实现类型的单个参数。 
 * 任何不提供复制构造函数的实现都可能在同时执行测试的环境中失败。 
 *  @author  Sam Brannen @从2.5开始
 * @see  TestContextManager 
 * @see  TestExecutionListener
 */
// Suppression required due to bug in javac in Java 8: presence of default method in a Serializable interface
@SuppressWarnings("serial")
public interface TestContext extends AttributeAccessor, Serializable {

	/**
	 * Determine if the {@linkplain ApplicationContext application context} for
	 * this test context is known to be available.
	 * <p>If this method returns {@code true}, a subsequent invocation of
	 * {@link #getApplicationContext()} should succeed.
	 * <p>The default implementation of this method always returns {@code false}.
	 * Custom {@code TestContext} implementations are therefore highly encouraged
	 * to override this method with a more meaningful implementation. Note that
	 * the standard {@code TestContext} implementation in Spring overrides this
	 * method appropriately.
	 * @return {@code true} if the application context has already been loaded
	 * @since 5.2
	 * @see #getApplicationContext()
	 */
	/**
	 * 确定此测试上下文的{@link  plain ApplicationContext应用程序上下文}是否已知。 
	 *  <p>如果此方法返回{@code  true}，则后续的{@link  #getApplicationContext（）}调用将成功。 
	 *  <p>此方法的默认实现始终返回{@code  false}。 
	 * 因此，强烈建议自定义{@code  TestContext}实现，以更有意义的实现覆盖此方法。 
	 * 请注意，Spring中的标准{@code  TestContext}实现适当地重写了此方法。 
	 *  
	 * @return  {@code  true}，如果自5.2起已经加载了应用程序上下文
	 * @see  #getApplicationContext（）
	 */
	default boolean hasApplicationContext() {
		return false;
	}

	/**
	 * Get the {@linkplain ApplicationContext application context} for this
	 * test context, possibly cached.
	 * <p>Implementations of this method are responsible for loading the
	 * application context if the corresponding context has not already been
	 * loaded, potentially caching the context as well.
	 * @return the application context (never {@code null})
	 * @throws IllegalStateException if an error occurs while retrieving the
	 * application context
	 * @see #hasApplicationContext()
	 */
	/**
	 * 获取此测试上下文的{@link  plain ApplicationContext应用程序上下文}，可能已缓存。 
	 *  <p>如果尚未加载相应的上下文，则此方法的实现负责加载应用程序上下文，并可能还会缓存该上下文。 
	 *  
	 * @return 应用程序上下文（绝不{<@@code> null}）
	 * @throws 如果在检索应用程序上下文时发生错误，则抛出IllegalStateException 
	 * @see  #hasApplicationContext（）
	 */
	ApplicationContext getApplicationContext();

	/**
	 * Publish the {@link ApplicationEvent} created by the given {@code eventFactory}
	 * to the {@linkplain ApplicationContext application context} for this
	 * test context.
	 * <p>The {@code ApplicationEvent} will only be published if the application
	 * context for this test context {@linkplain #hasApplicationContext() is available}.
	 * @param eventFactory factory for lazy creation of the {@code ApplicationEvent}
	 * @since 5.2
	 * @see #hasApplicationContext()
	 * @see #getApplicationContext()
	 */
	/**
	 * 将由给定的{@code  eventFactory}创建的{@link  ApplicationEvent}发布到此测试上下文的{@link  plain ApplicationContext应用程序上下文}。 
	 *  <p>只有在此测试上下文{@link  plain #hasApplicationContext（）可用的应用程序上下文）可用的情况下，{<@code> ApplicationEvent}才会发布。 
	 *  
	 * @param  eventFactory工厂，用于从5.2开始懒创建{@code  ApplicationEvent} @
	 * @see  #hasApplicationContext（）
	 * @see  #getApplicationContext（）
	 */
	default void publishEvent(Function<TestContext, ? extends ApplicationEvent> eventFactory) {
		if (hasApplicationContext()) {
			getApplicationContext().publishEvent(eventFactory.apply(this));
		}
	}

	/**
	 * Get the {@linkplain Class test class} for this test context.
	 * @return the test class (never {@code null})
	 */
	/**
	 * 获取此测试上下文的{@link  plain Class test class}。 
	 *  
	 * @return 测试类（绝不{@code  null}）
	 */
	Class<?> getTestClass();

	/**
	 * Get the current {@linkplain Object test instance} for this test context.
	 * <p>Note: this is a mutable property.
	 * @return the current test instance (never {@code null})
	 * @see #updateState(Object, Method, Throwable)
	 */
	/**
	 * 获取此测试上下文的当前{@link  plain Object测试实例}。 
	 *  <p>注意：这是一个可变属性。 
	 *  
	 * @return 当前测试实例（绝不{<@@code> null}）
	 * @see  #updateState（Object，Method，Throwable）
	 */
	Object getTestInstance();

	/**
	 * Get the current {@linkplain Method test method} for this test context.
	 * <p>Note: this is a mutable property.
	 * @return the current test method (never {@code null})
	 * @see #updateState(Object, Method, Throwable)
	 */
	/**
	 * 获取此测试上下文的当前{@link  plain方法测试方法}。 
	 *  <p>注意：这是一个可变属性。 
	 *  
	 * @return 当前测试方法（决不{<@@code> null}）
	 * @see  #updateState（Object，Method，Throwable）
	 */
	Method getTestMethod();

	/**
	 * Get the {@linkplain Throwable exception} that was thrown during execution
	 * of the {@linkplain #getTestMethod() test method}.
	 * <p>Note: this is a mutable property.
	 * @return the exception that was thrown, or {@code null} if no exception was thrown
	 * @see #updateState(Object, Method, Throwable)
	 */
	/**
	 * 获取在执行{@link  plain #getTestMethod（）测试方法}期间引发的{@link  plain Throwable异常}。 
	 *  <p>注意：这是一个可变属性。 
	 *  
	 * @return 引发的异常，如果没有引发异常，则返回{@code  null} 
	 * @see  #updateState（Object，Method，Throwable）
	 */
	@Nullable
	Throwable getTestException();

	/**
	 * Call this method to signal that the {@linkplain ApplicationContext application
	 * context} associated with this test context is <em>dirty</em> and should be
	 * removed from the context cache.
	 * <p>Do this if a test has modified the context &mdash; for example, by
	 * modifying the state of a singleton bean, modifying the state of an embedded
	 * database, etc.
	 * @param hierarchyMode the context cache clearing mode to be applied if the
	 * context is part of a hierarchy (may be {@code null})
	 */
	/**
	 * 调用此方法以表示与此测试上下文关联的{@link  plain ApplicationContext应用程序上下文}为<em> dirty </ em>，应将其从上下文缓存中删除。 
	 *  <p>如果测试已修改了上下文，请执行此操作，例如，通过修改单例bean的状态，修改嵌入式数据库的状态等。 
	 * 
	 * @param  architectureMode如果要更改上下文，将应用上下文缓存清除模式上下文是层次结构的一部分（可以为{@code  null}）
	 */
	void markApplicationContextDirty(@Nullable HierarchyMode hierarchyMode);

	/**
	 * Update this test context to reflect the state of the currently executing test.
	 * <p><strong>WARNING</strong>: This method should only be invoked by the
	 * {@link TestContextManager}.
	 * <p>Caution: concurrent invocations of this method might not be thread-safe,
	 * depending on the underlying implementation.
	 * @param testInstance the current test instance (may be {@code null})
	 * @param testMethod the current test method (may be {@code null})
	 * @param testException the exception that was thrown in the test method,
	 * or {@code null} if no exception was thrown
	 */
	/**
	 * 更新此测试上下文以反映当前正在执行的测试的状态。 
	 *  <p> <strong>警告</ strong>：此方法只能由{@link  TestContextManager}调用。 
	 *  <p>警告：此方法的并发调用可能不是线程安全的，具体取决于基础实现。 
	 *  
	 * @param  testInstance当前测试实例（可以为{@code  null}）
	 * @param  testMethod当前测试方法（可以为{@code  null}）
	 * @param  testException引发的异常在测试方法中； 
	 * 如果未引发任何异常，则返回{@code  null}
	 */
	void updateState(@Nullable Object testInstance, @Nullable Method testMethod, @Nullable Throwable testException);

}
