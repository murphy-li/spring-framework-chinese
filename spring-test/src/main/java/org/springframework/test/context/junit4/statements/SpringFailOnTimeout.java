/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import java.lang.reflect.Method;
import java.util.concurrent.TimeoutException;

import org.junit.runners.model.Statement;

import org.springframework.test.annotation.TestAnnotationUtils;
import org.springframework.util.Assert;

/**
 * {@code SpringFailOnTimeout} is a custom JUnit {@link Statement} which adds
 * support for Spring's {@link org.springframework.test.annotation.Timed @Timed}
 * annotation by throwing an exception if the next statement in the execution
 * chain takes more than the specified number of milliseconds.
 *
 * <p>In contrast to JUnit's
 * {@link org.junit.internal.runners.statements.FailOnTimeout FailOnTimeout},
 * the next {@code statement} will be executed in the same thread as the
 * caller and will therefore not be aborted preemptively.
 *
 * @author Sam Brannen
 * @since 3.0
 * @see #evaluate()
 */
/**
 * {@code  SpringFailOnTimeout}是一个自定义的JUnit {@link 语句}，它添加了对Spring的{@link  org.springframework.test.annotation.Timed @Timed}注释的支持，如果在其中的下一条语句抛出异常执行链花费的时间超过了指定的毫秒数。 
 *  <p>与JUnit的{@link  org.junit.internal.runners.statements.FailOnTimeout FailOnTimeout}相比，下一个{@code 语句}将在与调用方相同的线程中执行，因此不会抢先中止。 
 *  @author  Sam Brannen @从3.0开始
 * @see  #evaluate（）
 */
public class SpringFailOnTimeout extends Statement {

	private final Statement next;

	private final long timeout;


	/**
	 * Construct a new {@code SpringFailOnTimeout} statement for the supplied
	 * {@code testMethod}, retrieving the configured timeout from the
	 * {@code @Timed} annotation on the supplied method.
	 * @param next the next {@code Statement} in the execution chain
	 * @param testMethod the current test method
	 * @see TestAnnotationUtils#getTimeout(Method)
	 */
	/**
	 * 为提供的{@code  testMethod}构造一个新的{@code  SpringFailOnTimeout}语句，从提供的方法上的{@code  @Timed}注解中检索配置的超时。 
	 *  
	 * @param 执行链中下一个{@code 语句}的下一个
	 * @param  testMethod当前测试方法
	 * @see  TestAnnotationUtils＃getTimeout（Method）
	 */
	public SpringFailOnTimeout(Statement next, Method testMethod) {
		this(next, TestAnnotationUtils.getTimeout(testMethod));
	}

	/**
	 * Construct a new {@code SpringFailOnTimeout} statement for the supplied
	 * {@code timeout}.
	 * <p>If the supplied {@code timeout} is {@code 0}, the execution of the
	 * {@code next} statement will not be timed.
	 * @param next the next {@code Statement} in the execution chain; never {@code null}
	 * @param timeout the configured {@code timeout} for the current test, in milliseconds;
	 * never negative
	 */
	/**
	 * 为提供的{@code 超时}构造一个新的{@code  SpringFailOnTimeout}语句。 
	 *  <p>如果提供的{@code 超时}为{@code  0}，则不会定时执行{@code  next}语句。 
	 *  
	 * @param 在执行链中的下一个{@code 语句}之后； 
	 * 从不{@code  null} 
	 * @param 超时为当前测试配置的{@code 超时}，以毫秒为单位； 
	 * 永不消极
	 */
	public SpringFailOnTimeout(Statement next, long timeout) {
		Assert.notNull(next, "next statement must not be null");
		Assert.isTrue(timeout >= 0, "timeout must be non-negative");
		this.next = next;
		this.timeout = timeout;
	}


	/**
	 * Evaluate the next {@link Statement statement} in the execution chain
	 * (typically an instance of {@link SpringRepeat}) and throw a
	 * {@link TimeoutException} if the next {@code statement} executes longer
	 * than the specified {@code timeout}.
	 */
	/**
	 * 评估执行链中的下一个{@link  Statement语句}（通常是{@link  SpringRepeat}的实例），如果下一个{@code 语句}执行的时间更长，则抛出{@link  TimeoutException}超过指定的{@code 超时}。 
	 * 
	 */
	@Override
	public void evaluate() throws Throwable {
		if (this.timeout == 0) {
			this.next.evaluate();
		}
		else {
			long startTime = System.currentTimeMillis();
			this.next.evaluate();
			long elapsed = System.currentTimeMillis() - startTime;
			if (elapsed > this.timeout) {
				throw new TimeoutException(
						String.format("Test took %s ms; limit was %s ms.", elapsed, this.timeout));
			}
		}
	}

}
