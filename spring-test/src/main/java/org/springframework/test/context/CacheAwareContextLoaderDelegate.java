/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.lang.Nullable;
import org.springframework.test.annotation.DirtiesContext.HierarchyMode;

/**
 * A {@code CacheAwareContextLoaderDelegate} is responsible for {@linkplain
 * #loadContext loading} and {@linkplain #closeContext closing} application
 * contexts, interacting transparently with a
 * {@link org.springframework.test.context.cache.ContextCache ContextCache}
 * behind the scenes.
 *
 * <p>Note: {@code CacheAwareContextLoaderDelegate} does not extend the
 * {@link ContextLoader} or {@link SmartContextLoader} interface.
 *
 * @author Sam Brannen
 * @since 3.2.2
 */
/**
 * {{@code> CacheAwareContextLoaderDelegate}负责{@link  plain #loadContext加载}和{@link  plain #closeContext关闭}应用程序上下文，它们与{@link  org.springframework.test透明地交互。 
 *  context.cache.ContextCache ContextCache}在幕后。 
 *  <p>注意：{@code  CacheAwareContextLoaderDelegate}不会扩展{@link  ContextLoader}或{@link  SmartContextLoader}接口。 
 *  @author  Sam Brannen @自3.2.2起
 */
public interface CacheAwareContextLoaderDelegate {

	/**
	 * Determine if the {@linkplain ApplicationContext application context} for
	 * the supplied {@link MergedContextConfiguration} has been loaded (i.e.,
	 * is present in the {@code ContextCache}).
	 * <p>Implementations of this method <strong>must not</strong> load the
	 * application context as a side effect. In addition, implementations of
	 * this method should not log the cache statistics via
	 * {@link org.springframework.test.context.cache.ContextCache#logStatistics()}.
	 * <p>The default implementation of this method always returns {@code false}.
	 * Custom {@code CacheAwareContextLoaderDelegate} implementations are
	 * therefore highly encouraged to override this method with a more meaningful
	 * implementation. Note that the standard {@code CacheAwareContextLoaderDelegate}
	 * implementation in Spring overrides this method appropriately.
	 * @param mergedContextConfiguration the merged context configuration used
	 * to load the application context; never {@code null}
	 * @return {@code true} if the the application context has been loaded
	 * @since 5.2
	 * @see #loadContext
	 * @see #closeContext
	 */
	/**
	 * 确定是否已加载提供的{@link  MergedContextConfiguration}的{@link  plain ApplicationContext应用程序上下文}（即{@code  ContextCache}中存在）。 
	 *  <p>此方法的实现<strong>不得</ strong>加载应用程序上下文，这是一个副作用。 
	 * 另外，此方法的实现不应通过{@link  org.springframework.test.context.cache.ContextCache＃logStatistics（）}记录缓存统计信息。 
	 *  <p>此方法的默认实现始终返回{@code  false}。 
	 * 因此，强烈建议自定义{@code  CacheAwareContextLoaderDelegate}实现，以更有意义的实现覆盖此方法。 
	 * 请注意，Spring中的标准{@code  CacheAwareContextLoaderDelegate}实现会适当地覆盖此方法。 
	 *  
	 * @param  mergedContextConfiguration用于加载应用程序上下文的合并上下文配置； 
	 * 如果从5.2开始，一直未加载应用程序上下文，则从不{@code  null} 
	 * @return  {@code  true} 
	 * @see  #loadContext 
	 * @see  #closeContext
	 */
	default boolean isContextLoaded(MergedContextConfiguration mergedContextConfiguration) {
		return false;
	}

	/**
	 * Load the {@linkplain ApplicationContext application context} for the supplied
	 * {@link MergedContextConfiguration} by delegating to the {@link ContextLoader}
	 * configured in the given {@code MergedContextConfiguration}.
	 * <p>If the context is present in the {@code ContextCache} it will simply
	 * be returned; otherwise, it will be loaded, stored in the cache, and returned.
	 * <p>The cache statistics should be logged by invoking
	 * {@link org.springframework.test.context.cache.ContextCache#logStatistics()}.
	 * @param mergedContextConfiguration the merged context configuration to use
	 * to load the application context; never {@code null}
	 * @return the application context (never {@code null})
	 * @throws IllegalStateException if an error occurs while retrieving or loading
	 * the application context
	 * @see #isContextLoaded
	 * @see #closeContext
	 */
	/**
	 * 通过委派给在给定{@code  MergedContextConfiguration}中配置的{@link  ContextLoader}，为提供的{@link  MergedContextConfiguration}加载{@link  plain ApplicationContext应用程序上下文}。 
	 *  <p>如果上下文存在于{@code  ContextCache}中，它将被简单地返回； 
	 * 否则，它将被加载，存储在缓存中并返回。 
	 *  <p>应通过调用{@link  org.springframework.test.context.cache.ContextCache＃logStatistics（）}来记录缓存统计信息。 
	 *  
	 * @param  mergedContextConfiguration用于加载应用程序上下文的合并上下文配置； 
	 * 从不{@code  null} 
	 * @return 应用程序上下文（从不{@code  null}）
	 * @throws  IllegalStateException如果在检索或加载应用程序上下文时发生错误
	 * @see  #isContextLoaded <
	 * @see > #closeContext
	 */
	ApplicationContext loadContext(MergedContextConfiguration mergedContextConfiguration);

	/**
	 * Remove the {@linkplain ApplicationContext application context} for the
	 * supplied {@link MergedContextConfiguration} from the {@code ContextCache}
	 * and {@linkplain ConfigurableApplicationContext#close() close} it if it is
	 * an instance of {@link ConfigurableApplicationContext}.
	 * <p>The semantics of the supplied {@code HierarchyMode} must be honored when
	 * removing the context from the cache. See the Javadoc for {@link HierarchyMode}
	 * for details.
	 * <p>Generally speaking, this method should only be called if the state of
	 * a singleton bean has been changed (potentially affecting future interaction
	 * with the context) or if the context needs to be prematurely removed from
	 * the cache.
	 * @param mergedContextConfiguration the merged context configuration for the
	 * application context to close; never {@code null}
	 * @param hierarchyMode the hierarchy mode; may be {@code null} if the context
	 * is not part of a hierarchy
	 * @since 4.1
	 * @see #isContextLoaded
	 * @see #loadContext
	 */
	/**
	 * 从{@code  ContextCache}中删除提供的{@link  MergedContextConfiguration}的{@link  plain ApplicationContext应用程序上下文}，如果它是{{@link> plain ConfigurableApplicationContext＃close（）close} {@link  ConfigurableApplicationContext}的实例。 
	 *  <p>从缓存中删除上下文时，必须遵守提供的{@code  HierarchyMode}的语义。 
	 * 有关详细信息，请参见JavaDoc for {@link  HierarchyMode}。 
	 *  <p>通常，仅当单例bean的状态已更改（可能影响将来与上下文的交互）或需要从缓存中过早删除上下文时，才应调用此方法。 
	 *  
	 * @param  mergedContextConfiguration用于关闭应用程序上下文的合并上下文配置； 
	 * 从不{@code  null} 
	 * @param  architectureMode层次结构模式； 
	 * 如果上下文不是层次结构的一部分，则可以为{@code  null} @自4.1开始
	 * @see  #isContextLoaded 
	 * @see  #loadContext
	 */
	void closeContext(MergedContextConfiguration mergedContextConfiguration, @Nullable HierarchyMode hierarchyMode);

}
