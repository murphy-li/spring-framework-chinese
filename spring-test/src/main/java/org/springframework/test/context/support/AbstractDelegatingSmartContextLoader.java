/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.support;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.context.ApplicationContext;
import org.springframework.lang.Nullable;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.ContextConfigurationAttributes;
import org.springframework.test.context.ContextLoader;
import org.springframework.test.context.MergedContextConfiguration;
import org.springframework.test.context.SmartContextLoader;
import org.springframework.util.Assert;

/**
 * {@code AbstractDelegatingSmartContextLoader} serves as an abstract base class
 * for implementations of the {@link SmartContextLoader} SPI that delegate to a
 * set of <em>candidate</em> SmartContextLoaders (i.e., one that supports XML
 * configuration files or Groovy scripts and one that supports annotated classes)
 * to determine which context loader is appropriate for a given test class's
 * configuration. Each candidate is given a chance to
 * {@linkplain #processContextConfiguration process} the
 * {@link ContextConfigurationAttributes} for each class in the test class hierarchy
 * that is annotated with {@link ContextConfiguration @ContextConfiguration}, and
 * the candidate that supports the merged, processed configuration will be used to
 * actually {@linkplain #loadContext load} the context.
 *
 * <p>Any reference to an <em>XML-based loader</em> can be interpreted to mean
 * a context loader that supports only XML configuration files or one that
 * supports both XML configuration files and Groovy scripts simultaneously.
 *
 * <p>Placing an empty {@code @ContextConfiguration} annotation on a test class signals
 * that default resource locations (e.g., XML configuration files or Groovy scripts)
 * or default
 * {@linkplain org.springframework.context.annotation.Configuration configuration classes}
 * should be detected. Furthermore, if a specific {@link ContextLoader} or
 * {@link SmartContextLoader} is not explicitly declared via
 * {@code @ContextConfiguration}, a concrete subclass of
 * {@code AbstractDelegatingSmartContextLoader} will be used as the default loader,
 * thus providing automatic support for either path-based resource locations
 * (e.g., XML configuration files and Groovy scripts) or annotated classes,
 * but not both simultaneously.
 *
 * <p>As of Spring 3.2, a test class may optionally declare neither path-based
 * resource locations nor annotated classes and instead declare only {@linkplain
 * ContextConfiguration#initializers application context initializers}. In such
 * cases, an attempt will still be made to detect defaults, but their absence will
 * not result in an exception.
 *
 * @author Sam Brannen
 * @author Phillip Webb
 * @since 3.2
 * @see SmartContextLoader
 */
/**
 * {@code  AbstractDelegatingSmartContextLoader}用作{@link  SmartContextLoader} SPI实现的抽象基类，该实现委派给一组<em>候选</ em> SmartContextLoader（即支持XML配置文件或Groovy脚本以及支持带注释的类的脚本）来确定哪种上下文加载器适合给定测试类的配置。 
 * 给每个候选者一个机会，用{@link  ContextConfiguration @ContextConfiguration}注释测试类层次结构中每个类的{@link  plain #processContextConfiguration进程} {@link  ContextConfigurationAttributes}，支持合并的，已处理的配置的配置将用于实际{@link  plain #loadContext load}上下文。 
 *  <p>任何对<em>基于XML的加载器</ em>的引用都可以解释为上下文加载器，它仅支持XML配置文件，或者同时支持XML配置文件和Groovy脚本。 
 *  <p>在测试类上放置一个空的{@code  @ContextConfiguration}注释表示默认资源位置（例如XML配置文件或Groovy脚本）或默认{@link  plain org.springframework.context.annotation。 
 * 应该检测到配置配置类}。 
 * 此外，如果未通过{@code  @ContextConfiguration}明确声明特定的{@link  ContextLoader}或{@link  SmartContextLoader}，则将使用{@code  AbstractDelegatingSmartContextLoader}的具体子类作为默认加载程序，从而为基于路径的资源位置（例如XML配置文件和Groovy脚本）或带注释的类提供自动支持，但不能同时提供这两种支持。 
 *  <p>从Spring 3.2开始，测试类可以选择既不声明基于路径的资源位置也不声明带注释的类，而是仅声明{@link  plain ContextConfiguration＃initializers应用程序上下文初始化程序}。 
 * 在这种情况下，仍将尝试检测默认值，但是默认值的缺失不会导致异常。 
 *  @author  Sam Brannen @author  Phillip Webb @自3.2起
 * @see  SmartContextLoader
 */
public abstract class AbstractDelegatingSmartContextLoader implements SmartContextLoader {

	private static final Log logger = LogFactory.getLog(AbstractDelegatingSmartContextLoader.class);


	/**
	 * Get the delegate {@code SmartContextLoader} that supports XML configuration
	 * files and/or Groovy scripts.
	 */
	/**
	 * 获取支持XML配置文件和/或Groovy脚本的委托{@code  SmartContextLoader}。 
	 * 
	 */
	protected abstract SmartContextLoader getXmlLoader();

	/**
	 * Get the delegate {@code SmartContextLoader} that supports annotated classes.
	 */
	/**
	 * 获取支持带注释的类的委托{@code  SmartContextLoader}。 
	 * 
	 */
	protected abstract SmartContextLoader getAnnotationConfigLoader();


	// ContextLoader

	/**
	 * {@code AbstractDelegatingSmartContextLoader} does not support the
	 * {@link ContextLoader#processLocations(Class, String...)} method. Call
	 * {@link #processContextConfiguration(ContextConfigurationAttributes)} instead.
	 * @throws UnsupportedOperationException in this implementation
	 */
	/**
	 * {@code  AbstractDelegatingSmartContextLoader}不支持{@link  ContextLoader＃processLocations（Class，String ...）}方法。 
	 * 而是调用{@link  #processContextConfiguration（ContextConfigurationAttributes）}。 
	 *  
	 * @throws 在此实现中的UnsupportedOperationException
	 */
	@Override
	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {
		throw new UnsupportedOperationException(
				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +
						"Call processContextConfiguration(ContextConfigurationAttributes) instead.");
	}

	/**
	 * {@code AbstractDelegatingSmartContextLoader} does not support the
	 * {@link ContextLoader#loadContext(String...) } method. Call
	 * {@link #loadContext(MergedContextConfiguration)} instead.
	 * @throws UnsupportedOperationException in this implementation
	 */
	/**
	 * {@code  AbstractDelegatingSmartContextLoader}不支持{@link  ContextLoader＃loadContext（String ...）}方法。 
	 * 改为调用{@link  #loadContext（MergedContextConfiguration）}。 
	 *  
	 * @throws 在此实现中的UnsupportedOperationException
	 */
	@Override
	public final ApplicationContext loadContext(String... locations) throws Exception {
		throw new UnsupportedOperationException(
				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +
						"Call loadContext(MergedContextConfiguration) instead.");
	}


	// SmartContextLoader

	/**
	 * Delegates to candidate {@code SmartContextLoaders} to process the supplied
	 * {@link ContextConfigurationAttributes}.
	 * <p>Delegation is based on explicit knowledge of the implementations of the
	 * default loaders for {@linkplain #getXmlLoader() XML configuration files and
	 * Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}.
	 * Specifically, the delegation algorithm is as follows:
	 * <ul>
	 * <li>If the resource locations or annotated classes in the supplied
	 * {@code ContextConfigurationAttributes} are not empty, the appropriate
	 * candidate loader will be allowed to process the configuration <em>as is</em>,
	 * without any checks for detection of defaults.</li>
	 * <li>Otherwise, the XML-based loader will be allowed to process
	 * the configuration in order to detect default resource locations. If
	 * the XML-based loader detects default resource locations,
	 * an {@code info} message will be logged.</li>
	 * <li>Subsequently, the annotation-based loader will be allowed to
	 * process the configuration in order to detect default configuration classes.
	 * If the annotation-based loader detects default configuration
	 * classes, an {@code info} message will be logged.</li>
	 * </ul>
	 * @param configAttributes the context configuration attributes to process
	 * @throws IllegalArgumentException if the supplied configuration attributes are
	 * {@code null}, or if the supplied configuration attributes include both
	 * resource locations and annotated classes
	 * @throws IllegalStateException if the XML-based loader detects default
	 * configuration classes; if the annotation-based loader detects default
	 * resource locations; if neither candidate loader detects defaults for the supplied
	 * context configuration; or if both candidate loaders detect defaults for the
	 * supplied context configuration
	 */
	/**
	 * 委托给候选者{@code  SmartContextLoaders}来处理提供的{@link  ContextConfigurationAttributes}。 
	 *  <p>委派基于对{@link  plain #getXmlLoader（）XML配置文件和Groovy脚本}和{@link  plain #getAnnotationConfigLoader（）带注释的类}的默认加载程序的实现的明确了解。 
	 * 具体来说，委托算法如下：<ul> <li>如果提供的{@code  ContextConfigurationAttributes}中的资源位置或注释的类不为空，则将允许适当的候选加载程序处理配置<em> </ em> </ li> <li>否则，将允许基于XML的加载器处理配置以检测默认资源位置。 
	 * 如果基于XML的加载器检测到默认资源位置，则会记录一条{@code  info}消息。 
	 * </ li> <li>随后，将允许基于注释的加载器处理配置以检测默认资源。 
	 * 配置类。 
	 * 如果基于注释的加载器检测到默认配置类，则会记录一条{@code  info}消息。 
	 * </ li> </ ul> 
	 * @param  configAttributes上下文配置属性可以处理
	 * @throws  IllegalArgumentException。 
	 * 提供的配置属性为{@code  null}，或者如果提供的配置属性同时包含资源位置和带注释的类
	 * @throws  IllegalStateException，如果基于XML的加载程序检测到默认配置类； 
	 * 如果基于注释的加载器检测到默认资源位置； 
	 * 如果两个候选加载程序都未检测到所提供上下文配置的默认值； 
	 * 或者两个候选加载程序都检测到所提供上下文配置的默认值
	 */
	@Override
	public void processContextConfiguration(final ContextConfigurationAttributes configAttributes) {
		Assert.notNull(configAttributes, "configAttributes must not be null");
		Assert.isTrue(!(configAttributes.hasLocations() && configAttributes.hasClasses()),
				() -> String.format("Cannot process locations AND classes for context configuration %s: " +
						"configure one or the other, but not both.", configAttributes));

		// If the original locations or classes were not empty, there's no
		// need to bother with default detection checks; just let the
		// appropriate loader process the configuration.
		if (configAttributes.hasLocations()) {
			delegateProcessing(getXmlLoader(), configAttributes);
		}
		else if (configAttributes.hasClasses()) {
			delegateProcessing(getAnnotationConfigLoader(), configAttributes);
		}
		else {
			// Else attempt to detect defaults...

			// Let the XML loader process the configuration.
			delegateProcessing(getXmlLoader(), configAttributes);
			boolean xmlLoaderDetectedDefaults = configAttributes.hasLocations();

			if (xmlLoaderDetectedDefaults) {
				if (logger.isInfoEnabled()) {
					logger.info(String.format("%s detected default locations for context configuration %s.",
							name(getXmlLoader()), configAttributes));
				}
			}

			Assert.state(!configAttributes.hasClasses(), () -> String.format(
					"%s should NOT have detected default configuration classes for context configuration %s.",
					name(getXmlLoader()), configAttributes));

			// Now let the annotation config loader process the configuration.
			delegateProcessing(getAnnotationConfigLoader(), configAttributes);

			if (configAttributes.hasClasses()) {
				if (logger.isInfoEnabled()) {
					logger.info(String.format("%s detected default configuration classes for context configuration %s.",
							name(getAnnotationConfigLoader()), configAttributes));
				}
			}

			Assert.state(xmlLoaderDetectedDefaults || !configAttributes.hasLocations(), () -> String.format(
					"%s should NOT have detected default locations for context configuration %s.",
					name(getAnnotationConfigLoader()), configAttributes));

			if (configAttributes.hasLocations() && configAttributes.hasClasses()) {
				String msg = String.format(
						"Configuration error: both default locations AND default configuration classes " +
						"were detected for context configuration %s; configure one or the other, but not both.",
						configAttributes);
				logger.error(msg);
				throw new IllegalStateException(msg);
			}
		}
	}

	/**
	 * Delegates to an appropriate candidate {@code SmartContextLoader} to load
	 * an {@link ApplicationContext}.
	 * <p>Delegation is based on explicit knowledge of the implementations of the
	 * default loaders for {@linkplain #getXmlLoader() XML configuration files and
	 * Groovy scripts} and {@linkplain #getAnnotationConfigLoader() annotated classes}.
	 * Specifically, the delegation algorithm is as follows:
	 * <ul>
	 * <li>If the resource locations in the supplied {@code MergedContextConfiguration}
	 * are not empty and the annotated classes are empty,
	 * the XML-based loader will load the {@code ApplicationContext}.</li>
	 * <li>If the annotated classes in the supplied {@code MergedContextConfiguration}
	 * are not empty and the resource locations are empty,
	 * the annotation-based loader will load the {@code ApplicationContext}.</li>
	 * </ul>
	 * @param mergedConfig the merged context configuration to use to load the application context
	 * @throws IllegalArgumentException if the supplied merged configuration is {@code null}
	 * @throws IllegalStateException if neither candidate loader is capable of loading an
	 * {@code ApplicationContext} from the supplied merged context configuration
	 */
	/**
	 * 委派适当的候选人{@code  SmartContextLoader}来加载{@link  ApplicationContext}。 
	 *  <p>委派基于对{@link  plain #getXmlLoader（）XML配置文件和Groovy脚本}和{@link  plain #getAnnotationConfigLoader（）带注释的类}的默认加载程序的实现的明确了解。 
	 * 具体来说，委托算法如下：<ul> <li>如果提供的{@code  MergedContextConfiguration}中的资源位置不为空，并且带注释的类为空，则基于XML的加载器将加载{<@代码> ApplicationContext}。 
	 * </ li> <li>如果提供的{@code  MergedContextConfiguration}中带注释的类不为空，并且资源位置为空，则基于注释的加载器将加载{@code  ApplicationContext }。 
	 * </ li> </ ul> 
	 * @param  mergedConfig合并的上下文配置，用于加载应用程序上下文
	 * @throws  IllegalArgumentException，如果提供的合并配置为{@code  null} 
	 * @throws  IllegalStateException候选加载程序都不能从提供的合并上下文配置中加载{@code  ApplicationContext}
	 */
	@Override
	public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {
		Assert.notNull(mergedConfig, "MergedContextConfiguration must not be null");

		Assert.state(!(mergedConfig.hasLocations() && mergedConfig.hasClasses()), () -> String.format(
				"Neither %s nor %s supports loading an ApplicationContext from %s: " +
				"declare either 'locations' or 'classes' but not both.", name(getXmlLoader()),
				name(getAnnotationConfigLoader()), mergedConfig));

		SmartContextLoader[] candidates = {getXmlLoader(), getAnnotationConfigLoader()};
		for (SmartContextLoader loader : candidates) {
			// Determine if each loader can load a context from the mergedConfig. If it
			// can, let it; otherwise, keep iterating.
			if (supports(loader, mergedConfig)) {
				return delegateLoading(loader, mergedConfig);
			}
		}

		// If neither of the candidates supports the mergedConfig based on resources but
		// ACIs or customizers were declared, then delegate to the annotation config
		// loader.
		if (!mergedConfig.getContextInitializerClasses().isEmpty() || !mergedConfig.getContextCustomizers().isEmpty()) {
			return delegateLoading(getAnnotationConfigLoader(), mergedConfig);
		}

		// else...
		throw new IllegalStateException(String.format(
				"Neither %s nor %s was able to load an ApplicationContext from %s.",
				name(getXmlLoader()), name(getAnnotationConfigLoader()), mergedConfig));
	}


	private static void delegateProcessing(SmartContextLoader loader, ContextConfigurationAttributes configAttributes) {
		if (logger.isDebugEnabled()) {
			logger.debug(String.format("Delegating to %s to process context configuration %s.",
					name(loader), configAttributes));
		}
		loader.processContextConfiguration(configAttributes);
	}

	private static ApplicationContext delegateLoading(SmartContextLoader loader, MergedContextConfiguration mergedConfig)
			throws Exception {

		if (logger.isDebugEnabled()) {
			logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));
		}
		return loader.loadContext(mergedConfig);
	}

	private boolean supports(SmartContextLoader loader, MergedContextConfiguration mergedConfig) {
		if (loader == getAnnotationConfigLoader()) {
			return (mergedConfig.hasClasses() && !mergedConfig.hasLocations());
		}
		else {
			return (mergedConfig.hasLocations() && !mergedConfig.hasClasses());
		}
	}

	private static String name(SmartContextLoader loader) {
		return loader.getClass().getSimpleName();
	}

}
