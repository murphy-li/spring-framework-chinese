/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.core.io.Resource;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
import org.springframework.lang.Nullable;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.event.EventPublishingTestExecutionListener;
import org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;
import org.springframework.test.context.web.ServletTestExecutionListener;
import org.springframework.test.jdbc.JdbcTestUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

/**
 * Abstract {@linkplain Transactional transactional} extension of
 * {@link AbstractJUnit4SpringContextTests} which adds convenience functionality
 * for JDBC access. Expects a {@link DataSource} bean and a
 * {@link PlatformTransactionManager} bean to be defined in the Spring
 * {@linkplain ApplicationContext application context}.
 *
 * <p>This class exposes a {@link JdbcTemplate} and provides an easy way to
 * {@linkplain #countRowsInTable count the number of rows in a table}
 * (potentially {@linkplain #countRowsInTableWhere with a WHERE clause}),
 * {@linkplain #deleteFromTables delete from tables},
 * {@linkplain #dropTables drop tables}, and
 * {@linkplain #executeSqlScript execute SQL scripts} within a transaction.
 *
 * <p>Concrete subclasses must fulfill the same requirements outlined in
 * {@link AbstractJUnit4SpringContextTests}.
 *
 * <p>The following {@link org.springframework.test.context.TestExecutionListener
 * TestExecutionListeners} are configured by default:
 *
 * <ul>
 * <li>{@link org.springframework.test.context.web.ServletTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DependencyInjectionTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DirtiesContextTestExecutionListener}
 * <li>{@link org.springframework.test.context.transaction.TransactionalTestExecutionListener}
 * <li>{@link org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener}
 * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener}
 * </ul>
 *
 * <p>This class serves only as a convenience for extension.
 * <ul>
 * <li>If you do not wish for your test classes to be tied to a Spring-specific
 * class hierarchy, you may configure your own custom test classes by using
 * {@link SpringRunner}, {@link ContextConfiguration @ContextConfiguration},
 * {@link TestExecutionListeners @TestExecutionListeners}, etc.</li>
 * <li>If you wish to extend this class and use a runner other than the
 * {@link SpringRunner}, as of Spring Framework 4.2 you can use
 * {@link org.springframework.test.context.junit4.rules.SpringClassRule SpringClassRule} and
 * {@link org.springframework.test.context.junit4.rules.SpringMethodRule SpringMethodRule}
 * and specify your runner of choice via {@link org.junit.runner.RunWith @RunWith(...)}.</li>
 * </ul>
 *
 * <p><strong>NOTE:</strong> This class requires JUnit 4.12 or higher.
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @since 2.5
 * @see AbstractJUnit4SpringContextTests
 * @see org.springframework.test.context.ContextConfiguration
 * @see org.springframework.test.context.TestExecutionListeners
 * @see org.springframework.test.context.transaction.TransactionalTestExecutionListener
 * @see org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener
 * @see org.springframework.transaction.annotation.Transactional
 * @see org.springframework.test.annotation.Commit
 * @see org.springframework.test.annotation.Rollback
 * @see org.springframework.test.context.transaction.BeforeTransaction
 * @see org.springframework.test.context.transaction.AfterTransaction
 * @see org.springframework.test.jdbc.JdbcTestUtils
 * @see org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests
 */
/**
 * {@link  AbstractJUnit4SpringContextTests}的抽象{@link  plain Transactional transactional}扩展，它增加了JDBC访问的便利功能。 
 * 期望在春季{@link  plain ApplicationContext应用程序上下文}中定义一个{@link  DataSource} bean和一个{@link  PlatformTransactionManager} bean。 
 *  <p>此类公开了一个{@link  JdbcTemplate}，并提供了一种简单的方法来{{@@link> plain #countRowsInTable计算表中的行数}（可能是{@link  plain #countRowsInTableWhere，其中带有WHERE子句}），{<@link> plain #deleteFromTables从表中删除}，{<@link> plain #dropTables删除表}和{@link  plain #executeSqlScript执行SQL脚本}。 
 *  <p>具体的子类必须满足{@link  AbstractJUnit4SpringContextTests}中概述的相同要求。 
 *  <p>默认配置以下{{@link> org.springframework.test.context.TestExecutionListener TestExecutionListeners}：<ul> <li> {<@link> org.springframework.test.context.web.ServletTestExecutionListener} < li> {<@link> org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener} <li> {<@link> org.springframework.test.context.support.DependencyInjectionTestExecutionListener} <li> {<@link> org.springframework .test.context.support.DirtiesContextTestExecutionListener} <li> {<@link> org.springframework.test.context.transaction.TransactionalTestExecutionListener} <li> {<@link> org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener} li> {<@link> org.springframework.test.context.event.EventPublishingTestExecutionListener} </ ul> <p>此类仅用于扩展。 
 *  <ul> <li>如果您不希望将测试类绑定到特定于Spring的类层次结构，则可以使用{@link  SpringRunner}，{<@link> ContextConfiguration）配置自己的自定义测试类。 
 *  @ContextConfiguration}，{<@link> TestExecutionListeners @TestExecutionListeners}等。 
 * </ li> <li>如果您希望扩展此类并使用{@link  SpringRunner}以外的运行程序，则从Spring Framework 4.2开始您可以使用{@link  org.springframework.test.context.junit4.rules.SpringClassRule SpringClassRule}和{@link  org.springframework.test.context.junit4.rules.SpringMethodRule SpringMethodRule}并指定您选择的跑步者通过{@link  org.junit.runner.RunWith @RunWith（...）}。 
 * </ li> </ ul> <p> <strong>注意：</ strong>：此类需要JUnit 4.12或更高版本。 
 *  @author  Sam Brannen @author  Juergen Hoeller @since 2.5起
 * @see  AbstractJUnit4SpringContextTests 
 * @see  org.springframework.test.context.ContextConfiguration 
 * @see  org.springframework.test.context.TestExecutionListeners @
 * @see org.springframework.test.context.transaction.TransactionalTestExecutionListener 
 * @see  org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener 
 * @see  org.springframework.transaction.annotation.Transactional 
 * @see  org.springframework.test.annotation .commit 
 * @see  org.springframework.test.annotation.Rollback 
 * @see  org.springframework.test.context.transaction.BeforeTransaction 
 * @see  org.springframework.test.context.transaction.AfterTransaction 
 * @see  org .springframework.test.jdbc.JdbcTestUtils 
 * @see  org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests
 */
@TestExecutionListeners(listeners = { ServletTestExecutionListener.class,
	DirtiesContextBeforeModesTestExecutionListener.class, DependencyInjectionTestExecutionListener.class,
	DirtiesContextTestExecutionListener.class, TransactionalTestExecutionListener.class,
	SqlScriptsTestExecutionListener.class, EventPublishingTestExecutionListener.class }, inheritListeners = false)
@Transactional
public abstract class AbstractTransactionalJUnit4SpringContextTests extends AbstractJUnit4SpringContextTests {

	/**
	 * The {@code JdbcTemplate} that this base class manages, available to subclasses.
	 * @since 3.2
	 */
	/**
	 * 此基类管理的{@code  JdbcTemplate}可用于子类。 
	 *  @3.2起
	 */
	protected final JdbcTemplate jdbcTemplate = new JdbcTemplate();

	@Nullable
	private String sqlScriptEncoding;


	/**
	 * Set the {@code DataSource}, typically provided via Dependency Injection.
	 * <p>This method also instantiates the {@link #jdbcTemplate} instance variable.
	 */
	/**
	 * 设置{@code 数据源}，通常通过依赖注入提供。 
	 *  <p>此方法还实例化{@link  #jdbcTemplate}实例变量。 
	 * 
	 */
	@Autowired
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate.setDataSource(dataSource);
	}

	/**
	 * Specify the encoding for SQL scripts, if different from the platform encoding.
	 * @see #executeSqlScript
	 */
	/**
	 * 如果与平台编码不同，请指定SQL脚本的编码。 
	 *  
	 * @see  #executeSqlScript
	 */
	public void setSqlScriptEncoding(String sqlScriptEncoding) {
		this.sqlScriptEncoding = sqlScriptEncoding;
	}

	/**
	 * Convenience method for counting the rows in the given table.
	 * @param tableName table name to count rows in
	 * @return the number of rows in the table
	 * @see JdbcTestUtils#countRowsInTable
	 */
	/**
	 * 给定表中的行计数的便捷方法。 
	 *  
	 * @param  tableName表名称，用于对
	 * @return 中的行进行计数
	 * @see  JdbcTestUtils＃countRowsInTable
	 */
	protected int countRowsInTable(String tableName) {
		return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);
	}

	/**
	 * Convenience method for counting the rows in the given table, using the
	 * provided {@code WHERE} clause.
	 * <p>See the Javadoc for {@link JdbcTestUtils#countRowsInTableWhere} for details.
	 * @param tableName the name of the table to count rows in
	 * @param whereClause the {@code WHERE} clause to append to the query
	 * @return the number of rows in the table that match the provided
	 * {@code WHERE} clause
	 * @since 3.2
	 * @see JdbcTestUtils#countRowsInTableWhere
	 */
	/**
	 * 使用提供的{@code  WHERE}子句对给定表中的行进行计数的便捷方法。 
	 *  <p>有关详细信息，请参见Java文档{{@@link> JdbcTestUtils＃countRowsInTableWhere}。 
	 *  
	 * @param  tableName表名称以对
	 * @param 中的行进行计数，其中请使用{@code  WHERE}子句以将附加到查询
	 * @return 的表中与提供的{ @code> WHERE}子句@从3.2开始
	 * @see  JdbcTestUtils＃countRowsInTableWhere
	 */
	protected int countRowsInTableWhere(String tableName, String whereClause) {
		return JdbcTestUtils.countRowsInTableWhere(this.jdbcTemplate, tableName, whereClause);
	}

	/**
	 * Convenience method for deleting all rows from the specified tables.
	 * <p>Use with caution outside of a transaction!
	 * @param names the names of the tables from which to delete
	 * @return the total number of rows deleted from all specified tables
	 * @see JdbcTestUtils#deleteFromTables
	 */
	/**
	 * 从指定表中删除所有行的便捷方法。 
	 *  <p>在交易之外谨慎使用！ 
	 *  
	 * @param 命名要从中删除的表的名称
	 * @return 从所有指定表中删除的总行数
	 * @see  JdbcTestUtils＃deleteFromTables
	 */
	protected int deleteFromTables(String... names) {
		return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names);
	}

	/**
	 * Convenience method for deleting all rows from the given table, using the
	 * provided {@code WHERE} clause.
	 * <p>Use with caution outside of a transaction!
	 * <p>See the Javadoc for {@link JdbcTestUtils#deleteFromTableWhere} for details.
	 * @param tableName the name of the table to delete rows from
	 * @param whereClause the {@code WHERE} clause to append to the query
	 * @param args arguments to bind to the query (leaving it to the {@code
	 * PreparedStatement} to guess the corresponding SQL type); may also contain
	 * {@link org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}
	 * objects which indicate not only the argument value but also the SQL type
	 * and optionally the scale.
	 * @return the number of rows deleted from the table
	 * @since 4.0
	 * @see JdbcTestUtils#deleteFromTableWhere
	 */
	/**
	 * 使用提供的{@code  WHERE}子句从给定表中删除所有行的便捷方法。 
	 *  <p>在交易之外谨慎使用！ 
	 *  <p>有关详细信息，请参见{@link  JdbcTestUtils＃deleteFromTableWhere}的Javadoc。 
	 *  
	 * @param  tableName要从
	 * @param 中删除行的表的名称，请使用{@code  WHERE}子句以附加到查询
	 * @param  args参数以绑定到查询（将其保留在{ @code  PreparedStatement}来猜测相应的SQL类型）； 
	 * 可能还包含{@link  org.springframework.jdbc.core.SqlParameterValue SqlParameterValue}对象，这些对象不仅指示参数值，还指示SQL类型以及可选的小数位数。 
	 *  
	 * @return 从表中删除的行数@自4.0起
	 * @see  JdbcTestUtils＃deleteFromTableWhere
	 */
	protected int deleteFromTableWhere(String tableName, String whereClause, Object... args) {
		return JdbcTestUtils.deleteFromTableWhere(this.jdbcTemplate, tableName, whereClause, args);
	}

	/**
	 * Convenience method for dropping all of the specified tables.
	 * <p>Use with caution outside of a transaction!
	 * @param names the names of the tables to drop
	 * @since 3.2
	 * @see JdbcTestUtils#dropTables
	 */
	/**
	 * 删除所有指定表的便捷方法。 
	 *  <p>在交易之外谨慎使用！ 
	 *  
	 * @param 命名要删除的表的名称，从3.2开始
	 * @see  JdbcTestUtils＃dropTables
	 */
	protected void dropTables(String... names) {
		JdbcTestUtils.dropTables(this.jdbcTemplate, names);
	}

	/**
	 * Execute the given SQL script.
	 * <p>Use with caution outside of a transaction!
	 * <p>The script will normally be loaded by classpath.
	 * <p><b>Do not use this method to execute DDL if you expect rollback.</b>
	 * @param sqlResourcePath the Spring resource path for the SQL script
	 * @param continueOnError whether or not to continue without throwing an
	 * exception in the event of an error
	 * @throws DataAccessException if there is an error executing a statement
	 * @see ResourceDatabasePopulator
	 * @see #setSqlScriptEncoding
	 */
	/**
	 * 执行给定的SQL脚本。 
	 *  <p>在交易之外谨慎使用！ 
	 *  <p>该脚本通常由classpath加载。 
	 *  <p> <b>如果期望回滚，请不要使用此方法执行DDL。 
	 * </ b> 
	 * @param  sqlResourcePath SQL脚本
	 * @param 的Spring资源路径
	 * @param  continueOnError是否继续而不抛出异常如果发生错误
	 * @throws  DataAccessException，如果执行语句时发生错误
	 * @see  ResourceDatabasePopulator 
	 * @see  #setSqlScriptEncoding
	 */
	protected void executeSqlScript(String sqlResourcePath, boolean continueOnError) throws DataAccessException {
		DataSource ds = this.jdbcTemplate.getDataSource();
		Assert.state(ds != null, "No DataSource set");
		Assert.state(this.applicationContext != null, "No ApplicationContext set");
		Resource resource = this.applicationContext.getResource(sqlResourcePath);
		new ResourceDatabasePopulator(continueOnError, false, this.sqlScriptEncoding, resource).execute(ds);
	}

}
