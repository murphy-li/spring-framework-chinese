/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import java.util.ArrayList;
import java.util.List;

import org.junit.runners.model.MultipleFailureException;
import org.junit.runners.model.Statement;

import org.springframework.test.context.TestContextManager;

/**
 * {@code RunAfterTestClassCallbacks} is a custom JUnit {@link Statement} which allows
 * the <em>Spring TestContext Framework</em> to be plugged into the JUnit execution chain
 * by calling {@link TestContextManager#afterTestClass afterTestClass()} on the supplied
 * {@link TestContextManager}.
 *
 * <p><strong>NOTE:</strong> This class requires JUnit 4.9 or higher.
 *
 * @author Sam Brannen
 * @since 3.0
 * @see #evaluate()
 * @see RunBeforeTestClassCallbacks
 */
/**
 * {@code  RunAfterTestClassCallbacks}是自定义的JUnit {@link 语句}，它允许通过调用{@link  TestContextManager＃afterTestClass afterTestClass来将<em> Spring TestContext Framework </ em>插入JUnit执行链中。 
 *  （）}在提供的{@link  TestContextManager}上。 
 *  <p> <strong>注意：</ strong>：此类需要JUnit 4.9或更高版本。 
 *  @author  Sam Brannen @从3.0开始
 * @see  #evaluate（）
 * @see  RunBeforeTestClassCallbacks
 */
public class RunAfterTestClassCallbacks extends Statement {

	private final Statement next;

	private final TestContextManager testContextManager;


	/**
	 * Construct a new {@code RunAfterTestClassCallbacks} statement.
	 * @param next the next {@code Statement} in the execution chain
	 * @param testContextManager the TestContextManager upon which to call
	 * {@code afterTestClass()}
	 */
	/**
	 * 构造一个新的{@code  RunAfterTestClassCallbacks}语句。 
	 *  
	 * @param 执行链中下一个{@code 语句}的下一个
	 * @param  testContextManager在其上调用{@code  afterTestClass（）}的TestContextManager
	 */
	public RunAfterTestClassCallbacks(Statement next, TestContextManager testContextManager) {
		this.next = next;
		this.testContextManager = testContextManager;
	}


	/**
	 * Evaluate the next {@link Statement} in the execution chain (typically an instance of
	 * {@link org.junit.internal.runners.statements.RunAfters RunAfters}), catching any
	 * exceptions thrown, and then invoke {@link TestContextManager#afterTestClass()}.
	 * <p>If the invocation of {@code afterTestClass()} throws an exception, it will also
	 * be tracked. Multiple exceptions will be combined into a {@link MultipleFailureException}.
	 */
	/**
	 * 评估执行链中的下一个{@link 语句}（通常是{@link  org.junit.internal.runners.statements.RunAfters RunAfters}的实例），捕获引发的所有异常，然后调用{<@链接> TestContextManager＃afterTestClass（）}。 
	 *  <p>如果{@code  afterTestClass（）}的调用引发异常，则也会对其进行跟踪。 
	 * 多个异常将合并到{@link  MultipleFailureException}中。 
	 * 
	 */
	@Override
	public void evaluate() throws Throwable {
		List<Throwable> errors = new ArrayList<>();
		try {
			this.next.evaluate();
		}
		catch (Throwable ex) {
			errors.add(ex);
		}

		try {
			this.testContextManager.afterTestClass();
		}
		catch (Throwable ex) {
			errors.add(ex);
		}

		MultipleFailureException.assertEmpty(errors);
	}

}
