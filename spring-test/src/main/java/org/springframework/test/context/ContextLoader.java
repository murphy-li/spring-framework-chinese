/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import org.springframework.context.ApplicationContext;

/**
 * Strategy interface for loading an {@link ApplicationContext application context}
 * for an integration test managed by the Spring TestContext Framework.
 *
 * <p><b>Note</b>: as of Spring 3.1, implement {@link SmartContextLoader} instead
 * of this interface in order to provide support for annotated classes, active
 * bean definition profiles, and application context initializers.
 *
 * <p>Clients of a ContextLoader should call
 * {@link #processLocations(Class, String...) processLocations()} prior to
 * calling {@link #loadContext(String...) loadContext()} in case the
 * ContextLoader provides custom support for modifying or generating locations.
 * The results of {@link #processLocations(Class, String...) processLocations()}
 * should then be supplied to {@link #loadContext(String...) loadContext()}.
 *
 * <p>Concrete implementations must provide a {@code public} no-args constructor.
 *
 * <p>Spring provides the following out-of-the-box implementations:
 * <ul>
 * <li>{@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader}</li>
 * <li>{@link org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader}</li>
 * </ul>
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @since 2.5
 * @see SmartContextLoader
 * @see org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader
 */
/**
 * 用于为Spring TestContext Framework管理的集成测试加载{@link  ApplicationContext应用程序上下文}的策略接口。 
 *  <p> <b>注意</ b>：从Spring 3.1开始，实现{@link  SmartContextLoader}而不是此接口，以便为带注释的类，活动的Bean定义配置文件和应用程序上下文初始化器提供支持。 
 *  <p> ContextLoader的客户端应在调用{@link  #loadContext（String ...）loadContext（）}之前先调用{@link  #processLocations（Class，String ...）processLocations（）} ContextLoader提供了用于修改或生成位置的自定义支持。 
 * 然后应将{@link  #processLocations（Class，String ...）processLocations（）}的结果提供给{@link  #loadContext（String ...）loadContext（）}。 
 *  <p>具体实现必须提供一个{@code  public}无参数构造函数。 
 *  <p> Spring提供了以下现成的实现：<ul> <li> {<@link> org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader} </ li> <li> {<@链接> org.springframework.test.context.support.GenericPropertiesContextLoader GenericPropertiesContextLoader} </ li> </ ul> @author  Sam Brannen @author  Juergen Hoeller @since 2.5 
 * @see  SmartContextLoader 
 * @see  org.springframework .test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader
 */
public interface ContextLoader {

	/**
	 * Processes application context resource locations for a specified class.
	 * <p>Concrete implementations may choose to modify the supplied locations,
	 * generate new locations, or simply return the supplied locations unchanged.
	 * @param clazz the class with which the locations are associated: used to
	 * determine how to process the supplied locations
	 * @param locations the unmodified locations to use for loading the
	 * application context (can be {@code null} or empty)
	 * @return an array of application context resource locations
	 */
	/**
	 * 处理指定类的应用程序上下文资源位置。 
	 *  <p>具体实现可以选择修改提供的位置，生成新的位置，或者简单地将提供的位置保持不变。 
	 *  
	 * @param 讨论与位置相关联的类：用于确定如何处理提供的位置
	 * @param 位置未修改的位置用于加载应用程序上下文（可以为{@code  null}或为空）
	 * @return 应用程序上下文资源位置的数组
	 */
	String[] processLocations(Class<?> clazz, String... locations);

	/**
	 * Loads a new {@link ApplicationContext context} based on the supplied
	 * {@code locations}, configures the context, and finally returns
	 * the context in fully <em>refreshed</em> state.
	 * <p>Configuration locations are generally considered to be classpath
	 * resources by default.
	 * <p>Concrete implementations should register annotation configuration
	 * processors with bean factories of {@link ApplicationContext application
	 * contexts} loaded by this ContextLoader. Beans will therefore automatically
	 * be candidates for annotation-based dependency injection using
	 * {@link org.springframework.beans.factory.annotation.Autowired @Autowired},
	 * {@link javax.annotation.Resource @Resource}, and
	 * {@link javax.inject.Inject @Inject}.
	 * <p>Any ApplicationContext loaded by a ContextLoader <strong>must</strong>
	 * register a JVM shutdown hook for itself. Unless the context gets closed
	 * early, all context instances will be automatically closed on JVM
	 * shutdown. This allows for freeing external resources held by beans within
	 * the context, e.g. temporary files.
	 * @param locations the resource locations to use to load the application context
	 * @return a new application context
	 * @throws Exception if context loading failed
	 */
	/**
	 * 根据提供的{@code 位置}加载新的{@link  ApplicationContext上下文}，配置上下文，最后以完全<em> refreshed </ em>状态返回上下文。 
	 *  <p>默认情况下，通常将配置位置视为类路径资源。 
	 *  <p>具体实现应在此ContextLoader加载的{@link  ApplicationContext应用程序上下文}的bean工厂中注册注释配置处理器。 
	 * 因此，使用{@link  org.springframework.beans.factory.annotation.Autowired @Autowired}，{<@link> javax.annotation.Resource @Resource}和{@link  javax.inject.Inject @Inject}。 
	 *  <p>由ContextLoader加载的任何ApplicationContext <strong>必须</ strong>为自身注册JVM关闭钩子。 
	 * 除非上下文提前关闭，否则所有上下文实例将在JVM关闭时自动关闭。 
	 * 这允许释放上下文中Bean所拥有的外部资源，例如临时文件。 
	 *  
	 * @param 定位用于加载应用程序上下文的资源位置
	 * @return 一个新的应用程序上下文
	 * @throws 如果上下文加载失败，则异常
	 */
	ApplicationContext loadContext(String... locations) throws Exception;

}
