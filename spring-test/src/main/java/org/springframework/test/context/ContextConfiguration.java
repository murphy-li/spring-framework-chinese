/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.annotation.AliasFor;

/**
 * {@code @ContextConfiguration} defines class-level metadata that is used to determine
 * how to load and configure an {@link org.springframework.context.ApplicationContext
 * ApplicationContext} for integration tests.
 *
 * <h3>Supported Resource Types</h3>
 *
 * <p>Prior to Spring 3.1, only path-based resource locations (typically XML configuration
 * files) were supported. As of Spring 3.1, {@linkplain #loader context loaders} may
 * choose to support <em>either</em> path-based <em>or</em> class-based resources. As of
 * Spring 4.0.4, {@linkplain #loader context loaders} may choose to support path-based
 * <em>and</em> class-based resources simultaneously. Consequently
 * {@code @ContextConfiguration} can be used to declare either path-based resource
 * locations (via the {@link #locations} or {@link #value} attribute) <em>or</em>
 * component classes (via the {@link #classes} attribute). Note, however, that most
 * implementations of {@link SmartContextLoader} only support a single resource type. As
 * of Spring 4.1, path-based resource locations may be either XML configuration files or
 * Groovy scripts (if Groovy is on the classpath). Of course, third-party frameworks may
 * choose to support additional types of path-based resources.
 *
 * <h3>Component Classes</h3>
 *
 * <p>The term <em>component class</em> can refer to any of the following.
 *
 * <ul>
 * <li>A class annotated with {@link org.springframework.context.annotation.Configuration @Configuration}</li>
 * <li>A component (i.e., a class annotated with
 * {@link org.springframework.stereotype.Component @Component},
 * {@link org.springframework.stereotype.Service @Service},
 * {@link org.springframework.stereotype.Repository @Repository}, etc.)</li>
 * <li>A JSR-330 compliant class that is annotated with {@code javax.inject} annotations</li>
 * <li>Any class that contains {@link org.springframework.context.annotation.Bean @Bean}-methods</li>
 * <li>Any other class that is intended to be registered as a Spring component (i.e., a Spring bean
 * in the {@code ApplicationContext}), potentially taking advantage of automatic autowiring of a
 * single constructor without the use of Spring annotations</li>
 * </ul>
 *
 * A bean will be registered in the {@code ApplicationContext} for each component
 * class, and such beans can therefore be injected into other beans or into the
 * instance of the test class.
 *
 * <p>Consult the Javadoc for {@link org.springframework.context.annotation.Configuration @Configuration}
 * and {@link org.springframework.context.annotation.Bean @Bean} for further
 * information regarding the configuration and semantics of <em>component classes</em>.
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create custom
 * <em>composed annotations</em>.
 *
 * @author Sam Brannen
 * @since 2.5
 * @see org.springframework.test.context.junit.jupiter.SpringJUnitConfig @SpringJUnitConfig
 * @see org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig @SpringJUnitWebConfig
 * @see ContextHierarchy @ContextHierarchy
 * @see ActiveProfiles @ActiveProfiles
 * @see TestPropertySource @TestPropertySource
 * @see SmartContextLoader
 * @see ContextConfigurationAttributes
 * @see MergedContextConfiguration
 * @see org.springframework.context.ApplicationContext ApplicationContext
 */
/**
 * {@code  @ContextConfiguration}定义了类级别的元数据，用于确定如何加载和配置{@link  org.springframework.context.ApplicationContext ApplicationContext}进行集成测试。 
 *  <h3>支持的资源类型</ h3> <p>在Spring 3.1之前，仅支持基于路径的资源位置（通常是XML配置文件）。 
 * 从Spring 3.1开始，{<@link> plain #loader上下文加载器}可以选择支持<em> </ em>基于路径的<em>或</ em>基于类的资源。 
 * 从Spring 4.0.4开始，{<@link> plain #loader上下文加载器}可以选择同时支持基于路径的<em>和</ em>基于类的资源。 
 * 因此，{<@code> @ContextConfiguration}可用于声明基于路径的资源位置（通过{@link  #locations}或{@link  #value}属性）<em>或</ em>组件类（通过{@link  #classes}属性）。 
 * 但是请注意，{<@link> SmartContextLoader}的大多数实现仅支持单个资源类型。 
 * 从Spring 4.1开始，基于路径的资源位置可以是XML配置文件或Groovy脚本（如果Groovy在类路径上）。 
 * 当然，第三方框架可以选择支持其他类型的基于路径的资源。 
 *  <h3>组件类</ h3> <p>术语<em>组件类</ em>可以指代以下任何内容。 
 *  <ul> <li>用{@link  org.springframework.context.annotation.Configuration @Configuration}注释的类</ li> <li>组件（即，用{@link  org注释的类。 
 *  springframework.stereotype.Component @Component}，{<@link> org.springframework.stereotype.Service @Service}，{<@link> org.springframework.stereotype.Repository @Repository}，等等）</ li> <li >使用{{@code> javax.inject}注释进行注释的JSR-330兼容类</ li> <li>任何包含{@link  org.springframework.context.annotation.Bean @Bean}的类-方法</ li> <li>任何其他要注册为Spring组件的类（即{@code  ApplicationContext}中的Spring bean），都可能利用单个构造函数的自动自动装配而无需使用使用Spring注释</ li> </ ul>每个组件类将在{@code  ApplicationContext}中注册一个bean，因此可以将这些bean注入其他bean或测试类的实例中。 
 *  <p>有关{@link  org.springframework.context.annotation.Configuration @Configuration}和{@link  org.springframework.context.annotation.Bean @Bean}的Javadoc，以获取有关配置和语义的更多信息。 
 *  <em>组件类</ em>。 
 *  <p>此注释可用作<em>元注释</ em>，以创建自定义的<em>组成的注释</ em>。 
 *  @author  Sam Brannen @since 2.5 
 * @see  org.springframework.test.context.junit.jupiter.SpringJUnitConfig @SpringJUnitConfig 
 * @see  org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig @SpringJUnitWebConfig 
 * @see  ContextHierarchy @ContextHierarchy 
 * @see  ActiveProfiles @ActiveProfiles 
 * @see  TestPropertySource @TestPropertySource 
 * @see  SmartContextLoader 
 * @see  ContextConfigurationAttributes 
 * @see  MergedContextConfiguration 
 * @see  org.springframework.context.ApplicationContext ApplicationContext
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface ContextConfiguration {

	/**
	 * Alias for {@link #locations}.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #locations}, but it may be used instead of {@link #locations}.
	 * @since 3.0
	 * @see #inheritLocations
	 */
	/**
	 * {@link  #locations}的别名。 
	 *  <p>该属性可能<strong>不</ strong>不能与{@link  #locations}结合使用，但可以代替{@link  #locations}使用。 
	 *  @since 3.0 
	 * @see  #inheritLocations
	 */
	@AliasFor("locations")
	String[] value() default {};

	/**
	 * The resource locations to use for loading an
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}.
	 * <p>Check out the Javadoc for
	 * {@link org.springframework.test.context.support.AbstractContextLoader#modifyLocations
	 * AbstractContextLoader.modifyLocations()} for details on how a location
	 * will be interpreted at runtime, in particular in case of a relative
	 * path. Also, check out the documentation on
	 * {@link org.springframework.test.context.support.AbstractContextLoader#generateDefaultLocations
	 * AbstractContextLoader.generateDefaultLocations()} for details on the
	 * default locations that are going to be used if none are specified.
	 * <p>Note that the aforementioned default rules only apply for a standard
	 * {@link org.springframework.test.context.support.AbstractContextLoader
	 * AbstractContextLoader} subclass such as
	 * {@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader} or
	 * {@link org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader}
	 * which are the effective default implementations used at runtime if
	 * {@code locations} are configured. See the documentation for {@link #loader}
	 * for further details regarding default loaders.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #value}, but it may be used instead of {@link #value}.
	 * @since 2.5
	 * @see #inheritLocations
	 */
	/**
	 * 用于加载{@link  org.springframework.context.ApplicationContext ApplicationContext}的资源位置。 
	 *  <p>请查看Java文档中的{@link  org.springframework.test.context.support.AbstractContextLoader＃modifyLocations AbstractContextLoader.modifyLocations（）}，以获取有关在运行时如何解释位置的详细信息，尤其是在相对路径。 
	 * 另外，请查看{@link  org.springframework.test.context.support.AbstractContextLoader＃generateDefaultLocations AbstractContextLoader.generateDefaultLocations（）}上的文档，以获取有关未指定默认位置的默认位置的详细信息。 
	 *  <p>请注意，上述默认规则仅适用于标准{@link  org.springframework.test.context.support.AbstractContextLoader AbstractContextLoader}子类，例如{@link  org.springframework.test.context.support。 
	 *  GenericXmlContextLoader GenericXmlContextLoader}或{@link  org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader}是在运行时使用的有效默认实现（如果配置了{@code  locations}）。 
	 * 有关默认加载程序的更多详细信息，请参见{@link  #loader}的文档。 
	 *  <p>该属性可能<strong>不</ strong>不能与{@link  #value}结合使用，但可以代替{@link  #value}使用。 
	 *  @since 2.5 
	 * @see  #inheritLocations
	 */
	@AliasFor("value")
	String[] locations() default {};

	/**
	 * The <em>component classes</em> to use for loading an
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}.
	 * <p>Check out the javadoc for
	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader#detectDefaultConfigurationClasses
	 * AnnotationConfigContextLoader.detectDefaultConfigurationClasses()} for details
	 * on how default configuration classes will be detected if no
	 * <em>component classes</em> are specified. See the documentation for
	 * {@link #loader} for further details regarding default loaders.
	 * @since 3.1
	 * @see org.springframework.context.annotation.Configuration
	 * @see org.springframework.test.context.support.AnnotationConfigContextLoader
	 * @see #inheritLocations
	 */
	/**
	 * <em>组件类</ em>，用于加载{@link  org.springframework.context.ApplicationContext ApplicationContext}。 
	 *  <p>检出Java文档，以获取{@link  org.springframework.test.context.support.AnnotationConfigContextLoader＃detectDefaultConfigurationClasses AnnotationConfigContextLoader.detectDefaultConfigurationClasses（）}的详细信息，以了解如果没有<em>组件类，将如何检测默认配置类< / em>已指定。 
	 * 有关默认加载程序的更多详细信息，请参见{@link  #loader}的文档。 
	 *  @since 3.1 
	 * @see  org.springframework.context.annotation.Configuration 
	 * @see  org.springframework.test.context.support.AnnotationConfigContextLoader 
	 * @see  #inheritLocations
	 */
	Class<?>[] classes() default {};

	/**
	 * The application context <em>initializer classes</em> to use for initializing
	 * a {@link ConfigurableApplicationContext}.
	 * <p>The concrete {@code ConfigurableApplicationContext} type supported by each
	 * declared initializer must be compatible with the type of {@code ApplicationContext}
	 * created by the {@link SmartContextLoader} in use.
	 * <p>{@code SmartContextLoader} implementations typically detect whether
	 * Spring's {@link org.springframework.core.Ordered Ordered} interface has been
	 * implemented or if the @{@link org.springframework.core.annotation.Order Order}
	 * annotation is present and sort instances accordingly prior to invoking them.
	 * @since 3.2
	 * @see org.springframework.context.ApplicationContextInitializer
	 * @see org.springframework.context.ConfigurableApplicationContext
	 * @see #inheritInitializers
	 * @see #loader
	 */
	/**
	 * 用于初始化{@link  ConfigurableApplicationContext}的应用程序上下文<em>初始化器类</ em>。 
	 *  <p>每个声明的初始化程序支持的具体{@code  ConfigurableApplicationContext}类型必须与使用中的{@link  SmartContextLoader}创建的{@code  ApplicationContext}类型兼容。 
	 *  <p> {<@code> SmartContextLoader}实现通常检测是否已实现Spring的{@link  org.springframework.core.Ordered Ordered}接口或@{<< link> org.springframework.core.annotation。 
	 * 存在Order Order}注解，并在调用它们之前对实例进行相应的排序。 
	 *  @since 3.2 
	 * @see  org.springframework.context.ApplicationContextInitializer 
	 * @see  org.springframework.context.ConfigurableApplicationContext 
	 * @see  #inheritInitializers 
	 * @see  #loader
	 */
	Class<? extends ApplicationContextInitializer<?>>[] initializers() default {};

	/**
	 * Whether or not {@linkplain #locations resource locations} or
	 * {@linkplain #classes <em>component classes</em>} from test superclasses
	 * should be <em>inherited</em>.
	 * <p>The default value is {@code true}. This means that an annotated test
	 * class will <em>inherit</em> the resource locations or component classes
	 * defined by test superclasses. Specifically, the resource locations or
	 * component classes for a given test class will be appended to the list of
	 * resource locations or component classes defined by test superclasses.
	 * Thus, subclasses have the option of <em>extending</em> the list of resource
	 * locations or component classes.
	 * <p>If {@code inheritLocations} is set to {@code false}, the
	 * resource locations or component classes for the annotated test class
	 * will <em>shadow</em> and effectively replace any resource locations
	 * or component classes defined by superclasses.
	 * <p>In the following example that uses path-based resource locations, the
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}
	 * for {@code ExtendedTest} will be loaded from
	 * {@code "base-context.xml"} <strong>and</strong>
	 * {@code "extended-context.xml"}, in that order. Beans defined in
	 * {@code "extended-context.xml"} may therefore override those defined
	 * in {@code "base-context.xml"}.
	 * <pre class="code">
	 * &#064;ContextConfiguration("base-context.xml")
	 * public class BaseTest {
	 *     // ...
	 * }
	 *
	 * &#064;ContextConfiguration("extended-context.xml")
	 * public class ExtendedTest extends BaseTest {
	 *     // ...
	 * }
	 * </pre>
	 * <p>Similarly, in the following example that uses component classes, the
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}
	 * for {@code ExtendedTest} will be loaded from the
	 * {@code BaseConfig} <strong>and</strong> {@code ExtendedConfig}
	 * configuration classes, in that order. Beans defined in
	 * {@code ExtendedConfig} may therefore override those defined in
	 * {@code BaseConfig}.
	 * <pre class="code">
	 * &#064;ContextConfiguration(classes=BaseConfig.class)
	 * public class BaseTest {
	 *     // ...
	 * }
	 *
	 * &#064;ContextConfiguration(classes=ExtendedConfig.class)
	 * public class ExtendedTest extends BaseTest {
	 *     // ...
	 * }
	 * </pre>
	 * @since 2.5
	 */
	/**
	 * 是否应该继承测试超类的{@link  plain #locations资源位置}或{@link  plain #classs <em>组件类</ em>}。 
	 *  <p>默认值为{@code  true}。 
	 * 这意味着带注释的测试类将<em>继承</ em>由测试超类定义的资源位置或组件类。 
	 * 具体来说，给定测试类的资源位置或组件类将附加到由测试超类定义的资源位置或组件类的列表中。 
	 * 因此，子类可以选择<em>扩展</ em>资源位置或组件类的列表。 
	 *  <p>如果{@code  InheritLocations}设置为{@code  false}，则带注释的测试类的资源位置或组件类将<em>阴影</ em>并有效地替换任何资源位置或组件由超类定义的类。 
	 *  <p>在以下使用基于路径的资源位置的示例中，{<@code> ExtendedTest}的{@link  org.springframework.context.ApplicationContext ApplicationContext}将从{@code  context.xml"} <strong>和</ strong> {@code "extended-context.xml"}的顺序。 
	 * 因此，在{@code "extended-context.xml"}中定义的bean可能会覆盖在{@code "base-context.xml"}中定义的bean。 
	 *  <pre class ="code"> @ContextConfiguration（"base-context.xml"）公共类BaseTest {// ...} @ContextConfiguration（"extended-context.xml"）公共类ExtendedTest扩展了BaseTest {// .. } </ pre> <p>类似地，在以下使用组件类的示例中，{<@code> ExtendedTest}的{@link  org.springframework.context.ApplicationContext ApplicationContext}将从{@code  BaseConfig} <strong>和</ strong> {@code  ExtendedConfig}配置类。 
	 * 因此，在{@code  ExtendedConfig}中定义的Bean可能会覆盖在{@code  BaseConfig}中定义的Bean。 
	 *  <pre class ="code"> @ContextConfiguration（classes = BaseConfig.class）公共类BaseTest {// ...} @ContextConfiguration（classes = ExtendedConfig.class）公共类ExtendedTest扩展了BaseTest {// ...} </ pre> @开始2.5
	 */
	boolean inheritLocations() default true;

	/**
	 * Whether or not {@linkplain #initializers context initializers} from test
	 * superclasses should be <em>inherited</em>.
	 * <p>The default value is {@code true}. This means that an annotated test
	 * class will <em>inherit</em> the application context initializers defined
	 * by test superclasses. Specifically, the initializers for a given test
	 * class will be added to the set of initializers defined by test
	 * superclasses. Thus, subclasses have the option of <em>extending</em> the
	 * set of initializers.
	 * <p>If {@code inheritInitializers} is set to {@code false}, the initializers
	 * for the annotated test class will <em>shadow</em> and effectively replace
	 * any initializers defined by superclasses.
	 * <p>In the following example, the
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}
	 * for {@code ExtendedTest} will be initialized using
	 * {@code BaseInitializer} <strong>and</strong> {@code ExtendedInitializer}.
	 * Note, however, that the order in which the initializers are invoked
	 * depends on whether they implement {@link org.springframework.core.Ordered
	 * Ordered} or are annotated with {@link org.springframework.core.annotation.Order
	 * &#064;Order}.
	 * <pre class="code">
	 * &#064;ContextConfiguration(initializers = BaseInitializer.class)
	 * public class BaseTest {
	 *     // ...
	 * }
	 *
	 * &#064;ContextConfiguration(initializers = ExtendedInitializer.class)
	 * public class ExtendedTest extends BaseTest {
	 *     // ...
	 * }
	 * </pre>
	 * @since 3.2
	 */
	/**
	 * 是否应继承测试超类的{@link  plain #initializers上下文初始化器}。 
	 * </ em>。 
	 *  <p>默认值为{@code  true}。 
	 * 这意味着带注释的测试类将<em>继承</ em>由测试超类定义的应用程序上下文初始化程序。 
	 * 具体来说，给定测试类的初始化程序将添加到由测试超类定义的初始化程序集。 
	 * 因此，子类可以选择<em> extend </ em>扩展初始值设定项。 
	 *  <p>如果将{@code  InheritInitializers}设置为{@code  false}，则带注释的测试类的初始化器将<em> shadow </ em>并有效地替换超类定义的所有初始化器。 
	 *  <p>在下面的示例中，将使用{@code  BaseInitializer} <strong>和</ strong>初始化{@code  ExtendedTest}的{@link  org.springframework.context.ApplicationContext ApplicationContext}。 
	 *  {@code  ExtendedInitializer}。 
	 * 但是请注意，初始化程序的调用顺序取决于它们是实现{@link  org.springframework.core.Ordered Ordered}还是用{@link  org.springframework.core.annotation.Order注释。 
	 *  @订购}。 
	 *  <pre class ="code"> @ContextConfiguration（initializers = BaseInitializer.class）公共类BaseTest {// ...} @ContextConfiguration（initializers = ExtendedInitializer.class）公共类ExtendedTest扩展了BaseTest {// ...} </ pre> @始于3.2
	 */
	boolean inheritInitializers() default true;

	/**
	 * The type of {@link SmartContextLoader} (or {@link ContextLoader}) to use
	 * for loading an {@link org.springframework.context.ApplicationContext
	 * ApplicationContext}.
	 * <p>If not specified, the loader will be inherited from the first superclass
	 * that is annotated or meta-annotated with {@code @ContextConfiguration} and
	 * specifies an explicit loader. If no class in the hierarchy specifies an
	 * explicit loader, a default loader will be used instead.
	 * <p>The default concrete implementation chosen at runtime will be either
	 * {@link org.springframework.test.context.support.DelegatingSmartContextLoader
	 * DelegatingSmartContextLoader} or
	 * {@link org.springframework.test.context.web.WebDelegatingSmartContextLoader
	 * WebDelegatingSmartContextLoader} depending on the absence or presence of
	 * {@link org.springframework.test.context.web.WebAppConfiguration
	 * &#064;WebAppConfiguration}. For further details on the default behavior
	 * of various concrete {@code SmartContextLoaders}, check out the Javadoc for
	 * {@link org.springframework.test.context.support.AbstractContextLoader AbstractContextLoader},
	 * {@link org.springframework.test.context.support.GenericXmlContextLoader GenericXmlContextLoader},
	 * {@link org.springframework.test.context.support.GenericGroovyXmlContextLoader GenericGroovyXmlContextLoader},
	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader AnnotationConfigContextLoader},
	 * {@link org.springframework.test.context.web.GenericXmlWebContextLoader GenericXmlWebContextLoader},
	 * {@link org.springframework.test.context.web.GenericGroovyXmlWebContextLoader GenericGroovyXmlWebContextLoader}, and
	 * {@link org.springframework.test.context.web.AnnotationConfigWebContextLoader AnnotationConfigWebContextLoader}.
	 * @since 2.5
	 */
	/**
	 * {@link  SmartContextLoader}（或{@link  ContextLoader}）的类型，用于加载{@link  org.springframework.context.ApplicationContext ApplicationContext}。 
	 *  <p>如果未指定，则将从第一个用{@code  @ContextConfiguration}进行注释或元注释的超类继承该加载器，并指定一个显式加载器。 
	 * 如果层次结构中没有类指定显式加载程序，则将使用默认加载程序。 
	 *  <p>运行时选择的默认具体实现为{@link  org.springframework.test.context.support.DelegatingSmartContextLoader DelegatingSmartContextLoader}或{@link  org.springframework.test.context.web.WebDelegatingSmartContextLoader WebDelegatingSmartContextLoader}取决于是否存在{@link  org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}。 
	 * 有关各种具体的{@code  SmartContextLoaders}的默认行为的更多详细信息，请查阅Javadoc中的{@link  org.springframework.test.context.support.AbstractContextLoader AbstractContextLoader}，{<@link> org.springframework 。 
	 *  @link  org.springframework.test.context.web.GenericXmlWebContextLoader}，{<@link> org.springframework.test.context.web.GenericGroovyXmlWebContextLoader GenericGroovyXmlWebContextLoader}和{@link  org.springframework.testcon。 
	 *  .web.AnnotationConfigWebContextLoader}。 
	 *  @自2.5起
	 */
	Class<? extends ContextLoader> loader() default ContextLoader.class;

	/**
	 * The name of the context hierarchy level represented by this configuration.
	 * <p>If not specified the name will be inferred based on the numerical level
	 * within all declared contexts within the hierarchy.
	 * <p>This attribute is only applicable when used within a test class hierarchy
	 * that is configured using {@code @ContextHierarchy}, in which case the name
	 * can be used for <em>merging</em> or <em>overriding</em> this configuration
	 * with configuration of the same name in hierarchy levels defined in superclasses.
	 * See the Javadoc for {@link ContextHierarchy @ContextHierarchy} for details.
	 * @since 3.2.2
	 */
	/**
	 * 此配置表示的上下文层次结构级别的名称。 
	 *  <p>如果未指定，则将根据层次结构中所有已声明上下文中的数字级别来推断名称。 
	 *  <p>此属性仅在使用{@code  @ContextHierarchy}配置的测试类层次结构中使用时适用，在这种情况下，该名称可用于<em>合并</ em>或<em>覆盖</ em>此配置在超类中定义的层次结构级别中具有相同名称的配置。 
	 * 有关详细信息，请参见JavaDoc for {@link  ContextHierarchy @ContextHierarchy}。 
	 *  @从3.2.2开始
	 */
	String name() default "";

}
