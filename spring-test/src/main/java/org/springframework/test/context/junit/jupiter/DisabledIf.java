/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit.jupiter;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.junit.jupiter.api.extension.ExtendWith;

import org.springframework.core.annotation.AliasFor;

/**
 * {@code @DisabledIf} is used to signal that the annotated test class or test
 * method is <em>disabled</em> and should not be executed if the supplied
 * {@link #expression} evaluates to {@code true}.
 *
 * <p>When applied at the class level, all test methods within that class
 * are automatically disabled as well.
 *
 * <p>For basic examples, see the Javadoc for {@link #expression}.
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create
 * custom <em>composed annotations</em>. For example, a custom
 * {@code @DisabledOnMac} annotation can be created as follows.
 *
 * <pre style="code">
 * {@literal @}Target({ElementType.TYPE, ElementType.METHOD})
 * {@literal @}Retention(RetentionPolicy.RUNTIME)
 * {@literal @}DisabledIf(
 *     expression = "#{systemProperties['os.name'].toLowerCase().contains('mac')}",
 *     reason = "Disabled on Mac OS"
 * )
 * public {@literal @}interface DisabledOnMac {}
 * </pre>
 *
 * @author Sam Brannen
 * @author Tadaya Tsuyukubo
 * @since 5.0
 * @see SpringExtension
 * @see EnabledIf
 * @see org.junit.jupiter.api.Disabled
 */
/**
 * {@code  @DisabledIf}用于表示已注释的测试类或测试方法<em>已禁用</ em>，如果提供的{@link  #expression}计算为{<@，则不应执行代码> true}。 
 *  <p>在类级别应用时，该类中的所有测试方法也会自动禁用。 
 *  <p>有关基本示例，请参见Java文档{@link  #expression}。 
 *  <p>此注释可用作<em>元注释</ em>，以创建自定义的<em>组成的注释</ em>。 
 * 例如，可以如下创建自定义{@code  @DisabledOnMac}注解。 
 *  <pre style ="code"> {@literal @} Target（{ElementType.TYPE，ElementType.METHOD}）{@literal @} Retention（RetentionPolicy.RUNTIME）{@literal @} DisabledIf（expression ="＃{systemProperties [ 'os.name']。 
 * toLowerCase（）。 
 * contains（'mac'）}"，原因="在Mac OS上已禁用"）public {@literal @} interface DisabledOnMac {} </ pre> @author  Sam Brannen @author  Tadaya Tsuyukubo @从5.0开始
 * @see  SpringExtension 
 * @see 启用如果
 * @see  org.junit.jupiter.api.Disabled
 */
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@ExtendWith(DisabledIfCondition.class)
public @interface DisabledIf {

	/**
	 * Alias for {@link #expression}; only intended to be used if {@link #reason}
	 * and {@link #loadContext} are not specified.
	 *
	 * @see #expression
	 */
	/**
	 * {@link  #expression}的别名； 
	 * 仅在未指定{@link  #reason}和{@link  #loadContext}的情况下使用。 
	 *  
	 * @see ＃表达式
	 */
	@AliasFor("expression")
	String value() default "";

	/**
	 * The expression that will be evaluated to determine if the annotated test
	 * class or test method is <em>disabled</em>.
	 *
	 * <p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}
	 * equal to {@code "true"} (ignoring case), the test will be disabled.
	 *
	 * <p>Expressions can be any of the following.
	 *
	 * <ul>
	 * <li>Spring Expression Language (SpEL) expression &mdash; for example:
	 * <pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>
	 * <li>Placeholder for a property available in the Spring
	 * {@link org.springframework.core.env.Environment Environment} &mdash; for example:
	 * <pre style="code">@DisabledIf("${smoke.tests.disabled}")</pre>
	 * <li>Text literal &mdash; for example:
	 * <pre style="code">@DisabledIf("true")</pre>
	 * </ul>
	 *
	 * <p>Note, however, that a <em>text literal</em> which is not the result of
	 * dynamic resolution of a property placeholder is of zero practical value
	 * since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}
	 * and {@code @DisabledIf("false")} is logically meaningless.
	 *
	 * @see #reason
	 * @see #loadContext
	 * @see #value
	 */
	/**
	 * 将被评估以确定带注释的测试类或测试方法是否<em>禁用</ em>的表达式。 
	 *  <p>如果表达式的计算结果为{@link  Boolean＃TRUE}或等于{@code "true"}的{@link 字符串}（忽略大小写），则测试将被禁用。 
	 *  <p>表达式可以是以下任意一种。 
	 *  <ul> <li> Spring表达式语言（SpEL）表达式-例如：<pre style ="code"> @DisabledIf（"＃{systemProperties ['os.name']。 
	 * toLowerCase（）。 
	 * contains（'mac'） }"）</ pre> <li> Spring {@link  org.springframework.core.env.Environment Environment}中可用的属性的占位符-例如：<pre style ="code"> @DisabledIf（"$ {smoke.tests.disabled}"）</ pre> <li>文本文字，例如：<pre style ="code"> @DisabledIf（"true"）</ pre> </ ul> <p>注意但是，不是文本占位符</ em>（它不是属性占位符的动态解析的结果）的实用价值为零，因为{@code  @DisabledIf（"true"）}等效于{@code  @Disabled}和{@code  @DisabledIf（"false"）}在逻辑上是没有意义的。 
	 *  
	 * @see  #reason 
	 * @see  #loadContext 
	 * @see  #value
	 */
	@AliasFor("value")
	String expression() default "";

	/**
	 * The reason this test is disabled.
	 *
	 * @see #expression
	 */
	/**
	 * 此测试被禁用的原因。 
	 *  
	 * @see ＃表达式
	 */
	String reason() default "";

	/**
	 * Whether the {@code ApplicationContext} associated with the current test
	 * should be eagerly loaded in order to evaluate the {@link #expression}.
	 *
	 * <p>Defaults to {@code false} so that test application contexts are not
	 * eagerly loaded unnecessarily. If an expression is based solely on system
	 * properties or environment variables or does not interact with beans in
	 * the test's application context, there is no need to load the context
	 * prematurely since doing so would be a waste of time if the test ends up
	 * being disabled.
	 *
	 * @see #expression
	 */
	/**
	 * 是否急切加载与当前测试关联的{@code  ApplicationContext}以便评估{@link  #expression}。 
	 *  <p>默认为{@code  false}，这样就不会急切地加载测试应用程序上下文。 
	 * 如果表达式仅基于系统属性或环境变量，或者在测试的应用程序上下文中不与Bean交互，则无需过早加载上下文，因为如果测试最终被禁用，这样做会浪费时间。 
	 *  
	 * @see ＃表达式
	 */
	boolean loadContext() default false;

}
