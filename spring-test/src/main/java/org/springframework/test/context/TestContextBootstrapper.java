/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.util.List;

/**
 * {@code TestContextBootstrapper} defines the SPI for bootstrapping the
 * <em>Spring TestContext Framework</em>.
 *
 * <p>A {@code TestContextBootstrapper} is used by the {@link TestContextManager} to
 * {@linkplain #getTestExecutionListeners get the TestExecutionListeners} for the
 * current test and to {@linkplain #buildTestContext build the TestContext} that
 * it manages.
 *
 * <h3>Configuration</h3>
 *
 * <p>A custom bootstrapping strategy can be configured for a test class (or
 * test class hierarchy) via {@link BootstrapWith @BootstrapWith}, either
 * directly or as a meta-annotation.
 *
 * <p>If a bootstrapper is not explicitly configured via {@code @BootstrapWith},
 * either the {@link org.springframework.test.context.support.DefaultTestContextBootstrapper
 * DefaultTestContextBootstrapper} or the
 * {@link org.springframework.test.context.web.WebTestContextBootstrapper
 * WebTestContextBootstrapper} will be used, depending on the presence of
 * {@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}.
 *
 * <h3>Implementation Notes</h3>
 *
 * <p>Concrete implementations must provide a {@code public} no-args constructor.
 *
 * <p><strong>WARNING</strong>: this SPI will likely change in the future in
 * order to accommodate new requirements. Implementers are therefore strongly encouraged
 * <strong>not</strong> to implement this interface directly but rather to <em>extend</em>
 * {@link org.springframework.test.context.support.AbstractTestContextBootstrapper
 * AbstractTestContextBootstrapper} or one of its concrete subclasses instead.
 *
 * @author Sam Brannen
 * @since 4.1
 * @see BootstrapWith
 * @see BootstrapContext
 */
/**
 * {@code  TestContextBootstrapper}定义了用于引导<em> Spring TestContext Framework </ em>的SPI。 
 *  <p> {<@link> TestContextManager}使用{{@@code> TestContextBootstrapper}到{@link  plain #getTestExecutionListeners获取当前测试的TestExecutionListeners}和{@link  plain #buildTestContext构建它管理的TestContext}。 
 *  <h3>配置</ h3> <p>可以通过{@link  BootstrapWith @BootstrapWith}直接或作为元注释为测试类（或测试类层次结构）配置自定义引导策略。 
 *  <p>如果没有通过{@code  @BootstrapWith}显式配置引导程序，请使用{@link  org.springframework.test.context.support.DefaultTestContextBootstrapper DefaultTestContextBootstrapper}或{@link  org.springframework将使用.test.context.web.WebTestContextBootstrapper WebTestContextBootstrapper}，具体取决于{@link  org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}的存在。 
 *  <h3>实施说明</ h3> <p>具体实现必须提供一个{@code  public}无参数构造函数。 
 *  <p> <strong>警告</ strong>：此SPI将来可能会更改，以适应新的要求。 
 * 因此，强烈建议实现者<strong>不</ strong>直接实现此接口，而是<em>扩展</ em> {@link  org.springframework.test.context.support.AbstractTestContextBootstrapper AbstractTestContextBootstrapper}或以下之一而是它的具体子类。 
 *  @author  Sam Brannen @从4.1开始
 * @see  BootstrapWith 
 * @see  BootstrapContext
 */
public interface TestContextBootstrapper {

	/**
	 * Set the {@link BootstrapContext} to be used by this bootstrapper.
	 */
	/**
	 * 设置{@link  BootstrapContext}以供该引导程序使用。 
	 * 
	 */
	void setBootstrapContext(BootstrapContext bootstrapContext);

	/**
	 * Get the {@link BootstrapContext} associated with this bootstrapper.
	 */
	/**
	 * 获取与此引导程序关联的{@link  BootstrapContext}。 
	 * 
	 */
	BootstrapContext getBootstrapContext();

	/**
	 * Build the {@link TestContext} for the {@link BootstrapContext}
	 * associated with this bootstrapper.
	 * @return a new {@link TestContext}, never {@code null}
	 * @since 4.2
	 * @see #buildMergedContextConfiguration()
	 */
	/**
	 * 为与此引导程序关联的{@link  BootstrapContext}构建{@link  TestContext}。 
	 *  
	 * @return 一个新的{@link  TestContext}，从不{@code  null} @自4.2起
	 * @see  #buildMergedContextConfiguration（）
	 */
	TestContext buildTestContext();

	/**
	 * Build the {@linkplain MergedContextConfiguration merged context configuration}
	 * for the test class in the {@link BootstrapContext} associated with this
	 * bootstrapper.
	 * <p>Implementations must take the following into account when building the
	 * merged configuration:
	 * <ul>
	 * <li>Context hierarchies declared via {@link ContextHierarchy @ContextHierarchy}
	 * and {@link ContextConfiguration @ContextConfiguration}</li>
	 * <li>Active bean definition profiles declared via {@link ActiveProfiles @ActiveProfiles}</li>
	 * <li>{@linkplain org.springframework.context.ApplicationContextInitializer
	 * Context initializers} declared via {@link ContextConfiguration#initializers}</li>
	 * <li>Test property sources declared via {@link TestPropertySource @TestPropertySource}</li>
	 * </ul>
	 * <p>Consult the Javadoc for the aforementioned annotations for details on
	 * the required semantics.
	 * <p>Note that the implementation of {@link #buildTestContext()} should
	 * typically delegate to this method when constructing the {@code TestContext}.
	 * <p>When determining which {@link ContextLoader} to use for a given test
	 * class, the following algorithm should be used:
	 * <ol>
	 * <li>If a {@code ContextLoader} class has been explicitly declared via
	 * {@link ContextConfiguration#loader}, use it.</li>
	 * <li>Otherwise, concrete implementations are free to determine which
	 * {@code ContextLoader} class to use as a default.</li>
	 * </ol>
	 * @return the merged context configuration, never {@code null}
	 * @see #buildTestContext()
	 */
	/**
	 * 在与此引导程序关联的{@link  BootstrapContext}中，为测试类构建{@link  plain MergedContextConfiguration合并上下文配置}。 
	 *  <p>在构建合并的配置时，实现必须考虑以下因素：<ul> <li>通过{@link  ContextHierarchy @ContextHierarchy}和{@link  ContextConfiguration @ContextConfiguration} </ li>声明的上下文层次结构< li>通过{@link  ActiveProfiles @ActiveProfiles}声明的活动bean定义配置文件</ li> <li> {<@link>普通org.springframework.context.ApplicationContextInitializer上下文初始化器}通过{@link  ContextConfiguration＃initializers声明} </ li> <li>测试通过{@link  TestPropertySource @TestPropertySource}声明的属性源</ li> </ ul> <p>请向Javadoc咨询上述注释，以获取所需语义的详细信息。 
	 *  <p>请注意，在构造{@code  TestContext}时，{@link  #buildTestContext（）}的实现通常应委托给此方法。 
	 *  <p>确定给定测试类使用哪个{@link  ContextLoader}时，应使用以下算法：<ol> <li>如果已通过{明确声明了{@code  ContextLoader}类@link  ContextConfiguration＃loader}，使用它。 
	 * </ li> <li>否则，具体的实现可以自由确定将哪个{@code  ContextLoader}类用作默认类。 
	 * </ li> </ ol> 
	 * @return 合并的上下文配置，永远不会{@code  null} 
	 * @see  #buildTestContext（）
	 */
	MergedContextConfiguration buildMergedContextConfiguration();

	/**
	 * Get a list of newly instantiated {@link TestExecutionListener TestExecutionListeners}
	 * for the test class in the {@link BootstrapContext} associated with this bootstrapper.
	 * <p>If {@link TestExecutionListeners @TestExecutionListeners} is not
	 * <em>present</em> on the test class in the {@code BootstrapContext},
	 * <em>default</em> listeners should be returned. Furthermore, default
	 * listeners must be sorted using
	 * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator
	 * AnnotationAwareOrderComparator}.
	 * <p>Concrete implementations are free to determine what comprises the
	 * set of default listeners. However, by default, the Spring TestContext
	 * Framework will use the
	 * {@link org.springframework.core.io.support.SpringFactoriesLoader SpringFactoriesLoader}
	 * mechanism to look up all {@code TestExecutionListener} class names
	 * configured in all {@code META-INF/spring.factories} files on the classpath.
	 * <p>The {@link TestExecutionListeners#inheritListeners() inheritListeners}
	 * flag of {@link TestExecutionListeners @TestExecutionListeners} must be
	 * taken into consideration. Specifically, if the {@code inheritListeners}
	 * flag is set to {@code true}, listeners declared for a given test class must
	 * be appended to the end of the list of listeners declared in superclasses.
	 * @return a list of {@code TestExecutionListener} instances
	 */
	/**
	 * 在与此引导程序关联的{@link  BootstrapContext}中，获取测试类的新实例化的{@link  TestExecutionListener TestExecutionListeners}列表。 
	 *  <p>如果{@code  BootstrapContext}中的测试类上没有出现{{@@link> TestExecutionListeners @TestExecutionListeners} </ em>，则应返回<em> default </ em>侦听器。 
	 * 此外，必须使用{@link  org.springframework.core.annotation.AnnotationAwareOrderComparator AnnotationAwareOrderComparator}对默认侦听器进行排序。 
	 *  <p>具体的实现可以自由确定什么构成默认侦听器。 
	 * 但是，默认情况下，Spring TestContext Framework将使用{@link  org.springframework.core.io.support.SpringFactoriesLoader SpringFactoriesLoader}机制来查找在所有{<@中配置的所有{@code  TestExecutionListener}类名代码> META-INF / spring.factories}文件。 
	 *  <p>必须考虑{@link  TestExecutionListeners @TestExecutionListeners}的{@link  TestExecutionListeners＃inheritListeners（）InheritListeners}标志。 
	 * 具体地说，如果将{@code  InheritedListeners}标志设置为{@code  true}，则必须将为给定测试类声明的侦听器附加到超类中声明的侦听器列表的末尾。 
	 *  
	 * @return  {@code  TestExecutionListener}实例的列表
	 */
	List<TestExecutionListener> getTestExecutionListeners();

}
