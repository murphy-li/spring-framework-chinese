/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.junit.runners.model.MultipleFailureException;
import org.junit.runners.model.Statement;

import org.springframework.test.context.TestContextManager;

/**
 * {@code RunAfterTestExecutionCallbacks} is a custom JUnit {@link Statement}
 * which allows the <em>Spring TestContext Framework</em> to be plugged into the
 * JUnit 4 execution chain by calling {@link TestContextManager#afterTestExecution
 * afterTestExecution()} on the supplied {@link TestContextManager}.
 *
 * <p><strong>NOTE:</strong> This class requires JUnit 4.9 or higher.
 *
 * @author Sam Brannen
 * @since 5.0
 * @see #evaluate()
 * @see RunBeforeTestExecutionCallbacks
 */
/**
 * {@code  RunAfterTestExecutionCallbacks}是自定义的JUnit {@link 语句}，它允许通过调用{@link  TestContextManager＃afterTestExecution来将<em> Spring TestContext Framework </ em>插入JUnit 4执行链中。 
 * 随附的{@link  TestContextManager}上的afterTestExecution（）}。 
 *  <p> <strong>注意：</ strong>：此类需要JUnit 4.9或更高版本。 
 *  @author  Sam Brannen @从5.0开始
 * @see  #evaluate（）
 * @see  RunBeforeTestExecutionCallbacks
 */
public class RunAfterTestExecutionCallbacks extends Statement {

	private final Statement next;

	private final Object testInstance;

	private final Method testMethod;

	private final TestContextManager testContextManager;


	/**
	 * Construct a new {@code RunAfterTestExecutionCallbacks} statement.
	 * @param next the next {@code Statement} in the execution chain
	 * @param testInstance the current test instance (never {@code null})
	 * @param testMethod the test method which has just been executed on the
	 * test instance
	 * @param testContextManager the TestContextManager upon which to call
	 * {@code afterTestExecution()}
	 */
	/**
	 * 构造一个新的{@code  RunAfterTestExecutionCallbacks}语句。 
	 *  
	 * @param 执行链中下一个{@code 语句}的下一个
	 * @param  testInstance当前测试实例（从未{<@@code> null}）
	 * @param  testMethod刚刚执行的测试方法在测试实例
	 * @param  testContextManager上，在其上调用{@code  afterTestExecution（）}的TestContextManager
	 */
	public RunAfterTestExecutionCallbacks(Statement next, Object testInstance, Method testMethod,
			TestContextManager testContextManager) {

		this.next = next;
		this.testInstance = testInstance;
		this.testMethod = testMethod;
		this.testContextManager = testContextManager;
	}

	/**
	 * Evaluate the next {@link Statement} in the execution chain (typically an
	 * instance of {@link RunBeforeTestExecutionCallbacks}), catching any exceptions
	 * thrown, and then invoke {@link TestContextManager#afterTestExecution} supplying
	 * the first caught exception (if any).
	 * <p>If the invocation of {@code afterTestExecution()} throws an exception, that
	 * exception will also be tracked. Multiple exceptions will be combined into a
	 * {@link MultipleFailureException}.
	 */
	/**
	 * 评估执行链中的下一个{@link 语句}（通常是{@link  RunBeforeTestExecutionCallbacks}的实例），捕获抛出的所有异常，然后调用{@link  TestContextManager＃afterTestExecution}来提供捕获的第一个异常（如果有）。 
	 *  <p>如果{@code  afterTestExecution（）}的调用引发了异常，则也会跟踪该异常。 
	 * 多个异常将合并到{@link  MultipleFailureException}中。 
	 * 
	 */
	@Override
	public void evaluate() throws Throwable {
		Throwable testException = null;
		List<Throwable> errors = new ArrayList<>();
		try {
			this.next.evaluate();
		}
		catch (Throwable ex) {
			testException = ex;
			errors.add(ex);
		}

		try {
			this.testContextManager.afterTestExecution(this.testInstance, this.testMethod, testException);
		}
		catch (Throwable ex) {
			errors.add(ex);
		}

		MultipleFailureException.assertEmpty(errors);
	}

}
