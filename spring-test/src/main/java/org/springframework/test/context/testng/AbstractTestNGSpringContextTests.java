/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.testng;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.testng.IHookCallBack;
import org.testng.IHookable;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.lang.Nullable;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.TestContextManager;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.event.EventPublishingTestExecutionListener;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener;
import org.springframework.test.context.support.DirtiesContextTestExecutionListener;
import org.springframework.test.context.web.ServletTestExecutionListener;

/**
 * Abstract base test class which integrates the <em>Spring TestContext Framework</em>
 * with explicit {@link ApplicationContext} testing support in a <strong>TestNG</strong>
 * environment.
 *
 * <p>Concrete subclasses should typically declare a class-level
 * {@link ContextConfiguration @ContextConfiguration} annotation to
 * configure the {@linkplain ApplicationContext application context} {@linkplain
 * ContextConfiguration#locations() resource locations} or {@linkplain
 * ContextConfiguration#classes() component classes}. <em>If your test does not
 * need to load an application context, you may choose to omit the
 * {@link ContextConfiguration @ContextConfiguration} declaration and to configure
 * the appropriate {@link org.springframework.test.context.TestExecutionListener
 * TestExecutionListeners} manually.</em> Concrete subclasses must also have
 * constructors which either implicitly or explicitly delegate to {@code super();}.
 *
 * <p>The following {@link org.springframework.test.context.TestExecutionListener
 * TestExecutionListeners} are configured by default:
 *
 * <ul>
 * <li>{@link org.springframework.test.context.web.ServletTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DependencyInjectionTestExecutionListener}
 * <li>{@link org.springframework.test.context.support.DirtiesContextTestExecutionListener}
 * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener}
 * </ul>
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @since 2.5
 * @see ContextConfiguration
 * @see TestContext
 * @see TestContextManager
 * @see TestExecutionListeners
 * @see ServletTestExecutionListener
 * @see DirtiesContextBeforeModesTestExecutionListener
 * @see DependencyInjectionTestExecutionListener
 * @see DirtiesContextTestExecutionListener
 * @see EventPublishingTestExecutionListener
 * @see AbstractTransactionalTestNGSpringContextTests
 * @see org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests
 */
/**
 * 抽象基础测试类，它在<strong> TestNG </ strong>环境中将<em> Spring TestContext Framework </ em>与明确的{@link  ApplicationContext}测试支持集成在一起。 
 *  <p>具体子类通常应声明一个类级别的{@link  ContextConfiguration @ContextConfiguration}注解，以配置{@link  plain ApplicationContext应用程序上下文} {@link  plain ContextConfiguration＃locations（）资源位置}或{@link 纯ContextConfiguration＃classes（）组件类}。 
 *  <em>如果您的测试不需要加载应用程序上下文，则可以选择省略{@link  ContextConfiguration @ContextConfiguration}声明，并配置适当的{@link  org.springframework.test.context.TestExecutionListener具体的子类还必须具有隐式或显式委托给{@code  super（）;}的构造函数。 
 *  <p>默认配置以下{{@link> org.springframework.test.context.TestExecutionListener TestExecutionListeners}：<ul> <li> {<@link> org.springframework.test.context.web.ServletTestExecutionListener} < li> {<@link> org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener} <li> {<@link> org.springframework.test.context.support.DependencyInjectionTestExecutionListener} <li> {<@link> org.springframework .test.context.support.DirtiesContextTestExecutionListener} <li> {<@link> org.springframework.test.context.event.EventPublishingTestExecutionListener} </ ul> @author  Sam Brannen @author  Juergen Hoeller @since 2.5 <@请参阅> ContextConfiguration <@请参阅> TestContext <@请参阅> TestContextManager <@请参阅> TestExecutionListeners <@请参阅ServletTestExecutionListener <@请参阅> DirtiesContextBeforeModesTestExecutionListener <@请参阅> DependencyInjectionTestExecutionListener <@请参阅> DirtiesContextTestExecutionListener <@请参阅>事件发布stractTransactionalTestNGSpringContextTests 
 * @see  org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests
 */
@TestExecutionListeners({ ServletTestExecutionListener.class, DirtiesContextBeforeModesTestExecutionListener.class,
	DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class,
	EventPublishingTestExecutionListener.class })
public abstract class AbstractTestNGSpringContextTests implements IHookable, ApplicationContextAware {

	/** Logger available to subclasses. */
	/**
	 * 记录器可用于子类。 
	 * 
	 */
	protected final Log logger = LogFactory.getLog(getClass());

	/**
	 * The {@link ApplicationContext} that was injected into this test instance
	 * via {@link #setApplicationContext(ApplicationContext)}.
	 */
	/**
	 * 通过{@link  #setApplicationContext（ApplicationContext）}注入到此测试实例中的{@link  ApplicationContext}。 
	 * 
	 */
	@Nullable
	protected ApplicationContext applicationContext;

	private final TestContextManager testContextManager;

	@Nullable
	private Throwable testException;


	/**
	 * Construct a new {@code AbstractTestNGSpringContextTests} instance and initialize
	 * the internal {@link TestContextManager} for the current test class.
	 */
	/**
	 * 构造一个新的{@code  AbstractTestNGSpringContextTests}实例，并为当前测试类初始化内部{@link  TestContextManager}。 
	 * 
	 */
	public AbstractTestNGSpringContextTests() {
		this.testContextManager = new TestContextManager(getClass());
	}

	/**
	 * Set the {@link ApplicationContext} to be used by this test instance,
	 * provided via {@link ApplicationContextAware} semantics.
	 * @param applicationContext the ApplicationContext that this test runs in
	 */
	/**
	 * 通过{@link  ApplicationContextAware}语义提供设置此测试实例要使用的{@link  ApplicationContext}。 
	 *  
	 * @param  applicationContext运行此测试的ApplicationContext
	 */
	@Override
	public final void setApplicationContext(ApplicationContext applicationContext) {
		this.applicationContext = applicationContext;
	}


	/**
	 * Delegates to the configured {@link TestContextManager} to call
	 * {@linkplain TestContextManager#beforeTestClass() 'before test class'} callbacks.
	 * @throws Exception if a registered TestExecutionListener throws an exception
	 */
	/**
	 * 委托给已配置的{@link  TestContextManager}来调用{@link  plain TestContextManager＃beforeTestClass（）'在测试类之前'}回调。 
	 *  
	 * @throws 如果已注册的TestExecutionListener引发异常，则为异常
	 */
	@BeforeClass(alwaysRun = true)
	protected void springTestContextBeforeTestClass() throws Exception {
		this.testContextManager.beforeTestClass();
	}

	/**
	 * Delegates to the configured {@link TestContextManager} to
	 * {@linkplain TestContextManager#prepareTestInstance(Object) prepare} this test
	 * instance prior to execution of any individual tests, for example for
	 * injecting dependencies, etc.
	 * @throws Exception if a registered TestExecutionListener throws an exception
	 */
	/**
	 * 在执行任何单个测试（例如，注入依赖项等）之前，将已配置的{@link  TestContextManager}委派给{@link  plain TestContextManager＃prepareTestInstance（Object）prepare}此测试实例。 
	 * 
	 * @throws 异常如果已注册的TestExecutionListener抛出异常
	 */
	@BeforeClass(alwaysRun = true, dependsOnMethods = "springTestContextBeforeTestClass")
	protected void springTestContextPrepareTestInstance() throws Exception {
		this.testContextManager.prepareTestInstance(this);
	}

	/**
	 * Delegates to the configured {@link TestContextManager} to
	 * {@linkplain TestContextManager#beforeTestMethod(Object,Method) pre-process}
	 * the test method before the actual test is executed.
	 * @param testMethod the test method which is about to be executed
	 * @throws Exception allows all exceptions to propagate
	 */
	/**
	 * 委派已配置的{@link  TestContextManager}到{@link  plain TestContextManager＃beforeTestMethod（Object，Method）预处理}测试方法，然后执行实际测试。 
	 *  
	 * @param  testMethod即将执行的测试方法
	 * @throws 异常允许传播所有异常
	 */
	@BeforeMethod(alwaysRun = true)
	protected void springTestContextBeforeTestMethod(Method testMethod) throws Exception {
		this.testContextManager.beforeTestMethod(this, testMethod);
	}

	/**
	 * Delegates to the {@linkplain IHookCallBack#runTestMethod(ITestResult) test
	 * method} in the supplied {@code callback} to execute the actual test
	 * and then tracks the exception thrown during test execution, if any.
	 * @see org.testng.IHookable#run(IHookCallBack, ITestResult)
	 */
	/**
	 * 委托提供的{@code 回调}中的{@link  plain IHookCallBack＃runTestMethod（ITestResult）测试方法}来执行实际测试，然后跟踪在测试执行过程中引发的异常（如果有）。 
	 *  
	 * @see  org.testng.IHookable＃run（IHookCallBack，ITestResult）
	 */
	@Override
	public void run(IHookCallBack callBack, ITestResult testResult) {
		Method testMethod = testResult.getMethod().getConstructorOrMethod().getMethod();
		boolean beforeCallbacksExecuted = false;

		try {
			this.testContextManager.beforeTestExecution(this, testMethod);
			beforeCallbacksExecuted = true;
		}
		catch (Throwable ex) {
			this.testException = ex;
		}

		if (beforeCallbacksExecuted) {
			callBack.runTestMethod(testResult);
			this.testException = getTestResultException(testResult);
		}

		try {
			this.testContextManager.afterTestExecution(this, testMethod, this.testException);
		}
		catch (Throwable ex) {
			if (this.testException == null) {
				this.testException = ex;
			}
		}

		if (this.testException != null) {
			throwAsUncheckedException(this.testException);
		}
	}

	/**
	 * Delegates to the configured {@link TestContextManager} to
	 * {@linkplain TestContextManager#afterTestMethod(Object, Method, Throwable)
	 * post-process} the test method after the actual test has executed.
	 *
	 * @param testMethod the test method which has just been executed on the
	 * test instance
	 * @throws Exception allows all exceptions to propagate
	 */
	/**
	 * 在实际测试执行后，将已配置的{@link  TestContextManager}委派给{@link  TestContextManager＃afterTestMethod（Object，Method，Throwable）后处理}测试方法。 
	 *  
	 * @param  testMethod刚刚在测试实例上执行的测试方法
	 * @throws 异常允许传播所有异常
	 */
	@AfterMethod(alwaysRun = true)
	protected void springTestContextAfterTestMethod(Method testMethod) throws Exception {
		try {
			this.testContextManager.afterTestMethod(this, testMethod, this.testException);
		}
		finally {
			this.testException = null;
		}
	}

	/**
	 * Delegates to the configured {@link TestContextManager} to call
	 * {@linkplain TestContextManager#afterTestClass() 'after test class'} callbacks.
	 * @throws Exception if a registered TestExecutionListener throws an exception
	 */
	/**
	 * 委派给已配置的{@link  TestContextManager}来调用{@link  plain TestContextManager＃afterTestClass（）'测试类之后'}回调。 
	 *  
	 * @throws 如果已注册的TestExecutionListener引发异常，则为异常
	 */
	@AfterClass(alwaysRun = true)
	protected void springTestContextAfterTestClass() throws Exception {
		this.testContextManager.afterTestClass();
	}


	private Throwable getTestResultException(ITestResult testResult) {
		Throwable testResultException = testResult.getThrowable();
		if (testResultException instanceof InvocationTargetException) {
			testResultException = ((InvocationTargetException) testResultException).getCause();
		}
		return testResultException;
	}

	private RuntimeException throwAsUncheckedException(Throwable t) {
		throwAs(t);
		// Appeasing the compiler: the following line will never be executed.
		throw new IllegalStateException(t);
	}

	@SuppressWarnings("unchecked")
	private <T extends Throwable> void throwAs(Throwable t) throws T {
		throw (T) t;
	}

}
