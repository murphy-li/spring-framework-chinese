/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.transaction;

import org.springframework.test.context.TestExecutionListeners;
import org.springframework.transaction.TransactionStatus;
import org.springframework.util.Assert;

/**
 * {@code TestTransaction} provides a collection of static utility methods for
 * programmatic interaction with <em>test-managed transactions</em> within
 * <em>test</em> methods, <em>before</em> methods, and <em>after</em> methods.
 *
 * <p>Consult the javadocs for {@link TransactionalTestExecutionListener}
 * for a detailed explanation of <em>test-managed transactions</em>.
 *
 * <p>Support for {@code TestTransaction} is automatically available whenever
 * the {@code TransactionalTestExecutionListener} is enabled. Note that the
 * {@code TransactionalTestExecutionListener} is typically enabled by default,
 * but it can also be manually enabled via the
 * {@link TestExecutionListeners @TestExecutionListeners} annotation.
 *
 * @author Sam Brannen
 * @since 4.1
 * @see TransactionalTestExecutionListener
 */
/**
 * {@code  TestTransaction}提供了一组静态实用程序方法，用于与<em> test </ em>方法，<em> before </ em>方法中的<em>测试管理的交易</ em>进行编程交互。 
 * 和<em> after </ em>方法。 
 *  <p>请咨询{@link  TransactionalTestExecutionListener}的javadocs，以详细了解<em>测试管理的交易</ em>。 
 * 每当启用{@code  TransactionalTestExecutionListener}时，<p>对{@code  TestTransaction}的支持就会自动可用。 
 * 请注意，通常默认情况下启用{@code  TransactionalTestExecutionListener}，但也可以通过{@link  TestExecutionListeners @TestExecutionListeners}注释手动启用它。 
 *  @author  Sam Brannen @从4.1开始
 * @see  TransactionalTestExecutionListener
 */
public final class TestTransaction {


	private TestTransaction() {
	}


	/**
	 * Determine whether a test-managed transaction is currently <em>active</em>.
	 * @return {@code true} if a test-managed transaction is currently active
	 * @see #start()
	 * @see #end()
	 */
	/**
	 * 确定测试管理的事务当前是否<em>活动</ em>。 
	 *  
	 * @return  {@code  true}，如果一个测试管理的事务当前处于活动状态
	 * @see  #start（）
	 * @see  #end（）
	 */
	public static boolean isActive() {
		TransactionContext transactionContext = TransactionContextHolder.getCurrentTransactionContext();
		if (transactionContext != null) {
			TransactionStatus transactionStatus = transactionContext.getTransactionStatus();
			return (transactionStatus != null && !transactionStatus.isCompleted());
		}
		return false;
	}

	/**
	 * Determine whether the current test-managed transaction has been
	 * {@linkplain #flagForRollback() flagged for rollback} or
	 * {@linkplain #flagForCommit() flagged for commit}.
	 * @return {@code true} if the current test-managed transaction is flagged
	 * to be rolled back; {@code false} if the current test-managed transaction
	 * is flagged to be committed
	 * @throws IllegalStateException if a transaction is not active for the
	 * current test
	 * @see #isActive()
	 * @see #flagForRollback()
	 * @see #flagForCommit()
	 */
	/**
	 * 确定当前测试管理的事务是否已被{@link  plain #flagForRollback（）标记为回滚}或{@link  plain #flagForCommit（）被标记为提交}。 
	 *  
	 * @return  {@code  true}，如果当前测试管理的事务被标记为回滚； 
	 *  {@code  false}如果将当前测试管理的事务标记为已提交，则提交为
	 * @throws  IllegalStateException如果当前测试的事务未激活
	 * @see  #isActive（）
	 * @see  #flagForRollback（） 
	 * @see  #flagForCommit（）
	 */
	public static boolean isFlaggedForRollback() {
		return requireCurrentTransactionContext().isFlaggedForRollback();
	}

	/**
	 * Flag the current test-managed transaction for <em>rollback</em>.
	 * <p>Invoking this method will <em>not</em> end the current transaction.
	 * Rather, the value of this flag will be used to determine whether or not
	 * the current test-managed transaction should be rolled back or committed
	 * once it is {@linkplain #end ended}.
	 * @throws IllegalStateException if no transaction is active for the current test
	 * @see #isActive()
	 * @see #isFlaggedForRollback()
	 * @see #start()
	 * @see #end()
	 */
	/**
	 * 将当前测试管理的事务标记为<em>回滚</ em>。 
	 *  <p>调用此方法将<em>不</ em>结束当前交易。 
	 * 而是，此标志的值将用于确定当前测试托管事务在{@link  plain #end end}后是否应回滚或提交。 
	 *  
	 * @throws  IllegalStateException如果当前测试中没有事务处于活动状态
	 * @see  #isActive（）
	 * @see  #isFlaggedForRollback（）
	 * @see  #start（）
	 * @see  #end（）
	 */
	public static void flagForRollback() {
		setFlaggedForRollback(true);
	}

	/**
	 * Flag the current test-managed transaction for <em>commit</em>.
	 * <p>Invoking this method will <em>not</em> end the current transaction.
	 * Rather, the value of this flag will be used to determine whether or not
	 * the current test-managed transaction should be rolled back or committed
	 * once it is {@linkplain #end ended}.
	 * @throws IllegalStateException if no transaction is active for the current test
	 * @see #isActive()
	 * @see #isFlaggedForRollback()
	 * @see #start()
	 * @see #end()
	 */
	/**
	 * 将当前测试管理的事务标记为<em> commit </ em>。 
	 *  <p>调用此方法将<em>不</ em>结束当前交易。 
	 * 而是，此标志的值将用于确定当前测试托管事务在{@link  plain #end end}后是否应回滚或提交。 
	 *  
	 * @throws  IllegalStateException如果当前测试中没有事务处于活动状态
	 * @see  #isActive（）
	 * @see  #isFlaggedForRollback（）
	 * @see  #start（）
	 * @see  #end（）
	 */
	public static void flagForCommit() {
		setFlaggedForRollback(false);
	}

	/**
	 * Start a new test-managed transaction.
	 * <p>Only call this method if {@link #end} has been called or if no
	 * transaction has been previously started.
	 * @throws IllegalStateException if the transaction context could not be
	 * retrieved or if a transaction is already active for the current test
	 * @see #isActive()
	 * @see #end()
	 */
	/**
	 * 启动一个新的测试管理的事务。 
	 *  <p>仅当已调用{@link  #end}或先前未启动任何事务时，才调用此方法。 
	 *  
	 * @throws  IllegalStateException如果无法检索事务上下文或当前测试中事务已经处于活动状态
	 * @see  #isActive（）
	 * @see  #end（）
	 */
	public static void start() {
		requireCurrentTransactionContext().startTransaction();
	}

	/**
	 * Immediately force a <em>commit</em> or <em>rollback</em> of the
	 * current test-managed transaction, according to the
	 * {@linkplain #isFlaggedForRollback rollback flag}.
	 * @throws IllegalStateException if the transaction context could not be
	 * retrieved or if a transaction is not active for the current test
	 * @see #isActive()
	 * @see #start()
	 */
	/**
	 * 根据{@link  plain #isFlaggedForRollback回滚标志}，立即强制当前测试管理事务的<em> commit </ em>或<em> rollback </ em>。 
	 *  
	 * @throws  IllegalStateException如果无法检索事务上下文或当前测试中事务未激活
	 * @see  #isActive（）
	 * @see  #start（）
	 */
	public static void end() {
		requireCurrentTransactionContext().endTransaction();
	}


	private static TransactionContext requireCurrentTransactionContext() {
		TransactionContext txContext = TransactionContextHolder.getCurrentTransactionContext();
		Assert.state(txContext != null, "TransactionContext is not active");
		return txContext;
	}

	private static void setFlaggedForRollback(boolean flag) {
		requireCurrentTransactionContext().setFlaggedForRollback(flag);
	}

}
