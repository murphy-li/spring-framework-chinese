/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.support;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.beans.BeanUtils;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextException;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.GenericTypeResolver;
import org.springframework.core.annotation.AnnotationAwareOrderComparator;
import org.springframework.core.env.PropertySource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.test.context.ContextConfigurationAttributes;
import org.springframework.test.context.ContextCustomizer;
import org.springframework.test.context.ContextLoader;
import org.springframework.test.context.MergedContextConfiguration;
import org.springframework.test.context.SmartContextLoader;
import org.springframework.test.context.util.TestContextResourceUtils;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.util.ResourceUtils;

/**
 * Abstract application context loader that provides a basis for all concrete
 * implementations of the {@link ContextLoader} SPI. Provides a
 * <em>Template Method</em> based approach for {@link #processLocations processing}
 * resource locations.
 *
 * <p>As of Spring 3.1, {@code AbstractContextLoader} also provides a basis
 * for all concrete implementations of the {@link SmartContextLoader} SPI. For
 * backwards compatibility with the {@code ContextLoader} SPI,
 * {@link #processContextConfiguration(ContextConfigurationAttributes)} delegates
 * to {@link #processLocations(Class, String...)}.
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @author Phillip Webb
 * @since 2.5
 * @see #generateDefaultLocations
 * @see #getResourceSuffixes
 * @see #modifyLocations
 * @see #prepareContext
 * @see #customizeContext
 */
/**
 * 抽象应用程序上下文加载器，为{@link  ContextLoader} SPI的所有具体实现提供基础。 
 * 为{@link  #processLocations处理}资源位置提供基于<em> Template方法</ em>的方法。 
 *  <p>从Spring 3.1开始，{<@code> AbstractContextLoader}还为{@link  SmartContextLoader} SPI的所有具体实现提供了基础。 
 * 为了与{@code  ContextLoader} SPI向后兼容，{<@link> #processContextConfiguration（ContextConfigurationAttributes）}委托给{@link  #processLocations（Class，String ...）}。 
 *  @author  Sam Brannen @author  Juergen Hoeller @author  Phillip Webb @since 2.5 
 * @see  #generateDefaultLocations 
 * @see  #getResourceSuffixes 
 * @see  #modifyLocations 
 * @see  #prepareContext 
 * @see ＃ customContext
 */
public abstract class AbstractContextLoader implements SmartContextLoader {

	private static final String[] EMPTY_STRING_ARRAY = new String[0];

	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);


	// SmartContextLoader

	/**
	 * For backwards compatibility with the {@link ContextLoader} SPI, the
	 * default implementation simply delegates to {@link #processLocations(Class, String...)},
	 * passing it the {@link ContextConfigurationAttributes#getDeclaringClass()
	 * declaring class} and {@link ContextConfigurationAttributes#getLocations()
	 * resource locations} retrieved from the supplied
	 * {@link ContextConfigurationAttributes configuration attributes}. The
	 * processed locations are then
	 * {@link ContextConfigurationAttributes#setLocations(String[]) set} in
	 * the supplied configuration attributes.
	 * <p>Can be overridden in subclasses &mdash; for example, to process
	 * annotated classes instead of resource locations.
	 * @since 3.1
	 * @see #processLocations(Class, String...)
	 */
	/**
	 * 为了与{@link  ContextLoader} SPI向后兼容，默认实现只是将委托委托给{@link  #processLocations（Class，String ...）}，并将其传递给{@link  ContextConfigurationAttributes＃getDeclaringClass（）从提供的{@link  ContextConfigurationAttributes配置属性}中检索到的声明类}和{@link  ContextConfigurationAttributes＃getLocations（）资源位置}。 
	 * 然后，在提供的配置属性中{@link  ContextConfigurationAttributes＃setLocations（String []）set}设置已处理的位置。 
	 *  <p>可以在子类中重写-例如，处理带注释的类而不是资源位置。 
	 *  @since 3.1 
	 * @see  #processLocations（Class，String ...）
	 */
	@Override
	public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {
		String[] processedLocations =
				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());
		configAttributes.setLocations(processedLocations);
	}

	/**
	 * Prepare the {@link ConfigurableApplicationContext} created by this
	 * {@code SmartContextLoader} <i>before</i> bean definitions are read.
	 * <p>The default implementation:
	 * <ul>
	 * <li>Sets the <em>active bean definition profiles</em> from the supplied
	 * {@code MergedContextConfiguration} in the
	 * {@link org.springframework.core.env.Environment Environment} of the
	 * context.</li>
	 * <li>Adds {@link PropertySource PropertySources} for all
	 * {@linkplain MergedContextConfiguration#getPropertySourceLocations()
	 * resource locations} and
	 * {@linkplain MergedContextConfiguration#getPropertySourceProperties()
	 * inlined properties} from the supplied {@code MergedContextConfiguration}
	 * to the {@code Environment} of the context.</li>
	 * <li>Determines what (if any) context initializer classes have been supplied
	 * via the {@code MergedContextConfiguration} and instantiates and
	 * {@linkplain ApplicationContextInitializer#initialize invokes} each with the
	 * given application context.
	 * <ul>
	 * <li>Any {@code ApplicationContextInitializers} implementing
	 * {@link org.springframework.core.Ordered Ordered} or annotated with {@link
	 * org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>
	 * </ul>
	 * </li>
	 * </ul>
	 * @param context the newly created application context
	 * @param mergedConfig the merged context configuration
	 * @since 3.2
	 * @see TestPropertySourceUtils#addPropertiesFilesToEnvironment
	 * @see TestPropertySourceUtils#addInlinedPropertiesToEnvironment
	 * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)
	 * @see #loadContext(MergedContextConfiguration)
	 * @see ConfigurableApplicationContext#setId
	 */
	/**
	 * 在读取bean定义之前，请准备此{@code  SmartContextLoader}创建的{@link  ConfigurableApplicationContext}。 
	 *  <p>默认实现：<ul> <li>从{@link  org.springframework.core.env中提供的{@code  MergedContextConfiguration}中设置<em>活动bean定义配置文件</ em> </ li> <li>为所有{@link  plain MergedContextConfiguration＃getPropertySourceLocations（）资源位置}和{@link  plain MergedContextConfiguration＃getPropertySourceProperties添加{{@link> PropertySource PropertySources} （）内联属性}，从提供的{@code  MergedContextConfiguration}到上下文的{@code  Environment}。 
	 * </ li> <li>确定通过{提供了哪些（如果有的话）上下文初始化器类@code  MergedContextConfiguration}并实例化和{@link  plain ApplicationContextInitializer＃initialize invokes}与给定的应用程序上下文。 
	 *  <ul> <li>任何实施{@link  org.springframework.core.Ordered Ordered}或用{@link  org.springframework.core.annotation.Order @Order}注释的{@code  ApplicationContextInitializers} </ li> </ ul> </ li> </ ul> </ ul> 
	 * @param 上下文新创建的应用程序上下文
	 * @param  mergedConfig合并后的上下文配置@3.2起，@
	 * @see> TestPropertySourceUtils＃addPropertiesFilesToEnvironment 
	 * @see  TestPropertySourceUtils＃addInlinedPropertiesToEnvironment 
	 * @see  ApplicationContextInitializer＃initialize（ConfigurableApplicationContext）
	 * @see  #loadContext（MergedContextConfiguration）
	 * @see  ConfigurableApplicationContext＃setId
	 */
	protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {
		context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles());
		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations());
		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties());
		invokeApplicationContextInitializers(context, mergedConfig);
	}

	@SuppressWarnings("unchecked")
	private void invokeApplicationContextInitializers(ConfigurableApplicationContext context,
			MergedContextConfiguration mergedConfig) {

		Set<Class<? extends ApplicationContextInitializer<?>>> initializerClasses =
				mergedConfig.getContextInitializerClasses();
		if (initializerClasses.isEmpty()) {
			// no ApplicationContextInitializers have been declared -> nothing to do
			return;
		}

		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances = new ArrayList<>();
		Class<?> contextClass = context.getClass();

		for (Class<? extends ApplicationContextInitializer<?>> initializerClass : initializerClasses) {
			Class<?> initializerContextClass =
					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);
			if (initializerContextClass != null && !initializerContextClass.isInstance(context)) {
				throw new ApplicationContextException(String.format(
						"Could not apply context initializer [%s] since its generic parameter [%s] " +
						"is not assignable from the type of application context used by this " +
						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),
						contextClass.getName()));
			}
			initializerInstances.add((ApplicationContextInitializer<ConfigurableApplicationContext>) BeanUtils.instantiateClass(initializerClass));
		}

		AnnotationAwareOrderComparator.sort(initializerInstances);
		for (ApplicationContextInitializer<ConfigurableApplicationContext> initializer : initializerInstances) {
			initializer.initialize(context);
		}
	}

	/**
	 * Customize the {@link ConfigurableApplicationContext} created by this
	 * {@code ContextLoader} <em>after</em> bean definitions have been loaded
	 * into the context but <em>before</em> the context has been refreshed.
	 * <p>The default implementation delegates to all
	 * {@link MergedContextConfiguration#getContextCustomizers context customizers}
	 * that have been registered with the supplied {@code mergedConfig}.
	 * @param context the newly created application context
	 * @param mergedConfig the merged context configuration
	 * @since 4.3
	 */
	/**
	 * 自定义此{@code  ContextLoader}创建的{@link  ConfigurableApplicationContext}，在将bean定义加载到上下文中之后，但在<em>之前</ em>中，刷新上下文。 
	 *  <p>默认实现将委托给所有{@link  MergedContextConfiguration＃getContextCustomizers上下文定制器}的对象，这些{}已使用提供的{@code  mergedConfig}注册。 
	 *  
	 * @param 上下文新创建的应用程序上下文
	 * @param  mergedConfig合并的上下文配置@4.3起
	 */
	protected void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {
		for (ContextCustomizer contextCustomizer : mergedConfig.getContextCustomizers()) {
			contextCustomizer.customizeContext(context, mergedConfig);
		}
	}


	// ContextLoader

	/**
	 * If the supplied {@code locations} are {@code null} or <em>empty</em>
	 * and {@link #isGenerateDefaultLocations()} returns {@code true},
	 * default locations will be {@link #generateDefaultLocations(Class)
	 * generated} (i.e., detected) for the specified {@link Class class}
	 * and the configured {@linkplain #getResourceSuffixes() resource suffixes};
	 * otherwise, the supplied {@code locations} will be
	 * {@linkplain #modifyLocations modified} if necessary and returned.
	 * @param clazz the class with which the locations are associated: to be
	 * used when generating default locations
	 * @param locations the unmodified locations to use for loading the
	 * application context (can be {@code null} or empty)
	 * @return a processed array of application context resource locations
	 * @since 2.5
	 * @see #isGenerateDefaultLocations()
	 * @see #generateDefaultLocations(Class)
	 * @see #modifyLocations(Class, String...)
	 * @see org.springframework.test.context.ContextLoader#processLocations(Class, String...)
	 * @see #processContextConfiguration(ContextConfigurationAttributes)
	 */
	/**
	 * 如果提供的{@code 位置}为{@code  null}或<em>空</ em>，并且{@link  #isGenerateDefaultLocations（）}返回{@code  true}，则默认位置将为为指定的{@link  Class class}和配置的{@link  plain #getResourceSuffixes（）资源后缀} {{@link> #generateDefaultLocations（Class）Generated}}（即检测到）； 
	 * 否则，如有必要，将提供的{@code 位置}进行{@link  plain #modifyLocations修改}并返回。 
	 *  
	 * @param 讨论与位置相关的类：在生成默认位置时使用。 
	 * 
	 * @param 位置用于加载应用程序上下文的未修改位置（可以为{@code  null}或为空）
	 * @return 应用程序上下文资源位置的已处理数组@从2.5开始
	 * @see  #isGenerateDefaultLocations（）
	 * @see  #generateDefaultLocations（Class）
	 * @see  #modifyLocations（Class，String ...）
	 * @see  org .springframework.test.context.ContextLoader＃processLocations（Class，String ...）
	 * @see  #processContextConfiguration（ContextConfigurationAttributes）
	 */
	@Override
	public final String[] processLocations(Class<?> clazz, String... locations) {
		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?
				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);
	}

	/**
	 * Generate the default classpath resource locations array based on the
	 * supplied class.
	 * <p>For example, if the supplied class is {@code com.example.MyTest},
	 * the generated locations will contain a single string with a value of
	 * {@code "classpath:com/example/MyTest<suffix>"}, where {@code <suffix>}
	 * is the value of the first configured
	 * {@linkplain #getResourceSuffixes() resource suffix} for which the
	 * generated location actually exists in the classpath.
	 * <p>As of Spring 3.1, the implementation of this method adheres to the
	 * contract defined in the {@link SmartContextLoader} SPI. Specifically,
	 * this method will <em>preemptively</em> verify that the generated default
	 * location actually exists. If it does not exist, this method will log a
	 * warning and return an empty array.
	 * <p>Subclasses can override this method to implement a different
	 * <em>default location generation</em> strategy.
	 * @param clazz the class for which the default locations are to be generated
	 * @return an array of default application context resource locations
	 * @since 2.5
	 * @see #getResourceSuffixes()
	 */
	/**
	 * 根据提供的类生成默认的类路径资源位置数组。 
	 *  <p>例如，如果提供的类为{@code  com.example.MyTest}，则生成的位置将包含一个值为{@code "classpath：com / example / MyTest <suffix"的单个字符串。 
	 *  >"}，其中{@code  <suffix>}是第一个配置的{@link  plain #getResourceSuffixes（）资源后缀}的值，为其生成的位置实际上存在于类路径中。 
	 *  <p>从Spring 3.1开始，此方法的实现遵循{@link  SmartContextLoader} SPI中定义的约定。 
	 * 具体来说，此方法将<em>抢先</ em>验证生成的默认位置是否确实存在。 
	 * 如果不存在，则此方法将记录警告并返回一个空数组。 
	 *  <p>子类可以重写此方法以实现不同的<em>默认位置生成</ em>策略。 
	 *  
	 * @param 讨论将为其生成默认位置的类
	 * @return 一组默认应用程序上下文资源位置@自2.5起
	 * @see  #getResourceSuffixes（）
	 */
	protected String[] generateDefaultLocations(Class<?> clazz) {
		Assert.notNull(clazz, "Class must not be null");

		String[] suffixes = getResourceSuffixes();
		for (String suffix : suffixes) {
			Assert.hasText(suffix, "Resource suffix must not be empty");
			String resourcePath = ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix;
			ClassPathResource classPathResource = new ClassPathResource(resourcePath);
			if (classPathResource.exists()) {
				String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath;
				if (logger.isInfoEnabled()) {
					logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",
							prefixedResourcePath, clazz.getName()));
				}
				return new String[] {prefixedResourcePath};
			}
			else if (logger.isDebugEnabled()) {
				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +
						"%s does not exist", clazz.getName(), classPathResource));
			}
		}

		if (logger.isInfoEnabled()) {
			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +
					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)));
		}

		return EMPTY_STRING_ARRAY;
	}

	/**
	 * Generate a modified version of the supplied locations array and return it.
	 * <p>The default implementation simply delegates to
	 * {@link TestContextResourceUtils#convertToClasspathResourcePaths}.
	 * <p>Subclasses can override this method to implement a different
	 * <em>location modification</em> strategy.
	 * @param clazz the class with which the locations are associated
	 * @param locations the resource locations to be modified
	 * @return an array of modified application context resource locations
	 * @since 2.5
	 */
	/**
	 * 生成所提供的locations数组的修改版本并返回。 
	 *  <p>默认实现只是将其委托给{@link  TestContextResourceUtils＃convertToClasspathResourcePaths}。 
	 *  <p>子类可以重写此方法以实现不同的<em>位置修改</ em>策略。 
	 *  
	 * @param 讲究与位置相关联的类
	 * @param 位置要修改的资源位置
	 * @return 修改后的应用程序上下文资源位置的数组，自2.5起
	 */
	protected String[] modifyLocations(Class<?> clazz, String... locations) {
		return TestContextResourceUtils.convertToClasspathResourcePaths(clazz, locations);
	}

	/**
	 * Determine whether or not <em>default</em> resource locations should be
	 * generated if the {@code locations} provided to
	 * {@link #processLocations(Class, String...)} are {@code null} or empty.
	 * <p>As of Spring 3.1, the semantics of this method have been overloaded
	 * to include detection of either default resource locations or default
	 * configuration classes. Consequently, this method can also be used to
	 * determine whether or not <em>default</em> configuration classes should be
	 * detected if the {@code classes} present in the
	 * {@link ContextConfigurationAttributes configuration attributes} supplied
	 * to {@link #processContextConfiguration(ContextConfigurationAttributes)}
	 * are {@code null} or empty.
	 * <p>Can be overridden by subclasses to change the default behavior.
	 * @return always {@code true} by default
	 * @since 2.5
	 */
	/**
	 * 确定如果提供给{@link  #processLocations（Class，String ...）}的{@code 位置}为{@code ，则是否生成<em>默认</ em>资源位置null}或为空。 
	 *  <p>从Spring 3.1开始，此方法的语义已重载以包括检测默认资源位置或默认配置类。 
	 * 因此，如果提供给{的{@link  ContextConfigurationAttributes配置属性}中的{@code 类}存在，则此方法还可用于确定是否应检测<em> default </ em>配置类。 
	 *  @link  #processContextConfiguration（ContextConfigurationAttributes）}为{@code  null}或为空。 
	 *  <p>可以被子类覆盖以更改默认行为。 
	 *  
	 * @return 始终默认为{@code  true}，从2.5开始
	 */
	protected boolean isGenerateDefaultLocations() {
		return true;
	}

	/**
	 * Get the suffixes to append to {@link ApplicationContext} resource locations
	 * when detecting default locations.
	 * <p>The default implementation simply wraps the value returned by
	 * {@link #getResourceSuffix()} in a single-element array, but this
	 * can be overridden by subclasses in order to support multiple suffixes.
	 * @return the resource suffixes; never {@code null} or empty
	 * @since 4.1
	 * @see #generateDefaultLocations(Class)
	 */
	/**
	 * 检测默认位置时，获取后缀以附加到{@link  ApplicationContext}资源位置。 
	 *  <p>默认实现只是将{@link  #getResourceSuffix（）}返回的值包装在一个单元素数组中，但是子类可以重写此值以支持多个后缀。 
	 *  
	 * @return 资源后缀； 
	 * 永远不要{@code  null}或为空，因为4.1起
	 * @see  #generateDefaultLocations（Class）
	 */
	protected String[] getResourceSuffixes() {
		return new String[] {getResourceSuffix()};
	}

	/**
	 * Get the suffix to append to {@link ApplicationContext} resource locations
	 * when detecting default locations.
	 * <p>Subclasses must provide an implementation of this method that returns
	 * a single suffix. Alternatively subclasses may provide a  <em>no-op</em>
	 * implementation of this method and override {@link #getResourceSuffixes()}
	 * in order to provide multiple custom suffixes.
	 * @return the resource suffix; never {@code null} or empty
	 * @since 2.5
	 * @see #generateDefaultLocations(Class)
	 * @see #getResourceSuffixes()
	 */
	/**
	 * 检测默认位置时，获取后缀以附加到{@link  ApplicationContext}资源位置。 
	 *  <p>子类必须提供此方法的实现，该方法返回单个后缀。 
	 * 另外，子类可以提供此方法的<em> no-op </ em>实现，并覆盖{@link  #getResourceSuffixes（）}，以提供多个自定义后缀。 
	 *  
	 * @return 资源后缀； 
	 * 永不{@code  null}或为空@since 2.5 
	 * @see  #generateDefaultLocations（Class）
	 * @see  #getResourceSuffixes（）
	 */
	protected abstract String getResourceSuffix();

}
