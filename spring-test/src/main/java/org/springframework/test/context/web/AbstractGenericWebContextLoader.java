/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.web;

import javax.servlet.ServletContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.AnnotationConfigUtils;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.FileSystemResourceLoader;
import org.springframework.core.io.ResourceLoader;
import org.springframework.mock.web.MockServletContext;
import org.springframework.test.context.MergedContextConfiguration;
import org.springframework.test.context.support.AbstractContextLoader;
import org.springframework.util.Assert;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.GenericWebApplicationContext;

/**
 * Abstract, generic extension of {@link AbstractContextLoader} that loads a
 * {@link GenericWebApplicationContext}.
 *
 * <p>If instances of concrete subclasses are invoked via the
 * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader}
 * SPI, the context will be loaded from the {@link MergedContextConfiguration}
 * provided to {@link #loadContext(MergedContextConfiguration)}. In such cases, a
 * {@code SmartContextLoader} will decide whether to load the context from
 * <em>locations</em> or <em>annotated classes</em>. Note that {@code
 * AbstractGenericWebContextLoader} does not support the {@code
 * loadContext(String... locations)} method from the legacy
 * {@link org.springframework.test.context.ContextLoader ContextLoader} SPI.
 *
 * <p>Concrete subclasses must provide an appropriate implementation of
 * {@link #loadBeanDefinitions}.
 *
 * @author Sam Brannen
 * @author Phillip Webb
 * @since 3.2
 * @see #loadContext(MergedContextConfiguration)
 * @see #loadContext(String...)
 */
/**
 * {@link  AbstractContextLoader}的抽象，泛型扩展，用于加载{@link  GenericWebApplicationContext}。 
 *  <p>如果通过{@link  org.springframework.test.context.SmartContextLoader SmartContextLoader} SPI调用具体子类的实例，则将从提供给{<@link的{@link  MergedContextConfiguration} > #loadContext（MergedContextConfiguration）}。 
 * 在这种情况下，{<@code> SmartContextLoader}将决定是从<em>位置</ em>还是<em>带注释的类</ em>加载上下文。 
 * 请注意，{<@code> AbstractGenericWebContextLoader}不支持旧版{@link  org.springframework.test.context.ContextLoader ContextLoader} SPI中的{@code  loadContext（String ... location）}方法。 
 *  <p>混凝土子类必须提供{@link  #loadBeanDefinitions}的适当实现。 
 *  @author  Sam Brannen @author 菲利普·韦伯（Phillip Webb）自3.2起
 * @see  #loadContext（MergedContextConfiguration）
 * @see  #loadContext（String ...）
 */
public abstract class AbstractGenericWebContextLoader extends AbstractContextLoader {

	protected static final Log logger = LogFactory.getLog(AbstractGenericWebContextLoader.class);


	// SmartContextLoader

	/**
	 * Load a Spring {@link WebApplicationContext} from the supplied
	 * {@link MergedContextConfiguration}.
	 * <p>Implementation details:
	 * <ul>
	 * <li>Calls {@link #validateMergedContextConfiguration(WebMergedContextConfiguration)}
	 * to allow subclasses to validate the supplied configuration before proceeding.</li>
	 * <li>Creates a {@link GenericWebApplicationContext} instance.</li>
	 * <li>If the supplied {@code MergedContextConfiguration} references a
	 * {@linkplain MergedContextConfiguration#getParent() parent configuration},
	 * the corresponding {@link MergedContextConfiguration#getParentApplicationContext()
	 * ApplicationContext} will be retrieved and
	 * {@linkplain GenericWebApplicationContext#setParent(ApplicationContext) set as the parent}
	 * for the context created by this method.</li>
	 * <li>Delegates to {@link #configureWebResources} to create the
	 * {@link MockServletContext} and set it in the {@code WebApplicationContext}.</li>
	 * <li>Calls {@link #prepareContext} to allow for customizing the context
	 * before bean definitions are loaded.</li>
	 * <li>Calls {@link #customizeBeanFactory} to allow for customizing the
	 * context's {@code DefaultListableBeanFactory}.</li>
	 * <li>Delegates to {@link #loadBeanDefinitions} to populate the context
	 * from the locations or classes in the supplied {@code MergedContextConfiguration}.</li>
	 * <li>Delegates to {@link AnnotationConfigUtils} for
	 * {@linkplain AnnotationConfigUtils#registerAnnotationConfigProcessors registering}
	 * annotation configuration processors.</li>
	 * <li>Calls {@link #customizeContext} to allow for customizing the context
	 * before it is refreshed.</li>
	 * <li>{@link ConfigurableApplicationContext#refresh Refreshes} the
	 * context and registers a JVM shutdown hook for it.</li>
	 * </ul>
	 * @return a new web application context
	 * @see org.springframework.test.context.SmartContextLoader#loadContext(MergedContextConfiguration)
	 * @see GenericWebApplicationContext
	 */
	/**
	 * 从提供的{@link  MergedContextConfiguration}加载Spring {@link  WebApplicationContext}。 
	 *  <p>实施细节：<ul> <li>调用{@link  #validateMergedContextConfiguration（WebMergedContextConfiguration）}以允许子类在继续之前验证提供的配置。 
	 * </ li> <li>创建一个{@link  GenericWebApplicationContext }实例。 
	 * </ li> <li>如果提供的{@code  MergedContextConfiguration}引用了{@link  plain MergedContextConfiguration＃getParent（）父配置}，则对应的{@link  MergedContextConfiguration＃getParentApplicationContext（）ApplicationContext }，并将此方法创建的上下文的{@link  plain GenericWebApplicationContext＃setParent（ApplicationContext）设置为父级}。 
	 * </ li> <li>委托给{@link  #configureWebResources}来创建{@link  MockServletContext}并在{@code  WebApplicationContext}中进行设置。 
	 * </ li> <li>调用{@link  #prepareContext}以允许在加载bean定义之前自定义上下文。 
	 * </ li> li> <li>调用{@link  #customizeBeanFactory}以允许cus </ li> <li>委托给{@link  #loadBeanDefinitions}，以从提供的{@code  MergedContextConfiguration}中的位置或类填充上下文。 
	 * </ li> li> <li>代表{@link  AnnotationConfigUtils}进行{@link  plain AnnotationConfigUtils＃registerAnnotationConfigProcessors注册}注释配置处理器。 
	 * </ li> <li>调用{@link  #customizeContext}以允许自定义</ li> <li> {<@link> ConfigurableApplicationContext＃refresh刷新}上下文并为其注册一个JVM关闭钩子。 
	 * </ li> </ ul> 
	 * @return 一个新的站点应用程序上下文
	 * @see  org.springframework.test.context.SmartContextLoader＃loadContext（MergedContextConfiguration）
	 * @see  GenericWebApplicationContext
	 */
	@Override
	public final ConfigurableApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {
		Assert.isTrue(mergedConfig instanceof WebMergedContextConfiguration,
				() -> String.format("Cannot load WebApplicationContext from non-web merged context configuration %s. " +
						"Consider annotating your test class with @WebAppConfiguration.", mergedConfig));

		WebMergedContextConfiguration webMergedConfig = (WebMergedContextConfiguration) mergedConfig;

		if (logger.isDebugEnabled()) {
			logger.debug(String.format("Loading WebApplicationContext for merged context configuration %s.",
				webMergedConfig));
		}

		validateMergedContextConfiguration(webMergedConfig);

		GenericWebApplicationContext context = new GenericWebApplicationContext();

		ApplicationContext parent = mergedConfig.getParentApplicationContext();
		if (parent != null) {
			context.setParent(parent);
		}
		configureWebResources(context, webMergedConfig);
		prepareContext(context, webMergedConfig);
		customizeBeanFactory(context.getDefaultListableBeanFactory(), webMergedConfig);
		loadBeanDefinitions(context, webMergedConfig);
		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);
		customizeContext(context, webMergedConfig);
		context.refresh();
		context.registerShutdownHook();
		return context;
	}

	/**
	 * Validate the supplied {@link WebMergedContextConfiguration} with respect to
	 * what this context loader supports.
	 * <p>The default implementation is a <em>no-op</em> but can be overridden by
	 * subclasses as appropriate.
	 * @param mergedConfig the merged configuration to validate
	 * @throws IllegalStateException if the supplied configuration is not valid
	 * for this context loader
	 * @since 4.0.4
	 */
	/**
	 * 关于此上下文加载器支持的内容，验证提供的{@link  WebMergedContextConfiguration}。 
	 *  <p>默认实现是<em> no-op </ em>，但可以根据需要由子类覆盖。 
	 *  
	 * @param  mergedConfig合并的配置以验证
	 * @throws  IllegalStateException，如果提供的配置对此上下文加载器无效（自4.0.4开始）
	 */
	protected void validateMergedContextConfiguration(WebMergedContextConfiguration mergedConfig) {
		// no-op
	}

	/**
	 * Configures web resources for the supplied web application context (WAC).
	 * <h4>Implementation Details</h4>
	 * <p>If the supplied WAC has no parent or its parent is not a WAC, the
	 * supplied WAC will be configured as the Root WAC (see "<em>Root WAC
	 * Configuration</em>" below).
	 * <p>Otherwise the context hierarchy of the supplied WAC will be traversed
	 * to find the top-most WAC (i.e., the root); and the {@link ServletContext}
	 * of the Root WAC will be set as the {@code ServletContext} for the supplied
	 * WAC.
	 * <h4>Root WAC Configuration</h4>
	 * <ul>
	 * <li>The resource base path is retrieved from the supplied
	 * {@code WebMergedContextConfiguration}.</li>
	 * <li>A {@link ResourceLoader} is instantiated for the {@link MockServletContext}:
	 * if the resource base path is prefixed with "{@code classpath:}", a
	 * {@link DefaultResourceLoader} will be used; otherwise, a
	 * {@link FileSystemResourceLoader} will be used.</li>
	 * <li>A {@code MockServletContext} will be created using the resource base
	 * path and resource loader.</li>
	 * <li>The supplied {@link GenericWebApplicationContext} is then stored in
	 * the {@code MockServletContext} under the
	 * {@link WebApplicationContext#ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE} key.</li>
	 * <li>Finally, the {@code MockServletContext} is set in the
	 * {@code WebApplicationContext}.</li>
	 * </ul>
	 * @param context the web application context for which to configure the web resources
	 * @param webMergedConfig the merged context configuration to use to load the web application context
	 */
	/**
	 * 为提供的Web应用程序上下文（WAC）配置Web资源。 
	 *  <h4>实施细节</ h4> <p>如果提供的WAC没有父级，或者其父级不是WAC，则将提供的WAC配置为Root WAC（请参阅"<em> Root WAC配置</ em>""）。 
	 *  <p>否则，将遍历提供的WAC的上下文层次结构以找到最上面的WAC（即根）； 
	 * 根WAC的{@link  ServletContext}将设置为所提供WAC的{@code  ServletContext}。 
	 *  <h4>根WAC配置</ h4> <ul> <li>从提供的{@code  WebMergedContextConfiguration}中检索资源基本路径。 
	 * </ li> <li>实例化{@link  ResourceLoader}对于{@link  MockServletContext}：如果资源基础路径的前缀为"{@code  classpath：}"，则将使用{@link  DefaultResourceLoader}； 
	 * 否则，将使用{@link  FileSystemResourceLoader}。 
	 * </ li> <li>将使用资源基础路径和资源加载器创建一个{@code  MockServletContext}。 
	 * </ li> <li>所提供的然后，将{@link  GenericWebApplicationContext}存储在{@link  WebApplicationContext＃ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE}键下的{@code  MockServletContext}中。 
	 * </ li> <li>最后，{<@code> MockServletContext}是在{@code  WebApplicationContext}中设置。 
	 * </ li> </ ul> 
	 * @param 上下文要为其配置Web资源的Web应用程序上下文
	 * @param  webMergedConfig合并的上下文配置，用于加载Web应用环境
	 */
	protected void configureWebResources(GenericWebApplicationContext context,
			WebMergedContextConfiguration webMergedConfig) {

		ApplicationContext parent = context.getParent();

		// If the WebApplicationContext has no parent or the parent is not a WebApplicationContext,
		// set the current context as the root WebApplicationContext:
		if (parent == null || (!(parent instanceof WebApplicationContext))) {
			String resourceBasePath = webMergedConfig.getResourceBasePath();
			ResourceLoader resourceLoader = (resourceBasePath.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX) ?
					new DefaultResourceLoader() : new FileSystemResourceLoader());
			ServletContext servletContext = new MockServletContext(resourceBasePath, resourceLoader);
			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);
			context.setServletContext(servletContext);
		}
		else {
			ServletContext servletContext = null;
			// Find the root WebApplicationContext
			while (parent != null) {
				if (parent instanceof WebApplicationContext && !(parent.getParent() instanceof WebApplicationContext)) {
					servletContext = ((WebApplicationContext) parent).getServletContext();
					break;
				}
				parent = parent.getParent();
			}
			Assert.state(servletContext != null, "Failed to find root WebApplicationContext in the context hierarchy");
			context.setServletContext(servletContext);
		}
	}

	/**
	 * Customize the internal bean factory of the {@code WebApplicationContext}
	 * created by this context loader.
	 * <p>The default implementation is empty but can be overridden in subclasses
	 * to customize {@code DefaultListableBeanFactory}'s standard settings.
	 * @param beanFactory the bean factory created by this context loader
	 * @param webMergedConfig the merged context configuration to use to load the
	 * web application context
	 * @see #loadContext(MergedContextConfiguration)
	 * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding
	 * @see DefaultListableBeanFactory#setAllowEagerClassLoading
	 * @see DefaultListableBeanFactory#setAllowCircularReferences
	 * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping
	 */
	/**
	 * 自定义此上下文加载器创建的{@code  WebApplicationContext}的内部bean工厂。 
	 *  <p>默认实现为空，但可以在子类中重写以实现{@code  DefaultListableBeanFactory}的标准设置。 
	 *  
	 * @param  beanFactory由此上下文加载器创建的bean工厂
	 * @param  webMergedConfig用于加载Web应用程序上下文的合并上下文配置
	 * @see  #loadContext（MergedContextConfiguration） DefaultListableBeanFactory＃setAllowEagerClassLoading 
	 * @see  DefaultListableBeanFactory＃setAllowCircularReferences 
	 * @see  DefaultListableBeanFactory＃setAllowRawInjectionDespiteWrapping
	 */
	protected void customizeBeanFactory(
			DefaultListableBeanFactory beanFactory, WebMergedContextConfiguration webMergedConfig) {
	}

	/**
	 * Load bean definitions into the supplied {@link GenericWebApplicationContext context}
	 * from the locations or classes in the supplied {@code WebMergedContextConfiguration}.
	 * <p>Concrete subclasses must provide an appropriate implementation.
	 * @param context the context into which the bean definitions should be loaded
	 * @param webMergedConfig the merged context configuration to use to load the
	 * web application context
	 * @see #loadContext(MergedContextConfiguration)
	 */
	/**
	 * 从提供的{@code  WebMergedContextConfiguration}中的位置或类将bean定义加载到提供的{@link  GenericWebApplicationContext上下文}中。 
	 *  <p>具体的子类必须提供适当的实现。 
	 *  
	 * @param 上下文Bean定义应加载到的上下文
	 * @param  webMergedConfig合并的上下文配置，用于加载Web应用程序上下文
	 * @see  #loadContext（MergedContextConfiguration）
	 */
	protected abstract void loadBeanDefinitions(
			GenericWebApplicationContext context, WebMergedContextConfiguration webMergedConfig);

	/**
	 * Customize the {@link GenericWebApplicationContext} created by this context
	 * loader <i>after</i> bean definitions have been loaded into the context but
	 * <i>before</i> the context is refreshed.
	 * <p>The default implementation simply delegates to
	 * {@link AbstractContextLoader#customizeContext(ConfigurableApplicationContext, MergedContextConfiguration)}.
	 * @param context the newly created web application context
	 * @param webMergedConfig the merged context configuration to use to load the
	 * web application context
	 * @see #loadContext(MergedContextConfiguration)
	 * @see #customizeContext(ConfigurableApplicationContext, MergedContextConfiguration)
	 */
	/**
	 * 在将Bean定义加载到上下文中之后，但在刷新上下文之前，自定义此上下文加载器<i>创建的{@link  GenericWebApplicationContext}。 
	 *  <p>默认实现简单地委托给{@link  AbstractContextLoader＃customizeContext（ConfigurableApplicationContext，MergedContextConfiguration）}。 
	 *  
	 * @param 上下文新创建的Web应用程序上下文
	 * @param  webMergedConfig合并的上下文配置，用于加载Web应用程序上下文
	 * @see  #loadContext（MergedContextConfiguration）
	 * @see  #customizeContext（ConfigurableApplicationContext，MergedContextConfiguration）
	 */
	protected void customizeContext(
			GenericWebApplicationContext context, WebMergedContextConfiguration webMergedConfig) {

		super.customizeContext(context, webMergedConfig);
	}


	// ContextLoader

	/**
	 * {@code AbstractGenericWebContextLoader} should be used as a
	 * {@link org.springframework.test.context.SmartContextLoader SmartContextLoader},
	 * not as a legacy {@link org.springframework.test.context.ContextLoader ContextLoader}.
	 * Consequently, this method is not supported.
	 * @see org.springframework.test.context.ContextLoader#loadContext(java.lang.String[])
	 * @throws UnsupportedOperationException in this implementation
	 */
	/**
	 * {@code  AbstractGenericWebContextLoader}应该用作{@link  org.springframework.test.context.SmartContextLoader SmartContextLoader}，而不是旧的{@link  org.springframework.test.context.ContextLoader ContextLoader}。 
	 * 因此，不支持此方法。 
	 *  
	 * @see  org.springframework.test.context.ContextLoader＃loadContext（java.lang.String []）
	 * @throws 此实现中的UnsupportedOperationException
	 */
	@Override
	public final ApplicationContext loadContext(String... locations) throws Exception {
		throw new UnsupportedOperationException(
				"AbstractGenericWebContextLoader does not support the loadContext(String... locations) method");
	}

}
