/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * {@code @ContextHierarchy} is a class-level annotation that is used to define
 * a hierarchy of {@link org.springframework.context.ApplicationContext
 * ApplicationContexts} for integration tests.
 *
 * <h3>Examples</h3>
 * <p>The following JUnit-based examples demonstrate common configuration
 * scenarios for integration tests that require the use of context hierarchies.
 *
 * <h4>Single Test Class with Context Hierarchy</h4>
 * <p>{@code ControllerIntegrationTests} represents a typical integration testing
 * scenario for a Spring MVC web application by declaring a context hierarchy
 * consisting of two levels, one for the <em>root</em> {@code WebApplicationContext}
 * (with {@code TestAppConfig}) and one for the <em>dispatcher servlet</em>
 * {@code WebApplicationContext} (with {@code WebConfig}). The {@code
 * WebApplicationContext} that is <em>autowired</em> into the test instance is
 * the one for the child context (i.e., the lowest context in the hierarchy).
 *
 * <pre class="code">
 * &#064;RunWith(SpringRunner.class)
 * &#064;WebAppConfiguration
 * &#064;ContextHierarchy({
 *     &#064;ContextConfiguration(classes = TestAppConfig.class),
 *     &#064;ContextConfiguration(classes = WebConfig.class)
 * })
 * public class ControllerIntegrationTests {
 *
 *     &#064;Autowired
 *     private WebApplicationContext wac;
 *
 *     // ...
 * }</pre>
 *
 * <h4>Class Hierarchy with Implicit Parent Context</h4>
 * <p>The following test classes define a context hierarchy within a test class
 * hierarchy. {@code AbstractWebTests} declares the configuration for a root
 * {@code WebApplicationContext} in a Spring-powered web application. Note,
 * however, that {@code AbstractWebTests} does not declare {@code @ContextHierarchy};
 * consequently, subclasses of {@code AbstractWebTests} can optionally participate
 * in a context hierarchy or follow the standard semantics for {@code @ContextConfiguration}.
 * {@code SoapWebServiceTests} and {@code RestWebServiceTests} both extend
 * {@code AbstractWebTests} and define a context hierarchy via {@code @ContextHierarchy}.
 * The result is that three application contexts will be loaded (one for each
 * declaration of {@code @ContextConfiguration}, and the application context
 * loaded based on the configuration in {@code AbstractWebTests} will be set as
 * the parent context for each of the contexts loaded for the concrete subclasses.
 *
 * <pre class="code">
 * &#064;RunWith(SpringRunner.class)
 * &#064;WebAppConfiguration
 * &#064;ContextConfiguration("file:src/main/webapp/WEB-INF/applicationContext.xml")
 * public abstract class AbstractWebTests {}
 *
 * &#064;ContextHierarchy(&#064;ContextConfiguration("/spring/soap-ws-config.xml"))
 * public class SoapWebServiceTests extends AbstractWebTests {}
 *
 * &#064;ContextHierarchy(&#064;ContextConfiguration("/spring/rest-ws-config.xml"))
 * public class RestWebServiceTests extends AbstractWebTests {}</pre>
 *
 * <h4>Class Hierarchy with Merged Context Hierarchy Configuration</h4>
 * <p>The following classes demonstrate the use of <em>named</em> hierarchy levels
 * in order to <em>merge</em> the configuration for specific levels in a context
 * hierarchy. {@code BaseTests} defines two levels in the hierarchy, {@code parent}
 * and {@code child}. {@code ExtendedTests} extends {@code BaseTests} and instructs
 * the Spring TestContext Framework to merge the context configuration for the
 * {@code child} hierarchy level, simply by ensuring that the names declared via
 * {@link ContextConfiguration#name} are both {@code "child"}. The result is that
 * three application contexts will be loaded: one for {@code "/app-config.xml"},
 * one for {@code "/user-config.xml"}, and one for <code>{"/user-config.xml",
 * "/order-config.xml"}</code>. As with the previous example, the application
 * context loaded from {@code "/app-config.xml"} will be set as the parent context
 * for the contexts loaded from {@code "/user-config.xml"} and <code>{"/user-config.xml",
 * "/order-config.xml"}</code>.
 *
 * <pre class="code">
 * &#064;RunWith(SpringRunner.class)
 * &#064;ContextHierarchy({
 *     &#064;ContextConfiguration(name = "parent", locations = "/app-config.xml"),
 *     &#064;ContextConfiguration(name = "child",  locations = "/user-config.xml")
 * })
 * public class BaseTests {}
 *
 * &#064;ContextHierarchy(
 *     &#064;ContextConfiguration(name = "child",  locations = "/order-config.xml")
 * )
 * public class ExtendedTests extends BaseTests {}</pre>
 *
 * <h4>Class Hierarchy with Overridden Context Hierarchy Configuration</h4>
 * <p>In contrast to the previous example, this example demonstrates how to
 * <em>override</em> the configuration for a given named level in a context hierarchy
 * by setting the {@link ContextConfiguration#inheritLocations} flag to {@code false}.
 * Consequently, the application context for {@code ExtendedTests} will be loaded
 * only from {@code "/test-user-config.xml"} and will have its parent set to the
 * context loaded from {@code "/app-config.xml"}.
 *
 * <pre class="code">
 * &#064;RunWith(SpringRunner.class)
 * &#064;ContextHierarchy({
 *     &#064;ContextConfiguration(name = "parent", locations = "/app-config.xml"),
 *     &#064;ContextConfiguration(name = "child",  locations = "/user-config.xml")
 * })
 * public class BaseTests {}
 *
 * &#064;ContextHierarchy(
 *     &#064;ContextConfiguration(name = "child",  locations = "/test-user-config.xml", inheritLocations = false)
 * )
 * public class ExtendedTests extends BaseTests {}</pre>
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create custom
 * <em>composed annotations</em>.
 *
 * @author Sam Brannen
 * @since 3.2.2
 * @see ContextConfiguration
 * @see org.springframework.context.ApplicationContext
 */
/**
 * {<< @code >> @ContextHierarchy}是一个类级别的注释，用于为集成测试定义{<< @link >> org.springframework.context.ApplicationContext ApplicationContexts}的层次结构。 
 *  <h3>示例</ h3> <p>以下基于JUnit的示例演示了需要使用上下文层次结构的集成测试的常见配置方案。 
 *  <h4>具有上下文层次结构的单个测试类</ h4> <p> {<< @code >> ControllerIntegrationTests}通过声明一个包含两个级别的上下文层次结构来表示Spring MVC Web应用程序的典型集成测试场景。 
 *  <em> root </ em> {<< @code >> WebApplicationContext}（带有{<< @code >> TestAppConfig}）和一个<em> dispatcher servlet </ em> {<< @code >> WebApplicationContext }（使用{<< @code >> WebConfig}）。 
 * 自动插入测试实例的{<< @code >> WebApplicationContext}是用于子上下文（即，层次结构中最低的上下文）的子实例。 
 *  <pre class ="code"> @RunWith（SpringRunner.class）@WebAppConfiguration @ContextHierarchy（{@ContextConfiguration（classes = TestAppConfig.class），@ContextConfiguration（classes = WebConfig.class）}）公共类ControllerIntegrationTests {@Autowired私有WebApplicationContext wac; // ...} </ pre> <h4>具有隐式父上下文的类层次结构</ h4> <p>以下测试类在测试类层次结构中定义了上下文层次结构。 
 *  {<< @code >> AbstractWebTests}声明了Spring驱动的Web应用程序中根{<< @code >> WebApplicationContext}的配置。 
 * 但是请注意，{<< @code >> AbstractWebTests}并未声明{<< @code >> @ContextHierarchy}； 
 * 因此，{<< @code >> AbstractWebTests}的子类可以选择参与上下文层次结构或遵循{<< @code >> @ContextConfiguration}的标准语义。 
 *  {<< @code >> SoapWebServiceTests}和{<< @code >> RestWebServiceTests}都扩展了{<< @code >> AbstractWebTests}，并通过{<< @code >> @ContextHierarchy}定义了上下文层次。 
 * 结果是将加载三个应用程序上下文（每个{<< @code >> @ContextConfiguration}声明一个，并且将基于{<< @code >> AbstractWebTests}中的配置加载的应用程序上下文设置为为每个具体子类加载的上下文的父上下文。 
 * <pre class ="code"> @RunWith（SpringRunner.class）@WebAppConfiguration @ContextConfiguration（"file：src / main / webapp / WEB-INF / applicationContext.xml "）公共抽象类AbstractWebTests {} @ContextHierarchy（@ContextConfiguration（"/ spring / soap-ws-config.xml"））公共类SoapWebServiceTests扩展了AbstractWebTests {} @ContextHierarchy（@ContextConfiguration（"/ spring / rest-ws-config .xml"））公共类RestWebServiceTests扩展了AbstractWebTests {} </ pre> <h4>具有合并上下文层次结构配置的类层次结构</ h4> <p>以下类演示了<em>命名</ em>层次结构级别的用法为了<em>合并</ em>在上下文中特定级别的配置等级制。 
 *  {<< @code >> BaseTests}在层次结构中定义了两个级别，即{<< @code >>父级}和{<< @code >>子级}。 
 *  {<< @code >> ExtendedTests}扩展了{<< @code >> BaseTests}，并指示Spring TestContext Framework合并{<< @code >>子}层次结构级别的上下文配置，只需确保名称通过{<< @link >> ContextConfiguration＃name}声明的都是{<< @code >>"child"}。 
 * 结果是将加载三个应用程序上下文：一个用于{<< @code >>"/app-config.xml"}，一个用于{<< @code >>"/user-config.xml"}，以及一个用于<code> {"/ user-config.xml"，"/order-config.xml"} </ code>。 
 * 与前面的示例一样，将从{<< @code >>"/app-config.xml"}加载的应用程序上下文设置为从{<< @code >>"/ user-加载的上下文的父上下文。 
 *  config.xml"}和<code> {"/ user-config.xml"，"/ order-config.xml"} </ code>。 
 *  <pre class ="code"> @RunWith（SpringRunner.class）@ContextHierarchy（{@ContextConfiguration（name ="parent"，location ="/app-config.xml"），@ContextConfiguration（name ="child"，位置=""/user-config.xml"）}）公共类BaseTests {} @ContextHierarchy（@ContextConfiguration（name ="child"，location ="/order-config.xml"））公共类ExtendedTests扩展了BaseTests {} </ pre> <h4>具有覆盖的上下文层次结构配置的类层次结构</ h4> <p>与上一个示例相反，此示例演示了如何<em>覆盖</ em>上下文上下文层次结构中给定命名级别的配置通过将{<< @link >> ContextConfiguration＃inheritLocations}标志设置为{<< @code >> false}。 
 * 因此，{<< @code >> ExtendedTests}的应用程序上下文将仅从{<< @code >>"/test-user-config.xml"}加载，并将其父级设置为{ << @code >>"/app-config.xml"}
 */
/**
 * <pre class ="code"> @RunWith（SpringRunner.class）@ContextHierarchy（{@ContextConfiguration（name ="parent"，location ="/app-config.xml"），@ContextConfiguration（name ="child"，位置=""/user-config.xml"）}）公共类BaseTests {} @ContextHierarchy（@ContextConfiguration（name ="child"，location ="/test-user-config.xml",InheritLocations = false））公共类ExtendedTests扩展BaseTests {} </ pre> <p>此注释可以用作<em>元注释</ em>，以创建自定义的<em>组成的注释</ em>。 
 *  << @author >> Sam Brannen @从3.2.2开始<< 
 * @see >> ContextConfiguration << 
 * @see >> org.springframework.context.ApplicationContext
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface ContextHierarchy {

	/**
	 * A list of {@link ContextConfiguration @ContextConfiguration} instances,
	 * each of which defines a level in the context hierarchy.
	 * <p>If you need to merge or override the configuration for a given level
	 * of the context hierarchy within a test class hierarchy, you must explicitly
	 * name that level by supplying the same value to the {@link ContextConfiguration#name
	 * name} attribute in {@code @ContextConfiguration} at each level in the
	 * class hierarchy. See the class-level Javadoc for examples.
	 */
	/**
	 * {@link  ContextConfiguration @ContextConfiguration}实例的列表，每个实例定义上下文层次结构中的一个级别。 
	 *  <p>如果需要合并或覆盖测试类层次结构中给定级别的上下文层次结构的配置，则必须通过向{@link  ContextConfiguration＃name name}属性提供相同的值来显式命名该级别。 
	 * 在类层次结构中每个级别的{@code  @ContextConfiguration}中。 
	 * 有关示例，请参见类级Javadoc。 
	 * 
	 */
	ContextConfiguration[] value();

}
