/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

/**
 * {@code TestExecutionListener} defines a <em>listener</em> API for reacting to
 * test execution events published by the {@link TestContextManager} with which
 * the listener is registered.
 *
 * <p>Note that not all testing frameworks support all lifecycle callbacks defined
 * in this API. For example, {@link #beforeTestExecution} and
 * {@link #afterTestExecution} are not supported in conjunction with JUnit 4 when
 * using the {@link org.springframework.test.context.junit4.rules.SpringMethodRule
 * SpringMethodRule}.
 *
 * <p>This interface provides empty {@code default} implementations for all methods.
 * Concrete implementations can therefore choose to override only those methods
 * suitable for the task at hand.
 *
 * <p>Concrete implementations must provide a {@code public} no-args constructor,
 * so that listeners can be instantiated transparently by tools and configuration
 * mechanisms.
 *
 * <p>Implementations may optionally declare the position in which they should
 * be ordered among the chain of default listeners via the
 * {@link org.springframework.core.Ordered Ordered} interface or
 * {@link org.springframework.core.annotation.Order @Order} annotation. See
 * {@link TestContextBootstrapper#getTestExecutionListeners()} for details.
 *
 * <p>Spring provides the following out-of-the-box implementations (all of
 * which implement {@code Ordered}):
 * <ul>
 * <li>{@link org.springframework.test.context.web.ServletTestExecutionListener
 * ServletTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener
 * DirtiesContextBeforeModesTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.support.DependencyInjectionTestExecutionListener
 * DependencyInjectionTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.support.DirtiesContextTestExecutionListener
 * DirtiesContextTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.transaction.TransactionalTestExecutionListener
 * TransactionalTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener
 * SqlScriptsTestExecutionListener}</li>
 * <li>{@link org.springframework.test.context.event.EventPublishingTestExecutionListener
 * EventPublishingTestExecutionListener}</li>
 * </ul>
 *
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @since 2.5
 * @see TestExecutionListeners @TestExecutionListeners
 * @see TestContextManager
 * @see org.springframework.test.context.support.AbstractTestExecutionListener
 */
/**
 * {@code  TestExecutionListener}定义了一个<em> listener </ em> API，用于响应注册了侦听器的{@link  TestContextManager}发布的测试执行事件。 
 *  <p>请注意，并非所有测试框架都支持此API中定义的所有生命周期回调。 
 * 例如，当使用{@link  org.springframework.test.context.junit4.rules.SpringMethodRule SpringMethodRule使用{@link  org.springframework.test.context.junit4.rules.Spring }。 
 *  <p>此接口为所有方法提供空的{@code 默认}实现。 
 * 因此，具体实现可以选择仅覆盖适合手头任务的那些方法。 
 *  <p>具体实现必须提供一个{@code  public}无参数构造函数，以便可以通过工具和配置机制透明地实例化侦听器。 
 *  <p>实现可以选择通过{@link  org.springframework.core.Ordered Ordered}接口或{@link  org.springframework.core）声明默认侦听器链中的排序位置。 
 * 注解。 
 * Order@Order}注解。 
 * 有关详细信息，请参见{@link  TestContextBootstrapper＃getTestExecutionListeners（）}。 
 *  <p> Spring提供了以下现成的实现（所有这些实现都是{@code  Ordered}）：<ul> <li> {<@link> org.springframework.test.context.web。 
 *  ServletTestExecutionListener ServletTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener DirtiesContextBeforeModesTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.support。 
 *  DependencyInjectionTestExecutionListener DependencyInjectionTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.support.DirtiesContextTestExecutionListener DirtiesContextTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.transaction。 
 * </ li> TransactionalTestExecutionListener TransactionalTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener SqlScriptsTestExecutionListener} </ li> <li> {<@link> org.springframework.test.context.event。 
 *  EventPublishingTestExecutionListener E ventPublishingTestExecutionListener} </ li> </ ul> @author  Sam Brannen @author  Juergen Hoeller @since 2.5起
 * @see  TestExecutionListeners @TestExecutionListeners 
 * @see  TestContextManager 
 * @see  .AbstractTestExecutionListener
 */
public interface TestExecutionListener {

	/**
	 * Pre-processes a test class <em>before</em> execution of all tests within
	 * the class.
	 * <p>This method should be called immediately before framework-specific
	 * <em>before class</em> lifecycle callbacks.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context for the test; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @since 3.0
	 */
	/**
	 * 在执行该类中的所有测试之前，对它们进行预处理。 
	 *  <p>应在特定于框架的<em>类</ em>生命周期回调之前立即调用此方法。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext测试的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常传播自3.0起
	 */
	default void beforeTestClass(TestContext testContext) throws Exception {
	}

	/**
	 * Prepares the {@link Object test instance} of the supplied
	 * {@link TestContext test context}, for example by injecting dependencies.
	 * <p>This method should be called immediately after instantiation of the test
	 * instance but prior to any framework-specific lifecycle callbacks.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context for the test; never {@code null}
	 * @throws Exception allows any exception to propagate
	 */
	/**
	 * 准备提供的{@link  TestContext测试上下文}的{@link 对象测试实例}，例如通过注入依赖项。 
	 *  <p>应该在实例化测试实例之后但在任何特定于框架的生命周期回调之前立即调用此方法。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext测试的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许传播任何异常
	 */
	default void prepareTestInstance(TestContext testContext) throws Exception {
	}

	/**
	 * Pre-processes a test <em>before</em> execution of <em>before</em>
	 * lifecycle callbacks of the underlying test framework &mdash; for example,
	 * by setting up test fixtures.
	 * <p>This method <strong>must</strong> be called immediately prior to
	 * framework-specific <em>before</em> lifecycle callbacks. For historical
	 * reasons, this method is named {@code beforeTestMethod}. Since the
	 * introduction of {@link #beforeTestExecution}, a more suitable name for
	 * this method might be something like {@code beforeTestSetUp} or
	 * {@code beforeEach}; however, it is unfortunately impossible to rename
	 * this method due to backward compatibility concerns.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context in which the test method will be
	 * executed; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @see #afterTestMethod
	 * @see #beforeTestExecution
	 * @see #afterTestExecution
	 */
	/**
	 * 对基础测试框架的<em>之前</ em>生命周期回调执行之前的测试<em>之前</ em>进行预处理-例如，通过设置测试装置。 
	 *  <p>此方法<strong>必须</ strong>必须在特定于框架的<em>之前</ em>生命周期回调之前立即调用。 
	 * 由于历史原因，此方法被命名为{@code  beforeTestMethod}。 
	 * 自从引入{@link  #beforeTestExecution}以来，此方法更合适的名称可能类似于{@code  beforeTestSetUp}或{@code  beforeEach}。 
	 * 但是，由于担心向后兼容性，因此无法重命名此方法。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext将在其中执行测试方法的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常传播
	 * @see  #afterTestMethod 
	 * @see  #beforeTestExecution 
	 * @see  #afterTestExecution
	 */
	default void beforeTestMethod(TestContext testContext) throws Exception {
	}

	/**
	 * Pre-processes a test <em>immediately before</em> execution of the
	 * {@link java.lang.reflect.Method test method} in the supplied
	 * {@link TestContext test context} &mdash; for example, for timing
	 * or logging purposes.
	 * <p>This method <strong>must</strong> be called after framework-specific
	 * <em>before</em> lifecycle callbacks.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context in which the test method will be
	 * executed; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @since 5.0
	 * @see #beforeTestMethod
	 * @see #afterTestMethod
	 * @see #afterTestExecution
	 */
	/**
	 * 在提供的{@link  TestContext测试上下文}中执行{@link  java.lang.reflect.Method测试方法}之前，立即对测试进行预处理。 
	 * 例如，用于计时或记录目的。 
	 *  <p>该方法<strong>必须</ strong>在特定于框架的<em>之前</ em>生命周期回调之后调用。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext将在其中执行测试方法的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常从@5.0开始传播
	 * @see  #beforeTestMethod 
	 * @see  #afterTestMethod 
	 * @see  #afterTestExecution
	 */
	default void beforeTestExecution(TestContext testContext) throws Exception {
	}

	/**
	 * Post-processes a test <em>immediately after</em> execution of the
	 * {@link java.lang.reflect.Method test method} in the supplied
	 * {@link TestContext test context} &mdash; for example, for timing
	 * or logging purposes.
	 * <p>This method <strong>must</strong> be called before framework-specific
	 * <em>after</em> lifecycle callbacks.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context in which the test method will be
	 * executed; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @since 5.0
	 * @see #beforeTestMethod
	 * @see #afterTestMethod
	 * @see #beforeTestExecution
	 */
	/**
	 * 在提供的{@link  TestContext测试上下文}中执行{@link  java.lang.reflect.Method测试方法}后<em>立即</ em>后处理测试-例如，用于计时或记录目的。 
	 *  <p>必须在特定于框架的<em>之后</ em>生命周期回调之前调用此方法<strong> </ strong>。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext将在其中执行测试方法的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常传播自5.0版本起
	 * @see  #beforeTestMethod 
	 * @see  #afterTestMethod 
	 * @see  #beforeTestExecution
	 */
	default void afterTestExecution(TestContext testContext) throws Exception {
	}

	/**
	 * Post-processes a test <em>after</em> execution of <em>after</em>
	 * lifecycle callbacks of the underlying test framework &mdash; for example,
	 * by tearing down test fixtures.
	 * <p>This method <strong>must</strong> be called immediately after
	 * framework-specific <em>after</em> lifecycle callbacks. For historical
	 * reasons, this method is named {@code afterTestMethod}. Since the
	 * introduction of {@link #afterTestExecution}, a more suitable name for
	 * this method might be something like {@code afterTestTearDown} or
	 * {@code afterEach}; however, it is unfortunately impossible to rename
	 * this method due to backward compatibility concerns.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context in which the test method was
	 * executed; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @see #beforeTestMethod
	 * @see #beforeTestExecution
	 * @see #afterTestExecution
	 */
	/**
	 * 对基础测试框架的<em> after </ em>生命周期回调执行后的测试<em> </ em>后处理，例如，通过拆除测试装置。 
	 *  <p>此方法<strong>必须</ strong>必须在特定于框架的<em> </ em>生命周期回调之后立即调用。 
	 * 由于历史原因，此方法被命名为{@code  afterTestMethod}。 
	 * 自从引入{@link  #afterTestExecution}以来，此方法更合适的名称可能类似于{@code  afterTestTearDown}或{@code  afterEach}。 
	 * 但是，由于担心向后兼容性，因此无法重命名此方法。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext执行测试方法的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常传播
	 * @see  #beforeTestMethod 
	 * @see  #beforeTestExecution 
	 * @see  #afterTestExecution
	 */
	default void afterTestMethod(TestContext testContext) throws Exception {
	}

	/**
	 * Post-processes a test class <em>after</em> execution of all tests within
	 * the class.
	 * <p>This method should be called immediately after framework-specific
	 * <em>after class</em> lifecycle callbacks.
	 * <p>The default implementation is <em>empty</em>. Can be overridden by
	 * concrete classes as necessary.
	 * @param testContext the test context for the test; never {@code null}
	 * @throws Exception allows any exception to propagate
	 * @since 3.0
	 */
	/**
	 * 在该类中的所有测试执行后，对测试类<em> </ em>进行后处理。 
	 *  <p>应在特定于框架的<em>在类之后</ em>生命周期回调之后立即调用此方法。 
	 *  <p>默认实现为<em> empty </ em>。 
	 * 可以根据需要由具体类覆盖。 
	 *  
	 * @param  testContext测试的测试上下文； 
	 * 从不{@code  null} 
	 * @throws 异常允许任何异常传播自3.0起
	 */
	default void afterTestClass(TestContext testContext) throws Exception {
	}

}
