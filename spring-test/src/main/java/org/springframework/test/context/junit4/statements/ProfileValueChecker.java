/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;

import org.junit.AssumptionViolatedException;
import org.junit.runners.model.Statement;

import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.lang.Nullable;
import org.springframework.test.annotation.IfProfileValue;
import org.springframework.test.annotation.ProfileValueUtils;
import org.springframework.util.Assert;

/**
 * {@code ProfileValueChecker} is a custom JUnit {@link Statement} that checks
 * whether a test class or test method is enabled in the current environment
 * via Spring's {@link IfProfileValue @IfProfileValue} annotation.
 *
 * @author Sam Brannen
 * @author Philippe Marschall
 * @since 4.2
 * @see #evaluate()
 * @see IfProfileValue
 * @see ProfileValueUtils
 */
/**
 * {@code  ProfileValueChecker}是一个自定义的JUnit {@link 语句}，它通过Spring的{@link  IfProfileValue @IfProfileValue}注解检查是否在当前环境中启用了测试类或测试方法。 
 *  @author  Sam Brannen @author  Philippe Marschall @始于4.2 
 * @see  #evaluate（）
 * @see  IfProfileValue 
 * @see  ProfileValueUtils
 */
public class ProfileValueChecker extends Statement {

	private final Statement next;

	private final Class<?> testClass;

	@Nullable
	private final Method testMethod;


	/**
	 * Construct a new {@code ProfileValueChecker} statement.
	 * @param next the next {@code Statement} in the execution chain;
	 * never {@code null}
	 * @param testClass the test class to check; never {@code null}
	 * @param testMethod the test method to check; may be {@code null} if
	 * this {@code ProfileValueChecker} is being applied at the class level
	 */
	/**
	 * 构造一个新的{@code  ProfileValueChecker}语句。 
	 *  
	 * @param 在执行链中的下一个{@code 语句}之后； 
	 * 从不{@code  null} 
	 * @param  testClass要检查的测试类； 
	 * 从不{@code  null} 
	 * @param  testMethod要检查的测试方法； 
	 * 如果此{@code  ProfileValueChecker}在类级别应用，则可能为{@code  null}
	 */
	public ProfileValueChecker(Statement next, Class<?> testClass, @Nullable Method testMethod) {
		Assert.notNull(next, "The next statement must not be null");
		Assert.notNull(testClass, "The test class must not be null");
		this.next = next;
		this.testClass = testClass;
		this.testMethod = testMethod;
	}


	/**
	 * Determine if the test specified by arguments to the
	 * {@linkplain #ProfileValueChecker constructor} is <em>enabled</em> in
	 * the current environment, as configured via the {@link IfProfileValue
	 * &#064;IfProfileValue} annotation.
	 * <p>If the test is not annotated with {@code @IfProfileValue} it is
	 * considered enabled.
	 * <p>If a test is not enabled, this method will abort further evaluation
	 * of the execution chain with a failed assumption; otherwise, this method
	 * will simply evaluate the next {@link Statement} in the execution chain.
	 * @see ProfileValueUtils#isTestEnabledInThisEnvironment(Class)
	 * @see ProfileValueUtils#isTestEnabledInThisEnvironment(Method, Class)
	 * @throws AssumptionViolatedException if the test is disabled
	 * @throws Throwable if evaluation of the next statement fails
	 */
	/**
	 * 确定在{@link  IfProfileValue @IfProfileValue}注释中配置的当前环境中，是否启用由{@link  plain #ProfileValueChecker构造函数}的参数指定的测试<em> </ em>。 
	 *  <p>如果未使用{@code  @IfProfileValue}注释测试，则认为该测试已启用。 
	 *  <p>如果未启用测试，则此方法将在假设失败的情况下中止对执行链的进一步评估。 
	 * 否则，此方法将只评估执行链中的下一个{@link  Statement}。 
	 *  
	 * @see  ProfileValueUtils＃isTestEnabledInThisEnvironment（Class）
	 * @see  ProfileValueUtils＃isTestEnabledInThisEnvironment（Method，Class）
	 * @throws  AssumptionViolatedException如果测试被禁用
	 * @throws 如果下一条语句的评估失败，则可抛出
	 */
	@Override
	public void evaluate() throws Throwable {
		if (this.testMethod == null) {
			if (!ProfileValueUtils.isTestEnabledInThisEnvironment(this.testClass)) {
				Annotation ann = AnnotatedElementUtils.findMergedAnnotation(this.testClass, IfProfileValue.class);
				throw new AssumptionViolatedException(String.format(
						"Profile configured via [%s] is not enabled in this environment for test class [%s].",
						ann, this.testClass.getName()));
			}
		}
		else {
			if (!ProfileValueUtils.isTestEnabledInThisEnvironment(this.testMethod, this.testClass)) {
				throw new AssumptionViolatedException(String.format(
						"Profile configured via @IfProfileValue is not enabled in this environment for test method [%s].",
						this.testMethod));
			}
		}

		this.next.evaluate();
	}

}
