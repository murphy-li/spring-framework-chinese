/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.jdbc;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.core.annotation.AliasFor;

/**
 * {@code @Sql} is used to annotate a test class or test method to configure
 * SQL {@link #scripts} and {@link #statements} to be executed against a given
 * database during integration tests.
 *
 * <p>Method-level declarations override class-level declarations by default,
 * but this behavior can be configured via {@link SqlMergeMode @SqlMergeMode}.
 *
 * <p>Script execution is performed by the {@link SqlScriptsTestExecutionListener},
 * which is enabled by default.
 *
 * <p>The configuration options provided by this annotation and
 * {@link SqlConfig @SqlConfig} are equivalent to those supported by
 * {@link org.springframework.jdbc.datasource.init.ScriptUtils ScriptUtils} and
 * {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator ResourceDatabasePopulator}
 * but are a superset of those provided by the {@code <jdbc:initialize-database/>}
 * XML namespace element. Consult the javadocs of individual attributes in this
 * annotation and {@link SqlConfig @SqlConfig} for details.
 *
 * <p>Beginning with Java 8, {@code @Sql} can be used as a
 * <em>{@linkplain Repeatable repeatable}</em> annotation. Otherwise,
 * {@link SqlGroup @SqlGroup} can be used as an explicit container for declaring
 * multiple instances of {@code @Sql}.
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create custom
 * <em>composed annotations</em> with attribute overrides.
 *
 * @author Sam Brannen
 * @since 4.1
 * @see SqlConfig
 * @see SqlMergeMode
 * @see SqlGroup
 * @see SqlScriptsTestExecutionListener
 * @see org.springframework.transaction.annotation.Transactional
 * @see org.springframework.test.context.transaction.TransactionalTestExecutionListener
 * @see org.springframework.jdbc.datasource.init.ResourceDatabasePopulator
 * @see org.springframework.jdbc.datasource.init.ScriptUtils
 */
/**
 * {@code  @Sql}用于注释测试类或测试方法，以配置SQL {@link  #scripts}和{@link  #statements}在集成测试期间针对给定的数据库执行。 
 *  <p>默认情况下，方法级声明覆盖类级声明，但是可以通过{@link  SqlMergeMode @SqlMergeMode}配置此行为。 
 *  <p>脚本执行由{@link  SqlScriptsTestExecutionListener}执行，默认情况下启用。 
 *  <p>此注解和{@link  SqlConfig @SqlConfig}提供的配置选项与{@link  org.springframework.jdbc.datasource.init.ScriptUtils ScriptUtils}和{@link  org.springframework.jdbc.datasource.init.ResourceDatabasePopulator ResourceDatabasePopulator}，但它们是{@code  <jdbc：initialize-database />} XML名称空间元素提供的那些的超集。 
 * 有关详细信息，请参阅此注解中的各个属性的javadocs和{@link  SqlConfig @SqlConfig}。 
 *  <p>从Java 8开始，{<@code> @Sql}可以用作<em> {<@link> plain Repeatable repeatable} </ em>注释。 
 * 否则，{<@link> SqlGroup @SqlGroup}可用作显式容器，用于声明{@code  @Sql}的多个实例。 
 *  <p>此注释可用作<em>元注释</ em>，以创建具有属性覆盖的自定义<em>组成的注释</ em>。 
 *  @author  Sam Brannen @since 4.1起
 * @see  SqlConfig 
 * @see  SqlMergeMode 
 * @see  SqlGroup 
 * @see  SqlScriptsTestExecutionListener 
 * @see  org.springframework.transaction.annotation.Transactional 
 * @see  org.springframework。 
 *  test.context.transaction.TransactionalTestExecutionListener 
 * @see  org.springframework.jdbc.datasource.init.ResourceDatabasePopulator 
 * @see  org.springframework.jdbc.datasource.init.ScriptUtils
 */
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@Repeatable(SqlGroup.class)
public @interface Sql {

	/**
	 * Alias for {@link #scripts}.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #scripts}, but it may be used instead of {@link #scripts}.
	 * @see #scripts
	 * @see #statements
	 */
	/**
	 * {@link  #scripts}的别名。 
	 *  <p>此属性可能<strong>不</ strong>不能与{@link  #scripts}结合使用，但可以代替{@link  #scripts}使用。 
	 *  
	 * @see ＃脚本
	 * @see ＃声明
	 */
	@AliasFor("scripts")
	String[] value() default {};

	/**
	 * The paths to the SQL scripts to execute.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #value}, but it may be used instead of {@link #value}. Similarly,
	 * this attribute may be used in conjunction with or instead of
	 * {@link #statements}.
	 * <h3>Path Resource Semantics</h3>
	 * <p>Each path will be interpreted as a Spring
	 * {@link org.springframework.core.io.Resource Resource}. A plain path
	 * &mdash; for example, {@code "schema.sql"} &mdash; will be treated as a
	 * classpath resource that is <em>relative</em> to the package in which the
	 * test class is defined. A path starting with a slash will be treated as an
	 * <em>absolute</em> classpath resource, for example:
	 * {@code "/org/example/schema.sql"}. A path which references a
	 * URL (e.g., a path prefixed with
	 * {@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},
	 * {@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},
	 * {@code http:}, etc.) will be loaded using the specified resource protocol.
	 * <h3>Default Script Detection</h3>
	 * <p>If no SQL scripts or {@link #statements} are specified, an attempt will
	 * be made to detect a <em>default</em> script depending on where this
	 * annotation is declared. If a default cannot be detected, an
	 * {@link IllegalStateException} will be thrown.
	 * <ul>
	 * <li><strong>class-level declaration</strong>: if the annotated test class
	 * is {@code com.example.MyTest}, the corresponding default script is
	 * {@code "classpath:com/example/MyTest.sql"}.</li>
	 * <li><strong>method-level declaration</strong>: if the annotated test
	 * method is named {@code testMethod()} and is defined in the class
	 * {@code com.example.MyTest}, the corresponding default script is
	 * {@code "classpath:com/example/MyTest.testMethod.sql"}.</li>
	 * </ul>
	 * @see #value
	 * @see #statements
	 */
	/**
	 * 要执行的SQL脚本的路径。 
	 *  <p>该属性可能<strong>不</ strong>不能与{@link  #value}结合使用，但可以代替{@link  #value}使用。 
	 * 同样，此属性可以与{@link  #statements}结合使用或代替。 
	 *  <h3>路径资源语义</ h3> <p>每个路径将被解释为Spring {@link  org.springframework.core.io.Resource Resource}。 
	 * 普通路径（例如{@code "schema.sql"}）将被视为相对于定义测试类的包<em>相对</ em>的类路径资源。 
	 * 以斜杠开头的路径将被视为<em>绝对</ em>类路径资源，例如：{@code "/org/example/schema.sql"}。 
	 * 引用URL的路径（例如，以{@link  org.springframework.util.ResourceUtils＃CLASSPATH_URL_PREFIX classpath：}，{<@link> org.springframework.util.ResourceUtils＃FILE_URL_PREFIX file：}，{ @code  http：}等）将使用指定的资源协议加载。 
	 *  <h3>默认脚本检测</ h3> <p>如果未指定任何SQL脚本或{@link  #statements}，则将尝试检测<em>默认</ em>脚本，具体取决于此位置注释已声明。 
	 * 如果无法检测到默认值，将抛出{@link  IllegalStateException}。 
	 *  <ul> <li> <strong>类级声明</ strong>：如果带注释的测试类为{@code  com.example.MyTest}，则相应的默认脚本为{@code "classpath：com /example/MyTest.sql"}。 
	 * </ li> <li> <strong>方法级声明</ strong>：如果带注释的测试方法名为{@code  testMethod（）}并且在类中定义{@code  com.example.MyTest}，相应的默认脚本为{@code "classpath：com / example / MyTest.testMethod.sql"}。 
	 * </ li> </ ul> 
	 * @see ＃值
	 * @see ＃语句
	 */
	@AliasFor("value")
	String[] scripts() default {};

	/**
	 * <em>Inlined SQL statements</em> to execute.
	 * <p>This attribute may be used in conjunction with or instead of
	 * {@link #scripts}.
	 * <h3>Ordering</h3>
	 * <p>Statements declared via this attribute will be executed after
	 * statements loaded from resource {@link #scripts}. If you wish to have
	 * inlined statements executed before scripts, simply declare multiple
	 * instances of {@code @Sql} on the same class or method.
	 * @since 4.2
	 * @see #scripts
	 */
	/**
	 * <em>内联SQL语句</ em>执行。 
	 *  <p>此属性可以与{@link  #scripts}结合使用或代替。 
	 * 从资源{@link  #scripts}加载语句后，将执行通过此属性声明的<h3>订购</ h3> <p>声明。 
	 * 如果希望在脚本之前执行内联语句，只需在同一类或方法上声明{@code  @Sql}的多个实例。 
	 *  @since 4.2 
	 * @see ＃脚本
	 */
	String[] statements() default {};

	/**
	 * When the SQL scripts and statements should be executed.
	 * <p>Defaults to {@link ExecutionPhase#BEFORE_TEST_METHOD BEFORE_TEST_METHOD}.
	 */
	/**
	 * SQL脚本和语句应在何时执行。 
	 *  <p>默认为{@link  ExecutionPhase＃BEFORE_TEST_METHOD BEFORE_TEST_METHOD}。 
	 * 
	 */
	ExecutionPhase executionPhase() default ExecutionPhase.BEFORE_TEST_METHOD;

	/**
	 * Local configuration for the SQL scripts and statements declared within
	 * this {@code @Sql} annotation.
	 * <p>See the class-level javadocs for {@link SqlConfig} for explanations of
	 * local vs. global configuration, inheritance, overrides, etc.
	 * <p>Defaults to an empty {@link SqlConfig @SqlConfig} instance.
	 */
	/**
	 * 在{@code  @Sql}注解中声明的SQL脚本和语句的本地配置。 
	 *  <p>有关本地配置与全局配置，继承，替代等的说明，请参见{@link  SqlConfig}的类级javadocs。 
	 * <p>默认为空的{@link  SqlConfig @SqlConfig}实例。 
	 * 
	 */
	SqlConfig config() default @SqlConfig;


	/**
	 * Enumeration of <em>phases</em> that dictate when SQL scripts are executed.
	 */
	/**
	 * <em>阶段</ em>的枚举，指示执行SQL脚本的时间。 
	 * 
	 */
	enum ExecutionPhase {

		/**
		 * The configured SQL scripts and statements will be executed
		 * <em>before</em> the corresponding test method.
		 */
		/**
		 * 配置的SQL脚本和语句将在相应​​的测试方法之前<em> </ em>执行。 
		 * 
		 */
		BEFORE_TEST_METHOD,

		/**
		 * The configured SQL scripts and statements will be executed
		 * <em>after</em> the corresponding test method.
		 */
		/**
		 * 配置的SQL脚本和语句将在相应​​的测试方法之后<em> </ em>执行。 
		 * 
		 */
		AFTER_TEST_METHOD
	}

}
