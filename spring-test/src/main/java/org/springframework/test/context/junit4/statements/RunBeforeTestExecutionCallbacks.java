/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import java.lang.reflect.Method;

import org.junit.runners.model.Statement;

import org.springframework.test.context.TestContextManager;

/**
 * {@code RunBeforeTestExecutionCallbacks} is a custom JUnit {@link Statement}
 * which allows the <em>Spring TestContext Framework</em> to be plugged into the
 * JUnit 4 execution chain by calling {@link TestContextManager#beforeTestExecution
 * beforeTestExecution()} on the supplied {@link TestContextManager}.
 *
 * @author Sam Brannen
 * @since 5.0
 * @see #evaluate()
 * @see RunAfterTestExecutionCallbacks
 */
/**
 * {@code  RunBeforeTestExecutionCallbacks}是自定义的JUnit {@link 语句}，它允许通过调用{@link  TestContextManager＃beforeTestExecution来将<em> Spring TestContext Framework </ em>插入JUnit 4执行链中。 
 * 提供的{@link  TestContextManager}上的beforeTestExecution（）}。 
 *  @author  Sam Brannen @从5.0开始
 * @see  #evaluate（）
 * @see  RunAfterTestExecutionCallbacks
 */
public class RunBeforeTestExecutionCallbacks extends Statement {

	private final Statement next;

	private final Object testInstance;

	private final Method testMethod;

	private final TestContextManager testContextManager;


	/**
	 * Construct a new {@code RunBeforeTestExecutionCallbacks} statement.
	 * @param next the next {@code Statement} in the execution chain
	 * @param testInstance the current test instance (never {@code null})
	 * @param testMethod the test method which is about to be executed on the
	 * test instance
	 * @param testContextManager the TestContextManager upon which to call
	 * {@code beforeTestExecution()}
	 */
	/**
	 * 构造一个新的{@code  RunBeforeTestExecutionCallbacks}语句。 
	 *  
	 * @param 执行链中下一个{@code 语句}的下一个
	 * @param  testInstance当前测试实例（绝不{@code  null}）
	 * @param  testMethod即将成为测试方法的测试方法在测试实例
	 * @param  testContextManager上执行的TestContextManager，在其上调用{@code  beforeTestExecution（）}
	 */
	public RunBeforeTestExecutionCallbacks(Statement next, Object testInstance, Method testMethod,
			TestContextManager testContextManager) {

		this.next = next;
		this.testInstance = testInstance;
		this.testMethod = testMethod;
		this.testContextManager = testContextManager;
	}

	/**
	 * Invoke {@link TestContextManager#beforeTestExecution(Object, Method)}
	 * and then evaluate the next {@link Statement} in the execution chain
	 * (typically an instance of
	 * {@link org.junit.internal.runners.statements.InvokeMethod InvokeMethod}).
	 */
	/**
	 * 调用{@link  TestContextManager＃beforeTestExecution（Object，Method）}，然后评估执行链中的下一个{@link  Statement}（通常是{@link  org.junit.internal.runners.statements的一个实例） .InvokeMethod InvokeMethod}）。 
	 * 
	 */
	@Override
	public void evaluate() throws Throwable {
		this.testContextManager.beforeTestExecution(this.testInstance, this.testMethod);
		this.next.evaluate();
	}

}
