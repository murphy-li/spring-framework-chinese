/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.util.List;

import org.springframework.lang.Nullable;

/**
 * Factory for creating {@link ContextCustomizer ContextCustomizers}.
 *
 * <p>Factories are invoked after {@link ContextLoader ContextLoaders} have
 * processed context configuration attributes but before the
 * {@link MergedContextConfiguration} is created.
 *
 * <p>By default, the Spring TestContext Framework will use the
 * {@link org.springframework.core.io.support.SpringFactoriesLoader SpringFactoriesLoader}
 * mechanism for loading factories configured in all {@code META-INF/spring.factories}
 * files on the classpath.
 *
 * @author Phillip Webb
 * @author Sam Brannen
 * @since 4.3
 */
/**
 * 用于创建{@link  ContextCustomizer ContextCustomizers}的工厂。 
 * 在{@link  ContextLoader ContextLoaders}处理完上下文配置属性之后，但在创建{@link  MergedContextConfiguration}之前，调用<p>工厂。 
 *  <p>默认情况下，Spring TestContext Framework将使用{@link  org.springframework.core.io.support.SpringFactoriesLoader SpringFactoriesLoader}机制来加载在所有{@code  META-INF / spring.factories中配置的工厂}文件放在类路径上。 
 *  @author 菲利普·韦伯（Phillip Webb）@author  Sam Brannen @since 4.3
 */
@FunctionalInterface
public interface ContextCustomizerFactory {

	/**
	 * Create a {@link ContextCustomizer} that should be used to customize a
	 * {@link org.springframework.context.ConfigurableApplicationContext ConfigurableApplicationContext}
	 * before it is refreshed.
	 * @param testClass the test class
	 * @param configAttributes the list of context configuration attributes for
	 * the test class, ordered <em>bottom-up</em> (i.e., as if we were traversing
	 * up the class hierarchy); never {@code null} or empty
	 * @return a {@link ContextCustomizer} or {@code null} if no customizer should
	 * be used
	 */
	/**
	 * 创建一个{@link  ContextCustomizer}，在刷新之前应使用该自定义{{@link> org.springframework.context.ConfigurableApplicationContext ConfigurableApplicationContext}。 
	 *  
	 * @param  testClass测试类
	 * @param  configAttributes测试类的上下文配置属性列表，顺序为<em> bottom-up </ em>（即，就像我们遍历类层次结构一样）； 
	 * 如果不使用自定义程序，则永远不要{@code  null}或空
	 * @return  {@link  ContextCustomizer}或{@code  null}
	 */
	@Nullable
	ContextCustomizer createContextCustomizer(Class<?> testClass, List<ContextConfigurationAttributes> configAttributes);

}
