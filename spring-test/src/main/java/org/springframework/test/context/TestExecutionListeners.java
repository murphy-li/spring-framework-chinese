/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.core.annotation.AliasFor;

/**
 * {@code TestExecutionListeners} defines class-level metadata for configuring
 * which {@link TestExecutionListener TestExecutionListeners} should be
 * registered with a {@link TestContextManager}.
 *
 * <p>Typically, {@code @TestExecutionListeners} will be used in conjunction
 * with {@link ContextConfiguration @ContextConfiguration}.
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create custom
 * <em>composed annotations</em>.
 *
 * @author Sam Brannen
 * @since 2.5
 * @see TestExecutionListener
 * @see TestContextManager
 * @see ContextConfiguration
 */
/**
 * {@code  TestExecutionListeners}定义了类级元数据，用于配置哪些{@link  TestExecutionListener TestExecutionListeners}应该向{@link  TestContextManager}注册。 
 *  <p>通常，{<@code> @TestExecutionListeners}将与{@link  ContextConfiguration @ContextConfiguration}结合使用。 
 *  <p>此注释可用作<em>元注释</ em>，以创建自定义的<em>组成的注释</ em>。 
 *  @author  Sam Brannen @从2.5开始
 * @see  TestExecutionListener 
 * @see  TestContextManager 
 * @see  ContextConfiguration
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface TestExecutionListeners {

	/**
	 * Alias for {@link #listeners}.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #listeners}, but it may be used instead of {@link #listeners}.
	 */
	/**
	 * {@link  #listeners}的别名。 
	 *  <p>该属性可能<strong>不</ strong>不能与{@link  #listeners}结合使用，但可以代替{@link  #listeners}使用。 
	 * 
	 */
	@AliasFor("listeners")
	Class<? extends TestExecutionListener>[] value() default {};

	/**
	 * The {@link TestExecutionListener TestExecutionListeners} to register with
	 * the {@link TestContextManager}.
	 * <p>This attribute may <strong>not</strong> be used in conjunction with
	 * {@link #value}, but it may be used instead of {@link #value}.
	 * @see org.springframework.test.context.web.ServletTestExecutionListener
	 * @see org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener
	 * @see org.springframework.test.context.support.DependencyInjectionTestExecutionListener
	 * @see org.springframework.test.context.support.DirtiesContextTestExecutionListener
	 * @see org.springframework.test.context.transaction.TransactionalTestExecutionListener
	 * @see org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener
	 * @see org.springframework.test.context.event.EventPublishingTestExecutionListener
	 */
	/**
	 * {@link  TestExecutionListener TestExecutionListeners}向{@link  TestContextManager}注册。 
	 *  <p>该属性可能<strong>不</ strong>不能与{@link  #value}结合使用，但可以代替{@link  #value}使用。 
	 *  
	 * @see  org.springframework.test.context.web.ServletTestExecutionListener 
	 * @see  org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener 
	 * @see  org.springframework.test.context.support.DependencyInjectionTestExecutionListener 
	 * @see  org .springframework.test.context.support.DirtiesContextTestExecutionListener 
	 * @see  org.springframework.test.context.transaction.TransactionalTestExecutionListener 
	 * @see  org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener 
	 * @see  org.springframework.test.context.support.DirtiesContextTestExecutionListener context.event.EventPublishingTestExecutionListener
	 */
	@AliasFor("value")
	Class<? extends TestExecutionListener>[] listeners() default {};

	/**
	 * Whether or not {@link #listeners TestExecutionListeners} from superclasses
	 * should be <em>inherited</em>.
	 * <p>The default value is {@code true}, which means that an annotated
	 * class will <em>inherit</em> the listeners defined by an annotated
	 * superclass. Specifically, the listeners for an annotated class will be
	 * appended to the list of listeners defined by an annotated superclass.
	 * Thus, subclasses have the option of <em>extending</em> the list of
	 * listeners. In the following example, {@code AbstractBaseTest} will
	 * be configured with {@code DependencyInjectionTestExecutionListener}
	 * and {@code DirtiesContextTestExecutionListener}; whereas,
	 * {@code TransactionalTest} will be configured with
	 * {@code DependencyInjectionTestExecutionListener},
	 * {@code DirtiesContextTestExecutionListener}, <strong>and</strong>
	 * {@code TransactionalTestExecutionListener}, in that order.
	 * <pre class="code">
	 * &#064;TestExecutionListeners({
	 *     DependencyInjectionTestExecutionListener.class,
	 *     DirtiesContextTestExecutionListener.class
	 * })
	 * public abstract class AbstractBaseTest {
	 * 	 // ...
	 * }
	 *
	 * &#064;TestExecutionListeners(TransactionalTestExecutionListener.class)
	 * public class TransactionalTest extends AbstractBaseTest {
	 * 	 // ...
	 * }</pre>
	 * <p>If {@code inheritListeners} is set to {@code false}, the listeners for
	 * the annotated class will <em>shadow</em> and effectively replace any
	 * listeners defined by a superclass.
	 */
	/**
	 * 是否应该<em>继承</ em>来自超类的{@link  #listeners TestExecutionListeners}。 
	 *  <p>默认值为{@code  true}，这意味着带注释的类将<em>继承</ em>由带注释的超类定义的侦听器。 
	 * 特别是，带注释的类的侦听器将附加到带注释的超类定义的侦听器列表中。 
	 * 因此，子类可以选择<em>扩展</ em>侦听器列表。 
	 * 在以下示例中，将使用{@code  DependencyInjectionTestExecutionListener}和{@code  DirtiesContextTestExecutionListener}配置{@code  AbstractBaseTest}； 
	 * 而{@code  TransactionalTest}将依次配置{@code  DependencyInjectionTestExecutionListener}，{@code  DirtiesContextTestExecutionListener}，<strong>和</ strong> {@code  TransactionalTestExecutionListener}。 
	 *  <pre class ="code"> @TestExecutionListeners（{DependencyInjectionTestExecutionListener.class，DirtiesContextTestExecutionListener.class}）公共抽象类AbstractBaseTest {// ...} @TestExecutionListeners（TransactionalTestExecutionListener.class）公共类TransactionalTest扩展了AbstractBaseTest {// ... } </ pre> <p>如果将{@code  InheritedListeners}设置为{@code  false}，则带注释的类的侦听器将成为<em> shadow </ em>并有效地替换由a定义的所有侦听器超类。 
	 * 
	 */
	boolean inheritListeners() default true;

	/**
	 * The <em>merge mode</em> to use when {@code @TestExecutionListeners} is
	 * declared on a class that does <strong>not</strong> inherit listeners
	 * from a superclass.
	 * <p>Can be set to {@link MergeMode#MERGE_WITH_DEFAULTS MERGE_WITH_DEFAULTS}
	 * to have locally declared listeners <em>merged</em> with the default
	 * listeners.
	 * <p>The mode is ignored if listeners are inherited from a superclass.
	 * <p>Defaults to {@link MergeMode#REPLACE_DEFAULTS REPLACE_DEFAULTS}
	 * for backwards compatibility.
	 * @see MergeMode
	 * @since 4.1
	 */
	/**
	 * 在<strong>不</ strong>不从超类继承侦听器的类上声明{@code  @TestExecutionListeners}时使用的<em>合并模式</ em>。 
	 *  <p>可以设置为{@link  MergeMode＃MERGE_WITH_DEFAULTS MERGE_WITH_DEFAULTS}，以将本地声明的侦听器与默认侦听器合并在一起。 
	 *  <p>如果侦听器是从超类继承的，则将忽略该模式。 
	 *  <p>默认为{@link  MergeMode＃REPLACE_DEFAULTS REPLACE_DEFAULTS}，以实现向后兼容。 
	 *  
	 * @see  MergeMode @始于4.1
	 */
	MergeMode mergeMode() default MergeMode.REPLACE_DEFAULTS;


	/**
	 * Enumeration of <em>modes</em> that dictate whether or not explicitly
	 * declared listeners are merged with the default listeners when
	 * {@code @TestExecutionListeners} is declared on a class that does
	 * <strong>not</strong> inherit listeners from a superclass.
	 * @since 4.1
	 */
	/**
	 * <em>模式</ em>的枚举，指示在没有<strong>不</ strong>继承侦听器的类上声明{@code  @TestExecutionListeners}时是否将显式声明的侦听器与默认侦听器合并从超类。 
	 *  @始于4.1
	 */
	enum MergeMode {

		/**
		 * Indicates that locally declared listeners should replace the default
		 * listeners.
		 */
		/**
		 * 指示本地声明的侦听器应替换默认侦听器。 
		 * 
		 */
		REPLACE_DEFAULTS,

		/**
		 * Indicates that locally declared listeners should be merged with the
		 * default listeners.
		 * <p>The merging algorithm ensures that duplicates are removed from
		 * the list and that the resulting set of merged listeners is sorted
		 * according to the semantics of
		 * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator
		 * AnnotationAwareOrderComparator}. If a listener implements
		 * {@link org.springframework.core.Ordered Ordered} or is annotated
		 * with {@link org.springframework.core.annotation.Order @Order} it can
		 * influence the position in which it is merged with the defaults; otherwise,
		 * locally declared listeners will simply be appended to the list of default
		 * listeners when merged.
		 */
		/**
		 * 指示应将本地声明的侦听器与默认侦听器合并。 
		 *  <p>合并算法可确保从列表中删除重复项，并确保根据{@link  org.springframework.core.annotation.AnnotationAwareOrderComparator AnnotationAwareOrderComparator}的语义对合并的侦听器集进行排序。 
		 * 如果侦听器实现{@link  org.springframework.core.Ordered Ordered}或使用{@link  org.springframework.core.annotation.Order @Order}进行注释，则它可以影响与之合并的位置默认值;否则，在合并时，本地声明的侦听器将简单地添加到默认侦听器列表中。 
		 * 
		 */
		MERGE_WITH_DEFAULTS
	}

}
