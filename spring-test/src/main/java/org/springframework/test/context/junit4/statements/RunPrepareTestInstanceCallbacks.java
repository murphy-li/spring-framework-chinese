/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.context.junit4.statements;

import org.junit.runners.model.Statement;

import org.springframework.test.context.TestContextManager;

/**
 * {@code RunPrepareTestInstanceCallbacks} is a custom JUnit {@link Statement} which
 * allows the <em>Spring TestContext Framework</em> to be plugged into the JUnit
 * execution chain by calling {@link TestContextManager#prepareTestInstance(Object)
 * prepareTestInstance()} on the supplied {@link TestContextManager}.
 *
 * @author Sam Brannen
 * @since 4.2
 * @see #evaluate()
 */
/**
 * {@code  RunPrepareTestInstanceCallbacks}是一个自定义的JUnit {@link 语句}，它允许通过调用{@link  TestContextManager＃prepareTestInstance（）将<em> Spring TestContext Framework </ em>插入到JUnit执行链中。 
 * 对象）在提供的{@link  TestContextManager}上的prepareTestInstance（）}。 
 *  @author  Sam Brannen @从4.2开始
 * @see  #evaluate（）
 */
public class RunPrepareTestInstanceCallbacks extends Statement {

	private final Statement next;

	private final Object testInstance;

	private final TestContextManager testContextManager;


	/**
	 * Construct a new {@code RunPrepareTestInstanceCallbacks} statement.
	 * @param next the next {@code Statement} in the execution chain; never {@code null}
	 * @param testInstance the current test instance; never {@code null}
	 * @param testContextManager the {@code TestContextManager} upon which to call
	 * {@code prepareTestInstance()}; never {@code null}
	 */
	/**
	 * 构造一个新的{@code  RunPrepareTestInstanceCallbacks}语句。 
	 *  
	 * @param 在执行链中的下一个{@code 语句}之后； 
	 * 从不{@code  null} 
	 * @param  testInstance当前测试实例； 
	 * 永不{@code  null} 
	 * @param  testContextManager调用{@code  prepareTestInstance（）}的{@code  TestContextManager}； 
	 * 从不{@code  null}
	 */
	public RunPrepareTestInstanceCallbacks(Statement next, Object testInstance, TestContextManager testContextManager) {
		this.next = next;
		this.testInstance = testInstance;
		this.testContextManager = testContextManager;
	}


	/**
	 * Invoke {@link TestContextManager#prepareTestInstance(Object)} and
	 * then evaluate the next {@link Statement} in the execution chain
	 * (typically an instance of {@link RunAfterTestMethodCallbacks}).
	 */
	/**
	 * 调用{@link  TestContextManager＃prepareTestInstance（Object）}，然后评估执行链中的下一个{@link 语句}（通常是{@link  RunAfterTestMethodCallbacks}的实例）。 
	 * 
	 */
	@Override
	public void evaluate() throws Throwable {
		this.testContextManager.prepareTestInstance(this.testInstance);
		this.next.evaluate();
	}

}
