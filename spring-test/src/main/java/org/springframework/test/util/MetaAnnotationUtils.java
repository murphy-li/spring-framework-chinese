/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.util;

import java.lang.annotation.Annotation;
import java.util.HashSet;
import java.util.Set;

import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.core.annotation.AnnotationAttributes;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.core.style.ToStringCreator;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;

/**
 * {@code MetaAnnotationUtils} is a collection of utility methods that complements
 * the standard support already available in {@link AnnotationUtils}.
 *
 * <p>Whereas {@code AnnotationUtils} provides utilities for <em>getting</em> or
 * <em>finding</em> an annotation, {@code MetaAnnotationUtils} goes a step further
 * by providing support for determining the <em>root class</em> on which an
 * annotation is declared, either directly or indirectly via a <em>composed
 * annotation</em>. This additional information is encapsulated in an
 * {@link AnnotationDescriptor}.
 *
 * <p>The additional information provided by an {@code AnnotationDescriptor} is
 * required by the <em>Spring TestContext Framework</em> in order to be able to
 * support class hierarchy traversals for annotations such as
 * {@link org.springframework.test.context.ContextConfiguration @ContextConfiguration},
 * {@link org.springframework.test.context.TestExecutionListeners @TestExecutionListeners},
 * and {@link org.springframework.test.context.ActiveProfiles @ActiveProfiles}
 * which offer support for merging and overriding various <em>inherited</em>
 * annotation attributes (e.g.
 * {@link org.springframework.test.context.ContextConfiguration#inheritLocations}).
 *
 * @author Sam Brannen
 * @since 4.0
 * @see AnnotationUtils
 * @see AnnotationDescriptor
 */
/**
 * {@code  MetaAnnotationUtils}是实用程序方法的集合，它补充了{@link  AnnotationUtils}中已经提供的标准支持。 
 *  <p> {{@code> AnnotationUtils}提供了用于<em>获取</ em>或<em> finding </ em>注释的实用程序，而{@code  MetaAnnotationUtils}通过提供支持来确定直接在其上声明注释的<em>根类</ em>，该注释可以通过<em>组成的注释</ em>直接或间接地声明。 
 * 此附加信息封装在{@link  AnnotationDescriptor}中。 
 *  <p> <em> Spring TestContext Framework </ em>需要由{@code  AnnotationDescriptor}提供的其他信息，以便能够支持对诸如{@link  org这样的注释的类层次结构遍历.springframework.test.context.ContextConfiguration @ContextConfiguration}，{<@link> org.springframework.test.context.TestExecutionListeners @TestExecutionListeners}和{@link  org.springframework.test.context.ActiveProfiles @ActiveProfiles}支持合并和覆盖各种<em>继承的</ em>注释属性（例如{@link  org.springframework.test.context.ContextConfiguration＃inheritLocations}）。 
 *  @author  Sam Brannen @从4.0开始
 * @see  AnnotationUtils 
 * @see  AnnotationDescriptor
 */
public abstract class MetaAnnotationUtils {

	/**
	 * Find the {@link AnnotationDescriptor} for the supplied {@code annotationType}
	 * on the supplied {@link Class}, traversing its annotations, interfaces, and
	 * superclasses if no annotation can be found on the given class itself.
	 * <p>This method explicitly handles class-level annotations which are not
	 * declared as {@linkplain java.lang.annotation.Inherited inherited} <em>as
	 * well as meta-annotations</em>.
	 * <p>The algorithm operates as follows:
	 * <ol>
	 * <li>Search for the annotation on the given class and return a corresponding
	 * {@code AnnotationDescriptor} if found.
	 * <li>Recursively search through all annotations that the given class declares.
	 * <li>Recursively search through all interfaces implemented by the given class.
	 * <li>Recursively search through the superclass hierarchy of the given class.
	 * </ol>
	 * <p>In this context, the term <em>recursively</em> means that the search
	 * process continues by returning to step #1 with the current annotation,
	 * interface, or superclass as the class to look for annotations on.
	 * @param clazz the class to look for annotations on
	 * @param annotationType the type of annotation to look for
	 * @return the corresponding annotation descriptor if the annotation was found;
	 * otherwise {@code null}
	 * @see #findAnnotationDescriptorForTypes(Class, Class...)
	 */
	/**
	 * 如果在给定类本身上找不到注释，则遍历其注释，接口和超类，在提供的{@link 类}上找到提供的{@code 注解类型}的{@link  AnnotationDescriptor}。 
	 *  <p>此方法显式处理未声明为{@link  plain java.lang.annotation.InheritedInherited} <em>以及元注释</ em>的类级注释。 
	 *  <p>该算法的操作如下：<ol> <li>在给定类上搜索注释，如果找到，则返回相应的{@code  AnnotationDescriptor}。 
	 *  <li>递归搜索给定类声明的所有注释。 
	 *  <li>递归搜索给定类实现的所有接口。 
	 *  <li>递归搜索给定类的超类层次结构。 
	 *  </ ol> <p>在这种情况下，术语<em>递归</ em>表示搜索过程将继续到步骤＃1，并以当前的注释，接口或超类作为要在其上查找注释的类，从而继续进行搜索。 
	 *  
	 * @param 使类在
	 * @param 注释上查找注释类型键入注释的类型以在找到注释的情况下查找
	 * @return 相应的注释描述符； 
	 * 否则{@code  null} 
	 * @see  #findAnnotationDescriptorForTypes（Class，Class ...）
	 */
	@Nullable
	public static <T extends Annotation> AnnotationDescriptor<T> findAnnotationDescriptor(
			Class<?> clazz, Class<T> annotationType) {

		return findAnnotationDescriptor(clazz, new HashSet<>(), annotationType);
	}

	/**
	 * Perform the search algorithm for {@link #findAnnotationDescriptor(Class, Class)},
	 * avoiding endless recursion by tracking which annotations have already been
	 * <em>visited</em>.
	 * @param clazz the class to look for annotations on
	 * @param visited the set of annotations that have already been visited
	 * @param annotationType the type of annotation to look for
	 * @return the corresponding annotation descriptor if the annotation was found;
	 * otherwise {@code null}
	 */
	/**
	 * 对{@link  #findAnnotationDescriptor（Class，Class）}执行搜索算法，通过跟踪已<em>访问过的注释</ em>来避免无限递归。 
	 *  
	 * @param 吸引类，以在
	 * @param 上访问已被访问的注释集上查找注释
	 * @param 注释键入注释的类型，以查找
	 * @return 相应的注释描述符（如果注释是发现;否则{@code  null}
	 */
	@Nullable
	private static <T extends Annotation> AnnotationDescriptor<T> findAnnotationDescriptor(
			@Nullable Class<?> clazz, Set<Annotation> visited, Class<T> annotationType) {

		Assert.notNull(annotationType, "Annotation type must not be null");
		if (clazz == null || Object.class == clazz) {
			return null;
		}

		// Declared locally?
		if (AnnotationUtils.isAnnotationDeclaredLocally(annotationType, clazz)) {
			return new AnnotationDescriptor<>(clazz, clazz.getAnnotation(annotationType));
		}

		// Declared on a composed annotation (i.e., as a meta-annotation)?
		for (Annotation composedAnn : clazz.getDeclaredAnnotations()) {
			Class<? extends Annotation> composedType = composedAnn.annotationType();
			if (!AnnotationUtils.isInJavaLangAnnotationPackage(composedType.getName()) && visited.add(composedAnn)) {
				AnnotationDescriptor<T> descriptor = findAnnotationDescriptor(composedType, visited, annotationType);
				if (descriptor != null) {
					return new AnnotationDescriptor<>(
							clazz, descriptor.getDeclaringClass(), composedAnn, descriptor.getAnnotation());
				}
			}
		}

		// Declared on interface?
		for (Class<?> ifc : clazz.getInterfaces()) {
			AnnotationDescriptor<T> descriptor = findAnnotationDescriptor(ifc, visited, annotationType);
			if (descriptor != null) {
				return new AnnotationDescriptor<>(clazz, descriptor.getDeclaringClass(),
						descriptor.getComposedAnnotation(), descriptor.getAnnotation());
			}
		}

		// Declared on a superclass?
		return findAnnotationDescriptor(clazz.getSuperclass(), visited, annotationType);
	}

	/**
	 * Find the {@link UntypedAnnotationDescriptor} for the first {@link Class}
	 * in the inheritance hierarchy of the specified {@code clazz} (including
	 * the specified {@code clazz} itself) which declares at least one of the
	 * specified {@code annotationTypes}.
	 * <p>This method traverses the annotations, interfaces, and superclasses
	 * of the specified {@code clazz} if no annotation can be found on the given
	 * class itself.
	 * <p>This method explicitly handles class-level annotations which are not
	 * declared as {@linkplain java.lang.annotation.Inherited inherited} <em>as
	 * well as meta-annotations</em>.
	 * <p>The algorithm operates as follows:
	 * <ol>
	 * <li>Search for a local declaration of one of the annotation types on
	 * the given class and return a corresponding {@code UntypedAnnotationDescriptor}
	 * if found.
	 * <li>Recursively search through all annotations that the given class declares.
	 * <li>Recursively search through all interfaces implemented by the given class.
	 * <li>Recursively search through the superclass hierarchy of the given class.
	 * </ol>
	 * <p>In this context, the term <em>recursively</em> means that the search
	 * process continues by returning to step #1 with the current annotation,
	 * interface, or superclass as the class to look for annotations on.
	 * @param clazz the class to look for annotations on
	 * @param annotationTypes the types of annotations to look for
	 * @return the corresponding annotation descriptor if one of the annotations
	 * was found; otherwise {@code null}
	 * @see #findAnnotationDescriptor(Class, Class)
	 */
	/**
	 * 在声明至少包含以下内容的指定{@code  clazz}（包括指定的{@code  clazz}本身）的继承层次结构中，为第一个{@link  Class}找到{@link  UntypedAnnotationDescriptor}指定的{@code 注解类型}之一。 
	 *  <p>如果在给定类本身上找不到注释，则此方法遍历指定{@code  clazz}的注释，接口和超类。 
	 *  <p>此方法显式处理未声明为{@link  plain java.lang.annotation.InheritedInherited} <em>以及元注释</ em>的类级注释。 
	 *  <p>该算法的操作如下：<ol> <li>在给定类上搜索注释类型之一的本地声明，如果找到，则返回相应的{@code  UntypedAnnotationDescriptor}。 
	 *  <li>递归搜索给定类声明的所有注释。 
	 *  <li>递归搜索给定类实现的所有接口。 
	 *  <li>递归搜索给定类的超类层次结构。 
	 *  </ ol> <p>在这种情况下，术语<em>递归</ em>表示搜索过程将继续到步骤＃1，并以当前的注释，接口或超类作为要在其上查找注释的类，从而继续进行搜索。 
	 *  
	 * @param 吸引类，以在
	 * @param 注释上查找注释。 
	 * 键入注释的类型，以查找
	 * @return 相应的注释描述符（如果找到了注释之一）； 
	 * 否则{@code  null} 
	 * @see  #findAnnotationDescriptor（Class，Class）
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	public static UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(
			Class<?> clazz, Class<? extends Annotation>... annotationTypes) {

		return findAnnotationDescriptorForTypes(clazz, new HashSet<>(), annotationTypes);
	}

	/**
	 * Perform the search algorithm for {@link #findAnnotationDescriptorForTypes(Class, Class...)},
	 * avoiding endless recursion by tracking which annotations have already been
	 * <em>visited</em>.
	 * @param clazz the class to look for annotations on
	 * @param visited the set of annotations that have already been visited
	 * @param annotationTypes the types of annotations to look for
	 * @return the corresponding annotation descriptor if one of the annotations
	 * was found; otherwise {@code null}
	 */
	/**
	 * 对{@link  #findAnnotationDescriptorForTypes（Class，Class ...）}执行搜索算法，通过跟踪哪些注释已经被<em>访问</ em>来避免无限递归。 
	 *  
	 * @param 吸引类，以在
	 * @param 上访问已被访问的注释集上查找注释。 
	 * 
	 * @param 注解键入注释的类型，以查找
	 * @return 相应的注释描述符（如果其中之一）。 
	 * 找到注释； 
	 * 否则{@code  null}
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	private static UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(@Nullable Class<?> clazz,
			Set<Annotation> visited, Class<? extends Annotation>... annotationTypes) {

		assertNonEmptyAnnotationTypeArray(annotationTypes, "The list of annotation types must not be empty");
		if (clazz == null || Object.class == clazz) {
			return null;
		}

		// Declared locally?
		for (Class<? extends Annotation> annotationType : annotationTypes) {
			if (AnnotationUtils.isAnnotationDeclaredLocally(annotationType, clazz)) {
				return new UntypedAnnotationDescriptor(clazz, clazz.getAnnotation(annotationType));
			}
		}

		// Declared on a composed annotation (i.e., as a meta-annotation)?
		for (Annotation composedAnnotation : clazz.getDeclaredAnnotations()) {
			if (!AnnotationUtils.isInJavaLangAnnotationPackage(composedAnnotation) && visited.add(composedAnnotation)) {
				UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(
						composedAnnotation.annotationType(), visited, annotationTypes);
				if (descriptor != null) {
					return new UntypedAnnotationDescriptor(clazz, descriptor.getDeclaringClass(),
							composedAnnotation, descriptor.getAnnotation());
				}
			}
		}

		// Declared on interface?
		for (Class<?> ifc : clazz.getInterfaces()) {
			UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(ifc, visited, annotationTypes);
			if (descriptor != null) {
				return new UntypedAnnotationDescriptor(clazz, descriptor.getDeclaringClass(),
						descriptor.getComposedAnnotation(), descriptor.getAnnotation());
			}
		}

		// Declared on a superclass?
		return findAnnotationDescriptorForTypes(clazz.getSuperclass(), visited, annotationTypes);
	}

	private static void assertNonEmptyAnnotationTypeArray(Class<?>[] annotationTypes, String message) {
		if (ObjectUtils.isEmpty(annotationTypes)) {
			throw new IllegalArgumentException(message);
		}
		for (Class<?> clazz : annotationTypes) {
			if (!Annotation.class.isAssignableFrom(clazz)) {
				throw new IllegalArgumentException("Array elements must be of type Annotation");
			}
		}
	}


	/**
	 * Descriptor for an {@link Annotation}, including the {@linkplain
	 * #getDeclaringClass() class} on which the annotation is <em>declared</em>
	 * as well as the actual {@linkplain #getAnnotation() annotation} instance.
	 * <p>If the annotation is used as a meta-annotation, the descriptor also includes
	 * the {@linkplain #getComposedAnnotation() composed annotation} on which the
	 * annotation is present. In such cases, the <em>root declaring class</em> is
	 * not directly annotated with the annotation but rather indirectly via the
	 * composed annotation.
	 * <p>Given the following example, if we are searching for the {@code @Transactional}
	 * annotation <em>on</em> the {@code TransactionalTests} class, then the
	 * properties of the {@code AnnotationDescriptor} would be as follows.
	 * <ul>
	 * <li>rootDeclaringClass: {@code TransactionalTests} class object</li>
	 * <li>declaringClass: {@code TransactionalTests} class object</li>
	 * <li>composedAnnotation: {@code null}</li>
	 * <li>annotation: instance of the {@code Transactional} annotation</li>
	 * </ul>
	 * <p><pre style="code">
	 * &#064;Transactional
	 * &#064;ContextConfiguration({"/test-datasource.xml", "/repository-config.xml"})
	 * public class TransactionalTests { }
	 * </pre>
	 * <p>Given the following example, if we are searching for the {@code @Transactional}
	 * annotation <em>on</em> the {@code UserRepositoryTests} class, then the
	 * properties of the {@code AnnotationDescriptor} would be as follows.
	 * <ul>
	 * <li>rootDeclaringClass: {@code UserRepositoryTests} class object</li>
	 * <li>declaringClass: {@code RepositoryTests} class object</li>
	 * <li>composedAnnotation: instance of the {@code RepositoryTests} annotation</li>
	 * <li>annotation: instance of the {@code Transactional} annotation</li>
	 * </ul>
	 * <p><pre style="code">
	 * &#064;Transactional
	 * &#064;ContextConfiguration({"/test-datasource.xml", "/repository-config.xml"})
	 * &#064;Retention(RetentionPolicy.RUNTIME)
	 * public &#064;interface RepositoryTests { }
	 *
	 * &#064;RepositoryTests
	 * public class UserRepositoryTests { }
	 * </pre>
	 *
	 * @param <T> the annotation type
	 */
	/**
	 * {@link 注解}的描述符，包括在其上声明了<em> </ em>的{@link  plain #getDeclaringClass（）类}以及实际的{@link  plain＃ getAnnotation（）注解}实例。 
	 *  <p>如果注释用作元注释，则描述符还包括在其上存在注释的{@link  plain #getComposedAnnotation（）组成的注释}。 
	 * 在这种情况下，<em> root声明类</ em>不会直接用注释进行注释，而是通过组合的注释间接进行注释。 
	 *  <p>在下面的示例中，如果我们在{@code  TransactionalTests}类的</ em>上搜索{@code  @Transactional}注释<em>，则{<@code > AnnotationDescriptor}如下。 
	 *  <ul> <li> rootDeclaringClass：{@code  TransactionalTests}类对象</ li> <li> declaringClass：{@code  TransactionalTests}类对象</ li> <li> composedAnnotation：{@code  null } </ li> <li>注释：{@code  Transactional}注释</ li> </ ul> <p> <pre style ="code"> @Transactional @ContextConfiguration（{"/ test- datasource.xml"，"/repository-config.xml"}）公共类TransactionalTests {} </ pre> <p>给出以下示例，如果我们要搜索{@code  @Transactional}注释<em>在{@code  UserRepositoryTests}类上</ em>，则{@code  AnnotationDescriptor}的属性如下。 
	 *  <ul> <li> rootDeclaringClass：{@code  UserRepositoryTests}类对象</ li> <li> declaringClass：{@code  RepositoryTests}类对象</ li> <li> composedAnnotation：{<@的实例代码> RepositoryTests}注释</ li> <li>注释：{@code  Transactional}注释</ li> </ ul> </ ul> <p> <pre style ="code"> @Transactional @ContextConfiguration（{ "/test-datasource.xml"，"/repository-config.xml"}）@Retention（RetentionPolicy.RUNTIME）public @interface RepositoryTests {} @RepositoryTests公共类UserRepositoryTests {} </ pre> 
	 * @param  <T>注释类型
	 */
	public static class AnnotationDescriptor<T extends Annotation> {

		private final Class<?> rootDeclaringClass;

		private final Class<?> declaringClass;

		@Nullable
		private final Annotation composedAnnotation;

		private final T annotation;

		private final AnnotationAttributes annotationAttributes;

		public AnnotationDescriptor(Class<?> rootDeclaringClass, T annotation) {
			this(rootDeclaringClass, rootDeclaringClass, null, annotation);
		}

		public AnnotationDescriptor(Class<?> rootDeclaringClass, Class<?> declaringClass,
				@Nullable Annotation composedAnnotation, T annotation) {

			Assert.notNull(rootDeclaringClass, "'rootDeclaringClass' must not be null");
			Assert.notNull(annotation, "Annotation must not be null");
			this.rootDeclaringClass = rootDeclaringClass;
			this.declaringClass = declaringClass;
			this.composedAnnotation = composedAnnotation;
			this.annotation = annotation;
			AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(
					rootDeclaringClass, annotation.annotationType().getName(), false, false);
			Assert.state(attributes != null, "No annotation attributes");
			this.annotationAttributes = attributes;
		}

		public Class<?> getRootDeclaringClass() {
			return this.rootDeclaringClass;
		}

		public Class<?> getDeclaringClass() {
			return this.declaringClass;
		}

		public T getAnnotation() {
			return this.annotation;
		}

		/**
		 * Synthesize the merged {@link #getAnnotationAttributes AnnotationAttributes}
		 * in this descriptor back into an annotation of the target
		 * {@linkplain #getAnnotationType annotation type}.
		 * @since 4.2
		 * @see #getAnnotationAttributes()
		 * @see #getAnnotationType()
		 * @see AnnotationUtils#synthesizeAnnotation(java.util.Map, Class, java.lang.reflect.AnnotatedElement)
		 */
		/**
		 * 在此描述符中将合并的{@link  #getAnnotationAttributes AnnotationAttributes}合成回目标{@link  plain #getAnnotationType注释类型}的注释。 
		 *  @since 4.2 
		 * @see  #getAnnotationAttributes（）
		 * @see  #getAnnotationType（）
		 * @see  AnnotationUtils＃synthesizeAnnotation（java.util.Map，Class，java.lang.reflect.AnnotatedElement）
		 */
		@SuppressWarnings("unchecked")
		public T synthesizeAnnotation() {
			return AnnotationUtils.synthesizeAnnotation(
					getAnnotationAttributes(), (Class<T>) getAnnotationType(), getRootDeclaringClass());
		}

		public Class<? extends Annotation> getAnnotationType() {
			return this.annotation.annotationType();
		}

		public AnnotationAttributes getAnnotationAttributes() {
			return this.annotationAttributes;
		}

		@Nullable
		public Annotation getComposedAnnotation() {
			return this.composedAnnotation;
		}

		@Nullable
		public Class<? extends Annotation> getComposedAnnotationType() {
			return (this.composedAnnotation != null ? this.composedAnnotation.annotationType() : null);
		}

		/**
		 * Provide a textual representation of this {@code AnnotationDescriptor}.
		 */
		/**
		 * 提供此{@code  AnnotationDescriptor}的文本表示形式。 
		 * 
		 */
		@Override
		public String toString() {
			return new ToStringCreator(this)
					.append("rootDeclaringClass", this.rootDeclaringClass)
					.append("declaringClass", this.declaringClass)
					.append("composedAnnotation", this.composedAnnotation)
					.append("annotation", this.annotation)
					.toString();
		}
	}


	/**
	 * <em>Untyped</em> extension of {@code AnnotationDescriptor} that is used
	 * to describe the declaration of one of several candidate annotation types
	 * where the actual annotation type cannot be predetermined.
	 */
	/**
	 * {@code  AnnotationDescriptor}的<em> Untyped </ em>扩展名，用于描述无法预定实际注释类型的几种候选注释类型之一的声明。 
	 * 
	 */
	public static class UntypedAnnotationDescriptor extends AnnotationDescriptor<Annotation> {

		public UntypedAnnotationDescriptor(Class<?> rootDeclaringClass, Annotation annotation) {
			this(rootDeclaringClass, rootDeclaringClass, null, annotation);
		}

		public UntypedAnnotationDescriptor(Class<?> rootDeclaringClass, Class<?> declaringClass,
				@Nullable Annotation composedAnnotation, Annotation annotation) {

			super(rootDeclaringClass, declaringClass, composedAnnotation, annotation);
		}

		/**
		 * Throws an {@link UnsupportedOperationException} since the type of annotation
		 * represented by the {@link #getAnnotationAttributes AnnotationAttributes} in
		 * an {@code UntypedAnnotationDescriptor} is unknown.
		 * @since 4.2
		 */
		/**
		 * 抛出{@link  UnsupportedOperationException}，因为由{@code  UntypedAnnotationDescriptor}中的{@link  #getAnnotationAttributes AnnotationAttributes}表示的注释类型未知。 
		 *  @4.2起
		 */
		@Override
		public Annotation synthesizeAnnotation() {
			throw new UnsupportedOperationException(
					"getMergedAnnotation() is unsupported in UntypedAnnotationDescriptor");
		}
	}

}
