/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.util;

import org.skyscreamer.jsonassert.JSONAssert;

/**
 * A helper class for assertions on JSON content.
 *
 * <p>Use of this class requires the <a
 * href="https://jsonassert.skyscreamer.org/">JSONassert</a> library.
 *
 * @author Sebastien Deleuze
 * @since 4.1
 */
/**
 * JSON内容断言的帮助器类。 
 *  <p>使用此类需要<a href="https://jsonassert.skyscreamer.org/"> JSONassert </a>库。 
 *  @author 塞巴斯蒂安·德勒兹@4.1起
 */
public class JsonExpectationsHelper {

	/**
	 * Parse the expected and actual strings as JSON and assert the two
	 * are "similar" - i.e. they contain the same attribute-value pairs
	 * regardless of formatting with a lenient checking (extensible, and non-strict
	 * array ordering).
	 * @param expected the expected JSON content
	 * @param actual the actual JSON content
	 * @since 4.1
	 * @see #assertJsonEqual(String, String, boolean)
	 */
	/**
	 * 将期望的字符串和实际的字符串解析为JSON，并断言这两个字符串是"相似的"-即它们包含相同的属性值对，而不管采用宽松的检查格式（可扩展且非严格的数组排序）。 
	 *  
	 * @param 预期的预期JSON内容
	 * @param 实际的实际JSON内容@从4.1开始
	 * @see  #assertJsonEqual（String，String，boolean）
	 */
	public void assertJsonEqual(String expected, String actual) throws Exception {
		assertJsonEqual(expected, actual, false);
	}

	/**
	 * Parse the expected and actual strings as JSON and assert the two
	 * are "similar" - i.e. they contain the same attribute-value pairs
	 * regardless of formatting.
	 * <p>Can compare in two modes, depending on {@code strict} parameter value:
	 * <ul>
	 * <li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>
	 * <li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>
	 * </ul>
	 * @param expected the expected JSON content
	 * @param actual the actual JSON content
	 * @param strict enables strict checking
	 * @since 4.2
	 */
	/**
	 * 将期望的字符串和实际的字符串解析为JSON，并断言这两者是"相似的"-即，无论格式如何，它们都包含相同的属性值对。 
	 *  <p>可以根据{@code  strict}参数值在两种模式下进行比较：<ul> <li> {<@code> true}：严格检查。 
	 * 不可扩展，且数组排序严格。 
	 * </ li> <li> {<@code> false}：宽松的检查。 
	 * 可扩展的非严格数组排序。 
	 * </ li> </ ul> 
	 * @param 期望预期的JSON内容
	 * @param 实际的实际JSON内容
	 * @param 严格启用严格检查@since 4.2
	 */
	public void assertJsonEqual(String expected, String actual, boolean strict) throws Exception {
		JSONAssert.assertEquals(expected, actual, strict);
	}

	/**
	 * Parse the expected and actual strings as JSON and assert the two
	 * are "not similar" - i.e. they contain different attribute-value pairs
	 * regardless of formatting with a lenient checking (extensible, and non-strict
	 * array ordering).
	 * @param expected the expected JSON content
	 * @param actual the actual JSON content
	 * @since 4.1
	 * @see #assertJsonNotEqual(String, String, boolean)
	 */
	/**
	 * 将期望的字符串和实际的字符串解析为JSON，并断言两者是"不相似的"-即它们包含不同的属性-值对，而不论采用宽松的检查格式（可扩展且严格的数组排序）。 
	 *  
	 * @param 预期的预期JSON内容
	 * @param 实际的实际JSON内容@从4.1开始
	 * @see  #assertJsonNotEqual（String，String，boolean）
	 */
	public void assertJsonNotEqual(String expected, String actual) throws Exception {
		assertJsonNotEqual(expected, actual, false);
	}

	/**
	 * Parse the expected and actual strings as JSON and assert the two
	 * are "not similar" - i.e. they contain different attribute-value pairs
	 * regardless of formatting.
	 * <p>Can compare in two modes, depending on {@code strict} parameter value:
	 * <ul>
	 * <li>{@code true}: strict checking. Not extensible, and strict array ordering.</li>
	 * <li>{@code false}: lenient checking. Extensible, and non-strict array ordering.</li>
	 * </ul>
	 * @param expected the expected JSON content
	 * @param actual the actual JSON content
	 * @param strict enables strict checking
	 * @since 4.2
	 */
	/**
	 * 将期望的字符串和实际的字符串解析为JSON，并断言这两者是"不相似的"-即，无论格式如何，它们都包含不同的属性值对。 
	 *  <p>可以根据{@code  strict}参数值在两种模式下进行比较：<ul> <li> {<@code> true}：严格检查。 
	 * 不可扩展，且数组排序严格。 
	 * </ li> <li> {<@code> false}：宽松的检查。 
	 * 可扩展的非严格数组排序。 
	 * </ li> </ ul> 
	 * @param 期望预期的JSON内容
	 * @param 实际的实际JSON内容
	 * @param 严格启用严格检查@since 4.2
	 */
	public void assertJsonNotEqual(String expected, String actual, boolean strict) throws Exception {
		JSONAssert.assertNotEquals(expected, actual, strict);
	}

}
