/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet.htmlunit.webdriver;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.WebClient;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;

import org.springframework.lang.Nullable;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport;
import org.springframework.test.web.servlet.htmlunit.WebRequestMatcher;
import org.springframework.test.web.servlet.setup.MockMvcConfigurer;
import org.springframework.util.Assert;
import org.springframework.web.context.WebApplicationContext;

/**
 * {@code MockMvcHtmlUnitDriverBuilder} simplifies the building of an
 * {@link HtmlUnitDriver} that delegates to {@link MockMvc} and optionally
 * delegates to an actual connection for specific requests.
 *
 * <p>By default, the driver will delegate to {@code MockMvc} to handle
 * requests to {@code localhost} and to a {@link WebClient} to handle any
 * other URL (i.e. to perform an actual HTTP request).
 *
 * @author Rob Winch
 * @author Sam Brannen
 * @since 4.2
 * @see #mockMvcSetup(MockMvc)
 * @see #webAppContextSetup(WebApplicationContext)
 * @see #webAppContextSetup(WebApplicationContext, MockMvcConfigurer)
 * @see #javascriptEnabled(boolean)
 * @see #withDelegate(WebConnectionHtmlUnitDriver)
 * @see #build()
 */
/**
 * {@code  MockMvcHtmlUnitDriverBuilder}简化了{@link  HtmlUnitDriver}的构建，该构建委托给{@link  MockMvc}并可以选择委托给特定请求的实际连接。 
 *  <p>默认情况下，驱动程序将委派给{@code  MockMvc}来处理对{@code  localhost}的请求，并委托给{@link  WebClient}来处理任何其他URL（即执行实际的HTTP请求）。 
 *  @author  Rob Winch @author  Sam Brannen @始于4.2 （布尔值）
 * @see  #withDelegate（WebConnectionHtmlUnitDriver）
 * @see  #build（）
 */
public class MockMvcHtmlUnitDriverBuilder extends MockMvcWebConnectionBuilderSupport<MockMvcHtmlUnitDriverBuilder> {

	@Nullable
	private HtmlUnitDriver driver;

	private boolean javascriptEnabled = true;


	protected MockMvcHtmlUnitDriverBuilder(MockMvc mockMvc) {
		super(mockMvc);
	}

	protected MockMvcHtmlUnitDriverBuilder(WebApplicationContext context) {
		super(context);
	}

	protected MockMvcHtmlUnitDriverBuilder(WebApplicationContext context, MockMvcConfigurer configurer) {
		super(context, configurer);
	}


	/**
	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied
	 * {@link MockMvc} instance.
	 * @param mockMvc the {@code MockMvc} instance to use (never {@code null})
	 * @return the MockMvcHtmlUnitDriverBuilder to customize
	 */
	/**
	 * 基于提供的{@link  MockMvc}实例创建一个新的{@code  MockMvcHtmlUnitDriverBuilder}。 
	 *  
	 * @param  mockMvc要使用的{@code  MockMvc}实例（绝不使用{@code  null}）
	 * @return  MockMvcHtmlUnitDriverBuilder进行自定义
	 */
	public static MockMvcHtmlUnitDriverBuilder mockMvcSetup(MockMvc mockMvc) {
		Assert.notNull(mockMvc, "MockMvc must not be null");
		return new MockMvcHtmlUnitDriverBuilder(mockMvc);
	}

	/**
	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied
	 * {@link WebApplicationContext}.
	 * @param context the {@code WebApplicationContext} to create a {@link MockMvc}
	 * instance from (never {@code null})
	 * @return the MockMvcHtmlUnitDriverBuilder to customize
	 */
	/**
	 * 基于提供的{@link  WebApplicationContext}创建一个新的{@code  MockMvcHtmlUnitDriverBuilder}。 
	 *  
	 * @param 上下文{{@@code> WebApplicationContext}，从中创建{@link  MockMvc}实例（从没有（<{@@code> null}）
	 * @return  MockMvcHtmlUnitDriverBuilder进行自定义
	 */
	public static MockMvcHtmlUnitDriverBuilder webAppContextSetup(WebApplicationContext context) {
		Assert.notNull(context, "WebApplicationContext must not be null");
		return new MockMvcHtmlUnitDriverBuilder(context);
	}

	/**
	 * Create a new {@code MockMvcHtmlUnitDriverBuilder} based on the supplied
	 * {@link WebApplicationContext} and {@link MockMvcConfigurer}.
	 * @param context the {@code WebApplicationContext} to create a {@link MockMvc}
	 * instance from (never {@code null})
	 * @param configurer the {@code MockMvcConfigurer} to apply (never {@code null})
	 * @return the MockMvcHtmlUnitDriverBuilder to customize
	 */
	/**
	 * 基于提供的{@link  WebApplicationContext}和{@link  MockMvcConfigurer}创建一个新的{@code  MockMvcHtmlUnitDriverBuilder}。 
	 *  
	 * @param 上下文{{@@code> WebApplicationContext}从中创建一个{@link  MockMvc}实例（从不（<{@@code> null}）
	 * @param 配置器将{@code  MockMvcConfigurer}应用于（从不{@code  null}）
	 * @return  MockMvcHtmlUnitDriverBuilder进行自定义
	 */
	public static MockMvcHtmlUnitDriverBuilder webAppContextSetup(WebApplicationContext context,
			MockMvcConfigurer configurer) {

		Assert.notNull(context, "WebApplicationContext must not be null");
		Assert.notNull(configurer, "MockMvcConfigurer must not be null");
		return new MockMvcHtmlUnitDriverBuilder(context, configurer);
	}

	/**
	 * Specify whether JavaScript should be enabled.
	 * <p>Default is {@code true}.
	 * @param javascriptEnabled {@code true} if JavaScript should be enabled
	 * @return this builder for further customizations
	 * @see #build()
	 */
	/**
	 * 指定是否应启用JavaScript。 
	 *  <p>默认值为{@code  true}。 
	 *  
	 * @param  javascriptEnabled {@code  true}（如果应启用JavaScript）
	 * @return 此构建器以进行进一步的自定义
	 * @see  #build（）
	 */
	public MockMvcHtmlUnitDriverBuilder javascriptEnabled(boolean javascriptEnabled) {
		this.javascriptEnabled = javascriptEnabled;
		return this;
	}

	/**
	 * Supply the {@code WebConnectionHtmlUnitDriver} that the driver
	 * {@linkplain #build built} by this builder should delegate to when
	 * processing non-{@linkplain WebRequestMatcher matching} requests.
	 * @param driver the {@code WebConnectionHtmlUnitDriver} to delegate to
	 * for requests that do not match (never {@code null})
	 * @return this builder for further customizations
	 * @see #build()
	 */
	/**
	 * 提供在处理非{@link  plain WebRequestMatcher匹配}请求时，此构建器驱动程序{@link  plain #build}应当委派给的{@code  WebConnectionHtmlUnitDriver}。 
	 *  
	 * @param 驱动程序{{@@code> WebConnectionHtmlUnitDriver}委托给不匹配的请求（从未{<@@code> null}）
	 * @return 此构建器以进行进一步的自定义
	 * @see  #build（）
	 */
	public MockMvcHtmlUnitDriverBuilder withDelegate(WebConnectionHtmlUnitDriver driver) {
		Assert.notNull(driver, "HtmlUnitDriver must not be null");
		driver.setJavascriptEnabled(this.javascriptEnabled);
		driver.setWebConnection(createConnection(driver.getWebClient()));
		this.driver = driver;
		return this;
	}

	/**
	 * Build the {@link HtmlUnitDriver} configured via this builder.
	 * <p>The returned driver will use the configured {@link MockMvc} instance
	 * for processing any {@linkplain WebRequestMatcher matching} requests
	 * and a delegate {@code HtmlUnitDriver} for all other requests.
	 * <p>If a {@linkplain #withDelegate delegate} has been explicitly configured,
	 * it will be used; otherwise, a default {@code WebConnectionHtmlUnitDriver}
	 * with the {@link BrowserVersion} set to {@link BrowserVersion#CHROME CHROME}
	 * will be configured as the delegate.
	 * @return the {@code HtmlUnitDriver} to use
	 * @see #withDelegate(WebConnectionHtmlUnitDriver)
	 */
	/**
	 * 生成通过此构建器配置的{@link  HtmlUnitDriver}。 
	 *  <p>返回的驱动程序将使用配置的{@link  MockMvc}实例处理任何{@link  plain WebRequestMatcher匹配}请求，并使用委托人{@code  HtmlUnitDriver}处理所有其他请求。 
	 *  <p>如果已经明确配置了{@link  plain #withDelegate委托}，则将使用它。 
	 * 否则，会将{{@link> BrowserVersion}设置为{@link  BrowserVersion＃CHROME CHROME}的默认{@code  WebConnectionHtmlUnitDriver}配置为委托。 
	 *  
	 * @return  {@code  HtmlUnitDriver}以使用
	 * @see  #withDelegate（WebConnectionHtmlUnitDriver）
	 */
	public HtmlUnitDriver build() {
		return (this.driver != null ? this.driver :
				withDelegate(new WebConnectionHtmlUnitDriver(BrowserVersion.CHROME)).build());
	}

}
