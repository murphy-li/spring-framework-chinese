/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet.request;

import java.net.URI;

import javax.servlet.DispatcherType;

import org.springframework.http.HttpMethod;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;

/**
 * Static factory methods for {@link RequestBuilder RequestBuilders}.
 *
 * <h3>Integration with the Spring TestContext Framework</h3>
 * <p>Methods in this class will reuse a
 * {@link org.springframework.mock.web.MockServletContext MockServletContext}
 * that was created by the Spring TestContext Framework.
 *
 * <h3>Eclipse Users</h3>
 * <p>Consider adding this class as a Java editor favorite. To navigate to
 * this setting, open the Preferences and type "favorites".
 *
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @author Greg Turnquist
 * @author Sebastien Deleuze
 * @author Sam Brannen
 * @author Kamill Sokol
 * @since 3.2
 */
/**
 * {@link  RequestBuilder RequestBuilders}的静态工厂方法。 
 *  <h3>与Spring TestContext Framework集成</ h3> <p>此类中的方法将重用由Spring TestContext Framework创建的{@link  org.springframework.mock.web.MockServletContext MockServletContext}。 
 *  <h3> Eclipse用户</ h3> <p>考虑将此类添加为Java编辑器的收藏夹。 
 * 要导航到此设置，请打开"首选项"，然后键入"收藏夹"。 
 *  @author  Arjen Poutsma @author  Rossen Stoyanchev @author  Greg Turnquist @author  Sebastien Deleuze @author  Sam Brannen @author  Kamill Sokol @since 3.2
 */
public abstract class MockMvcRequestBuilders {

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a GET request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为GET请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder get(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.GET, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a GET request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为GET请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder get(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.GET, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a POST request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为POST请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder post(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.POST, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a POST request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为POST请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder post(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.POST, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a PUT request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为PUT请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder put(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.PUT, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a PUT request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为PUT请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder put(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.PUT, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为PATCH请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder patch(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.PATCH, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a PATCH request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为PATCH请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder patch(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.PATCH, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为DELETE请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder delete(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.DELETE, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a DELETE request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为DELETE请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder delete(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.DELETE, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 为OPTIONS请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder options(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request.
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 为OPTIONS请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL自4.0.3起
	 */
	public static MockHttpServletRequestBuilder options(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 * @since 4.1
	 */
	/**
	 * 为HEAD请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 产生的URL将被编码
	 * @param  uriVars零个或多个URI变量@始于4.1
	 */
	public static MockHttpServletRequestBuilder head(String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(HttpMethod.HEAD, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a HEAD request.
	 * @param uri the URL
	 * @since 4.1
	 */
	/**
	 * 为HEAD请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL @始于4.1
	 */
	public static MockHttpServletRequestBuilder head(URI uri) {
		return new MockHttpServletRequestBuilder(HttpMethod.HEAD, uri);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.
	 * @param method the HTTP method (GET, POST, etc)
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 */
	/**
	 * 使用给定的HTTP方法为请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量
	 */
	public static MockHttpServletRequestBuilder request(HttpMethod method, String urlTemplate, Object... uriVars) {
		return new MockHttpServletRequestBuilder(method, urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockHttpServletRequestBuilder} for a request with the given HTTP method.
	 * @param httpMethod the HTTP method (GET, POST, etc)
	 * @param uri the URL
	 * @since 4.0.3
	 */
	/**
	 * 使用给定的HTTP方法为请求创建一个{@link  MockHttpServletRequestBuilder}。 
	 *  
	 * @param  httpMethod HTTP方法（GET，POST等）
	 * @param  uri URL @since 4.0.3起
	 */
	public static MockHttpServletRequestBuilder request(HttpMethod httpMethod, URI uri) {
		return new MockHttpServletRequestBuilder(httpMethod, uri);
	}

	/**
	 * Alternative factory method that allows for custom HTTP verbs (e.g. WebDAV).
	 * @param httpMethod the HTTP method
	 * @param uri the URL
	 * @since 4.3
	 */
	/**
	 * 允许自定义HTTP动词（例如WebDAV）的备用工厂方法。 
	 *  
	 * @param  httpMethod HTTP方法
	 * @param  uri URL @since 4.3
	 */
	public static MockHttpServletRequestBuilder request(String httpMethod, URI uri) {
		return new MockHttpServletRequestBuilder(httpMethod, uri);
	}

	/**
	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 * @since 5.0
	 */
	/**
	 * 为多部分请求创建一个{@link  MockMultipartHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果URL将被编码为
	 * @param  uriVars零个或多个URI变量，自5.0起
	 */
	public static MockMultipartHttpServletRequestBuilder multipart(String urlTemplate, Object... uriVars) {
		return new MockMultipartHttpServletRequestBuilder(urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.
	 * @param uri the URL
	 * @since 5.0
	 */
	/**
	 * 为多部分请求创建一个{@link  MockMultipartHttpServletRequestBuilder}。 
	 *  
	 * @param  uri URL @始于5​​.0
	 */
	public static MockMultipartHttpServletRequestBuilder multipart(URI uri) {
		return new MockMultipartHttpServletRequestBuilder(uri);
	}

	/**
	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.
	 * @param urlTemplate a URL template; the resulting URL will be encoded
	 * @param uriVars zero or more URI variables
	 * @deprecated in favor of {@link #multipart(String, Object...)}
	 */
	/**
	 * 为多部分请求创建一个{@link  MockMultipartHttpServletRequestBuilder}。 
	 *  
	 * @param  urlTemplate URL模板； 
	 * 结果网址将被编码为
	 * @param  uriVars弃用零个或多个URI变量，而推荐使用{@link  #multipart（String，Object ...）}
	 */
	@Deprecated
	public static MockMultipartHttpServletRequestBuilder fileUpload(String urlTemplate, Object... uriVars) {
		return new MockMultipartHttpServletRequestBuilder(urlTemplate, uriVars);
	}

	/**
	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request.
	 * @param uri the URL
	 * @since 4.0.3
	 * @deprecated in favor of {@link #multipart(URI)}
	 */
	/**
	 * 为多部分请求创建一个{@link  MockMultipartHttpServletRequestBuilder}。 
	 *  
	 * @param  uri不推荐使用URL @@since 4.0.3起，而推荐使用{@link  #multipart（URI）}
	 */
	@Deprecated
	public static MockMultipartHttpServletRequestBuilder fileUpload(URI uri) {
		return new MockMultipartHttpServletRequestBuilder(uri);
	}


	/**
	 * Create a {@link RequestBuilder} for an async dispatch from the
	 * {@link MvcResult} of the request that started async processing.
	 * <p>Usage involves performing a request that starts async processing first:
	 * <pre class="code">
	 * MvcResult mvcResult = this.mockMvc.perform(get("/1"))
	 *	.andExpect(request().asyncStarted())
	 *	.andReturn();
	 *  </pre>
	 * <p>And then performing the async dispatch re-using the {@code MvcResult}:
	 * <pre class="code">
	 * this.mockMvc.perform(asyncDispatch(mvcResult))
	 * 	.andExpect(status().isOk())
	 * 	.andExpect(content().contentType(MediaType.APPLICATION_JSON))
	 * 	.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));
	 * </pre>
	 * @param mvcResult the result from the request that started async processing
	 */
	/**
	 * 从启动异步处理的请求的{@link  MvcResult}创建一个用于异步调度的{@link  RequestBuilder}。 
	 *  <p>用法涉及执行首先开始异步处理的请求：<pre class ="code"> MvcResult mvcResult = this.mockMvc.perform（get（"/ 1"））.andExpect（request（）。 
	 * asyncStarted（）） .andReturn（）; </ pre> <p>然后使用{@code  MvcResult}重新执行异步调度：<pre class ="code"> this.mockMvc.perform（asyncDispatch（mvcResult））.andExpect（status（） .isOk（））.andExpect（content（）。 
	 * contentType（MediaType.APPLICATION_JSON））.andExpect（content（）。 
	 * string（"{\"name \"：\"Joe \"，\"someDouble \"：0.0， \"someBoolean \"：false}"））； 
	 *  </ pre> 
	 * @param  mvcResult来自启动异步处理的请求的结果
	 */
	public static RequestBuilder asyncDispatch(MvcResult mvcResult) {

		// There must be an async result before dispatching
		mvcResult.getAsyncResult();

		return servletContext -> {
			MockHttpServletRequest request = mvcResult.getRequest();
			request.setDispatcherType(DispatcherType.ASYNC);
			request.setAsyncStarted(false);
			return request;
		};
	}

}
