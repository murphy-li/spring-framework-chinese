/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet;

import org.springframework.lang.Nullable;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.servlet.FlashMap;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

/**
 * Provides access to the result of an executed request.
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 提供对已执行请求结果的访问。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public interface MvcResult {

	/**
	 * Return the performed request.
	 * @return the request, never {@code null}
	 */
	/**
	 * 返回执行的请求。 
	 *  
	 * @return 请求，永不{@code  null}
	 */
	MockHttpServletRequest getRequest();

	/**
	 * Return the resulting response.
	 * @return the response, never {@code null}
	 */
	/**
	 * 返回结果响应。 
	 *  
	 * @return 响应，永不{@code  null}
	 */
	MockHttpServletResponse getResponse();

	/**
	 * Return the executed handler.
	 * @return the handler, possibly {@code null} if none were executed
	 */
	/**
	 * 返回执行的处理程序。 
	 *  
	 * @return 处理程序，如果未执行，则可能为{@code  null}
	 */
	@Nullable
	Object getHandler();

	/**
	 * Return interceptors around the handler.
	 * @return interceptors, or {@code null} if none were selected
	 */
	/**
	 * 返回处理程序周围的拦截器。 
	 *  
	 * @return 拦截器，如果未选择，则为{<@@code> null}
	 */
	@Nullable
	HandlerInterceptor[] getInterceptors();

	/**
	 * Return the {@code ModelAndView} prepared by the handler.
	 * @return a {@code ModelAndView}, or {@code null} if none
	 */
	/**
	 * 返回处理程序准备的{@code  ModelAndView}。 
	 *  
	 * @return 一个{@code  ModelAndView}，如果没有，则为{@code  null}
	 */
	@Nullable
	ModelAndView getModelAndView();

	/**
	 * Return any exception raised by a handler and successfully resolved
	 * through a {@link HandlerExceptionResolver}.
	 * @return an exception, or {@code null} if none
	 */
	/**
	 * 返回处理程序引发并通过{@link  HandlerExceptionResolver}成功解决的所有异常。 
	 *  
	 * @return 异常，如果没有则为{@code  null}
	 */
	@Nullable
	Exception getResolvedException();

	/**
	 * Return the "output" flash attributes saved during request processing.
	 * @return the {@code FlashMap}, possibly empty
	 */
	/**
	 * 返回在请求处理期间保存的"输出"闪存属性。 
	 *  
	 * @return  {@code  FlashMap}，可能为空
	 */
	FlashMap getFlashMap();

	/**
	 * Get the result of async execution.
	 * <p>This method will wait for the async result to be set within the
	 * timeout value associated with the async request, see
	 * {@link org.springframework.mock.web.MockAsyncContext#setTimeout
	 * MockAsyncContext#setTimeout}. Alternatively, use
	 * {@link #getAsyncResult(long)} to specify the amount of time to wait.
	 * @throws IllegalStateException if the async result was not set
	 */
	/**
	 * 获取异步执行的结果。 
	 *  <p>此方法将等待在与异步请求关联的超时值内设置异步结果，请参见{@link  org.springframework.mock.web.MockAsyncContext＃setTimeout MockAsyncContext＃setTimeout}。 
	 * 或者，使用{@link  #getAsyncResult（long）}指定等待时间。 
	 *  
	 * @throws  IllegalStateException如果未设置异步结果
	 */
	Object getAsyncResult();

	/**
	 * Get the result of async execution and wait if necessary.
	 * @param timeToWait how long to wait for the async result to be set, in
	 * 	milliseconds; if -1, then fall back on the timeout value associated with
	 * 	the async request, see
	 * 	{@link org.springframework.mock.web.MockAsyncContext#setTimeout
	 * 	MockAsyncContext#setTimeout} for more details.
	 * @throws IllegalStateException if the async result was not set
	 */
	/**
	 * 获取异步执行的结果，并在必要时等待。 
	 *  
	 * @param  timeToWait等待设置异步结果的时间，以毫秒为单位； 
	 * 如果为-1，则返回与异步请求关联的超时值，有关更多详细信息，请参见{@link  org.springframework.mock.web.MockAsyncContext＃setTimeout MockAsyncContext＃setTimeout}。 
	 *  
	 * @throws  IllegalStateException如果未设置异步结果
	 */
	Object getAsyncResult(long timeToWait);

}
