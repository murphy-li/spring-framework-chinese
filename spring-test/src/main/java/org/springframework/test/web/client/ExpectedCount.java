/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.client;

import org.springframework.util.Assert;

/**
 * A simple type representing a range for an expected count.
 *
 * <p>Examples:
 * <pre>
 * import static org.springframework.test.web.client.ExpectedCount.*
 *
 * once()
 * twice()
 * manyTimes()
 * times(5)
 * min(2)
 * max(4)
 * between(2, 4)
 * never()
 * </pre>
 *
 * @author Rossen Stoyanchev
 * @since 4.3
 */
/**
 * 一个简单的类型，代表预期计数的范围。 
 *  <p>示例：<pre>导入静态org.springframework.test.web.client.ExpectedCount。 
 * 一旦（）两次（）多次（）次（5）最小（2）最大（4）之间（2，4）从不（）</ pre> @author  Rossen Stoyanchev @since 4.3
 */
public final class ExpectedCount {

	private final int minCount;

	private final int maxCount;


	/**
	 * Private constructor.
	 * See static factory methods in this class.
	 */
	/**
	 * 私有构造函数。 
	 * 请参阅此类中的静态工厂方法。 
	 * 
	 */
	private ExpectedCount(int minCount, int maxCount) {
		Assert.isTrue(minCount >= 0, "minCount >= 0 is required");
		Assert.isTrue(maxCount >= minCount, "maxCount >= minCount is required");
		this.minCount = minCount;
		this.maxCount = maxCount;
	}


	/**
	 * Return the {@code min} boundary of the expected count range.
	 */
	/**
	 * 返回预期计数范围的{@code  min}边界。 
	 * 
	 */
	public int getMinCount() {
		return this.minCount;
	}

	/**
	 * Return the {@code max} boundary of the expected count range.
	 */
	/**
	 * 返回预期计数范围的{@code  max}边界。 
	 * 
	 */
	public int getMaxCount() {
		return this.maxCount;
	}


	/**
	 * Exactly once.
	 */
	/**
	 * 恰好一次。 
	 * 
	 */
	public static ExpectedCount once() {
		return new ExpectedCount(1, 1);
	}

	/**
	 * Exactly twice.
	 */
	/**
	 * 恰好两次。 
	 * 
	 */
	public static ExpectedCount twice() {
		return new ExpectedCount(2, 2);
	}

	/**
	 * Many times (range of 1..Integer.MAX_VALUE).
	 */
	/**
	 * 很多次（范围为1..Integer.MAX_VALUE）。 
	 * 
	 */
	public static ExpectedCount manyTimes() {
		return new ExpectedCount(1, Integer.MAX_VALUE);
	}

	/**
	 * Exactly N times.
	 */
	/**
	 * 恰好N次。 
	 * 
	 */
	public static ExpectedCount times(int count) {
		Assert.isTrue(count >= 1, "'count' must be >= 1");
		return new ExpectedCount(count, count);
	}

	/**
	 * At least {@code min} number of times.
	 */
	/**
	 * 至少{@code  min}次。 
	 * 
	 */
	public static ExpectedCount min(int min) {
		Assert.isTrue(min >= 1, "'min' must be >= 1");
		return new ExpectedCount(min, Integer.MAX_VALUE);
	}

	/**
	 * At most {@code max} number of times.
	 */
	/**
	 * 最多{@code  max}次。 
	 * 
	 */
	public static ExpectedCount max(int max) {
		Assert.isTrue(max >= 1, "'max' must be >= 1");
		return new ExpectedCount(1, max);
	}

	/**
	 * No calls expected at all, i.e. min=0 and max=0.
	 * @since 4.3.6
	 */
	/**
	 * 根本没有通话，即min = 0和max = 0。 
	 *  @自4.3.6起
	 */
	public static ExpectedCount never() {
		return new ExpectedCount(0, 0);
	}

	/**
	 * Between {@code min} and {@code max} number of times.
	 */
	/**
	 * 在{@code  min}和{@code  max}次之间。 
	 * 
	 */
	public static ExpectedCount between(int min, int max) {
		return new ExpectedCount(min, max);
	}

}
