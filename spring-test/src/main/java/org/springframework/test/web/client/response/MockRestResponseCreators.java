/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.client.response;

import java.io.IOException;
import java.net.URI;

import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.test.web.client.ResponseCreator;

/**
 * Static factory methods for obtaining a {@link ResponseCreator} instance.
 *
 * <p><strong>Eclipse users:</strong> consider adding this class as a Java editor
 * favorite. To navigate, open the Preferences and type "favorites".
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 用于获取{@link  ResponseCreator}实例的静态工厂方法。 
 *  <p> <strong> Eclipse用户</ strong>：考虑将此类添加为Java编辑器的收藏夹。 
 * 要进行导航，请打开"首选项"，然后键入"收藏夹"。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public abstract class MockRestResponseCreators {

	/**
	 * {@code ResponseCreator} for a 200 response (OK).
	 */
	/**
	 * {@code  ResponseCreator}获得200响应（确定）。 
	 * 
	 */
	public static DefaultResponseCreator withSuccess() {
		return new DefaultResponseCreator(HttpStatus.OK);
	}

	/**
	 * {@code ResponseCreator} for a 200 response (OK) with String body.
	 * @param body the response body, a "UTF-8" string
	 * @param contentType the type of the content (may be {@code null})
	 */
	/**
	 * {@code  ResponseCreator}使用String正文获得200响应（确定）。 
	 *  
	 * @param 正文，响应正文，一个"UTF-8"字符串，<
	 * @param> contentType内容的类型（可以为{@code  null}）
	 */
	public static DefaultResponseCreator withSuccess(String body, @Nullable MediaType contentType) {
		DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body);
		return (contentType != null ? creator.contentType(contentType) : creator);
	}

	/**
	 * {@code ResponseCreator} for a 200 response (OK) with byte[] body.
	 * @param body the response body
	 * @param contentType the type of the content (may be {@code null})
	 */
	/**
	 * {@code  ResponseCreator}用于带有byte []正文的200响应（确定）。 
	 *  
	 * @param 正文响应正文
	 * @param  contentType内容的类型（可以为{@code  null}）
	 */
	public static DefaultResponseCreator withSuccess(byte[] body, @Nullable MediaType contentType) {
		DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body);
		return (contentType != null ? creator.contentType(contentType) : creator);
	}

	/**
	 * {@code ResponseCreator} for a 200 response (OK) content with {@link Resource}-based body.
	 * @param body the response body
	 * @param contentType the type of the content (may be {@code null})
	 */
	/**
	 * {@code  ResponseCreator}用于具有基于{@link  Resource}的正文的200响应（OK）内容。 
	 *  
	 * @param 正文响应正文
	 * @param  contentType内容的类型（可以为{@code  null}）
	 */
	public static DefaultResponseCreator withSuccess(Resource body, @Nullable MediaType contentType) {
		DefaultResponseCreator creator = new DefaultResponseCreator(HttpStatus.OK).body(body);
		return (contentType != null ? creator.contentType(contentType) : creator);
	}

	/**
	 * {@code ResponseCreator} for a 201 response (CREATED) with a 'Location' header.
	 * @param location the value for the {@code Location} header
	 */
	/**
	 * {@code  ResponseCreator}用于带有"Location"标头的201响应（已创建）。 
	 *  
	 * @param  location {@code  Location}标头的值
	 */
	public static DefaultResponseCreator withCreatedEntity(URI location) {
		return new DefaultResponseCreator(HttpStatus.CREATED).location(location);
	}

	/**
	 * {@code ResponseCreator} for a 204 response (NO_CONTENT).
	 */
	/**
	 * {@code  ResponseCreator}以获得204响应（NO_CONTENT）。 
	 * 
	 */
	public static DefaultResponseCreator withNoContent() {
		return new DefaultResponseCreator(HttpStatus.NO_CONTENT);
	}

	/**
	 * {@code ResponseCreator} for a 400 response (BAD_REQUEST).
	 */
	/**
	 * {@code  ResponseCreator}以获得400个响应（BAD_REQUEST）。 
	 * 
	 */
	public static DefaultResponseCreator withBadRequest() {
		return new DefaultResponseCreator(HttpStatus.BAD_REQUEST);
	}

	/**
	 * {@code ResponseCreator} for a 401 response (UNAUTHORIZED).
	 */
	/**
	 * {@code  ResponseCreator}以获得401响应（未经授权）。 
	 * 
	 */
	public static DefaultResponseCreator withUnauthorizedRequest() {
		return new DefaultResponseCreator(HttpStatus.UNAUTHORIZED);
	}

	/**
	 * {@code ResponseCreator} for a 500 response (SERVER_ERROR).
	 */
	/**
	 * {@code  ResponseCreator}获得500个响应（SERVER_ERROR）。 
	 * 
	 */
	public static DefaultResponseCreator withServerError() {
		return new DefaultResponseCreator(HttpStatus.INTERNAL_SERVER_ERROR);
	}

	/**
	 * {@code ResponseCreator} with a specific HTTP status.
	 * @param status the response status
	 */
	/**
	 * {@code  ResponseCreator}具有特定的HTTP状态。 
	 *  
	 * @param 状态响应状态
	 */
	public static DefaultResponseCreator withStatus(HttpStatus status) {
		return new DefaultResponseCreator(status);
	}

	/**
	 * {@code ResponseCreator} with an internal application {@code IOException}.
	 * <p>For example, one could use this to simulate a {@code SocketTimeoutException}.
	 * @param ex the {@code Exception} to be thrown at HTTP call time
	 * @since 5.2.2
	 */
	/**
	 * {@code  ResponseCreator}和内部应用程序{@code  IOException}。 
	 *  <p>例如，可以使用它来模拟{@code  SocketTimeoutException}。 
	 *  
	 * @param 从{<@@code>异常}抛出，从5.2.2开始在HTTP调用时抛出
	 */
	public static ResponseCreator withException(IOException ex) {
		return request -> {
			throw ex;
		};
	}

}
