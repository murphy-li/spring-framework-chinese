/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet;

/**
 * A {@code ResultMatcher} matches the result of an executed request against
 * some expectation.
 *
 * <p>See static factory methods in
 * {@link org.springframework.test.web.servlet.result.MockMvcResultMatchers
 * MockMvcResultMatchers}.
 *
 * <h3>Example Using Status and Content Result Matchers</h3>
 *
 * <pre class="code">
 * import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 * import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 * import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;
 *
 * // ...
 *
 * WebApplicationContext wac = ...;
 *
 * MockMvc mockMvc = webAppContextSetup(wac).build();
 *
 * mockMvc.perform(get("/form"))
 *   .andExpect(status().isOk())
 *   .andExpect(content().mimeType(MediaType.APPLICATION_JSON));
 * </pre>
 *
 * @author Rossen Stoyanchev
 * @author Sam Brannen
 * @since 3.2
 */
/**
 * {@code  ResultMatcher}将执行请求的结果与某些期望进行匹配。 
 *  <p>请参见{@link  org.springframework.test.web.servlet.result.MockMvcResultMatchers MockMvcResultMatchers}中的静态工厂方法。 
 *  <h3>使用状态和内容结果匹配器的示例</ h3> <pre class ="code">导入静态org.springframework.test.web.servlet.request.MockMvcRequestBuilders。 
 *  ;导入静态org.springframework.test.web.servlet.result.MockMvcResultMatchers。 
 *  ;导入静态org.springframework.test.web.servlet.setup.MockMvcBuilders。 
 *  ; // ... WebApplicationContext wac = ...; MockMvc mockMvc = webAppContextSetup（wac）.build（）; mockMvc.perform（get（"/ form"））.andExpect（status（）。 
 * isOk（））.andExpect（content（）。 
 * mimeType（MediaType.APPLICATION_JSON））;; </ pre> @author  Rossen Stoyanchev @author  Sam Brannen @3.2起
 */
@FunctionalInterface
public interface ResultMatcher {

	/**
	 * Assert the result of an executed request.
	 * @param result the result of the executed request
	 * @throws Exception if a failure occurs
	 */
	/**
	 * 声明已执行请求的结果。 
	 *  
	 * @param 结果是已执行请求的结果
	 * @throws 如果发生故障，则异常
	 */
	void match(MvcResult result) throws Exception;


	/**
	 * Static method for matching with an array of result matchers.
	 * @param matchers the matchers
	 * @since 5.1
	 */
	/**
	 * 与结果匹配器数组匹配的静态方法。 
	 *  
	 * @param 匹配器匹配器@始于5.1
	 */
	static ResultMatcher matchAll(ResultMatcher... matchers) {
		return result -> {
			for (ResultMatcher matcher : matchers) {
				matcher.match(result);
			}
		};
	}

}
