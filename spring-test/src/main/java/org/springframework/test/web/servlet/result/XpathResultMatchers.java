/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet.result;

import java.util.Map;

import javax.xml.xpath.XPathExpressionException;

import org.hamcrest.Matcher;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.springframework.lang.Nullable;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.util.XpathExpectationsHelper;
import org.springframework.test.web.servlet.ResultMatcher;

/**
 * Factory for assertions on the response content using XPath expressions.
 *
 * <p>An instance of this class is typically accessed via
 * {@link MockMvcResultMatchers#xpath}.
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 工厂使用XPath表达式对响应内容进行断言。 
 *  <p>通常通过{@link  MockMvcResultMatchers＃xpath}访问此类的实例。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public class XpathResultMatchers {

	private final XpathExpectationsHelper xpathHelper;


	/**
	 * Protected constructor, not for direct instantiation. Use
	 * {@link MockMvcResultMatchers#xpath(String, Object...)} or
	 * {@link MockMvcResultMatchers#xpath(String, Map, Object...)}.
	 * @param expression the XPath expression
	 * @param namespaces the XML namespaces referenced in the XPath expression, or {@code null}
	 * @param args arguments to parameterize the XPath expression with using the
	 * formatting specifiers defined in {@link String#format(String, Object...)}
	 */
	/**
	 * 受保护的构造函数，不用于直接实例化。 
	 * 使用{@link  MockMvcResultMatchers＃xpath（String，Object ...）}或{@link  MockMvcResultMatchers＃xpath（String，Map，Object ...）}。 
	 *  
	 * @param 表达式XPath表达式
	 * @param 名称空间XPath表达式中引用的XML名称空间，或{@code  null} 
	 * @param  args参数使用在{<中定义的格式说明符来参数化XPath表达式@link> String＃format（String，Object ...）}
	 */
	protected XpathResultMatchers(String expression, @Nullable Map<String, String> namespaces, Object ... args)
			throws XPathExpressionException {

		this.xpathHelper = new XpathExpectationsHelper(expression, namespaces, args);
	}


	/**
	 * Evaluate the XPath and assert the {@link Node} content found with the
	 * given Hamcrest {@link Matcher}.
	 */
	/**
	 * 评估XPath并声明通过给定的Hamcrest {@link  Matcher}找到的{@link  Node}内容。 
	 * 
	 */
	public ResultMatcher node(Matcher<? super Node> matcher) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNode(response.getContentAsByteArray(), getDefinedEncoding(response), matcher);
		};
	}

	/**
	 * Evaluate the XPath and assert the {@link NodeList} content found with the
	 * given Hamcrest {@link Matcher}.
	 * @since 5.2.2
	 */
	/**
	 * 评估XPath并声明通过给定的Hamcrest {@link  Matcher}找到的{@link  NodeList}内容。 
	 *  @从5.2.2开始
	 */
	public ResultMatcher nodeList(Matcher<? super NodeList> matcher) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNodeList(response.getContentAsByteArray(), getDefinedEncoding(response), matcher);
		};
	}

	/**
	 * Get the response encoding if explicitly defined in the response, {code null} otherwise.
	 */
	/**
	 * 如果在响应中明确定义，则获取响应编码，否则返回{code null}。 
	 * 
	 */
	@Nullable
	private String getDefinedEncoding(MockHttpServletResponse response) {
		return (response.isCharset() ? response.getCharacterEncoding() : null);
	}

	/**
	 * Evaluate the XPath and assert that content exists.
	 */
	/**
	 * 评估XPath并断言内容存在。 
	 * 
	 */
	public ResultMatcher exists() {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.exists(response.getContentAsByteArray(), getDefinedEncoding(response));
		};
	}

	/**
	 * Evaluate the XPath and assert that content doesn't exist.
	 */
	/**
	 * 评估XPath并断言内容不存在。 
	 * 
	 */
	public ResultMatcher doesNotExist() {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.doesNotExist(response.getContentAsByteArray(), getDefinedEncoding(response));
		};
	}

	/**
	 * Evaluate the XPath and assert the number of nodes found with the given
	 * Hamcrest {@link Matcher}.
	 */
	/**
	 * 评估XPath并声明使用给定的Hamcrest {@link  Matcher}找到的节点数。 
	 * 
	 */
	public ResultMatcher nodeCount(Matcher<Integer> matcher) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNodeCount(response.getContentAsByteArray(), getDefinedEncoding(response), matcher);
		};
	}

	/**
	 * Evaluate the XPath and assert the number of nodes found.
	 */
	/**
	 * 评估XPath并声明找到的节点数。 
	 * 
	 */
	public ResultMatcher nodeCount(int expectedCount) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNodeCount(response.getContentAsByteArray(), getDefinedEncoding(response), expectedCount);
		};
	}

	/**
	 * Apply the XPath and assert the {@link String} value found with the given
	 * Hamcrest {@link Matcher}.
	 */
	/**
	 * 应用XPath并声明通过给定的Hamcrest {@link  Matcher}找到的{@link  String}值。 
	 * 
	 */
	public ResultMatcher string(Matcher<? super String> matcher) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertString(response.getContentAsByteArray(), getDefinedEncoding(response), matcher);
		};
	}

	/**
	 * Apply the XPath and assert the {@link String} value found.
	 */
	/**
	 * 应用XPath并声明找到的{@link  String}值。 
	 * 
	 */
	public ResultMatcher string(String expectedValue) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertString(response.getContentAsByteArray(), getDefinedEncoding(response), expectedValue);
		};
	}

	/**
	 * Evaluate the XPath and assert the {@link Double} value found with the
	 * given Hamcrest {@link Matcher}.
	 */
	/**
	 * 评估XPath并断言使用给定的Hamcrest {@link  Matcher}找到的{@link  Double}值。 
	 * 
	 */
	public ResultMatcher number(Matcher<? super Double> matcher) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNumber(response.getContentAsByteArray(), getDefinedEncoding(response), matcher);
		};
	}

	/**
	 * Evaluate the XPath and assert the {@link Double} value found.
	 */
	/**
	 * 评估XPath并声明找到的{@link  Double}值。 
	 * 
	 */
	public ResultMatcher number(Double expectedValue) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertNumber(response.getContentAsByteArray(), getDefinedEncoding(response), expectedValue);
		};
	}

	/**
	 * Evaluate the XPath and assert the {@link Boolean} value found.
	 */
	/**
	 * 评估XPath并声明找到的{@link 布尔}值。 
	 * 
	 */
	public ResultMatcher booleanValue(Boolean value) {
		return result -> {
			MockHttpServletResponse response = result.getResponse();
			this.xpathHelper.assertBoolean(response.getContentAsByteArray(), getDefinedEncoding(response), value);
		};
	}

}
