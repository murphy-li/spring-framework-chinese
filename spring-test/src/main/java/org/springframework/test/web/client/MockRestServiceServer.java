/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.client;

import java.io.IOException;
import java.net.URI;

import org.springframework.http.HttpMethod;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.support.RestGatewaySupport;

/**
 * <strong>Main entry point for client-side REST testing</strong>. Used for tests
 * that involve direct or indirect use of the {@link RestTemplate}. Provides a
 * way to set up expected requests that will be performed through the
 * {@code RestTemplate} as well as mock responses to send back thus removing the
 * need for an actual server.
 *
 * <p>Below is an example that assumes static imports from
 * {@code MockRestRequestMatchers}, {@code MockRestResponseCreators},
 * and {@code ExpectedCount}:
 *
 * <pre class="code">
 * RestTemplate restTemplate = new RestTemplate()
 * MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build();
 *
 * server.expect(manyTimes(), requestTo("/hotels/42")).andExpect(method(HttpMethod.GET))
 *     .andRespond(withSuccess("{ \"id\" : \"42\", \"name\" : \"Holiday Inn\"}", MediaType.APPLICATION_JSON));
 *
 * Hotel hotel = restTemplate.getForObject("/hotels/{id}", Hotel.class, 42);
 * &#47;&#47; Use the hotel instance...
 *
 * // Verify all expectations met
 * server.verify();
 * </pre>
 *
 * <p>Note that as an alternative to the above you can also set the
 * {@link MockMvcClientHttpRequestFactory} on a {@code RestTemplate} which
 * allows executing requests against an instance of
 * {@link org.springframework.test.web.servlet.MockMvc MockMvc}.
 *
 * @author Craig Walls
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * <strong>客户端REST测试的主要入口点</ strong>。 
 * 用于涉及直接或间接使用{@link  RestTemplate}的测试。 
 * 提供一种设置期望的请求的方法，该请求将通过{@code  RestTemplate}进行执行，并提供模拟响应以发回，从而消除了对实际服务器的需求。 
 *  <p>下面是一个示例，假定从{@code  MockRestRequestMatchers}，{<@code> MockRestResponseCreators}和{@code  ExpectedCount}静态导入：<pre class ="code"> RestTemplate restTemplate = new RestTemplate （）MockRestServiceServer服务器= MockRestServiceServer.bindTo（restTemplate）.build（）; server.expect（manyTimes（），requestTo（"/ hotels / 42"））。 
 * andExpect（方法（HttpMethod.GET））.andRespond（withSuccess（"{\"id \"：\"42 \"，\"名称\"：\"假日酒店\"}"，MediaType.APPLICATION_JSON））； 
 * 旅馆旅馆= restTemplate.getForObject（"/ hotels / {id}"，Hotel.class，42）; //使用酒店实例... //验证是否满足所有期望server.verify（）; </ pre> <p>请注意，作为上述替代方案，您还可以在{@code  RestTemplate}上设置{@link  MockMvcClientHttpRequestFactory}，以允许针对{@link  org实例执行请求.springframework.test.web.servlet.MockMvc MockMvc}。 
 *  @author 克雷格·沃尔斯@author  Rossen Stoyanchev @3.2起
 */
@SuppressWarnings("deprecation")
public final class MockRestServiceServer {

	private final RequestExpectationManager expectationManager;


	/**
	 * Private constructor with {@code RequestExpectationManager}.
	 * See static builder methods and {@code createServer} shortcut methods.
	 */
	/**
	 * 带有{@code  RequestExpectationManager}的私有构造函数。 
	 * 请参阅静态生成器方法和{@code  createServer}快捷方式。 
	 * 
	 */
	private MockRestServiceServer(RequestExpectationManager expectationManager) {
		this.expectationManager = expectationManager;
	}


	/**
	 * Set up an expectation for a single HTTP request. The returned
	 * {@link ResponseActions} can be used to set up further expectations as
	 * well as to define the response.
	 * <p>This method may be invoked any number times before starting to make
	 * request through the underlying {@code RestTemplate} in order to set up
	 * all expected requests.
	 * @param matcher request matcher
	 * @return a representation of the expectation
	 */
	/**
	 * 为单个HTTP请求设置期望。 
	 * 返回的{@link  ResponseActions}可用于设置进一步的期望以及定义响应。 
	 *  <p>在开始通过基础的{@code  RestTemplate}发出请求之前，可以多次调用此方法，以建立所有预期的请求。 
	 *  
	 * @param 匹配器请求匹配器
	 * @return 期望的表示
	 */
	public ResponseActions expect(RequestMatcher matcher) {
		return expect(ExpectedCount.once(), matcher);
	}

	/**
	 * An alternative to {@link #expect(RequestMatcher)} that also indicates how
	 * many times the request is expected to be executed.
	 * <p>When request expectations have an expected count greater than one, only
	 * the first execution is expected to match the order of declaration. Subsequent
	 * request executions may be inserted anywhere thereafter.
	 * @param count the expected count
	 * @param matcher request matcher
	 * @return a representation of the expectation
	 * @since 4.3
	 */
	/**
	 * {@link  #expect（RequestMatcher）}的替代方法，它还指示期望执行该请求多少次。 
	 *  <p>当请求期望的期望计数大于1时，则仅预期第一个执行与声明的顺序匹配。 
	 * 随后的请求执行可以在其后的任何位置插入。 
	 *  
	 * @param 计数期望的计数
	 * @param 匹配器请求匹配器
	 * @return 从4.3开始的期望表示
	 */
	public ResponseActions expect(ExpectedCount count, RequestMatcher matcher) {
		return this.expectationManager.expectRequest(count, matcher);
	}

	/**
	 * Verify that all expected requests set up via
	 * {@link #expect(RequestMatcher)} were indeed performed.
	 * @throws AssertionError when some expectations were not met
	 */
	/**
	 * 验证是否确实执行了通过{@link  #expect（RequestMatcher）}设置的所有预期请求。 
	 *  
	 * @throws  AssertionError当未达到某些期望值时
	 */
	public void verify() {
		this.expectationManager.verify();
	}

	/**
	 * Reset the internal state removing all expectations and recorded requests.
	 */
	/**
	 * 重置内部状态，删除所有期望和记录的请求。 
	 * 
	 */
	public void reset() {
		this.expectationManager.reset();
	}


	/**
	 * Return a builder for a {@code MockRestServiceServer} that should be used
	 * to reply to the given {@code RestTemplate}.
	 * @since 4.3
	 */
	/**
	 * 返回{@code  MockRestServiceServer}的构建器，该构建器应用于回复给定的{@code  RestTemplate}。 
	 *  @4.3起
	 */
	public static MockRestServiceServerBuilder bindTo(RestTemplate restTemplate) {
		return new DefaultBuilder(restTemplate);
	}

	/**
	 * Return a builder for a {@code MockRestServiceServer} that should be used
	 * to reply to the given {@code AsyncRestTemplate}.
	 * @since 4.3
	 * @deprecated see deprecation notice on
	 * {@link org.springframework.web.client.AsyncRestTemplate} itself
	 */
	/**
	 * 返回{@code  MockRestServiceServer}的构建器，该构建器应用于回复给定的{@code  AsyncRestTemplate}。 
	 *  @since 4.3 @deprecated请参见{@link  org.springframework.web.client.AsyncRestTemplate}本身的弃用通知
	 */
	@Deprecated
	public static MockRestServiceServerBuilder bindTo(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
		return new DefaultBuilder(asyncRestTemplate);
	}

	/**
	 * Return a builder for a {@code MockRestServiceServer} that should be used
	 * to reply to the given {@code RestGatewaySupport}.
	 * @since 4.3
	 */
	/**
	 * 返回{{@code> MockRestServiceServer}的构建器，该构建器应用于回复给定的{@code  RestGatewaySupport}。 
	 *  @4.3起
	 */
	public static MockRestServiceServerBuilder bindTo(RestGatewaySupport restGatewaySupport) {
		Assert.notNull(restGatewaySupport, "'restGatewaySupport' must not be null");
		return new DefaultBuilder(restGatewaySupport.getRestTemplate());
	}


	/**
	 * A shortcut for {@code bindTo(restTemplate).build()}.
	 * @param restTemplate the RestTemplate to set up for mock testing
	 * @return the mock server
	 */
	/**
	 * {@code  bindTo（restTemplate）.build（）}的快捷方式。 
	 *  
	 * @param  restTemplate RestTemplate设置用于模拟测试
	 * @return 模拟服务器
	 */
	public static MockRestServiceServer createServer(RestTemplate restTemplate) {
		return bindTo(restTemplate).build();
	}

	/**
	 * A shortcut for {@code bindTo(asyncRestTemplate).build()}.
	 * @param asyncRestTemplate the AsyncRestTemplate to set up for mock testing
	 * @return the created mock server
	 * @deprecated see deprecation notice on
	 * {@link org.springframework.web.client.AsyncRestTemplate} itself
	 */
	/**
	 * {@code  bindTo（asyncRestTemplate）.build（）}的快捷方式。 
	 *  
	 * @param  asyncRestTemplate为进行模拟测试而设置的AsyncRestTemplate 
	 * @return 已创建的模拟服务器@deprecated参见{@link  org.springframework.web.client.AsyncRestTemplate}本身的弃用通知
	 */
	@Deprecated
	public static MockRestServiceServer createServer(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
		return bindTo(asyncRestTemplate).build();
	}

	/**
	 * A shortcut for {@code bindTo(restGateway).build()}.
	 * @param restGateway the REST gateway to set up for mock testing
	 * @return the created mock server
	 */
	/**
	 * {@code  bindTo（restGateway）.build（）}的快捷方式。 
	 *  
	 * @param  restGateway REST网关设置以进行模拟测试
	 * @return 创建的模拟服务器
	 */
	public static MockRestServiceServer createServer(RestGatewaySupport restGateway) {
		return bindTo(restGateway).build();
	}


	/**
	 * Builder to create a {@code MockRestServiceServer}.
	 */
	/**
	 * 用于创建{@code  MockRestServiceServer}的生成器。 
	 * 
	 */
	public interface MockRestServiceServerBuilder {

		/**
		 * Whether to allow expected requests to be executed in any order not
		 * necessarily matching the order of declaration.
		 * <p>Effectively a shortcut for:<br>
		 * {@code builder.build(new UnorderedRequestExpectationManager)}.
		 * <p>By default this is set to {@code false}
		 * @param ignoreExpectOrder whether to ignore the order of expectations
		 */
		/**
		 * 是否允许期望的请求以不一定与声明顺序匹配的任何顺序执行。 
		 *  <p>实际上是以下快捷方式：<br> {@code  builder.build（new UnorderedRequestExpectationManager）}。 
		 *  <p>默认情况下，它设置为{@code  false} 
		 * @param  ignoreExpectOrder是否忽略期望的顺序
		 */
		MockRestServiceServerBuilder ignoreExpectOrder(boolean ignoreExpectOrder);

		/**
		 * Use the {@link BufferingClientHttpRequestFactory} wrapper to buffer
		 * the input and output streams, and for example, allow multiple reads
		 * of the response body.
		 * @since 5.0.5
		 */
		/**
		 * 使用{@link  BufferingClientHttpRequestFactory}包装器来缓冲输入和输出流，例如，允许多次读取响应主体。 
		 *  @5.0.5起
		 */
		MockRestServiceServerBuilder bufferContent();

		/**
		 * Build the {@code MockRestServiceServer} and set up the underlying
		 * {@code RestTemplate} or {@code AsyncRestTemplate} with a
		 * {@link ClientHttpRequestFactory} that creates mock requests.
		 */
		/**
		 * 构建{@code  MockRestServiceServer}，并使用创建模拟请求的{@link  ClientHttpRequestFactory}设置基础的{@code  RestTemplate}或{@code  AsyncRestTemplate}。 
		 * 
		 */
		MockRestServiceServer build();

		/**
		 * An overloaded build alternative that accepts a custom
		 * {@link RequestExpectationManager}.
		 */
		/**
		 * 接受自定义{@link  RequestExpectationManager}的重载构建替代方案。 
		 * 
		 */
		MockRestServiceServer build(RequestExpectationManager manager);
	}


	private static class DefaultBuilder implements MockRestServiceServerBuilder {

		@Nullable
		private final RestTemplate restTemplate;

		@Nullable
		private final org.springframework.web.client.AsyncRestTemplate asyncRestTemplate;

		private boolean ignoreExpectOrder;

		private boolean bufferContent;


		public DefaultBuilder(RestTemplate restTemplate) {
			Assert.notNull(restTemplate, "RestTemplate must not be null");
			this.restTemplate = restTemplate;
			this.asyncRestTemplate = null;
		}

		public DefaultBuilder(org.springframework.web.client.AsyncRestTemplate asyncRestTemplate) {
			Assert.notNull(asyncRestTemplate, "AsyncRestTemplate must not be null");
			this.restTemplate = null;
			this.asyncRestTemplate = asyncRestTemplate;
		}

		@Override
		public MockRestServiceServerBuilder ignoreExpectOrder(boolean ignoreExpectOrder) {
			this.ignoreExpectOrder = ignoreExpectOrder;
			return this;
		}

		@Override
		public MockRestServiceServerBuilder bufferContent() {
			this.bufferContent = true;
			return this;
		}

		@Override
		public MockRestServiceServer build() {
			if (this.ignoreExpectOrder) {
				return build(new UnorderedRequestExpectationManager());
			}
			else {
				return build(new SimpleRequestExpectationManager());
			}
		}

		@Override
		public MockRestServiceServer build(RequestExpectationManager manager) {
			MockRestServiceServer server = new MockRestServiceServer(manager);
			MockClientHttpRequestFactory factory = server.new MockClientHttpRequestFactory();
			if (this.restTemplate != null) {
				if (this.bufferContent) {
					this.restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(factory));
				}
				else {
					this.restTemplate.setRequestFactory(factory);
				}
			}
			if (this.asyncRestTemplate != null) {
				this.asyncRestTemplate.setAsyncRequestFactory(factory);
			}
			return server;
		}
	}


	/**
	 * Mock ClientHttpRequestFactory that creates requests by iterating
	 * over the list of expected {@link DefaultRequestExpectation}'s.
	 */
	/**
	 * 模拟通过迭代期望的{@link  DefaultRequestExpectation}的列表来创建请求的ClientHttpRequestFactory。 
	 * 
	 */
	private class MockClientHttpRequestFactory implements ClientHttpRequestFactory,
			org.springframework.http.client.AsyncClientHttpRequestFactory {

		@Override
		public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) {
			return createRequestInternal(uri, httpMethod);
		}

		@Override
		public org.springframework.http.client.AsyncClientHttpRequest createAsyncRequest(
				URI uri, HttpMethod httpMethod) {

			return createRequestInternal(uri, httpMethod);
		}

		private org.springframework.mock.http.client.MockAsyncClientHttpRequest createRequestInternal(
				URI uri, HttpMethod httpMethod) {

			Assert.notNull(uri, "'uri' must not be null");
			Assert.notNull(httpMethod, "'httpMethod' must not be null");

			return new org.springframework.mock.http.client.MockAsyncClientHttpRequest(httpMethod, uri) {

				@Override
				protected ClientHttpResponse executeInternal() throws IOException {
					ClientHttpResponse response = expectationManager.validateRequest(this);
					setResponse(response);
					return response;
				}
			};
		}
	}

}
