/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.client;

import java.io.IOException;

import org.springframework.http.client.ClientHttpRequest;
import org.springframework.http.client.ClientHttpResponse;

/**
 * Encapsulates the behavior required to implement {@link MockRestServiceServer}
 * including its public API (create expectations + verify/reset) along with an
 * extra method for verifying actual requests.
 *
 * <p>This contract is not used directly in applications but a custom
 * implementation can be
 * {@link org.springframework.test.web.client.MockRestServiceServer.MockRestServiceServerBuilder#build(RequestExpectationManager)
 * plugged} in through the {@code MockRestServiceServer} builder.
 *
 * @author Rossen Stoyanchev
 * @since 4.3
 */
/**
 * 封装实现{@link  MockRestServiceServer}所需的行为，包括其公共API（创建期望+验证/重置）以及用于验证实际请求的其他方法。 
 *  <p>此合同未在应用程序中直接使用，但是可以通过{@code 插入{@link  org.springframework.test.web.client.MockRestServiceServer.MockRestServiceServerBuilder＃build（RequestExpectationManager）}自定义实现MockRestServiceServer}构建器。 
 *  @author  Rossen Stoyanchev @从4.3开始
 */
public interface RequestExpectationManager {

	/**
	 * Set up a new request expectation. The returned {@link ResponseActions} is
	 * used to add more expectations and define a response.
	 * <p>This is a delegate for
	 * {@link MockRestServiceServer#expect(ExpectedCount, RequestMatcher)}.
	 *
	 * @param requestMatcher a request expectation
	 * @return for setting up further expectations and define a response
	 * @see MockRestServiceServer#expect(RequestMatcher)
	 * @see MockRestServiceServer#expect(ExpectedCount, RequestMatcher)
	 */
	/**
	 * 设置新的请求期望。 
	 * 返回的{@link  ResponseActions}用于添加更多期望并定义响应。 
	 *  <p>这是{@link  MockRestServiceServer＃expect（ExpectedCount，RequestMatcher）}的委托。 
	 *  
	 * @param  requestMatcher请求期望
	 * @return 用于设置进一步的期望并定义响应
	 * @see  MockRestServiceServer＃expect（RequestMatcher）
	 * @see  MockRestServiceServer＃expect（ExpectedCount，RequestMatcher）
	 */
	ResponseActions expectRequest(ExpectedCount count, RequestMatcher requestMatcher);

	/**
	 * Verify that all expectations have been met.
	 * <p>This is a delegate for {@link MockRestServiceServer#verify()}.
	 * @throws AssertionError when some expectations were not met
	 * @see MockRestServiceServer#verify()
	 */
	/**
	 * 验证是否满足所有期望。 
	 *  <p>这是{@link  MockRestServiceServer＃verify（）}的委托。 
	 *  
	 * @throws 未达到某些期望值时出现AssertionError 
	 * @see  MockRestServiceServer＃verify（）
	 */
	void verify();

	/**
	 * Reset the internal state removing all expectations and recorded requests.
	 * <p>This is a delegate for {@link MockRestServiceServer#reset()}.
	 * @see MockRestServiceServer#reset()
	 */
	/**
	 * 重置内部状态，删除所有期望和记录的请求。 
	 *  <p>这是{@link  MockRestServiceServer＃reset（）}的委托。 
	 *  
	 * @see  MockRestServiceServer＃reset（）
	 */
	void reset();


	/**
	 * Validate the given actual request against the declared expectations.
	 * Is successful return the mock response to use or raise an error.
	 * <p>This is used in {@link MockRestServiceServer} against actual requests.
	 * @param request the request
	 * @return the response to return if the request was validated.
	 * @throws AssertionError when some expectations were not met
	 * @throws IOException in case of any validation errors
	 */
	/**
	 * 根据声明的期望验证给定的实际请求。 
	 * 成功返回模拟响应使用或引发错误。 
	 *  <p>在{@link  MockRestServiceServer}中用于实际请求。 
	 *  
	 * @param 请求请求
	 * @return 如果请求已验证，则返回响应。 
	 * 如果未满足某些期望，则
	 * @throws  AssertionError 
	 * @throws  IOException如果发生任何验证错误
	 */
	ClientHttpResponse validateRequest(ClientHttpRequest request) throws IOException;

}
