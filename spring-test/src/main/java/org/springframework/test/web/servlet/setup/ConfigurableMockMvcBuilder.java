/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.servlet.setup;

import javax.servlet.Filter;

import org.springframework.test.web.servlet.MockMvcBuilder;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.ResultHandler;
import org.springframework.test.web.servlet.ResultMatcher;

/**
 * Defines common methods for building a {@code MockMvc}.
 *
 * @author Rossen Stoyanchev
 * @since 4.1
 * @param <B> a self reference to the builder type
 */
/**
 * 定义用于构建{@code  MockMvc}的常用方法。 
 *  @author  Rossen Stoyanchev @从4.1开始
 * @param  <B>对构建器类型的自引用
 */
public interface ConfigurableMockMvcBuilder<B extends ConfigurableMockMvcBuilder<B>> extends MockMvcBuilder {

	/**
	 * Add filters mapped to any request (i.e. "/*"). For example:
	 * <pre class="code">
	 * mockMvcBuilder.addFilters(springSecurityFilterChain);
	 * </pre>
	 * <p>is the equivalent of the following web.xml configuration:
	 * <pre class="code">
	 * &lt;filter-mapping&gt;
	 *     &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;
	 *     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
	 * &lt;/filter-mapping&gt;
	 * </pre>
	 * <p>Filters will be invoked in the order in which they are provided.
	 * @param filters the filters to add
	 */
	/**
	 * 添加映射到任何请求的过滤器（即""）。 
	 * 例如：<pre class ="code"> mockMvcBuilder.addFilters（springSecurityFilterChain）; </ pre> <p>等效于以下web.xml配置：<pre class ="code"> <filter-mapping> <filter-name> springSecurityFilterChain </ filter-name> <url-pattern> </ url-pattern> </ filter-mapping> </ pre> <p>过滤器将按照其提供的顺序进行调用。 
	 *  
	 * @param 过滤要添加的过滤器
	 */
	<T extends B> T addFilters(Filter... filters);

	/**
	 * Add a filter mapped to a specific set of patterns. For example:
	 * <pre class="code">
	 * mockMvcBuilder.addFilters(myResourceFilter, "/resources/*");
	 * </pre>
	 * <p>is the equivalent of:
	 * <pre class="code">
	 * &lt;filter-mapping&gt;
	 *     &lt;filter-name&gt;myResourceFilter&lt;/filter-name&gt;
	 *     &lt;url-pattern&gt;/resources/*&lt;/url-pattern&gt;
	 * &lt;/filter-mapping&gt;
	 * </pre>
	 * <p>Filters will be invoked in the order in which they are provided.
	 * @param filter the filter to add
	 * @param urlPatterns the URL patterns to map to; if empty, "/*" is used by default
	 */
	/**
	 * 添加映射到一组特定模式的过滤器。 
	 * 例如：<pre class ="code"> mockMvcBuilder.addFilters（myResourceFilter，"/ resources"）; </ pre> <p>等效于：<pre class ="code"> <filter-mapping> <filter-name> myResourceFilter </ filter-name> <url-pattern> / resources </ url-pattern> </ filter-mapping> </ pre> <p>将按照提供过滤器的顺序调用过滤器。 
	 *  
	 * @param 过滤器以添加
	 * @param  urlPatterns要映射到的URL模式； 
	 * 如果为空，则默认使用""
	 */
	<T extends B> T addFilter(Filter filter, String... urlPatterns);

	/**
	 * Define default request properties that should be merged into all
	 * performed requests. In effect this provides a mechanism for defining
	 * common initialization for all requests such as the content type, request
	 * parameters, session attributes, and any other request property.
	 *
	 * <p>Properties specified at the time of performing a request override the
	 * default properties defined here.
	 * @param requestBuilder a RequestBuilder; see static factory methods in
	 * {@link org.springframework.test.web.servlet.request.MockMvcRequestBuilders}
	 */
	/**
	 * 定义应合并到所有已执行请求中的默认请求属性。 
	 * 实际上，这提供了一种机制，用于定义所有请求的通用初始化，例如内容类型，请求参数，会话属性和任何其他请求属性。 
	 *  <p>在执行请求时指定的属性将覆盖此处定义的默认属性。 
	 *  
	 * @param  requestBuilder一个RequestBuilder;请参见{@link  org.springframework.test.web.servlet.request.MockMvcRequestBuilders}中的静态工厂方法
	 */
	<T extends B> T defaultRequest(RequestBuilder requestBuilder);

	/**
	 * Define a global expectation that should <em>always</em> be applied to
	 * every response. For example, status code 200 (OK), content type
	 * {@code "application/json"}, etc.
	 * @param resultMatcher a ResultMatcher; see static factory methods in
	 * {@link org.springframework.test.web.servlet.result.MockMvcResultMatchers}
	 */
	/**
	 * 定义应始终<em>始终</ em>应用于每个响应的全局期望。 
	 * 例如，状态码200（OK），内容类型{@code "application / json"}，等等。 
	 * 
	 * @param  resultMatcher一个ResultMatcher； 
	 * 请参见{@link  org.springframework.test.web.servlet.result.MockMvcResultMatchers}中的静态工厂方法
	 */
	<T extends B> T alwaysExpect(ResultMatcher resultMatcher);

	/**
	 * Define a global action that should <em>always</em> be applied to every
	 * response. For example, writing detailed information about the performed
	 * request and resulting response to {@code System.out}.
	 * @param resultHandler a ResultHandler; see static factory methods in
	 * {@link org.springframework.test.web.servlet.result.MockMvcResultHandlers}
	 */
	/**
	 * 定义一个全局动作，该动作应始终<em>始终</ em>应用于每个响应。 
	 * 例如，将有关已执行请求和结果响应的详细信息写入{@code  System.out}。 
	 *  
	 * @param  resultHandler一个ResultHandler;请参见{@link  org.springframework.test.web.servlet.result.MockMvcResultHandlers}中的静态工厂方法
	 */
	<T extends B> T alwaysDo(ResultHandler resultHandler);

	/**
	 * Whether to enable the DispatcherServlet property
	 * {@link org.springframework.web.servlet.DispatcherServlet#setDispatchOptionsRequest
	 * dispatchOptionsRequest} which allows processing of HTTP OPTIONS requests.
	 */
	/**
	 * 是否启用DispatcherServlet属性{@link  org.springframework.web.servlet.DispatcherServlet＃setDispatchOptionsRequest dispatchOptionsRequest}，该属性允许处理HTTP OPTIONS请求。 
	 * 
	 */
	<T extends B> T dispatchOptions(boolean dispatchOptions);

	/**
	 * Add a {@code MockMvcConfigurer} that automates MockMvc setup and
	 * configures it for some specific purpose (e.g. security).
	 * <p>There is a built-in {@link SharedHttpSessionConfigurer} that can be
	 * used to re-use the HTTP session across requests. 3rd party frameworks
	 * like Spring Security also use this mechanism to provide configuration
	 * shortcuts.
	 * @see SharedHttpSessionConfigurer
	 */
	/**
	 * 添加一个{@code  MockMvcConfigurer}来自动执行MockMvc设置，并出于某些特定目的（例如安全性）对其进行配置。 
	 *  <p>有一个内置的{@link  SharedHttpSessionConfigurer}，可用于在请求之间重用HTTP会话。 
	 * 诸如Spring Security的第三方框架也使用此机制来提供配置快捷方式。 
	 *  
	 * @see  SharedHttpSessionConfigurer
	 */
	<T extends B> T apply(MockMvcConfigurer configurer);

}
