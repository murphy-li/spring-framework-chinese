/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.jdbc;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlParameterValue;
import org.springframework.util.StringUtils;

/**
 * {@code JdbcTestUtils} is a collection of JDBC related utility functions
 * intended to simplify standard database testing scenarios.
 *
 * @author Thomas Risberg
 * @author Sam Brannen
 * @author Juergen Hoeller
 * @author Phillip Webb
 * @author Chris Baldwin
 * @since 2.5.4
 * @see org.springframework.jdbc.core.JdbcTemplate
 * @see org.springframework.jdbc.datasource.init.ScriptUtils
 * @see org.springframework.jdbc.datasource.init.ResourceDatabasePopulator
 * @see org.springframework.jdbc.datasource.init.DatabasePopulatorUtils
 */
/**
 * {@code  JdbcTestUtils}是JDBC相关实用程序功能的集合，旨在简化标准数据库测试方案。 
 *  @author 托马斯·里斯伯格@author  Sam Brannen @author  Juergen Hoeller @author  Phillip Webb @author  Chris Baldwin @since 2.5.4 
 * @see  org.springframework.jdbc.core.JdbcTemplate <@请参阅> org.springframework.jdbc.datasource.init.ScriptUtils <@请参阅> org.springframework.jdbc.datasource.init.ResourceDatabasePopulator <@请参阅org.springframework.jdbc.datasource.init.DatabasePopulatorUtils
 */
public abstract class JdbcTestUtils {

	private static final Log logger = LogFactory.getLog(JdbcTestUtils.class);


	/**
	 * Count the rows in the given table.
	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations
	 * @param tableName name of the table to count rows in
	 * @return the number of rows in the table
	 */
	/**
	 * 计算给定表中的行。 
	 *  
	 * @param  jdbcTemplate执行JDBC操作所使用的JdbcTemplate 
	 * @param  tableName表名称以对
	 * @return 中的行进行计数
	 */
	public static int countRowsInTable(JdbcTemplate jdbcTemplate, String tableName) {
		Integer result = jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName, Integer.class);
		return (result != null ? result : 0);
	}

	/**
	 * Count the rows in the given table, using the provided {@code WHERE} clause.
	 * <p>If the provided {@code WHERE} clause contains text, it will be prefixed
	 * with {@code " WHERE "} and then appended to the generated {@code SELECT}
	 * statement. For example, if the provided table name is {@code "person"} and
	 * the provided where clause is {@code "name = 'Bob' and age > 25"}, the
	 * resulting SQL statement to execute will be
	 * {@code "SELECT COUNT(0) FROM person WHERE name = 'Bob' and age > 25"}.
	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations
	 * @param tableName the name of the table to count rows in
	 * @param whereClause the {@code WHERE} clause to append to the query
	 * @return the number of rows in the table that match the provided
	 * {@code WHERE} clause
	 */
	/**
	 * 使用提供的{@code  WHERE}子句计算给定表中的行。 
	 *  <p>如果提供的{@code  WHERE}子句包含文本，则会在其前面加上{@code "WHERE"}，然后附加到生成的{@code  SELECT}语句中。 
	 * 例如，如果提供的表名称为{@code "person"}，提供的where子句为{@code "name ='Bob'and age> 25"}，则要执行的结果SQL语句将为{@code "从名称='Bob'并且年龄> 25的人中选择COUNT（0）"}。 
	 *  
	 * @param  jdbcTemplate用于执行JDBC操作的JdbcTemplate。 
	 * 表中与提供的{@code  WHERE}子句匹配的行数
	 */
	public static int countRowsInTableWhere(JdbcTemplate jdbcTemplate, String tableName, String whereClause) {
		String sql = "SELECT COUNT(0) FROM " + tableName;
		if (StringUtils.hasText(whereClause)) {
			sql += " WHERE " + whereClause;
		}
		Integer result = jdbcTemplate.queryForObject(sql, Integer.class);
		return (result != null ? result : 0);
	}

	/**
	 * Delete all rows from the specified tables.
	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations
	 * @param tableNames the names of the tables to delete from
	 * @return the total number of rows deleted from all specified tables
	 */
	/**
	 * 删除指定表中的所有行。 
	 *  
	 * @param  jdbcTemplate执行JDBC操作所用的JdbcTemplate 
	 * @param  tableNames从
	 * @return 中删除的表名从所有指定的表中删除的总行数
	 */
	public static int deleteFromTables(JdbcTemplate jdbcTemplate, String... tableNames) {
		int totalRowCount = 0;
		for (String tableName : tableNames) {
			int rowCount = jdbcTemplate.update("DELETE FROM " + tableName);
			totalRowCount += rowCount;
			if (logger.isInfoEnabled()) {
				logger.info("Deleted " + rowCount + " rows from table " + tableName);
			}
		}
		return totalRowCount;
	}

	/**
	 * Delete rows from the given table, using the provided {@code WHERE} clause.
	 * <p>If the provided {@code WHERE} clause contains text, it will be prefixed
	 * with {@code " WHERE "} and then appended to the generated {@code DELETE}
	 * statement. For example, if the provided table name is {@code "person"} and
	 * the provided where clause is {@code "name = 'Bob' and age > 25"}, the
	 * resulting SQL statement to execute will be
	 * {@code "DELETE FROM person WHERE name = 'Bob' and age > 25"}.
	 * <p>As an alternative to hard-coded values, the {@code "?"} placeholder can
	 * be used within the {@code WHERE} clause, binding to the given arguments.
	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations
	 * @param tableName the name of the table to delete rows from
	 * @param whereClause the {@code WHERE} clause to append to the query
	 * @param args arguments to bind to the query (leaving it to the PreparedStatement
	 * to guess the corresponding SQL type); may also contain {@link SqlParameterValue}
	 * objects which indicate not only the argument value but also the SQL type and
	 * optionally the scale.
	 * @return the number of rows deleted from the table
	 */
	/**
	 * 使用提供的{@code  WHERE}子句从给定表中删除行。 
	 *  <p>如果提供的{@code  WHERE}子句包含文本，则会在其前面加上{@code "WHERE"}，然后附加到生成的{@code  DELETE}语句中。 
	 * 例如，如果提供的表名称为{@code "person"}，提供的where子句为{@code "name ='Bob'and age> 25"}，则要执行的结果SQL语句将为{@code "从名称='Bob'并且年龄大于25岁的人处删除"}。 
	 *  <p>作为硬编码值的替代方法，可以在{@code  WHERE}子句中使用{@code "？"}占位符，并将其绑定到给定参数。 
	 *  
	 * @param  jdbcTemplate执行JDBC操作所用的JdbcTemplate 
	 * @param  tableName要从
	 * @param 中删除行的表的名称其中使用{@code  WHERE}子句追加到查询
	 * @param  args参数绑定到查询（将其保留在PreparedStatement中以猜测相应的SQL类型）； 
	 * 可能还包含{@link  SqlParameterValue}对象，这些对象不仅指示参数值，还指示SQL类型以及可选的小数位数。 
	 *  
	 * @return 从表中删除的行数
	 */
	public static int deleteFromTableWhere(
			JdbcTemplate jdbcTemplate, String tableName, String whereClause, Object... args) {

		String sql = "DELETE FROM " + tableName;
		if (StringUtils.hasText(whereClause)) {
			sql += " WHERE " + whereClause;
		}
		int rowCount = (args.length > 0 ? jdbcTemplate.update(sql, args) : jdbcTemplate.update(sql));
		if (logger.isInfoEnabled()) {
			logger.info("Deleted " + rowCount + " rows from table " + tableName);
		}
		return rowCount;
	}

	/**
	 * Drop the specified tables.
	 * @param jdbcTemplate the JdbcTemplate with which to perform JDBC operations
	 * @param tableNames the names of the tables to drop
	 */
	/**
	 * 删除指定的表。 
	 *  
	 * @param  jdbcTemplate用于执行JDBC操作的JdbcTemplate 
	 * @param  tableNames要删除的表的名称
	 */
	public static void dropTables(JdbcTemplate jdbcTemplate, String... tableNames) {
		for (String tableName : tableNames) {
			jdbcTemplate.execute("DROP TABLE " + tableName);
			if (logger.isInfoEnabled()) {
				logger.info("Dropped table " + tableName);
			}
		}
	}

}
