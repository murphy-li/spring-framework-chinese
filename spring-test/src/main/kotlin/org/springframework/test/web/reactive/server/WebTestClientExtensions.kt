/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.test.web.reactive.server

import kotlinx.coroutines.flow.Flow
import org.reactivestreams.Publisher
import org.springframework.core.ParameterizedTypeReference
import org.springframework.test.util.AssertionErrors.assertEquals
import org.springframework.test.web.reactive.server.WebTestClient.*

/**
 * Extension for [RequestBodySpec.body] providing a variant without explicit class
 * parameter thanks to Kotlin reified type parameters.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * 由于Kotlin的类型化参数，[RequestBodySpec.body]的扩展提供了没有显式类参数的变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any, S : Publisher<T>> RequestBodySpec.body(publisher: S): RequestHeadersSpec<*>
		= body(publisher, object : ParameterizedTypeReference<T>() {})

/**
 * Extension for [RequestBodySpec.body] providing a `body<T>(Any)` variant
 * leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * @param producer the producer to write to the request. This must be a
 * [Publisher] or another producer adaptable to a
 * [Publisher] via [org.springframework.core.ReactiveAdapterRegistry]
 * @param T the type of the elements contained in the producer
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [RequestBodySpec.body]的扩展提供了一个利用Kotlin修饰类型参数的`body <T>（Any）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  
 * @param 生产者生产者写入请求。 
 * 它必须是[Publisher]或通过[org.springframework.core.ReactiveAdapterRegistry]适应[Publisher]的其他生产者
 * @param  T包含在生产者中的元素类型@author  Sebastien Deleuze @since 5.2
 */
inline fun <reified T : Any> RequestBodySpec.body(producer: Any): RequestHeadersSpec<*>
		= body(producer, object : ParameterizedTypeReference<T>() {})

/**
 * Extension for [RequestBodySpec.body] providing a `body(Flow<T>)` variant
 * leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * @param flow the [Flow] to write to the request
 * @param T the type of the elements contained in the publisher
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [RequestBodySpec.body]的扩展提供了一个利用Kotlin修饰类型参数的`body（Flow <T>）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  
 * @param 流[Flow]写入请求
 * @param  T发布者中包含的元素类型@author  Sebastien Deleuze @since 5.2
 */
inline fun <reified T : Any> RequestBodySpec.body(flow: Flow<T>): RequestHeadersSpec<*> =
		body(flow, object : ParameterizedTypeReference<T>() {})

/**
 * Extension for [ResponseSpec.expectBody] providing an `expectBody<Foo>()` variant and
 * a workaround for [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) which
 * prevents to use `WebTestClient.BodySpec` in Kotlin.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ResponseSpec.expectBody]的扩展提供了一个`expectBody <Foo>（）`变体，以及[KT-5464]（https://youtrack.jetbrains.com/issue/KT-5464）的变通办法，该变通办法防止使用`WebTestClient .BodySpec`位于Kotlin。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
@Suppress("EXTENSION_SHADOWED_BY_MEMBER")
inline fun <reified B : Any> ResponseSpec.expectBody(): KotlinBodySpec<B> =
		expectBody(object : ParameterizedTypeReference<B>() {}).returnResult().let {
			object : KotlinBodySpec<B> {

				override fun isEqualTo(expected: B): KotlinBodySpec<B> = it
						.assertWithDiagnostics { assertEquals("Response body", expected, it.responseBody) }
						.let { this }

				override fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B> =
					it.assertWithDiagnostics { consumer.invoke(it) }.let { this }

				override fun returnResult(): EntityExchangeResult<B> = it
			}
		}

/**
 * Kotlin compliant `WebTestClient.BodySpec` for expectations on the response body decoded
 * to a single Object, see [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) for
 * more details.
 * @since 5.0.6
 */
/**
 * 符合Kotlin要求的"WebTestClient.BodySpec"，希望将响应主体解码为单个对象，有关更多详细信息，请参见[KT-5464]（https://youtrack.jetbrains.com/issue/KT-5464）。 
 *  @5.0.6起
 */
interface KotlinBodySpec<B> {

	/**
	 * Assert the extracted body is equal to the given value.
	 */
	/**
	 * 断言提取的主体等于给定值。 
	 * 
	 */
	fun isEqualTo(expected: B): KotlinBodySpec<B>

	/**
	 * Assert the exchange result with the given consumer.
	 */
	/**
	 * 与给定的消费者断言交换结果。 
	 * 
	 */
	fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B>

	/**
	 * Exit the chained API and return an `ExchangeResult` with the
	 * decoded response content.
	 */
	/**
	 * 退出链接的API，并返回带有已解码响应内容的"ExchangeResult"。 
	 * 
	 */
	fun returnResult(): EntityExchangeResult<B>
}

/**
 * Extension for [ResponseSpec.expectBodyList] providing a `expectBodyList<Foo>()` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ResponseSpec.expectBodyList]的扩展，提供了一个`expectBodyList <Foo>（）`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified E : Any> ResponseSpec.expectBodyList(): ListBodySpec<E> =
		expectBodyList(object : ParameterizedTypeReference<E>() {})

/**
 * Extension for [ResponseSpec.returnResult] providing a `returnResult<Foo>()` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ResponseSpec.returnResult]的扩展，提供了一个`returnResult <Foo>（）`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> ResponseSpec.returnResult(): FluxExchangeResult<T> =
		returnResult(object : ParameterizedTypeReference<T>() {})
