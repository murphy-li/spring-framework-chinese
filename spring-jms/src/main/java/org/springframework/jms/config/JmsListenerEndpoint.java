/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.config;

import org.springframework.jms.listener.MessageListenerContainer;

/**
 * Model for a JMS listener endpoint. Can be used against a
 * {@link org.springframework.jms.annotation.JmsListenerConfigurer
 * JmsListenerConfigurer} to register endpoints programmatically.
 *
 * @author Stephane Nicoll
 * @since 4.1
 */
/**
 * JMS侦听器端点的模型。 
 * 可以用于{@link  org.springframework.jms.annotation.JmsListenerConfigurer JmsListenerConfigurer}上以编程方式注册端点。 
 *  @author 史蒂芬·尼科尔@since 4.1
 */
public interface JmsListenerEndpoint {

	/**
	 * Return the id of this endpoint.
	 */
	/**
	 * 返回此端点的ID。 
	 * 
	 */
	String getId();

	/**
	 * Setup the specified message listener container with the model
	 * defined by this endpoint.
	 * <p>This endpoint must provide the requested missing option(s) of
	 * the specified container to make it usable. Usually, this is about
	 * setting the {@code destination} and the {@code messageListener} to
	 * use but an implementation may override any default setting that
	 * was already set.
	 * @param listenerContainer the listener container to configure
	 */
	/**
	 * 使用此终结点定义的模型设置指定的消息侦听器容器。 
	 *  <p>此终结点必须提供指定容器的请求的缺少选项才能使其可用。 
	 * 通常，这是关于将{@code  destination}和{@code  messageListener}设置为使用，但是实现可能会覆盖已设置的任何默认设置。 
	 *  
	 * @param  listenerContainer要配置的监听器容器
	 */
	void setupListenerContainer(MessageListenerContainer listenerContainer);

}
