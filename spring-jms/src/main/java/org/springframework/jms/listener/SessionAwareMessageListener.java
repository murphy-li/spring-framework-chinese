/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.listener;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;

/**
 * Variant of the standard JMS {@link javax.jms.MessageListener} interface,
 * offering not only the received Message but also the underlying
 * JMS Session object. The latter can be used to send reply messages,
 * without the need to access an external Connection/Session,
 * i.e. without the need to access the underlying ConnectionFactory.
 *
 * <p>Supported by Spring's {@link DefaultMessageListenerContainer}
 * and {@link SimpleMessageListenerContainer},
 * as direct alternative to the standard JMS MessageListener interface.
 * Typically <i>not</i> supported by JCA-based listener containers:
 * For maximum compatibility, implement a standard JMS MessageListener instead.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @param <M> the message type
 * @see AbstractMessageListenerContainer#setMessageListener
 * @see DefaultMessageListenerContainer
 * @see SimpleMessageListenerContainer
 * @see org.springframework.jms.listener.endpoint.JmsMessageEndpointManager
 * @see javax.jms.MessageListener
 */
/**
 * 标准JMS {@link  javax.jms.MessageListener}接口的变体，不仅提供接收到的Message，而且还提供底层的JMS Session对象。 
 * 后者可用于发送回复消息，而无需访问外部Connection / Session，即无需访问基础ConnectionFactory。 
 *  <p>由Spring的{@link  DefaultMessageListenerContainer}和{@link  SimpleMessageListenerContainer}支持，可以直接替代标准JMS MessageListener接口。 
 * 通常，基于JCA的侦听器容器不支持<i> </ i>：为了获得最大的兼容性，请改用标准的JMS MessageListener。 
 *  @author  Juergen Hoeller @since 2.0起
 * @param  <M>消息类型
 * @see  AbstractMessageListenerContainer＃setMessageListener 
 * @see  DefaultMessageListenerContainer 
 * @see  SimpleMessageListenerContainer 
 * @see  org.springframework.jms.listener.endpoint。 
 *  JmsMessageEndpointManager 
 * @see  javax.jms.MessageListener
 */
@FunctionalInterface
public interface SessionAwareMessageListener<M extends Message> {

	/**
	 * Callback for processing a received JMS message.
	 * <p>Implementors are supposed to process the given Message,
	 * typically sending reply messages through the given Session.
	 * @param message the received JMS message (never {@code null})
	 * @param session the underlying JMS Session (never {@code null})
	 * @throws JMSException if thrown by JMS methods
	 */
	/**
	 * 用于处理收到的JMS消息的回调。 
	 *  <p>实施者应该处理给定的消息，通常通过给定的Session发送回复消息。 
	 *  
	 * @param 消息接收到的JMS消息（永不{@code  null}）
	 * @param 会话基础JMS会话（永不{@code  null}）
	 * @throws  JMSException（如果由JMS方法抛出）
	 */
	void onMessage(M message, Session session) throws JMSException;

}
