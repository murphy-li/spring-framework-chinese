/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.listener.adapter;

import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Session;

import org.springframework.jms.support.destination.DestinationResolver;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Return type of any JMS listener method used to indicate the actual response
 * destination alongside the response itself. Typically used when said destination
 * needs to be computed at runtime.
 *
 * <p>The example below sends a response with the content of the {@code result}
 * argument to the {@code queueOut Queue}:
 *
 * <pre class="code">
 * package com.acme.foo;
 *
 * public class MyService {
 *     &#064;JmsListener
 *     public JmsResponse process(String msg) {
 *         // process incoming message
 *         return JmsResponse.forQueue(result, "queueOut");
 *     }
 * }</pre>
 *
 * If the destination does not need to be computed at runtime,
 * {@link org.springframework.messaging.handler.annotation.SendTo @SendTo}
 * is the recommended declarative approach.
 *
 * @author Stephane Nicoll
 * @since 4.2
 * @param <T> the type of the response
 * @see org.springframework.jms.annotation.JmsListener
 * @see org.springframework.messaging.handler.annotation.SendTo
 */
/**
 * 用于指示实际响应目的地以及响应本身的任何JMS侦听器方法的返回类型。 
 * 通常在需要在运行时计算所述目的地时使用。 
 *  <p>下面的示例向{@code  queueOut Queue}发送带有{@code  result}参数内容的响应：<pre class ="code"> package com.acme.foo;公共类MyService {@JmsListener公共JmsResponse process（String msg）{//处理传入消息返回JmsResponse.forQueue（result，"queueOut"）; }} </ pre>如果不需要在运行时计算目标，建议使用声明方法{{@@link> org.springframework.messaging.handler.annotation.SendTo @SendTo}。 
 *  @author  Stephane Nicoll @since 4.2 
 * @param  <T>响应的类型
 * @see  org.springframework.jms.annotation.JmsListener 
 * @see  org.springframework.messaging.handler.annotation.SendTo
 */
public class JmsResponse<T> {

	private final T response;

	private final Object destination;


	/**
	 * Create a new {@link JmsResponse} instance.
	 * @param response the content of the result
	 * @param destination the destination
	 */
	/**
	 * 创建一个新的{@link  JmsResponse}实例。 
	 *  
	 * @param 响应结果的内容
	 * @param 目的地目的地
	 */
	protected JmsResponse(T response, Object destination) {
		Assert.notNull(response, "Result must not be null");
		this.response = response;
		this.destination = destination;
	}


	/**
	 * Return the content of the response.
	 */
	/**
	 * 返回响应的内容。 
	 * 
	 */
	public T getResponse() {
		return this.response;
	}

	/**
	 * Resolve the {@link Destination} to use for this instance. The {@link DestinationResolver}
	 * and {@link Session} can be used to resolve a destination at runtime.
	 * @param destinationResolver the destination resolver to use if necessary
	 * @param session the session to use, if necessary
	 * @return the {@link Destination} to use
	 * @throws JMSException if the DestinationResolver failed to resolve the destination
	 */
	/**
	 * 解析用于该实例的{@link  Destination}。 
	 *  {@link  DestinationResolver}和{@link  Session}可用于在运行时解析目标。 
	 *  
	 * @param  destinationResolver必要时使用的目标解析器
	 * @param 会话，必要时使用
	 * @return  {@@link> Destination}使用
	 * @throws  JMSException如果DestinationResolver无法解析目的地
	 */
	@Nullable
	public Destination resolveDestination(DestinationResolver destinationResolver, Session session)
			throws JMSException {

		if (this.destination instanceof Destination) {
			return (Destination) this.destination;
		}
		if (this.destination instanceof DestinationNameHolder) {
			DestinationNameHolder nameHolder = (DestinationNameHolder) this.destination;
			return destinationResolver.resolveDestinationName(session,
					nameHolder.destinationName, nameHolder.pubSubDomain);
		}
		return null;
	}

	@Override
	public String toString() {
		return "JmsResponse [" + "response=" + this.response + ", destination=" + this.destination + ']';
	}


	/**
	 * Create a {@link JmsResponse} targeting the queue with the specified name.
	 */
	/**
	 * 创建一个{@link  JmsResponse}，以指定名称为目标队列。 
	 * 
	 */
	public static <T> JmsResponse<T> forQueue(T result, String queueName) {
		Assert.notNull(queueName, "Queue name must not be null");
		return new JmsResponse<>(result, new DestinationNameHolder(queueName, false));
	}

	/**
	 * Create a {@link JmsResponse} targeting the topic with the specified name.
	 */
	/**
	 * 创建一个{@link  JmsResponse}，以指定名称为主题。 
	 * 
	 */
	public static <T> JmsResponse<T> forTopic(T result, String topicName) {
		Assert.notNull(topicName, "Topic name must not be null");
		return new JmsResponse<>(result, new DestinationNameHolder(topicName, true));
	}

	/**
	 * Create a {@link JmsResponse} targeting the specified {@link Destination}.
	 */
	/**
	 * 创建一个针对指定的{@link  Destination}的{@link  JmsResponse}。 
	 * 
	 */
	public static <T> JmsResponse<T> forDestination(T result, Destination destination) {
		Assert.notNull(destination, "Destination must not be null");
		return new JmsResponse<>(result, destination);
	}


	/**
	 * Internal class combining a destination name
	 * and its target destination type (queue or topic).
	 */
	/**
	 * 组合了目标名称及其目标目的地类型（队列或主题）的内部类。 
	 * 
	 */
	private static class DestinationNameHolder {

		private final String destinationName;

		private final boolean pubSubDomain;

		public DestinationNameHolder(String destinationName, boolean pubSubDomain) {
			this.destinationName = destinationName;
			this.pubSubDomain = pubSubDomain;
		}

		@Override
		public String toString() {
			return this.destinationName + "{" + "pubSubDomain=" + this.pubSubDomain + '}';
		}
	}

}
