/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.remoting;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageFormatException;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TemporaryQueue;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

import org.springframework.aop.support.AopUtils;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.jms.connection.ConnectionFactoryUtils;
import org.springframework.jms.support.JmsUtils;
import org.springframework.jms.support.converter.MessageConverter;
import org.springframework.jms.support.converter.SimpleMessageConverter;
import org.springframework.jms.support.destination.DestinationResolver;
import org.springframework.jms.support.destination.DynamicDestinationResolver;
import org.springframework.lang.Nullable;
import org.springframework.remoting.RemoteAccessException;
import org.springframework.remoting.RemoteInvocationFailureException;
import org.springframework.remoting.RemoteTimeoutException;
import org.springframework.remoting.support.DefaultRemoteInvocationFactory;
import org.springframework.remoting.support.RemoteInvocation;
import org.springframework.remoting.support.RemoteInvocationFactory;
import org.springframework.remoting.support.RemoteInvocationResult;
import org.springframework.util.Assert;

/**
 * {@link org.aopalliance.intercept.MethodInterceptor} for accessing a
 * JMS-based remote service.
 *
 * <p>Serializes remote invocation objects and deserializes remote invocation
 * result objects. Uses Java serialization just like RMI, but with the JMS
 * provider as communication infrastructure.
 *
 * <p>To be configured with a {@link javax.jms.QueueConnectionFactory} and a
 * target queue (either as {@link javax.jms.Queue} reference or as queue name).
 *
 * <p>Thanks to James Strachan for the original prototype that this
 * JMS invoker mechanism was inspired by!
 *
 * @author Juergen Hoeller
 * @author James Strachan
 * @author Stephane Nicoll
 * @since 2.0
 * @see #setConnectionFactory
 * @see #setQueue
 * @see #setQueueName
 * @see org.springframework.jms.remoting.JmsInvokerServiceExporter
 * @see org.springframework.jms.remoting.JmsInvokerProxyFactoryBean
 */
/**
 * {@link  org.aopalliance.intercept.MethodInterceptor}用于访问基于JMS的远程服务。 
 *  <p>序列化远程调用对象，并反序列化远程调用结果对象。 
 * 与RMI一样，使用Java序列化，但将JMS提供程序用作通信基础结构。 
 *  <p>要配置一个{@link  javax.jms.QueueConnectionFactory}和一个目标队列（作为{@link  javax.jms.Queue}引用或队列名称）。 
 *  <p>感谢James Strachan提供了此JMS调用程序机制所启发的原始原型！ 
 *  @author  Juergen Hoeller @author  James Strachan @author  Stephane Nicoll @since 2.0 
 * @see  #setConnectionFactory 
 * @see  #setQueue 
 * @see  #setQueueName 
 * @see  org.springframework.jms.remoting .JmsInvokerServiceExporter 
 * @see  org.springframework.jms.remoting.JmsInvokerProxyFactoryBean
 */
public class JmsInvokerClientInterceptor implements MethodInterceptor, InitializingBean {

	@Nullable
	private ConnectionFactory connectionFactory;

	@Nullable
	private Object queue;

	private DestinationResolver destinationResolver = new DynamicDestinationResolver();

	private RemoteInvocationFactory remoteInvocationFactory = new DefaultRemoteInvocationFactory();

	private MessageConverter messageConverter = new SimpleMessageConverter();

	private long receiveTimeout = 0;


	/**
	 * Set the QueueConnectionFactory to use for obtaining JMS QueueConnections.
	 */
	/**
	 * 设置QueueConnectionFactory以用于获取JMS QueueConnections。 
	 * 
	 */
	public void setConnectionFactory(@Nullable ConnectionFactory connectionFactory) {
		this.connectionFactory = connectionFactory;
	}

	/**
	 * Return the QueueConnectionFactory to use for obtaining JMS QueueConnections.
	 */
	/**
	 * 返回用于获取JMS QueueConnections的QueueConnectionFactory。 
	 * 
	 */
	@Nullable
	protected ConnectionFactory getConnectionFactory() {
		return this.connectionFactory;
	}

	/**
	 * Set the target Queue to send invoker requests to.
	 */
	/**
	 * 设置目标队列以将调用者请求发送到。 
	 * 
	 */
	public void setQueue(Queue queue) {
		this.queue = queue;
	}

	/**
	 * Set the name of target queue to send invoker requests to.
	 * <p>The specified name will be dynamically resolved via the
	 * {@link #setDestinationResolver DestinationResolver}.
	 */
	/**
	 * 设置要将调用者请求发送到的目标队列的名称。 
	 *  <p>将通过{@link  #setDestinationResolver DestinationResolver}动态解析指定的名称。 
	 * 
	 */
	public void setQueueName(String queueName) {
		this.queue = queueName;
	}

	/**
	 * Set the DestinationResolver that is to be used to resolve Queue
	 * references for this accessor.
	 * <p>The default resolver is a {@code DynamicDestinationResolver}. Specify a
	 * {@code JndiDestinationResolver} for resolving destination names as JNDI locations.
	 * @see org.springframework.jms.support.destination.DynamicDestinationResolver
	 * @see org.springframework.jms.support.destination.JndiDestinationResolver
	 */
	/**
	 * 设置用于解析此访问器的队列引用的DestinationResolver。 
	 *  <p>默认解析器是{@code  DynamicDestinationResolver}。 
	 * 指定一个{@code  JndiDestinationResolver}以便将目标名称解析为JNDI位置。 
	 *  
	 * @see  org.springframework.jms.support.destination.DynamicDestinationResolver 
	 * @see  org.springframework.jms.support.destination.JndiDestinationResolver
	 */
	public void setDestinationResolver(@Nullable DestinationResolver destinationResolver) {
		this.destinationResolver =
				(destinationResolver != null ? destinationResolver : new DynamicDestinationResolver());
	}

	/**
	 * Set the {@link RemoteInvocationFactory} to use for this accessor.
	 * <p>Default is a {@link DefaultRemoteInvocationFactory}.
	 * <p>A custom invocation factory can add further context information
	 * to the invocation, for example user credentials.
	 */
	/**
	 * 将{@link  RemoteInvocationFactory}设置为此访问器使用。 
	 *  <p>默认值为{@link  DefaultRemoteInvocationFactory}。 
	 *  <p>自定义调用工厂可以向调用添加其他上下文信息，例如用户凭据。 
	 * 
	 */
	public void setRemoteInvocationFactory(@Nullable RemoteInvocationFactory remoteInvocationFactory) {
		this.remoteInvocationFactory =
				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory());
	}

	/**
	 * Specify the {@link MessageConverter} to use for turning
	 * {@link org.springframework.remoting.support.RemoteInvocation}
	 * objects into request messages, as well as response messages into
	 * {@link org.springframework.remoting.support.RemoteInvocationResult} objects.
	 * <p>Default is a {@link SimpleMessageConverter}, using a standard JMS
	 * {@link javax.jms.ObjectMessage} for each invocation / invocation result
	 * object.
	 * <p>Custom implementations may generally adapt {@link java.io.Serializable}
	 * objects into special kinds of messages, or might be specifically tailored for
	 * translating {@code RemoteInvocation(Result)s} into specific kinds of messages.
	 */
	/**
	 * 指定{@link  MessageConverter}，用于将{@link  org.springframework.remoting.support.RemoteInvocation}对象转换为请求消息，并将响应消息转换为{@link  org.springframework.remoting。 
	 *  support.RemoteInvocationResult}对象。 
	 *  <p>默认值为{@link  SimpleMessageConverter}，对每个调用/调用结果对象使用标准的JMS {@link  javax.jms.ObjectMessage}。 
	 *  <p>自定义实现通常可以将{@link  java.io.Serializable}对象改编为特殊类型的消息，或者可能专门定制为将{@code  RemoteInvocation（Result）s}转换为特定类型的消息。 
	 * 
	 */
	public void setMessageConverter(@Nullable MessageConverter messageConverter) {
		this.messageConverter = (messageConverter != null ? messageConverter : new SimpleMessageConverter());
	}

	/**
	 * Set the timeout to use for receiving the response message for a request
	 * (in milliseconds).
	 * <p>The default is 0, which indicates a blocking receive without timeout.
	 * @see javax.jms.MessageConsumer#receive(long)
	 * @see javax.jms.MessageConsumer#receive()
	 */
	/**
	 * 设置用于接收请求响应消息的超时（以毫秒为单位）。 
	 *  <p>默认值为0，表示没有超时的阻塞接收。 
	 *  
	 * @see  javax.jms.MessageConsumer＃receive（长）
	 * @see  javax.jms.MessageConsumer＃receive（）
	 */
	public void setReceiveTimeout(long receiveTimeout) {
		this.receiveTimeout = receiveTimeout;
	}

	/**
	 * Return the timeout to use for receiving the response message for a request
	 * (in milliseconds).
	 */
	/**
	 * 返回用于接收请求的响应消息的超时（以毫秒为单位）。 
	 * 
	 */
	protected long getReceiveTimeout() {
		return this.receiveTimeout;
	}


	@Override
	public void afterPropertiesSet() {
		if (getConnectionFactory() == null) {
			throw new IllegalArgumentException("Property 'connectionFactory' is required");
		}
		if (this.queue == null) {
			throw new IllegalArgumentException("'queue' or 'queueName' is required");
		}
	}


	@Override
	@Nullable
	public Object invoke(MethodInvocation methodInvocation) throws Throwable {
		if (AopUtils.isToStringMethod(methodInvocation.getMethod())) {
			return "JMS invoker proxy for queue [" + this.queue + "]";
		}

		RemoteInvocation invocation = createRemoteInvocation(methodInvocation);
		RemoteInvocationResult result;
		try {
			result = executeRequest(invocation);
		}
		catch (JMSException ex) {
			throw convertJmsInvokerAccessException(ex);
		}
		try {
			return recreateRemoteInvocationResult(result);
		}
		catch (Throwable ex) {
			if (result.hasInvocationTargetException()) {
				throw ex;
			}
			else {
				throw new RemoteInvocationFailureException("Invocation of method [" + methodInvocation.getMethod() +
						"] failed in JMS invoker remote service at queue [" + this.queue + "]", ex);
			}
		}
	}

	/**
	 * Create a new {@code RemoteInvocation} object for the given AOP method invocation.
	 * <p>The default implementation delegates to the {@link RemoteInvocationFactory}.
	 * <p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}
	 * subclasses, containing additional invocation parameters like user credentials.
	 * Note that it is preferable to use a custom {@code RemoteInvocationFactory} which
	 * is a reusable strategy.
	 * @param methodInvocation the current AOP method invocation
	 * @return the RemoteInvocation object
	 * @see RemoteInvocationFactory#createRemoteInvocation
	 */
	/**
	 * 为给定的AOP方法调用创建一个新的{@code  RemoteInvocation}对象。 
	 *  <p>默认实现委托给{@link  RemoteInvocationFactory}。 
	 * 可以在子类中覆盖<p>，以提供自定义的{@code  RemoteInvocation}子类，其中包含其他调用参数，例如用户凭据。 
	 * 请注意，最好使用自定义的{@code  RemoteInvocationFactory}，它是可重用的策略。 
	 *  
	 * @param  methodInvocation当前AOP方法调用
	 * @return  RemoteInvocation对象
	 * @see  RemoteInvocationFactory＃createRemoteInvocation
	 */
	protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {
		return this.remoteInvocationFactory.createRemoteInvocation(methodInvocation);
	}

	/**
	 * Execute the given remote invocation, sending an invoker request message
	 * to this accessor's target queue and waiting for a corresponding response.
	 * @param invocation the RemoteInvocation to execute
	 * @return the RemoteInvocationResult object
	 * @throws JMSException in case of JMS failure
	 * @see #doExecuteRequest
	 */
	/**
	 * 执行给定的远程调用，将调用者请求消息发送到此访问者的目标队列，并等待相应的响应。 
	 *  
	 * @param 调用RemoteInvocation以执行
	 * @return  RemoteInvocationResult对象
	 * @throws 如果JMS失败，则JMSException 
	 * @see  #doExecuteRequest
	 */
	protected RemoteInvocationResult executeRequest(RemoteInvocation invocation) throws JMSException {
		Connection con = createConnection();
		Session session = null;
		try {
			session = createSession(con);
			Queue queueToUse = resolveQueue(session);
			Message requestMessage = createRequestMessage(session, invocation);
			con.start();
			Message responseMessage = doExecuteRequest(session, queueToUse, requestMessage);
			if (responseMessage != null) {
				return extractInvocationResult(responseMessage);
			}
			else {
				return onReceiveTimeout(invocation);
			}
		}
		finally {
			JmsUtils.closeSession(session);
			ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory(), true);
		}
	}

	/**
	 * Create a new JMS Connection for this JMS invoker.
	 */
	/**
	 * 为此JMS调用者创建一个新的JMS连接。 
	 * 
	 */
	protected Connection createConnection() throws JMSException {
		ConnectionFactory connectionFactory = getConnectionFactory();
		Assert.state(connectionFactory != null, "No ConnectionFactory set");
		return connectionFactory.createConnection();
	}

	/**
	 * Create a new JMS Session for this JMS invoker.
	 */
	/**
	 * 为此JMS调用者创建一个新的JMS会话。 
	 * 
	 */
	protected Session createSession(Connection con) throws JMSException {
		return con.createSession(false, Session.AUTO_ACKNOWLEDGE);
	}

	/**
	 * Resolve this accessor's target queue.
	 * @param session the current JMS Session
	 * @return the resolved target Queue
	 * @throws JMSException if resolution failed
	 */
	/**
	 * 解决此访问者的目标队列。 
	 *  
	 * @param 会话当前JMS会话
	 * @return 解析的目标队列
	 * @throws  JMSException（如果解析失败）
	 */
	protected Queue resolveQueue(Session session) throws JMSException {
		if (this.queue instanceof Queue) {
			return (Queue) this.queue;
		}
		else if (this.queue instanceof String) {
			return resolveQueueName(session, (String) this.queue);
		}
		else {
			throw new javax.jms.IllegalStateException(
					"Queue object [" + this.queue + "] is neither a [javax.jms.Queue] nor a queue name String");
		}
	}

	/**
	 * Resolve the given queue name into a JMS {@link javax.jms.Queue},
	 * via this accessor's {@link DestinationResolver}.
	 * @param session the current JMS Session
	 * @param queueName the name of the queue
	 * @return the located Queue
	 * @throws JMSException if resolution failed
	 * @see #setDestinationResolver
	 */
	/**
	 * 通过此访问者的{@link  DestinationResolver}将给定的队列名称解析为JMS {@link  javax.jms.Queue}。 
	 *  
	 * @param 会话当前JMS会话
	 * @param  queueName队列名称
	 * @return 所定位的队列
	 * @throws 如果解析失败，则JMSException 
	 * @see  #setDestinationResolver
	 */
	protected Queue resolveQueueName(Session session, String queueName) throws JMSException {
		return (Queue) this.destinationResolver.resolveDestinationName(session, queueName, false);
	}

	/**
	 * Create the invoker request message.
	 * <p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}
	 * for the given RemoteInvocation object.
	 * @param session the current JMS Session
	 * @param invocation the remote invocation to send
	 * @return the JMS Message to send
	 * @throws JMSException if the message could not be created
	 */
	/**
	 * 创建调用者请求消息。 
	 *  <p>默认实现为给定的RemoteInvocation对象创建一个JMS {@link  javax.jms.ObjectMessage}。 
	 *  
	 * @param 会话当前JMS会话
	 * @param 调用远程调用以发送
	 * @return  JMS消息以发送
	 * @throws  JMSException如果无法创建消息
	 */
	protected Message createRequestMessage(Session session, RemoteInvocation invocation) throws JMSException {
		return this.messageConverter.toMessage(invocation, session);
	}

	/**
	 * Actually execute the given request, sending the invoker request message
	 * to the specified target queue and waiting for a corresponding response.
	 * <p>The default implementation is based on standard JMS send/receive,
	 * using a {@link javax.jms.TemporaryQueue} for receiving the response.
	 * @param session the JMS Session to use
	 * @param queue the resolved target Queue to send to
	 * @param requestMessage the JMS Message to send
	 * @return the RemoteInvocationResult object
	 * @throws JMSException in case of JMS failure
	 */
	/**
	 * 实际执行给定的请求，将调用者请求消息发送到指定的目标队列，并等待相应的响应。 
	 *  <p>默认实现基于标准的JMS发送/接收，使用{@link  javax.jms.TemporaryQueue}接收响应。 
	 *  
	 * @param 会话JMS会话使用
	 * @param 排队已解析的目标队列发送到
	 * @param  requestMessage JMS消息以发送
	 * @return  RemoteInvocationResult对象
	 * @throws  JMS发生JMS失败时
	 */
	@Nullable
	protected Message doExecuteRequest(Session session, Queue queue, Message requestMessage) throws JMSException {
		TemporaryQueue responseQueue = null;
		MessageProducer producer = null;
		MessageConsumer consumer = null;
		try {
			responseQueue = session.createTemporaryQueue();
			producer = session.createProducer(queue);
			consumer = session.createConsumer(responseQueue);
			requestMessage.setJMSReplyTo(responseQueue);
			producer.send(requestMessage);
			long timeout = getReceiveTimeout();
			return (timeout > 0 ? consumer.receive(timeout) : consumer.receive());
		}
		finally {
			JmsUtils.closeMessageConsumer(consumer);
			JmsUtils.closeMessageProducer(producer);
			if (responseQueue != null) {
				responseQueue.delete();
			}
		}
	}

	/**
	 * Extract the invocation result from the response message.
	 * <p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}
	 * carrying a {@link RemoteInvocationResult} object. If an invalid response
	 * message is encountered, the {@code onInvalidResponse} callback gets invoked.
	 * @param responseMessage the response message
	 * @return the invocation result
	 * @throws JMSException is thrown if a JMS exception occurs
	 * @see #onInvalidResponse
	 */
	/**
	 * 从响应消息中提取调用结果。 
	 *  <p>默认实现期望JMS {@link  javax.jms.ObjectMessage}带有{@link  RemoteInvocationResult}对象。 
	 * 如果遇到无效的响应消息，则会调用{@code  onInvalidResponse}回调。 
	 *  
	 * @param  responseMessage响应消息
	 * @return 调用结果
	 * @throws 如果发生JMS异常，则抛出JMSException 
	 * @see  #onInvalidResponse
	 */
	protected RemoteInvocationResult extractInvocationResult(Message responseMessage) throws JMSException {
		Object content = this.messageConverter.fromMessage(responseMessage);
		if (content instanceof RemoteInvocationResult) {
			return (RemoteInvocationResult) content;
		}
		return onInvalidResponse(responseMessage);
	}

	/**
	 * Callback that is invoked by {@link #executeRequest} when the receive
	 * timeout has expired for the specified {@link RemoteInvocation}.
	 * <p>By default, an {@link RemoteTimeoutException} is thrown. Sub-classes
	 * can choose to either throw a more dedicated exception or even return
	 * a default {@link RemoteInvocationResult} as a fallback.
	 * @param invocation the invocation
	 * @return a default result when the receive timeout has expired
	 */
	/**
	 * 当指定的{@link  RemoteInvocation}的接收超时到期时，由{@link  #executeRequest}调用的回调。 
	 *  <p>默认情况下，将引发{@link  RemoteTimeoutException}。 
	 * 子类可以选择抛出更专用的异常，甚至返回默认的{@link  RemoteInvocationResult}作为后备。 
	 *  
	 * @param 调用调用
	 * @return 接收超时到期时的默认结果
	 */
	protected RemoteInvocationResult onReceiveTimeout(RemoteInvocation invocation) {
		throw new RemoteTimeoutException("Receive timeout after " + this.receiveTimeout + " ms for " + invocation);
	}

	/**
	 * Callback that is invoked by {@link #extractInvocationResult} when
	 * it encounters an invalid response message.
	 * <p>The default implementation throws a {@link MessageFormatException}.
	 * @param responseMessage the invalid response message
	 * @return an alternative invocation result that should be returned to
	 * the caller (if desired)
	 * @throws JMSException if the invalid response should lead to an
	 * infrastructure exception propagated to the caller
	 * @see #extractInvocationResult
	 */
	/**
	 * {@link  #extractInvocationResult}在遇到无效响应消息时调用的回调。 
	 *  <p>默认实现将引发{@link  MessageFormatException}。 
	 *  
	 * @param  responseMessage无效响应消息
	 * @return 替代调用结果，应将其返回给调用方（如果需要）
	 * @throws  JMSException如果无效响应应导致传播到调用方的基础结构异常<
	 * @see > #extractInvocationResult
	 */
	protected RemoteInvocationResult onInvalidResponse(Message responseMessage) throws JMSException {
		throw new MessageFormatException("Invalid response message: " + responseMessage);
	}

	/**
	 * Recreate the invocation result contained in the given {@link RemoteInvocationResult}
	 * object.
	 * <p>The default implementation calls the default {@code recreate()} method.
	 * <p>Can be overridden in subclasses to provide custom recreation, potentially
	 * processing the returned result object.
	 * @param result the RemoteInvocationResult to recreate
	 * @return a return value if the invocation result is a successful return
	 * @throws Throwable if the invocation result is an exception
	 * @see org.springframework.remoting.support.RemoteInvocationResult#recreate()
	 */
	/**
	 * 重新创建给定的{@link  RemoteInvocationResult}对象中包含的调用结果。 
	 *  <p>默认实现调用默认的{@code  recreate（）}方法。 
	 *  <p>可以在子类中重写以提供自定义重新创建，从而有可能处理返回的结果对象。 
	 *  
	 * @param 导致RemoteInvocationResult重新创建
	 * @return 返回值（如果调用结果是成功的返回值）
	 * @throws 如果调用结果是异常，则可抛出
	 * @see  org.springframework.remoting.support.RemoteInvocationResult＃ recreate（）
	 */
	@Nullable
	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {
		return result.recreate();
	}

	/**
	 * Convert the given JMS invoker access exception to an appropriate
	 * Spring {@link RemoteAccessException}.
	 * @param ex the exception to convert
	 * @return the RemoteAccessException to throw
	 */
	/**
	 * 将给定的JMS调用者访问异常转换为适当的Spring {@link  RemoteAccessException}。 
	 *  
	 * @param 将转换为
	 * @return 的RemoteAccessException抛出异常
	 */
	protected RemoteAccessException convertJmsInvokerAccessException(JMSException ex) {
		return new RemoteAccessException("Could not access JMS invoker queue [" + this.queue + "]", ex);
	}

}
