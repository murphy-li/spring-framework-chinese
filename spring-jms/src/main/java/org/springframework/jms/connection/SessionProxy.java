/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.connection;

import javax.jms.Session;

/**
 * Subinterface of {@link javax.jms.Session} to be implemented by
 * Session proxies. Allows access to the underlying target Session.
 *
 * @author Juergen Hoeller
 * @since 2.0.4
 * @see TransactionAwareConnectionFactoryProxy
 * @see CachingConnectionFactory
 * @see ConnectionFactoryUtils#getTargetSession(javax.jms.Session)
 */
/**
 * {@link  javax.jms.Session}的子接口将由Session代理实现。 
 * 允许访问基础目标会话。 
 *  @author  Juergen Hoeller @since 2.0.4 
 * @see  TransactionAwareConnectionFactoryProxy 
 * @see  CachingConnectionFactory 
 * @see  ConnectionFactoryUtils＃getTargetSession（javax.jms.Session）
 */
public interface SessionProxy extends Session {

	/**
	 * Return the target Session of this proxy.
	 * <p>This will typically be the native provider Session
	 * or a wrapper from a session pool.
	 * @return the underlying Session (never {@code null})
	 */
	/**
	 * 返回此代理的目标会话。 
	 *  <p>这通常是本机提供程序Session或会话池中的包装。 
	 *  
	 * @return 基础会话（绝不{<@@code> null}）
	 */
	Session getTargetSession();

}
