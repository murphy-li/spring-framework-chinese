/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.connection;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.core.NamedThreadLocal;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

/**
 * An adapter for a target JMS {@link javax.jms.ConnectionFactory}, applying the
 * given user credentials to every standard {@code createConnection()} call,
 * that is, implicitly invoking {@code createConnection(username, password)}
 * on the target. All other methods simply delegate to the corresponding methods
 * of the target ConnectionFactory.
 *
 * <p>Can be used to proxy a target JNDI ConnectionFactory that does not have user
 * credentials configured. Client code can work with the ConnectionFactory without
 * passing in username and password on every {@code createConnection()} call.
 *
 * <p>In the following example, client code can simply transparently work
 * with the preconfigured "myConnectionFactory", implicitly accessing
 * "myTargetConnectionFactory" with the specified user credentials.
 *
 * <pre class="code">
 * &lt;bean id="myTargetConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean"&gt;
 *   &lt;property name="jndiName" value="java:comp/env/jms/mycf"/&gt;
 * &lt;/bean&gt;
 *
 * &lt;bean id="myConnectionFactory" class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter"&gt;
 *   &lt;property name="targetConnectionFactory" ref="myTargetConnectionFactory"/&gt;
 *   &lt;property name="username" value="myusername"/&gt;
 *   &lt;property name="password" value="mypassword"/&gt;
 * &lt;/bean></pre>
 *
 * <p>If the "username" is empty, this proxy will simply delegate to the standard
 * {@code createConnection()} method of the target ConnectionFactory.
 * This can be used to keep a UserCredentialsConnectionFactoryAdapter bean
 * definition just for the <i>option</i> of implicitly passing in user credentials
 * if the particular target ConnectionFactory requires it.
 *
 * <p>As of Spring Framework 5, this class delegates JMS 2.0 {@code JMSContext}
 * calls and therefore requires the JMS 2.0 API to be present at runtime.
 * It may nevertheless run against a JMS 1.1 driver (bound to the JMS 2.0 API)
 * as long as no actual JMS 2.0 calls are triggered by the application's setup.
 *
 * @author Juergen Hoeller
 * @since 1.2
 * @see #createConnection
 * @see #createQueueConnection
 * @see #createTopicConnection
 */
/**
 * 目标JMS {@link  javax.jms.ConnectionFactory}的适配器，将给定的用户凭据应用于每个标准{@code  createConnection（）}调用，即隐式调用{@code  createConnection（username ，密码）}。 
 * 所有其他方法仅委托给目标ConnectionFactory的相应方法。 
 *  <p>可用于代理未配置用户凭据的目标JNDI ConnectionFactory。 
 * 客户端代码可以与ConnectionFactory一起使用，而无需在每个{@code  createConnection（）}调用中传递用户名和密码。 
 *  <p>在以下示例中，客户端代码可以简单地与预配置的"myConnectionFactory"透明地工作，并使用指定的用户凭据隐式访问"myTargetConnectionFactory"。 
 *  <pre class ="code"> <bean id ="myTargetConnectionFactory"class ="org.springframework.jndi.JndiObjectFactoryBean"> <属性名称="jndiName"value ="java：comp / env / jms / mycf"/> < / bean> <bean id ="myConnectionFactory"class ="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter"> <属性名称="targetConnectionFactory"ref ="myTargetConnectionFactory"/> <属性名称="用户名"value ="我的用户名"/> <property name ="password"value ="mypassword"/> </ bean> </ pre> <p>如果"用户名"为空，则此代理将简单地委派给标准{@code  createConnection（ ）}目标ConnectionFactory的方法。 
 * 如果特定的目标ConnectionFactory要求，则可以仅将<i>选项</ i>隐式地传递给用户凭据，以此来保留UserCredentialsConnectionFactoryAdapter bean定义。 
 *  <p>从Spring Framework 5开始，该类委托JMS 2.0 {@code  JMSContext}调用，因此需要在运行时提供JMS 2.0 API。 
 * 但是，只要应用程序的设置未触发任何实际的JMS 2.0调用，它就可以在JMS 1.1驱动程序（绑定到JMS 2.0 API）上运行。 
 *  @author  Juergen Hoeller @始于1.2 
 * @see  #createConnection 
 * @see  #createQueueConnection 
 * @see  #createTopicConnection
 */
public class UserCredentialsConnectionFactoryAdapter
		implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, InitializingBean {

	@Nullable
	private ConnectionFactory targetConnectionFactory;

	@Nullable
	private String username;

	@Nullable
	private String password;

	private final ThreadLocal<JmsUserCredentials> threadBoundCredentials =
			new NamedThreadLocal<>("Current JMS user credentials");


	/**
	 * Set the target ConnectionFactory that this ConnectionFactory should delegate to.
	 */
	/**
	 * 设置此ConnectionFactory应该委托给的目标ConnectionFactory。 
	 * 
	 */
	public void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory) {
		Assert.notNull(targetConnectionFactory, "'targetConnectionFactory' must not be null");
		this.targetConnectionFactory = targetConnectionFactory;
	}

	/**
	 * Set the username that this adapter should use for retrieving Connections.
	 * Default is no specific user.
	 */
	/**
	 * 设置此适配器用于检索连接的用户名。 
	 * 默认为没有特定用户。 
	 * 
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Set the password that this adapter should use for retrieving Connections.
	 * Default is no specific password.
	 */
	/**
	 * 设置此适配器用于检索连接的密码。 
	 * 默认为无特定密码。 
	 * 
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	@Override
	public void afterPropertiesSet() {
		if (this.targetConnectionFactory == null) {
			throw new IllegalArgumentException("Property 'targetConnectionFactory' is required");
		}
	}


	/**
	 * Set user credententials for this proxy and the current thread.
	 * The given username and password will be applied to all subsequent
	 * {@code createConnection()} calls on this ConnectionFactory proxy.
	 * <p>This will override any statically specified user credentials,
	 * that is, values of the "username" and "password" bean properties.
	 * @param username the username to apply
	 * @param password the password to apply
	 * @see #removeCredentialsFromCurrentThread
	 */
	/**
	 * 设置此代理和当前线程的用户凭据。 
	 * 给定的用户名和密码将应用于此ConnectionFactory代理上的所有后续{@code  createConnection（）}调用。 
	 *  <p>这将覆盖所有静态指定的用户凭据，即"用户名"和"密码"bean属性的值。 
	 *  
	 * @param 用户名要应用的用户名
	 * @param 密码要应用的密码
	 * @see  #removeCredentialsFromCurrentThread
	 */
	public void setCredentialsForCurrentThread(String username, String password) {
		this.threadBoundCredentials.set(new JmsUserCredentials(username, password));
	}

	/**
	 * Remove any user credentials for this proxy from the current thread.
	 * Statically specified user credentials apply again afterwards.
	 * @see #setCredentialsForCurrentThread
	 */
	/**
	 * 从当前线程中删除此代理的所有用户凭据。 
	 * 之后，静态指定的用户凭据将再次应用。 
	 *  
	 * @see  #setCredentialsForCurrentThread
	 */
	public void removeCredentialsFromCurrentThread() {
		this.threadBoundCredentials.remove();
	}


	/**
	 * Determine whether there are currently thread-bound credentials,
	 * using them if available, falling back to the statically specified
	 * username and password (i.e. values of the bean properties) otherwise.
	 * @see #doCreateConnection
	 */
	/**
	 * 确定当前是否存在线程绑定凭证，如果可用，则使用它们，否则返回静态指定的用户名和密码（即bean属性的值）。 
	 *  
	 * @see  #doCreateConnection
	 */
	@Override
	public final Connection createConnection() throws JMSException {
		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get();
		if (threadCredentials != null) {
			return doCreateConnection(threadCredentials.username, threadCredentials.password);
		}
		else {
			return doCreateConnection(this.username, this.password);
		}
	}

	/**
	 * Delegate the call straight to the target ConnectionFactory.
	 */
	/**
	 * 直接将调用委托给目标ConnectionFactory。 
	 * 
	 */
	@Override
	public Connection createConnection(String username, String password) throws JMSException {
		return doCreateConnection(username, password);
	}

	/**
	 * This implementation delegates to the {@code createConnection(username, password)}
	 * method of the target ConnectionFactory, passing in the specified user credentials.
	 * If the specified username is empty, it will simply delegate to the standard
	 * {@code createConnection()} method of the target ConnectionFactory.
	 * @param username the username to use
	 * @param password the password to use
	 * @return the Connection
	 * @see javax.jms.ConnectionFactory#createConnection(String, String)
	 * @see javax.jms.ConnectionFactory#createConnection()
	 */
	/**
	 * 此实现委托目标ConnectionFactory的{@code  createConnection（username，password）}方法，传入指定的用户凭据。 
	 * 如果指定的用户名为空，它将仅委托给目标ConnectionFactory的标准{@code  createConnection（）}方法。 
	 *  
	 * @param 用户名要使用的用户名
	 * @param 密码要使用的密码@
	 * @return>连接
	 * @see  javax.jms.ConnectionFactory＃createConnection（String，String）
	 * @see  javax.jms.ConnectionFactory＃ createConnection（）
	 */
	protected Connection doCreateConnection(@Nullable String username, @Nullable String password) throws JMSException {
		ConnectionFactory target = obtainTargetConnectionFactory();
		if (StringUtils.hasLength(username)) {
			return target.createConnection(username, password);
		}
		else {
			return target.createConnection();
		}
	}

	/**
	 * Determine whether there are currently thread-bound credentials,
	 * using them if available, falling back to the statically specified
	 * username and password (i.e. values of the bean properties) else.
	 * @see #doCreateQueueConnection
	 */
	/**
	 * 确定当前是否存在线程绑定凭证，如果可用，则使用它们，然后回退到静态指定的用户名和密码（即bean属性的值），否则。 
	 *  
	 * @see  #doCreateQueueConnection
	 */
	@Override
	public final QueueConnection createQueueConnection() throws JMSException {
		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get();
		if (threadCredentials != null) {
			return doCreateQueueConnection(threadCredentials.username, threadCredentials.password);
		}
		else {
			return doCreateQueueConnection(this.username, this.password);
		}
	}

	/**
	 * Delegate the call straight to the target QueueConnectionFactory.
	 */
	/**
	 * 直接将调用委托给目标QueueConnectionFactory。 
	 * 
	 */
	@Override
	public QueueConnection createQueueConnection(String username, String password) throws JMSException {
		return doCreateQueueConnection(username, password);
	}

	/**
	 * This implementation delegates to the {@code createQueueConnection(username, password)}
	 * method of the target QueueConnectionFactory, passing in the specified user credentials.
	 * If the specified username is empty, it will simply delegate to the standard
	 * {@code createQueueConnection()} method of the target ConnectionFactory.
	 * @param username the username to use
	 * @param password the password to use
	 * @return the Connection
	 * @see javax.jms.QueueConnectionFactory#createQueueConnection(String, String)
	 * @see javax.jms.QueueConnectionFactory#createQueueConnection()
	 */
	/**
	 * 此实现委托给目标QueueConnectionFactory的{@code  createQueueConnection（username，password）}方法，传入指定的用户凭据。 
	 * 如果指定的用户名为空，它将仅委托给目标ConnectionFactory的标准{@code  createQueueConnection（）}方法。 
	 *  
	 * @param 用户名要使用的用户名
	 * @param 密码要使用的密码@
	 * @return>连接
	 * @see  javax.jms.QueueConnectionFactory＃createQueueConnection（String，String）
	 * @see  javax.jms.QueueConnectionFactory＃ createQueueConnection（）
	 */
	protected QueueConnection doCreateQueueConnection(
			@Nullable String username, @Nullable String password) throws JMSException {

		ConnectionFactory target = obtainTargetConnectionFactory();
		if (!(target instanceof QueueConnectionFactory)) {
			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a QueueConnectionFactory");
		}
		QueueConnectionFactory queueFactory = (QueueConnectionFactory) target;
		if (StringUtils.hasLength(username)) {
			return queueFactory.createQueueConnection(username, password);
		}
		else {
			return queueFactory.createQueueConnection();
		}
	}

	/**
	 * Determine whether there are currently thread-bound credentials,
	 * using them if available, falling back to the statically specified
	 * username and password (i.e. values of the bean properties) else.
	 * @see #doCreateTopicConnection
	 */
	/**
	 * 确定当前是否存在线程绑定凭证，如果可用，则使用它们，然后回退到静态指定的用户名和密码（即bean属性的值），否则。 
	 *  
	 * @see  #doCreateTopicConnection
	 */
	@Override
	public final TopicConnection createTopicConnection() throws JMSException {
		JmsUserCredentials threadCredentials = this.threadBoundCredentials.get();
		if (threadCredentials != null) {
			return doCreateTopicConnection(threadCredentials.username, threadCredentials.password);
		}
		else {
			return doCreateTopicConnection(this.username, this.password);
		}
	}

	/**
	 * Delegate the call straight to the target TopicConnectionFactory.
	 */
	/**
	 * 直接将调用委托给目标TopicConnectionFactory。 
	 * 
	 */
	@Override
	public TopicConnection createTopicConnection(String username, String password) throws JMSException {
		return doCreateTopicConnection(username, password);
	}

	/**
	 * This implementation delegates to the {@code createTopicConnection(username, password)}
	 * method of the target TopicConnectionFactory, passing in the specified user credentials.
	 * If the specified username is empty, it will simply delegate to the standard
	 * {@code createTopicConnection()} method of the target ConnectionFactory.
	 * @param username the username to use
	 * @param password the password to use
	 * @return the Connection
	 * @see javax.jms.TopicConnectionFactory#createTopicConnection(String, String)
	 * @see javax.jms.TopicConnectionFactory#createTopicConnection()
	 */
	/**
	 * 此实现委托给目标TopicConnectionFactory的{@code  createTopicConnection（username，password）}方法，传入指定的用户凭据。 
	 * 如果指定的用户名为空，它将仅委托给目标ConnectionFactory的标准{@code  createTopicConnection（）}方法。 
	 *  
	 * @param 用户名要使用的用户名
	 * @param 密码要使用
	 * @return 连接的密码
	 * @see  javax.jms.TopicConnectionFactory＃createTopicConnection（String，String）
	 * @see  javax.jms.TopicConnectionFactory＃ createTopicConnection（）
	 */
	protected TopicConnection doCreateTopicConnection(
			@Nullable String username, @Nullable String password) throws JMSException {

		ConnectionFactory target = obtainTargetConnectionFactory();
		if (!(target instanceof TopicConnectionFactory)) {
			throw new javax.jms.IllegalStateException("'targetConnectionFactory' is not a TopicConnectionFactory");
		}
		TopicConnectionFactory queueFactory = (TopicConnectionFactory) target;
		if (StringUtils.hasLength(username)) {
			return queueFactory.createTopicConnection(username, password);
		}
		else {
			return queueFactory.createTopicConnection();
		}
	}

	@Override
	public JMSContext createContext() {
		return obtainTargetConnectionFactory().createContext();
	}

	@Override
	public JMSContext createContext(String userName, String password) {
		return obtainTargetConnectionFactory().createContext(userName, password);
	}

	@Override
	public JMSContext createContext(String userName, String password, int sessionMode) {
		return obtainTargetConnectionFactory().createContext(userName, password, sessionMode);
	}

	@Override
	public JMSContext createContext(int sessionMode) {
		return obtainTargetConnectionFactory().createContext(sessionMode);
	}

	private ConnectionFactory obtainTargetConnectionFactory() {
		Assert.state(this.targetConnectionFactory != null, "'targetConnectionFactory' is required");
		return this.targetConnectionFactory;
	}


	/**
	 * Inner class used as ThreadLocal value.
	 */
	/**
	 * 内部类用作ThreadLocal值。 
	 * 
	 */
	private static final class JmsUserCredentials {

		public final String username;

		public final String password;

		public JmsUserCredentials(String username, String password) {
			this.username = username;
			this.password = password;
		}

		@Override
		public String toString() {
			return "JmsUserCredentials[username='" + this.username + "',password='" + this.password + "']";
		}
	}

}
