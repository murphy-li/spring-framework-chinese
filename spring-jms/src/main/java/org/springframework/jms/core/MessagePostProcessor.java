/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2005 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2005的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.core;

import javax.jms.JMSException;
import javax.jms.Message;

/**
 * To be used with JmsTemplate's send method that convert an object to a message.
 * It allows for further modification of the message after it has been processed
 * by the converter. This is useful for setting of JMS Header and Properties.
 *
 * <p>This often as an anonymous class within a method implementation.
 *
 * @author Mark Pollack
 * @since 1.1
 * @see JmsTemplate#convertAndSend(String, Object, MessagePostProcessor)
 * @see JmsTemplate#convertAndSend(javax.jms.Destination, Object, MessagePostProcessor)
 * @see org.springframework.jms.support.converter.MessageConverter
 */
/**
 * 与JmsTemplate的send方法一起使用，该方法将对象转换为消息。 
 * 它允许在转换器处理完消息后进一步修改消息。 
 * 这对于设置JMS标头和属性很有用。 
 *  <p>这通常作为方法实现中的匿名类。 
 *  @author  Mark Pollack @since 1.1起
 * @see  JmsTemplate＃convertAndSend（String，Object，MessagePostProcessor） .support.converter.MessageConverter
 */
public interface MessagePostProcessor {

	/**
	 * Apply a MessagePostProcessor to the message. The returned message is
	 * typically a modified version of the original.
	 * @param message the JMS message from the MessageConverter
	 * @return the modified version of the Message
	 * @throws javax.jms.JMSException if thrown by JMS API methods
	 */
	/**
	 * 将MessagePostProcessor应用于消息。 
	 * 返回的消息通常是原始消息的修改版本。 
	 *  
	 * @param 消息来自MessageConverter的JMS消息
	 * @return 消息
	 * @throws  javax.jms.JMSException的修改版本（如果由JMS API方法抛出）
	 */
	Message postProcessMessage(Message message) throws JMSException;

}
