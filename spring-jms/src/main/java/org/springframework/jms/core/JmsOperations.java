/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.core;

import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.Queue;

import org.springframework.jms.JmsException;
import org.springframework.lang.Nullable;

/**
 * Specifies a basic set of JMS operations.
 *
 * <p>Implemented by {@link JmsTemplate}. Not often used but a useful option
 * to enhance testability, as it can easily be mocked or stubbed.
 *
 * <p>Provides {@code JmsTemplate's} {@code send(..)} and
 * {@code receive(..)} methods that mirror various JMS API methods.
 * See the JMS specification and javadocs for details on those methods.
 *
 * <p>Provides also basic request reply operation using a temporary
 * queue to collect the reply.
 *
 * @author Mark Pollack
 * @author Juergen Hoeller
 * @author Stephane Nicoll
 * @since 1.1
 * @see JmsTemplate
 * @see javax.jms.Destination
 * @see javax.jms.Session
 * @see javax.jms.MessageProducer
 * @see javax.jms.MessageConsumer
 */
/**
 * 指定一组基本的JMS操作。 
 *  <p>由{@link  JmsTemplate}实现。 
 * 它不经常使用，但是是增强可测试性的有用选项，因为它很容易被嘲笑或存根。 
 *  <p>提供与各种JMS API方法类似的{@code  JmsTemplate's} {@code  send（..）}和{@code  receive（..）}方法。 
 * 有关这些方法的详细信息，请参见JMS规范和javadocs。 
 *  <p>还提供了使用临时队列收集答复的基本请求答复操作。 
 *  @author  Mark Pollack @author  Juergen Hoeller @author  Stephane Nicoll @since 1.1 
 * @see  JmsTemplate 
 * @see  javax.jms.Destination 
 * @see  javax.jms.Session 
 * @see  javax。 
 *  jms.MessageProducer 
 * @see  javax.jms.MessageConsumer
 */
public interface JmsOperations {

	/**
	 * Execute the action specified by the given action object within a JMS Session.
	 * @param action callback object that exposes the session
	 * @return the result object from working with the session
	 * @throws JmsException if there is any problem
	 */
	/**
	 * 在JMS会话中执行由给定操作对象指定的操作。 
	 *  
	 * @param 操作回调对象，用于公开会话
	 * @return 结果对象与会话一起使用
	 * @throws  JmsException如果存在任何问题
	 */
	@Nullable
	<T> T execute(SessionCallback<T> action) throws JmsException;

	/**
	 * Send messages to the default JMS destination (or one specified
	 * for each send operation). The callback gives access to the JMS Session
	 * and MessageProducer in order to perform complex send operations.
	 * @param action callback object that exposes the session/producer pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到默认的JMS目标（或为每个发送操作指定一个消息）。 
	 * 回调允许访问JMS会话和MessageProducer，以执行复杂的发送操作。 
	 *  
	 * @param 操作回调对象，用于公开会话/生产者对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T execute(ProducerCallback<T> action) throws JmsException;

	/**
	 * Send messages to a JMS destination. The callback gives access to the JMS Session
	 * and MessageProducer in order to perform complex send operations.
	 * @param destination the destination to send messages to
	 * @param action callback object that exposes the session/producer pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到JMS目标。 
	 * 回调允许访问JMS会话和MessageProducer，以执行复杂的发送操作。 
	 *  
	 * @param 目标将消息发送到
	 * @param 操作回调对象的目标，该对象公开了会话/生产者对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为unchecked
	 */
	@Nullable
	<T> T execute(Destination destination, ProducerCallback<T> action) throws JmsException;

	/**
	 * Send messages to a JMS destination. The callback gives access to the JMS Session
	 * and MessageProducer in order to perform complex send operations.
	 * @param destinationName the name of the destination to send messages to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param action callback object that exposes the session/producer pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到JMS目标。 
	 * 回调允许访问JMS会话和MessageProducer，以执行复杂的发送操作。 
	 *  
	 * @param  destinationName将消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param 操作回调对象，用于公开会话/生产者对
	 * @return 结果对象无法使用会话
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T execute(String destinationName, ProducerCallback<T> action) throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for sending messages
	//---------------------------------------------------------------------------------------

	/**
	 * Send a message to the default destination.
	 * <p>This will only work with a default destination specified!
	 * @param messageCreator callback to create a message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到默认目的地。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param  messageCreator回调以创建消息
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	void send(MessageCreator messageCreator) throws JmsException;

	/**
	 * Send a message to the specified destination.
	 * The MessageCreator callback creates the message given a Session.
	 * @param destination the destination to send this message to
	 * @param messageCreator callback to create a message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到指定的目的地。 
	 *  MessageCreator回调在给定会话的情况下创建消息。 
	 *  
	 * @param 目标发送此消息到
	 * @param  messageCreator回调以创建消息的目标
	 * @throws  JmsException已检查JMSException转换为unchecked
	 */
	void send(Destination destination, MessageCreator messageCreator) throws JmsException;

	/**
	 * Send a message to the specified destination.
	 * The MessageCreator callback creates the message given a Session.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param messageCreator callback to create a message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将消息发送到指定的目的地。 
	 *  MessageCreator回调在给定会话的情况下创建消息。 
	 *  
	 * @param  destinationName发送此消息的目标的名称（由DestinationResolver解析为实际目标）
	 * @param  messageCreator回调以创建消息
	 * @throws  JmsException已检查JMSException转换为unchecked
	 */
	void send(String destinationName, MessageCreator messageCreator) throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for sending auto-converted messages
	//---------------------------------------------------------------------------------------

	/**
	 * Send the given object to the default destination, converting the object
	 * to a JMS message with a configured MessageConverter.
	 * <p>This will only work with a default destination specified!
	 * @param message the object to convert to a message
	 * @throws JmsException converted checked JMSException to unchecked
	 */
	/**
	 * 将给定对象发送到默认目标，并使用配置的MessageConverter将对象转换为JMS消息。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param 消息对象转换为消息
	 * @throws  JmsException将已检查的JMSException转换为未检查的
	 */
	void convertAndSend(Object message) throws JmsException;

	/**
	 * Send the given object to the specified destination, converting the object
	 * to a JMS message with a configured MessageConverter.
	 * @param destination the destination to send this message to
	 * @param message the object to convert to a message
	 * @throws JmsException converted checked JMSException to unchecked
	 */
	/**
	 * 将给定对象发送到指定的目标，然后使用配置的MessageConverter将对象转换为JMS消息。 
	 *  
	 * @param 目标发送此消息到
	 * @param 消息的目标将对象转换为消息
	 * @throws 的JmsException已转换已检查的JMSException为未检查的
	 */
	void convertAndSend(Destination destination, Object message) throws JmsException;

	/**
	 * Send the given object to the specified destination, converting the object
	 * to a JMS message with a configured MessageConverter.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param message the object to convert to a message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将给定对象发送到指定的目标，然后使用配置的MessageConverter将对象转换为JMS消息。 
	 *  
	 * @param  destinationName发送此消息到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param 消息对象转换为消息
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	void convertAndSend(String destinationName, Object message) throws JmsException;

	/**
	 * Send the given object to the default destination, converting the object
	 * to a JMS message with a configured MessageConverter. The MessagePostProcessor
	 * callback allows for modification of the message after conversion.
	 * <p>This will only work with a default destination specified!
	 * @param message the object to convert to a message
	 * @param postProcessor the callback to modify the message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将给定对象发送到默认目标，并使用配置的MessageConverter将对象转换为JMS消息。 
	 *  MessagePostProcessor回调允许在转换后修改消息。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param 消息对象转换为消息
	 * @param  postProcessor回调以修改消息
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	void convertAndSend(Object message, MessagePostProcessor postProcessor)
		throws JmsException;

	/**
	 * Send the given object to the specified destination, converting the object
	 * to a JMS message with a configured MessageConverter. The MessagePostProcessor
	 * callback allows for modification of the message after conversion.
	 * @param destination the destination to send this message to
	 * @param message the object to convert to a message
	 * @param postProcessor the callback to modify the message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将给定对象发送到指定的目标，然后使用配置的MessageConverter将对象转换为JMS消息。 
	 *  MessagePostProcessor回调允许在转换后修改消息。 
	 *  
	 * @param 目标将此消息发送到
	 * @param 消息的目标对象将转换为消息
	 * @param  postProcessor回调以修改消息
	 * @throws  JmsException已检查JMSException已转换为unchecked
	 */
	void convertAndSend(Destination destination, Object message, MessagePostProcessor postProcessor)
		throws JmsException;

	/**
	 * Send the given object to the specified destination, converting the object
	 * to a JMS message with a configured MessageConverter. The MessagePostProcessor
	 * callback allows for modification of the message after conversion.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param message the object to convert to a message.
	 * @param postProcessor the callback to modify the message
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 将给定对象发送到指定的目标，然后使用配置的MessageConverter将对象转换为JMS消息。 
	 *  MessagePostProcessor回调允许在转换后修改消息。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param 消息，对象将转换为消息。 
	 *  
	 * @param  postProcessor回调以修改消息
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	void convertAndSend(String destinationName, Object message, MessagePostProcessor postProcessor)
		throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for receiving messages
	//---------------------------------------------------------------------------------------

	/**
	 * Receive a message synchronously from the default destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * <p>This will only work with a default destination specified!
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从默认目标同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @return 使用者收到的消息，如果超时到期，则返回{@code  null} 
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	Message receive() throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destination the destination to receive a message from
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param 目的地接收来自
	 * @return 使用者接收到的消息的消息的目的地，如果超时到期则为{@code  null} 
	 * @throws  JmsException已检查JMSException转换为unchecked
	 */
	@Nullable
	Message receive(Destination destination) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @return 使用者接收到的消息，如果超时到期，则为{@code  null} 
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Message receive(String destinationName) throws JmsException;

	/**
	 * Receive a message synchronously from the default destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * <p>This will only work with a default destination specified!
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从默认目标同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 使用者收到的消息，如果超时到期，则返回{@code  null} 
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	Message receiveSelected(String messageSelector) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destination the destination to receive a message from
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param 目的地从
	 * @param  messageSelector或JMS消息选择器表达式接收消息的目的地（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 使用者收到的消息，如果超时到期，则返回{@code  null} 
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	Message receiveSelected(Destination destination, String messageSelector) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message received by the consumer, or {@code null} if the timeout expires
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 使用者收到的消息，如果超时到期，则返回{@code  null} 
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	Message receiveSelected(String destinationName, String messageSelector) throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for receiving auto-converted messages
	//---------------------------------------------------------------------------------------

	/**
	 * Receive a message synchronously from the default destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * <p>This will only work with a default destination specified!
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从默认目标同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @return 为使用者产生的消息，如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveAndConvert() throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destination the destination to receive a message from
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param 目的地从
	 * @return 接收为消费者产生的消息的目的地； 
	 * 如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveAndConvert(Destination destination) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @return 为使用者生成的消息； 
	 * 如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveAndConvert(String destinationName) throws JmsException;

	/**
	 * Receive a message synchronously from the default destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * <p>This will only work with a default destination specified!
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从默认目标同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 为使用者产生的消息，如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveSelectedAndConvert(String messageSelector) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destination the destination to receive a message from
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param 目的地从
	 * @param  messageSelector或JMS消息选择器表达式接收消息的目的地（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 为使用者产生的消息，如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveSelectedAndConvert(Destination destination, String messageSelector) throws JmsException;

	/**
	 * Receive a message synchronously from the specified destination, but only
	 * wait up to a specified time for delivery. Convert the message into an
	 * object with a configured MessageConverter.
	 * <p>This method should be used carefully, since it will block the thread
	 * until the message becomes available or until the timeout value is exceeded.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @return the message produced for the consumer or {@code null} if the timeout expires.
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 从指定的目的地同步接收一条消息，但仅等待指定的时间进行传递。 
	 * 使用已配置的MessageConverter将消息转换为对象。 
	 *  <p>应谨慎使用此方法，因为它将阻塞线程，直到消息可用或超过超时值为止。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @return 为使用者产生的消息，如果超时到期，则为{@code  null}。 
	 *  
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	Object receiveSelectedAndConvert(String destinationName, String messageSelector) throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for sending messages to and receiving the reply from a destination
	//---------------------------------------------------------------------------------------

	/**
	 * Send a request message and receive the reply from a default destination. The
	 * {@link MessageCreator} callback creates the message given a Session. A temporary
	 * queue is created as part of this operation and is set in the {@code JMSReplyTO}
	 * header of the message.
	 * <p>This will only work with a default destination specified!
	 * @param messageCreator callback to create a request message
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 * @throws JmsException checked JMSException converted to unchecked
	 * @since 4.1
	 */
	/**
	 * 发送请求消息并接收来自默认目标的答复。 
	 *  {@link  MessageCreator}回调在给定会话的情况下创建消息。 
	 * 作为此操作的一部分，将创建一个临时队列，并在消息的{@code  JMSReplyTO}标头中进行设置。 
	 *  <p>这仅适用于指定的默认目的地！ 
	 *  
	 * @param  messageCreator回调，用于创建请求消息
	 * @return 答复，如果由于超时而无法接收到消息，则可能返回{@code  null}。 
	 *  @始于4.1
	 */
	@Nullable
	Message sendAndReceive(MessageCreator messageCreator) throws JmsException;

	/**
	 * Send a message and receive the reply from the specified destination. The
	 * {@link MessageCreator} callback creates the message given a Session. A temporary
	 * queue is created as part of this operation and is set in the {@code JMSReplyTO}
	 * header of the message.
	 * @param destination the destination to send this message to
	 * @param messageCreator callback to create a message
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 * @throws JmsException checked JMSException converted to unchecked
	 * @since 4.1
	 */
	/**
	 * 发送消息并接收来自指定目的地的回复。 
	 *  {@link  MessageCreator}回调在给定会话的情况下创建消息。 
	 * 作为此操作的一部分，将创建一个临时队列，并在消息的{@code  JMSReplyTO}标头中进行设置。 
	 *  
	 * @param 目的地发送此消息到
	 * @param  messageCreator回调以创建消息的目的地
	 * @return 答复，如果由于例如由于以下原因而无法接收到消息，则可能为{@code  null}。 
	 * 超时
	 * @throws  JmsException已检查JMSException转换为未经检查的@since 4.1起
	 */
	@Nullable
	Message sendAndReceive(Destination destination, MessageCreator messageCreator) throws JmsException;

	/**
	 * Send a message and receive the reply from the specified destination. The
	 * {@link MessageCreator} callback creates the message given a Session. A temporary
	 * queue is created as part of this operation and is set in the {@code JMSReplyTO}
	 * header of the message.
	 * @param destinationName the name of the destination to send this message to
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param messageCreator callback to create a message
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 * @throws JmsException checked JMSException converted to unchecked
	 * @since 4.1
	 */
	/**
	 * 发送消息并接收来自指定目的地的回复。 
	 *  {@link  MessageCreator}回调在给定会话的情况下创建消息。 
	 * 作为此操作的一部分，将创建一个临时队列，并在消息的{@code  JMSReplyTO}标头中进行设置。 
	 *  
	 * @param  destinationName要将此消息发送到的目标的名称（由DestinationResolver解析为实际的目标）
	 * @param  messageCreator回调以创建消息
	 * @return 答复，可能为{@code  null}，例如由于超时
	 * @throws 而无法接收到消息。 
	 * JmsException已检查JMSException转换为未检查@，自4.1起
	 */
	@Nullable
	Message sendAndReceive(String destinationName, MessageCreator messageCreator) throws JmsException;


	//---------------------------------------------------------------------------------------
	// Convenience methods for browsing messages
	//---------------------------------------------------------------------------------------

	/**
	 * Browse messages in the default JMS queue. The callback gives access to the JMS
	 * Session and QueueBrowser in order to browse the queue and react to the contents.
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览默认JMS队列中的消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param 操作回调对象，用于公开会话/浏览器对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T browse(BrowserCallback<T> action) throws JmsException;

	/**
	 * Browse messages in a JMS queue. The callback gives access to the JMS Session
	 * and QueueBrowser in order to browse the queue and react to the contents.
	 * @param queue the queue to browse
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览JMS队列中的消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param 将队列排队以浏览
	 * @param 操作回调对象，该对象公开了会话/浏览器对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为unchecked
	 */
	@Nullable
	<T> T browse(Queue queue, BrowserCallback<T> action) throws JmsException;

	/**
	 * Browse messages in a JMS queue. The callback gives access to the JMS Session
	 * and QueueBrowser in order to browse the queue and react to the contents.
	 * @param queueName the name of the queue to browse
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览JMS队列中的消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param  queueName要浏览的队列的名称（由DestinationResolver解析为实际目的地）
	 * @param 操作回调对象，用于公开会话/浏览器对
	 * @return 结果对象无法与会话一起使用
	 * @throws  JmsException已检查JMSException已转换为未检查
	 */
	@Nullable
	<T> T browse(String queueName, BrowserCallback<T> action) throws JmsException;

	/**
	 * Browse selected messages in a JMS queue. The callback gives access to the JMS
	 * Session and QueueBrowser in order to browse the queue and react to the contents.
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览JMS队列中的选定消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @param 操作回调对象，用于公开会话/浏览器对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T browseSelected(String messageSelector, BrowserCallback<T> action) throws JmsException;

	/**
	 * Browse selected messages in a JMS queue. The callback gives access to the JMS
	 * Session and QueueBrowser in order to browse the queue and react to the contents.
	 * @param queue the queue to browse
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览JMS队列中的选定消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param 将队列排队以浏览
	 * @param  messageSelector或JMS消息选择器表达式（如果没有，则为{@code  null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @param 操作回调对象，用于公开会话/浏览器对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T browseSelected(Queue queue, String messageSelector, BrowserCallback<T> action) throws JmsException;

	/**
	 * Browse selected messages in a JMS queue. The callback gives access to the JMS
	 * Session and QueueBrowser in order to browse the queue and react to the contents.
	 * @param queueName the name of the queue to browse
	 * (to be resolved to an actual destination by a DestinationResolver)
	 * @param messageSelector the JMS message selector expression (or {@code null} if none).
	 * See the JMS specification for a detailed definition of selector expressions.
	 * @param action callback object that exposes the session/browser pair
	 * @return the result object from working with the session
	 * @throws JmsException checked JMSException converted to unchecked
	 */
	/**
	 * 浏览JMS队列中的选定消息。 
	 * 回调提供对JMS会话和QueueBrowser的访问，以便浏览队列并对内容做出反应。 
	 *  
	 * @param  queueName要浏览的队列的名称（由DestinationResolver解析为实际目的地）
	 * @param  messageSelector JMS消息选择器表达式（如果没有，则为{<@@code> null}）。 
	 * 有关选择器表达式的详细定义，请参见JMS规范。 
	 *  
	 * @param 操作回调对象，用于公开会话/浏览器对
	 * @return 与会话一起使用的结果对象
	 * @throws  JmsException已检查JMSException转换为未检查
	 */
	@Nullable
	<T> T browseSelected(String queueName, String messageSelector, BrowserCallback<T> action) throws JmsException;

}
