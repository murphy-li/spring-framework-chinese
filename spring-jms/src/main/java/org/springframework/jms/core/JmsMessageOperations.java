/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.core;

import java.util.Map;

import javax.jms.Destination;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;
import org.springframework.messaging.core.MessagePostProcessor;
import org.springframework.messaging.core.MessageReceivingOperations;
import org.springframework.messaging.core.MessageRequestReplyOperations;
import org.springframework.messaging.core.MessageSendingOperations;

/**
 * A specialization of {@link MessageSendingOperations}, {@link MessageReceivingOperations}
 * and {@link MessageRequestReplyOperations} for JMS related operations that allow to specify
 * a destination name rather than the actual {@link javax.jms.Destination}.
 *
 * @author Stephane Nicoll
 * @since 4.1
 * @see org.springframework.jms.core.JmsTemplate
 * @see org.springframework.messaging.core.MessageSendingOperations
 * @see org.springframework.messaging.core.MessageReceivingOperations
 * @see org.springframework.messaging.core.MessageRequestReplyOperations
 */
/**
 * {@link  MessageSendingOperations}，{<@link> MessageReceivingOperations}和{@link  MessageRequestReplyOperations}的特殊化，用于与JMS相关的操作，这些操作允许指定目标名称而不是实际的{@link  javax.jms。 
 * 目的地}。 
 *  @author  Stephane Nicoll @始于4.1 
 * @see  org.springframework.jms.core.JmsTemplate 
 * @see  org.springframework.messaging.core.MessageSendingOperations 
 * @see  org.springframework.messaging.core.MessageReceivingOperations <@参见> org.springframework.messaging.core.MessageRequestReplyOperations
 */
public interface JmsMessageOperations extends MessageSendingOperations<Destination>,
		MessageReceivingOperations<Destination>, MessageRequestReplyOperations<Destination> {

	/**
	 * Send a message to the given destination.
	 * @param destinationName the name of the target destination
	 * @param message the message to send
	 */
	/**
	 * 发送消息到给定的目的地。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param 消息要发送的消息
	 */
	void send(String destinationName, Message<?> message) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message and send it to the given destination.
	 * @param destinationName the name of the target destination
	 * @param payload the Object to use as payload
	 */
	/**
	 * 可以使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为消息并将其发送到给定的目的地。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 有效负载用作有效负载的对象
	 */
	void convertAndSend(String destinationName, Object payload) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers and send it to
	 * the given destination.
	 * @param destinationName the name of the target destination
	 * @param payload the Object to use as payload
	 * @param headers headers for the message to send
	 */
	/**
	 * 可以使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为带有给定标头的消息，然后将其发送到给定的目的地。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 有效负载用作有效负载的对象
	 * @param 标头用于发送消息的标头
	 */
	void convertAndSend(String destinationName, Object payload, Map<String, Object> headers)
			throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message, apply the given post processor, and send
	 * the resulting message to the given destination.
	 * @param destinationName the name of the target destination
	 * @param payload the Object to use as payload
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 可能使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的对象转换为序列化形式，将其包装为消息，应用给定的后处理器，然后将结果消息发送到给定的目的地。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 有效负载用作有效负载的对象
	 * @param  postProcessor后处理器应用于消息
	 */
	void convertAndSend(String destinationName, Object payload, MessagePostProcessor postProcessor)
			throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post processor,
	 * and send the resulting message to the given destination.
	 * @param destinationName the name of the target destination
	 * @param payload the Object to use as payload
	 * @param headers headers for the message to send
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 可能使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为带有给定标头的消息，应用给定后处理器，然后将结果消息发送给给定的目的地。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 有效负载用作有效负载的对象
	 * @param 标头消息的标头发送给
	 * @param  postProcessor后处理器以应用于消息
	 */
	void convertAndSend(String destinationName, Object payload, @Nullable Map<String, Object> headers,
			@Nullable MessagePostProcessor postProcessor) throws MessagingException;

	/**
	 * Receive a message from the given destination.
	 * @param destinationName the name of the target destination
	 * @return the received message, possibly {@code null} if the message could not
	 * be received, for example due to a timeout
	 */
	/**
	 * 接收来自给定目的地的消息。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @return 接收到的消息，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	Message<?> receive(String destinationName) throws MessagingException;

	/**
	 * Receive a message from the given destination and convert its payload to the
	 * specified target class.
	 * @param destinationName the name of the target destination
	 * @param targetClass the target class to convert the payload to
	 * @return the converted payload of the reply message, possibly {@code null} if
	 * the message could not be received, for example due to a timeout
	 */
	/**
	 * 接收来自给定目标的消息，并将其有效负载转换为指定的目标类。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param  targetClass目标类，以将有效载荷转换为
	 * @return 答复消息的转换后的有效载荷，如果消息不能为{@code  null}例如由于超时而收到
	 */
	@Nullable
	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException;

	/**
	 * Send a request message and receive the reply from the given destination.
	 * @param destinationName the name of the target destination
	 * @param requestMessage the message to send
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 */
	/**
	 * 发送请求消息并接收来自给定目标的答复。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param  requestMessage发送消息以发送
	 * @return 答复的消息，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter}, send
	 * it as a {@link Message} to the given destination, receive the reply and convert
	 * its body of the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其作为{@link  Message}发送到给定的目的地，接收答复并转换其指定目标类的主体。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 请求有效载荷的名称，用于向请求消息发送
	 * @param  targetClass的目标类型，以将回复的有效载荷转换为
	 * @return 回复消息的有效载荷，如果由于超时等原因无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter}, send
	 * it as a {@link Message} with the given headers, to the specified destination,
	 * receive the reply and convert its body of the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request payload for the request message to send
	 * @param headers headers for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其作为带有给定标头的{@link  Message}发送到指定目的地，接收回复并转换其为指定目标类的主体。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param 请求消息的有效负载发送
	 * @param 标头请求消息的头部发送
	 * @param  targetClass目标类型以转换回复的有效负载返回应答消息的有效负载，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)
			throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * apply the given post processor and send the resulting {@link Message} to the
	 * given destination, receive the reply and convert its body of the given
	 * target class.
	 * @param destinationName the name of the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @param requestPostProcessor post process to apply to the request message
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，应用给定的后处理器并将产生的{@link  Message}发送到给定的目的地，接收答复并转换其给定目标类的主体。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 请求有效载荷的请求消息，用于向
	 * @param  targetClass发送目标类型，以将回复的有效载荷转换为
	 * @param  requestPostProcessor后期处理以应用于请求消息
	 * @return 答复消息的有效负载，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,
			MessagePostProcessor requestPostProcessor) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post processor
	 * and send the resulting {@link Message} to the specified destination, receive
	 * the reply and convert its body of the given target class.
	 * @param destinationName the name of the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @param requestPostProcessor post process to apply to the request message
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其包装为带有给定标头的消息，应用给定后处理器并发送结果{<@link> Message}到指定的目标，接收答复并转换其给定目标类的主体。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 请求有效载荷的请求消息，用于向
	 * @param  targetClass发送目标类型，以将回复的有效载荷转换为
	 * @param  requestPostProcessor后期处理以应用于请求消息
	 * @return 答复消息的有效负载，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,
			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException;

}
