/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.core;

import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;

import org.springframework.lang.Nullable;

/**
 * Callback for sending a message to a JMS destination.
 *
 * <p>To be used with {@link JmsTemplate}'s callback methods that take a
 * {@link ProducerCallback} argument, often implemented as an anonymous
 * inner class or as a lambda expression.
 *
 * <p>The typical implementation will perform multiple operations on the
 * supplied JMS {@link Session} and {@link MessageProducer}.
 *
 * @author Mark Pollack
 * @since 1.1
 * @param <T> the result type
 * @see JmsTemplate#execute(ProducerCallback)
 * @see JmsTemplate#execute(javax.jms.Destination, ProducerCallback)
 * @see JmsTemplate#execute(String, ProducerCallback)
 */
/**
 * 用于将消息发送到JMS目标的回调。 
 *  <p>与{@link  JmsTemplate}的带有{@link  ProducerCallback}参数的回调方法一起使用，通常实现为匿名内部类或lambda表达式。 
 *  <p>典型的实现将在提供的JMS {@link  Session}和{@link  MessageProducer}上执行多个操作。 
 *  @author  Mark Pollack @since 1.1起
 * @param  <T>结果类型
 * @see  JmsTemplate＃execute（ProducerCallback）
 * @see  JmsTemplate＃execute（javax.jms.Destination，ProducerCallback）
 * @see  JmsTemplate #execute（String，ProducerCallback）
 */
@FunctionalInterface
public interface ProducerCallback<T> {

	/**
	 * Perform operations on the given {@link Session} and {@link MessageProducer}.
	 * <p>The message producer is not associated with any destination unless
	 * when specified in the JmsTemplate call.
	 * @param session the JMS {@code Session} object to use
	 * @param producer the JMS {@code MessageProducer} object to use
	 * @return a result object from working with the {@code Session}, if any
	 * (or {@code null} if none)
	 * @throws javax.jms.JMSException if thrown by JMS API methods
	 */
	/**
	 * 在给定的{@link  Session}和{@link  MessageProducer}上执行操作。 
	 *  <p>除非在JmsTemplate调用中指定，否则消息生成器不与任何目标关联。 
	 *  
	 * @param 会话使用JMS {@code  Session}对象使用
	 * @param 生产者，JMS {@code  MessageProducer}对象使用
	 * @return 与{@code 一起工作的结果对象会话}（如果有）（如果没有，则为{<@@code> null}）
	 * @throws  javax.jms.JMSException（如果由JMS API方法抛出）
	 */
	@Nullable
	T doInJms(Session session, MessageProducer producer) throws JMSException;

}
