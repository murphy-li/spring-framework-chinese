/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.support.converter;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;

/**
 * Strategy interface that specifies a converter between Java objects and JMS messages.
 *
 * <p>Check out {@link SimpleMessageConverter} for a default implementation,
 * converting between the 'standard' message payloads and JMS Message types.
 *
 * @author Mark Pollack
 * @author Juergen Hoeller
 * @since 1.1
 * @see org.springframework.jms.core.JmsTemplate#setMessageConverter
 * @see org.springframework.jms.listener.adapter.MessageListenerAdapter#setMessageConverter
 * @see org.springframework.jms.remoting.JmsInvokerClientInterceptor#setMessageConverter
 * @see org.springframework.jms.remoting.JmsInvokerServiceExporter#setMessageConverter
 */
/**
 * 策略接口，用于指定Java对象和JMS消息之间的转换器。 
 *  <p>签出{@link  SimpleMessageConverter}以获取默认实现，以在"标准"消息有效负载和JMS消息类型之间进行转换。 
 *  @author  Mark Pollack @author  Juergen Hoeller @since 1.1起@
 * @see> org.springframework.jms.core.JmsTemplate＃setMessageConverter 
 * @see  org.springframework.jms.listener.adapter.MessageListenerAdapter＃setMessageConverter > org.springframework.jms.remoting.JmsInvokerClientInterceptor＃setMessageConverter 
 * @see  org.springframework.jms.remoting.JmsInvokerServiceExporter＃setMessageConverter
 */
public interface MessageConverter {

	/**
	 * Convert a Java object to a JMS Message using the supplied session
	 * to create the message object.
	 * @param object the object to convert
	 * @param session the Session to use for creating a JMS Message
	 * @return the JMS Message
	 * @throws javax.jms.JMSException if thrown by JMS API methods
	 * @throws MessageConversionException in case of conversion failure
	 */
	/**
	 * 使用提供的会话将Java对象转换为JMS Message，以创建消息对象。 
	 *  
	 * @param 对象要转换的对象
	 * @param 会话用于创建JMS消息的Session 
	 * @return  JMS消息
	 * @throws  javax.jms.JMSException（如果由JMS API方法抛出）
	 * @throws  MessageConversionException如果转换失败
	 */
	Message toMessage(Object object, Session session) throws JMSException, MessageConversionException;

	/**
	 * Convert from a JMS Message to a Java object.
	 * @param message the message to convert
	 * @return the converted Java object
	 * @throws javax.jms.JMSException if thrown by JMS API methods
	 * @throws MessageConversionException in case of conversion failure
	 */
	/**
	 * 从JMS消息转换为Java对象。 
	 *  
	 * @param 向消息发送消息，以转换消息
	 * @return 已转换的Java对象
	 * @throws  javax.jms.JMSException（如果由JMS API方法抛出）
	 * @throws 在转换失败的情况下为MessageConversionException
	 */
	Object fromMessage(Message message) throws JMSException, MessageConversionException;

}
