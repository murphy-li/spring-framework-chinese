/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jms.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.annotation.Import;

/**
 * Enable JMS listener annotated endpoints that are created under the cover
 * by a {@link org.springframework.jms.config.JmsListenerContainerFactory
 * JmsListenerContainerFactory}. To be used on
 * {@link org.springframework.context.annotation.Configuration Configuration}
 * classes as follows:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * public class AppConfig {
 *
 *     &#064;Bean
 *     public DefaultJmsListenerContainerFactory myJmsListenerContainerFactory() {
 *       DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
 *       factory.setConnectionFactory(connectionFactory());
 *       factory.setDestinationResolver(destinationResolver());
 *       factory.setSessionTransacted(true);
 *       factory.setConcurrency("5");
 *       return factory;
 *     }
 *
 *     // other &#064;Bean definitions
 * }</pre>
 *
 * The {@code JmsListenerContainerFactory} is responsible to create the listener container
 * responsible for a particular endpoint. Typical implementations, as the
 * {@link org.springframework.jms.config.DefaultJmsListenerContainerFactory DefaultJmsListenerContainerFactory}
 * used in the sample above, provides the necessary configuration options that are supported by
 * the underlying {@link org.springframework.jms.listener.MessageListenerContainer MessageListenerContainer}.
 *
 * <p>{@code @EnableJms} enables detection of {@link JmsListener} annotations on any
 * Spring-managed bean in the container. For example, given a class {@code MyService}:
 *
 * <pre class="code">
 * package com.acme.foo;
 *
 * public class MyService {
 *
 *     &#064;JmsListener(containerFactory = "myJmsListenerContainerFactory", destination="myQueue")
 *     public void process(String msg) {
 *         // process incoming message
 *     }
 * }</pre>
 *
 * The container factory to use is identified by the {@link JmsListener#containerFactory() containerFactory}
 * attribute defining the name of the {@code JmsListenerContainerFactory} bean to use.  When none
 * is set a {@code JmsListenerContainerFactory} bean with name {@code jmsListenerContainerFactory} is
 * assumed to be present.
 *
 * <p>the following configuration would ensure that every time a {@link javax.jms.Message}
 * is received on the {@link javax.jms.Destination} named "myQueue", {@code MyService.process()}
 * is called with the content of the message:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * public class AppConfig {
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         return new MyService();
 *     }
 *
 *     // JMS infrastructure setup
 * }</pre>
 *
 * Alternatively, if {@code MyService} were annotated with {@code @Component}, the
 * following configuration would ensure that its {@code @JmsListener} annotated
 * method is invoked with a matching incoming message:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * &#064;ComponentScan(basePackages="com.acme.foo")
 * public class AppConfig {
 * }</pre>
 *
 * Note that the created containers are not registered against the application context
 * but can be easily located for management purposes using the
 * {@link org.springframework.jms.config.JmsListenerEndpointRegistry JmsListenerEndpointRegistry}.
 *
 * <p>Annotated methods can use flexible signature; in particular, it is possible to use
 * the {@link org.springframework.messaging.Message Message} abstraction and related annotations,
 * see {@link JmsListener} Javadoc for more details. For instance, the following would
 * inject the content of the message and a custom "myCounter" JMS header:
 *
 * <pre class="code">
 * &#064;JmsListener(containerFactory = "myJmsListenerContainerFactory", destination="myQueue")
 * public void process(String msg, @Header("myCounter") int counter) {
 *     // process incoming message
 * }</pre>
 *
 * These features are abstracted by the {@link org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}
 * that is responsible to build the necessary invoker to process the annotated method. By default,
 * {@link org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory} is used.
 *
 * <p>When more control is desired, a {@code @Configuration} class may implement
 * {@link JmsListenerConfigurer}. This allows access to the underlying
 * {@link org.springframework.jms.config.JmsListenerEndpointRegistrar JmsListenerEndpointRegistrar}
 * instance. The following example demonstrates how to specify an explicit default
 * {@code JmsListenerContainerFactory}
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * public class AppConfig implements JmsListenerConfigurer {
 *
 *     &#064;Override
 *     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {
 *         registrar.setContainerFactory(myJmsListenerContainerFactory());
 *     }
 *
 *     &#064;Bean
 *     public JmsListenerContainerFactory<?> myJmsListenerContainerFactory() {
 *         // factory settings
 *     }
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         return new MyService();
 *     }
 * }</pre>
 *
 * For reference, the example above can be compared to the following Spring XML
 * configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;jms:annotation-driven container-factory="myJmsListenerContainerFactory"/&gt;
 *
 *     &lt;bean id="myJmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory"&gt;
 *           // factory settings
 *     &lt;/bean&gt;
 *
 *     &lt;bean id="myService" class="com.acme.foo.MyService"/&gt;
 *
 * &lt;/beans&gt;
 * }</pre>
 *
 * It is also possible to specify a custom {@link org.springframework.jms.config.JmsListenerEndpointRegistry
 * JmsListenerEndpointRegistry} in case you need more control on the way the containers
 * are created and managed. The example below also demonstrates how to customize the
 * {@code JmsHandlerMethodFactory} to use with a custom {@link org.springframework.validation.Validator
 * Validator} so that payloads annotated with {@link org.springframework.validation.annotation.Validated
 * Validated} are first validated against a custom {@code Validator}.
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * public class AppConfig implements JmsListenerConfigurer {
 *
 *     &#064;Override
 *     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {
 *         registrar.setEndpointRegistry(myJmsListenerEndpointRegistry());
 *         registrar.setMessageHandlerMethodFactory(myJmsHandlerMethodFactory);
 *     }
 *
 *     &#064;Bean
 *     public JmsListenerEndpointRegistry<?> myJmsListenerEndpointRegistry() {
 *         // registry configuration
 *     }
 *
 *     &#064;Bean
 *     public JmsHandlerMethodFactory myJmsHandlerMethodFactory() {
 *        DefaultJmsHandlerMethodFactory factory = new DefaultJmsHandlerMethodFactory();
 *        factory.setValidator(new MyValidator());
 *        return factory;
 *     }
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         return new MyService();
 *     }
 * }</pre>
 *
 * For reference, the example above can be compared to the following Spring XML
 * configuration:
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;jms:annotation-driven registry="myJmsListenerEndpointRegistry"
 *         handler-method-factory="myJmsHandlerMethodFactory"/&gt;
 *
 *     &lt;bean id="myJmsListenerEndpointRegistry"
 *           class="org.springframework.jms.config.JmsListenerEndpointRegistry"&gt;
 *           // registry configuration
 *     &lt;/bean&gt;
 *
 *     &lt;bean id="myJmsHandlerMethodFactory"
 *           class="org.springframework.messaging.handler.support.DefaultJmsHandlerMethodFactory"&gt;
 *         &lt;property name="validator" ref="myValidator"/&gt;
 *     &lt;/bean&gt;
 *
 *     &lt;bean id="myService" class="com.acme.foo.MyService"/&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * Implementing {@code JmsListenerConfigurer} also allows for fine-grained
 * control over endpoints registration via the {@code JmsListenerEndpointRegistrar}.
 * For example, the following configures an extra endpoint:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableJms
 * public class AppConfig implements JmsListenerConfigurer {
 *
 *     &#064;Override
 *     public void configureJmsListeners(JmsListenerEndpointRegistrar registrar) {
 *         SimpleJmsListenerEndpoint myEndpoint = new SimpleJmsListenerEndpoint();
 *         // ... configure the endpoint
 *         registrar.registerEndpoint(endpoint, anotherJmsListenerContainerFactory());
 *     }
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         return new MyService();
 *     }
 *
 *     &#064;Bean
 *     public JmsListenerContainerFactory<?> anotherJmsListenerContainerFactory() {
 *         // ...
 *     }
 *
 *     // JMS infrastructure setup
 * }</pre>
 *
 * Note that all beans implementing {@code JmsListenerConfigurer} will be detected and
 * invoked in a similar fashion. The example above can be translated in a regular bean
 * definition registered in the context in case you use the XML configuration.
 *
 * @author Stephane Nicoll
 * @since 4.1
 * @see JmsListener
 * @see JmsListenerAnnotationBeanPostProcessor
 * @see org.springframework.jms.config.JmsListenerEndpointRegistrar
 * @see org.springframework.jms.config.JmsListenerEndpointRegistry
 */
/**
 * 启用由{<< @link >> org.springframework.jms.config.JmsListenerContainerFactory JmsListenerContainerFactory}在封面下创建的JMS侦听器注释的端点。 
 * 要在{<< @link >> org.springframework.context.annotation.Configuration配置}类上使用，如下所示：<pre class ="code"> @Configuration @EnableJms公共类AppConfig {@Bean public DefaultJmsListenerContainerFactory myJmsListenerContainerFactory（）{ DefaultJmsListenerContainerFactory factory =新的DefaultJmsListenerContainerFactory（）; factory.setConnectionFactory（connectionFactory（））; factory.setDestinationResolver（destinationResolver（））; factory.setSessionTransacted（true）; factory.setConcurrency（"5"）;返回工厂； 
 *  } //其他@Bean定义} </ pre> {<< @code >> JmsListenerContainerFactory}负责创建负责特定端点的侦听器容器。 
 * 以上示例中使用的{<< @link >> org.springframework.jms.config.DefaultJmsListenerContainerFactory DefaultJmsListenerContainerFactory}这样的典型实现提供了基础{<< @link >> org.springframework支持的必要配置选项。 
 *  .jms.listener.MessageListenerContainer MessageListenerContainer}。 
 *  <p> {<< @@code >> @EnableJms}可以在容器中的任何Spring管理的bean上检测{<< @link >> JmsListener}注解。 
 * 例如，给定一个类{<< @code >> MyService}：<pre class ="code"> package com.acme.foo;公共类MyService {@JmsListener（containerFactory ="myJmsListenerContainerFactory"，destination ="myQueue"）public void process（String msg）{//处理传入消息}} </ pre>要使用的容器工厂由{<< @link >> JmsListener＃containerFactory（）containerFactory}属性定义了要使用的{<< @code >> JmsListenerContainerFactory} bean的名称。 
 * 如果未设置，则假定存在名称为{<< @code >> jmsListenerContainerFactory}的{<< @code >> JmsListenerContainerFactory} bean。 
 *  <p>以下配置将确保每次在名为"myQueue"的{<< @link >> javax.jms.Destination}上收到{<< @link >> javax.jms.Message}时，{<<使用消息的内容调用@code >> MyService.process（）}：<pre class ="code"> @Configuration @EnableJms公共类AppConfig {@Bean public MyService myService（）{return new MyService（）; } // JMS基础结构设置} </ pre>或者，如果{{<< @code >> MyService}用{<< @code >> @Component}注释，则以下配置将确保其{<< @code> > @JmsListener}带注释的方法与匹配的传入消息一起调用：<pre class ="code"> @Configuration @EnableJms @ComponentScan（basePackages ="com.acme.foo"）公共类AppConfig {} </ pre>注意创建的容器不会针对应用程序上下文进行注册，但是可以使用{<< @link >> org.springframework.jms.config.JmsListenerEndpointRegistry JmsListenerEndpointRegistry}进行轻松定位以进行管理。 
 *  <p>带注释的方法可以使用灵活的签名； 
 * 特别是，可以使用{<< @link >> org.springframework.messaging.Message Message}抽象和相关注释，有关更多详细信息，请参见{<< @link >> JmsListener} Javadoc。 
 * 例如，以下内容将注入消息的内容和自定义的"myCounter"JMS标头：<pre class ="code"> @JmsListener（containerFactory ="myJmsListenerContainerFactory"，destination ="myQueue"）公共无效进程（字符串msg ，@Header（"myCounter"）int counter）{//处理传入消息} </ pre>这些功能由{<< @link >> org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory}抽象负责构建必要的调用程序来处理带注释的方法。 
 * 默认情况下，使用{<< @link >> org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory}。 
 *  <p>如果需要更多控制，则{<< @code >> @Configuration}类可以实现{<< @link >> JmsListenerConfigurer}。 
 * 这允许访问基础的{<< @link >> org.springframework.jms.config.JmsListenerEndpointRegistrar JmsListenerEndpointRegistrar}实例
 */
/**
 * 下面的示例演示如何指定显式默认值{<< @code >> JmsListenerContainerFactory} <pre class ="code"> @Configuration @EnableJms公共类AppConfig实现JmsListenerConfigurer {@Override public void configureJmsListeners（JmsListenerEndpointRegistrar registrar）{registrar.setContainerFactory （myJmsListenerContainerFactory（））; } @Bean public JmsListenerContainerFactory <？> myJmsListenerContainerFactory（）{//出厂设置} @Bean public MyService myService（）{return new MyService（）; }} </ pre>作为参考，可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <jms：annotation-driven container-factory ="myJmsListenerContainerFactory"/> <bean id ="myJmsListenerContainerFactory"class ="org.springframework.jms.config.DefaultJmsListenerContainerFactory"> //出厂设置</ bean> <bean id ="myService"class ="com.acme.foo.MyService"/> </ beans >} </ pre>也可以指定自定义{<< @link >> org.springframework.jms.config.JmsListenerEndpointRegistry JmsListenerEndpointRegistry}，以防您需要对容器的创建和管理方式进行更多控制。 
 * 下面的示例还演示了如何自定义{<< @code >> JmsHandlerMethodFactory}以与自定义{<< @link >> org.springframework.validation.Validator Validator}一起使用，以便用{<< @link>注释的有效负载> org.springframework.validation.annotation.Validated Validated}首先针对自定义的{<< @code >> Validator}进行验证。 
 *  <pre class ="code"> @Configuration @EnableJms公共类AppConfig实现JmsListenerConfigurer {@Override public void configureJmsListeners（JmsListenerEndpointRegistrar registrar）{registrar.setEndpointRegistry（myJmsListenerEndpointRegistry（））; registrar.setMessageHandlerMethodFactory（myJmsHandlerMethodFactory）; } @Bean public JmsListenerEndpointRegistry <？> myJmsListenerEndpointRegistry（）{//注册表配置} @Bean public JmsHandlerMethodFactory myJmsHandlerMethodFactory（）{DefaultJmsHandlerMethodFactory factory = new DefaultJmsHandlerMethodFactory（）; factory.setValidator（new MyValidator（））;返回工厂； 
 *  } @Bean public MyService myService（）{返回新的MyService（）; }} </ pre>作为参考，可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <jms：annotation驱动的Registry ="myJmsListenerEndpointRegistry"handler-method-factory = "myJmsHandlerMethodFactory"/> <bean id ="myJmsListenerEndpointRegistry"class ="org.springframework.jms.config.JmsListenerEndpointRegistry"> //注册表配置</ bean> <bean id ="myJmsHandlerMethodFactory"class ="org.springframework.messaging。 
 *  handler.support.DefaultJmsHandlerMethodFactory"> <属性名称="validator"ref ="myValidator"/> </ bean> <bean id ="myService"class ="com.acme.foo.MyService"/> </ beans> < / pre>实现{<< @code >> JmsListenerConfigurer}还允许通过{<< @code >> JmsListenerEndpointRegistrar}对端点注册进行细粒度的控制。 
 * 例如，以下配置一个额外的终结点：<pre class ="code"> @Configuration @EnableJms公共类AppConfig实现JmsListenerConfigurer {@Override public void configureJmsListeners（JmsListenerEndpointRegistrar registrar）{SimpleJmsListenerEndpoint myEndpoint = new SimpleJmsListenerEndpoint（）; // ...配置端点registrar.registerEndpoint（endpoint，anotherJmsListenerContainerFactory（））; } @Bean public MyService myService（）{返回新的MyService（）; } @Bean public JmsListenerContainerFactory <？> anotherJmsListenerContainerFactory（）{// ...} // JMS基础结构设置} </ pre>注意，将以类似的方式检测并调用所有实现{<< @code >> JmsListenerConfigurer}的bean。 
 * 时尚。 
 * 如果使用XML配置，可以将以上示例转换为在上下文中注册的常规bean定义。 
 *  << @author >> Stephane Nicoll @始于4.1 << 
 * @see >> JmsListener << 
 * @see >> JmsListenerAnnotationBeanPostProcessor << 
 * @see >> org.springframework.jms.config.JmsListenerEndpointRegistrar << 
 * @see >> org.springframework。 
 *  jms.config.JmsListenerEndpointRegistry
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(JmsBootstrapConfiguration.class)
public @interface EnableJms {
}
