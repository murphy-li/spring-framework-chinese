/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.namedparam;

import java.util.ArrayList;
import java.util.List;

/**
 * Holds information about a parsed SQL statement.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * 包含有关已解析的SQL语句的信息。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 2.0
 */
public class ParsedSql {

	private String originalSql;

	private List<String> parameterNames = new ArrayList<>();

	private List<int[]> parameterIndexes = new ArrayList<>();

	private int namedParameterCount;

	private int unnamedParameterCount;

	private int totalParameterCount;


	/**
	 * Create a new instance of the {@link ParsedSql} class.
	 * @param originalSql the SQL statement that is being (or is to be) parsed
	 */
	/**
	 * 创建{@link  ParsedSql}类的新实例。 
	 *  
	 * @param  originalSql正在（或将要）解析的SQL语句
	 */
	ParsedSql(String originalSql) {
		this.originalSql = originalSql;
	}

	/**
	 * Return the SQL statement that is being parsed.
	 */
	/**
	 * 返回正在分析的SQL语句。 
	 * 
	 */
	String getOriginalSql() {
		return this.originalSql;
	}


	/**
	 * Add a named parameter parsed from this SQL statement.
	 * @param parameterName the name of the parameter
	 * @param startIndex the start index in the original SQL String
	 * @param endIndex the end index in the original SQL String
	 */
	/**
	 * 添加从此SQL语句解析的命名参数。 
	 *  
	 * @param  parameterName参数名称
	 * @param  startIndex原始SQL字符串中的开始索引
	 * @param  endIndex原始SQL字符串中的结束索引
	 */
	void addNamedParameter(String parameterName, int startIndex, int endIndex) {
		this.parameterNames.add(parameterName);
		this.parameterIndexes.add(new int[] {startIndex, endIndex});
	}

	/**
	 * Return all of the parameters (bind variables) in the parsed SQL statement.
	 * Repeated occurrences of the same parameter name are included here.
	 */
	/**
	 * 返回已解析的SQL语句中的所有参数（绑定变量）。 
	 * 此处包含重复出现的相同参数名称。 
	 * 
	 */
	List<String> getParameterNames() {
		return this.parameterNames;
	}

	/**
	 * Return the parameter indexes for the specified parameter.
	 * @param parameterPosition the position of the parameter
	 * (as index in the parameter names List)
	 * @return the start index and end index, combined into
	 * a int array of length 2
	 */
	/**
	 * 返回指定参数的参数索引。 
	 *  
	 * @param  parameterPosition参数的位置（作为参数名称列表中的索引）
	 * @return 起始索引和结束索引，合并为长度为2的int数组
	 */
	int[] getParameterIndexes(int parameterPosition) {
		return this.parameterIndexes.get(parameterPosition);
	}

	/**
	 * Set the count of named parameters in the SQL statement.
	 * Each parameter name counts once; repeated occurrences do not count here.
	 */
	/**
	 * 设置SQL语句中命名参数的数量。 
	 * 每个参数名称计数一次； 
	 * 重复出现的次数不在此处计算。 
	 * 
	 */
	void setNamedParameterCount(int namedParameterCount) {
		this.namedParameterCount = namedParameterCount;
	}

	/**
	 * Return the count of named parameters in the SQL statement.
	 * Each parameter name counts once; repeated occurrences do not count here.
	 */
	/**
	 * 返回SQL语句中命名参数的计数。 
	 * 每个参数名称计数一次； 
	 * 重复出现的次数不在此处计算。 
	 * 
	 */
	int getNamedParameterCount() {
		return this.namedParameterCount;
	}

	/**
	 * Set the count of all of the unnamed parameters in the SQL statement.
	 */
	/**
	 * 设置SQL语句中所有未命名参数的计数。 
	 * 
	 */
	void setUnnamedParameterCount(int unnamedParameterCount) {
		this.unnamedParameterCount = unnamedParameterCount;
	}

	/**
	 * Return the count of all of the unnamed parameters in the SQL statement.
	 */
	/**
	 * 返回SQL语句中所有未命名参数的计数。 
	 * 
	 */
	int getUnnamedParameterCount() {
		return this.unnamedParameterCount;
	}

	/**
	 * Set the total count of all of the parameters in the SQL statement.
	 * Repeated occurrences of the same parameter name do count here.
	 */
	/**
	 * 设置SQL语句中所有参数的总数。 
	 * 重复出现的具有相同参数名称的事件在此处进行计数。 
	 * 
	 */
	void setTotalParameterCount(int totalParameterCount) {
		this.totalParameterCount = totalParameterCount;
	}

	/**
	 * Return the total count of all of the parameters in the SQL statement.
	 * Repeated occurrences of the same parameter name do count here.
	 */
	/**
	 * 返回SQL语句中所有参数的总数。 
	 * 重复出现的具有相同参数名称的事件在此处进行计数。 
	 * 
	 */
	int getTotalParameterCount() {
		return this.totalParameterCount;
	}


	/**
	 * Exposes the original SQL String.
	 */
	/**
	 * 公开原始的SQL字符串。 
	 * 
	 */
	@Override
	public String toString() {
		return this.originalSql;
	}

}
