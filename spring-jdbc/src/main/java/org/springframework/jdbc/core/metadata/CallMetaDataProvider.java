/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.metadata;

import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.SqlParameter;
import org.springframework.lang.Nullable;

/**
 * Interface specifying the API to be implemented by a class providing call meta-data.
 *
 * <p>This is intended for internal use by Spring's
 * {@link org.springframework.jdbc.core.simple.SimpleJdbcCall}.
 *
 * @author Thomas Risberg
 * @since 2.5
 */
/**
 * 指定要由提供调用元数据的类实现的API的接口。 
 *  <p>这是供Spring的{@link  org.springframework.jdbc.core.simple.SimpleJdbcCall}内部使用的。 
 *  @author 托马斯·里斯伯格@since 2.5
 */
public interface CallMetaDataProvider {

	/**
	 * Initialize using the provided DatabaseMetData.
	 * @param databaseMetaData used to retrieve database specific information
	 * @throws SQLException in case of initialization failure
	 */
	/**
	 * 使用提供的DatabaseMetData进行初始化。 
	 *  
	 * @param  databaseMetaData用于检索数据库特定信息
	 * @throws  SQLException，如果初始化失败
	 */
	void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQLException;

	/**
	 * Initialize the database specific management of procedure column meta-data.
	 * This is only called for databases that are supported. This initialization
	 * can be turned off by specifying that column meta-data should not be used.
	 * @param databaseMetaData used to retrieve database specific information
	 * @param catalogName name of catalog to use (or {@code null} if none)
	 * @param schemaName name of schema name to use (or {@code null} if none)
	 * @param procedureName name of the stored procedure
	 * @throws SQLException in case of initialization failure
	 * @see	org.springframework.jdbc.core.simple.SimpleJdbcCall#withoutProcedureColumnMetaDataAccess()
	 */
	/**
	 * 初始化过程列元数据的数据库特定管理。 
	 * 仅在支持的数据库中调用此方法。 
	 * 可以通过指定不使用列元数据来关闭此初始化。 
	 *  
	 * @param  databaseMetaData用于检索数据库特定信息
	 * @param  catalogName要使用的目录名称（如果没有，则为{@code  null}）
	 * @param  schemaName要使用的架构名称（或{<@code > null}（如果没有，则为null）。 
	 * 
	 */
	void initializeWithProcedureColumnMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName,
			@Nullable String schemaName, @Nullable String procedureName) throws SQLException;

	/**
	 * Provide any modification of the procedure name passed in to match the meta-data currently used.
	 * This could include altering the case.
	 */
	/**
	 * 提供传入的过程名称的任何修改，以匹配当前使用的元数据。 
	 * 这可能包括更改案例。 
	 * 
	 */
	@Nullable
	String procedureNameToUse(@Nullable String procedureName);

	/**
	 * Provide any modification of the catalog name passed in to match the meta-data currently used.
	 * This could include altering the case.
	 */
	/**
	 * 提供传入目录名称的任何修改，以匹配当前使用的元数据。 
	 * 这可能包括更改案例。 
	 * 
	 */
	@Nullable
	String catalogNameToUse(@Nullable String catalogName);

	/**
	 * Provide any modification of the schema name passed in to match the meta-data currently used.
	 * This could include altering the case.
	 */
	/**
	 * 提供传入的架构名称的任何修改，以匹配当前使用的元数据。 
	 * 这可能包括更改案例。 
	 * 
	 */
	@Nullable
	String schemaNameToUse(@Nullable String schemaName);

	/**
	 * Provide any modification of the catalog name passed in to match the meta-data currently used.
	 * The returned value will be used for meta-data lookups. This could include altering the case
	 * used or providing a base catalog if none is provided.
	 */
	/**
	 * 提供传入目录名称的任何修改，以匹配当前使用的元数据。 
	 * 返回的值将用于元数据查找。 
	 * 这可能包括更改使用的案例或提供基本目录（如果未提供）。 
	 * 
	 */
	@Nullable
	String metaDataCatalogNameToUse(@Nullable String catalogName) ;

	/**
	 * Provide any modification of the schema name passed in to match the meta-data currently used.
	 * The returned value will be used for meta-data lookups. This could include altering the case
	 * used or providing a base schema if none is provided.
	 */
	/**
	 * 提供传入的架构名称的任何修改，以匹配当前使用的元数据。 
	 * 返回的值将用于元数据查找。 
	 * 这可能包括更改使用的大小写或提供基本模式（如果未提供）。 
	 * 
	 */
	@Nullable
	String metaDataSchemaNameToUse(@Nullable String schemaName);

	/**
	 * Provide any modification of the column name passed in to match the meta-data currently used.
	 * This could include altering the case.
	 * @param parameterName name of the parameter of column
	 */
	/**
	 * 提供对传入的列名的任何修改，以匹配当前使用的元数据。 
	 * 这可能包括更改案例。 
	 *  
	 * @param  parameterName列的参数名称
	 */
	@Nullable
	String parameterNameToUse(@Nullable String parameterName);

	/**
	 * Create a default out parameter based on the provided meta-data.
	 * This is used when no explicit parameter declaration has been made.
	 * @param parameterName the name of the parameter
	 * @param meta meta-data used for this call
	 * @return the configured SqlOutParameter
	 */
	/**
	 * 根据提供的元数据创建默认输出参数。 
	 * 在未进行任何显式参数声明的情况下使用此方法。 
	 *  
	 * @param  parameterName用于此调用的参数
	 * @param 元元数据的名称
	 * @return 已配置的SqlOutParameter
	 */
	SqlParameter createDefaultOutParameter(String parameterName, CallParameterMetaData meta);

	/**
	 * Create a default inout parameter based on the provided meta-data.
	 * This is used when no explicit parameter declaration has been made.
	 * @param parameterName the name of the parameter
	 * @param meta meta-data used for this call
	 * @return the configured SqlInOutParameter
	 */
	/**
	 * 根据提供的元数据创建默认的inout参数。 
	 * 在未进行任何显式参数声明的情况下使用此方法。 
	 *  
	 * @param  parameterName用于此调用的参数
	 * @param 元元数据的名称
	 * @return 已配置的SqlInOutParameter
	 */
	SqlParameter createDefaultInOutParameter(String parameterName, CallParameterMetaData meta);

	/**
	 * Create a default in parameter based on the provided meta-data.
	 * This is used when no explicit parameter declaration has been made.
	 * @param parameterName the name of the parameter
	 * @param meta meta-data used for this call
	 * @return the configured SqlParameter
	 */
	/**
	 * 根据提供的元数据创建默认参数。 
	 * 在未进行任何显式参数声明的情况下使用此方法。 
	 *  
	 * @param  parameterName用于此调用的参数
	 * @param 元元数据的名称
	 * @return 已配置的SqlParameter
	 */
	SqlParameter createDefaultInParameter(String parameterName, CallParameterMetaData meta);

	/**
	 * Get the name of the current user. Useful for meta-data lookups etc.
	 * @return current user name from database connection
	 */
	/**
	 * 获取当前用户的名称。 
	 * 对元数据查找等有用。 
	 * <
	 * @return>数据库连接中的当前用户名
	 */
	@Nullable
	String getUserName();

	/**
	 * Does this database support returning ResultSets that should be retrieved with the JDBC call:
	 * {@link java.sql.Statement#getResultSet()}?
	 */
	/**
	 * 此数据库是否支持返回应通过JDBC调用检索的ResultSet：{@link  java.sql.Statement＃getResultSet（）}？
	 */
	boolean isReturnResultSetSupported();

	/**
	 * Does this database support returning ResultSets as ref cursors to be retrieved with
	 * {@link java.sql.CallableStatement#getObject(int)} for the specified column.
	 */
	/**
	 * 此数据库是否支持返回结果集作为参考游标，以使用{@link  java.sql.CallableStatement＃getObject（int）}检索指定的列。 
	 * 
	 */
	boolean isRefCursorSupported();

	/**
	 * Get the {@link java.sql.Types} type for columns that return ResultSets as ref cursors
	 * if this feature is supported.
	 */
	/**
	 * 如果支持此功能，则为将ResultSets作为引用游标返回的列获取{@link  java.sql.Types}类型。 
	 * 
	 */
	int getRefCursorSqlType();

	/**
	 * Are we using the meta-data for the procedure columns?
	 */
	/**
	 * 我们是否在过程列中使用元数据？
	 */
	boolean isProcedureColumnMetaDataUsed();

	/**
	 * Should we bypass the return parameter with the specified name.
	 * This allows the database specific implementation to skip the processing
	 * for specific results returned by the database call.
	 */
	/**
	 * 我们是否应该使用指定的名称绕过return参数。 
	 * 这允许数据库特定的实现跳过对数据库调用返回的特定结果的处理。 
	 * 
	 */
	boolean byPassReturnParameter(String parameterName);

	/**
	 * Get the call parameter meta-data that is currently used.
	 * @return a List of {@link CallParameterMetaData}
	 */
	/**
	 * 获取当前使用的调用参数元数据。 
	 *  
	 * @return  {@link  CallParameterMetaData}的列表
	 */
	List<CallParameterMetaData> getCallParameterMetaData();

	/**
	 * Does the database support the use of catalog name in procedure calls?
	 */
	/**
	 * 数据库是否支持在过程调用中使用目录名称？
	 */
	boolean isSupportsCatalogsInProcedureCalls();

	/**
	 * Does the database support the use of schema name in procedure calls?
	 */
	/**
	 * 数据库是否支持在过程调用中使用模式名称？
	 */
	boolean isSupportsSchemasInProcedureCalls();

}
