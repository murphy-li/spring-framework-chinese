/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * An interface used by {@link JdbcTemplate} for processing rows of a
 * {@link java.sql.ResultSet} on a per-row basis. Implementations of
 * this interface perform the actual work of processing each row
 * but don't need to worry about exception handling.
 * {@link java.sql.SQLException SQLExceptions} will be caught and handled
 * by the calling JdbcTemplate.
 *
 * <p>In contrast to a {@link ResultSetExtractor}, a RowCallbackHandler
 * object is typically stateful: It keeps the result state within the
 * object, to be available for later inspection. See
 * {@link RowCountCallbackHandler} for a usage example.
 *
 * <p>Consider using a {@link RowMapper} instead if you need to map
 * exactly one result object per row, assembling them into a List.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see JdbcTemplate
 * @see RowMapper
 * @see ResultSetExtractor
 * @see RowCountCallbackHandler
 */
/**
 * {@link  JdbcTemplate}使用的接口，用于按行处理{@link  java.sql.ResultSet}的行。 
 * 此接口的实现执行处理每一行的实际工作，但无需担心异常处理。 
 *  {@link  java.sql.SQLException SQLExceptions}将由调用JdbcTemplate捕获和处理。 
 *  <p>与{@link  ResultSetExtractor}相比，RowCallbackHandler对象通常是有状态的：它将结果状态保留在该对象内，以供以后检查。 
 * 有关用法示例，请参见{@link  RowCountCallbackHandler}。 
 *  <p>请考虑使用{@link  RowMapper}来代替，如果您需要每行精确地映射一个结果对象，则将它们组合成一个列表。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  JdbcTemplate 
 * @see  RowMapper 
 * @see  ResultSetExtractor 
 * @see  RowCountCallbackHandler
 */
@FunctionalInterface
public interface RowCallbackHandler {

	/**
	 * Implementations must implement this method to process each row of data
	 * in the ResultSet. This method should not call {@code next()} on
	 * the ResultSet; it is only supposed to extract values of the current row.
	 * <p>Exactly what the implementation chooses to do is up to it:
	 * A trivial implementation might simply count rows, while another
	 * implementation might build an XML document.
	 * @param rs the ResultSet to process (pre-initialized for the current row)
	 * @throws SQLException if an SQLException is encountered getting
	 * column values (that is, there's no need to catch SQLException)
	 */
	/**
	 * 实现必须实现此方法来处理ResultSet中的每一行数据。 
	 * 此方法不应在ResultSet上调用{@code  next（）}。 
	 * 它仅应提取当前行的值。 
	 *  <p>实现完全可以选择实现：一个简单的实现可能只对行进行计数，而另一个实现可能会构建XML文档。 
	 *  
	 * @param  rs要处理的ResultSet（针对当前行进行预初始化）
	 * @throws  SQLException如果遇到获取列值的SQLException（也就是说，不需要捕获SQLException）
	 */
	void processRow(ResultSet rs) throws SQLException;

}
