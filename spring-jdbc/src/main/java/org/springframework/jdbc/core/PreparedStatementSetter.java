/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * General callback interface used by the {@link JdbcTemplate} class.
 *
 * <p>This interface sets values on a {@link java.sql.PreparedStatement} provided
 * by the JdbcTemplate class, for each of a number of updates in a batch using the
 * same SQL. Implementations are responsible for setting any necessary parameters.
 * SQL with placeholders will already have been supplied.
 *
 * <p>It's easier to use this interface than {@link PreparedStatementCreator}:
 * The JdbcTemplate will create the PreparedStatement, with the callback
 * only being responsible for setting parameter values.
 *
 * <p>Implementations <i>do not</i> need to concern themselves with
 * SQLExceptions that may be thrown from operations they attempt.
 * The JdbcTemplate class will catch and handle SQLExceptions appropriately.
 *
 * @author Rod Johnson
 * @since March 2, 2003
 * @see JdbcTemplate#update(String, PreparedStatementSetter)
 * @see JdbcTemplate#query(String, PreparedStatementSetter, ResultSetExtractor)
 */
/**
 * {@link  JdbcTemplate}类使用的常规回调接口。 
 *  <p>此接口在JdbcTemplate类提供的{@link  java.sql.PreparedStatement}上为使用同一SQL的批处理中的多个更新中的每一个设置值。 
 * 实现负责设置任何必要的参数。 
 * 带占位符的SQL已经提供。 
 *  <p>使用此接口比{@link  PreparedStatementCreator}更容易：JdbcTemplate将创建PreparedStatement，而回调仅负责设置参数值。 
 *  <p>实现<i>不需要</ i>担心自己尝试执行的操作可能抛出的SQLException。 
 *  JdbcTemplate类将适当地捕获和处理SQLException。 
 *  @author  Rod Johnson @2003年3月2日起
 * @see  JdbcTemplate＃update（String，PreparedStatementSetter）
 * @see  JdbcTemplate＃query（String，PreparedStatementSetter，ResultSetExtractor）
 */
@FunctionalInterface
public interface PreparedStatementSetter {

	/**
	 * Set parameter values on the given PreparedStatement.
	 * @param ps the PreparedStatement to invoke setter methods on
	 * @throws SQLException if an SQLException is encountered
	 * (i.e. there is no need to catch SQLException)
	 */
	/**
	 * 在给定的PreparedStatement上设置参数值。 
	 *  
	 * @param  ps PreparedStatement在遇到SQLException的情况下在
	 * @throws  SQLException上调用setter方法（即，无需捕获SQLException）
	 */
	void setValues(PreparedStatement ps) throws SQLException;

}
