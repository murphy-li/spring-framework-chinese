/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.Connection;
import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Generic callback interface for code that operates on a JDBC Connection.
 * Allows to execute any number of operations on a single Connection,
 * using any type and number of Statements.
 *
 * <p>This is particularly useful for delegating to existing data access code
 * that expects a Connection to work on and throws SQLException. For newly
 * written code, it is strongly recommended to use JdbcTemplate's more specific
 * operations, for example a {@code query} or {@code update} variant.
 *
 * @author Juergen Hoeller
 * @since 1.1.3
 * @param <T> the result type
 * @see JdbcTemplate#execute(ConnectionCallback)
 * @see JdbcTemplate#query
 * @see JdbcTemplate#update
 */
/**
 * 用于在JDBC连接上运行的代码的通用回调接口。 
 * 允许使用任何类型和数量的语句在单个Connection上执行任何数量的操作。 
 *  <p>这对于委派现有的数据访问代码特别有用，该代码希望Connection可以继续工作并抛出SQLException。 
 * 对于新编写的代码，强烈建议使用JdbcTemplate的更具体的操作，例如{@code  query}或{@code  update}变体。 
 *  @author  Juergen Hoeller @since 1.1.3 
 * @param  <T>结果类型
 * @see  JdbcTemplate＃execute（ConnectionCallback）
 * @see  JdbcTemplate＃query 
 * @see  JdbcTemplate＃update
 */
@FunctionalInterface
public interface ConnectionCallback<T> {

	/**
	 * Gets called by {@code JdbcTemplate.execute} with an active JDBC
	 * Connection. Does not need to care about activating or closing the
	 * Connection, or handling transactions.
	 * <p>If called without a thread-bound JDBC transaction (initiated by
	 * DataSourceTransactionManager), the code will simply get executed on the
	 * JDBC connection with its transactional semantics. If JdbcTemplate is
	 * configured to use a JTA-aware DataSource, the JDBC Connection and thus
	 * the callback code will be transactional if a JTA transaction is active.
	 * <p>Allows for returning a result object created within the callback, i.e.
	 * a domain object or a collection of domain objects. Note that there's special
	 * support for single step actions: see {@code JdbcTemplate.queryForObject}
	 * etc. A thrown RuntimeException is treated as application exception:
	 * it gets propagated to the caller of the template.
	 * @param con active JDBC Connection
	 * @return a result object, or {@code null} if none
	 * @throws SQLException if thrown by a JDBC method, to be auto-converted
	 * to a DataAccessException by an SQLExceptionTranslator
	 * @throws DataAccessException in case of custom exceptions
	 * @see JdbcTemplate#queryForObject(String, Class)
	 * @see JdbcTemplate#queryForRowSet(String)
	 */
	/**
	 * 由具有活动JDBC连接的{@code  JdbcTemplate.execute}调用。 
	 * 无需关心激活或关闭连接或处理事务。 
	 *  <p>如果在没有线程绑定JDBC事务（由DataSourceTransactionManager发起）的情况下调用，则代码将简单地以其事务语义在JDBC连接上执行。 
	 * 如果将JdbcTemplate配置为使用支持JTA的数据源，则在JTA事务处于活动状态时，JDBC连接以及回调代码将是事务性的。 
	 *  <p>允许返回在回调中创建的结果对象，即域对象或域对象的集合。 
	 * 请注意，单步操作特别受支持：请参见{@code  JdbcTemplate.queryForObject}等。 
	 * 抛出的RuntimeException被视为应用程序异常：它被传播到模板的调用者。 
	 *  
	 * @param 激活JDBC连接
	 * @return 一个结果对象，如果没有，则{@code  null} 
	 * @throws 由JDBC方法抛出的SQLException，由SQLExceptionTranslator自动转换为DataAccessException 
	 * @throws 发生自定义异常时的DataAccessException 
	 * @see  JdbcTemplate＃queryForObject（String，Class）
	 * @see  JdbcTemplate＃queryForRowSet（String）
	 */
	@Nullable
	T doInConnection(Connection con) throws SQLException, DataAccessException;

}
