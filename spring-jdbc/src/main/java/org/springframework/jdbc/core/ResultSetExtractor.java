/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Callback interface used by {@link JdbcTemplate}'s query methods.
 * Implementations of this interface perform the actual work of extracting
 * results from a {@link java.sql.ResultSet}, but don't need to worry
 * about exception handling. {@link java.sql.SQLException SQLExceptions}
 * will be caught and handled by the calling JdbcTemplate.
 *
 * <p>This interface is mainly used within the JDBC framework itself.
 * A {@link RowMapper} is usually a simpler choice for ResultSet processing,
 * mapping one result object per row instead of one result object for
 * the entire ResultSet.
 *
 * <p>Note: In contrast to a {@link RowCallbackHandler}, a ResultSetExtractor
 * object is typically stateless and thus reusable, as long as it doesn't
 * access stateful resources (such as output streams when streaming LOB
 * contents) or keep result state within the object.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since April 24, 2003
 * @param <T> the result type
 * @see JdbcTemplate
 * @see RowCallbackHandler
 * @see RowMapper
 * @see org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor
 */
/**
 * {@link  JdbcTemplate}的查询方法使用的回调接口。 
 * 此接口的实现执行从{@link  java.sql.ResultSet}提取结果的实际工作，但无需担心异常处理。 
 *  {@link  java.sql.SQLException SQLExceptions}将由调用JdbcTemplate捕获和处理。 
 *  <p>此接口主要在JDBC框架本身内使用。 
 * 对于ResultSet处理，通常使用{@link  RowMapper}更为简单，每行映射一个结果对象，而不是整个ResultSet映射一个结果对象。 
 *  <p>注意：与{@link  RowCallbackHandler}相比，ResultSetExtractor对象通常是无状态的，因此可重用，只要它不访问有状态的资源（例如流式LOB内容时的输出流）或保持结果即可对象内的状态。 
 *  @author  Rod Johnson @author  Juergen Hoeller @自2003年4月24日以来
 * @param  <T>结果类型
 * @see  JdbcTemplate 
 * @see  RowCallbackHandler 
 * @see  RowMapper 
 * @see  org.springframework .jdbc.core.support.AbstractLobStreamingResultSetExtractor
 */
@FunctionalInterface
public interface ResultSetExtractor<T> {

	/**
	 * Implementations must implement this method to process the entire ResultSet.
	 * @param rs the ResultSet to extract data from. Implementations should
	 * not close this: it will be closed by the calling JdbcTemplate.
	 * @return an arbitrary result object, or {@code null} if none
	 * (the extractor will typically be stateful in the latter case).
	 * @throws SQLException if an SQLException is encountered getting column
	 * values or navigating (that is, there's no need to catch SQLException)
	 * @throws DataAccessException in case of custom exceptions
	 */
	/**
	 * 实现必须实现此方法来处理整个ResultSet。 
	 *  
	 * @param  rs从结果集中提取数据。 
	 * 实现不应关闭此窗口：它将由调用JdbcTemplate关闭。 
	 *  
	 * @return 任意结果对象，如果没有，则为{<@@code> null}（在后一种情况下提取器通常是有状态的）。 
	 *  
	 * @throws  SQLException如果遇到SQLException获取列值或进行导航（即，无需捕获SQLException）
	 * @throws  DataAccessException，如果发生自定义异常
	 */
	@Nullable
	T extractData(ResultSet rs) throws SQLException, DataAccessException;

}
