/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

/**
 * Extension of the {@link BatchPreparedStatementSetter} interface,
 * adding a batch exhaustion check.
 *
 * <p>This interface allows you to signal the end of a batch rather than
 * having to determine the exact batch size upfront. Batch size is still
 * being honored but it is now the maximum size of the batch.
 *
 * <p>The {@link #isBatchExhausted} method is called after each call to
 * {@link #setValues} to determine whether there were some values added,
 * or if the batch was determined to be complete and no additional values
 * were provided during the last call to {@code setValues}.
 *
 * <p>Consider extending the
 * {@link org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter}
 * base class instead of implementing this interface directly, using a single
 * {@code setValuesIfAvailable} callback method that checks for available
 * values and sets them, returning whether values have actually been provided.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.0
 * @see JdbcTemplate#batchUpdate(String, BatchPreparedStatementSetter)
 * @see org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter
 */
/**
 * 扩展{@link  BatchPreparedStatementSetter}接口，添加了批处理耗尽检查。 
 *  <p>此界面使您可以发出批次结束的信号，而不必事先确定确切的批次大小。 
 * 批次大小仍然可以使用，但是现在是该批次的最大大小。 
 *  <p>在每次调用{@link  #setValues}之后，将调用{@link  #isBatchExhausted}方法，以确定是否添加了一些值，或者该批处理是否已确定并且没有其他值在上次调用{@code  setValues}期间提供。 
 *  <p>考虑使用单个{@code  setValuesIfAvailable}回调方法（用于检查可用值和设置它们，返回是否实际提供了值。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 2.0起
 * @see  JdbcTemplate＃batchUpdate（String，BatchPreparedStatementSetter）
 */
public interface InterruptibleBatchPreparedStatementSetter extends BatchPreparedStatementSetter {

	/**
	 * Return whether the batch is complete, that is, whether there were no
	 * additional values added during the last {@code setValues} call.
	 * <p><b>NOTE:</b> If this method returns {@code true}, any parameters
	 * that might have been set during the last {@code setValues} call will
	 * be ignored! Make sure that you set a corresponding internal flag if you
	 * detect exhaustion <i>at the beginning</i> of your {@code setValues}
	 * implementation, letting this method return {@code true} based on the flag.
	 * @param i index of the statement we're issuing in the batch, starting from 0
	 * @return whether the batch is already exhausted
	 * @see #setValues
	 * @see org.springframework.jdbc.core.support.AbstractInterruptibleBatchPreparedStatementSetter#setValuesIfAvailable
	 */
	/**
	 * 返回批处理是否完成，即在上一次{@code  setValues}调用期间是否没有添加任何其他值。 
	 *  <p> <b>注意：</ b>如果此方法返回{@code  true}，则在上一次{@code  setValues}调用期间可能设置的任何参数都将被忽略！ 
	 * 如果在{@code  setValues}实现的开头</ i>检测到疲惫<i>，请确保设置相应的内部标志，并让该方法根据该标志返回{@code  true}。 
	 *  
	 * @param 我在批处理中发布的语句的索引，从0开始。 
	 * 
	 * @return 批处理是否已用尽
	 * @see  #setValues 
	 * @see  org.springframework.jdbc.core.support。 
	 *  AbstractInterruptibleBatchPreparedStatementSetter＃setValuesIfAvailable
	 */
	boolean isBatchExhausted(int i);

}
