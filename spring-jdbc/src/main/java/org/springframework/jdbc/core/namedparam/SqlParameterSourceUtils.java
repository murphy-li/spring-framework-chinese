/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.namedparam;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.jdbc.core.SqlParameterValue;
import org.springframework.lang.Nullable;

/**
 * Class that provides helper methods for the use of {@link SqlParameterSource},
 * in particular with {@link NamedParameterJdbcTemplate}.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.5
 */
/**
 * 提供用于使用{@link  SqlParameterSource}（尤其是{@link  NamedParameterJdbcTemplate}）辅助方法的类。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 2.5
 */
public abstract class SqlParameterSourceUtils {

	/**
	 * Create an array of {@link SqlParameterSource} objects populated with data
	 * from the values passed in (either a {@link Map} or a bean object).
	 * This will define what is included in a batch operation.
	 * @param candidates object array of objects containing the values to be used
	 * @return an array of {@link SqlParameterSource}
	 * @see MapSqlParameterSource
	 * @see BeanPropertySqlParameterSource
	 * @see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[])
	 */
	/**
	 * 创建一个{@link  SqlParameterSource}对象数组，其中填充了传入值（{@link  Map}或bean对象）中的数据。 
	 * 这将定义批处理操作中包括的内容。 
	 *  
	 * @param 候选对象数组，其中包含要使用的值
	 * @return  {{@link> SqlParameterSource}数组
	 * @see  MapSqlParameterSource 
	 * @see  BeanPropertySqlParameterSource 
	 * @see  NamedParameterJdbcTemplate＃batchUpdate（String，SqlParameterSource []）
	 */
	@SuppressWarnings("unchecked")
	public static SqlParameterSource[] createBatch(Object... candidates) {
		return createBatch(Arrays.asList(candidates));
	}

	/**
	 * Create an array of {@link SqlParameterSource} objects populated with data
	 * from the values passed in (either a {@link Map} or a bean object).
	 * This will define what is included in a batch operation.
	 * @param candidates collection of objects containing the values to be used
	 * @return an array of {@link SqlParameterSource}
	 * @since 5.0.2
	 * @see MapSqlParameterSource
	 * @see BeanPropertySqlParameterSource
	 * @see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[])
	 */
	/**
	 * 创建一个{@link  SqlParameterSource}对象数组，其中填充了传入值（{@link  Map}或bean对象）中的数据。 
	 * 这将定义批处理操作中包括的内容。 
	 *  
	 * @param 包含要使用的值的对象的候选集合
	 * @return  {@link  SqlParameterSource}数组@since 5.0.2 
	 * @see  MapSqlParameterSource 
	 * @see  BeanPropertySqlParameterSource 
	 * @see  NamedParameterJdbcTemplate＃batchUpdate （字符串，SqlParameterSource []）
	 */
	@SuppressWarnings("unchecked")
	public static SqlParameterSource[] createBatch(Collection<?> candidates) {
		SqlParameterSource[] batch = new SqlParameterSource[candidates.size()];
		int i = 0;
		for (Object candidate : candidates) {
			batch[i] = (candidate instanceof Map ? new MapSqlParameterSource((Map<String, ?>) candidate) :
					new BeanPropertySqlParameterSource(candidate));
			i++;
		}
		return batch;
	}

	/**
	 * Create an array of {@link MapSqlParameterSource} objects populated with data from
	 * the values passed in. This will define what is included in a batch operation.
	 * @param valueMaps array of {@link Map} instances containing the values to be used
	 * @return an array of {@link SqlParameterSource}
	 * @see MapSqlParameterSource
	 * @see NamedParameterJdbcTemplate#batchUpdate(String, Map[])
	 */
	/**
	 * 创建一个{@link  MapSqlParameterSource}对象的数组，该数组中填充了传入值中的数据。 
	 * 这将定义批处理操作中包括的内容。 
	 *  
	 * @param  {@link  Map}实例的valueMaps数组，其中包含要使用的值
	 * @return  {@link  SqlParameterSource}的数组
	 * @see  MapSqlParameterSource 
	 * @see  NamedParameterJdbcTemplate＃batchUpdate（String，地图[]）
	 */
	public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {
		SqlParameterSource[] batch = new SqlParameterSource[valueMaps.length];
		for (int i = 0; i < valueMaps.length; i++) {
			batch[i] = new MapSqlParameterSource(valueMaps[i]);
		}
		return batch;
	}

	/**
	 * Create a wrapped value if parameter has type information, plain object if not.
	 * @param source the source of parameter values and type information
	 * @param parameterName the name of the parameter
	 * @return the value object
	 */
	/**
	 * 如果参数具有类型信息，则创建一个包装值，否则，创建一个普通对象。 
	 *  
	 * @param 来源参数值和类型信息的来源
	 * @param  parameterName参数的名称
	 * @return 值对象
	 */
	@Nullable
	public static Object getTypedValue(SqlParameterSource source, String parameterName) {
		int sqlType = source.getSqlType(parameterName);
		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {
			if (source.getTypeName(parameterName) != null) {
				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName));
			}
			else {
				return new SqlParameterValue(sqlType, source.getValue(parameterName));
			}
		}
		else {
			return source.getValue(parameterName);
		}
	}

	/**
	 * Create a Map of case insensitive parameter names together with the original name.
	 * @param parameterSource the source of parameter names
	 * @return the Map that can be used for case insensitive matching of parameter names
	 */
	/**
	 * 创建一个不区分大小写的参数名称和原始名称的映射。 
	 *  
	 * @param  parameterSource参数名称的来源
	 * @return 可以用于参数名称不区分大小写的映射
	 */
	public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {
		Map<String, String> caseInsensitiveParameterNames = new HashMap<>();
		String[] paramNames = parameterSource.getParameterNames();
		if (paramNames != null) {
			for (String name : paramNames) {
				caseInsensitiveParameterNames.put(name.toLowerCase(), name);
			}
		}
		return caseInsensitiveParameterNames;
	}

}
