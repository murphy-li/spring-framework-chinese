/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.lang.Nullable;

/**
 * An interface used by {@link JdbcTemplate} for mapping rows of a
 * {@link java.sql.ResultSet} on a per-row basis. Implementations of this
 * interface perform the actual work of mapping each row to a result object,
 * but don't need to worry about exception handling.
 * {@link java.sql.SQLException SQLExceptions} will be caught and handled
 * by the calling JdbcTemplate.
 *
 * <p>Typically used either for {@link JdbcTemplate}'s query methods
 * or for out parameters of stored procedures. RowMapper objects are
 * typically stateless and thus reusable; they are an ideal choice for
 * implementing row-mapping logic in a single place.
 *
 * <p>Alternatively, consider subclassing
 * {@link org.springframework.jdbc.object.MappingSqlQuery} from the
 * {@code jdbc.object} package: Instead of working with separate
 * JdbcTemplate and RowMapper objects, you can build executable query
 * objects (containing row-mapping logic) in that style.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @param <T> the result type
 * @see JdbcTemplate
 * @see RowCallbackHandler
 * @see ResultSetExtractor
 * @see org.springframework.jdbc.object.MappingSqlQuery
 */
/**
 * {@link  JdbcTemplate}使用的接口，用于按行映射{@link  java.sql.ResultSet}的行。 
 * 此接口的实现执行将每一行映射到结果对象的实际工作，但无需担心异常处理。 
 *  {@link  java.sql.SQLException SQLExceptions}将由调用JdbcTemplate捕获和处理。 
 *  <p>通常用于{@link  JdbcTemplate}的查询方法或存储过程的out参数。 
 *  RowMapper对象通常是无状态的，因此可以重用； 
 * 它们是在单个位置实现行映射逻辑的理想选择。 
 *  <p>或者，考虑从{@code  jdbc.object}包中继承{@link  org.springframework.jdbc.object.MappingSqlQuery}的子类：您可以构建可执行查询，而不是使用单独的JdbcTemplate和RowMapper对象该样式的对象（包含行映射逻辑）。 
 *  @author  Thomas Risberg @author  Juergen Hoeller 
 * @param  <T>结果类型
 * @see  JdbcTemplate 
 * @see  RowCallbackHandler 
 * @see  ResultSetExtractor 
 * @see  org.springframework.jdbc.object.MappingSqlQuery
 */
@FunctionalInterface
public interface RowMapper<T> {

	/**
	 * Implementations must implement this method to map each row of data
	 * in the ResultSet. This method should not call {@code next()} on
	 * the ResultSet; it is only supposed to map values of the current row.
	 * @param rs the ResultSet to map (pre-initialized for the current row)
	 * @param rowNum the number of the current row
	 * @return the result object for the current row (may be {@code null})
	 * @throws SQLException if an SQLException is encountered getting
	 * column values (that is, there's no need to catch SQLException)
	 */
	/**
	 * 实现必须实现此方法以映射ResultSet中的每一行数据。 
	 * 此方法不应在ResultSet上调用{@code  next（）}。 
	 * 它仅应映射当前行的值。 
	 *  
	 * @param  rs要映射的ResultSet（为当前行预初始化）
	 * @param  rowNum当前行的编号
	 * @return 当前行的结果对象（可以为{@code  null} ）
	 * @throws  SQLException如果在获取列值时遇到SQLException（即，无需捕获SQLException）
	 */
	@Nullable
	T mapRow(ResultSet rs, int rowNum) throws SQLException;

}
