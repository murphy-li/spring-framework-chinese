/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import org.springframework.lang.Nullable;

/**
 * Object to represent an SQL parameter value, including parameter meta-data
 * such as the SQL type and the scale for numeric values.
 *
 * <p>Designed for use with {@link JdbcTemplate}'s operations that take an array of
 * argument values: Each such argument value may be a {@code SqlParameterValue},
 * indicating the SQL type (and optionally the scale) instead of letting the
 * template guess a default type. Note that this only applies to the operations with
 * a 'plain' argument array, not to the overloaded variants with an explicit type array.
 *
 * @author Juergen Hoeller
 * @since 2.0.5
 * @see java.sql.Types
 * @see JdbcTemplate#query(String, Object[], ResultSetExtractor)
 * @see JdbcTemplate#query(String, Object[], RowCallbackHandler)
 * @see JdbcTemplate#query(String, Object[], RowMapper)
 * @see JdbcTemplate#update(String, Object[])
 */
/**
 * 表示SQL参数值的对象，包括参数元数据，例如SQL类型和数值的小数位数。 
 *  <p>设计用于与{@link  JdbcTemplate}的操作使用参数值数组的操作：每个这样的参数值可以是{@code  SqlParameterValue}，指示SQL类型（以及可选的小数位数）而不是让模板猜测默认类型。 
 * 请注意，这仅适用于带有'plain'参数数组的操作，不适用于具有显式类型数组的重载变量。 
 *  @author  Juergen Hoeller @since 2.0.5 
 * @see  java.sql.Types 
 * @see  JdbcTemplate＃query（String，Object []，ResultSetExtractor）
 * @see  JdbcTemplate＃query（String，Object []， RowCallbackHandler）
 * @see  JdbcTemplate＃query（String，Object []，RowMapper）
 * @see  JdbcTemplate＃update（String，Object []）
 */
public class SqlParameterValue extends SqlParameter {

	@Nullable
	private final Object value;


	/**
	 * Create a new SqlParameterValue, supplying the SQL type.
	 * @param sqlType the SQL type of the parameter according to {@code java.sql.Types}
	 * @param value the value object
	 */
	/**
	 * 创建一个新的SqlParameterValue，提供SQL类型。 
	 *  
	 * @param  sqlType根据{@code  java.sql.Types}的参数的SQL类型
	 * @param 值value对象
	 */
	public SqlParameterValue(int sqlType, @Nullable Object value) {
		super(sqlType);
		this.value = value;
	}

	/**
	 * Create a new SqlParameterValue, supplying the SQL type.
	 * @param sqlType the SQL type of the parameter according to {@code java.sql.Types}
	 * @param typeName the type name of the parameter (optional)
	 * @param value the value object
	 */
	/**
	 * 创建一个新的SqlParameterValue，提供SQL类型。 
	 *  
	 * @param  sqlType根据{@code  java.sql.Types}的参数的SQL类型
	 * @param  typeName参数的类型名称（可选）
	 * @param 值value对象
	 */
	public SqlParameterValue(int sqlType, @Nullable String typeName, @Nullable Object value) {
		super(sqlType, typeName);
		this.value = value;
	}

	/**
	 * Create a new SqlParameterValue, supplying the SQL type.
	 * @param sqlType the SQL type of the parameter according to {@code java.sql.Types}
	 * @param scale the number of digits after the decimal point
	 * (for DECIMAL and NUMERIC types)
	 * @param value the value object
	 */
	/**
	 * 创建一个新的SqlParameterValue，提供SQL类型。 
	 *  
	 * @param  sqlType根据{@code  java.sql.Types}的参数的SQL类型。 
	 * 
	 * @param 缩放小数点后的位数（对于DECIMAL和NUMERIC类型）。 
	 * 价值对象
	 */
	public SqlParameterValue(int sqlType, int scale, @Nullable Object value) {
		super(sqlType, scale);
		this.value = value;
	}

	/**
	 * Create a new SqlParameterValue based on the given SqlParameter declaration.
	 * @param declaredParam the declared SqlParameter to define a value for
	 * @param value the value object
	 */
	/**
	 * 根据给定的SqlParameter声明创建一个新的SqlParameterValue。 
	 *  
	 * @param 声明的Parameter声明的SqlParameter为
	 * @param 的值定义值对象
	 */
	public SqlParameterValue(SqlParameter declaredParam, @Nullable Object value) {
		super(declaredParam);
		this.value = value;
	}


	/**
	 * Return the value object that this parameter value holds.
	 */
	/**
	 * 返回此参数值保存的值对象。 
	 * 
	 */
	@Nullable
	public Object getValue() {
		return this.value;
	}

}
