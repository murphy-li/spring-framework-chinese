/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.CallableStatement;
import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Generic callback interface for code that operates on a CallableStatement.
 * Allows to execute any number of operations on a single CallableStatement,
 * for example a single execute call or repeated execute calls with varying
 * parameters.
 *
 * <p>Used internally by JdbcTemplate, but also useful for application code.
 * Note that the passed-in CallableStatement can have been created by the
 * framework or by a custom CallableStatementCreator. However, the latter is
 * hardly ever necessary, as most custom callback actions will perform updates
 * in which case a standard CallableStatement is fine. Custom actions will
 * always set parameter values themselves, so that CallableStatementCreator
 * capability is not needed either.
 *
 * @author Juergen Hoeller
 * @since 16.03.2004
 * @param <T> the result type
 * @see JdbcTemplate#execute(String, CallableStatementCallback)
 * @see JdbcTemplate#execute(CallableStatementCreator, CallableStatementCallback)
 */
/**
 * 在CallableStatement上运行的代码的通用回调接口。 
 * 允许在单个CallableStatement上执行任意数量的操作，例如，单个执行调用或具有不同参数的重复执行调用。 
 *  <p>由JdbcTemplate内部使用，但对应用程序代码也很有用。 
 * 请注意，传入的CallableStatement可以由框架或自定义的CallableStatementCreator创建。 
 * 但是，几乎不需要后者，因为大多数自定义回调操作将执行更新，在这种情况下，标准CallableStatement就可以了。 
 * 自定义操作将始终始终自行设置参数值，因此也不需要CallableStatementCreator功能。 
 *  @author  Juergen Hoeller @2004年3月16日以来
 * @param  <T>结果类型
 * @see  JdbcTemplate＃execute（String，CallableStatementCallback）
 * @see  JdbcTemplate＃execute（CallableStatementCreator，CallableStatementCallback）
 */
@FunctionalInterface
public interface CallableStatementCallback<T> {

	/**
	 * Gets called by {@code JdbcTemplate.execute} with an active JDBC
	 * CallableStatement. Does not need to care about closing the Statement
	 * or the Connection, or about handling transactions: this will all be
	 * handled by Spring's JdbcTemplate.
	 *
	 * <p><b>NOTE:</b> Any ResultSets opened should be closed in finally blocks
	 * within the callback implementation. Spring will close the Statement
	 * object after the callback returned, but this does not necessarily imply
	 * that the ResultSet resources will be closed: the Statement objects might
	 * get pooled by the connection pool, with {@code close} calls only
	 * returning the object to the pool but not physically closing the resources.
	 *
	 * <p>If called without a thread-bound JDBC transaction (initiated by
	 * DataSourceTransactionManager), the code will simply get executed on the
	 * JDBC connection with its transactional semantics. If JdbcTemplate is
	 * configured to use a JTA-aware DataSource, the JDBC connection and thus
	 * the callback code will be transactional if a JTA transaction is active.
	 *
	 * <p>Allows for returning a result object created within the callback, i.e.
	 * a domain object or a collection of domain objects. A thrown RuntimeException
	 * is treated as application exception: it gets propagated to the caller of
	 * the template.
	 *
	 * @param cs active JDBC CallableStatement
	 * @return a result object, or {@code null} if none
	 * @throws SQLException if thrown by a JDBC method, to be auto-converted
	 * into a DataAccessException by an SQLExceptionTranslator
	 * @throws DataAccessException in case of custom exceptions
	 */
	/**
	 * 由{@code  JdbcTemplate.execute}通过活动的JDBC CallableStatement进行调用。 
	 * 无需关心关闭Statement或Connection或处理事务：这一切都将由Spring的JdbcTemplate处理。 
	 *  <p> <b>注意：</ b>应该在回调实现中的finally块中关闭所有打开的ResultSet。 
	 *  Spring将在回调返回后关闭Statement对象，但这并不一定意味着ResultSet资源将被关闭：Statement对象可能会被连接池池化，其中{@code  close}调用仅将对象返回到池，但没有实际关闭资源。 
	 *  <p>如果在没有线程绑定JDBC事务（由DataSourceTransactionManager发起）的情况下调用，则代码将简单地以其事务语义在JDBC连接上执行。 
	 * 如果将JdbcTemplate配置为使用支持JTA的数据源，则在JTA事务处于活动状态时，JDBC连接以及回调代码将是事务性的。 
	 *  <p>允许返回在回调中创建的结果对象，即域对象或域对象的集合。 
	 * 抛出的RuntimeException被视为应用程序异常：它被传播到模板的调用者。 
	 *  
	 * @param  cs活动的JDBC CallableStatement 
	 * @return 一个结果对象，如果没有，则为{@code  null} 
	 * @throws 如果由JDBC方法抛出，则将由SQLExceptionTranslator自动转换为DataAccessException的SQLException 
	 * @throws  DataAccessException，如果有自定义异常
	 */
	@Nullable
	T doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException;

}
