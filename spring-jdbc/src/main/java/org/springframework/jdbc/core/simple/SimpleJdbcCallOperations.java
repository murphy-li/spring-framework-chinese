/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.simple;

import java.util.Map;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

/**
 * Interface specifying the API for a Simple JDBC Call implemented by {@link SimpleJdbcCall}.
 * This interface is not often used directly, but provides the option to enhance testability,
 * as it can easily be mocked or stubbed.
 *
 * @author Thomas Risberg
 * @author Stephane Nicoll
 * @since 2.5
 */
/**
 * 指定由{@link  SimpleJdbcCall}实现的简单JDBC调用的API的接口。 
 * 该接口通常不直接使用，但是提供了增强可测试性的选项，因为它很容易被嘲笑或存根。 
 *  @author 托马斯·里斯伯格@author 斯蒂芬·尼科尔@since 2.5
 */
public interface SimpleJdbcCallOperations {

	/**
	 * Specify the procedure name to be used - this implies that we will be calling a stored procedure.
	 * @param procedureName the name of the stored procedure
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * 指定要使用的过程名称-这意味着我们将调用存储过程。 
	 *  
	 * @param  procedureName存储过程的名称
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withProcedureName(String procedureName);

	/**
	 * Specify the procedure name to be used - this implies that we will be calling a stored function.
	 * @param functionName the name of the stored function
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * 指定要使用的过程名称-这意味着我们将调用存储的函数。 
	 *  
	 * @param  functionName存储的函数的名称
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withFunctionName(String functionName);

	/**
	 * Optionally, specify the name of the schema that contins the stored procedure.
	 * @param schemaName the name of the schema
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * （可选）指定包含存储过程的架构的名称。 
	 *  
	 * @param 模式将模式名称命名为
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withSchemaName(String schemaName);

	/**
	 * Optionally, specify the name of the catalog that contins the stored procedure.
	 * <p>To provide consistency with the Oracle DatabaseMetaData, this is used to specify the
	 * package name if the procedure is declared as part of a package.
	 * @param catalogName the catalog or package name
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * （可选）指定继续存储过程的目录的名称。 
	 *  <p>为了提供与Oracle DatabaseMetaData的一致性，如果将该过程声明为软件包的一部分，则用于指定软件包名称。 
	 *  
	 * @param  catalogName名称目录或程序包名称
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withCatalogName(String catalogName);

	/**
	 * Indicates the procedure's return value should be included in the results returned.
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * 指示过程的返回值应包含在返回的结果中。 
	 *  
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withReturnValue();

	/**
	 * Specify one or more parameters if desired. These parameters will be supplemented with
	 * any parameter information retrieved from the database meta-data.
	 * <p>Note that only parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}
	 * will be used to provide input values. This is different from the {@code StoredProcedure}
	 * class which - for backwards compatibility reasons - allows input values to be provided
	 * for parameters declared as {@code SqlOutParameter}.
	 * @param sqlParameters the parameters to use
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * 如果需要，请指定一个或多个参数。 
	 * 这些参数将补充从数据库元数据中检索到的所有参数信息。 
	 *  <p>请注意，仅声明为{@code  SqlParameter}和{@code  SqlInOutParameter}的参数将用于提供输入值。 
	 * 这与{@code  StoredProcedure}类不同，出于向后兼容的原因，该类允许为声明为{@code  SqlOutParameter}的参数提供输入值。 
	 *  
	 * @param  sqlParameters使用此参数的参数
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations declareParameters(SqlParameter... sqlParameters);

	/** Not used yet. */
	/**
	 * 尚未使用。 
	 * 
	 */
	SimpleJdbcCallOperations useInParameterNames(String... inParameterNames);

	/**
	 * Used to specify when a ResultSet is returned by the stored procedure and you want it
	 * mapped by a {@link RowMapper}. The results will be returned using the parameter name
	 * specified. Multiple ResultSets must be declared in the correct order.
	 * <p>If the database you are using uses ref cursors then the name specified must match
	 * the name of the parameter declared for the procedure in the database.
	 * @param parameterName the name of the returned results and/or the name of the ref cursor parameter
	 * @param rowMapper the RowMapper implementation that will map the data returned for each row
	 * */
	/**
	 * 用于指定存储过程何时返回ResultSet以及您希望{{@link> RowMapper}映射它。 
	 * 将使用指定的参数名称返回结果。 
	 * 必须以正确的顺序声明多个ResultSet。 
	 *  <p>如果您正在使用的数据库使用引用游标，则指定的名称必须与为数据库中的过程声明的参数名称匹配。 
	 *  
	 * @param  parameterName返回结果的名称和/或ref游标参数的名称
	 * @param  rowMapper RowMapper实现，它将映射为每一行返回的数据
	 */
	SimpleJdbcCallOperations returningResultSet(String parameterName, RowMapper<?> rowMapper);

	/**
	 * Turn off any processing of parameter meta-data information obtained via JDBC.
	 * @return the instance of this SimpleJdbcCall
	 */
	/**
	 * 关闭通过JDBC获得的参数元数据信息的任何处理。 
	 *  
	 * @return 此SimpleJdbcCall的实例
	 */
	SimpleJdbcCallOperations withoutProcedureColumnMetaDataAccess();

	/**
	 * Indicates that parameters should be bound by name.
	 * @return the instance of this SimpleJdbcCall
	 * @since 4.2
	 */
	/**
	 * 指示参数应按名称绑定。 
	 *  
	 * @return 此SimpleJdbcCall的实例@始于4.2
	 */
	SimpleJdbcCallOperations withNamedBinding();


	/**
	 * Execute the stored function and return the results obtained as an Object of the
	 * specified return type.
	 * @param returnType the type of the value to return
	 * @param args optional array containing the in parameter values to be used in the call.
	 * Parameter values must be provided in the same order as the parameters are defined
	 * for the stored procedure.
	 */
	/**
	 * 执行存储的函数并返回作为指定返回类型的Object获得的结果。 
	 *  
	 * @param  returnType要返回的值的类型。 
	 * 
	 * @param  args可选数组，其中包含要在调用中使用的in参数值。 
	 * 必须以与为存储过程定义的参数相同的顺序提供参数值。 
	 * 
	 */
	<T> T executeFunction(Class<T> returnType, Object... args);

	/**
	 * Execute the stored function and return the results obtained as an Object of the
	 * specified return type.
	 * @param returnType the type of the value to return
	 * @param args a Map containing the parameter values to be used in the call
	 */
	/**
	 * 执行存储的函数并返回作为指定返回类型的Object获得的结果。 
	 *  
	 * @param  returnType要返回的值的类型
	 * @param  args包含要在调用中使用的参数值的Map
	 */
	<T> T executeFunction(Class<T> returnType, Map<String, ?> args);

	/**
	 * Execute the stored function and return the results obtained as an Object of the
	 * specified return type.
	 * @param returnType the type of the value to return
	 * @param args the MapSqlParameterSource containing the parameter values to be used in the call
	 */
	/**
	 * 执行存储的函数并返回作为指定返回类型的Object获得的结果。 
	 *  
	 * @param  returnType要返回的值的类型。 
	 * 
	 * @param  args MapSqlParameterSource包含要在调用中使用的参数值
	 */
	<T> T executeFunction(Class<T> returnType, SqlParameterSource args);

	/**
	 * Execute the stored procedure and return the single out parameter as an Object
	 * of the specified return type. In the case where there are multiple out parameters,
	 * the first one is returned and additional out parameters are ignored.
	 * @param returnType the type of the value to return
	 * @param args optional array containing the in parameter values to be used in the call.
	 * Parameter values must be provided in the same order as the parameters are defined for
	 * the stored procedure.
	 */
	/**
	 * 执行存储过程，并以指定返回类型的Object形式返回单个输出参数。 
	 * 在有多个out参数的情况下，将返回第一个参数，而忽略其他out参数。 
	 *  
	 * @param  returnType要返回的值的类型。 
	 * 
	 * @param  args可选数组，其中包含要在调用中使用的in参数值。 
	 * 必须以与为存储过程定义的参数相同的顺序提供参数值。 
	 * 
	 */
	<T> T executeObject(Class<T> returnType, Object... args);

	/**
	 * Execute the stored procedure and return the single out parameter as an Object
	 * of the specified return type. In the case where there are multiple out parameters,
	 * the first one is returned and additional out parameters are ignored.
	 * @param returnType the type of the value to return
	 * @param args a Map containing the parameter values to be used in the call
	 */
	/**
	 * 执行存储过程，并以指定返回类型的Object形式返回单个输出参数。 
	 * 在有多个out参数的情况下，将返回第一个参数，而忽略其他out参数。 
	 *  
	 * @param  returnType要返回的值的类型
	 * @param  args包含要在调用中使用的参数值的Map
	 */
	<T> T executeObject(Class<T> returnType, Map<String, ?> args);

	/**
	 * Execute the stored procedure and return the single out parameter as an Object
	 * of the specified return type. In the case where there are multiple out parameters,
	 * the first one is returned and additional out parameters are ignored.
	 * @param returnType the type of the value to return
	 * @param args the MapSqlParameterSource containing the parameter values to be used in the call
	 */
	/**
	 * 执行存储过程，并以指定返回类型的Object形式返回单个输出参数。 
	 * 在有多个out参数的情况下，将返回第一个参数，而忽略其他out参数。 
	 *  
	 * @param  returnType要返回的值的类型。 
	 * 
	 * @param  args MapSqlParameterSource包含要在调用中使用的参数值
	 */
	<T> T executeObject(Class<T> returnType, SqlParameterSource args);

	/**
	 * Execute the stored procedure and return a map of output params, keyed by name
	 * as in parameter declarations.
	 * @param args optional array containing the in parameter values to be used in the call.
	 * Parameter values must be provided in the same order as the parameters are defined for
	 * the stored procedure.
	 * @return a Map of output params
	 */
	/**
	 * 执行存储过程并返回输出参数的映射，该映射按名称声明，如参数声明中所述。 
	 *  
	 * @param  args可选数组，其中包含要在调用中使用的in参数值。 
	 * 必须以与为存储过程定义的参数相同的顺序提供参数值。 
	 *  
	 * @return 输出参数图
	 */
	Map<String, Object> execute(Object... args);

	/**
	 * Execute the stored procedure and return a map of output params, keyed by name
	 * as in parameter declarations.
	 * @param args a Map containing the parameter values to be used in the call
	 * @return a Map of output params
	 */
	/**
	 * 执行存储过程并返回输出参数的映射，该映射按名称声明，如参数声明中所述。 
	 *  
	 * @param  args包含要在调用中使用的参数值的Map 
	 * @return 输出参数的Map
	 */
	Map<String, Object> execute(Map<String, ?> args);

	/**
	 * Execute the stored procedure and return a map of output params, keyed by name
	 * as in parameter declarations.
	 * @param args the SqlParameterSource containing the parameter values to be used in the call
	 * @return a Map of output params
	 */
	/**
	 * 执行存储过程并返回输出参数的映射，该映射按名称声明，如参数声明中所述。 
	 *  
	 * @param  args SqlParameterSource包含要在调用中使用的参数值
	 * @return 输出参数的映射
	 */
	Map<String, Object> execute(SqlParameterSource args);

}
