/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Map;

/**
 * Implement this interface when parameters need to be customized based
 * on the connection. We might need to do this to make use of proprietary
 * features, available only with a specific Connection type.
 *
 * @author Rod Johnson
 * @author Thomas Risberg
 * @see CallableStatementCreatorFactory#newCallableStatementCreator(ParameterMapper)
 * @see org.springframework.jdbc.object.StoredProcedure#execute(ParameterMapper)
 */
/**
 * 需要根据连接自定义参数时，请实现此接口。 
 * 我们可能需要这样做以利用专有功能，这些专有功能仅在特定的Connection类型中可用。 
 *  @author  Rod Johnson @author  Thomas Risberg 
 * @see  CallableStatementCreatorFactory＃newCallableStatementCreator（ParameterMapper）
 * @see  org.springframework.jdbc.object.StoredProcedure＃execute（ParameterMapper）
 */
@FunctionalInterface
public interface ParameterMapper {

	/**
	 * Create a Map of input parameters, keyed by name.
	 * @param con a JDBC connection. This is useful (and the purpose of this interface)
	 * if we need to do something RDBMS-specific with a proprietary Connection
	 * implementation class. This class conceals such proprietary details. However,
	 * it is best to avoid using such proprietary RDBMS features if possible.
	 * @return a Map of input parameters, keyed by name (never {@code null})
	 * @throws SQLException if an SQLException is encountered setting
	 * parameter values (that is, there's no need to catch SQLException)
	 */
	/**
	 * 创建一个输入参数映射，按名称键。 
	 *  
	 * @param 建立JDBC连接。 
	 * 如果我们需要使用专有的Connection实现类来执行特定于RDBMS的操作，则这很有用（以及该接口的用途）。 
	 * 此类隐藏了此类专有细节。 
	 * 但是，最好尽可能避免使用此类专有的RDBMS功能。 
	 *  
	 * @return 输入参数的映射，按名称键输入（永不{<@@code> null}）
	 * @throws 如果遇到设置参数值的SQLException，则抛出SQLException（即，无需捕获SQLException）
	 */
	Map<String, ?> createMap(Connection con) throws SQLException;

}
