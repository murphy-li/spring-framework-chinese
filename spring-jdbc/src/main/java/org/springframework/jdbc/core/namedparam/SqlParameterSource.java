/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.namedparam;

import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.lang.Nullable;

/**
 * Interface that defines common functionality for objects that can
 * offer parameter values for named SQL parameters, serving as argument
 * for {@link NamedParameterJdbcTemplate} operations.
 *
 * <p>This interface allows for the specification of SQL type in addition
 * to parameter values. All parameter values and types are identified by
 * specifying the name of the parameter.
 *
 * <p>Intended to wrap various implementations like a Map or a JavaBean
 * with a consistent interface.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.0
 * @see NamedParameterJdbcOperations
 * @see NamedParameterJdbcTemplate
 * @see MapSqlParameterSource
 * @see BeanPropertySqlParameterSource
 */
/**
 * 定义对象通用功能的接口，这些对象可以提供命名SQL参数的参数值，并用作{@link  NamedParameterJdbcTemplate}操作的参数。 
 *  <p>除了参数值之外，此接口还允许指定SQL类型。 
 * 通过指定参数名称来标识所有参数值和类型。 
 *  <p>旨在包装具有一致接口的各种实现，例如Map或JavaBean。 
 *  @author  Thomas Risberg @author  Juergen Hoeller @since 2.0起
 * @see  NamedParameterJdbcOperations 
 * @see  NamedParameterJdbcTemplate 
 * @see  MapSqlParameterSource 
 * @see  BeanPropertySqlParameterSource
 */
public interface SqlParameterSource {

	/**
	 * Constant that indicates an unknown (or unspecified) SQL type.
	 * To be returned from {@code getType} when no specific SQL type known.
	 * @see #getSqlType
	 * @see java.sql.Types
	 */
	/**
	 * 指示未知（或未指定）SQL类型的常量。 
	 * 当没有特定的SQL类型已知时，从{@code  getType}返回。 
	 *  
	 * @see  #getSqlType 
	 * @see  java.sql.Types
	 */
	int TYPE_UNKNOWN = JdbcUtils.TYPE_UNKNOWN;


	/**
	 * Determine whether there is a value for the specified named parameter.
	 * @param paramName the name of the parameter
	 * @return whether there is a value defined
	 */
	/**
	 * 确定指定的命名参数是否存在值。 
	 *  
	 * @param  paramName参数的名称
	 * @return 是否定义了值
	 */
	boolean hasValue(String paramName);

	/**
	 * Return the parameter value for the requested named parameter.
	 * @param paramName the name of the parameter
	 * @return the value of the specified parameter
	 * @throws IllegalArgumentException if there is no value for the requested parameter
	 */
	/**
	 * 返回所请求的命名参数的参数值。 
	 *  
	 * @param  paramName参数的名称
	 * @return 指定参数的值
	 * @throws  IllegalArgumentException如果所请求的参数没有值
	 */
	@Nullable
	Object getValue(String paramName) throws IllegalArgumentException;

	/**
	 * Determine the SQL type for the specified named parameter.
	 * @param paramName the name of the parameter
	 * @return the SQL type of the specified parameter,
	 * or {@code TYPE_UNKNOWN} if not known
	 * @see #TYPE_UNKNOWN
	 */
	/**
	 * 确定指定的命名参数的SQL类型。 
	 *  
	 * @param  paramName参数的名称
	 * @return 指定参数的SQL类型； 
	 * 如果未知，则为{@code  TYPE_UNKNOWN} 
	 * @see  #TYPE_UNKNOWN
	 */
	default int getSqlType(String paramName) {
		return TYPE_UNKNOWN;
	}

	/**
	 * Determine the type name for the specified named parameter.
	 * @param paramName the name of the parameter
	 * @return the type name of the specified parameter,
	 * or {@code null} if not known
	 */
	/**
	 * 确定指定命名参数的类型名称。 
	 *  
	 * @param  paramName参数名称
	 * @return 指定参数的类型名称； 
	 * 如果未知，则为{@code  null}
	 */
	@Nullable
	default String getTypeName(String paramName) {
		return null;
	}

	/**
	 * Enumerate all available parameter names if possible.
	 * <p>This is an optional operation, primarily for use with
	 * {@link org.springframework.jdbc.core.simple.SimpleJdbcInsert}
	 * and {@link org.springframework.jdbc.core.simple.SimpleJdbcCall}.
	 * @return the array of parameter names, or {@code null} if not determinable
	 * @since 5.0.3
	 * @see SqlParameterSourceUtils#extractCaseInsensitiveParameterNames
	 */
	/**
	 * 尽可能枚举所有可用的参数名称。 
	 *  <p>这是一个可选操作，主要与{@link  org.springframework.jdbc.core.simple.SimpleJdbcInsert}和{@link  org.springframework.jdbc.core.simple.SimpleJdbcCall}一起使用。 
	 *  
	 * @return 参数名称的数组，如果无法确定，则为{@code  null} @5.0.3起
	 * @see  SqlParameterSourceUtils＃extractCaseInsensitiveParameterNames
	 */
	@Nullable
	default String[] getParameterNames() {
		return null;
	}

}
