/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.support;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.jdbc.LobRetrievalFailureException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.lang.Nullable;

/**
 * Abstract ResultSetExtractor implementation that assumes streaming of LOB data.
 * Typically used as inner class, with access to surrounding method arguments.
 *
 * <p>Delegates to the {@code streamData} template method for streaming LOB
 * content to some OutputStream, typically using a LobHandler. Converts an
 * IOException thrown during streaming to a LobRetrievalFailureException.
 *
 * <p>A usage example with JdbcTemplate:
 *
 * <pre class="code">JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);  // reusable object
 * final LobHandler lobHandler = new DefaultLobHandler();  // reusable object
 *
 * jdbcTemplate.query(
 *		 "SELECT content FROM imagedb WHERE image_name=?", new Object[] {name},
 *		 new AbstractLobStreamingResultSetExtractor() {
 *			 public void streamData(ResultSet rs) throws SQLException, IOException {
 *				 FileCopyUtils.copy(lobHandler.getBlobAsBinaryStream(rs, 1), contentStream);
 *             }
 *         }
 * );</pre>
 *
 * @author Juergen Hoeller
 * @since 1.0.2
 * @param <T> the result type
 * @see org.springframework.jdbc.support.lob.LobHandler
 * @see org.springframework.jdbc.LobRetrievalFailureException
 */
/**
 * 假定流式传输LOB数据的抽象ResultSetExtractor实现。 
 * 通常用作内部类，可以访问周围的方法参数。 
 *  <p>代表{@code  streamData}模板方法，用于通常使用LobHandler将LOB内容流式传输到某些OutputStream。 
 * 将流期间抛出的IOException转换为LobRetrievalFailureException。 
 *  <p>带有JdbcTemplate的用法示例：<pre class ="code"> JdbcTemplate jdbcTemplate = new JdbcTemplate（dataSource）; //可重用的对象final LobHandler lobHandler = new DefaultLobHandler（）; //可重复使用的对象jdbcTemplate.query（"从imagedb中选择内容，其中image_name =？"，new Object [] {name}，new AbstractLobStreamingResultSetExtractor（）{public void streamData（ResultSet rs）引发SQLException，IOException {FileCopyUtils.copy（lobHandler。 
 *  getBlobAsBinaryStream（rs，1），contentStream）;}}）; </ pre> @author  Juergen Hoeller @since 1.0.2 
 * @param  <T>结果类型
 * @see  org.springframework.jdbc.support .lob.LobHandler 
 * @see  org.springframework.jdbc.LobRetrievalFailureException
 */
public abstract class AbstractLobStreamingResultSetExtractor<T> implements ResultSetExtractor<T> {

	/**
	 * Delegates to handleNoRowFound, handleMultipleRowsFound and streamData,
	 * according to the ResultSet state. Converts an IOException thrown by
	 * streamData to a LobRetrievalFailureException.
	 * @see #handleNoRowFound
	 * @see #handleMultipleRowsFound
	 * @see #streamData
	 * @see org.springframework.jdbc.LobRetrievalFailureException
	 */
	/**
	 * 根据ResultSet状态，委托handleNoRowFound，handleMultipleRowsFound和streamData。 
	 * 将streamData抛出的IOException转换为LobRetrievalFailureException。 
	 *  
	 * @see  #handleNoRowFound 
	 * @see  #handleMultipleRowsFound 
	 * @see  #streamData 
	 * @see  org.springframework.jdbc.LobRetrievalFailureException
	 */
	@Override
	@Nullable
	public final T extractData(ResultSet rs) throws SQLException, DataAccessException {
		if (!rs.next()) {
			handleNoRowFound();
		}
		else {
			try {
				streamData(rs);
				if (rs.next()) {
					handleMultipleRowsFound();
				}
			}
			catch (IOException ex) {
				throw new LobRetrievalFailureException("Could not stream LOB content", ex);
			}
		}
		return null;
	}

	/**
	 * Handle the case where the ResultSet does not contain a row.
	 * @throws DataAccessException a corresponding exception,
	 * by default an EmptyResultDataAccessException
	 * @see org.springframework.dao.EmptyResultDataAccessException
	 */
	/**
	 * 处理ResultSet不包含行的情况。 
	 *  
	 * @throws  DataAccessException对应的异常，默认为EmptyResultDataAccessException 
	 * @see  org.springframework.dao.EmptyResultDataAccessException
	 */
	protected void handleNoRowFound() throws DataAccessException {
		throw new EmptyResultDataAccessException(
				"LobStreamingResultSetExtractor did not find row in database", 1);
	}

	/**
	 * Handle the case where the ResultSet contains multiple rows.
	 * @throws DataAccessException a corresponding exception,
	 * by default an IncorrectResultSizeDataAccessException
	 * @see org.springframework.dao.IncorrectResultSizeDataAccessException
	 */
	/**
	 * 处理ResultSet包含多行的情况。 
	 *  
	 * @throws  DataAccessException对应的异常，默认为IncorrectResultSizeDataAccessException 
	 * @see  org.springframework.dao.IncorrectResultSizeDataAccessException
	 */
	protected void handleMultipleRowsFound() throws DataAccessException {
		throw new IncorrectResultSizeDataAccessException(
				"LobStreamingResultSetExtractor found multiple rows in database", 1);
	}

	/**
	 * Stream LOB content from the given ResultSet to some OutputStream.
	 * <p>Typically used as inner class, with access to surrounding method arguments
	 * and to a LobHandler instance variable of the surrounding class.
	 * @param rs the ResultSet to take the LOB content from
	 * @throws SQLException if thrown by JDBC methods
	 * @throws IOException if thrown by stream access methods
	 * @throws DataAccessException in case of custom exceptions
	 * @see org.springframework.jdbc.support.lob.LobHandler#getBlobAsBinaryStream
	 * @see org.springframework.util.FileCopyUtils
	 */
	/**
	 * 将LOB内容从给定的ResultSet流传输到某些OutputStream。 
	 *  <p>通常用作内部类，可以访问周围的方法参数和周围类的LobHandler实例变量。 
	 *  
	 * @param 将ResultSet从JDBC方法中抛出的
	 * @throws  SQLException中获取LOB内容
	 * @throws  IOException如果被流访问方法
	 * @throws 抛出的DataAccessException则发生自定义异常
	 * @see  org。 
	 *  springframework.jdbc.support.lob.LobHandler＃getBlobAsBinaryStream 
	 * @see  org.springframework.util.FileCopyUtils
	 */
	protected abstract void streamData(ResultSet rs) throws SQLException, IOException, DataAccessException;

}
