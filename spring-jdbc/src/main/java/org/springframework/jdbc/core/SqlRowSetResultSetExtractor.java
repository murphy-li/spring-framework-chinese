/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.ResultSet;
import java.sql.SQLException;

import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.RowSetFactory;
import javax.sql.rowset.RowSetProvider;

import org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet;
import org.springframework.jdbc.support.rowset.SqlRowSet;

/**
 * {@link ResultSetExtractor} implementation that returns a Spring {@link SqlRowSet}
 * representation for each given {@link ResultSet}.
 *
 * <p>The default implementation uses a standard JDBC CachedRowSet underneath.
 *
 * @author Juergen Hoeller
 * @since 1.2
 * @see #newCachedRowSet
 * @see org.springframework.jdbc.support.rowset.SqlRowSet
 * @see JdbcTemplate#queryForRowSet(String)
 * @see javax.sql.rowset.CachedRowSet
 */
/**
 * {@link  ResultSetExtractor}实现为每个给定的{@link  ResultSet}返回一个Spring {@link  SqlRowSet}表示形式。 
 *  <p>默认实现使用下面的标准JDBC CachedRowSet。 
 *  @author  Juergen Hoeller @始于1.2 CachedRowSet
 */
public class SqlRowSetResultSetExtractor implements ResultSetExtractor<SqlRowSet> {

	private static final RowSetFactory rowSetFactory;

	static {
		try {
			rowSetFactory = RowSetProvider.newFactory();
		}
		catch (SQLException ex) {
			throw new IllegalStateException("Cannot create RowSetFactory through RowSetProvider", ex);
		}
	}


	@Override
	public SqlRowSet extractData(ResultSet rs) throws SQLException {
		return createSqlRowSet(rs);
	}

	/**
	 * Create a {@link SqlRowSet} that wraps the given {@link ResultSet},
	 * representing its data in a disconnected fashion.
	 * <p>This implementation creates a Spring {@link ResultSetWrappingSqlRowSet}
	 * instance that wraps a standard JDBC {@link CachedRowSet} instance.
	 * Can be overridden to use a different implementation.
	 * @param rs the original ResultSet (connected)
	 * @return the disconnected SqlRowSet
	 * @throws SQLException if thrown by JDBC methods
	 * @see #newCachedRowSet()
	 * @see org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet
	 */
	/**
	 * 创建一个{@link  SqlRowSet}，包装给定的{@link  ResultSet}，以断开连接的方式表示其数据。 
	 *  <p>此实现创建一个Spring {@link  ResultSetWrappingSqlRowSet}实例，该实例包装标准的JDBC {@link  CachedRowSet}实例。 
	 * 可以重写以使用其他实现。 
	 *  
	 * @param 为原始ResultSet（已连接）
	 * @return 断开连接的SqlRowSet 
	 * @throws 如果由JDBC方法抛出，则抛出SQLException 
	 * @see  #newCachedRowSet（）
	 * @see  org.springframework.jdbc.support.rowset。 
	 *  ResultSetWrappingSqlRowSet
	 */
	protected SqlRowSet createSqlRowSet(ResultSet rs) throws SQLException {
		CachedRowSet rowSet = newCachedRowSet();
		rowSet.populate(rs);
		return new ResultSetWrappingSqlRowSet(rowSet);
	}

	/**
	 * Create a new {@link CachedRowSet} instance, to be populated by
	 * the {@code createSqlRowSet} implementation.
	 * <p>The default implementation uses JDBC 4.1's {@link RowSetFactory}.
	 * @return a new CachedRowSet instance
	 * @throws SQLException if thrown by JDBC methods
	 * @see #createSqlRowSet
	 * @see RowSetProvider#newFactory()
	 * @see RowSetFactory#createCachedRowSet()
	 */
	/**
	 * 创建一个新的{@link  CachedRowSet}实例，该实例由{@code  createSqlRowSet}实现填充。 
	 *  <p>默认实现使用JDBC 4.1的{@link  RowSetFactory}。 
	 *  
	 * @return 一个新的CachedRowSet实例
	 * @throws 如果由JDBC方法抛出，则抛出SQLException 
	 * @see  #createSqlRowSet 
	 * @see  RowSetProvider＃newFactory（）
	 * @see  RowSetFactory＃createCachedRowSet（）
	 */
	protected CachedRowSet newCachedRowSet() throws SQLException {
		return rowSetFactory.createCachedRowSet();
	}

}
