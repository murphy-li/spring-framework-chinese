/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

import java.sql.ResultSet;

/**
 * Subclass of {@link SqlOutParameter} to represent an INOUT parameter.
 * Will return {@code true} for SqlParameter's {@link #isInputValueProvided}
 * test, in contrast to a standard SqlOutParameter.
 *
 * <p>Output parameters - like all stored procedure parameters - must have names.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * {@link  SqlOutParameter}的子类，代表一个INOUT参数。 
 * 与标准SqlOutParameter相反，它将为SqlParameter的{@link  #isInputValueProvided}测试返回{@code  true}。 
 *  <p>输出参数-与所有存储过程参数一样-必须具有名称。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 2.0
 */
public class SqlInOutParameter extends SqlOutParameter {

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称。 
	 * 
	 * @param  sqlType根据{@code  java.sql.Types}设置参数SQL类型。 
	 * 
	 */
	public SqlInOutParameter(String name, int sqlType) {
		super(name, sqlType);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param scale the number of digits after the decimal point
	 * (for DECIMAL and NUMERIC types)
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称。 
	 * 
	 * @param  sqlType根据{@code  java.sql.Types} 
	 * @param 缩放参数位数，然后按{小数点（对于DECIMAL和NUMERIC类型）
	 */
	public SqlInOutParameter(String name, int sqlType, int scale) {
		super(name, sqlType, scale);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param typeName the type name of the parameter (optional)
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称
	 * @param  sqlType根据{@code  java.sql.Types}的参数SQL类型
	 * @param  typeName参数的类型名称（可选的）
	 */
	public SqlInOutParameter(String name, int sqlType, String typeName) {
		super(name, sqlType, typeName);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param typeName the type name of the parameter (optional)
	 * @param sqlReturnType custom value handler for complex type (optional)
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称
	 * @param  sqlType根据{@code  java.sql.Types}的参数SQL类型
	 * @param  typeName参数的类型名称（可选）
	 * @param 复杂类型的sqlReturnType自定义值处理程序（可选）
	 */
	public SqlInOutParameter(String name, int sqlType, String typeName, SqlReturnType sqlReturnType) {
		super(name, sqlType, typeName, sqlReturnType);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param rse the {@link ResultSetExtractor} to use for parsing the {@link ResultSet}
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称
	 * @param  sqlType根据{@code  java.sql.Types}的参数SQL类型
	 * @param  rse {@link  ResultSetExtractor}用于解析{@link  ResultSet}
	 */
	public SqlInOutParameter(String name, int sqlType, ResultSetExtractor<?> rse) {
		super(name, sqlType, rse);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param rch the {@link RowCallbackHandler} to use for parsing the {@link ResultSet}
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称。 
	 * 
	 * @param  sqlType根据{@code  java.sql.Types}的参数SQL类型。 
	 * 
	 * @param  rch {@link  RowCallbackHandler}用于解析{@link  ResultSet}
	 */
	public SqlInOutParameter(String name, int sqlType, RowCallbackHandler rch) {
		super(name, sqlType, rch);
	}

	/**
	 * Create a new SqlInOutParameter.
	 * @param name name of the parameter, as used in input and output maps
	 * @param sqlType the parameter SQL type according to {@code java.sql.Types}
	 * @param rm the {@link RowMapper} to use for parsing the {@link ResultSet}
	 */
	/**
	 * 创建一个新的SqlInOutParameter。 
	 *  
	 * @param 名称输入和输出映射中使用的参数名称
	 * @param  sqlType根据{@code  java.sql.Types}的参数SQL类型
	 * @param  rm {@link  RowMapper}用于解析{@link  ResultSet}
	 */
	public SqlInOutParameter(String name, int sqlType, RowMapper<?> rm) {
		super(name, sqlType, rm);
	}


	/**
	 * This implementation always returns {@code true}.
	 */
	/**
	 * 此实现始终返回{@code  true}。 
	 * 
	 */
	@Override
	public boolean isInputValueProvided() {
		return true;
	}

}
