/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core;

/**
 * Represents a returned {@link java.sql.ResultSet} from a stored procedure call.
 *
 * <p>A {@link ResultSetExtractor}, {@link RowCallbackHandler} or {@link RowMapper}
 * must be provided to handle any returned rows.
 *
 * <p>Returned {@link java.sql.ResultSet ResultSets} - like all stored procedure
 * parameters - must have names.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 */
/**
 * 表示从存储过程调用返回的{@link  java.sql.ResultSet}。 
 *  <p>必须提供{@link  ResultSetExtractor}，{<@link> RowCallbackHandler}或{@link  RowMapper}来处理所有返回的行。 
 * 与所有存储过程参数一样，<p>返回的{@link  java.sql.ResultSet ResultSets}必须具有名称。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller
 */
public class SqlReturnResultSet extends ResultSetSupportingSqlParameter {

	/**
	 * Create a new instance of the {@link SqlReturnResultSet} class.
	 * @param name name of the parameter, as used in input and output maps
	 * @param extractor the {@link ResultSetExtractor} to use for parsing the {@link java.sql.ResultSet}
	 */
	/**
	 * 创建{@link  SqlReturnResultSet}类的新实例。 
	 *  
	 * @param 名称在输入和输出映射中使用的参数名称
	 * @param 提取器{{@link> ResultSetExtractor}用于解析{@link  java.sql.ResultSet}
	 */
	public SqlReturnResultSet(String name, ResultSetExtractor<?> extractor) {
		super(name, 0, extractor);
	}

	/**
	 * Create a new instance of the {@link SqlReturnResultSet} class.
	 * @param name name of the parameter, as used in input and output maps
	 * @param handler the {@link RowCallbackHandler} to use for parsing the {@link java.sql.ResultSet}
	 */
	/**
	 * 创建{@link  SqlReturnResultSet}类的新实例。 
	 *  
	 * @param 名称在输入和输出映射中使用的参数名称。 
	 * 
	 * @param 处理程序{{@link> RowCallbackHandler}用来解析{@link  java.sql.ResultSet}
	 */
	public SqlReturnResultSet(String name, RowCallbackHandler handler) {
		super(name, 0, handler);
	}

	/**
	 * Create a new instance of the {@link SqlReturnResultSet} class.
	 * @param name name of the parameter, as used in input and output maps
	 * @param mapper the {@link RowMapper} to use for parsing the {@link java.sql.ResultSet}
	 */
	/**
	 * 创建{@link  SqlReturnResultSet}类的新实例。 
	 *  
	 * @param 名称在输入和输出映射中使用的参数名称。 
	 * 
	 * @param 映射器{@link  RowMapper}用来解析{@link  java.sql.ResultSet}
	 */
	public SqlReturnResultSet(String name, RowMapper<?> mapper) {
		super(name, 0, mapper);
	}


	/**
	 * This implementation always returns {@code true}.
	 */
	/**
	 * 此实现始终返回{@code  true}。 
	 * 
	 */
	@Override
	public boolean isResultsParameter() {
		return true;
	}

}
