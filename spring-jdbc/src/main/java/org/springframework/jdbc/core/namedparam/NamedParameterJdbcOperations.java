/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.core.namedparam;

import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.lang.Nullable;

/**
 * Interface specifying a basic set of JDBC operations allowing the use
 * of named parameters rather than the traditional '?' placeholders.
 *
 * <p>This is an alternative to the classic
 * {@link org.springframework.jdbc.core.JdbcOperations} interface,
 * implemented by {@link NamedParameterJdbcTemplate}. This interface is not
 * often used directly, but provides a useful option to enhance testability,
 * as it can easily be mocked or stubbed.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 2.0
 * @see NamedParameterJdbcTemplate
 * @see org.springframework.jdbc.core.JdbcOperations
 */
/**
 * 该接口指定一组基本的JDBC操作，允许使用命名参数而不是传统的"？"占位符。 
 *  <p>这是由{@link  NamedParameterJdbcTemplate}实现的经典{@link  org.springframework.jdbc.core.JdbcOperations}接口的替代方法。 
 * 该接口通常不直接使用，但是提供了一个有用的选项来增强可测试性，因为它很容易被模拟或存根。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 2.0起
 * @see  NamedParameterJdbcTemplate 
 * @see  org.springframework.jdbc.core.JdbcOperations
 */
public interface NamedParameterJdbcOperations {

	/**
	 * Expose the classic Spring JdbcTemplate to allow invocation of
	 * classic JDBC operations.
	 */
	/**
	 * 公开经典的Spring JdbcTemplate以允许经典JDBC操作的调用。 
	 * 
	 */
	JdbcOperations getJdbcOperations();


	/**
	 * Execute a JDBC data access operation, implemented as callback action
	 * working on a JDBC PreparedStatement. This allows for implementing arbitrary
	 * data access operations on a single Statement, within Spring's managed
	 * JDBC environment: that is, participating in Spring-managed transactions
	 * and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
	 * <p>The callback action can return a result object, for example a
	 * domain object or a collection of domain objects.
	 * @param sql the SQL to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param action callback object that specifies the action
	 * @return a result object returned by the action, or {@code null}
	 * @throws DataAccessException if there is any problem
	 */
	/**
	 * 执行JDBC数据访问操作，该操作实现为对JDBC PreparedStatement进行的回调操作。 
	 * 这允许在Spring的托管JDBC环境中的单个Statement上实现任意数据访问操作：也就是说，参与Spring托管的事务并将JDBC SQLExceptions转换为Spring的DataAccessException层次结构。 
	 *  <p>回调操作可以返回结果对象，例如域对象或域对象的集合。 
	 *  
	 * @param  sql要执行的
	 * @param  paramSource参数容器，以绑定到查询
	 * @param 操作回调对象，该对象指定操作
	 * @return 操作返回的结果对象，或{<@code > null} 
	 * @throws  DataAccessException如果存在任何问题
	 */
	@Nullable
	<T> T execute(String sql, SqlParameterSource paramSource, PreparedStatementCallback<T> action)
			throws DataAccessException;

	/**
	 * Execute a JDBC data access operation, implemented as callback action
	 * working on a JDBC PreparedStatement. This allows for implementing arbitrary
	 * data access operations on a single Statement, within Spring's managed
	 * JDBC environment: that is, participating in Spring-managed transactions
	 * and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
	 * <p>The callback action can return a result object, for example a
	 * domain object or a collection of domain objects.
	 * @param sql the SQL to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param action callback object that specifies the action
	 * @return a result object returned by the action, or {@code null}
	 * @throws DataAccessException if there is any problem
	 */
	/**
	 * 执行JDBC数据访问操作，该操作实现为对JDBC PreparedStatement进行的回调操作。 
	 * 这允许在Spring的托管JDBC环境中的单个Statement上实现任意数据访问操作：也就是说，参与Spring托管的事务并将JDBC SQLExceptions转换为Spring的DataAccessException层次结构。 
	 *  <p>回调操作可以返回结果对象，例如域对象或域对象的集合。 
	 *  
	 * @param  sql执行SQL的SQL 
	 * @param  paramMap的参数映射以绑定到查询（将其保留在PreparedStatement中以猜测对应的SQL类型）
	 * @param 指定操作
	 * @return 的操作回调对象操作返回的结果对象，如果有任何问题，则返回{@code  null} 
	 * @throws  DataAccessException
	 */
	@Nullable
	<T> T execute(String sql, Map<String, ?> paramMap, PreparedStatementCallback<T> action)
			throws DataAccessException;

	/**
	 * Execute a JDBC data access operation, implemented as callback action
	 * working on a JDBC PreparedStatement. This allows for implementing arbitrary
	 * data access operations on a single Statement, within Spring's managed
	 * JDBC environment: that is, participating in Spring-managed transactions
	 * and converting JDBC SQLExceptions into Spring's DataAccessException hierarchy.
	 * <p>The callback action can return a result object, for example a
	 * domain object or a collection of domain objects.
	 * @param sql the SQL to execute
	 * @param action callback object that specifies the action
	 * @return a result object returned by the action, or {@code null}
	 * @throws DataAccessException if there is any problem
	 */
	/**
	 * 执行JDBC数据访问操作，该操作实现为对JDBC PreparedStatement进行的回调操作。 
	 * 这允许在Spring的托管JDBC环境中的单个Statement上实现任意数据访问操作：也就是说，参与Spring托管的事务并将JDBC SQLExceptions转换为Spring的DataAccessException层次结构。 
	 *  <p>回调操作可以返回结果对象，例如域对象或域对象的集合。 
	 *  
	 * @param  sql执行该操作的
	 * @param 动作回调对象的SQL 
	 * @return 该动作返回的结果对象，或者如果存在任何问题，则返回{@code  null} 
	 * @throws  DataAccessException
	 */
	@Nullable
	<T> T execute(String sql, PreparedStatementCallback<T> action) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, reading the ResultSet with a
	 * ResultSetExtractor.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param rse object that will extract results
	 * @return an arbitrary result object, as returned by the ResultSetExtractor
	 * @throws DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表，并使用ResultSetExtractor读取ResultSet。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramSource参数容器以绑定到查询
	 * @param  rse对象，该对象将提取结果
	 * @return 任意结果对象，由ResultSetExtractor返回的结果<
	 * @throws > DataAccessException，如果查询失败
	 */
	@Nullable
	<T> T query(String sql, SqlParameterSource paramSource, ResultSetExtractor<T> rse)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, reading the ResultSet with a
	 * ResultSetExtractor.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param rse object that will extract results
	 * @return an arbitrary result object, as returned by the ResultSetExtractor
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表，并使用ResultSetExtractor读取ResultSet。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留在PreparedStatement中以猜测相应的SQL类型）
	 * @param  rse对象，它将提取结果
	 * @return 如果查询失败，则由ResultSetExtractor 
	 * @throws  org.springframework.dao.DataAccessException返回的任意结果对象
	 */
	@Nullable
	<T> T query(String sql, Map<String, ?> paramMap, ResultSetExtractor<T> rse)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL,
	 * reading the ResultSet with a ResultSetExtractor.
	 * <p>Note: In contrast to the JdbcOperations method with the same signature,
	 * this query variant always uses a PreparedStatement. It is effectively
	 * equivalent to a query call with an empty parameter Map.
	 * @param sql the SQL query to execute
	 * @param rse object that will extract results
	 * @return an arbitrary result object, as returned by the ResultSetExtractor
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并使用ResultSetExtractor读取ResultSet。 
	 *  <p>注意：与具有相同签名的JdbcOperations方法相反，此查询变量始终使用PreparedStatement。 
	 * 它实际上等效于带有空参数Map的查询调用。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  rse对象，该对象将提取结果
	 * @return 任意结果对象，由ResultSetExtractor 
	 * @throws  org.springframework.dao.DataAccessException返回，如果查询失败
	 */
	@Nullable
	<T> T query(String sql, ResultSetExtractor<T> rse) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list of
	 * arguments to bind to the query, reading the ResultSet on a per-row basis
	 * with a RowCallbackHandler.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param rch object that will extract results, one row at a time
	 * @throws DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，并使用RowCallbackHandler逐行读取ResultSet。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramSource参数容器以绑定到查询
	 * @param  rch对象，该对象将提取结果，一次提取一行
	 * @throws  DataAccessException如果查询失败
	 */
	void query(String sql, SqlParameterSource paramSource, RowCallbackHandler rch)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list of
	 * arguments to bind to the query, reading the ResultSet on a per-row basis
	 * with a RowCallbackHandler.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param rch object that will extract results, one row at a time
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，并使用RowCallbackHandler逐行读取ResultSet。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留到PreparedStatement来猜测对应的SQL类型）
	 * @param  rch对象将提取结果，在如果查询失败，则时间
	 * @throws  org.springframework.dao.DataAccessException
	 */
	void query(String sql, Map<String, ?> paramMap, RowCallbackHandler rch) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL,
	 * reading the ResultSet on a per-row basis with a RowCallbackHandler.
	 * <p>Note: In contrast to the JdbcOperations method with the same signature,
	 * this query variant always uses a PreparedStatement. It is effectively
	 * equivalent to a query call with an empty parameter Map.
	 * @param sql the SQL query to execute
	 * @param rch object that will extract results, one row at a time
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并使用RowCallbackHandler按行读取ResultSet。 
	 *  <p>注意：与具有相同签名的JdbcOperations方法相反，此查询变量始终使用PreparedStatement。 
	 * 它实际上等效于带有空参数Map的查询调用。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  rch对象，该对象将提取结果，一次提取一行
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 */
	void query(String sql, RowCallbackHandler rch) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, mapping each row to a Java object
	 * via a RowMapper.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param rowMapper object that will map one object per row
	 * @return the result List, containing mapped objects
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，并通过RowMapper将每一行映射到Java对象。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramSource容器的参数以绑定到查询
	 * @param  rowMapper对象，该对象将每行映射一个对象
	 * @return 结果列表，其中包含映射的对象<
	 * @throws > org.springframework.dao.DataAccessException如果查询失败
	 */
	<T> List<T> query(String sql, SqlParameterSource paramSource, RowMapper<T> rowMapper)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, mapping each row to a Java object
	 * via a RowMapper.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param rowMapper object that will map one object per row
	 * @return the result List, containing mapped objects
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，并通过RowMapper将每一行映射到Java对象。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留在PreparedStatement中以猜测对应的SQL类型）
	 * @param  rowMapper对象，该对象将每行映射一个对象
	 * @return 结果列表，如果查询失败，则包含映射对象
	 * @throws  org.springframework.dao.DataAccessException
	 */
	<T> List<T> query(String sql, Map<String, ?> paramMap, RowMapper<T> rowMapper)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL,
	 * mapping each row to a Java object via a RowMapper.
	 * <p>Note: In contrast to the JdbcOperations method with the same signature,
	 * this query variant always uses a PreparedStatement. It is effectively
	 * equivalent to a query call with an empty parameter Map.
	 * @param sql the SQL query to execute
	 * @param rowMapper object that will map one object per row
	 * @return the result List, containing mapped objects
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，然后通过RowMapper将每一行映射到Java对象。 
	 *  <p>注意：与具有相同签名的JdbcOperations方法相反，此查询变量始终使用PreparedStatement。 
	 * 它实际上等效于带有空参数Map的查询调用。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  rowMapper对象，该对象将每行映射一个对象
	 * @return 结果列表，其中包含映射的对象
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 */
	<T> List<T> query(String sql, RowMapper<T> rowMapper) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, mapping a single result row to a
	 * Java object via a RowMapper.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param rowMapper object that will map one object per row
	 * @return the single mapped object (may be {@code null} if the given
	 * {@link RowMapper} returned {@code} null)
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row, or does not return exactly
	 * one column in that row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，从而通过RowMapper将单个结果行映射到Java对象。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramSource参数容器以绑定到查询
	 * @param  rowMapper对象，该对象将每行映射一个对象
	 * @return 单个映射的对象（可以是{<@code> null}，如果给定的{@link  RowMapper}返回了{@code } null）
	 * @throws  org.springframework.dao.IncorrectResultSizeDataAccessException如果查询没有完全返回一行，或者没有完全返回一行如果查询失败，则该行中的列
	 * @throws  org.springframework.dao.DataAccessException
	 */
	@Nullable
	<T> T queryForObject(String sql, SqlParameterSource paramSource, RowMapper<T> rowMapper)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a list
	 * of arguments to bind to the query, mapping a single result row to a
	 * Java object via a RowMapper.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param rowMapper object that will map one object per row
	 * @return the single mapped object (may be {@code null} if the given
	 * {@link RowMapper} returned {@code} null)
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row, or does not return exactly
	 * one column in that row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 */
	/**
	 * 查询给定的SQL以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，从而通过RowMapper将单个结果行映射到Java对象。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留在PreparedStatement中以猜测对应的SQL类型）
	 * @param  rowMapper对象，该对象将每行映射一个对象
	 * @return 单个映射的对象（如果给定的{@link  RowMapper}返回{@code } null，则可以为{@code  null}）
	 * @throws  org.springframework.dao.IncorrectResultSizeDataAccessException如果查询如果查询失败，则不返回确切的一行，也不返回该行的确切一列
	 * @throws  org.springframework.dao.DataAccessException
	 */
	@Nullable
	<T> T queryForObject(String sql, Map<String, ?> paramMap, RowMapper<T> rowMapper)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result object.
	 * <p>The query is expected to be a single row/single column query; the returned
	 * result will be directly mapped to the corresponding object type.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param requiredType the type that the result object is expected to match
	 * @return the result object of the required type, or {@code null} in case of SQL NULL
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row, or does not return exactly
	 * one column in that row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForObject(String, Class)
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表（需要一个结果对象）。 
	 *  <p>查询应为单行/单列查询； 
	 * 返回的结果将直接映射到相应的对象类型。 
	 *  
	 * @param  sql执行SQL查询的
	 * @param  paramSource容器参数以绑定到查询
	 * @param  requiredType期望结果对象与请求类型匹配的类型
	 * @return 所需类型的结果对象，或{@code  null}（如果SQL NULL 
	 * @throws  org.springframework.dao.IncorrectResultSizeDataAccessException），如果查询没有返回准确的一行，或者没有返回精确的一行，则返回
	 * @throws  org。 
	 *  springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForObject（String，Class）
	 */
	@Nullable
	<T> T queryForObject(String sql, SqlParameterSource paramSource, Class<T> requiredType)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result object.
	 * <p>The query is expected to be a single row/single column query; the returned
	 * result will be directly mapped to the corresponding object type.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param requiredType the type that the result object is expected to match
	 * @return the result object of the required type, or {@code null} in case of SQL NULL
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row, or does not return exactly
	 * one column in that row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForObject(String, Class)
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表（需要一个结果对象）。 
	 *  <p>查询应为单行/单列查询； 
	 * 返回的结果将直接映射到相应的对象类型。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留在PreparedStatement上以猜测对应的SQL类型）
	 * @param  requiredType预期结果对象期望的类型匹配
	 * @return 所需类型的结果对象，或者如果SQL NULL 
	 * @throws  org.springframework.dao.IncorrectResultSizeDataAccessException则为{@code  null}，如果查询未返回准确的一行，或者没有返回如果查询失败，则仅返回该行中的一列
	 * @throws  org.springframework.dao.DataAccessException 
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForObject（String，Class）
	 */
	@Nullable
	<T> T queryForObject(String sql, Map<String, ?> paramMap, Class<T> requiredType)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result Map.
	 * <p>The query is expected to be a single row query; the result row will be
	 * mapped to a Map (one entry for each column, using the column name as the key).
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @return the result Map (one entry for each column, using the column name as the key)
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForMap(String)
	 * @see org.springframework.jdbc.core.ColumnMapRowMapper
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，以得到结果Map。 
	 *  <p>该查询应为单行查询； 
	 * 结果行将被映射到Map（每列一个条目，使用列名作为键）。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramSource参数容器以绑定到查询
	 * @return 结果映射（每列一个条目，使用列名作为键）
	 * @throws  org .springframework.dao.IncorrectResultSizeDataAccessException如果查询未完全返回一行
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForMap（String）<@参见> org.springframework.jdbc.core.ColumnMapRowMapper
	 */
	Map<String, Object> queryForMap(String sql, SqlParameterSource paramSource) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result Map.
	 * The queryForMap() methods defined by this interface are appropriate
	 * when you don't have a domain model. Otherwise, consider using
	 * one of the queryForObject() methods.
	 * <p>The query is expected to be a single row query; the result row will be
	 * mapped to a Map (one entry for each column, using the column name as the key).
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @return the result Map (one entry for each column, using the column name as the key)
	 * @throws org.springframework.dao.IncorrectResultSizeDataAccessException
	 * if the query does not return exactly one row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForMap(String)
	 * @see org.springframework.jdbc.core.ColumnMapRowMapper
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建要绑定到查询的参数列表，以得到结果Map。 
	 * 当您没有域模型时，此接口定义的queryForMap（）方法是合适的。 
	 * 否则，请考虑使用queryForObject（）方法之一。 
	 *  <p>该查询应为单行查询； 
	 * 结果行将被映射到Map（每列一个条目，使用列名作为键）。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap的参数映射以绑定到查询（将其保留到PreparedStatement来猜测对应的SQL类型）
	 * @return 结果映射（每列一个条目， （使用列名作为键）
	 * @throws  org.springframework.dao.IncorrectResultSizeDataAccessException如果查询未完全返回一行
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework .jdbc.core.JdbcTemplate＃queryForMap（String）
	 * @see  org.springframework.jdbc.core.ColumnMapRowMapper
	 */
	Map<String, Object> queryForMap(String sql, Map<String, ?> paramMap) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result list.
	 * <p>The results will be mapped to a List (one entry for each row) of
	 * result objects, each of them matching the specified element type.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @param elementType the required type of element in the result list
	 * (for example, {@code Integer.class})
	 * @return a List of objects that match the specified element type
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForList(String, Class)
	 * @see org.springframework.jdbc.core.SingleColumnRowMapper
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建绑定到该查询的参数列表，并期望结果列表。 
	 *  <p>结果将映射到结果对象的列表（每行一个条目），每个结果对象都与指定的元素类型匹配。 
	 *  
	 * @param  sql执行SQL查询的
	 * @param  paramSource容器以绑定到查询
	 * @param  elementType在结果列表中键入元素的必需类型（例如，{@code  Integer.class} ）
	 * @return 与指定元素类型匹配的对象列表
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForList（String，Class） 
	 * @see  org.springframework.jdbc.core.SingleColumnRowMapper
	 */
	<T> List<T> queryForList(String sql, SqlParameterSource paramSource, Class<T> elementType)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result list.
	 * <p>The results will be mapped to a List (one entry for each row) of
	 * result objects, each of them matching the specified element type.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @param elementType the required type of element in the result list
	 * (for example, {@code Integer.class})
	 * @return a List of objects that match the specified element type
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForList(String, Class)
	 * @see org.springframework.jdbc.core.SingleColumnRowMapper
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建绑定到该查询的参数列表，并期望结果列表。 
	 *  <p>结果将映射到结果对象的列表（每行一个条目），每个结果对象都与指定的元素类型匹配。 
	 *  
	 * @param  sql执行SQL查询的
	 * @param  paramMap参数映射以绑定到查询（将其保留在PreparedStatement中以猜测对应的SQL类型）
	 * @param  elementType在结果列表中所需的元素类型（例如{@code  Integer.class}）
	 * @return 匹配指定元素类型的对象列表
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework .jdbc.core.JdbcTemplate＃queryForList（String，Class）
	 * @see  org.springframework.jdbc.core.SingleColumnRowMapper
	 */
	<T> List<T> queryForList(String sql, Map<String, ?> paramMap, Class<T> elementType)
			throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result list.
	 * <p>The results will be mapped to a List (one entry for each row) of
	 * Maps (one entry for each column, using the column name as the key).
	 * Each element in the list will be of the form returned by this interface's
	 * {@code queryForMap} methods.
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @return a List that contains a Map per row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForList(String)
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建绑定到该查询的参数列表，并期望结果列表。 
	 *  <p>结果将映射到Map的列表（每行一个条目）（每列一个条目，使用列名作为键）。 
	 * 列表中的每个元素将采用此接口的{@code  queryForMap}方法返回的形式。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramSource容器以绑定到查询
	 * @return 一个包含每行Map的列表
	 * @throws  org.springframework.dao.DataAccessException如果查询失败
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForList（String）
	 */
	List<Map<String, Object>> queryForList(String sql, SqlParameterSource paramSource) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting a result list.
	 * <p>The results will be mapped to a List (one entry for each row) of
	 * Maps (one entry for each column, using the column name as the key).
	 * Each element in the list will be of the form returned by this interface's
	 * {@code queryForMap} methods.
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @return a List that contains a Map per row
	 * @throws org.springframework.dao.DataAccessException if the query fails
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForList(String)
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并创建绑定到该查询的参数列表，并期望结果列表。 
	 *  <p>结果将映射到Map的列表（每行一个条目）（每列一个条目，使用列名作为键）。 
	 * 列表中的每个元素将采用此接口的{@code  queryForMap}方法返回的形式。 
	 *  
	 * @param  sql执行查询的SQL查询
	 * @param  paramMap绑定到查询的参数映射（将其保留到PreparedStatement来猜测相应的SQL类型）
	 * @return 包含每行Map的列表<@如果查询失败，则抛出> org.springframework.dao.DataAccessException 
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForList（String）
	 */
	List<Map<String, Object>> queryForList(String sql, Map<String, ?> paramMap) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting an SqlRowSet.
	 * <p>The results will be mapped to an SqlRowSet which holds the data in a
	 * disconnected fashion. This wrapper will translate any SQLExceptions thrown.
	 * <p>Note that, for the default implementation, JDBC RowSet support needs to
	 * be available at runtime: by default, Sun's {@code com.sun.rowset.CachedRowSetImpl}
	 * class is used, which is part of JDK 1.5+ and also available separately as part of
	 * Sun's JDBC RowSet Implementations download (rowset.jar).
	 * @param sql the SQL query to execute
	 * @param paramSource container of arguments to bind to the query
	 * @return an SqlRowSet representation (possibly a wrapper around a
	 * {@code javax.sql.rowset.CachedRowSet})
	 * @throws org.springframework.dao.DataAccessException if there is any problem executing the query
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForRowSet(String)
	 * @see org.springframework.jdbc.core.SqlRowSetResultSetExtractor
	 * @see javax.sql.rowset.CachedRowSet
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表（期望使用SqlRowSet）。 
	 *  <p>结果将映射到一个SqlRowSet，该SqlRowSet以断开连接的方式保存数据。 
	 * 该包装器将转换所有抛出的SQLException。 
	 *  <p>请注意，对于默认实现，JDBC行集支持需要在运行时可用：默认情况下，使用Sun的{@code  com.sun.rowset.CachedRowSetImpl}类，该类是JDK 1.5+和更高版本的一部分。 
	 * 也可以从Sun的JDBC RowSet Implementations下载（rowset.jar）中单独获得。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramSource参数容器以绑定到查询
	 * @return  SqlRowSet表示形式（可能是{@code  javax.sql.rowset.CachedRowSet}的包装） 
	 * @throws  org.springframework.dao.DataAccessException如果执行查询有任何问题
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForRowSet（String）
	 * @see  org.springframework.jdbc.core.SqlRowSetResultSetExtractor 
	 * @see  javax.sql.rowset.CachedRowSet
	 */
	SqlRowSet queryForRowSet(String sql, SqlParameterSource paramSource) throws DataAccessException;

	/**
	 * Query given SQL to create a prepared statement from SQL and a
	 * list of arguments to bind to the query, expecting an SqlRowSet.
	 * <p>The results will be mapped to an SqlRowSet which holds the data in a
	 * disconnected fashion. This wrapper will translate any SQLExceptions thrown.
	 * <p>Note that, for the default implementation, JDBC RowSet support needs to
	 * be available at runtime: by default, Sun's {@code com.sun.rowset.CachedRowSetImpl}
	 * class is used, which is part of JDK 1.5+ and also available separately as part of
	 * Sun's JDBC RowSet Implementations download (rowset.jar).
	 * @param sql the SQL query to execute
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @return an SqlRowSet representation (possibly a wrapper around a
	 * {@code javax.sql.rowset.CachedRowSet})
	 * @throws org.springframework.dao.DataAccessException if there is any problem executing the query
	 * @see org.springframework.jdbc.core.JdbcTemplate#queryForRowSet(String)
	 * @see org.springframework.jdbc.core.SqlRowSetResultSetExtractor
	 * @see javax.sql.rowset.CachedRowSet
	 */
	/**
	 * 查询给定的SQL，以从SQL创建准备好的语句，并绑定到查询的参数列表（期望使用SqlRowSet）。 
	 *  <p>结果将映射到一个SqlRowSet，该SqlRowSet以断开连接的方式保存数据。 
	 * 该包装器将转换所有抛出的SQLException。 
	 *  <p>请注意，对于默认实现，JDBC行集支持需要在运行时可用：默认情况下，使用Sun的{@code  com.sun.rowset.CachedRowSetImpl}类，该类是JDK 1.5+和更高版本的一部分。 
	 * 也可以从Sun的JDBC RowSet Implementations下载（rowset.jar）中单独获得。 
	 *  
	 * @param  sql SQL查询以执行
	 * @param  paramMap参数映射以绑定到查询（将其保留到PreparedStatement来猜测相应的SQL类型）
	 * @return  SqlRowSet表示形式（可能是{的包装@code  javax.sql.rowset.CachedRowSet}）
	 * @throws  org.springframework.dao.DataAccessException如果执行查询有任何问题
	 * @see  org.springframework.jdbc.core.JdbcTemplate＃queryForRowSet（String） 
	 * @see  org.springframework.jdbc.core.SqlRowSetResultSetExtractor 
	 * @see  javax.sql.rowset.CachedRowSet
	 */
	SqlRowSet queryForRowSet(String sql, Map<String, ?> paramMap) throws DataAccessException;

	/**
	 * Issue an update via a prepared statement, binding the given arguments.
	 * @param sql the SQL containing named parameters
	 * @param paramSource container of arguments and SQL types to bind to the query
	 * @return the number of rows affected
	 * @throws org.springframework.dao.DataAccessException if there is any problem issuing the update
	 */
	/**
	 * 通过准备好的语句绑定给定的参数来发出更新。 
	 *  
	 * @param  sql包含命名参数的SQL 
	 * @param  paramSource绑定到查询的参数和SQL类型的容器
	 * @return 受影响的行数
	 * @throws  org.springframework.dao.DataAccessException（如果存在）发布更新时出现问题
	 */
	int update(String sql, SqlParameterSource paramSource) throws DataAccessException;

	/**
	 * Issue an update via a prepared statement, binding the given arguments.
	 * @param sql the SQL containing named parameters
	 * @param paramMap map of parameters to bind to the query
	 * (leaving it to the PreparedStatement to guess the corresponding SQL type)
	 * @return the number of rows affected
	 * @throws org.springframework.dao.DataAccessException if there is any problem issuing the update
	 */
	/**
	 * 通过准备好的语句绑定给定的参数来发出更新。 
	 *  
	 * @param  sql包含命名参数的SQL 
	 * @param  paramMap绑定到查询的参数映射（将其保留在PreparedStatement中以猜测对应的SQL类型）
	 * @return 受影响的行数
	 * @throws  org .springframework.dao.DataAccessException如果发布更新有任何问题
	 */
	int update(String sql, Map<String, ?> paramMap) throws DataAccessException;

	/**
	 * Issue an update via a prepared statement, binding the given arguments,
	 * returning generated keys.
	 * @param sql the SQL containing named parameters
	 * @param paramSource container of arguments and SQL types to bind to the query
	 * @param generatedKeyHolder a {@link KeyHolder} that will hold the generated keys
	 * @return the number of rows affected
	 * @throws org.springframework.dao.DataAccessException if there is any problem issuing the update
	 * @see MapSqlParameterSource
	 * @see org.springframework.jdbc.support.GeneratedKeyHolder
	 */
	/**
	 * 通过准备好的语句发布更新，绑定给定参数，返回生成的密钥。 
	 *  
	 * @param  sql包含命名参数的SQL 
	 * @param  paramSource参数和SQL类型的容器，以绑定到查询
	 * @param  generateKeyHolder {{@link> KeyHolder}，它将保存生成的键
	 * @return 受影响的行数
	 * @throws  org.springframework.dao.DataAccessException如果发布更新有任何问题
	 * @see  MapSqlParameterSource 
	 * @see  org.springframework.jdbc.support.GeneratedKeyHolder
	 */
	int update(String sql, SqlParameterSource paramSource, KeyHolder generatedKeyHolder)
			throws DataAccessException;

	/**
	 * Issue an update via a prepared statement, binding the given arguments,
	 * returning generated keys.
	 * @param sql the SQL containing named parameters
	 * @param paramSource container of arguments and SQL types to bind to the query
	 * @param generatedKeyHolder a {@link KeyHolder} that will hold the generated keys
	 * @param keyColumnNames names of the columns that will have keys generated for them
	 * @return the number of rows affected
	 * @throws org.springframework.dao.DataAccessException if there is any problem issuing the update
	 * @see MapSqlParameterSource
	 * @see org.springframework.jdbc.support.GeneratedKeyHolder
	 */
	/**
	 * 通过准备好的语句发布更新，绑定给定参数，返回生成的密钥。 
	 *  
	 * @param  sql包含命名参数的SQL 
	 * @param  paramSource绑定到查询的参数和SQL类型的容器
	 * @param  generateKeyHolder {{@link> KeyHolder}将保存生成的键
	 * @param  keyColumnNames将为其生成键的列的名称
	 * @return 受影响的行数
	 * @throws  org.springframework.dao.DataAccessException，如果在发布更新时遇到任何问题
	 * @see  MapSqlParameterSource 
	 * @see  org。 
	 *  springframework.jdbc.support.GeneratedKeyHolder
	 */
	int update(String sql, SqlParameterSource paramSource, KeyHolder generatedKeyHolder, String[] keyColumnNames)
			throws DataAccessException;

	/**
	 * Executes a batch using the supplied SQL statement with the batch of supplied arguments.
	 * @param sql the SQL statement to execute
	 * @param batchValues the array of Maps containing the batch of arguments for the query
	 * @return an array containing the numbers of rows affected by each update in the batch
	 */
	/**
	 * 使用提供的SQL语句和提供的参数批次执行批处理。 
	 *  
	 * @param  sql要执行的SQL语句
	 * @param  batchValues包含查询的参数批处理的Maps数组
	 * @return 包含该批处理中每次更新影响的行数的数组
	 */
	int[] batchUpdate(String sql, Map<String, ?>[] batchValues);

	/**
	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments.
	 * @param sql the SQL statement to execute
	 * @param batchArgs the array of {@link SqlParameterSource} containing the batch of arguments for the query
	 * @return an array containing the numbers of rows affected by each update in the batch
	 */
	/**
	 * 使用提供的SQL语句和提供的参数批执行批处理。 
	 *  
	 * @param  sql要执行的SQL语句
	 * @param  batchArgs包含{@link  SqlParameterSource}的数组，其中包含查询的参数批处理
	 * @return 数组，该数组包含受每次更新影响的行数批量
	 */
	int[] batchUpdate(String sql, SqlParameterSource[] batchArgs);

}
