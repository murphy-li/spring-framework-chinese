/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support.xml;

import java.io.InputStream;
import java.io.Reader;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.xml.transform.Result;
import javax.xml.transform.Source;

import org.w3c.dom.Document;

import org.springframework.lang.Nullable;

/**
 * Abstraction for handling XML fields in specific databases. Its main purpose
 * is to isolate database-specific handling of XML stored in the database.
 *
 * <p>JDBC 4.0 introduces the new data type {@code java.sql.SQLXML}
 * but most databases and their drivers currently rely on database-specific
 * data types and features.
 *
 * <p>Provides accessor methods for XML fields and acts as factory for
 * {@link SqlXmlValue} instances.
 *
 * @author Thomas Risberg
 * @since 2.5.5
 * @see Jdbc4SqlXmlHandler
 * @see java.sql.SQLXML
 * @see java.sql.ResultSet#getSQLXML
 * @see java.sql.PreparedStatement#setSQLXML
 */
/**
 * 在特定数据库中处理XML字段的抽象。 
 * 其主要目的是隔离存储在数据库中的XML的特定于数据库的处理。 
 *  <p> JDBC 4.0引入了新的数据类型{@code  java.sql.SQLXML}，但是大多数数据库及其驱动程序当前依赖于特定于数据库的数据类型和功能。 
 *  <p>为XML字段提供访问器方法，并充当{@link  SqlXmlValue}实例的工厂。 
 *  @author  Thomas Risberg @since 2.5.5 
 * @see  Jdbc4SqlXmlHandler 
 * @see  java.sql.SQLXML 
 * @see  java.sql.ResultSet＃getSQLXML 
 * @see  java.sql.PreparedStatement＃setSQLXML
 */
public interface SqlXmlHandler {

	//-------------------------------------------------------------------------
	// Convenience methods for accessing XML content
	//-------------------------------------------------------------------------

	/**
	 * Retrieve the given column as String from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getString} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnName the column name to use
	 * @return the content as String, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getString
	 * @see java.sql.ResultSet#getSQLXML
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为String。 
	 *  <p>可以简单地调用{@code  ResultSet.getString}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 是ResultSet以便从
	 * @param  columnName检索内容名称列名称以将
	 * @return 内容用作字符串，如果SQL NULL 
	 * @throws  SQLException，则为{@code  null} JDBC方法抛出的异常
	 * @see  java.sql.ResultSet＃getString 
	 * @see  java.sql.ResultSet＃getSQLXML
	 */
	@Nullable
	String getXmlAsString(ResultSet rs, String columnName) throws SQLException;

	/**
	 * Retrieve the given column as String from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getString} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnIndex the column index to use
	 * @return the content as String, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getString
	 * @see java.sql.ResultSet#getSQLXML
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为String。 
	 *  <p>可以简单地调用{@code  ResultSet.getString}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 或ResultSet从
	 * @param  columnIndex检索内容索引列索引以将
	 * @return 内容用作String，如果SQL NULL 
	 * @throws  SQLException，则为{@code  null} JDBC方法抛出的异常
	 * @see  java.sql.ResultSet＃getString 
	 * @see  java.sql.ResultSet＃getSQLXML
	 */
	@Nullable
	String getXmlAsString(ResultSet rs, int columnIndex) throws SQLException;

	/**
	 * Retrieve the given column as binary stream from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnName the column name to use
	 * @return the content as a binary stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getBinaryStream
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为二进制流。 
	 *  <p>可以简单地调用{@code  ResultSet.getAsciiStream}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 为ResultSet以从
	 * @param  columnName检索内容名称列名以将
	 * @return 内容用作二进制流，如果为SQL NULL 
	 * @throws ，则为{@code  null}如果由JDBC方法抛出，则抛出SQLException 
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getBinaryStream
	 */
	@Nullable
	InputStream getXmlAsBinaryStream(ResultSet rs, String columnName) throws SQLException;

	/**
	 * Retrieve the given column as binary stream from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnIndex the column index to use
	 * @return the content as binary stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getBinaryStream
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为二进制流。 
	 *  <p>可以简单地调用{@code  ResultSet.getAsciiStream}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 或ResultSet从
	 * @param  columnIndex检索内容索引列索引以将
	 * @return 内容用作二进制流，如果SQL NULL 
	 * @throws  SQLException，则使用{@code  null}如果被JDBC方法抛出
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getBinaryStream
	 */
	@Nullable
	InputStream getXmlAsBinaryStream(ResultSet rs, int columnIndex) throws SQLException;

	/**
	 * Retrieve the given column as character stream from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnName the column name to use
	 * @return the content as character stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getCharacterStream
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为字符流。 
	 *  <p>可以简单地调用{@code  ResultSet.getCharacterStream}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 或ResultSet以从
	 * @param  columnName检索内容名称列名以使用
	 * @return 内容作为字符流，如果SQL NULL 
	 * @throws  SQLException，则为{@code  null}如果被JDBC方法抛出
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getCharacterStream
	 */
	@Nullable
	Reader getXmlAsCharacterStream(ResultSet rs, String columnName) throws SQLException;

	/**
	 * Retrieve the given column as character stream from the given ResultSet.
	 * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with
	 * {@code SQLXML} or database-specific classes depending on the
	 * database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnIndex the column index to use
	 * @return the content as character stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getCharacterStream
	 */
	/**
	 * 从给定的ResultSet中检索给定的列作为字符流。 
	 *  <p>可以简单地调用{@code  ResultSet.getCharacterStream}或使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 为ResultSet以从
	 * @param  columnIndex检索内容索引列索引以将
	 * @return 内容用作字符流，如果为SQL NULL，则为{@code  null} 
	 * @throws  SQLException如果被JDBC方法抛出
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getCharacterStream
	 */
	@Nullable
	Reader getXmlAsCharacterStream(ResultSet rs, int columnIndex) throws SQLException;

	/**
	 * Retrieve the given column as Source implemented using the specified source class
	 * from the given ResultSet.
	 * <p>Might work with {@code SQLXML} or database-specific classes depending
	 * on the database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnName the column name to use
	 * @param sourceClass the implementation class to be used
	 * @return the content as character stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getSource
	 */
	/**
	 * 从给定的ResultSet中检索使用给定的源类使用给定的源类实现的给定列。 
	 *  <p>可以使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 或ResultSet以从
	 * @param  columnName检索内容要使用的列名
	 * @param  sourceClass要使用的实现类
	 * @return 内容作为字符流，或{@code  null }如果是SQL NULL 
	 * @throws 如果由JDBC方法抛出，则抛出SQLException 
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getSource
	 */
	@Nullable
	Source getXmlAsSource(ResultSet rs, String columnName, @Nullable Class<? extends Source> sourceClass) throws SQLException;

	/**
	 * Retrieve the given column as Source implemented using the specified source class
	 * from the given ResultSet.
	 * <p>Might work with {@code SQLXML} or database-specific classes depending
	 * on the database and driver.
	 * @param rs the ResultSet to retrieve the content from
	 * @param columnIndex the column index to use
	 * @param sourceClass the implementation class to be used
	 * @return the content as character stream, or {@code null} in case of SQL NULL
	 * @throws SQLException if thrown by JDBC methods
	 * @see java.sql.ResultSet#getSQLXML
	 * @see java.sql.SQLXML#getSource
	 */
	/**
	 * 从给定的ResultSet中检索使用给定的源类使用给定的源类实现的给定列。 
	 *  <p>可以使用{@code  SQLXML}或特定于数据库的类，具体取决于数据库和驱动程序。 
	 *  
	 * @param 或ResultSet以从
	 * @param  columnIndex检索内容列索引以使用
	 * @param  sourceClass实现类要使用的
	 * @return 内容作为字符流，或{@code  null }如果是SQL NULL 
	 * @throws 如果由JDBC方法抛出，则抛出SQLException 
	 * @see  java.sql.ResultSet＃getSQLXML 
	 * @see  java.sql.SQLXML＃getSource
	 */
	@Nullable
	Source getXmlAsSource(ResultSet rs, int columnIndex, @Nullable Class<? extends Source> sourceClass) throws SQLException;


	//-------------------------------------------------------------------------
	// Convenience methods for building XML content
	//-------------------------------------------------------------------------

	/**
	 * Create a {@code SqlXmlValue} instance for the given XML data,
	 * as supported by the underlying JDBC driver.
	 * @param value the XML String value providing XML data
	 * @return the implementation specific instance
	 * @see SqlXmlValue
	 * @see java.sql.SQLXML#setString(String)
	 */
	/**
	 * 根据基础JDBC驱动程序的支持，为给定的XML数据创建一个{@code  SqlXmlValue}实例。 
	 *  
	 * @param 值提供XML数据的XML String值
	 * @return 特定于实现的实例
	 * @see  SqlXmlValue 
	 * @see  java.sql.SQLXML＃setString（String）
	 */
	SqlXmlValue newSqlXmlValue(String value);

	/**
	 * Create a {@code SqlXmlValue} instance for the given XML data,
	 * as supported by the underlying JDBC driver.
	 * @param provider the {@code XmlBinaryStreamProvider} providing XML data
	 * @return the implementation specific instance
	 * @see SqlXmlValue
	 * @see java.sql.SQLXML#setBinaryStream()
	 */
	/**
	 * 根据基础JDBC驱动程序的支持，为给定的XML数据创建一个{@code  SqlXmlValue}实例。 
	 *  
	 * @param 提供者{{@@code> XmlBinaryStreamProvider}提供XML数据
	 * @return 特定于实现的实例
	 * @see  SqlXmlValue 
	 * @see  java.sql.SQLXML＃setBinaryStream（）
	 */
	SqlXmlValue newSqlXmlValue(XmlBinaryStreamProvider provider);

	/**
	 * Create a {@code SqlXmlValue} instance for the given XML data,
	 * as supported by the underlying JDBC driver.
	 * @param provider the {@code XmlCharacterStreamProvider} providing XML data
	 * @return the implementation specific instance
	 * @see SqlXmlValue
	 * @see java.sql.SQLXML#setCharacterStream()
	 */
	/**
	 * 根据基础JDBC驱动程序的支持，为给定的XML数据创建一个{@code  SqlXmlValue}实例。 
	 *  
	 * @param 提供者{{@@code> XmlCharacterStreamProvider}提供XML数据
	 * @return 特定于实现的实例
	 * @see  SqlXmlValue 
	 * @see  java.sql.SQLXML＃setCharacterStream（）
	 */
	SqlXmlValue newSqlXmlValue(XmlCharacterStreamProvider provider);

	/**
	 * Create a {@code SqlXmlValue} instance for the given XML data,
	 * as supported by the underlying JDBC driver.
	 * @param resultClass the Result implementation class to be used
	 * @param provider the {@code XmlResultProvider} that will provide the XML data
	 * @return the implementation specific instance
	 * @see SqlXmlValue
	 * @see java.sql.SQLXML#setResult(Class)
	 */
	/**
	 * 根据基础JDBC驱动程序的支持，为给定的XML数据创建一个{@code  SqlXmlValue}实例。 
	 *  
	 * @param  resultClass要使用的Result实现类
	 * @param 提供程序{@code  XmlResultProvider}，它将提供XML数据
	 * @return 实现特定实例
	 * @see  SqlXmlValue 
	 * @see  java。 
	 *  sql.SQLXML＃setResult（Class）
	 */
	SqlXmlValue newSqlXmlValue(Class<? extends Result> resultClass, XmlResultProvider provider);

	/**
	 * Create a {@code SqlXmlValue} instance for the given XML data,
	 * as supported by the underlying JDBC driver.
	 * @param doc the XML Document to be used
	 * @return the implementation specific instance
	 * @see SqlXmlValue
	 */
	/**
	 * 根据基础JDBC驱动程序的支持，为给定的XML数据创建一个{@code  SqlXmlValue}实例。 
	 *  
	 * @param  doc要使用的XML文档
	 * @return 实现特定实例
	 * @see  SqlXmlValue
	 */
	SqlXmlValue newSqlXmlValue(Document doc);

}
