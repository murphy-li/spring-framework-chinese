/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support;

import java.util.List;
import java.util.Map;

import org.springframework.dao.InvalidDataAccessApiUsageException;
import org.springframework.lang.Nullable;

/**
 * Interface for retrieving keys, typically used for auto-generated keys
 * as potentially returned by JDBC insert statements.
 *
 * <p>Implementations of this interface can hold any number of keys.
 * In the general case, the keys are returned as a List containing one Map
 * for each row of keys.
 *
 * <p>Most applications only use one key per row and process only one row at a
 * time in an insert statement. In these cases, just call {@code getKey}
 * to retrieve the key. The returned value is a Number here, which is the
 * usual type for auto-generated keys.
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 1.1
 * @see org.springframework.jdbc.core.JdbcTemplate
 * @see org.springframework.jdbc.object.SqlUpdate
 */
/**
 * 检索键的接口，通常用于JDBC插入语句可能返回的自动生成的键。 
 *  <p>此接口的实现可以容纳任意数量的键。 
 * 在一般情况下，这些键以列表的形式返回，其中每行键包含一个Map。 
 *  <p>大多数应用程序每行仅使用一个键，并且在插入语句中一次仅处理一行。 
 * 在这些情况下，只需调用{@code  getKey}即可检索密钥。 
 * 这里返回的值是一个数字，这是自动生成的密钥的常用类型。 
 *  @author 托马斯·里斯伯格@author  Juergen Hoeller @since 1.1起
 * @see  org.springframework.jdbc.core.JdbcTemplate 
 * @see  org.springframework.jdbc.object.SqlUpdate
 */
public interface KeyHolder {

	/**
	 * Retrieve the first item from the first map, assuming that there is just
	 * one item and just one map, and that the item is a number.
	 * This is the typical case: a single, numeric generated key.
	 * <p>Keys are held in a List of Maps, where each item in the list represents
	 * the keys for each row. If there are multiple columns, then the Map will have
	 * multiple entries as well. If this method encounters multiple entries in
	 * either the map or the list meaning that multiple keys were returned,
	 * then an InvalidDataAccessApiUsageException is thrown.
	 * @return the generated key as a number
	 * @throws InvalidDataAccessApiUsageException if multiple keys are encountered
	 */
	/**
	 * 假设只有一个项目和一个地图，并且该项目是一个数字，则从第一张地图中检索第一项。 
	 * 这是典型的情况：单个数字生成键。 
	 *  <p>键保存在地图列表中，列表中的每个项目代表每一行的键。 
	 * 如果有多个列，那么Map也将有多个条目。 
	 * 如果此方法在映射或列表中遇到多个条目，则意味着返回了多个键，则将引发InvalidDataAccessApiUsageException。 
	 *  
	 * @return 生成的密钥作为数字
	 * @throws 如果遇到多个密钥，则InvalidDataAccessApiUsageException
	 */
	@Nullable
	Number getKey() throws InvalidDataAccessApiUsageException;

	/**
	 * Retrieve the first map of keys.
	 * <p>If there are multiple entries in the list (meaning that multiple rows
	 * had keys returned), then an InvalidDataAccessApiUsageException is thrown.
	 * @return the Map of generated keys for a single row
	 * @throws InvalidDataAccessApiUsageException if keys for multiple rows are encountered
	 */
	/**
	 * 检索键的第一张地图。 
	 *  <p>如果列表中有多个条目（意味着多行返回了键），则抛出InvalidDataAccessApiUsageException。 
	 *  
	 * @return 为单行生成的键的映射
	 * @throws 如果遇到多行的键，则为InvalidDataAccessApiUsageException
	 */
	@Nullable
	Map<String, Object> getKeys() throws InvalidDataAccessApiUsageException;

	/**
	 * Return a reference to the List that contains the keys.
	 * <p>Can be used for extracting keys for multiple rows (an unusual case),
	 * and also for adding new maps of keys.
	 * @return the List for the generated keys, with each entry representing
	 * an individual row through a Map of column names and key values
	 */
	/**
	 * 返回对包含键的列表的引用。 
	 *  <p>可用于提取多行的键（不常见的情况），也可用于添加新的键映射。 
	 *  
	 * @return 生成键的列表，每个条目代表列名和键值映射中的一行
	 */
	List<Map<String, Object>> getKeyList();

}
