/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support;

import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Simple interface for complex types to be set as statement parameters.
 *
 * <p>Implementations perform the actual work of setting the actual values. They must
 * implement the callback method {@code setValue} which can throw SQLExceptions
 * that will be caught and translated by the calling code. This callback method has
 * access to the underlying Connection via the given PreparedStatement object, if that
 * should be needed to create any database-specific objects.
 *
 * @author Juergen Hoeller
 * @since 2.5.6
 * @see org.springframework.jdbc.core.SqlTypeValue
 * @see org.springframework.jdbc.core.DisposableSqlTypeValue
 */
/**
 * 用于将复杂类型设置为语句参数的简单接口。 
 *  <p>实施会执行设置实际值的实际工作。 
 * 他们必须实现回调方法{@code  setValue}，该方法可以引发将由调用代码捕获和转换的SQLException。 
 * 如果需要创建任何特定于数据库的对象，则此回调方法可以通过给定的PreparedStatement对象访问基础Connection。 
 *  @author  Juergen Hoeller @since 2.5.6 
 * @see  org.springframework.jdbc.core.SqlTypeValue 
 * @see  org.springframework.jdbc.core.DisposableSqlTypeValue
 */
public interface SqlValue {

	/**
	 * Set the value on the given PreparedStatement.
	 * @param ps the PreparedStatement to work on
	 * @param paramIndex the index of the parameter for which we need to set the value
	 * @throws SQLException if an SQLException is encountered while setting parameter values
	 */
	/**
	 * 在给定的PreparedStatement上设置值。 
	 *  
	 * @param  ps PreparedStatement用于
	 * @param  paramIndex如果需要在设置参数值时遇到SQLException，则需要为其设置值的参数的索引
	 * @throws  SQLException
	 */
	void setValue(PreparedStatement ps, int paramIndex)	throws SQLException;

	/**
	 * Clean up resources held by this value object.
	 */
	/**
	 * 清理此值对象拥有的资源。 
	 * 
	 */
	void cleanup();

}
