/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support;

import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Strategy interface for translating between {@link SQLException SQLExceptions}
 * and Spring's data access strategy-agnostic {@link DataAccessException}
 * hierarchy.
 *
 * <p>Implementations can be generic (for example, using
 * {@link java.sql.SQLException#getSQLState() SQLState} codes for JDBC) or wholly
 * proprietary (for example, using Oracle error codes) for greater precision.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see org.springframework.dao.DataAccessException
 */
/**
 * 用于在{@link  SQLException SQLExceptions}和Spring的与数据访问策略无关的{@link  DataAccessException}层次结构之间进行转换的策略接口。 
 *  <p>实现可以是通用的（例如，对于JDBC使用{@link  java.sql.SQLException＃getSQLState（）SQLState}代码）或完全专有的（例如，使用Oracle错误代码）以提高精度。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  org.springframework.dao.DataAccessException
 */
@FunctionalInterface
public interface SQLExceptionTranslator {

	/**
	 * Translate the given {@link SQLException} into a generic {@link DataAccessException}.
	 * <p>The returned DataAccessException is supposed to contain the original
	 * {@code SQLException} as root cause. However, client code may not generally
	 * rely on this due to DataAccessExceptions possibly being caused by other resource
	 * APIs as well. That said, a {@code getRootCause() instanceof SQLException}
	 * check (and subsequent cast) is considered reliable when expecting JDBC-based
	 * access to have happened.
	 * @param task readable text describing the task being attempted
	 * @param sql the SQL query or update that caused the problem (if known)
	 * @param ex the offending {@code SQLException}
	 * @return the DataAccessException wrapping the {@code SQLException},
	 * or {@code null} if no translation could be applied
	 * (in a custom translator; the default translators always throw an
	 * {@link org.springframework.jdbc.UncategorizedSQLException} in such a case)
	 * @see org.springframework.dao.DataAccessException#getRootCause()
	 */
	/**
	 * 将给定的{@link  SQLException}转换为通用的{@link  DataAccessException}。 
	 *  <p>返回的DataAccessException应该包含原始{@code  SQLException}作为根本原因。 
	 * 但是，由于DataAccessExceptions也可能是由其他资源API引起的，因此客户端代码通常可能不依赖于此。 
	 * 就是说，如果期望发生基于JDBC的访问，则{{@code> getRootCause（）instanceof SQLException}检查（以及后续的强制转换）被认为是可靠的。 
	 *  
	 * @param 任务可读的文本，描述尝试执行的任务
	 * @param  sql引起问题的SQL查询或更新（如果知道）
	 * @param 违规的{@code  SQLException} 
	 * @return  DataAccessException包装{@code  SQLException}，或者如果无法应用转换，则包装{@code  null}（在自定义转换器中； 
	 * 默认转换器始终在其中抛出{{@link> org.springframework.jdbc.UncategorizedSQLException}这种情况）
	 * @see  org.springframework.dao.DataAccessException＃getRootCause（）
	 */
	@Nullable
	DataAccessException translate(String task, @Nullable String sql, SQLException ex);

}
