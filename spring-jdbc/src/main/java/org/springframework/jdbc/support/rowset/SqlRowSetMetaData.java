/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support.rowset;

import org.springframework.jdbc.InvalidResultSetAccessException;

/**
 * Metadata interface for Spring's {@link SqlRowSet}, analogous to JDBC's
 * {@link java.sql.ResultSetMetaData}.
 *
 * <p>The main difference to the standard JDBC ResultSetMetaData is that a
 * {@link java.sql.SQLException} is never thrown here. This allows
 * SqlRowSetMetaData to be used without having to deal with checked exceptions.
 * SqlRowSetMetaData will throw Spring's {@link InvalidResultSetAccessException}
 * instead (when appropriate).
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 1.2
 * @see SqlRowSet#getMetaData()
 * @see java.sql.ResultSetMetaData
 * @see org.springframework.jdbc.InvalidResultSetAccessException
 */
/**
 * Spring的{@link  SqlRowSet}的元数据接口，类似于JDBC的{@link  java.sql.ResultSetMetaData}。 
 *  <p>与标准JDBC ResultSetMetaData的主要区别在于，这里永远不会抛出{@link  java.sql.SQLException}。 
 * 这允许使用SqlRowSetMetaData，而不必处理已检查的异常。 
 *  SqlRowSetMetaData会（适当时）抛出Spring的{@link  InvalidResultSetAccessException}。 
 *  @author 托马斯·里斯伯格（Thomas Risberg）@author 于尔根·霍勒（Juergen Hoeller）@自1.2起
 * @see  SqlRowSet＃getMetaData（）
 */
public interface SqlRowSetMetaData {

	/**
	 * Retrieve the catalog name of the table that served as the source for the
	 * specified column.
	 * @param columnIndex the index of the column
	 * @return the catalog name
	 * @see java.sql.ResultSetMetaData#getCatalogName(int)
	 */
	/**
	 * 检索用作指定列的源的表的目录名称。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 目录名称
	 * @see  java.sql.ResultSetMetaData＃getCatalogName（int）
	 */
	String getCatalogName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the fully qualified class that the specified column will be mapped to.
	 * @param columnIndex the index of the column
	 * @return the class name as a String
	 * @see java.sql.ResultSetMetaData#getColumnClassName(int)
	 */
	/**
	 * 检索指定列将映射到的完全限定的类。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 作为字符串的类名称
	 * @see  java.sql.ResultSetMetaData＃getColumnClassName（int）
	 */
	String getColumnClassName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the number of columns in the RowSet.
	 * @return the number of columns
	 * @see java.sql.ResultSetMetaData#getColumnCount()
	 */
	/**
	 * 检索RowSet中的列数。 
	 *  
	 * @return 列数
	 * @see  java.sql.ResultSetMetaData＃getColumnCount（）
	 */
	int getColumnCount() throws InvalidResultSetAccessException;

	/**
	 * Return the column names of the table that the result set represents.
	 * @return the column names
	 */
	/**
	 * 返回结果集表示的表的列名。 
	 *  
	 * @return 列名
	 */
	String[] getColumnNames() throws InvalidResultSetAccessException;

	/**
	 * Retrieve the maximum width of the designated column.
	 * @param columnIndex the index of the column
	 * @return the width of the column
	 * @see java.sql.ResultSetMetaData#getColumnDisplaySize(int)
	 */
	/**
	 * 检索指定列的最大宽度。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 列的宽度
	 * @see  java.sql.ResultSetMetaData＃getColumnDisplaySize（int）
	 */
	int getColumnDisplaySize(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the suggested column title for the column specified.
	 * @param columnIndex the index of the column
	 * @return the column title
	 * @see java.sql.ResultSetMetaData#getColumnLabel(int)
	 */
	/**
	 * 检索指定列的建议列标题。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 列标题
	 * @see  java.sql.ResultSetMetaData＃getColumnLabel（int）
	 */
	String getColumnLabel(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the column name for the indicated column.
	 * @param columnIndex the index of the column
	 * @return the column name
	 * @see java.sql.ResultSetMetaData#getColumnName(int)
	 */
	/**
	 * 检索所指示列的列名。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 列名
	 * @see  java.sql.ResultSetMetaData＃getColumnName（int）
	 */
	String getColumnName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the SQL type code for the indicated column.
	 * @param columnIndex the index of the column
	 * @return the SQL type code
	 * @see java.sql.ResultSetMetaData#getColumnType(int)
	 * @see java.sql.Types
	 */
	/**
	 * 检索指示列的SQL类型代码。 
	 *  
	 * @param  columnIndex列的索引
	 * @return  SQL类型代码
	 * @see  java.sql.ResultSetMetaData＃getColumnType（int）
	 * @see  java.sql.Types
	 */
	int getColumnType(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the DBMS-specific type name for the indicated column.
	 * @param columnIndex the index of the column
	 * @return the type name
	 * @see java.sql.ResultSetMetaData#getColumnTypeName(int)
	 */
	/**
	 * 检索指示列的特定于DBMS的类型名称。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 类型名称
	 * @see  java.sql.ResultSetMetaData＃getColumnTypeName（int）
	 */
	String getColumnTypeName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the precision for the indicated column.
	 * @param columnIndex the index of the column
	 * @return the precision
	 * @see java.sql.ResultSetMetaData#getPrecision(int)
	 */
	/**
	 * 检索指示列的精度。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 精度
	 * @see  java.sql.ResultSetMetaData＃getPrecision（int）
	 */
	int getPrecision(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the scale of the indicated column.
	 * @param columnIndex the index of the column
	 * @return the scale
	 * @see java.sql.ResultSetMetaData#getScale(int)
	 */
	/**
	 * 检索指示列的比例。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 比例尺
	 * @see  java.sql.ResultSetMetaData＃getScale（int）
	 */
	int getScale(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the schema name of the table that served as the source for the
	 * specified column.
	 * @param columnIndex the index of the column
	 * @return the schema name
	 * @see java.sql.ResultSetMetaData#getSchemaName(int)
	 */
	/**
	 * 检索用作指定列的源的表的架构名称。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 模式名称
	 * @see  java.sql.ResultSetMetaData＃getSchemaName（int）
	 */
	String getSchemaName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the name of the table that served as the source for the
	 * specified column.
	 * @param columnIndex the index of the column
	 * @return the name of the table
	 * @see java.sql.ResultSetMetaData#getTableName(int)
	 */
	/**
	 * 检索用作指定列的源的表的名称。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 表的名称
	 * @see  java.sql.ResultSetMetaData＃getTableName（int）
	 */
	String getTableName(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Indicate whether the case of the designated column is significant.
	 * @param columnIndex the index of the column
	 * @return true if the case sensitive, false otherwise
	 * @see java.sql.ResultSetMetaData#isCaseSensitive(int)
	 */
	/**
	 * 指示指定列的大小写是否有意义。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 如果区分大小写，则为true，否则为false。 
	 * <
	 * @see> java.sql.ResultSetMetaData＃isCaseSensitive（int）
	 */
	boolean isCaseSensitive(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Indicate whether the designated column contains a currency value.
	 * @param columnIndex the index of the column
	 * @return true if the value is a currency value, false otherwise
	 * @see java.sql.ResultSetMetaData#isCurrency(int)
	 */
	/**
	 * 指示指定的列是否包含货币值。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 如果该值是货币值，则为true，否则为false。 
	 * 
	 * @see  java.sql.ResultSetMetaData＃isCurrency（int）
	 */
	boolean isCurrency(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Indicate whether the designated column contains a signed number.
	 * @param columnIndex the index of the column
	 * @return true if the column contains a signed number, false otherwise
	 * @see java.sql.ResultSetMetaData#isSigned(int)
	 */
	/**
	 * 指示指定的列是否包含带符号的数字。 
	 *  
	 * @param  columnIndex列的索引
	 * @return 如果该列包含带符号的数字，则为true； 
	 * 否则为false。 
	 * 
	 * @see  java.sql.ResultSetMetaData＃isSigned（int）
	 */
	boolean isSigned(int columnIndex) throws InvalidResultSetAccessException;

}
