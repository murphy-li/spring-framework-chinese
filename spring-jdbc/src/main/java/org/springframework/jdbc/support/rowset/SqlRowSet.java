/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support.rowset;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

import org.springframework.jdbc.InvalidResultSetAccessException;
import org.springframework.lang.Nullable;

/**
 * Mirror interface for {@link javax.sql.RowSet}, representing a disconnected variant of
 * {@link java.sql.ResultSet} data.
 *
 * <p>The main difference to the standard JDBC RowSet is that a {@link java.sql.SQLException}
 * is never thrown here. This allows an SqlRowSet to be used without having to deal with
 * checked exceptions. An SqlRowSet will throw Spring's {@link InvalidResultSetAccessException}
 * instead (when appropriate).
 *
 * <p>Note: This interface extends the {@code java.io.Serializable} marker interface.
 * Implementations, which typically hold disconnected data, are encouraged to be actually
 * serializable (as far as possible).
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @since 1.2
 * @see javax.sql.RowSet
 * @see java.sql.ResultSet
 * @see org.springframework.jdbc.InvalidResultSetAccessException
 * @see org.springframework.jdbc.core.JdbcTemplate#queryForRowSet
 */
/**
 * {@link  javax.sql.RowSet}的镜像接口，表示{@link  java.sql.ResultSet}数据的断开连接的变体。 
 *  <p>与标准JDBC RowSet的主要区别在于，这里永远不会抛出{@link  java.sql.SQLException}。 
 * 这允许使用SqlRowSet，而不必处理已检查的异常。 
 *  SqlRowSet会（适当时）抛出Spring的{@link  InvalidResultSetAccessException}。 
 *  <p>注意：此接口扩展了{@code  java.io.Serializable}标记器接口。 
 * 鼓励通常保存断开连接的数据的实现，使其实际上可序列化（尽可能）。 
 *  @author  Thomas Risberg @author  Juergen Hoeller @since 1.2起
 * @see  javax.sql.RowSet 
 * @see  java.sql.ResultSet 
 * @see  org.springframework.jdbc.InvalidResultSetAccessException 
 * @see  org。 
 *  springframework.jdbc.core.JdbcTemplate＃queryForRowSet
 */
public interface SqlRowSet extends Serializable {

	/**
	 * Retrieve the meta-data, i.e. number, types and properties
	 * for the columns of this row set.
	 * @return a corresponding SqlRowSetMetaData instance
	 * @see java.sql.ResultSet#getMetaData()
	 */
	/**
	 * 检索此行集的列的元数据，即编号，类型和属性。 
	 *  
	 * @return 相应的SqlRowSetMetaData实例
	 * @see  java.sql.ResultSet＃getMetaData（）
	 */
	SqlRowSetMetaData getMetaData();

	/**
	 * Map the given column label to its column index.
	 * @param columnLabel the name of the column
	 * @return the column index for the given column label
	 * @see java.sql.ResultSet#findColumn(String)
	 */
	/**
	 * 将给定的列标签映射到其列索引。 
	 *  
	 * @param  columnLabel列的名称
	 * @return 给定列标签的列索引
	 * @see  java.sql.ResultSet＃findColumn（String）
	 */
	int findColumn(String columnLabel) throws InvalidResultSetAccessException;


	// RowSet methods for extracting data values

	/**
	 * Retrieve the value of the indicated column in the current row as a BigDecimal object.
	 * @param columnIndex the column index
	 * @return an BigDecimal object representing the column value
	 * @see java.sql.ResultSet#getBigDecimal(int)
	 */
	/**
	 * 以BigDecimal对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的BigDecimal对象
	 * @see  java.sql.ResultSet＃getBigDecimal（int）
	 */
	@Nullable
	BigDecimal getBigDecimal(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a BigDecimal object.
	 * @param columnLabel the column label
	 * @return an BigDecimal object representing the column value
	 * @see java.sql.ResultSet#getBigDecimal(String)
	 */
	/**
	 * 以BigDecimal对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 代表列值的BigDecimal对象
	 * @see  java.sql.ResultSet＃getBigDecimal（String）
	 */
	@Nullable
	BigDecimal getBigDecimal(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a boolean.
	 * @param columnIndex the column index
	 * @return a boolean representing the column value
	 * @see java.sql.ResultSet#getBoolean(int)
	 */
	/**
	 * 以布尔值检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 表示列值的布尔值
	 * @see  java.sql.ResultSet＃getBoolean（int）
	 */
	boolean getBoolean(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a boolean.
	 * @param columnLabel the column label
	 * @return a boolean representing the column value
	 * @see java.sql.ResultSet#getBoolean(String)
	 */
	/**
	 * 以布尔值检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 表示列值的布尔值
	 * @see  java.sql.ResultSet＃getBoolean（String）
	 */
	boolean getBoolean(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a byte.
	 * @param columnIndex the column index
	 * @return a byte representing the column value
	 * @see java.sql.ResultSet#getByte(int)
	 */
	/**
	 * 以字节为单位检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的字节
	 * @see  java.sql.ResultSet＃getByte（int）
	 */
	byte getByte(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a byte.
	 * @param columnLabel the column label
	 * @return a byte representing the column value
	 * @see java.sql.ResultSet#getByte(String)
	 */
	/**
	 * 以字节为单位检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 代表列值的字节
	 * @see  java.sql.ResultSet＃getByte（String）
	 */
	byte getByte(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Date object.
	 * @param columnIndex the column index
	 * @return a Date object representing the column value
	 * @see java.sql.ResultSet#getDate(int)
	 */
	/**
	 * 检索当前行中指示列的值作为Date对象。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的Date对象
	 * @see  java.sql.ResultSet＃getDate（int）
	 */
	@Nullable
	Date getDate(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Date object.
	 * @param columnLabel the column label
	 * @return a Date object representing the column value
	 * @see java.sql.ResultSet#getDate(String)
	 */
	/**
	 * 检索当前行中指示列的值作为Date对象。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 代表列值的Date对象
	 * @see  java.sql.ResultSet＃getDate（String）
	 */
	@Nullable
	Date getDate(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Date object.
	 * @param columnIndex the column index
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Date object representing the column value
	 * @see java.sql.ResultSet#getDate(int, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Date对象。 
	 *  
	 * @param  columnIndex列索引
	 * @param 校准用于构造Date的Calendar 
	 * @return 代表列值的Date对象
	 * @see  java.sql.ResultSet＃getDate（int，Calendar）
	 */
	@Nullable
	Date getDate(int columnIndex, Calendar cal) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Date object.
	 * @param columnLabel the column label
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Date object representing the column value
	 * @see java.sql.ResultSet#getDate(String, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Date对象。 
	 *  
	 * @param  columnLabel标签列标签
	 * @param 校准用于构造Date的Calendar 
	 * @return 代表列值的Date对象
	 * @see  java.sql.ResultSet＃getDate（String，Calendar）
	 */
	@Nullable
	Date getDate(String columnLabel, Calendar cal) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Double object.
	 * @param columnIndex the column index
	 * @return a Double object representing the column value
	 * @see java.sql.ResultSet#getDouble(int)
	 */
	/**
	 * 以Double对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 一个表示列值的Double对象
	 * @see  java.sql.ResultSet＃getDouble（int）
	 */
	double getDouble(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Double object.
	 * @param columnLabel the column label
	 * @return a Double object representing the column value
	 * @see java.sql.ResultSet#getDouble(String)
	 */
	/**
	 * 以Double对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 一个表示列值的Double对象
	 * @see  java.sql.ResultSet＃getDouble（String）
	 */
	double getDouble(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a float.
	 * @param columnIndex the column index
	 * @return a float representing the column value
	 * @see java.sql.ResultSet#getFloat(int)
	 */
	/**
	 * 以浮点数检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的浮点数
	 * @see  java.sql.ResultSet＃getFloat（int）
	 */
	float getFloat(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a float.
	 * @param columnLabel the column label
	 * @return a float representing the column value
	 * @see java.sql.ResultSet#getFloat(String)
	 */
	/**
	 * 以浮点数检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标签列标签
	 * @return 代表列值的浮点数
	 * @see  java.sql.ResultSet＃getFloat（String）
	 */
	float getFloat(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an int.
	 * @param columnIndex the column index
	 * @return an int representing the column value
	 * @see java.sql.ResultSet#getInt(int)
	 */
	/**
	 * 以int形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 一个表示列值的整数
	 * @see  java.sql.ResultSet＃getInt（int）
	 */
	int getInt(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an int.
	 * @param columnLabel the column label
	 * @return an int representing the column value
	 * @see java.sql.ResultSet#getInt(String)
	 */
	/**
	 * 以int形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 表示列值的int 
	 * @see  java.sql.ResultSet＃getInt（String）
	 */
	int getInt(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a long.
	 * @param columnIndex the column index
	 * @return a long representing the column value
	 * @see java.sql.ResultSet#getLong(int)
	 */
	/**
	 * 以long长度检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的长整数
	 * @see  java.sql.ResultSet＃getLong（int）
	 */
	long getLong(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a long.
	 * @param columnLabel the column label
	 * @return a long representing the column value
	 * @see java.sql.ResultSet#getLong(String)
	 */
	/**
	 * 以long长度检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel将列标签
	 * @return 标记为代表列值的长整数
	 * @see  java.sql.ResultSet＃getLong（String）
	 */
	long getLong(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a String
	 * (for NCHAR, NVARCHAR, LONGNVARCHAR columns).
	 * @param columnIndex the column index
	 * @return a String representing the column value
	 * @since 4.1.3
	 * @see java.sql.ResultSet#getNString(int)
	 */
	/**
	 * 以字符串形式检索当前行中指示列的值（对于NCHAR，NVARCHAR，LONGNVARCHAR列）。 
	 *  
	 * @param  columnIndex列索引
	 * @return 表示列值的字符串@since 4.1.3 
	 * @see  java.sql.ResultSet＃getNString（int）
	 */
	@Nullable
	String getNString(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a String
	 * (for NCHAR, NVARCHAR, LONGNVARCHAR columns).
	 * @param columnLabel the column label
	 * @return a String representing the column value
	 * @since 4.1.3
	 * @see java.sql.ResultSet#getNString(String)
	 */
	/**
	 * 以字符串形式检索当前行中指示列的值（对于NCHAR，NVARCHAR，LONGNVARCHAR列）。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 一个表示列值的字符串@since 4.1.3 
	 * @see  java.sql.ResultSet＃getNString（String）
	 */
	@Nullable
	String getNString(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnIndex the column index
	 * @return a Object representing the column value
	 * @see java.sql.ResultSet#getObject(int)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 一个表示列值的对象
	 * @see  java.sql.ResultSet＃getObject（int）
	 */
	@Nullable
	Object getObject(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnLabel the column label
	 * @return a Object representing the column value
	 * @see java.sql.ResultSet#getObject(String)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 一个表示列值的对象
	 * @see  java.sql.ResultSet＃getObject（String）
	 */
	@Nullable
	Object getObject(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnIndex the column index
	 * @param map a Map object containing the mapping from SQL types to Java types
	 * @return a Object representing the column value
	 * @see java.sql.ResultSet#getObject(int, Map)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @param 映射一个Map对象，该对象包含从SQL类型到Java类型的映射
	 * @return 一个表示列值的对象
	 * @see  java.sql.ResultSet＃getObject（int，Map ）
	 */
	@Nullable
	Object getObject(int columnIndex,  Map<String, Class<?>> map) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnLabel the column label
	 * @param map a Map object containing the mapping from SQL types to Java types
	 * @return a Object representing the column value
	 * @see java.sql.ResultSet#getObject(String, Map)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @param 映射一个Map对象，该对象包含从SQL类型到Java类型的映射
	 * @return 一个表示列值的对象
	 * @see  java.sql.ResultSet＃getObject（String，Map ）
	 */
	@Nullable
	Object getObject(String columnLabel,  Map<String, Class<?>> map) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnIndex the column index
	 * @param type the Java type to convert the designated column to
	 * @return a Object representing the column value
	 * @since 4.1.3
	 * @see java.sql.ResultSet#getObject(int, Class)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @param 键入Java类型，将指定的列转换为
	 * @return 一个表示列值的对象@since 4.1.3 
	 * @see  java.sql.ResultSet＃getObject（int ，班级）
	 */
	@Nullable
	<T> T getObject(int columnIndex, Class<T> type) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as an Object.
	 * @param columnLabel the column label
	 * @param type the Java type to convert the designated column to
	 * @return a Object representing the column value
	 * @since 4.1.3
	 * @see java.sql.ResultSet#getObject(String, Class)
	 */
	/**
	 * 以对象的形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标记列标签
	 * @param 键入Java类型以将指定的列转换为
	 * @return 代表列值的Object @since 4.1.3 
	 * @see  java.sql.ResultSet＃getObject（String ，班级）
	 */
	@Nullable
	<T> T getObject(String columnLabel, Class<T> type) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a short.
	 * @param columnIndex the column index
	 * @return a short representing the column value
	 * @see java.sql.ResultSet#getShort(int)
	 */
	/**
	 * 以short形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 表示列值的缩写
	 * @see  java.sql.ResultSet＃getShort（int）
	 */
	short getShort(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a short.
	 * @param columnLabel the column label
	 * @return a short representing the column value
	 * @see java.sql.ResultSet#getShort(String)
	 */
	/**
	 * 以short形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标签列标签
	 * @return 表示列值的缩写
	 * @see  java.sql.ResultSet＃getShort（String）
	 */
	short getShort(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a String.
	 * @param columnIndex the column index
	 * @return a String representing the column value
	 * @see java.sql.ResultSet#getString(int)
	 */
	/**
	 * 以字符串形式检索当前行中指示列的值。 
	 *  
	 * @param  columnIndex列索引
	 * @return 一个表示列值的字符串
	 * @see  java.sql.ResultSet＃getString（int）
	 */
	@Nullable
	String getString(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a String.
	 * @param columnLabel the column label
	 * @return a String representing the column value
	 * @see java.sql.ResultSet#getString(String)
	 */
	/**
	 * 以字符串形式检索当前行中指示列的值。 
	 *  
	 * @param  columnLabel标签列标签
	 * @return 代表列值的字符串
	 * @see  java.sql.ResultSet＃getString（String）
	 */
	@Nullable
	String getString(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Time object.
	 * @param columnIndex the column index
	 * @return a Time object representing the column value
	 * @see java.sql.ResultSet#getTime(int)
	 */
	/**
	 * 检索当前行中指示列的值作为Time对象。 
	 *  
	 * @param  columnIndex列索引
	 * @return 表示列值的Time对象
	 * @see  java.sql.ResultSet＃getTime（int）
	 */
	@Nullable
	Time getTime(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Time object.
	 * @param columnLabel the column label
	 * @return a Time object representing the column value
	 * @see java.sql.ResultSet#getTime(String)
	 */
	/**
	 * 检索当前行中指示列的值作为Time对象。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 表示列值的Time对象
	 * @see  java.sql.ResultSet＃getTime（String）
	 */
	@Nullable
	Time getTime(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Time object.
	 * @param columnIndex the column index
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Time object representing the column value
	 * @see java.sql.ResultSet#getTime(int, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Time对象。 
	 *  
	 * @param  columnIndex列索引
	 * @param 校准用于构造日期的Calendar 
	 * @return 表示列值的Time对象
	 * @see  java.sql.ResultSet＃getTime（int，Calendar）
	 */
	@Nullable
	Time getTime(int columnIndex, Calendar cal) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Time object.
	 * @param columnLabel the column label
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Time object representing the column value
	 * @see java.sql.ResultSet#getTime(String, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Time对象。 
	 *  
	 * @param  columnLabel标签列标签
	 * @param 校准用于构造日期的Calendar 
	 * @return 表示列值的Time对象
	 * @see  java.sql.ResultSet＃getTime（String，Calendar）
	 */
	@Nullable
	Time getTime(String columnLabel, Calendar cal) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Timestamp object.
	 * @param columnIndex the column index
	 * @return a Timestamp object representing the column value
	 * @see java.sql.ResultSet#getTimestamp(int)
	 */
	/**
	 * 检索当前行中指示列的值作为Timestamp对象。 
	 *  
	 * @param  columnIndex列索引
	 * @return 代表列值的Timestamp对象
	 * @see  java.sql.ResultSet＃getTimestamp（int）
	 */
	@Nullable
	Timestamp getTimestamp(int columnIndex) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Timestamp object.
	 * @param columnLabel the column label
	 * @return a Timestamp object representing the column value
	 * @see java.sql.ResultSet#getTimestamp(String)
	 */
	/**
	 * 检索当前行中指示列的值作为Timestamp对象。 
	 *  
	 * @param  columnLabel标记列标签
	 * @return 代表列值的Timestamp对象
	 * @see  java.sql.ResultSet＃getTimestamp（String）
	 */
	@Nullable
	Timestamp getTimestamp(String columnLabel) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Timestamp object.
	 * @param columnIndex the column index
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Timestamp object representing the column value
	 * @see java.sql.ResultSet#getTimestamp(int, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Timestamp对象。 
	 *  
	 * @param  columnIndex列索引
	 * @param 校准用于构造日期的Calendar 
	 * @return 表示列值的Timestamp对象
	 * @see  java.sql.ResultSet＃getTimestamp（int，Calendar）
	 */
	@Nullable
	Timestamp getTimestamp(int columnIndex, Calendar cal) throws InvalidResultSetAccessException;

	/**
	 * Retrieve the value of the indicated column in the current row as a Timestamp object.
	 * @param columnLabel the column label
	 * @param cal the Calendar to use in constructing the Date
	 * @return a Timestamp object representing the column value
	 * @see java.sql.ResultSet#getTimestamp(String, Calendar)
	 */
	/**
	 * 检索当前行中指示列的值作为Timestamp对象。 
	 *  
	 * @param  columnLabel标签列标签
	 * @param 校准用于构造日期的Calendar 
	 * @return 代表列值的Timestamp对象
	 * @see  java.sql.ResultSet＃getTimestamp（String，Calendar）
	 */
	@Nullable
	Timestamp getTimestamp(String columnLabel, Calendar cal) throws InvalidResultSetAccessException;


	// RowSet navigation methods

	/**
	 * Move the cursor to the given row number in the row set, just after the last row.
	 * @param row the number of the row where the cursor should move
	 * @return {@code true} if the cursor is on the row set, {@code false} otherwise
	 * @see java.sql.ResultSet#absolute(int)
	 */
	/**
	 * 将光标移动到行集中给定的行号，紧接在最后一行之后。 
	 *  
	 * @param  row光标应移动到的行号
	 * @return  {@code  true}，如果光标位于行集上，{<@code> false}否则，<
	 * @see> java.sql .ResultSet＃absolute（int）
	 */
	boolean absolute(int row) throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the end of this row set.
	 * @see java.sql.ResultSet#afterLast()
	 */
	/**
	 * 将光标移到该行集的末尾。 
	 *  
	 * @see  java.sql.ResultSet＃afterLast（）
	 */
	void afterLast() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the front of this row set, just before the first row.
	 * @see java.sql.ResultSet#beforeFirst()
	 */
	/**
	 * 将光标移到该行集的第一行之前。 
	 *  
	 * @see  java.sql.ResultSet＃beforeFirst（）
	 */
	void beforeFirst() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the first row of this row set.
	 * @return {@code true} if the cursor is on a valid row, {@code false} otherwise
	 * @see java.sql.ResultSet#first()
	 */
	/**
	 * 将光标移动到该行集的第一行。 
	 *  
	 * @return  {@code  true}（如果光标在有效行上），{<@code> false}否则
	 * @see  java.sql.ResultSet＃first（）
	 */
	boolean first() throws InvalidResultSetAccessException;

	/**
	 * Retrieve the current row number.
	 * @return the current row number
	 * @see java.sql.ResultSet#getRow()
	 */
	/**
	 * 检索当前行号。 
	 *  
	 * @return 当前行号
	 * @see  java.sql.ResultSet＃getRow（）
	 */
	int getRow() throws InvalidResultSetAccessException;

	/**
	 * Retrieve whether the cursor is after the last row of this row set.
	 * @return {@code true} if the cursor is after the last row, {@code false} otherwise
	 * @see java.sql.ResultSet#isAfterLast()
	 */
	/**
	 * 检索光标是否在该行集的最后一行之后。 
	 *  
	 * @return  {@code  true}（如果光标位于最后一行之后），{<@code> false}否则
	 * @see  java.sql.ResultSet＃isAfterLast（）
	 */
	boolean isAfterLast() throws InvalidResultSetAccessException;

	/**
	 * Retrieve whether the cursor is before the first row of this row set.
	 * @return {@code true} if the cursor is before the first row, {@code false} otherwise
	 * @see java.sql.ResultSet#isBeforeFirst()
	 */
	/**
	 * 检索光标是否在此行集的第一行之前。 
	 *  
	 * @return  {@code  true}（如果光标在第一行之前），{<@code> false}，否则
	 * @see  java.sql.ResultSet＃isBeforeFirst（）
	 */
	boolean isBeforeFirst() throws InvalidResultSetAccessException;

	/**
	 * Retrieve whether the cursor is on the first row of this row set.
	 * @return {@code true} if the cursor is after the first row, {@code false} otherwise
	 * @see java.sql.ResultSet#isFirst()
	 */
	/**
	 * 检索光标是否在该行集的第一行上。 
	 *  
	 * @return  {@code  true}（如果光标在第一行之后），{<@code> false}，否则
	 * @see  java.sql.ResultSet＃isFirst（）
	 */
	boolean isFirst() throws InvalidResultSetAccessException;

	/**
	 * Retrieve whether the cursor is on the last row of this row set.
	 * @return {@code true} if the cursor is after the last row, {@code false} otherwise
	 * @see java.sql.ResultSet#isLast()
	 */
	/**
	 * 检索光标是否在该行集的最后一行。 
	 *  
	 * @return  {@code  true}（如果光标在最后一行之后），{<@code> false}，否则
	 * @see  java.sql.ResultSet＃isLast（）
	 */
	boolean isLast() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the last row of this row set.
	 * @return {@code true} if the cursor is on a valid row, {@code false} otherwise
	 * @see java.sql.ResultSet#last()
	 */
	/**
	 * 将光标移动到该行集的最后一行。 
	 *  
	 * @return  {@code  true}（如果光标在有效行上），{<@code> false}否则
	 * @see  java.sql.ResultSet＃last（）
	 */
	boolean last() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the next row.
	 * @return {@code true} if the new row is valid, {@code false} if there are no more rows
	 * @see java.sql.ResultSet#next()
	 */
	/**
	 * 将光标移到下一行。 
	 *  
	 * @return  {@code  true}（如果新行有效），{<@code> false}（如果没有更多行）
	 * @see  java.sql.ResultSet＃next（）
	 */
	boolean next() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor to the previous row.
	 * @return {@code true} if the new row is valid, {@code false} if it is off the row set
	 * @see java.sql.ResultSet#previous()
	 */
	/**
	 * 将光标移到上一行。 
	 *  
	 * @return  {@code  true}（如果新行有效），{<@code> false}（如果新行不在行集中）
	 * @see  java.sql.ResultSet＃previous（）
	 */
	boolean previous() throws InvalidResultSetAccessException;

	/**
	 * Move the cursor a relative number of rows, either positive or negative.
	 * @return {@code true} if the cursor is on a row, {@code false} otherwise
	 * @see java.sql.ResultSet#relative(int)
	 */
	/**
	 * 将光标移动相对的行数，可以是正数或负数。 
	 *  
	 * @return  {@code  true}（如果光标在行上），{<@code> false}否则
	 * @see  java.sql.ResultSet＃relative（int）
	 */
	boolean relative(int rows) throws InvalidResultSetAccessException;

	/**
	 * Report whether the last column read had a value of SQL {@code NULL}.
	 * <p>Note that you must first call one of the getter methods and then
	 * call the {@code wasNull()} method.
	 * @return {@code true} if the most recent column retrieved was
	 * SQL {@code NULL}, {@code false} otherwise
	 * @see java.sql.ResultSet#wasNull()
	 */
	/**
	 * 报告最后读取的列是否具有SQL {@code  NULL}的值。 
	 *  <p>请注意，您必须首先调用getter方法之一，然后再调用{@code  wasNull（）}方法。 
	 *  
	 * @return  {@code  true}，如果最近检索到的列是SQL {@code  NULL}，{@code  false}，否则
	 * @see  java.sql.ResultSet＃wasNull（）
	 */
	boolean wasNull() throws InvalidResultSetAccessException;

}
