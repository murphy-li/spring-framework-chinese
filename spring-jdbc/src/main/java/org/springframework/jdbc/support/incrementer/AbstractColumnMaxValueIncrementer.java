/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support.incrementer;

import javax.sql.DataSource;

import org.springframework.util.Assert;

/**
 * Abstract base class for {@link DataFieldMaxValueIncrementer} implementations that use
 * a column in a custom sequence table. Subclasses need to provide the specific handling
 * of that table in their {@link #getNextKey()} implementation.
 *
 * @author Juergen Hoeller
 * @since 2.5.3
 */
/**
 * {@link  DataFieldMaxValueIncrementer}实现的抽象基类，该实现使用自定义序列表中的列。 
 * 子类需要在其{@link  #getNextKey（）}实现中提供对该表的特定处理。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@2.5.3起
 */
public abstract class AbstractColumnMaxValueIncrementer extends AbstractDataFieldMaxValueIncrementer {

	/** The name of the column for this sequence. */
	/**
	 * 此序列的列名称。 
	 * 
	 */
	private String columnName;

	/** The number of keys buffered in a cache. */
	/**
	 * 缓存中缓存的键数。 
	 * 
	 */
	private int cacheSize = 1;


	/**
	 * Default constructor for bean property style usage.
	 * @see #setDataSource
	 * @see #setIncrementerName
	 * @see #setColumnName
	 */
	/**
	 * Bean属性样式用法的默认构造函数。 
	 *  
	 * @see  #setDataSource 
	 * @see  #setIncrementerName 
	 * @see  #setColumnName
	 */
	public AbstractColumnMaxValueIncrementer() {
	}

	/**
	 * Convenience constructor.
	 * @param dataSource the DataSource to use
	 * @param incrementerName the name of the sequence/table to use
	 * @param columnName the name of the column in the sequence table to use
	 */
	/**
	 * 便利的构造函数。 
	 *  
	 * @param  dataSource要使用的数据源
	 * @param 增量器名称要使用的序列/表的名称
	 * @param  columnName要使用的序列表中的列的名称
	 */
	public AbstractColumnMaxValueIncrementer(DataSource dataSource, String incrementerName, String columnName) {
		super(dataSource, incrementerName);
		Assert.notNull(columnName, "Column name must not be null");
		this.columnName = columnName;
	}


	/**
	 * Set the name of the column in the sequence table.
	 */
	/**
	 * 在序列表中设置列的名称。 
	 * 
	 */
	public void setColumnName(String columnName) {
		this.columnName = columnName;
	}

	/**
	 * Return the name of the column in the sequence table.
	 */
	/**
	 * 返回序列表中的列名。 
	 * 
	 */
	public String getColumnName() {
		return this.columnName;
	}

	/**
	 * Set the number of buffered keys.
	 */
	/**
	 * 设置缓冲键的数量。 
	 * 
	 */
	public void setCacheSize(int cacheSize) {
		this.cacheSize = cacheSize;
	}

	/**
	 * Return the number of buffered keys.
	 */
	/**
	 * 返回缓冲键的数量。 
	 * 
	 */
	public int getCacheSize() {
		return this.cacheSize;
	}

	@Override
	public void afterPropertiesSet() {
		super.afterPropertiesSet();
		if (this.columnName == null) {
			throw new IllegalArgumentException("Property 'columnName' is required");
		}
	}

}
