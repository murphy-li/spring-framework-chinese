/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.support;

import java.sql.DatabaseMetaData;
import java.sql.SQLException;

/**
 * A callback interface used by the JdbcUtils class. Implementations of this
 * interface perform the actual work of extracting database meta-data, but
 * don't need to worry about exception handling. SQLExceptions will be caught
 * and handled correctly by the JdbcUtils class.
 *
 * @author Thomas Risberg
 * @see JdbcUtils#extractDatabaseMetaData
 */
/**
 * JdbcUtils类使用的回调接口。 
 * 此接口的实现执行提取数据库元数据的实际工作，但无需担心异常处理。 
 *  JdbcUtils类将正确捕获和处理SQLException。 
 *  @author 托马斯·里斯伯格
 * @see  JdbcUtils＃extractDatabaseMetaData
 */
@FunctionalInterface
public interface DatabaseMetaDataCallback {

	/**
	 * Implementations must implement this method to process the meta-data
	 * passed in. Exactly what the implementation chooses to do is up to it.
	 * @param dbmd the DatabaseMetaData to process
	 * @return a result object extracted from the meta-data
	 * (can be an arbitrary object, as needed by the implementation)
	 * @throws SQLException if an SQLException is encountered getting
	 * column values (that is, there's no need to catch SQLException)
	 * @throws MetaDataAccessException in case of other failures while
	 * extracting meta-data (for example, reflection failure)
	 */
	/**
	 * 实现者必须实现此方法来处理传入的元数据。 
	 * 实现者选择要执行的操作完全取决于它。 
	 *  
	 * @param  dbmd DatabaseMetaData以处理
	 * @return 从元数据中提取的结果对象（根据实现需要可以是任意对象）
	 * @throws  SQLException如果在获取列值时遇到SQLException（是，无需捕获SQLException）
	 * @throws  MetaDataAccessException以防在提取元数据时发生其他失败（例如，反射失败）
	 */
	Object processMetaData(DatabaseMetaData dbmd) throws SQLException, MetaDataAccessException;

}
