/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.datasource.embedded;

import javax.sql.DataSource;

/**
 * {@code DataSourceFactory} encapsulates the creation of a particular
 * {@link DataSource} implementation such as a non-pooling
 * {@link org.springframework.jdbc.datasource.SimpleDriverDataSource}
 * or a HikariCP pool setup in the shape of a {@code HikariDataSource}.
 *
 * <p>Call {@link #getConnectionProperties()} to configure normalized
 * {@code DataSource} properties before calling {@link #getDataSource()}
 * to actually get the configured {@code DataSource} instance.
 *
 * @author Keith Donald
 * @author Sam Brannen
 * @since 3.0
 */
/**
 * {@code  DataSourceFactory}封装了特定{@link  DataSource}实现的创建，例如非池化{@link  org.springframework.jdbc.datasource.SimpleDriverDataSource}或形状中的HikariCP池设置{@code  HikariDataSource}。 
 *  <p>在调用{@link  #getDataSource（）}以实际获取已配置的{@code  DataSource}实例之前，调用{@link  #getConnectionProperties（）}以配置规范化的{@code  DataSource}属性。 
 *  。 
 *  @author 基思·唐纳德@author  Sam Brannen @从3.0开始
 */
public interface DataSourceFactory {

	/**
	 * Get the {@linkplain ConnectionProperties connection properties}
	 * of the {@link #getDataSource DataSource} to be configured.
	 */
	/**
	 * 获取要配置的{@link  #getDataSource DataSource}的{@link  plain ConnectionProperties连接属性}。 
	 * 
	 */
	ConnectionProperties getConnectionProperties();

	/**
	 * Get the {@link DataSource} with the
	 * {@linkplain #getConnectionProperties connection properties} applied.
	 */
	/**
	 * 在应用{@link  plain #getConnectionProperties连接属性}的情况下获取{@link 数据源}。 
	 * 
	 */
	DataSource getDataSource();

}
