/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.datasource;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.SQLException;
import java.util.Properties;

import org.springframework.beans.BeanUtils;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Simple implementation of the standard JDBC {@link javax.sql.DataSource} interface,
 * configuring a plain old JDBC {@link java.sql.Driver} via bean properties, and
 * returning a new {@link java.sql.Connection} from every {@code getConnection} call.
 *
 * <p><b>NOTE: This class is not an actual connection pool; it does not actually
 * pool Connections.</b> It just serves as simple replacement for a full-blown
 * connection pool, implementing the same standard interface, but creating new
 * Connections on every call.
 *
 * <p>In a Java EE container, it is recommended to use a JNDI DataSource provided by
 * the container. Such a DataSource can be exposed as a DataSource bean in a Spring
 * ApplicationContext via {@link org.springframework.jndi.JndiObjectFactoryBean},
 * for seamless switching to and from a local DataSource bean like this class.
 *
 * <p>This {@code SimpleDriverDataSource} class was originally designed alongside
 * <a href="https://commons.apache.org/proper/commons-dbcp">Apache Commons DBCP</a>
 * and <a href="https://sourceforge.net/projects/c3p0">C3P0</a>, featuring bean-style
 * {@code BasicDataSource}/{@code ComboPooledDataSource} classes with configuration
 * properties for local resource setups. For a modern JDBC connection pool, consider
 * <a href="https://github.com/brettwooldridge/HikariCP">HikariCP</a> instead,
 * exposing a corresponding {@code HikariDataSource} instance to the application.
 *
 * @author Juergen Hoeller
 * @since 2.5.5
 * @see DriverManagerDataSource
 */
/**
 * 标准JDBC {@link  javax.sql.DataSource}接口的简单实现，通​​过bean属性配置普通的旧JDBC {@link  java.sql.Driver}，并返回新的{@link  java。 
 * 每次{@code  getConnection}调用中的sql.Connection}。 
 *  <p> <b>注意：此类不是实际的连接池； 
 * 它实际上并没有合并连接。 
 * </ b>它只是对功能完善的连接池的简单替代，实现了相同的标准接口，但是在每次调用时都创建了新的连接。 
 *  <p>在Java EE容器中，建议使用容器提供的JNDI数据源。 
 * 可以通过{@link  org.springframework.jndi.JndiObjectFactoryBean}在Spring ApplicationContext中将这样的DataSource公开为DataSource bean，以实现与此类之类的本地DataSource bean之间的无缝切换。 
 *  <p>此{@code  SimpleDriverDataSource}类最初与<a href="https://commons.apache.org/proper/commons-dbcp"> Apache Commons DBCP </a>和<a href = "https://sourceforge.net/projects/c3p0">C3P0 </a>，具有bean样式的{@code  BasicDataSource} / {<@code> ComboPooledDataSource}类，并具有用于本地资源设置的配置属性。 
 * 对于现代JDBC连接池，请考虑使用<a href="https://github.com/brettwooldridge/HikariCP"> HikariCP </a>，向应用程序公开一个相应的{@code  HikariDataSource}实例。 
 *  @author  Juergen Hoeller @2.5.5起
 * @see  DriverManagerDataSource
 */
public class SimpleDriverDataSource extends AbstractDriverBasedDataSource {

	@Nullable
	private Driver driver;


	/**
	 * Constructor for bean-style configuration.
	 */
	/**
	 * Bean样式配置的构造函数。 
	 * 
	 */
	public SimpleDriverDataSource() {
	}

	/**
	 * Create a new DriverManagerDataSource with the given standard Driver parameters.
	 * @param driver the JDBC Driver object
	 * @param url the JDBC URL to use for accessing the DriverManager
	 * @see java.sql.Driver#connect(String, java.util.Properties)
	 */
	/**
	 * 使用给定的标准Driver参数创建一个新的DriverManagerDataSource。 
	 *  
	 * @param 驱动程序JDBC驱动程序对象
	 * @param  URL JDBC URL，用于访问DriverManager 
	 * @see  java.sql.Driver＃connect（String，java.util.Properties）
	 */
	public SimpleDriverDataSource(Driver driver, String url) {
		setDriver(driver);
		setUrl(url);
	}

	/**
	 * Create a new DriverManagerDataSource with the given standard Driver parameters.
	 * @param driver the JDBC Driver object
	 * @param url the JDBC URL to use for accessing the DriverManager
	 * @param username the JDBC username to use for accessing the DriverManager
	 * @param password the JDBC password to use for accessing the DriverManager
	 * @see java.sql.Driver#connect(String, java.util.Properties)
	 */
	/**
	 * 使用给定的标准Driver参数创建一个新的DriverManagerDataSource。 
	 *  
	 * @param 驱动程序JDBC驱动程序对象
	 * @param  url用来访问DriverManager的JDBC URL 
	 * @param 用户名用来访问DriverManager的JDBC用户名
	 * @param 密码JDBC密码用于访问DriverManager 
	 * @see  java.sql.Driver＃connect（字符串，java.util.Properties）
	 */
	public SimpleDriverDataSource(Driver driver, String url, String username, String password) {
		setDriver(driver);
		setUrl(url);
		setUsername(username);
		setPassword(password);
	}

	/**
	 * Create a new DriverManagerDataSource with the given standard Driver parameters.
	 * @param driver the JDBC Driver object
	 * @param url the JDBC URL to use for accessing the DriverManager
	 * @param conProps the JDBC connection properties
	 * @see java.sql.Driver#connect(String, java.util.Properties)
	 */
	/**
	 * 使用给定的标准Driver参数创建一个新的DriverManagerDataSource。 
	 *  
	 * @param 驱动程序JDBC驱动程序对象
	 * @param  url用来访问DriverManager的JDBC URL 
	 * @param 支持JDBC连接属性
	 * @see  java.sql.Driver＃connect（String，java.util。 
	 * 属性）
	 */
	public SimpleDriverDataSource(Driver driver, String url, Properties conProps) {
		setDriver(driver);
		setUrl(url);
		setConnectionProperties(conProps);
	}


	/**
	 * Specify the JDBC Driver implementation class to use.
	 * <p>An instance of this Driver class will be created and held
	 * within the SimpleDriverDataSource.
	 * @see #setDriver
	 */
	/**
	 * 指定要使用的JDBC驱动程序实现类。 
	 *  <p>将创建此Driver类的实例，并将其保存在SimpleDriverDataSource中。 
	 *  
	 * @see  #setDriver
	 */
	public void setDriverClass(Class<? extends Driver> driverClass) {
		this.driver = BeanUtils.instantiateClass(driverClass);
	}

	/**
	 * Specify the JDBC Driver instance to use.
	 * <p>This allows for passing in a shared, possibly pre-configured
	 * Driver instance.
	 * @see #setDriverClass
	 */
	/**
	 * 指定要使用的JDBC驱动程序实例。 
	 *  <p>这允许传入共享的，可能预先配置的驱动程序实例。 
	 *  
	 * @see  #setDriverClass
	 */
	public void setDriver(@Nullable Driver driver) {
		this.driver = driver;
	}

	/**
	 * Return the JDBC Driver instance to use.
	 */
	/**
	 * 返回要使用的JDBC驱动程序实例。 
	 * 
	 */
	@Nullable
	public Driver getDriver() {
		return this.driver;
	}


	@Override
	protected Connection getConnectionFromDriver(Properties props) throws SQLException {
		Driver driver = getDriver();
		String url = getUrl();
		Assert.notNull(driver, "Driver must not be null");
		if (logger.isDebugEnabled()) {
			logger.debug("Creating new JDBC Driver Connection to [" + url + "]");
		}
		return driver.connect(url, props);
	}

}
