/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.datasource;

import java.sql.Connection;
import java.sql.SQLException;

import org.springframework.core.NamedThreadLocal;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

/**
 * An adapter for a target JDBC {@link javax.sql.DataSource}, applying the specified
 * user credentials to every standard {@code getConnection()} call, implicitly
 * invoking {@code getConnection(username, password)} on the target.
 * All other methods simply delegate to the corresponding methods of the
 * target DataSource.
 *
 * <p>Can be used to proxy a target JNDI DataSource that does not have user
 * credentials configured. Client code can work with this DataSource as usual,
 * using the standard {@code getConnection()} call.
 *
 * <p>In the following example, client code can simply transparently work with
 * the preconfigured "myDataSource", implicitly accessing "myTargetDataSource"
 * with the specified user credentials.
 *
 * <pre class="code">
 * &lt;bean id="myTargetDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"&gt;
 *   &lt;property name="jndiName" value="java:comp/env/jdbc/myds"/&gt;
 * &lt;/bean&gt;
 *
 * &lt;bean id="myDataSource" class="org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter"&gt;
 *   &lt;property name="targetDataSource" ref="myTargetDataSource"/&gt;
 *   &lt;property name="username" value="myusername"/&gt;
 *   &lt;property name="password" value="mypassword"/&gt;
 * &lt;/bean></pre>
 *
 * <p>If the "username" is empty, this proxy will simply delegate to the
 * standard {@code getConnection()} method of the target DataSource.
 * This can be used to keep a UserCredentialsDataSourceAdapter bean definition
 * just for the <i>option</i> of implicitly passing in user credentials if
 * the particular target DataSource requires it.
 *
 * @author Juergen Hoeller
 * @since 1.0.2
 * @see #getConnection
 */
/**
 * 目标JDBC {@link  javax.sql.DataSource}的适配器，将指定的用户凭据应用于每个标准{@code  getConnection（）}调用，隐式调用{@code  getConnection（username，password） }。 
 * 所有其他方法仅委托给目标DataSource的相应方法。 
 *  <p>可用于代理未配置用户凭据的目标JNDI数据源。 
 * 使用标准的{@code  getConnection（）}调用，客户端代码可以照常与此DataSource一起使用。 
 *  <p>在下面的示例中，客户端代码可以简单地与预配置的"myDataSource"透明工作，并使用指定的用户凭据隐式访问"myTargetDataSource"。 
 *  <pre class ="code"> <bean id ="myTargetDataSource"class ="org.springframework.jndi.JndiObjectFactoryBean"> <属性名称="jndiName"value ="java：comp / env / jdbc / myds"/> < / bean> <bean id ="myDataSource"class ="org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter"> <属性名称="targetDataSource"ref ="myTargetDataSource"/> <属性名称="用户名"value ="我的用户名"/> <property name ="password"value ="mypassword"/> </ bean> </ pre> <p>如果"用户名"为空，则此代理将简单地委派给标准{@code  getConnection（ ）}方法的目标数据源。 
 * 如果特定的目标数据源需要它，则可以仅将<i>选项</ i>隐式地传递给用户凭据，以此来保留UserCredentialsDataSourceAdapter bean定义。 
 *  @author  Juergen Hoeller @始于1.0.2 
 * @see  #getConnection
 */
public class UserCredentialsDataSourceAdapter extends DelegatingDataSource {

	@Nullable
	private String username;

	@Nullable
	private String password;

	@Nullable
	private String catalog;

	@Nullable
	private String schema;

	private final ThreadLocal<JdbcUserCredentials> threadBoundCredentials =
			new NamedThreadLocal<>("Current JDBC user credentials");


	/**
	 * Set the default username that this adapter should use for retrieving Connections.
	 * <p>Default is no specific user. Note that an explicitly specified username
	 * will always override any username/password specified at the DataSource level.
	 * @see #setPassword
	 * @see #setCredentialsForCurrentThread(String, String)
	 * @see #getConnection(String, String)
	 */
	/**
	 * 设置此适配器用于检索连接的默认用户名。 
	 *  <p>默认为没有特定用户。 
	 * 请注意，明确指定的用户名将始终覆盖在数据源级别指定的任何用户名/密码。 
	 *  
	 * @see  #setPassword 
	 * @see  #setCredentialsForCurrentThread（String，String）
	 * @see  #getConnection（String，String）
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Set the default user's password that this adapter should use for retrieving Connections.
	 * <p>Default is no specific password. Note that an explicitly specified username
	 * will always override any username/password specified at the DataSource level.
	 * @see #setUsername
	 * @see #setCredentialsForCurrentThread(String, String)
	 * @see #getConnection(String, String)
	 */
	/**
	 * 设置此适配器用于检索连接的默认用户密码。 
	 *  <p>默认没有特定密码。 
	 * 请注意，明确指定的用户名将始终覆盖在数据源级别指定的任何用户名/密码。 
	 *  
	 * @see  #setUsername 
	 * @see  #setCredentialsForCurrentThread（String，String）
	 * @see  #getConnection（String，String）
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * Specify a database catalog to be applied to each retrieved Connection.
	 * @since 4.3.2
	 * @see Connection#setCatalog
	 */
	/**
	 * 指定要应用于每个检索到的Connection的数据库目录。 
	 *  @since 4.3.2 
	 * @see 连接#setCatalog
	 */
	public void setCatalog(String catalog) {
		this.catalog = catalog;
	}

	/**
	 * Specify a database schema to be applied to each retrieved Connection.
	 * @since 4.3.2
	 * @see Connection#setSchema
	 */
	/**
	 * 指定要应用于每个检索到的Connection的数据库架构。 
	 *  @since 4.3.2 
	 * @see 连接#setSchema
	 */
	public void setSchema(String schema) {
		this.schema = schema;
	}


	/**
	 * Set user credententials for this proxy and the current thread.
	 * The given username and password will be applied to all subsequent
	 * {@code getConnection()} calls on this DataSource proxy.
	 * <p>This will override any statically specified user credentials,
	 * that is, values of the "username" and "password" bean properties.
	 * @param username the username to apply
	 * @param password the password to apply
	 * @see #removeCredentialsFromCurrentThread
	 */
	/**
	 * 设置此代理和当前线程的用户凭据。 
	 * 给定的用户名和密码将应用于此DataSource代理上的所有后续{@code  getConnection（）}调用。 
	 *  <p>这将覆盖所有静态指定的用户凭据，即"用户名"和"密码"bean属性的值。 
	 *  
	 * @param 用户名要应用的用户名
	 * @param 密码要应用的密码
	 * @see  #removeCredentialsFromCurrentThread
	 */
	public void setCredentialsForCurrentThread(String username, String password) {
		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password));
	}

	/**
	 * Remove any user credentials for this proxy from the current thread.
	 * Statically specified user credentials apply again afterwards.
	 * @see #setCredentialsForCurrentThread
	 */
	/**
	 * 从当前线程中删除此代理的所有用户凭据。 
	 * 之后，静态指定的用户凭据将再次应用。 
	 *  
	 * @see  #setCredentialsForCurrentThread
	 */
	public void removeCredentialsFromCurrentThread() {
		this.threadBoundCredentials.remove();
	}


	/**
	 * Determine whether there are currently thread-bound credentials,
	 * using them if available, falling back to the statically specified
	 * username and password (i.e. values of the bean properties) otherwise.
	 * <p>Delegates to {@link #doGetConnection(String, String)} with the
	 * determined credentials as parameters.
	 * @see #doGetConnection
	 */
	/**
	 * 确定当前是否存在线程绑定凭证，如果可用，则使用它们，否则返回静态指定的用户名和密码（即bean属性的值）。 
	 *  <p>使用确定的凭据作为参数委托给{@link  #doGetConnection（String，String）}。 
	 *  
	 * @see  #doGetConnection
	 */
	@Override
	public Connection getConnection() throws SQLException {
		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get();
		Connection con = (threadCredentials != null ?
				doGetConnection(threadCredentials.username, threadCredentials.password) :
				doGetConnection(this.username, this.password));

		if (this.catalog != null) {
			con.setCatalog(this.catalog);
		}
		if (this.schema != null) {
			con.setSchema(this.schema);
		}
		return con;
	}

	/**
	 * Simply delegates to {@link #doGetConnection(String, String)},
	 * keeping the given user credentials as-is.
	 */
	/**
	 * 只需委派给{@link  #doGetConnection（String，String）}，就可以保持给定的用户凭据不变。 
	 * 
	 */
	@Override
	public Connection getConnection(String username, String password) throws SQLException {
		return doGetConnection(username, password);
	}

	/**
	 * This implementation delegates to the {@code getConnection(username, password)}
	 * method of the target DataSource, passing in the specified user credentials.
	 * If the specified username is empty, it will simply delegate to the standard
	 * {@code getConnection()} method of the target DataSource.
	 * @param username the username to use
	 * @param password the password to use
	 * @return the Connection
	 * @see javax.sql.DataSource#getConnection(String, String)
	 * @see javax.sql.DataSource#getConnection()
	 */
	/**
	 * 此实现委托目标DataSource的{@code  getConnection（username，password）}方法，传入指定的用户凭据。 
	 * 如果指定的用户名为空，它将仅委托给目标DataSource的标准{@code  getConnection（）}方法。 
	 *  
	 * @param 用户名要使用的用户名
	 * @param 密码要使用的密码@
	 * @return>连接
	 * @see  javax.sql.DataSource＃getConnection（String，String）
	 * @see  javax.sql.DataSource＃ getConnection（）
	 */
	protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {
		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required");
		if (StringUtils.hasLength(username)) {
			return getTargetDataSource().getConnection(username, password);
		}
		else {
			return getTargetDataSource().getConnection();
		}
	}


	/**
	 * Inner class used as ThreadLocal value.
	 */
	/**
	 * 内部类用作ThreadLocal值。 
	 * 
	 */
	private static final class JdbcUserCredentials {

		public final String username;

		public final String password;

		public JdbcUserCredentials(String username, String password) {
			this.username = username;
			this.password = password;
		}

		@Override
		public String toString() {
			return "JdbcUserCredentials[username='" + this.username + "',password='" + this.password + "']";
		}
	}

}
