/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.datasource.lookup;

import org.springframework.core.Constants;
import org.springframework.lang.Nullable;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.transaction.support.TransactionSynchronizationManager;

/**
 * DataSource that routes to one of various target DataSources based on the
 * current transaction isolation level. The target DataSources need to be
 * configured with the isolation level name as key, as defined on the
 * {@link org.springframework.transaction.TransactionDefinition TransactionDefinition interface}.
 *
 * <p>This is particularly useful in combination with JTA transaction management
 * (typically through Spring's {@link org.springframework.transaction.jta.JtaTransactionManager}).
 * Standard JTA does not support transaction-specific isolation levels. Some JTA
 * providers support isolation levels as a vendor-specific extension (e.g. WebLogic),
 * which is the preferred way of addressing this. As alternative (e.g. on WebSphere),
 * the target database can be represented through multiple JNDI DataSources, each
 * configured with a different isolation level (for the entire DataSource).
 * The present DataSource router allows to transparently switch to the
 * appropriate DataSource based on the current transaction's isolation level.
 *
 * <p>The configuration can for example look like this, assuming that the target
 * DataSources are defined as individual Spring beans with names
 * "myRepeatableReadDataSource", "mySerializableDataSource" and "myDefaultDataSource":
 *
 * <pre class="code">
 * &lt;bean id="dataSourceRouter" class="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter"&gt;
 *   &lt;property name="targetDataSources"&gt;
 *     &lt;map&gt;
 *       &lt;entry key="ISOLATION_REPEATABLE_READ" value-ref="myRepeatableReadDataSource"/&gt;
 *       &lt;entry key="ISOLATION_SERIALIZABLE" value-ref="mySerializableDataSource"/&gt;
 *     &lt;/map&gt;
 *   &lt;/property&gt;
 *   &lt;property name="defaultTargetDataSource" ref="myDefaultDataSource"/&gt;
 * &lt;/bean&gt;</pre>
 *
 * Alternatively, the keyed values can also be data source names, to be resolved
 * through a {@link #setDataSourceLookup DataSourceLookup}: by default, JNDI
 * names for a standard JNDI lookup. This allows for a single concise definition
 * without the need for separate DataSource bean definitions.
 *
 * <pre class="code">
 * &lt;bean id="dataSourceRouter" class="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter"&gt;
 *   &lt;property name="targetDataSources"&gt;
 *     &lt;map&gt;
 *       &lt;entry key="ISOLATION_REPEATABLE_READ" value="java:comp/env/jdbc/myrrds"/&gt;
 *       &lt;entry key="ISOLATION_SERIALIZABLE" value="java:comp/env/jdbc/myserds"/&gt;
 *     &lt;/map&gt;
 *   &lt;/property&gt;
 *   &lt;property name="defaultTargetDataSource" value="java:comp/env/jdbc/mydefds"/&gt;
 * &lt;/bean&gt;</pre>
 *
 * Note: If you are using this router in combination with Spring's
 * {@link org.springframework.transaction.jta.JtaTransactionManager},
 * don't forget to switch the "allowCustomIsolationLevels" flag to "true".
 * (By default, JtaTransactionManager will only accept a default isolation level
 * because of the lack of isolation level support in standard JTA itself.)
 *
 * <pre class="code">
 * &lt;bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"&gt;
 *   &lt;property name="allowCustomIsolationLevels" value="true"/&gt;
 * &lt;/bean&gt;</pre>
 *
 * @author Juergen Hoeller
 * @since 2.0.1
 * @see #setTargetDataSources
 * @see #setDefaultTargetDataSource
 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED
 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED
 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ
 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE
 * @see org.springframework.transaction.jta.JtaTransactionManager
 */
/**
 * 根据当前事务隔离级别路由到各种目标DataSource之一的DataSource。 
 * 需要按照{{@link> org.springframework.transaction.TransactionDefinition TransactionDefinition接口}上的定义，以隔离级别名称作为键来配置目标数据源。 
 *  <p>这与JTA事务管理（通常通过Spring的{@link  org.springframework.transaction.jta.JtaTransactionManager}结合使用）特别有用。 
 * 标准JTA不支持特定于事务的隔离级别。 
 * 一些JTA提供程序支持隔离级别作为特定于供应商的扩展（例如WebLogic），这是解决此问题的首选方法。 
 * 作为替代方案（例如在WebSphere上），可以通过多个JNDI数据源表示目标数据库，每个JNDI数据源都配置有不同的隔离级别（针对整个数据源）。 
 * 本数据源路由器允许基于当前事务的隔离级别透明地切换到适当的数据源。 
 *  <p>例如，假设目标数据源被定义为名称为"myRepeatableReadDataSource"，"mySerializableDataSource"和"myDefaultDataSource"的单个Spring bean，则配置可以如下所示：<pre class ="code"> <bean id ="dataSourceRouter"class ="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter"> <属性名称="targetDataSources"> <map> <entry key ="ISOLATION_REPEATABLE_READ"value-ref ="myRepeatableReadDataSource"/> <entry key ="ISOLATION_SERIALIZABLE"value-ref ="mySerializableDataSource"/> </ map> </ property> <property name ="defaultTargetDataSource"ref ="myDefaultDataSource"/> </ bean> </ pre>或者，键值也可以是数据源名称，将通过{@link  #setDataSourceLookup DataSourceLookup}进行解析：默认情况下，标准JNDI查找的JNDI名称。 
 * 这允许一个简洁的定义，而无需单独的DataSource bean定义。 
 *  <pre class ="code"> <bean id ="dataSourceRouter"class ="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter"> <property name ="targetDataSources"> <map> <entry key ="ISOLATION_REPEATABLE_READ"值="java：comp / env / jdbc / myrrds"/> <entry key ="ISOLATION_SERIALIZABLE"value ="java：comp / env / jdbc / myserds"/> </ map> </ property> <property name ="defaultTargetDataSource "value ="java：comp / env / jdbc / mydefds"/> </ bean> </ pre>注意：如果将此路由器与Spring的{@link  org.springframework.transaction.jta.JtaTransactionManager结合使用}，不要忘记将"allowCustomIsolationLevels"标志切换为"true"。 
 *  （默认情况下，由于标准JTA本身缺乏隔离级别支持，因此JtaTransactionManager仅接受默认的隔离级别。 
 * ）<pre class ="code"> <bean id ="transactionManager"class ="org.springframework.transaction。 
 *  jta.JtaTransactionManager"> <属性名称="allowCustomIsolationLevels"value ="true"/> </ bean> </ pre> @author  Juergen Hoeller @since 2.0.1 
 * @see  #setTargetDataSources 
 * @see  #setDefaultTargetDataSource 
 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_READ_UNCOMMITTED 
 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_READ_COMMITTED 
 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_REPEATABLE_READ 
 * @see  org.springframeworkDefinitionaction #ISOLATION_SERIALIZABLE 
 * @see  org.springframework.transaction.jta.JtaTransactionManager
 */
public class IsolationLevelDataSourceRouter extends AbstractRoutingDataSource {

	/** Constants instance for TransactionDefinition. */
	/**
	 * TransactionDefinition的常量实例。 
	 * 
	 */
	private static final Constants constants = new Constants(TransactionDefinition.class);


	/**
	 * Supports Integer values for the isolation level constants
	 * as well as isolation level names as defined on the
	 * {@link org.springframework.transaction.TransactionDefinition TransactionDefinition interface}.
	 */
	/**
	 * 支持隔离级别常量的整数值，以及在{@link  org.springframework.transaction.TransactionDefinition TransactionDefinition接口}上定义的隔离级别名称。 
	 * 
	 */
	@Override
	protected Object resolveSpecifiedLookupKey(Object lookupKey) {
		if (lookupKey instanceof Integer) {
			return lookupKey;
		}
		else if (lookupKey instanceof String) {
			String constantName = (String) lookupKey;
			if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {
				throw new IllegalArgumentException("Only isolation constants allowed");
			}
			return constants.asNumber(constantName);
		}
		else {
			throw new IllegalArgumentException(
					"Invalid lookup key - needs to be isolation level Integer or isolation level name String: " + lookupKey);
		}
	}

	@Override
	@Nullable
	protected Object determineCurrentLookupKey() {
		return TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();
	}

}
