/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.object;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.lang.Nullable;

/**
 * Reusable RDBMS query in which concrete subclasses must implement
 * the abstract mapRow(ResultSet, int) method to map each row of
 * the JDBC ResultSet into an object.
 *
 * <p>Such manual mapping is usually preferable to "automatic"
 * mapping using reflection, which can become complex in non-trivial
 * cases. For example, the present class allows different objects
 * to be used for different rows (for example, if a subclass is indicated).
 * It allows computed fields to be set. And there's no need for
 * ResultSet columns to have the same names as bean properties.
 * The Pareto Principle in action: going the extra mile to automate
 * the extraction process makes the framework much more complex
 * and delivers little real benefit.
 *
 * <p>Subclasses can be constructed providing SQL, parameter types
 * and a DataSource. SQL will often vary between subclasses.
 *
 * @author Rod Johnson
 * @author Thomas Risberg
 * @author Jean-Pierre Pawlak
 * @param <T> the result type
 * @see org.springframework.jdbc.object.MappingSqlQuery
 * @see org.springframework.jdbc.object.SqlQuery
 */
/**
 * 可重用的RDBMS查询，其中具体的子类必须实现抽象的mapRow（ResultSet，int）方法，以将JDBC ResultSet的每一行映射到一个对象中。 
 *  <p>这种手动映射通常比使用反射的"自动"映射更可取，在非平凡的情况下，这种映射会变得复杂。 
 * 例如，当前类允许将不同的对象用于不同的行（例如，如果指示了子类）。 
 * 它允许设置计算字段。 
 * 而且，不需要ResultSet列具有与bean属性相同的名称。 
 * 帕累托原则的实际应用：多花些精力使提取过程自动化，使框架变得更加复杂，几乎没有任何实际收益。 
 *  <p>可以构造提供SQL，参数类型和数据源的子类。 
 * 在子类之间，SQL通常会有所不同。 
 *  @author  Rod Johnson @author  Thomas Risberg @author  Jean-Pierre Pawlak 
 * @param  <T>结果类型
 * @see  org.springframework.jdbc.object.MappingSqlQuery 
 * @see  org.springframework .jdbc.object.SqlQuery
 */
public abstract class MappingSqlQueryWithParameters<T> extends SqlQuery<T> {

	/**
	 * Constructor to allow use as a JavaBean.
	 */
	/**
	 * 允许用作JavaBean的构造方法。 
	 * 
	 */
	public MappingSqlQueryWithParameters() {
	}

	/**
	 * Convenient constructor with DataSource and SQL string.
	 * @param ds the DataSource to use to get connections
	 * @param sql the SQL to run
	 */
	/**
	 * 带有DataSource和SQL字符串的便捷构造函数。 
	 *  
	 * @param  ds数据源用于获取连接
	 * @param  sql要运行的SQL
	 */
	public MappingSqlQueryWithParameters(DataSource ds, String sql) {
		super(ds, sql);
	}


	/**
	 * Implementation of protected abstract method. This invokes the subclass's
	 * implementation of the mapRow() method.
	 */
	/**
	 * 受保护的抽象方法的实现。 
	 * 这将调用子类的mapRow（）方法的实现。 
	 * 
	 */
	@Override
	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {
		return new RowMapperImpl(parameters, context);
	}

	/**
	 * Subclasses must implement this method to convert each row
	 * of the ResultSet into an object of the result type.
	 * @param rs the ResultSet we're working through
	 * @param rowNum row number (from 0) we're up to
	 * @param parameters to the query (passed to the execute() method).
	 * Subclasses are rarely interested in these.
	 * It can be {@code null} if there are no parameters.
	 * @param context passed to the execute() method.
	 * It can be {@code null} if no contextual information is need.
	 * @return an object of the result type
	 * @throws SQLException if there's an error extracting data.
	 * Subclasses can simply not catch SQLExceptions, relying on the
	 * framework to clean up.
	 */
	/**
	 * 子类必须实现此方法，才能将ResultSet的每一行转换为结果类型的对象。 
	 *  
	 * @param 是我们正在处理的ResultSet，通过
	 * @param  rowNum行号（从0开始），我们最多可以将
	 * @param 参数传递给查询（传递给execute（）方法）。 
	 * 子类很少对这些感兴趣。 
	 * 如果没有参数，则可以为{@code  null}。 
	 *  
	 * @param 上下文传递给execute（）方法。 
	 * 如果不需要上下文信息，则可以为{@code  null}。 
	 *  
	 * @return 结果类型为
	 * @throws 的对象SQLException如果提取数据时出错。 
	 * 子类不能仅仅依靠框架来捕获SQLExceptions。 
	 * 
	 */
	@Nullable
	protected abstract T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context)
			throws SQLException;


	/**
	 * Implementation of RowMapper that calls the enclosing
	 * class's {@code mapRow} method for each row.
	 */
	/**
	 * RowMapper的实现，它为每一行调用封闭类的{@code  mapRow}方法。 
	 * 
	 */
	protected class RowMapperImpl implements RowMapper<T> {

		@Nullable
		private final Object[] params;

		@Nullable
		private final Map<?, ?> context;

		/**
		 * Use an array results. More efficient if we know how many results to expect.
		 */
		/**
		 * 使用数组结果。 
		 * 如果我们知道预期会有多少结果，效率会更高。 
		 * 
		 */
		public RowMapperImpl(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {
			this.params = parameters;
			this.context = context;
		}

		@Override
		@Nullable
		public T mapRow(ResultSet rs, int rowNum) throws SQLException {
			return MappingSqlQueryWithParameters.this.mapRow(rs, rowNum, this.params, this.context);
		}
	}

}
