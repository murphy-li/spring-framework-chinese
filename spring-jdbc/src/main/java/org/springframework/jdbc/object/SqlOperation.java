/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jdbc.object;

import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.namedparam.NamedParameterUtils;
import org.springframework.jdbc.core.namedparam.ParsedSql;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Operation object representing an SQL-based operation such as a query or update,
 * as opposed to a stored procedure.
 *
 * <p>Configures a {@link org.springframework.jdbc.core.PreparedStatementCreatorFactory}
 * based on the declared parameters.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 */
/**
 * 表示基于SQL的操作（例如查询或更新）的操作对象，与存储过程相反。 
 *  <p>根据声明的参数配置{@link  org.springframework.jdbc.core.PreparedStatementCreatorFactory}。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller
 */
public abstract class SqlOperation extends RdbmsOperation {

	/**
	 * Object enabling us to create PreparedStatementCreators efficiently,
	 * based on this class's declared parameters.
	 */
	/**
	 * 使我们能够基于此类的已声明参数有效创建PreparedStatementCreator的对象。 
	 * 
	 */
	@Nullable
	private PreparedStatementCreatorFactory preparedStatementFactory;

	/** Parsed representation of the SQL statement. */
	/**
	 * SQL语句的解析表示形式。 
	 * 
	 */
	@Nullable
	private ParsedSql cachedSql;

	/** Monitor for locking the cached representation of the parsed SQL statement. */
	/**
	 * 监视锁定已解析的SQL语句的缓存表示形式。 
	 * 
	 */
	private final Object parsedSqlMonitor = new Object();


	/**
	 * Overridden method to configure the PreparedStatementCreatorFactory
	 * based on our declared parameters.
	 */
	/**
	 * 根据我们声明的参数配置PreparedStatementCreatorFactory的重写方法。 
	 * 
	 */
	@Override
	protected final void compileInternal() {
		this.preparedStatementFactory = new PreparedStatementCreatorFactory(resolveSql(), getDeclaredParameters());
		this.preparedStatementFactory.setResultSetType(getResultSetType());
		this.preparedStatementFactory.setUpdatableResults(isUpdatableResults());
		this.preparedStatementFactory.setReturnGeneratedKeys(isReturnGeneratedKeys());
		if (getGeneratedKeysColumnNames() != null) {
			this.preparedStatementFactory.setGeneratedKeysColumnNames(getGeneratedKeysColumnNames());
		}

		onCompileInternal();
	}

	/**
	 * Hook method that subclasses may override to post-process compilation.
	 * This implementation does nothing.
	 * @see #compileInternal
	 */
	/**
	 * 子类的Hook方法可能会覆盖后处理编译。 
	 * 此实现不执行任何操作。 
	 *  
	 * @see  #compileInternal
	 */
	protected void onCompileInternal() {
	}

	/**
	 * Obtain a parsed representation of this operation's SQL statement.
	 * <p>Typically used for named parameter parsing.
	 */
	/**
	 * 获取此操作的SQL语句的已解析表示。 
	 *  <p>通常用于命名参数解析。 
	 * 
	 */
	protected ParsedSql getParsedSql() {
		synchronized (this.parsedSqlMonitor) {
			if (this.cachedSql == null) {
				this.cachedSql = NamedParameterUtils.parseSqlStatement(resolveSql());
			}
			return this.cachedSql;
		}
	}


	/**
	 * Return a PreparedStatementSetter to perform an operation
	 * with the given parameters.
	 * @param params the parameter array (may be {@code null})
	 */
	/**
	 * 返回PreparedStatementSetter以给定参数执行操作。 
	 *  
	 * @param 设置参数数组的参数（可以为{@code  null}）
	 */
	protected final PreparedStatementSetter newPreparedStatementSetter(@Nullable Object[] params) {
		Assert.state(this.preparedStatementFactory != null, "No PreparedStatementFactory available");
		return this.preparedStatementFactory.newPreparedStatementSetter(params);
	}

	/**
	 * Return a PreparedStatementCreator to perform an operation
	 * with the given parameters.
	 * @param params the parameter array (may be {@code null})
	 */
	/**
	 * 返回PreparedStatementCreator以给定参数执行操作。 
	 *  
	 * @param 设置参数数组的参数（可以为{@code  null}）
	 */
	protected final PreparedStatementCreator newPreparedStatementCreator(@Nullable Object[] params) {
		Assert.state(this.preparedStatementFactory != null, "No PreparedStatementFactory available");
		return this.preparedStatementFactory.newPreparedStatementCreator(params);
	}

	/**
	 * Return a PreparedStatementCreator to perform an operation
	 * with the given parameters.
	 * @param sqlToUse the actual SQL statement to use (if different from
	 * the factory's, for example because of named parameter expanding)
	 * @param params the parameter array (may be {@code null})
	 */
	/**
	 * 返回PreparedStatementCreator以给定参数执行操作。 
	 *  
	 * @param  sqlTo使用要使用的实际SQL语句（如果与工厂的语句不同，例如由于命名参数的扩展）
	 * @param 将参数数组参数化（可以为{@code  null}）
	 */
	protected final PreparedStatementCreator newPreparedStatementCreator(String sqlToUse, @Nullable Object[] params) {
		Assert.state(this.preparedStatementFactory != null, "No PreparedStatementFactory available");
		return this.preparedStatementFactory.newPreparedStatementCreator(sqlToUse, params);
	}

}
