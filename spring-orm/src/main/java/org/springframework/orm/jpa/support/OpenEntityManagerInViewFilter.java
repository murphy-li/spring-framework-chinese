/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa.support;

import java.io.IOException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceException;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.lang.Nullable;
import org.springframework.orm.jpa.EntityManagerFactoryUtils;
import org.springframework.orm.jpa.EntityManagerHolder;
import org.springframework.transaction.support.TransactionSynchronizationManager;
import org.springframework.util.StringUtils;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.async.CallableProcessingInterceptor;
import org.springframework.web.context.request.async.WebAsyncManager;
import org.springframework.web.context.request.async.WebAsyncUtils;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.filter.OncePerRequestFilter;

/**
 * Servlet Filter that binds a JPA EntityManager to the thread for the
 * entire processing of the request. Intended for the "Open EntityManager in
 * View" pattern, i.e. to allow for lazy loading in web views despite the
 * original transactions already being completed.
 *
 * <p>This filter makes JPA EntityManagers available via the current thread,
 * which will be autodetected by transaction managers. It is suitable for service
 * layer transactions via {@link org.springframework.orm.jpa.JpaTransactionManager}
 * or {@link org.springframework.transaction.jta.JtaTransactionManager} as well
 * as for non-transactional read-only execution.
 *
 * <p>Looks up the EntityManagerFactory in Spring's root web application context.
 * Supports an "entityManagerFactoryBeanName" filter init-param in {@code web.xml};
 * the default bean name is "entityManagerFactory". As an alternative, the
 * "persistenceUnitName" init-param allows for retrieval by logical unit name
 * (as specified in {@code persistence.xml}).
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see OpenEntityManagerInViewInterceptor
 * @see org.springframework.orm.jpa.JpaTransactionManager
 * @see org.springframework.orm.jpa.SharedEntityManagerCreator
 * @see org.springframework.transaction.support.TransactionSynchronizationManager
 */
/**
 * Servlet筛选器，它将JPA EntityManager绑定到线程以完成请求的整个处理。 
 * 旨在用于"在视图中打开EntityManager"模式，即，即使原始交易已经完成，也允许在Web视图中进行延迟加载。 
 *  <p>此过滤器通过当前线程使JPA EntityManagers可用，它将由事务管理器自动检测到。 
 * 它适用于通过{@link  org.springframework.orm.jpa.JpaTransactionManager}或{@link  org.springframework.transaction.jta.JtaTransactionManager}进行的服务层事务以及非事务性只读执行。 
 *  <p>在Spring的根Web应用程序上下文中查找EntityManagerFactory。 
 * 在{@code  web.xml}中支持"entityManagerFactoryBeanName"过滤器init-param； 
 * 缺省的Bean名称是"entityManagerFactory"。 
 * 作为替代，"persistenceUnitName"init-param允许按逻辑单元名称进行检索（如{@code  persistence.xml}中所指定）。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  OpenEntityManagerInViewInterceptor 
 * @see  org.springframework.orm.jpa.JpaTransactionManager 
 * @see  org.springframework.orm.jpa.SharedEntityManagerCreator 
 * @see  org.springframework.transaction。 
 *  support.TransactionSynchronizationManager
 */
public class OpenEntityManagerInViewFilter extends OncePerRequestFilter {

	/**
	 * Default EntityManagerFactory bean name: "entityManagerFactory".
	 * Only applies when no "persistenceUnitName" param has been specified.
	 * @see #setEntityManagerFactoryBeanName
	 * @see #setPersistenceUnitName
	 */
	/**
	 * 默认的EntityManagerFactory bean名称："entityManagerFactory"。 
	 * 仅在未指定"persistenceUnitName"参数的情况下适用。 
	 *  
	 * @see  #setEntityManagerFactoryBeanName 
	 * @see  #setPersistenceUnitName
	 */
	public static final String DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME = "entityManagerFactory";


	@Nullable
	private String entityManagerFactoryBeanName;

	@Nullable
	private String persistenceUnitName;

	@Nullable
	private volatile EntityManagerFactory entityManagerFactory;


	/**
	 * Set the bean name of the EntityManagerFactory to fetch from Spring's
	 * root application context.
	 * <p>Default is "entityManagerFactory". Note that this default only applies
	 * when no "persistenceUnitName" param has been specified.
	 * @see #setPersistenceUnitName
	 * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME
	 */
	/**
	 * 设置EntityManagerFactory的bean名称以从Spring的根应用程序上下文中获取。 
	 *  <p>默认为"entityManagerFactory"。 
	 * 请注意，仅当未指定"persistenceUnitName"参数时，此默认设置才适用。 
	 *  
	 * @see  #setPersistenceUnitName 
	 * @see  #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME
	 */
	public void setEntityManagerFactoryBeanName(@Nullable String entityManagerFactoryBeanName) {
		this.entityManagerFactoryBeanName = entityManagerFactoryBeanName;
	}

	/**
	 * Return the bean name of the EntityManagerFactory to fetch from Spring's
	 * root application context.
	 */
	/**
	 * 返回EntityManagerFactory的bean名称，以从Spring的根应用程序上下文中获取。 
	 * 
	 */
	@Nullable
	protected String getEntityManagerFactoryBeanName() {
		return this.entityManagerFactoryBeanName;
	}

	/**
	 * Set the name of the persistence unit to access the EntityManagerFactory for.
	 * <p>This is an alternative to specifying the EntityManagerFactory by bean name,
	 * resolving it by its persistence unit name instead. If no bean name and no persistence
	 * unit name have been specified, we'll check whether a bean exists for the default
	 * bean name "entityManagerFactory"; if not, a default EntityManagerFactory will
	 * be retrieved through finding a single unique bean of type EntityManagerFactory.
	 * @see #setEntityManagerFactoryBeanName
	 * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME
	 */
	/**
	 * 设置用于访问EntityManagerFactory的持久性单元的名称。 
	 *  <p>这是通过bean名称指定EntityManagerFactory的替代方案，而是通过其持久性单元名称解析它。 
	 * 如果未指定任何Bean名称和持久性单元名称，我们将检查默认Bean名称"entityManagerFactory"是否存在一个Bean； 
	 * 如果不是，则将通过查找EntityManagerFactory类型的单个唯一bean来检索默认的EntityManagerFactory。 
	 *  
	 * @see  #setEntityManagerFactoryBeanName 
	 * @see  #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME
	 */
	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {
		this.persistenceUnitName = persistenceUnitName;
	}

	/**
	 * Return the name of the persistence unit to access the EntityManagerFactory for, if any.
	 */
	/**
	 * 返回用于访问EntityManagerFactory的持久性单元的名称（如果有）。 
	 * 
	 */
	@Nullable
	protected String getPersistenceUnitName() {
		return this.persistenceUnitName;
	}


	/**
	 * Returns "false" so that the filter may re-bind the opened {@code EntityManager}
	 * to each asynchronously dispatched thread and postpone closing it until the very
	 * last asynchronous dispatch.
	 */
	/**
	 * 返回"false"，以便过滤器可以将打开的{@code  EntityManager}重新绑定到每个异步调度的线程，并推迟将其关闭，直到最后一次异步调度。 
	 * 
	 */
	@Override
	protected boolean shouldNotFilterAsyncDispatch() {
		return false;
	}

	/**
	 * Returns "false" so that the filter may provide an {@code EntityManager}
	 * to each error dispatches.
	 */
	/**
	 * 返回"false"，以便过滤器可以为每个错误调度提供一个{@code  EntityManager}。 
	 * 
	 */
	@Override
	protected boolean shouldNotFilterErrorDispatch() {
		return false;
	}

	@Override
	protected void doFilterInternal(
			HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		EntityManagerFactory emf = lookupEntityManagerFactory(request);
		boolean participate = false;

		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
		String key = getAlreadyFilteredAttributeName();

		if (TransactionSynchronizationManager.hasResource(emf)) {
			// Do not modify the EntityManager: just set the participate flag.
			participate = true;
		}
		else {
			boolean isFirstRequest = !isAsyncDispatch(request);
			if (isFirstRequest || !applyEntityManagerBindingInterceptor(asyncManager, key)) {
				logger.debug("Opening JPA EntityManager in OpenEntityManagerInViewFilter");
				try {
					EntityManager em = createEntityManager(emf);
					EntityManagerHolder emHolder = new EntityManagerHolder(em);
					TransactionSynchronizationManager.bindResource(emf, emHolder);

					AsyncRequestInterceptor interceptor = new AsyncRequestInterceptor(emf, emHolder);
					asyncManager.registerCallableInterceptor(key, interceptor);
					asyncManager.registerDeferredResultInterceptor(key, interceptor);
				}
				catch (PersistenceException ex) {
					throw new DataAccessResourceFailureException("Could not create JPA EntityManager", ex);
				}
			}
		}

		try {
			filterChain.doFilter(request, response);
		}

		finally {
			if (!participate) {
				EntityManagerHolder emHolder = (EntityManagerHolder)
						TransactionSynchronizationManager.unbindResource(emf);
				if (!isAsyncStarted(request)) {
					logger.debug("Closing JPA EntityManager in OpenEntityManagerInViewFilter");
					EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
				}
			}
		}
	}

	/**
	 * Look up the EntityManagerFactory that this filter should use,
	 * taking the current HTTP request as argument.
	 * <p>The default implementation delegates to the {@code lookupEntityManagerFactory}
	 * without arguments, caching the EntityManagerFactory reference once obtained.
	 * @return the EntityManagerFactory to use
	 * @see #lookupEntityManagerFactory()
	 */
	/**
	 * 使用当前HTTP请求作为参数，查找此过滤器应使用的EntityManagerFactory。 
	 *  <p>默认实现不带参数地委托给{@code  lookupEntityManagerFactory}，对获得的EntityManagerFactory引用进行缓存。 
	 *  
	 * @return  EntityManagerFactory以使用
	 * @see  #lookupEntityManagerFactory（）
	 */
	protected EntityManagerFactory lookupEntityManagerFactory(HttpServletRequest request) {
		EntityManagerFactory emf = this.entityManagerFactory;
		if (emf == null) {
			emf = lookupEntityManagerFactory();
			this.entityManagerFactory = emf;
		}
		return emf;
	}

	/**
	 * Look up the EntityManagerFactory that this filter should use.
	 * <p>The default implementation looks for a bean with the specified name
	 * in Spring's root application context.
	 * @return the EntityManagerFactory to use
	 * @see #getEntityManagerFactoryBeanName
	 */
	/**
	 * 查找此过滤器应使用的EntityManagerFactory。 
	 *  <p>默认实现在Spring的根应用程序上下文中查找具有指定名称的bean。 
	 *  
	 * @return  EntityManagerFactory以使用
	 * @see  #getEntityManagerFactoryBeanName
	 */
	protected EntityManagerFactory lookupEntityManagerFactory() {
		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());
		String emfBeanName = getEntityManagerFactoryBeanName();
		String puName = getPersistenceUnitName();
		if (StringUtils.hasLength(emfBeanName)) {
			return wac.getBean(emfBeanName, EntityManagerFactory.class);
		}
		else if (!StringUtils.hasLength(puName) && wac.containsBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME)) {
			return wac.getBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME, EntityManagerFactory.class);
		}
		else {
			// Includes fallback search for single EntityManagerFactory bean by type.
			return EntityManagerFactoryUtils.findEntityManagerFactory(wac, puName);
		}
	}

	/**
	 * Create a JPA EntityManager to be bound to a request.
	 * <p>Can be overridden in subclasses.
	 * @param emf the EntityManagerFactory to use
	 * @see javax.persistence.EntityManagerFactory#createEntityManager()
	 */
	/**
	 * 创建要绑定到请求的JPA EntityManager。 
	 *  <p>可以在子类中覆盖。 
	 *  
	 * @param 使用EntityManagerFactory来使用
	 * @see  javax.persistence.EntityManagerFactory＃createEntityManager（）
	 */
	protected EntityManager createEntityManager(EntityManagerFactory emf) {
		return emf.createEntityManager();
	}

	private boolean applyEntityManagerBindingInterceptor(WebAsyncManager asyncManager, String key) {
		CallableProcessingInterceptor cpi = asyncManager.getCallableInterceptor(key);
		if (cpi == null) {
			return false;
		}
		((AsyncRequestInterceptor) cpi).bindEntityManager();
		return true;
	}

}
