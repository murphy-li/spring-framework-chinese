/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.spi.PersistenceProvider;
import javax.persistence.spi.PersistenceUnitInfo;
import javax.sql.DataSource;

import org.springframework.lang.Nullable;

/**
 * Metadata interface for a Spring-managed JPA {@link EntityManagerFactory}.
 *
 * <p>This facility can be obtained from Spring-managed EntityManagerFactory
 * proxies through casting the EntityManagerFactory handle to this interface.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * Spring管理的JPA {@link  EntityManagerFactory}的元数据接口。 
 *  <p>可以通过将EntityManagerFactory句柄投射到此接口从Spring管理的EntityManagerFactory代理获得此功能。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @始于2.0
 */
public interface EntityManagerFactoryInfo {

	/**
	 * Return the raw underlying EntityManagerFactory.
	 * @return the unadorned EntityManagerFactory (never {@code null})
	 */
	/**
	 * 返回原始基础EntityManagerFactory。 
	 *  
	 * @return 朴素的EntityManagerFactory（从不{<@@code> null}）
	 */
	EntityManagerFactory getNativeEntityManagerFactory();

	/**
	 * Return the underlying PersistenceProvider that the underlying
	 * EntityManagerFactory was created with.
	 * @return the PersistenceProvider used to create this EntityManagerFactory,
	 * or {@code null} if the standard JPA provider autodetection process
	 * was used to configure the EntityManagerFactory
	 */
	/**
	 * 返回创建基础EntityManagerFactory的基础PersistenceProvider。 
	 *  
	 * @return 用于创建此EntityManagerFactory的PersistenceProvider，如果使用标准JPA提供程序自动检测过程来配置EntityManagerFactory，则为{@code  null}
	 */
	@Nullable
	PersistenceProvider getPersistenceProvider();

	/**
	 * Return the PersistenceUnitInfo used to create this
	 * EntityManagerFactory, if the in-container API was used.
	 * @return the PersistenceUnitInfo used to create this EntityManagerFactory,
	 * or {@code null} if the in-container contract was not used to
	 * configure the EntityManagerFactory
	 */
	/**
	 * 如果使用了容器内API，则返回用于创建此EntityManagerFactory的PersistenceUnitInfo。 
	 *  
	 * @return 用于创建此EntityManagerFactory的PersistenceUnitInfo； 
	 * 如果未使用容器内协定配置EntityManagerFactory，则为{@code  null}
	 */
	@Nullable
	PersistenceUnitInfo getPersistenceUnitInfo();

	/**
	 * Return the name of the persistence unit used to create this
	 * EntityManagerFactory, or {@code null} if it is an unnamed default.
	 * <p>If {@code getPersistenceUnitInfo()} returns non-null, the result of
	 * {@code getPersistenceUnitName()} must be equal to the value returned by
	 * {@code PersistenceUnitInfo.getPersistenceUnitName()}.
	 * @see #getPersistenceUnitInfo()
	 * @see javax.persistence.spi.PersistenceUnitInfo#getPersistenceUnitName()
	 */
	/**
	 * 返回用于创建此EntityManagerFactory的持久性单元的名称； 
	 * 如果它是未命名的默认值，则返回{@code  null}。 
	 *  <p>如果{@code  getPersistenceUnitInfo（）}返回非null，则{@code  getPersistenceUnitName（）}的结果必须等于{@code  PersistenceUnitInfo.getPersistenceUnitName（）}返回的值。 
	 *  
	 * @see  #getPersistenceUnitInfo（）
	 * @see  javax.persistence.spi.PersistenceUnitInfo＃getPersistenceUnitName（）
	 */
	@Nullable
	String getPersistenceUnitName();

	/**
	 * Return the JDBC DataSource that this EntityManagerFactory
	 * obtains its JDBC Connections from.
	 * @return the JDBC DataSource, or {@code null} if not known
	 */
	/**
	 * 返回此EntityManagerFactory从其获取JDBC连接的JDBC数据源。 
	 *  
	 * @return  JDBC数据源，如果未知，则为{<@@code> null}
	 */
	@Nullable
	DataSource getDataSource();

	/**
	 * Return the (potentially vendor-specific) EntityManager interface
	 * that this factory's EntityManagers will implement.
	 * <p>A {@code null} return value suggests that autodetection is supposed
	 * to happen: either based on a target {@code EntityManager} instance
	 * or simply defaulting to {@code javax.persistence.EntityManager}.
	 */
	/**
	 * 返回此工厂的EntityManager将实现的（可能是特定于供应商的）EntityManager接口。 
	 *  <p>一个{@code  null}返回值表明应该进行自动检测：基于目标{@code  EntityManager}实例，或者只是默认为{@code  javax.persistence.EntityManager}。 
	 * 
	 */
	@Nullable
	Class<? extends EntityManager> getEntityManagerInterface();

	/**
	 * Return the vendor-specific JpaDialect implementation for this
	 * EntityManagerFactory, or {@code null} if not known.
	 */
	/**
	 * 返回此EntityManagerFactory的供应商特定的JpaDialect实现，如果未知，则返回{@code  null}。 
	 * 
	 */
	@Nullable
	JpaDialect getJpaDialect();

	/**
	 * Return the ClassLoader that the application's beans are loaded with.
	 * <p>Proxies will be generated in this ClassLoader.
	 */
	/**
	 * 返回与应用程序的Bean一起加载的ClassLoader。 
	 *  <p>代理将在此ClassLoader中生成。 
	 * 
	 */
	ClassLoader getBeanClassLoader();

}
