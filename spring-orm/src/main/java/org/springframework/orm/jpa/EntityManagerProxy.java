/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa;

import javax.persistence.EntityManager;

/**
 * Subinterface of {@link javax.persistence.EntityManager} to be implemented by
 * EntityManager proxies. Allows access to the underlying target EntityManager.
 *
 * <p>This interface is mainly intended for framework usage. Application code
 * should prefer the use of the {@link javax.persistence.EntityManager#getDelegate()}
 * method to access native functionality of the underlying resource.
 *
 * @author Juergen Hoeller
 * @since 2.5
 */
/**
 * {@link  javax.persistence.EntityManager}的子接口将由EntityManager代理实现。 
 * 允许访问基础目标EntityManager。 
 *  <p>此接口主要用于框架使用。 
 * 应用程序代码应该更喜欢使用{@link  javax.persistence.EntityManager＃getDelegate（）}方法来访问基础资源的本机功能。 
 *  @author  Juergen Hoeller @从2.5开始
 */
public interface EntityManagerProxy extends EntityManager {

	/**
	 * Return the underlying EntityManager that this proxy will delegate to.
	 * <p>In case of an extended EntityManager, this will be the associated
	 * raw EntityManager.
	 * <p>In case of a shared ("transactional") EntityManager, this will be
	 * the raw EntityManager that is currently associated with the transaction.
	 * Outside of a transaction, an IllegalStateException will be thrown.
	 * @return the underlying raw EntityManager (never {@code null})
	 * @throws IllegalStateException if no underlying EntityManager is available
	 */
	/**
	 * 返回此代理将委派给的基础EntityManager。 
	 *  <p>对于扩展的EntityManager，它将是关联的原始EntityManager。 
	 *  <p>在共享（"事务"）EntityManager的情况下，这将是当前与事务关联的原始EntityManager。 
	 * 在事务之外，将抛出IllegalStateException。 
	 *  
	 * @return 基础原始EntityManager（决不{<@@code> null}）
	 * @throws 如果没有可用的基础EntityManager，则抛出IllegalStateException
	 */
	EntityManager getTargetEntityManager() throws IllegalStateException;

}
