/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa;

import java.sql.SQLException;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;

import org.springframework.dao.support.PersistenceExceptionTranslator;
import org.springframework.jdbc.datasource.ConnectionHandle;
import org.springframework.lang.Nullable;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionException;

/**
 * SPI strategy that encapsulates certain functionality that standard JPA 2.1 does
 * not offer, such as access to the underlying JDBC Connection. This strategy is
 * mainly intended for standalone usage of a JPA provider; most of its functionality
 * is not relevant when running with JTA transactions.
 *
 * <p>In general, it is recommended to derive from {@link DefaultJpaDialect} instead
 * of implementing this interface directly. This allows for inheriting common behavior
 * (present and future) from DefaultJpaDialect, only overriding specific hooks to
 * plug in concrete vendor-specific behavior.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @since 2.0
 * @see DefaultJpaDialect
 * @see JpaTransactionManager#setJpaDialect
 * @see JpaVendorAdapter#getJpaDialect()
 * @see AbstractEntityManagerFactoryBean#setJpaDialect
 * @see AbstractEntityManagerFactoryBean#setJpaVendorAdapter
 */
/**
 * SPI策略封装了标准JPA 2.1不提供的某些功能，例如对基础JDBC连接的访问​​。 
 * 该策略主要用于JPA提供程序的独立使用。 
 * 与JTA事务一起运行时，其大多数功能都不相关。 
 *  <p>通常，建议从{@link  DefaultJpaDialect}派生而不是直接实现此接口。 
 * 这允许从DefaultJpaDialect继承常见的行为（现在和将来），仅覆盖特定的挂钩来插入特定于供应商的特定行为。 
 *  @author  Juergen Hoeller @author 罗德·约翰逊@since 2.0起
 */
public interface JpaDialect extends PersistenceExceptionTranslator {

	/**
	 * Begin the given JPA transaction, applying the semantics specified by the
	 * given Spring transaction definition (in particular, an isolation level
	 * and a timeout). Called by JpaTransactionManager on transaction begin.
	 * <p>An implementation can configure the JPA Transaction object and then
	 * invoke {@code begin}, or invoke a special begin method that takes,
	 * for example, an isolation level.
	 * <p>An implementation can apply the read-only flag as flush mode. In that case,
	 * a transaction data object can be returned that holds the previous flush mode
	 * (and possibly other data), to be reset in {@code cleanupTransaction}.
	 * It may also apply the read-only flag and isolation level to the underlying
	 * JDBC Connection before beginning the transaction.
	 * <p>Implementations can also use the Spring transaction name, as exposed by the
	 * passed-in TransactionDefinition, to optimize for specific data access use cases
	 * (effectively using the current transaction name as use case identifier).
	 * <p>This method also allows for exposing savepoint capabilities if supported by
	 * the persistence provider, through returning an Object that implements Spring's
	 * {@link org.springframework.transaction.SavepointManager} interface.
	 * {@link JpaTransactionManager} will use this capability if needed.
	 * @param entityManager the EntityManager to begin a JPA transaction on
	 * @param definition the Spring transaction definition that defines semantics
	 * @return an arbitrary object that holds transaction data, if any
	 * (to be passed into {@link #cleanupTransaction}). May implement the
	 * {@link org.springframework.transaction.SavepointManager} interface.
	 * @throws javax.persistence.PersistenceException if thrown by JPA methods
	 * @throws java.sql.SQLException if thrown by JDBC methods
	 * @throws org.springframework.transaction.TransactionException in case of invalid arguments
	 * @see #cleanupTransaction
	 * @see javax.persistence.EntityTransaction#begin
	 * @see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction
	 */
	/**
	 * 应用给定的Spring事务定义（特别是隔离级别和超时），使用给定的JPA事务开始给定的JPA事务。 
	 * 由JpaTransactionManager在事务开始时调用。 
	 *  <p>实现可以配置JPA Transaction对象，然后调用{@code  begin}，或调用采用例如隔离级别的特殊begin方法。 
	 *  <p>实现可以将只读标志用作刷新模式。 
	 * 在这种情况下，可以返回保留先前的刷新模式的事务数据对象（可能还有其他数据），并在{@code  cleanupTransaction}中进行重置。 
	 * 在开始事务之前，它还可以将只读标志和隔离级别应用于基础JDBC连接。 
	 *  <p>实现也可以使用传递的TransactionDefinition公开的Spring事务名称来针对特定的数据访问用例进行优化（有效地使用当前事务名称作为用例标识符）。 
	 *  <p>如果持久性提供程序支持，此方法还允许通过返回实现Spring的{@link  org.springframework.transaction.SavepointManager}接口的对象来公开保存点功能。 
	 *  {@link  JpaTransactionManager}将在需要时使用此功能。 
	 *  
	 * @param 实体管理器EntityManager在
	 * @param 定义上开始JPA事务，定义语义的Spring事务定义
	 * @return 持有事务数据（如果有）的任意对象（将传递到{@link ＃ cleanupTransaction}）。 
	 * 可以实现{@link  org.springframework.transaction.SavepointManager}接口。 
	 *  
	 * @throws 如果由JPA方法抛出，则为javax.persistence.PersistenceException 
	 * @throws 如果由JDBC方法抛出，则为java.sql.SQLException 
	 * @throws 如果参数无效，则为org.springframework.transaction.TransactionException 
	 * @see  #cleanupTransaction 
	 * @see  javax.persistence.EntityTransaction＃begin 
	 * @see  org.springframework.jdbc.datasource.DataSourceUtils＃prepareConnectionForTransaction
	 */
	@Nullable
	Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)
			throws PersistenceException, SQLException, TransactionException;

	/**
	 * Prepare a JPA transaction, applying the specified semantics. Called by
	 * EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction
	 * or a locally joined transaction (e.g. after upgrading an unsynchronized
	 * EntityManager to a synchronized one).
	 * <p>An implementation can apply the read-only flag as flush mode. In that case,
	 * a transaction data object can be returned that holds the previous flush mode
	 * (and possibly other data), to be reset in {@code cleanupTransaction}.
	 * <p>Implementations can also use the Spring transaction name to optimize for
	 * specific data access use cases (effectively using the current transaction
	 * name as use case identifier).
	 * @param entityManager the EntityManager to begin a JPA transaction on
	 * @param readOnly whether the transaction is supposed to be read-only
	 * @param name the name of the transaction (if any)
	 * @return an arbitrary object that holds transaction data, if any
	 * (to be passed into cleanupTransaction)
	 * @throws javax.persistence.PersistenceException if thrown by JPA methods
	 * @see #cleanupTransaction
	 */
	/**
	 * 应用指定的语义准备JPA事务。 
	 * 当在JTA事务或本地加入的事务中加入EntityManager时，由EntityManagerFactoryUtils调用（例如，在将未同步的EntityManager升级为同步对象之后）。 
	 *  <p>实现可以将只读标志用作刷新模式。 
	 * 在这种情况下，可以返回保留先前的刷新模式的事务数据对象（可能还有其他数据），并在{@code  cleanupTransaction}中进行重置。 
	 *  <p>实现还可以使用Spring事务名称针对特定的数据访问用例进行优化（有效地使用当前事务名称作为用例标识符）。 
	 *  
	 * @param 实体管理器EntityManager在
	 * @param 上开始JPA事务readOnly事务是否应该是只读的
	 * @param 命名事务的名称（如果有）
	 * @return 一个任意对象，保存事务数据（如果有）（如果要传递给cleanupTransaction）
	 * @throws  javax.persistence.PersistenceException（由JPA方法抛出）
	 * @see  #cleanupTransaction
	 */
	@Nullable
	Object prepareTransaction(EntityManager entityManager, boolean readOnly, @Nullable String name)
			throws PersistenceException;

	/**
	 * Clean up the transaction via the given transaction data. Called by
	 * JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup.
	 * <p>An implementation can, for example, reset read-only flag and
	 * isolation level of the underlying JDBC Connection. Furthermore,
	 * an exposed data access use case can be reset here.
	 * @param transactionData arbitrary object that holds transaction data, if any
	 * (as returned by beginTransaction or prepareTransaction)
	 * @see #beginTransaction
	 * @see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction
	 */
	/**
	 * 通过给定的交易数据清理交易。 
	 * 在事务清除时由JpaTransactionManager和EntityManagerFactoryUtils调用。 
	 *  <p>例如，实现可以重置基础JDBC连接的只读标志和隔离级别。 
	 * 此外，此处可以重置公开的数据访问用例。 
	 *  
	 * @param  transactionData任意对象，用于保存交易数据（如果有）（由beginTransaction或prepareTransaction返回）
	 * @see  #beginTransaction 
	 * @see  org.springframework.jdbc.datasource.DataSourceUtils＃resetConnectionAfterTransaction
	 */
	void cleanupTransaction(@Nullable Object transactionData);

	/**
	 * Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,
	 * if accessing a relational database. This method will just get invoked if actually
	 * needing access to the underlying JDBC Connection, usually within an active JPA
	 * transaction (for example, by JpaTransactionManager). The returned handle will
	 * be passed into the {@code releaseJdbcConnection} method when not needed anymore.
	 * <p>This strategy is necessary as JPA does not provide a standard way to retrieve
	 * the underlying JDBC Connection (due to the fact that a JPA implementation might not
	 * work with a relational database at all).
	 * <p>Implementations are encouraged to return an unwrapped Connection object, i.e.
	 * the Connection as they got it from the connection pool. This makes it easier for
	 * application code to get at the underlying native JDBC Connection, like an
	 * OracleConnection, which is sometimes necessary for LOB handling etc. We assume
	 * that calling code knows how to properly handle the returned Connection object.
	 * <p>In a simple case where the returned Connection will be auto-closed with the
	 * EntityManager or can be released via the Connection object itself, an
	 * implementation can return a SimpleConnectionHandle that just contains the
	 * Connection. If some other object is needed in {@code releaseJdbcConnection},
	 * an implementation should use a special handle that references that other object.
	 * @param entityManager the current JPA EntityManager
	 * @param readOnly whether the Connection is only needed for read-only purposes
	 * @return a handle for the Connection, to be passed into {@code releaseJdbcConnection},
	 * or {@code null} if no JDBC Connection can be retrieved
	 * @throws javax.persistence.PersistenceException if thrown by JPA methods
	 * @throws java.sql.SQLException if thrown by JDBC methods
	 * @see #releaseJdbcConnection
	 * @see org.springframework.jdbc.datasource.ConnectionHandle#getConnection
	 * @see org.springframework.jdbc.datasource.SimpleConnectionHandle
	 * @see JpaTransactionManager#setDataSource
	 */
	/**
	 * 如果访问关系数据库，则检索给定JPA EntityManager在其下使用的JDBC连接。 
	 * 如果实际上需要访问底层JDBC连接（通常在活动的JPA事务中（例如，通过JpaTransactionManager）），则将仅调用此方法。 
	 * 当不再需要时，返回的句柄将被传递到{@code  releaseJdbcConnection}方法中。 
	 *  <p>该策略是必需的，因为JPA没有提供检索底层JDBC连接的标准方法（由于JPA实现可能根本无法与关系数据库一起使用）。 
	 *  <p>鼓励实现返回一个未包装的Connection对象，即从连接池中获取的Connection对象。 
	 * 这使应用程序代码更容易到达底层的本机JDBC连接（例如OracleConnection），这对于LOB处理等有时是必需的。 
	 * 我们假设调用代码知道如何正确处理返回的Connection对象。 
	 *  <p>在一个简单的情况下，返回的Connection将通过EntityManager自动关闭，或者可以通过Connection对象本身释放，实现可以返回仅包含Connection的SimpleConnectionHandle。 
	 * 如果{@code  releaseJdbcConnection}中需要一些其他对象，则实现应使用引用该其他对象的特殊句柄。 
	 *  
	 * @param  entityManager当前JPA EntityManager 
	 * @param  readOnly是否仅出于只读目的需要Connection 
	 * @return  Connection的句柄，将其传递到{@code  releaseJdbcConnection}或{@code  null}如果无法检索到JDBC连接
	 * @throws  javax.persistence.PersistenceException（如果由JPA方法抛出）
	 * @throws  java.sql.SQLException（如果由JDBC方法抛出）
	 * @see  #releaseJdbcConnection 
	 * @see  org.springframework.jdbc.datasource.ConnectionHandle＃getConnection 
	 * @see  org.springframework.jdbc.datasource.SimpleConnectionHandle 
	 * @see  JpaTransactionManager＃setDataSource
	 */
	@Nullable
	ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)
			throws PersistenceException, SQLException;

	/**
	 * Release the given JDBC Connection, which has originally been retrieved
	 * via {@code getJdbcConnection}. This should be invoked in any case,
	 * to allow for proper release of the retrieved Connection handle.
	 * <p>An implementation might simply do nothing, if the Connection returned
	 * by {@code getJdbcConnection} will be implicitly closed when the JPA
	 * transaction completes or when the EntityManager is closed.
	 * @param conHandle the JDBC Connection handle to release
	 * @param entityManager the current JPA EntityManager
	 * @throws javax.persistence.PersistenceException if thrown by JPA methods
	 * @throws java.sql.SQLException if thrown by JDBC methods
	 * @see #getJdbcConnection
	 */
	/**
	 * 释放给定的JDBC连接，该连接最初是通过{@code  getJdbcConnection}检索的。 
	 * 在任何情况下都应调用此方法，以允许释放释放的Connection句柄。 
	 *  <p>如果在JPA事务完成或EntityManager关闭时，由{@code  getJdbcConnection}返回的Connection将隐式关闭，则实现可能根本不执行任何操作。 
	 *  
	 * @param 处理JDBC连接句柄以释放当前JPA EntityManager当前的JPA EntityManager 
	 * @throws  javax.persistence.PersistenceException（如果由JPA方法抛出）
	 * @throws  java.sql.SQLException（如果由JDBC方法抛出）查看> #getJdbcConnection
	 */
	void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)
			throws PersistenceException, SQLException;

}
