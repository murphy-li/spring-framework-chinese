/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import javax.persistence.spi.PersistenceProvider;

/**
 * {@link org.springframework.beans.factory.FactoryBean} that creates a JPA
 * {@link javax.persistence.EntityManagerFactory} according to JPA's standard
 * <i>standalone</i> bootstrap contract. This is the simplest way to set up a
 * shared JPA EntityManagerFactory in a Spring application context; the
 * EntityManagerFactory can then be passed to JPA-based DAOs via
 * dependency injection. Note that switching to a JNDI lookup or to a
 * {@link LocalContainerEntityManagerFactoryBean}
 * definition is just a matter of configuration!
 *
 * <p>Configuration settings are usually read from a {@code META-INF/persistence.xml}
 * config file, residing in the class path, according to the JPA standalone bootstrap
 * contract. Additionally, most JPA providers will require a special VM agent
 * (specified on JVM startup) that allows them to instrument application classes.
 * See the Java Persistence API specification and your provider documentation
 * for setup details.
 *
 * <p>This EntityManagerFactory bootstrap is appropriate for standalone applications
 * which solely use JPA for data access. If you want to set up your persistence
 * provider for an external DataSource and/or for global transactions which span
 * multiple resources, you will need to either deploy it into a full Java EE
 * application server and access the deployed EntityManagerFactory via JNDI,
 * or use Spring's {@link LocalContainerEntityManagerFactoryBean} with appropriate
 * configuration for local setup according to JPA's container contract.
 *
 * <p><b>Note:</b> This FactoryBean has limited configuration power in terms of
 * what configuration it is able to pass to the JPA provider. If you need more
 * flexible configuration, for example passing a Spring-managed JDBC DataSource
 * to the JPA provider, consider using Spring's more powerful
 * {@link LocalContainerEntityManagerFactoryBean} instead.
 *
 * <p><b>NOTE: Spring's JPA support requires JPA 2.1 or higher, as of Spring 5.0.</b>
 * JPA 1.0/2.0 based applications are still supported; however, a JPA 2.1 compliant
 * persistence provider is needed at runtime.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @since 2.0
 * @see #setJpaProperties
 * @see #setJpaVendorAdapter
 * @see JpaTransactionManager#setEntityManagerFactory
 * @see LocalContainerEntityManagerFactoryBean
 * @see org.springframework.jndi.JndiObjectFactoryBean
 * @see org.springframework.orm.jpa.support.SharedEntityManagerBean
 * @see javax.persistence.Persistence#createEntityManagerFactory
 * @see javax.persistence.spi.PersistenceProvider#createEntityManagerFactory
 */
/**
 * {@link  org.springframework.beans.factory.FactoryBean}根据JPA的标准<i>独立</ i>引导合同创建一个JPA {@link  javax.persistence.EntityManagerFactory}。 
 * 这是在Spring应用程序上下文中设置共享JPA EntityManagerFactory的最简单方法。 
 * 然后可以通过依赖注入将EntityManagerFactory传递到基于JPA的DAO。 
 * 请注意，切换到JNDI查找或切换到{@link  LocalContainerEntityManagerFactoryBean}定义仅是配置问题！ 
 *  <p>通常根据JPA独立引导合同，从位于类路径中的{@code  META-INF / persistence.xml}配置文件中读取配置设置。 
 * 此外，大多数JPA提供程序将需要一个特殊的VM代理（在JVM启动时指定），以允许他们检测应用程序类。 
 * 有关设置的详细信息，请参见Java Persistence API规范和您的提供程序文档。 
 *  <p>此EntityManagerFactory引导程序适用于仅使用JPA进行数据访问的独立应用程序。 
 * 如果您要为外部数据源和/或跨多个资源的全局事务设置持久性提供程序，则需要将其部署到完整的Java EE应用程序服务器中，并通过JNDI访问已部署的EntityManagerFactory，或使用Spring的{ @link  LocalContainerEntityManagerFactoryBean}，并根据JPA的容器合同对本地设置进行了适当的配置。 
 *  <p> <b>注意：</ b>就可以传递给JPA提供程序的配置而言，此FactoryBean具有有限的配置功能。 
 * 如果您需要更灵活的配置，例如将Spring托管的JDBC数据源传递给JPA提供者，请考虑改用Spring更强大的{@link  LocalContainerEntityManagerFactoryBean}。 
 *  <p> <b>注意：从Spring 5.0开始，Spring的JPA支持需要JPA 2.1或更高版本。 
 * </ b>仍支持基于JPA 1.0 / 2.0的应用程序； 
 * 但是，在运行时需要符合JPA 2.1的持久性提供程序。 
 *  @author  Juergen Hoeller @author 罗德·约翰逊（Rod Johnson）@since 2.0起@
 * @see  org.springframework.orm.jpa.support.SharedEntityManagerBean 
 * @see  javax.persistence.Persistence＃createEntityManagerFactory 
 * @see  javax.persistence.spi.PersistenceProvider＃createEntityManagerFactory
 */
@SuppressWarnings("serial")
public class LocalEntityManagerFactoryBean extends AbstractEntityManagerFactoryBean {

	/**
	 * Initialize the EntityManagerFactory for the given configuration.
	 * @throws javax.persistence.PersistenceException in case of JPA initialization errors
	 */
	/**
	 * 初始化给定配置的EntityManagerFactory。 
	 *  
	 * @throws  javax.persistence.PersistenceException如果发生JPA初始化错误
	 */
	@Override
	protected EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException {
		if (logger.isDebugEnabled()) {
			logger.debug("Building JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'");
		}
		PersistenceProvider provider = getPersistenceProvider();
		if (provider != null) {
			// Create EntityManagerFactory directly through PersistenceProvider.
			EntityManagerFactory emf = provider.createEntityManagerFactory(getPersistenceUnitName(), getJpaPropertyMap());
			if (emf == null) {
				throw new IllegalStateException(
						"PersistenceProvider [" + provider + "] did not return an EntityManagerFactory for name '" +
						getPersistenceUnitName() + "'");
			}
			return emf;
		}
		else {
			// Let JPA perform its standard PersistenceProvider autodetection.
			return Persistence.createEntityManagerFactory(getPersistenceUnitName(), getJpaPropertyMap());
		}
	}

}
