/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa.vendor;

import java.lang.reflect.Method;

import javax.persistence.EntityManagerFactory;

import org.hibernate.SessionFactory;

import org.springframework.beans.factory.FactoryBean;
import org.springframework.lang.Nullable;
import org.springframework.orm.jpa.EntityManagerFactoryAccessor;
import org.springframework.util.Assert;
import org.springframework.util.ReflectionUtils;

/**
 * Simple {@code FactoryBean} that exposes the underlying {@link SessionFactory}
 * behind a Hibernate-backed JPA {@link EntityManagerFactory}.
 *
 * <p>Primarily available for resolving a SessionFactory by JPA persistence unit name
 * via the {@link #setPersistenceUnitName "persistenceUnitName"} bean property.
 *
 * <p>Note that, for straightforward cases, you could also simply declare a factory method:
 *
 * <pre class="code">
 * &lt;bean id="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory"/&gt;
 * </pre>
 *
 * <p>And as of JPA 2.1, {@link EntityManagerFactory#unwrap} provides a nice approach as well,
 * in particular within configuration class arrangements:
 *
 * <pre class="code">
 * &#064;Bean
 * public SessionFactory sessionFactory(@Qualifier("entityManagerFactory") EntityManagerFactory emf) {
 *     return emf.unwrap(SessionFactory.class);
 * }
 * </pre>
 *
 * Please note: Since Hibernate 5.2 changed its {@code SessionFactory} interface to extend JPA's
 * {@code EntityManagerFactory}, you may get conflicts when injecting by type, with both the
 * original factory and your custom {@code SessionFactory} matching {@code EntityManagerFactory}.
 * An explicit qualifier for the original factory (as indicated above) is recommended here.
 *
 * @author Juergen Hoeller
 * @since 3.1
 * @see #setPersistenceUnitName
 * @see #setEntityManagerFactory
 * @deprecated as of Spring Framework 4.3.12 against Hibernate 5.2, in favor of a custom solution
 * based on {@link EntityManagerFactory#unwrap} with explicit qualifiers and/or primary markers
 */
/**
 * 简单的{@code  FactoryBean}，在Hibernate支持的JPA {@link  EntityManagerFactory}后面公开了基础的{@link  SessionFactory}。 
 *  <p>主要可用于通过{@link  #setPersistenceUnitName"persistenceUnitName"} bean属性通过JPA持久单元名称解析SessionFactory。 
 *  <p>请注意，在简单的情况下，您也可以简单地声明一个工厂方法：<pre class ="code"> <bean id ="sessionFactory"factory-bean ="entityManagerFactory"factory-method ="getSessionFactory"/> </ pre> <p>从JPA 2.1开始，{<@link> EntityManagerFactory＃unwrap}也提供了一种不错的方法，尤其是在配置类安排中：<pre class ="code"> @Bean public SessionFactory sessionFactory（ @Qualifier（"entityManagerFactory"）EntityManagerFactory emf）{return emf.unwrap（SessionFactory.class）; } </ pre>请注意：由于Hibernate 5.2更改了其{@code  SessionFactory}接口以扩展JPA的{@code  EntityManagerFactory}，因此按类型注入时，原始工厂和自定义{ @code  SessionFactory}与{@code  EntityManagerFactory}匹配。 
 * 建议在此处使用原始工厂的显式限定词（如上所述）。 
 *  @author  Juergen Hoeller @since 3.1 
 * @see  #setPersistenceUnitName 
 * @see  #setEntityManagerFactory @从Spring Framework 4.3.12开始针对Hibernate 5.2弃用，赞成基于{@link  EntityManagerFactory＃unwrap的自定义解决方案}带有明确的限定词和/或主要标记
 */
@Deprecated
public class HibernateJpaSessionFactoryBean extends EntityManagerFactoryAccessor implements FactoryBean<SessionFactory> {

	@Override
	@Nullable
	public SessionFactory getObject() {
		EntityManagerFactory emf = getEntityManagerFactory();
		Assert.state(emf != null, "EntityManagerFactory must not be null");
		try {
			Method getSessionFactory = emf.getClass().getMethod("getSessionFactory");
			return (SessionFactory) ReflectionUtils.invokeMethod(getSessionFactory, emf);
		}
		catch (NoSuchMethodException ex) {
			throw new IllegalStateException("No compatible Hibernate EntityManagerFactory found: " + ex);
		}
	}

	@Override
	public Class<?> getObjectType() {
		return SessionFactory.class;
	}

	@Override
	public boolean isSingleton() {
		return true;
	}

}
