/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.jpa.vendor;

import java.util.Collections;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.spi.PersistenceUnitInfo;

import org.springframework.lang.Nullable;
import org.springframework.orm.jpa.JpaDialect;
import org.springframework.orm.jpa.JpaVendorAdapter;

/**
 * Abstract {@link JpaVendorAdapter} implementation that defines common properties,
 * to be translated into vendor-specific JPA properties by concrete subclasses.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @since 2.0
 */
/**
 * 定义通用属性的抽象{@link  JpaVendorAdapter}实现，将通过具体子类转换为特定于供应商的JPA属性。 
 *  @author  Juergen Hoeller @author 罗德·约翰逊@since 2.0
 */
public abstract class AbstractJpaVendorAdapter implements JpaVendorAdapter {

	private Database database = Database.DEFAULT;

	@Nullable
	private String databasePlatform;

	private boolean generateDdl = false;

	private boolean showSql = false;


	/**
	 * Specify the target database to operate on, as a value of the {@code Database} enum:
	 * DB2, DERBY, H2, HANA, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE
	 * <p><b>NOTE:</b> This setting will override your JPA provider's default algorithm.
	 * Custom vendor properties may still fine-tune the database dialect. However,
	 * there may nevertheless be conflicts: For example, specify either this setting
	 * or Hibernate's "hibernate.dialect_resolvers" property, not both.
	 */
	/**
	 * 指定要操作的目标数据库，作为{@code  Database}枚举的值：DB2，DERBY，H2，HANA，HSQL，INFORMIX，MYSQL，ORACLE，POSTGRESQL，SQL_SERVER，SYBASE <p> <b>注意：</ b>此设置将覆盖您的JPA提供程序的默认算法。 
	 * 自定义供应商属性可能仍会微调数据库方言。 
	 * 但是，仍然可能存在冲突：例如，指定此设置或Hibernate的"hibernate.dialect_resolvers"属性，不能同时指定两者。 
	 * 
	 */
	public void setDatabase(Database database) {
		this.database = database;
	}

	/**
	 * Return the target database to operate on.
	 */
	/**
	 * 返回目标数据库以进行操作。 
	 * 
	 */
	protected Database getDatabase() {
		return this.database;
	}

	/**
	 * Specify the name of the target database to operate on.
	 * The supported values are vendor-dependent platform identifiers.
	 */
	/**
	 * 指定要操作的目标数据库的名称。 
	 * 支持的值是与供应商有关的平台标识符。 
	 * 
	 */
	public void setDatabasePlatform(@Nullable String databasePlatform) {
		this.databasePlatform = databasePlatform;
	}

	/**
	 * Return the name of the target database to operate on.
	 */
	/**
	 * 返回要操作的目标数据库的名称。 
	 * 
	 */
	@Nullable
	protected String getDatabasePlatform() {
		return this.databasePlatform;
	}

	/**
	 * Set whether to generate DDL after the EntityManagerFactory has been initialized,
	 * creating/updating all relevant tables.
	 * <p>Note that the exact semantics of this flag depend on the underlying
	 * persistence provider. For any more advanced needs, specify the appropriate
	 * vendor-specific settings as "jpaProperties".
	 * <p><b>NOTE: Do not set this flag to 'true' while also setting JPA 2.1's
	 * {@code javax.persistence.schema-generation.database.action} property.</b>
	 * These two schema generation mechanisms - standard JPA versus provider-native -
	 * are mutually exclusive, e.g. with Hibernate 5.
	 * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties
	 */
	/**
	 * 设置是否在初始化EntityManagerFactory后创建/更新所有相关表来生成DDL。 
	 *  <p>请注意，此标志的确切语义取决于基础的持久性提供程序。 
	 * 对于任何更高级的需求，请将适当的特定于供应商的设置指定为"jpaProperties"。 
	 *  <p> <b>注意：在设置JPA 2.1的{@code  javax.persistence.schema-generation.database.action}属性的同时，请勿将此标志设置为"true"。 
	 * </ b>生成机制（标准JPA与提供者本机）是互斥的，例如使用Hibernate5。 
	 * 
	 * @see  org.springframework.orm.jpa.AbstractEntityManagerFactoryBean＃setJpaProperties
	 */
	public void setGenerateDdl(boolean generateDdl) {
		this.generateDdl = generateDdl;
	}

	/**
	 * Return whether to generate DDL after the EntityManagerFactory has been initialized
	 * creating/updating all relevant tables.
	 */
	/**
	 * 返回在初始化EntityManagerFactory创建/更新所有相关表之后是否生成DDL。 
	 * 
	 */
	protected boolean isGenerateDdl() {
		return this.generateDdl;
	}

	/**
	 * Set whether to show SQL in the log (or in the console).
	 * <p>For more specific logging configuration, specify the appropriate
	 * vendor-specific settings as "jpaProperties".
	 * @see org.springframework.orm.jpa.AbstractEntityManagerFactoryBean#setJpaProperties
	 */
	/**
	 * 设置是否在日志（或控制台）中显示SQL。 
	 *  <p>有关更特定的日志记录配置，请将适当的特定于供应商的设置指定为"jpaProperties"。 
	 *  
	 * @see  org.springframework.orm.jpa.AbstractEntityManagerFactoryBean＃setJpaProperties
	 */
	public void setShowSql(boolean showSql) {
		this.showSql = showSql;
	}

	/**
	 * Return whether to show SQL in the log (or in the console).
	 */
	/**
	 * 返回是否在日志（或控制台）中显示SQL。 
	 * 
	 */
	protected boolean isShowSql() {
		return this.showSql;
	}


	@Override
	@Nullable
	public String getPersistenceProviderRootPackage() {
		return null;
	}

	@Override
	public Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {
		return getJpaPropertyMap();
	}

	@Override
	public Map<String, ?> getJpaPropertyMap() {
		return Collections.emptyMap();
	}

	@Override
	@Nullable
	public JpaDialect getJpaDialect() {
		return null;
	}

	@Override
	public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {
		return EntityManagerFactory.class;
	}

	@Override
	public Class<? extends EntityManager> getEntityManagerInterface() {
		return EntityManager.class;
	}

	@Override
	public void postProcessEntityManagerFactory(EntityManagerFactory emf) {
	}

}
