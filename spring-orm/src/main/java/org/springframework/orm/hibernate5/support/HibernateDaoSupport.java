/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.hibernate5.support;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.dao.support.DaoSupport;
import org.springframework.lang.Nullable;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.util.Assert;

/**
 * Convenient super class for Hibernate-based data access objects.
 *
 * <p>Requires a {@link SessionFactory} to be set, providing a
 * {@link org.springframework.orm.hibernate5.HibernateTemplate} based on it to
 * subclasses through the {@link #getHibernateTemplate()} method.
 * Can alternatively be initialized directly with a HibernateTemplate,
 * in order to reuse the latter's settings such as the SessionFactory,
 * exception translator, flush mode, etc.
 *
 * <p>This class will create its own HibernateTemplate instance if a SessionFactory
 * is passed in. The "allowCreate" flag on that HibernateTemplate will be "true"
 * by default. A custom HibernateTemplate instance can be used through overriding
 * {@link #createHibernateTemplate}.
 *
 * <p><b>NOTE: Hibernate access code can also be coded in plain Hibernate style.
 * Hence, for newly started projects, consider adopting the standard Hibernate
 * style of coding data access objects instead, based on
 * {@link SessionFactory#getCurrentSession()}.
 * This HibernateTemplate primarily exists as a migration helper for Hibernate 3
 * based data access code, to benefit from bug fixes in Hibernate 5.x.</b>
 *
 * @author Juergen Hoeller
 * @since 4.2
 * @see #setSessionFactory
 * @see #getHibernateTemplate
 * @see org.springframework.orm.hibernate5.HibernateTemplate
 */
/**
 * 基于Hibernate的数据访问对象的便捷超类。 
 *  <p>需要设置{@link  SessionFactory}，并基于{@link  #getHibernateTemplate（）}提供一个基于它的{@link  org.springframework.orm.hibernate5.HibernateTemplate}子类。 
 * 方法。 
 * 也可以直接使用HibernateTemplate进行初始化，以重用后者的设置，例如SessionFactory，异常转换器，刷新模式等。 
 * <p>如果传入SessionFactory，则此类将创建自己的HibernateTemplate实例。 
 * 该HibernateTemplate上的标记默认情况下将为"true"。 
 * 可以通过覆盖{@link  #createHibernateTemplate}使用自定义的HibernateTemplate实例。 
 *  <p> <b>注意：休眠访问代码也可以采用普通的休眠样式进行编码。 
 * 因此，对于新启动的项目，请考虑采用基于{@link  SessionFactory＃getCurrentSession（）}的标准Hibernate样式对数据访问对象进行编码。 
 * 此HibernateTemplate主要作为基于Hibernate 3的数据访问代码的迁移帮助程序存在，以受益于Hibernate 5.x中的错误修复。 
 *  #getHibernateTemplate 
 * @see  org.springframework.orm.hibernate5.HibernateTemplate
 */
public abstract class HibernateDaoSupport extends DaoSupport {

	@Nullable
	private HibernateTemplate hibernateTemplate;


	/**
	 * Set the Hibernate SessionFactory to be used by this DAO.
	 * Will automatically create a HibernateTemplate for the given SessionFactory.
	 * @see #createHibernateTemplate
	 * @see #setHibernateTemplate
	 */
	/**
	 * 设置此DAO使用的Hibernate SessionFactory。 
	 * 将自动为给定的SessionFactory创建一个HibernateTemplate。 
	 *  
	 * @see  #createHibernateTemplate 
	 * @see  #setHibernateTemplate
	 */
	public final void setSessionFactory(SessionFactory sessionFactory) {
		if (this.hibernateTemplate == null || sessionFactory != this.hibernateTemplate.getSessionFactory()) {
			this.hibernateTemplate = createHibernateTemplate(sessionFactory);
		}
	}

	/**
	 * Create a HibernateTemplate for the given SessionFactory.
	 * Only invoked if populating the DAO with a SessionFactory reference!
	 * <p>Can be overridden in subclasses to provide a HibernateTemplate instance
	 * with different configuration, or a custom HibernateTemplate subclass.
	 * @param sessionFactory the Hibernate SessionFactory to create a HibernateTemplate for
	 * @return the new HibernateTemplate instance
	 * @see #setSessionFactory
	 */
	/**
	 * 为给定的SessionFactory创建一个HibernateTemplate。 
	 * 仅在使用SessionFactory引用填充DAO时调用！ 
	 *  <p>可以在子类中重写以提供具有不同配置的HibernateTemplate实例或自定义HibernateTemplate子类。 
	 *  
	 * @param  sessionFactory Hibernate SessionFactory为
	 * @return 新的HibernateTemplate实例
	 * @see  #setSessionFactory创建HibernateTemplate
	 */
	protected HibernateTemplate createHibernateTemplate(SessionFactory sessionFactory) {
		return new HibernateTemplate(sessionFactory);
	}

	/**
	 * Return the Hibernate SessionFactory used by this DAO.
	 */
	/**
	 * 返回此DAO使用的Hibernate SessionFactory。 
	 * 
	 */
	@Nullable
	public final SessionFactory getSessionFactory() {
		return (this.hibernateTemplate != null ? this.hibernateTemplate.getSessionFactory() : null);
	}

	/**
	 * Set the HibernateTemplate for this DAO explicitly,
	 * as an alternative to specifying a SessionFactory.
	 * @see #setSessionFactory
	 */
	/**
	 * 显式设置此DAO的HibernateTemplate，作为指定SessionFactory的替代方法。 
	 *  
	 * @see  #setSessionFactory
	 */
	public final void setHibernateTemplate(@Nullable HibernateTemplate hibernateTemplate) {
		this.hibernateTemplate = hibernateTemplate;
	}

	/**
	 * Return the HibernateTemplate for this DAO,
	 * pre-initialized with the SessionFactory or set explicitly.
	 * <p><b>Note: The returned HibernateTemplate is a shared instance.</b>
	 * You may introspect its configuration, but not modify the configuration
	 * (other than from within an {@link #initDao} implementation).
	 * Consider creating a custom HibernateTemplate instance via
	 * {@code new HibernateTemplate(getSessionFactory())}, in which case
	 * you're allowed to customize the settings on the resulting instance.
	 */
	/**
	 * 返回此DAO的HibernateTemplate，并使用SessionFactory对其进行预先初始化或对其进行显式设置。 
	 *  <p> <b>注意：返回的HibernateTemplate是一个共享实例。 
	 * </ b>您可以内省其配置，但不能修改配置（除了在{@link  #initDao}实现中）。 
	 * 考虑通过{@code  new HibernateTemplate（getSessionFactory（））}创建一个自定义的HibernateTemplate实例，在这种情况下，您可以自定义结果实例的设置。 
	 * 
	 */
	@Nullable
	public final HibernateTemplate getHibernateTemplate() {
		return this.hibernateTemplate;
	}

	@Override
	protected final void checkDaoConfig() {
		if (this.hibernateTemplate == null) {
			throw new IllegalArgumentException("'sessionFactory' or 'hibernateTemplate' is required");
		}
	}


	/**
	 * Conveniently obtain the current Hibernate Session.
	 * @return the Hibernate Session
	 * @throws DataAccessResourceFailureException if the Session couldn't be created
	 * @see SessionFactory#getCurrentSession()
	 */
	/**
	 * 方便地获取当前的Hibernate Session。 
	 *  
	 * @return 休眠会话
	 * @throws  DataAccessResourceFailureException，如果无法创建会话
	 * @see  SessionFactory＃getCurrentSession（）
	 */
	protected final Session currentSession() throws DataAccessResourceFailureException {
		SessionFactory sessionFactory = getSessionFactory();
		Assert.state(sessionFactory != null, "No SessionFactory set");
		return sessionFactory.getCurrentSession();
	}

}
