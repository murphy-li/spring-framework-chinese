/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.hibernate5;

import org.hibernate.HibernateException;
import org.hibernate.Session;

import org.springframework.lang.Nullable;

/**
 * Callback interface for Hibernate code. To be used with {@link HibernateTemplate}'s
 * execution methods, often as anonymous classes within a method implementation.
 * A typical implementation will call {@code Session.load/find/update} to perform
 * some operations on persistent objects.
 *
 * @author Juergen Hoeller
 * @since 4.2
 * @param <T> the result type
 * @see HibernateTemplate
 * @see HibernateTransactionManager
 */
/**
 * Hibernate代码的回调接口。 
 * 与{@link  HibernateTemplate}的执行方法一起使用，通常作为方法实现中的匿名类使用。 
 * 一个典型的实现将调用{@code  Session.load / find / update}对持久对象执行一些操作。 
 *  @author  Juergen Hoeller @4.2起
 * @param  <T>结果类型
 * @see  HibernateTemplate 
 * @see  HibernateTransactionManager
 */
@FunctionalInterface
public interface HibernateCallback<T> {

	/**
	 * Gets called by {@code HibernateTemplate.execute} with an active
	 * Hibernate {@code Session}. Does not need to care about activating
	 * or closing the {@code Session}, or handling transactions.
	 * <p>Allows for returning a result object created within the callback,
	 * i.e. a domain object or a collection of domain objects.
	 * A thrown custom RuntimeException is treated as an application exception:
	 * It gets propagated to the caller of the template.
	 * @param session active Hibernate session
	 * @return a result object, or {@code null} if none
	 * @throws HibernateException if thrown by the Hibernate API
	 * @see HibernateTemplate#execute
	 */
	/**
	 * 由{@code  HibernateTemplate.execute}通过活动的Hibernate {@code  Session}进行调用。 
	 * 无需担心激活或关闭{@code  Session}或处理事务。 
	 *  <p>允许返回在回调中创建的结果对象，即域对象或域对象的集合。 
	 * 引发的自定义RuntimeException被视为应用程序异常：它被传播到模板的调用者。 
	 *  
	 * @param 会话活动的Hibernate会话
	 * @return 一个结果对象，如果没有，则为{@code  null} 
	 * @throws  HibernateException如果由Hibernate API抛出
	 * @see  HibernateTemplate＃execute
	 */
	@Nullable
	T doInHibernate(Session session) throws HibernateException;

}
