/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm.hibernate5;

import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Filter;
import org.hibernate.LockMode;
import org.hibernate.ReplicationMode;
import org.hibernate.criterion.DetachedCriteria;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Interface that specifies a common set of Hibernate operations as well as
 * a general {@link #execute} method for Session-based lambda expressions.
 * Implemented by {@link HibernateTemplate}. Not often used, but a useful option
 * to enhance testability, as it can easily be mocked or stubbed.
 *
 * <p>Defines {@code HibernateTemplate}'s data access methods that mirror various
 * {@link org.hibernate.Session} methods. Users are strongly encouraged to read the
 * Hibernate {@code Session} javadocs for details on the semantics of those methods.
 *
 * <p><b>A deprecation note:</b> While {@link HibernateTemplate} and this operations
 * interface are being kept around for backwards compatibility in terms of the data
 * access implementation style in Spring applications, we strongly recommend the use
 * of native {@link org.hibernate.Session} access code for non-trivial interactions.
 * This in particular affects parameterized queries where - on Java 8+ - a custom
 * {@link HibernateCallback} lambda code block with {@code createQuery} and several
 * {@code setParameter} calls on the {@link org.hibernate.query.Query} interface
 * is an elegant solution, to be executed via the general {@link #execute} method.
 * All such operations which benefit from a lambda variant have been marked as
 * {@code deprecated} on this interface.
 *
 * <p><b>A Hibernate compatibility note:</b> {@link HibernateTemplate} and the
 * operations on this interface generally aim to be applicable across all Hibernate
 * versions. In terms of binary compatibility, Spring ships a variant for each major
 * generation of Hibernate (in the present case: Hibernate ORM 5.x). However, due to
 * refactorings and removals in Hibernate ORM 5.3, some variants - in particular
 * legacy positional parameters starting from index 0 - do not work anymore.
 * All affected operations are marked as deprecated; please replace them with the
 * general {@link #execute} method and custom lambda blocks creating the queries,
 * ideally setting named parameters through {@link org.hibernate.query.Query}.
 * <b>Please be aware that deprecated operations are known to work with Hibernate
 * ORM 5.0-5.2 but may not work with Hibernate ORM 5.3 and higher anymore.</b>
 *
 * @author Juergen Hoeller
 * @since 4.2
 * @see HibernateTemplate
 * @see org.hibernate.Session
 * @see HibernateTransactionManager
 */
/**
 * 该接口为基于会话的lambda表达式指定一组常见的Hibernate操作以及常规的{@link  #execute}方法。 
 * 由{@link  HibernateTemplate}实现。 
 * 并不经常使用，但是它是增强可测试性的有用选项，因为它很容易被嘲笑或存根。 
 *  <p>定义{@code  HibernateTemplate}的数据访问方法，这些数据访问方法镜像各种{@link  org.hibernate.Session}方法。 
 * 强烈建议用户阅读Hibernate {@code  Session} Javadocs，以获取有关这些方法的语义的详细信息。 
 *  <p> <b>弃用说明：</ b>为了保持向后兼容，我们保留了{@link  HibernateTemplate}和此操作接口，以便在Spring应用程序中实现数据访问实现方式的向后兼容性。 
 *  {@link  org.hibernate.Session}本地访问代码进行非平凡的交​​互。 
 * 这尤其会影响参数化查询，其中-在Java 8+上-具有{@code  createQuery}的自定义{@link  HibernateCallback} lambda代码块和在{@link 上的多个{@code  setParameter}调用org.hibernate.query.Query}接口是一种优雅的解决方案，可以通过常规的{@link  #execute}方法执行。 
 * 所有受益于lambda变体的此类操作已在此接口上标记为{@code 不推荐使用}。 
 *  <p> <b> Hibernate兼容性说明：</ b> {@link  HibernateTemplate}和此接口上的操作通常旨在适用于所有Hibernate版本。 
 * 在二进制兼容性方面，Spring为每个主要的Hibernate版本提供了一个变体（在当前情况下：Hibernate ORM 5.x）。 
 * 但是，由于Hibernate ORM 5.3中的重构和删除，某些变体-特别是从索引0开始的传统位置参数-不再起作用。 
 * 所有受影响的操作都标记为已弃用； 
 * 请用一般的{@link  #execute}方法替换它们，并使用自定义的lambda块创建查询，最好通过{@link  org.hibernate.query.Query}设置命名参数。 
 *  <b>请注意，已知已弃用的操作可用于Hibernate ORM 5.0-5.2，但可能不再适用于Hibernate ORM 5.3和更高版本。 
 * </ b> @author  Juergen Hoeller @since 4.2起，@
 * @see> HibernateTemplate 
 * @see  org.hibernate.Session 
 * @see  HibernateTransactionManager
 */
public interface HibernateOperations {

	/**
	 * Execute the action specified by the given action object within a
	 * {@link org.hibernate.Session}.
	 * <p>Application exceptions thrown by the action object get propagated
	 * to the caller (can only be unchecked). Hibernate exceptions are
	 * transformed into appropriate DAO ones. Allows for returning a result
	 * object, that is a domain object or a collection of domain objects.
	 * <p>Note: Callback code is not supposed to handle transactions itself!
	 * Use an appropriate transaction manager like
	 * {@link HibernateTransactionManager}. Generally, callback code must not
	 * touch any {@code Session} lifecycle methods, like close,
	 * disconnect, or reconnect, to let the template do its work.
	 * @param action callback object that specifies the Hibernate action
	 * @return a result object returned by the action, or {@code null}
	 * @throws DataAccessException in case of Hibernate errors
	 * @see HibernateTransactionManager
	 * @see org.hibernate.Session
	 */
	/**
	 * 在{@link  org.hibernate.Session}中执行给定操作对象指定的操作。 
	 *  <p>由操作对象引发的应用程序异常将传播到调用方（只能取消选中）。 
	 * 休眠异常被转换为适当的DAO异常。 
	 * 允许返回结果对象，即域对象或域对象的集合。 
	 *  <p>注意：回调代码不应自行处理交易！ 
	 * 使用适当的事务管理器，例如{@link  HibernateTransactionManager}。 
	 * 通常，回调代码不得触摸任何{@code  Session}生命周期方法，例如关闭，断开连接或重新连接，以使模板完成其工作。 
	 *  
	 * @param 操作回调对象，用于指定Hibernate操作
	 * @return 操作返回的结果对象，或者{@code  null} 
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  HibernateTransactionManager <
	 * @see > org.hibernate.Session
	 */
	@Nullable
	<T> T execute(HibernateCallback<T> action) throws DataAccessException;


	//-------------------------------------------------------------------------
	// Convenience methods for loading individual objects
	//-------------------------------------------------------------------------

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, or {@code null} if not found.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#get(Class, Serializable)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityClass a persistent class
	 * @param id the identifier of the persistent instance
	 * @return the persistent instance, or {@code null} if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#get(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久性实例，如果找不到，则返回{@code  null}。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃get（Class，Serializable）}的一个薄包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityClass持久类
	 * @param  id持久实例的标识符
	 * @return 持久实例，如果找不到，则返回{@code  null} 
	 * @throws  DataAccessException，以防发生Hibernate错误<@参见> org.hibernate.Session＃get（类，可序列化）
	 */
	@Nullable
	<T> T get(Class<T> entityClass, Serializable id) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, or {@code null} if not found.
	 * <p>Obtains the specified lock mode if the instance exists.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#get(Class, Serializable, LockMode)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityClass a persistent class
	 * @param id the identifier of the persistent instance
	 * @param lockMode the lock mode to obtain
	 * @return the persistent instance, or {@code null} if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#get(Class, Serializable, LockMode)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久性实例，如果找不到，则返回{@code  null}。 
	 *  <p>如果实例存在，则获取指定的锁定模式。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃get（Class，Serializable，LockMode）}的一个瘦包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityClass持久类
	 * @param  id持久实例的标识符
	 * @param  lockMode锁定模式以获取
	 * @return 持久实例，如果找不到，则为{@code  null} <@发生Hibernate错误时抛出> DataAccessException 
	 * @see  org.hibernate.Session＃get（Class，Serializable，LockMode）
	 */
	@Nullable
	<T> T get(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, or {@code null} if not found.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#get(String, Serializable)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityName the name of the persistent entity
	 * @param id the identifier of the persistent instance
	 * @return the persistent instance, or {@code null} if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#get(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久性实例，如果找不到，则返回{@code  null}。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃get（String，Serializable）}的一个薄包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  id持久实例的标识符
	 * @return 持久实例，如果找不到，则为{@code  null} 
	 * @throws  DataAccessException（如果是Hibernate）错误
	 * @see  org.hibernate.Session＃get（Class，Serializable）
	 */
	@Nullable
	Object get(String entityName, Serializable id) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, or {@code null} if not found.
	 * Obtains the specified lock mode if the instance exists.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#get(String, Serializable, LockMode)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityName the name of the persistent entity
	 * @param id the identifier of the persistent instance
	 * @param lockMode the lock mode to obtain
	 * @return the persistent instance, or {@code null} if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#get(Class, Serializable, LockMode)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久性实例，如果找不到，则返回{@code  null}。 
	 * 如果实例存在，则获取指定的锁定模式。 
	 *  <p>为方便起见，此方法是{{@link> org.hibernate.Session＃get（String，Serializable，LockMode）}}的精简包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  id持久实例的标识符
	 * @param  lockMode锁定模式以获取
	 * @return 持久实例，如果不是，则为{@code  null}在发生Hibernate错误的情况下发现
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Session＃get（Class，Serializable，LockMode）
	 */
	@Nullable
	Object get(String entityName, Serializable id, LockMode lockMode) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, throwing an exception if not found.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#load(Class, Serializable)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityClass a persistent class
	 * @param id the identifier of the persistent instance
	 * @return the persistent instance
	 * @throws org.springframework.orm.ObjectRetrievalFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#load(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久实例，如果未找到则抛​​出异常。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃load（Class，Serializable）}的一个薄包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param 实体类持久类
	 * @param  id持久实例的标识符
	 * @return 持久实例
	 * @throws  org.springframework.orm.ObjectRetrievalFailureException（如果找不到）
	 * @throws 发生Hibernate错误时出现DataAccessException 
	 * @see  org.hibernate.Session＃load（Class，可序列化）
	 */
	<T> T load(Class<T> entityClass, Serializable id) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, throwing an exception if not found.
	 * Obtains the specified lock mode if the instance exists.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#load(Class, Serializable, LockMode)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityClass a persistent class
	 * @param id the identifier of the persistent instance
	 * @param lockMode the lock mode to obtain
	 * @return the persistent instance
	 * @throws org.springframework.orm.ObjectRetrievalFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#load(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久实例，如果未找到则抛​​出异常。 
	 * 如果实例存在，则获取指定的锁定模式。 
	 *  <p>为方便起见，此方法是{{@link> org.hibernate.Session＃load（Class，Serializable，LockMode）}}的精简包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param 实体类持久类
	 * @param  id持久实例的标识符
	 * @param  lockMode锁定模式以获取
	 * @return 持久实例
	 * @throws  org.springframework.orm.ObjectRetrievalFailureException 
	 * @throws 发生Hibernate错误时发生DataAccessException 
	 * @see  org.hibernate.Session＃load（Class，Serializable）
	 */
	<T> T load(Class<T> entityClass, Serializable id, LockMode lockMode) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, throwing an exception if not found.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#load(String, Serializable)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityName the name of the persistent entity
	 * @param id the identifier of the persistent instance
	 * @return the persistent instance
	 * @throws org.springframework.orm.ObjectRetrievalFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#load(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久实例，如果未找到则抛​​出异常。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃load（String，Serializable）}的一个薄包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  id持久实例的标识符
	 * @return 持久实例
	 * @throws  org.springframework.orm.ObjectRetrievalFailureException（如果未找到）
	 * @throws  DataAccessException以防万一的Hibernate错误
	 * @see  org.hibernate.Session＃load（Class，Serializable）
	 */
	Object load(String entityName, Serializable id) throws DataAccessException;

	/**
	 * Return the persistent instance of the given entity class
	 * with the given identifier, throwing an exception if not found.
	 * <p>Obtains the specified lock mode if the instance exists.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#load(String, Serializable, LockMode)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entityName the name of the persistent entity
	 * @param id the identifier of the persistent instance
	 * @param lockMode the lock mode to obtain
	 * @return the persistent instance
	 * @throws org.springframework.orm.ObjectRetrievalFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#load(Class, Serializable)
	 */
	/**
	 * 返回具有给定标识符的给定实体类的持久实例，如果未找到则抛​​出异常。 
	 *  <p>如果实例存在，则获取指定的锁定模式。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃load（String，Serializable，LockMode）}的一个瘦包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  id持久实例的标识符
	 * @param  lockMode获取
	 * @return 持久实例的锁定模式
	 * @throws  org.springframework.orm.ObjectRetrievalFailureException如果未找到
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃load（Class，Serializable）
	 */
	Object load(String entityName, Serializable id, LockMode lockMode) throws DataAccessException;

	/**
	 * Return all persistent instances of the given entity class.
	 * Note: Use queries or criteria for retrieving a specific subset.
	 * @param entityClass a persistent class
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException if there is a Hibernate error
	 * @see org.hibernate.Session#createCriteria
	 */
	/**
	 * 返回给定实体类的所有持久实例。 
	 * 注意：使用查询或条件来检索特定子集。 
	 *  
	 * @param  entityClass持久类
	 * @return 包含0个或多个持久实例的{@link  List} 
	 * @throws  DataAccessException，如果有休眠错误
	 * @see  org.hibernate.Session＃createCriteria
	 */
	<T> List<T> loadAll(Class<T> entityClass) throws DataAccessException;

	/**
	 * Load the persistent instance with the given identifier
	 * into the given object, throwing an exception if not found.
	 * <p>This method is a thin wrapper around
	 * {@link org.hibernate.Session#load(Object, Serializable)} for convenience.
	 * For an explanation of the exact semantics of this method, please do refer to
	 * the Hibernate API documentation in the first instance.
	 * @param entity the object (of the target class) to load into
	 * @param id the identifier of the persistent instance
	 * @throws org.springframework.orm.ObjectRetrievalFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#load(Object, Serializable)
	 */
	/**
	 * 将具有给定标识符的持久性实例加载到给定对象中，如果未找到则抛​​出异常。 
	 *  <p>为方便起见，此方法是{@link  org.hibernate.Session＃load（Object，Serializable）}的一个瘦包装。 
	 * 有关此方法的确切语义的解释，请首先参考Hibernate API文档。 
	 *  
	 * @param 实体（目标类的对象）要加载到
	 * @param  id中的持久实例的标识符
	 * @throws  org.springframework.orm.ObjectRetrievalFailureException（如果未找到）
	 * @throws  DataAccessException（在Hibernate中）错误
	 * @see  org.hibernate.Session＃load（Object，Serializable）
	 */
	void load(Object entity, Serializable id) throws DataAccessException;

	/**
	 * Re-read the state of the given persistent instance.
	 * @param entity the persistent instance to re-read
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#refresh(Object)
	 */
	/**
	 * 重新读取给定持久实例的状态。 
	 *  
	 * @param 实体，以在发生Hibernate错误时重新读取
	 * @throws  DataAccessException的持久实例
	 * @see  org.hibernate.Session＃refresh（Object）
	 */
	void refresh(Object entity) throws DataAccessException;

	/**
	 * Re-read the state of the given persistent instance.
	 * Obtains the specified lock mode for the instance.
	 * @param entity the persistent instance to re-read
	 * @param lockMode the lock mode to obtain
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#refresh(Object, LockMode)
	 */
	/**
	 * 重新读取给定持久实例的状态。 
	 * 获取实例的指定锁定模式。 
	 *  
	 * @param 实体持久实例以重新读取
	 * @param  lockMode锁定模式以获得
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃refresh（Object，LockMode）
	 */
	void refresh(Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Check whether the given object is in the Session cache.
	 * @param entity the persistence instance to check
	 * @return whether the given object is in the Session cache
	 * @throws DataAccessException if there is a Hibernate error
	 * @see org.hibernate.Session#contains
	 */
	/**
	 * 检查给定对象是否在会话缓存中。 
	 *  
	 * @param 实体是持久性实例，用于检查
	 * @return 给定对象是否在会话缓存中
	 * @throws  DataAccessException如果存在Hibernate错误
	 * @see  org.hibernate.Session＃包含
	 */
	boolean contains(Object entity) throws DataAccessException;

	/**
	 * Remove the given object from the {@link org.hibernate.Session} cache.
	 * @param entity the persistent instance to evict
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#evict
	 */
	/**
	 * 从{@link  org.hibernate.Session}缓存中删除给定的对象。 
	 *  
	 * @param 实体，用于在发生Hibernate错误时逐出
	 * @throws  DataAccessException的持久实例
	 * @see  org.hibernate.Session＃evict
	 */
	void evict(Object entity) throws DataAccessException;

	/**
	 * Force initialization of a Hibernate proxy or persistent collection.
	 * @param proxy a proxy for a persistent object or a persistent collection
	 * @throws DataAccessException if we can't initialize the proxy, for example
	 * because it is not associated with an active Session
	 * @see org.hibernate.Hibernate#initialize
	 */
	/**
	 * 强制初始化Hibernate代理或持久性集合。 
	 *  
	 * @param 代理持久对象或持久集合的代理
	 * @throws  DataAccessException如果我们无法初始化代理，例如因为它没有与活动Session相关联
	 * @see  org.hibernate.Hibernate＃初始化
	 */
	void initialize(Object proxy) throws DataAccessException;

	/**
	 * Return an enabled Hibernate {@link Filter} for the given filter name.
	 * The returned {@code Filter} instance can be used to set filter parameters.
	 * @param filterName the name of the filter
	 * @return the enabled Hibernate {@code Filter} (either already
	 * enabled or enabled on the fly by this operation)
	 * @throws IllegalStateException if we are not running within a
	 * transactional Session (in which case this operation does not make sense)
	 */
	/**
	 * 返回给定过滤器名称的启用的Hibernate {@link 过滤器}。 
	 * 返回的{@code  Filter}实例可用于设置过滤器参数。 
	 *  
	 * @param  filterName过滤器的名称
	 * @return 启用的Hibernate {@code 过滤器}（已通过此操作启用或即时启用）
	 * @throws  IllegalStateException如果我们不在事务内运行会话（在这种情况下，此操作没有意义）
	 */
	Filter enableFilter(String filterName) throws IllegalStateException;


	//-------------------------------------------------------------------------
	// Convenience methods for storing individual objects
	//-------------------------------------------------------------------------

	/**
	 * Obtain the specified lock level upon the given object, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entity the persistent instance to lock
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#lock(Object, LockMode)
	 */
	/**
	 * 获取给定对象的指定锁定级别，隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param 实体要锁定的持久实例
	 * @param  lockMode锁定模式以获取
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException（如果未找到）
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org。 
	 *  hibernate.Session＃lock（Object，LockMode）
	 */
	void lock(Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Obtain the specified lock level upon the given object, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to lock
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#lock(String, Object, LockMode)
	 */
	/**
	 * 获取给定对象的指定锁定级别，隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 实体要锁定的持久实例
	 * @param  lockMode锁定模式以获取
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException如果找不到
	 * @throws  DataAccessException在Hibernate错误的情况下
	 * @see  org.hibernate.Session＃lock（String，Object，LockMode）
	 */
	void lock(String entityName, Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Persist the given transient instance.
	 * @param entity the transient instance to persist
	 * @return the generated identifier
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#save(Object)
	 */
	/**
	 * 坚持给定的瞬态实例。 
	 *  
	 * @param 实体，瞬态实例可以持久化
	 * @return 生成的标识符
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃save（Object）
	 */
	Serializable save(Object entity) throws DataAccessException;

	/**
	 * Persist the given transient instance.
	 * @param entityName the name of the persistent entity
	 * @param entity the transient instance to persist
	 * @return the generated identifier
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#save(String, Object)
	 */
	/**
	 * 坚持给定的瞬态实例。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 实体要持久保存的瞬时实例
	 * @return 生成的标识符
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃save（字符串，对象）
	 */
	Serializable save(String entityName, Object entity) throws DataAccessException;

	/**
	 * Update the given persistent instance,
	 * associating it with the current Hibernate {@link org.hibernate.Session}.
	 * @param entity the persistent instance to update
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#update(Object)
	 */
	/**
	 * 更新给定的持久性实例，将其与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 *  
	 * @param 实体，用于在发生Hibernate错误时更新
	 * @throws  DataAccessException的持久实例
	 * @see  org.hibernate.Session＃update（Object）
	 */
	void update(Object entity) throws DataAccessException;

	/**
	 * Update the given persistent instance,
	 * associating it with the current Hibernate {@link org.hibernate.Session}.
	 * <p>Obtains the specified lock mode if the instance exists, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entity the persistent instance to update
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#update(Object)
	 */
	/**
	 * 更新给定的持久性实例，将其与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 *  <p>如果实例存在，则获取指定的锁定模式，并隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param 实体持久实例以更新
	 * @param  lockMode锁定模式以获得
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException（如果未找到）
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org。 
	 *  hibernate.Session＃update（对象）
	 */
	void update(Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Update the given persistent instance,
	 * associating it with the current Hibernate {@link org.hibernate.Session}.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to update
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#update(String, Object)
	 */
	/**
	 * 更新给定的持久性实例，将其与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 *  
	 * @param  entityName持久性实体的名称
	 * @param 持久化实例要更新的持久化实例
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃update（String，Object）
	 */
	void update(String entityName, Object entity) throws DataAccessException;

	/**
	 * Update the given persistent instance,
	 * associating it with the current Hibernate {@link org.hibernate.Session}.
	 * <p>Obtains the specified lock mode if the instance exists, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to update
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#update(String, Object)
	 */
	/**
	 * 更新给定的持久性实例，将其与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 *  <p>如果实例存在，则获取指定的锁定模式，并隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param 实体名称持久实体的名称
	 * @param 持久实例要更新的实体
	 * @param  lockMode锁定模式以获取
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException（如果未找到）
	 * @throws  DataAccessException在Hibernate错误的情况下
	 * @see  org.hibernate.Session＃update（String，Object）
	 */
	void update(String entityName, Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Save or update the given persistent instance,
	 * according to its id (matching the configured "unsaved-value"?).
	 * Associates the instance with the current Hibernate {@link org.hibernate.Session}.
	 * @param entity the persistent instance to save or update
	 * (to be associated with the Hibernate {@code Session})
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#saveOrUpdate(Object)
	 */
	/**
	 * 根据其ID（匹配配置的"未保存值"？）保存或更新给定的持久性实例。 
	 * 将实例与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 *  
	 * @param 实体要保存或更新的持久实例（与Hibernate {@code  Session}关联）
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃saveOrUpdate（Object ）
	 */
	void saveOrUpdate(Object entity) throws DataAccessException;

	/**
	 * Save or update the given persistent instance,
	 * according to its id (matching the configured "unsaved-value"?).
	 * Associates the instance with the current Hibernate {@code Session}.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to save or update
	 * (to be associated with the Hibernate {@code Session})
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#saveOrUpdate(String, Object)
	 */
	/**
	 * 根据其ID（匹配配置的"未保存值"？）保存或更新给定的持久性实例。 
	 * 将实例与当前的Hibernate {@code  Session}关联。 
	 *  
	 * @param  entityName持久性实体的名称
	 * @param 要保存或更新（与Hibernate {@code  Session}关联的持久性实例的实体）
	 * @throws 发生Hibernate错误时发生DataAccessException <@查看> org.hibernate.Session＃saveOrUpdate（字符串，对象）
	 */
	void saveOrUpdate(String entityName, Object entity) throws DataAccessException;

	/**
	 * Persist the state of the given detached instance according to the
	 * given replication mode, reusing the current identifier value.
	 * @param entity the persistent object to replicate
	 * @param replicationMode the Hibernate ReplicationMode
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#replicate(Object, ReplicationMode)
	 */
	/**
	 * 根据给定的复制模式坚持给定的分离实例的状态，重新使用当前的标识符值。 
	 *  
	 * @param 实体要复制的持久对象
	 * @param  ReplicationMode Hibernate复制模式
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃replicate（Object，ReplicationMode）
	 */
	void replicate(Object entity, ReplicationMode replicationMode) throws DataAccessException;

	/**
	 * Persist the state of the given detached instance according to the
	 * given replication mode, reusing the current identifier value.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent object to replicate
	 * @param replicationMode the Hibernate ReplicationMode
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#replicate(String, Object, ReplicationMode)
	 */
	/**
	 * 根据给定的复制模式坚持给定的分离实例的状态，重新使用当前的标识符值。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 实体要复制的持久对象
	 * @param  ReplicationMode Hibernate ReplicationMode 
	 * @throws 发生Hibernate错误时的DataAccessException 
	 * @see  org.hibernate.Session＃replicate （字符串，对象，ReplicationMode）
	 */
	void replicate(String entityName, Object entity, ReplicationMode replicationMode) throws DataAccessException;

	/**
	 * Persist the given transient instance. Follows JSR-220 semantics.
	 * <p>Similar to {@code save}, associating the given object
	 * with the current Hibernate {@link org.hibernate.Session}.
	 * @param entity the persistent instance to persist
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#persist(Object)
	 * @see #save
	 */
	/**
	 * 坚持给定的瞬态实例。 
	 * 遵循JSR-220语义。 
	 *  <p>类似于{@code  save}，将给定对象与当前的Hibernate {@link  org.hibernate.Session}相关联。 
	 *  
	 * @param 实体持久化实例以持久化
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃persist（Object）
	 * @see  #save
	 */
	void persist(Object entity) throws DataAccessException;

	/**
	 * Persist the given transient instance. Follows JSR-220 semantics.
	 * <p>Similar to {@code save}, associating the given object
	 * with the current Hibernate {@link org.hibernate.Session}.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to persist
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#persist(String, Object)
	 * @see #save
	 */
	/**
	 * 坚持给定的瞬态实例。 
	 * 遵循JSR-220语义。 
	 *  <p>类似于{@code  save}，将给定对象与当前的Hibernate {@link  org.hibernate.Session}相关联。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 持久实例要持久化的实体
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃persist（String，Object）<
	 * @see >＃保存
	 */
	void persist(String entityName, Object entity) throws DataAccessException;

	/**
	 * Copy the state of the given object onto the persistent object
	 * with the same identifier. Follows JSR-220 semantics.
	 * <p>Similar to {@code saveOrUpdate}, but never associates the given
	 * object with the current Hibernate Session. In case of a new entity,
	 * the state will be copied over as well.
	 * <p>Note that {@code merge} will <i>not</i> update the identifiers
	 * in the passed-in object graph (in contrast to TopLink)! Consider
	 * registering Spring's {@code IdTransferringMergeEventListener} if
	 * you would like to have newly assigned ids transferred to the original
	 * object graph too.
	 * @param entity the object to merge with the corresponding persistence instance
	 * @return the updated, registered persistent instance
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#merge(Object)
	 * @see #saveOrUpdate
	 */
	/**
	 * 将给定对象的状态复制到具有相同标识符的持久对象上。 
	 * 遵循JSR-220语义。 
	 *  <p>类似于{@code  saveOrUpdate}，但从不将给定对象与当前的Hibernate会话相关联。 
	 * 如果是新实体，状态也会被复制。 
	 *  <p>请注意，{<@code> merge}不会<i>不</ i>更新传入的对象图中的标识符（与TopLink相反）！ 
	 * 如果您也想将新分配的ID转移到原始对象图中，请考虑注册Spring的{@code  IdTransferringMergeEventListener}。 
	 *  
	 * @param 实体，对象与相应的持久性实例合并
	 * @return 更新的注册持久性实例
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃merge（Object）<@查看> #saveOrUpdate
	 */
	<T> T merge(T entity) throws DataAccessException;

	/**
	 * Copy the state of the given object onto the persistent object
	 * with the same identifier. Follows JSR-220 semantics.
	 * <p>Similar to {@code saveOrUpdate}, but never associates the given
	 * object with the current Hibernate {@link org.hibernate.Session}. In
	 * the case of a new entity, the state will be copied over as well.
	 * <p>Note that {@code merge} will <i>not</i> update the identifiers
	 * in the passed-in object graph (in contrast to TopLink)! Consider
	 * registering Spring's {@code IdTransferringMergeEventListener}
	 * if you would like to have newly assigned ids transferred to the
	 * original object graph too.
	 * @param entityName the name of the persistent entity
	 * @param entity the object to merge with the corresponding persistence instance
	 * @return the updated, registered persistent instance
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#merge(String, Object)
	 * @see #saveOrUpdate
	 */
	/**
	 * 将给定对象的状态复制到具有相同标识符的持久对象上。 
	 * 遵循JSR-220语义。 
	 *  <p>类似于{@code  saveOrUpdate}，但从不将给定对象与当前的Hibernate {@link  org.hibernate.Session}关联。 
	 * 对于新实体，状态也将被复制。 
	 *  <p>请注意，{<@code> merge}不会<i>不</ i>更新传入的对象图中的标识符（与TopLink相反）！ 
	 * 如果您也想将新分配的ID转移到原始对象图中，请考虑注册Spring的{@code  IdTransferringMergeEventListener}。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 实体与相应的持久性实例合并的对象
	 * @return 更新的注册持久性实例
	 * @throws 发生Hibernate错误时发生DataAccessException 
	 * @see  org .hibernate.Session＃merge（String，Object）
	 * @see  #saveOrUpdate
	 */
	<T> T merge(String entityName, T entity) throws DataAccessException;

	/**
	 * Delete the given persistent instance.
	 * @param entity the persistent instance to delete
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#delete(Object)
	 */
	/**
	 * 删除给定的持久实例。 
	 *  
	 * @param 实体要在发生Hibernate错误时删除
	 * @throws  DataAccessException的持久实例
	 * @see  org.hibernate.Session＃delete（Object）
	 */
	void delete(Object entity) throws DataAccessException;

	/**
	 * Delete the given persistent instance.
	 * <p>Obtains the specified lock mode if the instance exists, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entity the persistent instance to delete
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#delete(Object)
	 */
	/**
	 * 删除给定的持久实例。 
	 *  <p>如果实例存在，则获取指定的锁定模式，并隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param 实体要删除的持久实例
	 * @param  lockMode锁定模式以获得
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException（如果未找到）
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org。 
	 *  hibernate.Session＃delete（对象）
	 */
	void delete(Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Delete the given persistent instance.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to delete
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#delete(Object)
	 */
	/**
	 * 删除给定的持久实例。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param 实体要删除的持久实例
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  org.hibernate.Session＃delete（Object）
	 */
	void delete(String entityName, Object entity) throws DataAccessException;

	/**
	 * Delete the given persistent instance.
	 * <p>Obtains the specified lock mode if the instance exists, implicitly
	 * checking whether the corresponding database entry still exists.
	 * @param entityName the name of the persistent entity
	 * @param entity the persistent instance to delete
	 * @param lockMode the lock mode to obtain
	 * @throws org.springframework.orm.ObjectOptimisticLockingFailureException if not found
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#delete(Object)
	 */
	/**
	 * 删除给定的持久实例。 
	 *  <p>如果实例存在，则获取指定的锁定模式，并隐式检查相应的数据库条目是否仍然存在。 
	 *  
	 * @param 实体名称持久实体的名称
	 * @param 实体要删除的持久实例
	 * @param  lockMode锁定模式以获取
	 * @throws  org.springframework.orm.ObjectOptimisticLockingFailureException（如果未找到）
	 * @throws  DataAccessException如果发生Hibernate错误
	 * @see  org.hibernate.Session＃delete（Object）
	 */
	void delete(String entityName, Object entity, LockMode lockMode) throws DataAccessException;

	/**
	 * Delete all given persistent instances.
	 * <p>This can be combined with any of the find methods to delete by query
	 * in two lines of code.
	 * @param entities the persistent instances to delete
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#delete(Object)
	 */
	/**
	 * 删除所有给定的持久实例。 
	 *  <p>这可以与任何查找方法结合使用，以两行代码通过查询删除。 
	 *  
	 * @param 实体持久化实例，以在发生Hibernate错误时删除
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Session＃delete（Object）
	 */
	void deleteAll(Collection<?> entities) throws DataAccessException;

	/**
	 * Flush all pending saves, updates and deletes to the database.
	 * <p>Only invoke this for selective eager flushing, for example when
	 * JDBC code needs to see certain changes within the same transaction.
	 * Else, it is preferable to rely on auto-flushing at transaction
	 * completion.
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#flush
	 */
	/**
	 * 将所有未完成的保存，更新和删除刷新到数据库。 
	 *  <p>仅在选择性地进行紧急刷新时才调用此函数，例如，当JDBC代码需要查看同一事务中的某些更改时。 
	 * 否则，最好在事务完成时依靠自动刷新。 
	 *  
	 * @throws 发生Hibernate错误时发生DataAccessException 
	 * @see  org.hibernate.Session＃flush
	 */
	void flush() throws DataAccessException;

	/**
	 * Remove all objects from the {@link org.hibernate.Session} cache, and
	 * cancel all pending saves, updates and deletes.
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#clear
	 */
	/**
	 * 从{@link  org.hibernate.Session}缓存中删除所有对象，并取消所有挂起的保存，更新和删除。 
	 *  
	 * @throws 发生Hibernate错误时发生DataAccessException 
	 * @see  org.hibernate.Session＃clear
	 */
	void clear() throws DataAccessException;


	//-------------------------------------------------------------------------
	// Convenience finder methods for detached criteria
	//-------------------------------------------------------------------------

	/**
	 * Execute a query based on a given Hibernate criteria object.
	 * @param criteria the detached Hibernate criteria object.
	 * <b>Note: Do not reuse criteria objects! They need to recreated per execution,
	 * due to the suboptimal design of Hibernate's criteria facility.</b>
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see DetachedCriteria#getExecutableCriteria(org.hibernate.Session)
	 */
	/**
	 * 基于给定的休眠条件对象执行查询。 
	 *  
	 * @param 条件分离的Hibernate条件对象。 
	 *  <b>注意：请勿重用标准对象！ 
	 * 由于Hibernate的标准工具的设计欠佳，因此每次执行时都需要重新创建它们。 
	 * </ b> 
	 * @return 包含0个或多个持久性实例的{@link  List} 
	 * @throws  DataAccessException，以防发生Hibernate错误
	 * @see  DetachedCriteria＃getExecutableCriteria（org.hibernate.Session）
	 */
	List<?> findByCriteria(DetachedCriteria criteria) throws DataAccessException;

	/**
	 * Execute a query based on the given Hibernate criteria object.
	 * @param criteria the detached Hibernate criteria object.
	 * <b>Note: Do not reuse criteria objects! They need to recreated per execution,
	 * due to the suboptimal design of Hibernate's criteria facility.</b>
	 * @param firstResult the index of the first result object to be retrieved
	 * (numbered from 0)
	 * @param maxResults the maximum number of result objects to retrieve
	 * (or <=0 for no limit)
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see DetachedCriteria#getExecutableCriteria(org.hibernate.Session)
	 * @see org.hibernate.Criteria#setFirstResult(int)
	 * @see org.hibernate.Criteria#setMaxResults(int)
	 */
	/**
	 * 根据给定的休眠条件对象执行查询。 
	 *  
	 * @param 条件分离的Hibernate条件对象。 
	 *  <b>注意：请勿重用标准对象！ 
	 * 由于Hibernate的标准工具的设计欠佳，因此每次执行都需要重新创建它们。 
	 * </ b> 
	 * @param  firstResult要检索的第一个结果对象的索引（从0开始编号）
	 * @param  maxResults的最大数量要检索的结果对象（或无限时为<= 0）
	 * @return 包含0个或多个持久实例的{@link 列表} 
	 * @throws 发生休眠错误时发生DataAccessException 
	 * @see  DetachedCriteria＃getExecutableCriteria（org .hibernate.Session）
	 * @see  org.hibernate.Criteria＃setFirstResult（int）
	 * @see  org.hibernate.Criteria＃setMaxResults（int）
	 */
	List<?> findByCriteria(DetachedCriteria criteria, int firstResult, int maxResults) throws DataAccessException;

	/**
	 * Execute a query based on the given example entity object.
	 * @param exampleEntity an instance of the desired entity,
	 * serving as example for "query-by-example"
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.criterion.Example#create(Object)
	 */
	/**
	 * 根据给定的示例实体对象执行查询。 
	 *  
	 * @param  exampleEntity所需实体的实例，用作"按示例查询"的示例
	 * @return 包含0个或多个持久性实例的{@link  List}的情况。 
	 * 
	 * @throws  Hibernate时为DataAccessException错误
	 * @see  org.hibernate.criterion.Example＃create（Object）
	 */
	<T> List<T> findByExample(T exampleEntity) throws DataAccessException;

	/**
	 * Execute a query based on the given example entity object.
	 * @param entityName the name of the persistent entity
	 * @param exampleEntity an instance of the desired entity,
	 * serving as example for "query-by-example"
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.criterion.Example#create(Object)
	 */
	/**
	 * 根据给定的示例实体对象执行查询。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  exampleEntity所需实体的实例，用作"按示例查询"的示例
	 * @return 包含0或更大值的{@link  List}发生Hibernate错误时，持久实例
	 * @throws  DataAccessException 
	 * @see  org.hibernate.criterion.Example＃create（Object）
	 */
	<T> List<T> findByExample(String entityName, T exampleEntity) throws DataAccessException;

	/**
	 * Execute a query based on a given example entity object.
	 * @param exampleEntity an instance of the desired entity,
	 * serving as example for "query-by-example"
	 * @param firstResult the index of the first result object to be retrieved
	 * (numbered from 0)
	 * @param maxResults the maximum number of result objects to retrieve
	 * (or <=0 for no limit)
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.criterion.Example#create(Object)
	 * @see org.hibernate.Criteria#setFirstResult(int)
	 * @see org.hibernate.Criteria#setMaxResults(int)
	 */
	/**
	 * 根据给定的示例实体对象执行查询。 
	 *  
	 * @param  exampleEntity所需实体的实例，用作"按示例查询"的示例。 
	 * 
	 * @param  firstResult要检索的第一个结果对象的索引（从0开始）
	 * @param  maxResults最大值要检索的结果对象的数量（或无限制的<= 0）
	 * @return 包含0个或多个持久实例的{@link 列表} 
	 * @throws 发生Hibernate错误时出现DataAccessException 
	 * @see  org.hibernate .criterion.Example＃create（Object）
	 * @see  org.hibernate.Criteria＃setFirstResult（int）
	 * @see  org.hibernate.Criteria＃setMaxResults（int）
	 */
	<T> List<T> findByExample(T exampleEntity, int firstResult, int maxResults) throws DataAccessException;

	/**
	 * Execute a query based on a given example entity object.
	 * @param entityName the name of the persistent entity
	 * @param exampleEntity an instance of the desired entity,
	 * serving as example for "query-by-example"
	 * @param firstResult the index of the first result object to be retrieved
	 * (numbered from 0)
	 * @param maxResults the maximum number of result objects to retrieve
	 * (or <=0 for no limit)
	 * @return a {@link List} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.criterion.Example#create(Object)
	 * @see org.hibernate.Criteria#setFirstResult(int)
	 * @see org.hibernate.Criteria#setMaxResults(int)
	 */
	/**
	 * 根据给定的示例实体对象执行查询。 
	 *  
	 * @param  entityName持久实体的名称
	 * @param  exampleEntity所需实体的实例，用作"按示例查询"的示例
	 * @param  firstResult要检索的第一个结果对象的索引（从0开始编号）
	 * @param  maxResults要检索的结果对象的最大数量（或无限制的<= 0）
	 * @return 包含0个或多个持久性实例的{@link  List} 
	 * @throws  DataAccessException Hibernate错误的情况
	 * @see  org.hibernate.criterion.Example＃create（Object）
	 * @see  org.hibernate.Criteria＃setFirstResult（int）
	 * @see  org.hibernate.Criteria＃setMaxResults（int）
	 */
	<T> List<T> findByExample(String entityName, T exampleEntity, int firstResult, int maxResults)
			throws DataAccessException;


	//-------------------------------------------------------------------------
	// Convenience finder methods for HQL strings
	//-------------------------------------------------------------------------

	/**
	 * Execute an HQL query, binding a number of values to "?" parameters
	 * in the query string.
	 * @param queryString a query expressed in Hibernate's query language
	 * @param values the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#createQuery
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行HQL查询，将多个值绑定到"？"查询字符串中的参数。 
	 *  
	 * @param  queryString以Hibernate的查询语言表示的查询
	 * @param 值参数的值
	 * @return  a {@link  List}包含查询执行的结果
	 * @throws  DataAccessException（对于Hibernate）错误
	 * @see 从5.0.4版本开始不推荐使用org.hibernate.Session＃createQuery @，建议将自定义{@link  HibernateCallback} lambda代码块传递给常规{@link  #execute}方法
	 */
	@Deprecated
	List<?> find(String queryString, Object... values) throws DataAccessException;

	/**
	 * Execute an HQL query, binding one value to a ":" named parameter
	 * in the query string.
	 * @param queryString a query expressed in Hibernate's query language
	 * @param paramName the name of the parameter
	 * @param value the value of the parameter
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行HQL查询，将一个值绑定到查询字符串中的"："命名参数。 
	 *  
	 * @param  queryString以Hibernate的查询语言表示的查询
	 * @param  paramName参数的名称
	 * @param 值参数的值
	 * @return 包含查询结果的{@link  List}在发生Hibernate错误的情况下执行
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Session＃getNamedQuery（String）@5.0.4起弃用，而赞成将自定义{@link  HibernateCallback} lambda代码块传递给一般的{@link  #execute}方法
	 */
	@Deprecated
	List<?> findByNamedParam(String queryString, String paramName, Object value) throws DataAccessException;

	/**
	 * Execute an HQL query, binding a number of values to ":" named
	 * parameters in the query string.
	 * @param queryString a query expressed in Hibernate's query language
	 * @param paramNames the names of the parameters
	 * @param values the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行HQL查询，将多个值绑定到查询字符串中名为"："的参数。 
	 *  
	 * @param  queryString以Hibernate的查询语言表示的查询
	 * @param  paramNames参数的名称
	 * @param 值的值
	 * @return 包含查询结果的{@link  List}在发生Hibernate错误的情况下执行
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Session＃getNamedQuery（String）@5.0.4起弃用，而赞成将自定义{@link  HibernateCallback} lambda代码块传递给一般的{@link  #execute}方法
	 */
	@Deprecated
	List<?> findByNamedParam(String queryString, String[] paramNames, Object[] values) throws DataAccessException;

	/**
	 * Execute an HQL query, binding the properties of the given bean to
	 * <i>named</i> parameters in the query string.
	 * @param queryString a query expressed in Hibernate's query language
	 * @param valueBean the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Query#setProperties
	 * @see org.hibernate.Session#createQuery
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行HQL查询，将给定bean的属性绑定到查询字符串中的<i> named </ i>参数。 
	 *  
	 * @param  queryString以Hibernate的查询语言表示的查询
	 * @param  valueBean参数的值
	 * @return  a {@link  List}包含查询执行的结果
	 * @throws  DataAccessException（对于Hibernate）错误
	 * @see  org.hibernate.Query＃setProperties 
	 * @see  org.hibernate.Session＃createQuery @deprecated from 5.0.4，推荐使用自定义{@link  HibernateCallback} lambda代码块传递给常规{@link  #execute}方法
	 */
	@Deprecated
	List<?> findByValueBean(String queryString, Object valueBean) throws DataAccessException;


	//-------------------------------------------------------------------------
	// Convenience finder methods for named queries
	//-------------------------------------------------------------------------

	/**
	 * Execute a named query binding a number of values to "?" parameters
	 * in the query string.
	 * <p>A named query is defined in a Hibernate mapping file.
	 * @param queryName the name of a Hibernate query in a mapping file
	 * @param values the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行一个命名查询，该查询将多个值绑定到"？"查询字符串中的参数。 
	 *  <p>在Hibernate映射文件中定义了一个命名查询。 
	 *  
	 * @param  queryName映射文件中Hibernate查询的名称
	 * @param 值参数的值
	 * @return  a {@link  List}包含查询执行的结果
	 * @throws  DataAccessException Hibernate错误的情况
	 * @see 从5.0.4开始不推荐使用org.hibernate.Session＃getNamedQuery（String）@，建议将自定义{@link  HibernateCallback} lambda代码块传递给常规{@link  #execute}方法
	 */
	@Deprecated
	List<?> findByNamedQuery(String queryName, Object... values) throws DataAccessException;

	/**
	 * Execute a named query, binding one value to a ":" named parameter
	 * in the query string.
	 * <p>A named query is defined in a Hibernate mapping file.
	 * @param queryName the name of a Hibernate query in a mapping file
	 * @param paramName the name of parameter
	 * @param value the value of the parameter
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行一个命名查询，将一个值绑定到查询字符串中的"："命名参数。 
	 *  <p>在Hibernate映射文件中定义了一个命名查询。 
	 *  
	 * @param  queryName映射文件中的Hibernate查询的名称
	 * @param  paramName参数
	 * @param 的名称value值参数
	 * @return 的值{{@link> List}包含以下结果从5.0.4开始不建议使用Hibernate错误的查询执行
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Session＃getNamedQuery（String）@，从5.0.4开始，建议使用自定义{@link  HibernateCallback} lambda代码块传递给常规的{@link  #execute}方法
	 */
	@Deprecated
	List<?> findByNamedQueryAndNamedParam(String queryName, String paramName, Object value)
			throws DataAccessException;

	/**
	 * Execute a named query, binding a number of values to ":" named
	 * parameters in the query string.
	 * <p>A named query is defined in a Hibernate mapping file.
	 * @param queryName the name of a Hibernate query in a mapping file
	 * @param paramNames the names of the parameters
	 * @param values the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行一个命名查询，将多个值绑定到查询字符串中的"："命名参数。 
	 *  <p>在Hibernate映射文件中定义了一个命名查询。 
	 *  
	 * @param  queryName映射文件中的Hibernate查询的名称
	 * @param  paramNames参数的名称
	 * @param 值参数的值
	 * @return 包含结果的{@link  List} Hibernate错误情况下查询执行
	 * @throws  DataAccessException的行为
	 * @see  org.hibernate.Session＃getNamedQuery（String）@自5.0.4起弃用，建议使用自定义{@link  HibernateCallback} lambda代码传递给常规{@link  #execute}方法的代码块
	 */
	@Deprecated
	List<?> findByNamedQueryAndNamedParam(String queryName, String[] paramNames, Object[] values)
			throws DataAccessException;

	/**
	 * Execute a named query, binding the properties of the given bean to
	 * ":" named parameters in the query string.
	 * <p>A named query is defined in a Hibernate mapping file.
	 * @param queryName the name of a Hibernate query in a mapping file
	 * @param valueBean the values of the parameters
	 * @return a {@link List} containing the results of the query execution
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Query#setProperties
	 * @see org.hibernate.Session#getNamedQuery(String)
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 执行一个命名查询，将给定bean的属性绑定到查询字符串中的"："命名参数。 
	 *  <p>在Hibernate映射文件中定义了一个命名查询。 
	 *  
	 * @param  queryName映射文件中的Hibernate查询的名称
	 * @param  valueBean参数的值
	 * @return  a {@link  List}包含查询执行的结果
	 * @throws  DataAccessException Hibernate错误的情况
	 * @see  org.hibernate.Query＃setProperties 
	 * @see  org.hibernate.Session＃getNamedQuery（String）@自5.0.4起不推荐使用，而推荐使用自定义{@link  HibernateCallback} lambda传递给常规{@link  #execute}方法的代码块
	 */
	@Deprecated
	List<?> findByNamedQueryAndValueBean(String queryName, Object valueBean) throws DataAccessException;


	//-------------------------------------------------------------------------
	// Convenience query methods for iteration and bulk updates/deletes
	//-------------------------------------------------------------------------

	/**
	 * Execute a query for persistent instances, binding a number of
	 * values to "?" parameters in the query string.
	 * <p>Returns the results as an {@link Iterator}. Entities returned are
	 * initialized on demand. See the Hibernate API documentation for details.
	 * @param queryString a query expressed in Hibernate's query language
	 * @param values the values of the parameters
	 * @return an {@link Iterator} containing 0 or more persistent instances
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#createQuery
	 * @see org.hibernate.Query#iterate
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 对持久实例执行查询，将多个值绑定到"？"查询字符串中的参数。 
	 *  <p>将结果作为{@link 迭代器}返回。 
	 * 返回的实体按需初始化。 
	 * 有关详细信息，请参见Hibernate API文档。 
	 *  
	 * @param  queryString用Hibernate的查询语言表示的查询
	 * @param 值参数的值
	 * @return 一个{@link  Iterator}包含0个或多个持久实例
	 * @throws  DataAccessException如果发生Hibernate错误
	 * @see  org.hibernate.Session＃createQuery 
	 * @see  org.hibernate.Query＃iterate @自5.0.4起弃用，建议将自定义{@link  HibernateCallback} lambda代码块传递给常规{ @link  #execute}方法
	 */
	@Deprecated
	Iterator<?> iterate(String queryString, Object... values) throws DataAccessException;

	/**
	 * Immediately close an {@link Iterator} created by any of the various
	 * {@code iterate(..)} operations, instead of waiting until the
	 * session is closed or disconnected.
	 * @param it the {@code Iterator} to close
	 * @throws DataAccessException if the {@code Iterator} could not be closed
	 * @see org.hibernate.Hibernate#close
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 立即关闭由各种{@code  iterate（..）}操作中的任何操作创建的{@link 迭代器}，而不必等到会话关闭或断开连接。 
	 *  
	 * @param 如果无法关闭{@code  Iterator}，则{{@code> Iterator}关闭
	 * @throws  DataAccessException 
	 * @see  org.hibernate.Hibernate＃close @从5.0开始不推荐使用。 
	 *  4，赞成将自定义{@link  HibernateCallback} lambda代码块传递给常规的{@link  #execute}方法
	 */
	@Deprecated
	void closeIterator(Iterator<?> it) throws DataAccessException;

	/**
	 * Update/delete all objects according to the given query, binding a number of
	 * values to "?" parameters in the query string.
	 * @param queryString an update/delete query expressed in Hibernate's query language
	 * @param values the values of the parameters
	 * @return the number of instances updated/deleted
	 * @throws DataAccessException in case of Hibernate errors
	 * @see org.hibernate.Session#createQuery
	 * @see org.hibernate.Query#executeUpdate
	 * @deprecated as of 5.0.4, in favor of a custom {@link HibernateCallback}
	 * lambda code block passed to the general {@link #execute} method
	 */
	/**
	 * 根据给定查询更新/删除所有对象，并将多个值绑定到"？"查询字符串中的参数。 
	 *  
	 * @param  queryString用Hibernate的查询语言表示的更新/删除查询
	 * @param 值参数的值
	 * @return 更新/删除的实例数
	 * @throws 发生Hibernate错误时的DataAccessException 
	 * @see  org.hibernate.Session＃createQuery 
	 * @see  org.hibernate.Query＃executeUpdate自5.0.4起已弃用，赞成将自定义{@link  HibernateCallback} lambda代码块传递给常规{@link  #execute}方法
	 */
	@Deprecated
	int bulkUpdate(String queryString, Object... values) throws DataAccessException;

}
