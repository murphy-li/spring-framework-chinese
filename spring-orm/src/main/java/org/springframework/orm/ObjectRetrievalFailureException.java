/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.orm;

import org.springframework.dao.DataRetrievalFailureException;
import org.springframework.lang.Nullable;

/**
 * Exception thrown if a mapped object could not be retrieved via its identifier.
 * Provides information about the persistent class and the identifier.
 *
 * @author Juergen Hoeller
 * @since 13.10.2003
 */
/**
 * 如果无法通过其标识符检索映射对象，则抛出异常。 
 * 提供有关持久类和标识符的信息。 
 *  @author  Juergen Hoeller @2003年10月13日
 */
@SuppressWarnings("serial")
public class ObjectRetrievalFailureException extends DataRetrievalFailureException {

	@Nullable
	private final Object persistentClass;

	@Nullable
	private final Object identifier;


	/**
	 * Create a general ObjectRetrievalFailureException with the given message,
	 * without any information on the affected object.
	 * @param msg the detail message
	 * @param cause the source exception
	 */
	/**
	 * 使用给定的消息创建一个普通的ObjectRetrievalFailureException，而无需任何有关受影响对象的信息。 
	 *  
	 * @param  msg详细消息
	 * @param 导致源异常
	 */
	public ObjectRetrievalFailureException(String msg, Throwable cause) {
		super(msg, cause);
		this.persistentClass = null;
		this.identifier = null;
	}

	/**
	 * Create a new ObjectRetrievalFailureException for the given object,
	 * with the default "not found" message.
	 * @param persistentClass the persistent class
	 * @param identifier the ID of the object that should have been retrieved
	 */
	/**
	 * 为给定对象创建一个新的ObjectRetrievalFailureException，并带有默认的"未找到"消息。 
	 *  
	 * @param  persistentClass持久类
	 * @param 标识符应该已经检索到的对象的ID
	 */
	public ObjectRetrievalFailureException(Class<?> persistentClass, Object identifier) {
		this(persistentClass, identifier,
				"Object of class [" + persistentClass.getName() + "] with identifier [" + identifier + "]: not found",
				null);
	}

	/**
	 * Create a new ObjectRetrievalFailureException for the given object,
	 * with the given explicit message and exception.
	 * @param persistentClass the persistent class
	 * @param identifier the ID of the object that should have been retrieved
	 * @param msg the detail message
	 * @param cause the source exception
	 */
	/**
	 * 使用给定的显式消息和异常，为给定对象创建一个新的ObjectRetrievalFailureException。 
	 *  
	 * @param  persistentClass持久类
	 * @param 标识符应该已经检索到的对象的ID 
	 * @param  msg详细消息
	 * @param 导致源异常
	 */
	public ObjectRetrievalFailureException(
			Class<?> persistentClass, Object identifier, String msg, @Nullable Throwable cause) {

		super(msg, cause);
		this.persistentClass = persistentClass;
		this.identifier = identifier;
	}

	/**
	 * Create a new ObjectRetrievalFailureException for the given object,
	 * with the default "not found" message.
	 * @param persistentClassName the name of the persistent class
	 * @param identifier the ID of the object that should have been retrieved
	 */
	/**
	 * 为给定对象创建一个新的ObjectRetrievalFailureException，并带有默认的"未找到"消息。 
	 *  
	 * @param  persistentClassName持久类的名称
	 * @param 标识符应该已经检索到的对象的ID
	 */
	public ObjectRetrievalFailureException(String persistentClassName, Object identifier) {
		this(persistentClassName, identifier,
				"Object of class [" + persistentClassName + "] with identifier [" + identifier + "]: not found",
				null);
	}

	/**
	 * Create a new ObjectRetrievalFailureException for the given object,
	 * with the given explicit message and exception.
	 * @param persistentClassName the name of the persistent class
	 * @param identifier the ID of the object that should have been retrieved
	 * @param msg the detail message
	 * @param cause the source exception
	 */
	/**
	 * 使用给定的显式消息和异常，为给定对象创建一个新的ObjectRetrievalFailureException。 
	 *  
	 * @param  persistentClassName持久类的名称
	 * @param 标识符应该已经检索到的对象的ID 
	 * @param  msg详细消息
	 * @param 导致源异常
	 */
	public ObjectRetrievalFailureException(
			String persistentClassName, Object identifier, String msg, @Nullable Throwable cause) {

		super(msg, cause);
		this.persistentClass = persistentClassName;
		this.identifier = identifier;
	}


	/**
	 * Return the persistent class of the object that was not found.
	 * If no Class was specified, this method returns null.
	 */
	/**
	 * 返回找不到的对象的持久类。 
	 * 如果未指定Class，则此方法返回null。 
	 * 
	 */
	@Nullable
	public Class<?> getPersistentClass() {
		return (this.persistentClass instanceof Class ? (Class<?>) this.persistentClass : null);
	}

	/**
	 * Return the name of the persistent class of the object that was not found.
	 * Will work for both Class objects and String names.
	 */
	/**
	 * 返回未找到的对象的持久类的名称。 
	 * 适用于Class对象和String名称。 
	 * 
	 */
	@Nullable
	public String getPersistentClassName() {
		if (this.persistentClass instanceof Class) {
			return ((Class<?>) this.persistentClass).getName();
		}
		return (this.persistentClass != null ? this.persistentClass.toString() : null);
	}

	/**
	 * Return the identifier of the object that was not found.
	 */
	/**
	 * 返回找不到的对象的标识符。 
	 * 
	 */
	@Nullable
	public Object getIdentifier() {
		return this.identifier;
	}

}
