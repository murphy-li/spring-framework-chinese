/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.oxm;

import java.io.IOException;

import javax.xml.transform.Result;

/**
 * Defines the contract for Object XML Mapping Marshallers. Implementations of this interface
 * can serialize a given Object to an XML Stream.
 *
 * <p>Although the {@code marshal} method accepts a {@code java.lang.Object} as its
 * first parameter, most {@code Marshaller} implementations cannot handle arbitrary
 * {@code Object}s. Instead, a object class must be registered with the marshaller,
 * or have a common base class.
 *
 * @author Arjen Poutsma
 * @since 3.0
 * @see Unmarshaller
 */
/**
 * 定义对象XML映射编组器的合同。 
 * 该接口的实现可以将给定的对象序列化为XML流。 
 *  <p>尽管{@code  marshal}方法接受一个{@code  java.lang.Object}作为其第一个参数，但是大多数{@code  Marshaller}实现不能处理任意的{@code  Object} s。 
 * 而是，对象类必须在编组器中注册，或者具有公共基类。 
 *  @author  Arjen Poutsma @从3.0开始
 * @see  Unmarshaller
 */
public interface Marshaller {

	/**
	 * Indicate whether this marshaller can marshal instances of the supplied type.
	 * @param clazz the class that this marshaller is being asked if it can marshal
	 * @return {@code true} if this marshaller can indeed marshal instances of the supplied class;
	 * {@code false} otherwise
	 */
	/**
	 * 指示此封送人员是否可以封送所提供类型的实例。 
	 *  
	 * @param 嘲笑正在询问该编组人员是否可以编组的类
	 * @return  {@code  true}该编组人员是否确实可以编组所提供类的实例； 
	 *  {@code  false}否则
	 */
	boolean supports(Class<?> clazz);

	/**
	 * Marshal the object graph with the given root into the provided {@link Result}.
	 * @param graph the root of the object graph to marshal
	 * @param result the result to marshal to
	 * @throws IOException if an I/O error occurs
	 * @throws XmlMappingException if the given object cannot be marshalled to the result
	 */
	/**
	 * 将具有给定根的对象图编组到提供的{@link 结果}中。 
	 *  
	 * @param 绘制对象图的根以进行编组
	 * @param 结果如果存在I / O错误，则将结果组织到
	 * @throws  IOException 
	 * @throws  XmlMappingException如果无法将给定的对象编组到结果中
	 */
	void marshal(Object graph, Result result) throws IOException, XmlMappingException;

}
