/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.oxm;

import java.io.IOException;

import javax.xml.transform.Source;

/**
 * Defines the contract for Object XML Mapping unmarshallers. Implementations of this
 * interface can deserialize a given XML Stream to an Object graph.
 *
 * @author Arjen Poutsma
 * @since 3.0
 * @see Marshaller
 */
/**
 * 定义对象XML映射解组器的协定。 
 * 该接口的实现可以将给定的XML流反序列化为对象图。 
 *  @author  Arjen Poutsma @从3.0开始
 * @see  Marshaller
 */
public interface Unmarshaller {

	/**
	 * Indicate whether this unmarshaller can unmarshal instances of the supplied type.
	 * @param clazz the class that this unmarshaller is being asked if it can marshal
	 * @return {@code true} if this unmarshaller can indeed unmarshal to the supplied class;
	 * {@code false} otherwise
	 */
	/**
	 * 指示此解组器是否可以解组所提供类型的实例。 
	 *  
	 * @param 嘲笑正在询问该解组员是否可以编组的课程
	 * @return  {@code  true}是否可以真正解组所提供的类； 
	 *  {@code  false}否则
	 */
	boolean supports(Class<?> clazz);

	/**
	 * Unmarshal the given {@link Source} into an object graph.
	 * @param source the source to marshal from
	 * @return the object graph
	 * @throws IOException if an I/O error occurs
	 * @throws XmlMappingException if the given source cannot be mapped to an object
	 */
	/**
	 * 将给定的{@link  Source}解组到对象图中。 
	 *  
	 * @param 源从
	 * @return 对象图进行封送源
	 * @throws  IOException如果发生I / O错误
	 * @throws  XmlMappingException如果给定的源无法映射到对象
	 */
	Object unmarshal(Source source) throws IOException, XmlMappingException;

}
