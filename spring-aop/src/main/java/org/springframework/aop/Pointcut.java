/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop;

/**
 * Core Spring pointcut abstraction.
 *
 * <p>A pointcut is composed of a {@link ClassFilter} and a {@link MethodMatcher}.
 * Both these basic terms and a Pointcut itself can be combined to build up combinations
 * (e.g. through {@link org.springframework.aop.support.ComposablePointcut}).
 *
 * @author Rod Johnson
 * @see ClassFilter
 * @see MethodMatcher
 * @see org.springframework.aop.support.Pointcuts
 * @see org.springframework.aop.support.ClassFilters
 * @see org.springframework.aop.support.MethodMatchers
 */
/**
 * 核心Spring切入点抽象。 
 *  <p>切入点由{@link  ClassFilter}和{@link  MethodMatcher}组成。 
 * 这些基本术语和Pointcut本身都可以组合起来以建立组合（例如，通过{@link  org.springframework.aop.support.ComposablePointcut}）。 
 *  @author  Rod Johnson 
 * @see  ClassFilter 
 * @see  MethodMatcher 
 * @see  org.springframework.aop.support.Pointcuts 
 * @see  org.springframework.aop.support.ClassFilters 
 * @see  org.springframework。 
 *  aop.support.MethodMatchers
 */
public interface Pointcut {

	/**
	 * Return the ClassFilter for this pointcut.
	 * @return the ClassFilter (never {@code null})
	 */
	/**
	 * 返回此切入点的ClassFilter。 
	 *  
	 * @return  ClassFilter（从不{<@@code> null}）
	 */
	ClassFilter getClassFilter();

	/**
	 * Return the MethodMatcher for this pointcut.
	 * @return the MethodMatcher (never {@code null})
	 */
	/**
	 * 返回此切入点的MethodMatcher。 
	 *  
	 * @return  MethodMatcher（从不{@code  null}）
	 */
	MethodMatcher getMethodMatcher();


	/**
	 * Canonical Pointcut instance that always matches.
	 */
	/**
	 * 始终匹配的Canonical Pointcut实例。 
	 * 
	 */
	Pointcut TRUE = TruePointcut.INSTANCE;

}
