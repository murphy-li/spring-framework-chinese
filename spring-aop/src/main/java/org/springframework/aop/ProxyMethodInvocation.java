/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop;

import org.aopalliance.intercept.MethodInvocation;

import org.springframework.lang.Nullable;

/**
 * Extension of the AOP Alliance {@link org.aopalliance.intercept.MethodInvocation}
 * interface, allowing access to the proxy that the method invocation was made through.
 *
 * <p>Useful to be able to substitute return values with the proxy,
 * if necessary, for example if the invocation target returned itself.
 *
 * @author Juergen Hoeller
 * @author Adrian Colyer
 * @since 1.1.3
 * @see org.springframework.aop.framework.ReflectiveMethodInvocation
 * @see org.springframework.aop.support.DelegatingIntroductionInterceptor
 */
/**
 * AOP联盟{@link  org.aopalliance.intercept.MethodInvocation}接口的扩展，允许访问通过其进行方法调用的代理。 
 *  <p>在必要时可以用代理替换返回值，例如在调用目标返回自身的情况下。 
 *  @author  Juergen Hoeller @author 阿德里安·科耶尔（Adrian Colyer）自1.1.3起
 */
public interface ProxyMethodInvocation extends MethodInvocation {

	/**
	 * Return the proxy that this method invocation was made through.
	 * @return the original proxy object
	 */
	/**
	 * 返回进行此方法调用的代理。 
	 *  
	 * @return 原始代理对象
	 */
	Object getProxy();

	/**
	 * Create a clone of this object. If cloning is done before {@code proceed()}
	 * is invoked on this object, {@code proceed()} can be invoked once per clone
	 * to invoke the joinpoint (and the rest of the advice chain) more than once.
	 * @return an invocable clone of this invocation.
	 * {@code proceed()} can be called once per clone.
	 */
	/**
	 * 创建此对象的副本。 
	 * 如果在此对象上调用{@code  proceed（）}之前完成克隆，则每个克隆{{@@code> proceed（）}可以被调用一次，以多次调用联接点（以及建议链的其余部分）。 
	 * 一旦。 
	 *  
	 * @return 此调用的可复制克隆。 
	 * 每个克隆都可以调用一次{@code  proce（）}。 
	 * 
	 */
	MethodInvocation invocableClone();

	/**
	 * Create a clone of this object. If cloning is done before {@code proceed()}
	 * is invoked on this object, {@code proceed()} can be invoked once per clone
	 * to invoke the joinpoint (and the rest of the advice chain) more than once.
	 * @param arguments the arguments that the cloned invocation is supposed to use,
	 * overriding the original arguments
	 * @return an invocable clone of this invocation.
	 * {@code proceed()} can be called once per clone.
	 */
	/**
	 * 创建此对象的副本。 
	 * 如果在此对象上调用{@code  proceed（）}之前完成克隆，则每个克隆{{@@code> proceed（）}可以被调用一次，以多次调用联接点（以及建议链的其余部分）。 
	 * 一旦。 
	 *  
	 * @param 自变量应该使用克隆调用的自变量，而覆盖原始自变量
	 * @return 此调用的可调用克隆。 
	 * 每个克隆都可以调用一次{@code  proce（）}。 
	 * 
	 */
	MethodInvocation invocableClone(Object... arguments);

	/**
	 * Set the arguments to be used on subsequent invocations in the any advice
	 * in this chain.
	 * @param arguments the argument array
	 */
	/**
	 * 在该链中的任何建议中设置要在后续调用中使用的参数。 
	 *  
	 * @param 参数实参数组
	 */
	void setArguments(Object... arguments);

	/**
	 * Add the specified user attribute with the given value to this invocation.
	 * <p>Such attributes are not used within the AOP framework itself. They are
	 * just kept as part of the invocation object, for use in special interceptors.
	 * @param key the name of the attribute
	 * @param value the value of the attribute, or {@code null} to reset it
	 */
	/**
	 * 将具有给定值的指定用户属性添加到此调用。 
	 *  <p> AOP框架本身不使用此类属性。 
	 * 它们只是作为调用对象的一部分保留，供特殊拦截器使用。 
	 *  
	 * @param 键键入属性的名称
	 * @param 值属性的值，或使用{@code  null}进行重置
	 */
	void setUserAttribute(String key, @Nullable Object value);

	/**
	 * Return the value of the specified user attribute.
	 * @param key the name of the attribute
	 * @return the value of the attribute, or {@code null} if not set
	 * @see #setUserAttribute
	 */
	/**
	 * 返回指定用户属性的值。 
	 *  
	 * @param 键入属性的名称
	 * @return 属性的值，如果未设置，则为{@code  null} 
	 * @see  #setUserAttribute
	 */
	@Nullable
	Object getUserAttribute(String key);

}
