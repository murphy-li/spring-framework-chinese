/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2008的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop;

/**
 * Tag interface for throws advice.
 *
 * <p>There are not any methods on this interface, as methods are invoked by
 * reflection. Implementing classes must implement methods of the form:
 *
 * <pre class="code">void afterThrowing([Method, args, target], ThrowableSubclass);</pre>
 *
 * <p>Some examples of valid methods would be:
 *
 * <pre class="code">public void afterThrowing(Exception ex)</pre>
 * <pre class="code">public void afterThrowing(RemoteException)</pre>
 * <pre class="code">public void afterThrowing(Method method, Object[] args, Object target, Exception ex)</pre>
 * <pre class="code">public void afterThrowing(Method method, Object[] args, Object target, ServletException ex)</pre>
 *
 * The first three arguments are optional, and only useful if we want further
 * information about the joinpoint, as in AspectJ <b>after-throwing</b> advice.
 *
 * <p><b>Note:</b> If a throws-advice method throws an exception itself, it will
 * override the original exception (i.e. change the exception thrown to the user).
 * The overriding exception will typically be a RuntimeException; this is compatible
 * with any method signature. However, if a throws-advice method throws a checked
 * exception, it will have to match the declared exceptions of the target method
 * and is hence to some degree coupled to specific target method signatures.
 * <b>Do not throw an undeclared checked exception that is incompatible with
 * the target method's signature!</b>
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see AfterReturningAdvice
 * @see MethodBeforeAdvice
 */
/**
 * 标签界面可引发建议。 
 *  <p>此接口上没有任何方法，因为方法是通过反射调用的。 
 * 实现类必须实现以下形式的方法：<pre class ="code"> void afterThrowing（[Method，args，target]，ThrowableSubclass）; </ pre> <p>有效方法的一些示例如下：<pre class = "code"> public void afterThrowing（Exception ex）</ pre> <pre class ="code"> public void afterThrowing（RemoteException）</ pre> <pre class ="code"> public void afterThrowing（方法方法，Object [ ] args，Object target，Exception ex）</ pre> <pre class ="code"> public void afterThrowing（方法方法，Object [] args，Object target，ServletException ex）</ pre>前三个参数是可选的，并且仅在我们需要有关连接点的更多信息时才有用，例如AspectJ <b>投掷后</ b>建议中。 
 *  <p> <b>注意：</ b>如果throws-advice方法本身引发异常，它将覆盖原始异常（即，将引发的异常更改给用户）。 
 * 覆盖的异常通常是RuntimeException。 
 * 这与任何方法签名都兼容。 
 * 但是，如果throws-advice方法抛出一个检查异常，则它必须与目标方法的已声明异常匹配，因此在某种程度上与特定的目标方法签名相关。 
 *  <b>不要抛出与目标方法签名不兼容的未声明检查异常！ 
 * </ b> @author  Rod Johnson @author  Juergen Hoeller 
 * @see  AfterReturningAdvice 
 * @see  MethodBeforeAdvice
 */
public interface ThrowsAdvice extends AfterAdvice {

}
