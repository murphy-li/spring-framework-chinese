/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop;

import java.lang.reflect.Method;

/**
 * Part of a {@link Pointcut}: Checks whether the target method is eligible for advice.
 *
 * <p>A MethodMatcher may be evaluated <b>statically</b> or at <b>runtime</b> (dynamically).
 * Static matching involves method and (possibly) method attributes. Dynamic matching
 * also makes arguments for a particular call available, and any effects of running
 * previous advice applying to the joinpoint.
 *
 * <p>If an implementation returns {@code false} from its {@link #isRuntime()}
 * method, evaluation can be performed statically, and the result will be the same
 * for all invocations of this method, whatever their arguments. This means that
 * if the {@link #isRuntime()} method returns {@code false}, the 3-arg
 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method will never be invoked.
 *
 * <p>If an implementation returns {@code true} from its 2-arg
 * {@link #matches(java.lang.reflect.Method, Class)} method and its {@link #isRuntime()} method
 * returns {@code true}, the 3-arg {@link #matches(java.lang.reflect.Method, Class, Object[])}
 * method will be invoked <i>immediately before each potential execution of the related advice</i>,
 * to decide whether the advice should run. All previous advice, such as earlier interceptors
 * in an interceptor chain, will have run, so any state changes they have produced in
 * parameters or ThreadLocal state will be available at the time of evaluation.
 *
 * <p>Concrete implementations of this interface typically should provide proper
 * implementations of {@link Object#equals(Object)} and {@link Object#hashCode()}
 * in order to allow the matcher to be used in caching scenarios &mdash; for
 * example, in proxies generated by CGLIB.
 *
 * @author Rod Johnson
 * @since 11.11.2003
 * @see Pointcut
 * @see ClassFilter
 */
/**
 * {@link 切入点}的一部分：检查目标方法是否符合建议的条件。 
 *  <p>可以<b>静态</ b>或在<b>运行时</ b>（动态）评估MethodMatcher。 
 * 静态匹配涉及方法和（可能）方法属性。 
 * 动态匹配还使特定调用的参数可用，以及运行先前建议应用于连接点的任何效果。 
 *  <p>如果实现从其{@link  #isRuntime（）}方法返回{@code  false}，则可以静态执行评估，并且此方法的所有调用的结果均相同论点。 
 * 这意味着，如果{@link  #isRuntime（）}方法返回{@code  false}，则3-arg {@link  #matches（java.lang.reflect.Method，Class，Object [] ）}方法将永远不会被调用。 
 *  <p>如果实现从其2-arg {@link  #matches（java.lang.reflect.Method，Class）}方法及其{@link  #isRuntime（）返回{@code  true} }方法返回{@code  true}，将在每次可能执行之前立即<i>调用3-arg {@link  #matches（java.lang.reflect.Method，Class，Object []）}方法相关建议</ i>，以决定是否应运行建议。 
 * 所有先前的建议（例如，拦截器链中较早的拦截器）都将运行，因此在评估时可以使用它们在参数或ThreadLocal状态中产生的任何状态更改。 
 *  <p>此接口的具体实现通常应提供{@link  Object＃equals（Object）}和{@link  Object＃hashCode（）}的正确实现，以允许在缓存方案中使用匹配器—例如，在CGLIB生成的代理中。 
 *  @author  Rod Johnson @2003年11月11日起
 * @see 切入点
 * @see  ClassFilter
 */
public interface MethodMatcher {

	/**
	 * Perform static checking whether the given method matches.
	 * <p>If this returns {@code false} or if the {@link #isRuntime()}
	 * method returns {@code false}, no runtime check (i.e. no
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} call)
	 * will be made.
	 * @param method the candidate method
	 * @param targetClass the target class
	 * @return whether or not this method matches statically
	 */
	/**
	 * 执行静态检查给定的方法是否匹配。 
	 *  <p>如果这返回{@code  false}，或者如果{@link  #isRuntime（）}方法返回{@code  false}，则没有运行时检查（即，没有{@link  #matches（ java.lang.reflect.Method，Class，Object []）}调用）。 
	 *  
	 * @param 方法候选方法
	 * @param  targetClass目标类
	 * @return 此方法是否静态匹配
	 */
	boolean matches(Method method, Class<?> targetClass);

	/**
	 * Is this MethodMatcher dynamic, that is, must a final call be made on the
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method at
	 * runtime even if the 2-arg matches method returns {@code true}?
	 * <p>Can be invoked when an AOP proxy is created, and need not be invoked
	 * again before each method invocation,
	 * @return whether or not a runtime match via the 3-arg
	 * {@link #matches(java.lang.reflect.Method, Class, Object[])} method
	 * is required if static matching passed
	 */
	/**
	 * 此MethodMatcher是否动态，也就是说，即使运行时2-arg匹配方法，也必须在运行时在{@link  #matches（java.lang.reflect.Method，Class，Object []）}方法上进行最终调用返回{@code  true}？ <p>可以在创建AOP代理时调用，并且无需在每次方法调用之前再次调用，<
	 * @return>是否通过3-arg {@link  #matches（java.lang如果通过了静态匹配，则需要.reflect.Method，Class，Object []）}方法
	 */
	boolean isRuntime();

	/**
	 * Check whether there a runtime (dynamic) match for this method,
	 * which must have matched statically.
	 * <p>This method is invoked only if the 2-arg matches method returns
	 * {@code true} for the given method and target class, and if the
	 * {@link #isRuntime()} method returns {@code true}. Invoked
	 * immediately before potential running of the advice, after any
	 * advice earlier in the advice chain has run.
	 * @param method the candidate method
	 * @param targetClass the target class
	 * @param args arguments to the method
	 * @return whether there's a runtime match
	 * @see MethodMatcher#matches(Method, Class)
	 */
	/**
	 * 检查此方法是否存在运行时（动态）匹配，该匹配必须静态匹配。 
	 *  <p>仅当2-arg Match方法为给定方法和目标类返回{@code  true}，并且{{@link> #isRuntime（）}方法返回{<@code > true}。 
	 * 在建议链中较早的任何建议运行之后，立即在潜在建议运行之前调用。 
	 *  
	 * @param 方法候选方法
	 * @param  targetClass目标类
	 * @param  args方法
	 * @return 的参数是否存在运行时匹配
	 * @see  MethodMatcher＃matches（Method，Class）
	 */
	boolean matches(Method method, Class<?> targetClass, Object... args);


	/**
	 * Canonical instance that matches all methods.
	 */
	/**
	 * 符合所有方法的规范实例。 
	 * 
	 */
	MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;

}
