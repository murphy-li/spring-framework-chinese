/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.support;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.lang.Nullable;
import org.springframework.util.PatternMatchUtils;

/**
 * Pointcut bean for simple method name matches, as an alternative to regexp patterns.
 *
 * <p>Does not handle overloaded methods: all methods with a given name will be eligible.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @author Rob Harrop
 * @since 11.02.2004
 * @see #isMatch
 */
/**
 * 简单方法名称匹配的Pointcut bean，作为regexp模式的替代方法。 
 *  <p>不处理重载方法：具有给定名称的所有方法均符合条件。 
 *  @author  Juergen Hoeller @author  Rod Johnson @author  Rob Harrop @2004年11月11日
 * @see  #isMatch
 */
@SuppressWarnings("serial")
public class NameMatchMethodPointcut extends StaticMethodMatcherPointcut implements Serializable {

	private List<String> mappedNames = new ArrayList<>();


	/**
	 * Convenience method when we have only a single method name to match.
	 * Use either this method or {@code setMappedNames}, not both.
	 * @see #setMappedNames
	 */
	/**
	 * 当我们只有一个方法名称要匹配时的便捷方法。 
	 * 使用此方法或{@code  setMappedNames}，请不要同时使用两者。 
	 *  
	 * @see  #setMappedNames
	 */
	public void setMappedName(String mappedName) {
		setMappedNames(mappedName);
	}

	/**
	 * Set the method names defining methods to match.
	 * Matching will be the union of all these; if any match,
	 * the pointcut matches.
	 */
	/**
	 * 设置方法名称以定义匹配的方法。 
	 * 匹配将是所有这些的结合。 
	 * 如果有匹配项，则切入点匹配。 
	 * 
	 */
	public void setMappedNames(String... mappedNames) {
		this.mappedNames = new ArrayList<>(Arrays.asList(mappedNames));
	}

	/**
	 * Add another eligible method name, in addition to those already named.
	 * Like the set methods, this method is for use when configuring proxies,
	 * before a proxy is used.
	 * <p><b>NB:</b> This method does not work after the proxy is in
	 * use, as advice chains will be cached.
	 * @param name name of the additional method that will match
	 * @return this pointcut to allow for multiple additions in one line
	 */
	/**
	 * 除了已经命名的方法名称之外，还添加另一个合格的方法名称。 
	 * 与set方法类似，此方法用于配置代理之前使用代理之前。 
	 *  <p> <b> NB：</ b>此方法在使用代理后不起作用，因为将缓存通知链。 
	 *  
	 * @param 名称将与该切入点
	 * @return 相匹配的附加方法的名称，以允许在一行中进行多次添加
	 */
	public NameMatchMethodPointcut addMethodName(String name) {
		this.mappedNames.add(name);
		return this;
	}


	@Override
	public boolean matches(Method method, Class<?> targetClass) {
		for (String mappedName : this.mappedNames) {
			if (mappedName.equals(method.getName()) || isMatch(method.getName(), mappedName)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Return if the given method name matches the mapped name.
	 * <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,
	 * as well as direct equality. Can be overridden in subclasses.
	 * @param methodName the method name of the class
	 * @param mappedName the name in the descriptor
	 * @return if the names match
	 * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)
	 */
	/**
	 * 如果给定的方法名称与映射名称匹配，则返回。 
	 *  <p>默认实现检查"xxx"，"xxx"和"xxx"匹配项以及直接相等性。 
	 * 可以在子类中覆盖。 
	 *  
	 * @param  methodName类的方法名称
	 * @param  mappingName描述符中的名称
	 * @return 如果名称匹配
	 * @see  org.springframework.util.PatternMatchUtils＃simpleMatch（String，String）
	 */
	protected boolean isMatch(String methodName, String mappedName) {
		return PatternMatchUtils.simpleMatch(mappedName, methodName);
	}


	@Override
	public boolean equals(@Nullable Object other) {
		return (this == other || (other instanceof NameMatchMethodPointcut &&
				this.mappedNames.equals(((NameMatchMethodPointcut) other).mappedNames)));
	}

	@Override
	public int hashCode() {
		return this.mappedNames.hashCode();
	}

	@Override
	public String toString() {
		return getClass().getName() + ": " + this.mappedNames;
	}

}
