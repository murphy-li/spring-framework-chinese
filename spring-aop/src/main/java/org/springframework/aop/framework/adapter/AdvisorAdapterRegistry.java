/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.framework.adapter;

import org.aopalliance.intercept.MethodInterceptor;

import org.springframework.aop.Advisor;

/**
 * Interface for registries of Advisor adapters.
 *
 * <p><i>This is an SPI interface, not to be implemented by any Spring user.</i>
 *
 * @author Rod Johnson
 * @author Rob Harrop
 */
/**
 * Advisor适配器注册表的接口。 
 *  <p> <i>这是一个SPI接口，任何Spring用户都不能实现。 
 * </ i> @author  Rod Johnson @author  Rob Harrop
 */
public interface AdvisorAdapterRegistry {

	/**
	 * Return an {@link Advisor} wrapping the given advice.
	 * <p>Should by default at least support
	 * {@link org.aopalliance.intercept.MethodInterceptor},
	 * {@link org.springframework.aop.MethodBeforeAdvice},
	 * {@link org.springframework.aop.AfterReturningAdvice},
	 * {@link org.springframework.aop.ThrowsAdvice}.
	 * @param advice an object that should be an advice
	 * @return an Advisor wrapping the given advice (never {@code null};
	 * if the advice parameter is an Advisor, it is to be returned as-is)
	 * @throws UnknownAdviceTypeException if no registered advisor adapter
	 * can wrap the supposed advice
	 */
	/**
	 * 返回包装给定建议的{@link  Advisor}。 
	 *  <p>默认情况下至少应支持{@link  org.aopalliance.intercept.MethodInterceptor}，{<@link> org.springframework.aop.MethodBeforeAdvice}，{<@link> org.springframework.aop.AfterReturningAdvice} ，{<@link> org.springframework.aop.ThrowsAdvice}。 
	 *  @param advisor一个应该作为建议的对象
	 * @return 封装给定建议的Advisor（永远不{@code  null}； 
	 * 如果advice参数是Advisor，则将按原样返回）<
	 * @throws > UnknownAdviceTypeException如果没有注册的顾问程序适配器可以包装假定的建议
	 */
	Advisor wrap(Object advice) throws UnknownAdviceTypeException;

	/**
	 * Return an array of AOP Alliance MethodInterceptors to allow use of the
	 * given Advisor in an interception-based framework.
	 * <p>Don't worry about the pointcut associated with the {@link Advisor}, if it is
	 * a {@link org.springframework.aop.PointcutAdvisor}: just return an interceptor.
	 * @param advisor the Advisor to find an interceptor for
	 * @return an array of MethodInterceptors to expose this Advisor's behavior
	 * @throws UnknownAdviceTypeException if the Advisor type is
	 * not understood by any registered AdvisorAdapter
	 */
	/**
	 * 返回一个AOP Alliance MethodInterceptor数组，以允许在基于拦截的框架中使用给定的Advisor。 
	 *  <p>如果它是{@link  org.springframework.aop.PointcutAdvisor}，则不用担心与{@link  Advisor}关联的切入点：只需返回一个拦截器即可。 
	 *  @param advisor Advisor的顾问，用于为
	 * @return 的MethodInterceptor数组查找拦截器，以暴露此Advisor的行为
	 * @throws  UnknownAdviceTypeException，如果任何注册的AdvisorAdapter无法理解Advisor类型
	 */
	MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException;

	/**
	 * Register the given {@link AdvisorAdapter}. Note that it is not necessary to register
	 * adapters for an AOP Alliance Interceptors or Spring Advices: these must be
	 * automatically recognized by an {@code AdvisorAdapterRegistry} implementation.
	 * @param adapter an AdvisorAdapter that understands particular Advisor or Advice types
	 */
	/**
	 * 注册给定的{@link  AdvisorAdapter}。 
	 * 请注意，没有必要为AOP Alliance拦截器或Spring建议注册适配器：它们必须由{@code  AdvisorAdapterRegistry}实现自动识别。 
	 *  @param adapter可以理解特定Advisor或Advice类型的AdvisorAdapter
	 */
	void registerAdvisorAdapter(AdvisorAdapter adapter);

}
