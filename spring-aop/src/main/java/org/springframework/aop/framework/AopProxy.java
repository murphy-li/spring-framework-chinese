/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.framework;

import org.springframework.lang.Nullable;

/**
 * Delegate interface for a configured AOP proxy, allowing for the creation
 * of actual proxy objects.
 *
 * <p>Out-of-the-box implementations are available for JDK dynamic proxies
 * and for CGLIB proxies, as applied by {@link DefaultAopProxyFactory}.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see DefaultAopProxyFactory
 */
/**
 * 用于配置的AOP代理的委托接口，允许创建实际的代理对象。 
 *  <p>由{@link  DefaultAopProxyFactory}应用的现成的实现可用于JDK动态代理和CGLIB代理。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller 
 * @see  DefaultAopProxyFactory
 */
public interface AopProxy {

	/**
	 * Create a new proxy object.
	 * <p>Uses the AopProxy's default class loader (if necessary for proxy creation):
	 * usually, the thread context class loader.
	 * @return the new proxy object (never {@code null})
	 * @see Thread#getContextClassLoader()
	 */
	/**
	 * 创建一个新的代理对象。 
	 *  <p>使用AopProxy的默认类加载器（如果需要创建代理）：通常是线程上下文类加载器。 
	 *  
	 * @return 新的代理对象（决不{<@@code> null}）
	 * @see  Thread＃getContextClassLoader（）
	 */
	Object getProxy();

	/**
	 * Create a new proxy object.
	 * <p>Uses the given class loader (if necessary for proxy creation).
	 * {@code null} will simply be passed down and thus lead to the low-level
	 * proxy facility's default, which is usually different from the default chosen
	 * by the AopProxy implementation's {@link #getProxy()} method.
	 * @param classLoader the class loader to create the proxy with
	 * (or {@code null} for the low-level proxy facility's default)
	 * @return the new proxy object (never {@code null})
	 */
	/**
	 * 创建一个新的代理对象。 
	 *  <p>使用给定的类加载器（如果需要创建代理）。 
	 *  {@code  null}将被简单地传递，从而导致低级代理工具的默认值，该默认值通常与AopProxy实现的{@link  #getProxy（）}方法选择的默认值不同。 
	 *  @param classLoader用于使用以下命令创建代理的类加载器（对于低级代理工具的默认值，使用{@code  null}）<
	 * @return>新的代理对象（绝不{@code  null}）
	 */
	Object getProxy(@Nullable ClassLoader classLoader);

}
