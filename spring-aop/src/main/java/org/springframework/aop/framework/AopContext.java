/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.framework;

import org.springframework.core.NamedThreadLocal;
import org.springframework.lang.Nullable;

/**
 * Class containing static methods used to obtain information about the current AOP invocation.
 *
 * <p>The {@code currentProxy()} method is usable if the AOP framework is configured to
 * expose the current proxy (not the default). It returns the AOP proxy in use. Target objects
 * or advice can use this to make advised calls, in the same way as {@code getEJBObject()}
 * can be used in EJBs. They can also use it to find advice configuration.
 *
 * <p>Spring's AOP framework does not expose proxies by default, as there is a performance cost
 * in doing so.
 *
 * <p>The functionality in this class might be used by a target object that needed access
 * to resources on the invocation. However, this approach should not be used when there is
 * a reasonable alternative, as it makes application code dependent on usage under AOP and
 * the Spring AOP framework in particular.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 13.03.2003
 */
/**
 * 包含用于获取有关当前AOP调用信息的静态方法的类。 
 *  <p>如果将AOP框架配置为公开当前代理（不是默认代理），则{@code  currentProxy（）}方法可用。 
 * 它返回正在使用的AOP代理。 
 * 目标对象或建议可以使用此方法进行建议的调用，就像{@code  getEJBObject（）}可以在EJB中使用一样。 
 * 他们还可以使用它来查找建议配置。 
 *  <p> Spring的AOP框架默认情况下不公开代理，因为这样做会提高性能。 
 *  <p>此类的功能可能由需要访问调用资源的目标对象使用。 
 * 但是，如果有合理的选择，则不应使用此方法，因为它会使应用程序代码取决于AOP尤其是Spring AOP框架下的用法。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @2003年3月13日起
 */
public final class AopContext {

	/**
	 * ThreadLocal holder for AOP proxy associated with this thread.
	 * Will contain {@code null} unless the "exposeProxy" property on
	 * the controlling proxy configuration has been set to "true".
	 * @see ProxyConfig#setExposeProxy
	 */
	/**
	 * 与此线程关联的AOP代理的ThreadLocal持有者。 
	 * 除非控制代理配置上的"exposeProxy"属性已设置为"true"，否则将包含{@code  null}。 
	 *  
	 * @see  ProxyConfig＃setExposeProxy
	 */
	private static final ThreadLocal<Object> currentProxy = new NamedThreadLocal<>("Current AOP proxy");


	private AopContext() {
	}


	/**
	 * Try to return the current AOP proxy. This method is usable only if the
	 * calling method has been invoked via AOP, and the AOP framework has been set
	 * to expose proxies. Otherwise, this method will throw an IllegalStateException.
	 * @return the current AOP proxy (never returns {@code null})
	 * @throws IllegalStateException if the proxy cannot be found, because the
	 * method was invoked outside an AOP invocation context, or because the
	 * AOP framework has not been configured to expose the proxy
	 */
	/**
	 * 尝试返回当前的AOP代理。 
	 * 仅当已通过AOP调用了调用方法，并且已将AOP框架设置为公开代理时，此方法才可用。 
	 * 否则，此方法将引发IllegalStateException。 
	 *  
	 * @return 当前的AOP代理（从不返回{@code  null}）
	 * @throws 如果找不到代理，因为该方法是在AOP调用上下文之外调用的，或者是因为尚未找到AOP框架，所以找不到IllegalStateException配置为公开代理
	 */
	public static Object currentProxy() throws IllegalStateException {
		Object proxy = currentProxy.get();
		if (proxy == null) {
			throw new IllegalStateException(
					"Cannot find current proxy: Set 'exposeProxy' property on Advised to 'true' to make it available, and " +
							"ensure that AopContext.currentProxy() is invoked in the same thread as the AOP invocation context.");
		}
		return proxy;
	}

	/**
	 * Make the given proxy available via the {@code currentProxy()} method.
	 * <p>Note that the caller should be careful to keep the old value as appropriate.
	 * @param proxy the proxy to expose (or {@code null} to reset it)
	 * @return the old proxy, which may be {@code null} if none was bound
	 * @see #currentProxy()
	 */
	/**
	 * 通过{@code  currentProxy（）}方法使给定的代理可用。 
	 *  <p>请注意，调用方应注意适当保留旧值。 
	 *  @param proxy代理公开的代理（或将{@code  null}重置）
	 * @return 旧代理，如果未绑定任何旧代理，则可能为{@code  null} 
	 * @see  #currentProxy（）
	 */
	@Nullable
	static Object setCurrentProxy(@Nullable Object proxy) {
		Object old = currentProxy.get();
		if (proxy != null) {
			currentProxy.set(proxy);
		}
		else {
			currentProxy.remove();
		}
		return old;
	}

}
