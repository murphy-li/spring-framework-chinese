/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.framework.adapter;

import org.aopalliance.aop.Advice;
import org.aopalliance.intercept.MethodInterceptor;

import org.springframework.aop.Advisor;

/**
 * Interface allowing extension to the Spring AOP framework to allow
 * handling of new Advisors and Advice types.
 *
 * <p>Implementing objects can create AOP Alliance Interceptors from
 * custom advice types, enabling these advice types to be used
 * in the Spring AOP framework, which uses interception under the covers.
 *
 * <p>There is no need for most Spring users to implement this interface;
 * do so only if you need to introduce more Advisor or Advice types to Spring.
 *
 * @author Rod Johnson
 */
/**
 * 该接口允许扩展到Spring AOP框架，以允许处理新的Advisor和Advice类型。 
 *  <p>实现对象可以根据自定义建议类型创建AOP联盟拦截器，从而使这些建议类型可以在Spring AOP框架中使用，该框架在幕后使用了拦截。 
 *  <p>大多数Spring用户无需实现此接口； 
 * 仅在需要在Spring中引入更多Advisor或Advice类型时才这样做。 
 *  @author 罗德·约翰逊
 */
public interface AdvisorAdapter {

	/**
	 * Does this adapter understand this advice object? Is it valid to
	 * invoke the {@code getInterceptors} method with an Advisor that
	 * contains this advice as an argument?
	 * @param advice an Advice such as a BeforeAdvice
	 * @return whether this adapter understands the given advice object
	 * @see #getInterceptor(org.springframework.aop.Advisor)
	 * @see org.springframework.aop.BeforeAdvice
	 */
	/**
	 * 此适配器是否理解此建议对象？使用包含该建议作为参数的Advisor调用{@code  getInterceptors}方法是否有效？ @param建议建议，例如BeforeAdvice 
	 * @return ，此适配器是否理解给定的建议对象
	 * @see  #getInterceptor（org.springframework.aop.Advisor）
	 * @see  org.springframework.aop.BeforeAdvice
	 */
	boolean supportsAdvice(Advice advice);

	/**
	 * Return an AOP Alliance MethodInterceptor exposing the behavior of
	 * the given advice to an interception-based AOP framework.
	 * <p>Don't worry about any Pointcut contained in the Advisor;
	 * the AOP framework will take care of checking the pointcut.
	 * @param advisor the Advisor. The supportsAdvice() method must have
	 * returned true on this object
	 * @return an AOP Alliance interceptor for this Advisor. There's
	 * no need to cache instances for efficiency, as the AOP framework
	 * caches advice chains.
	 */
	/**
	 * 返回一个AOP Alliance MethodInterceptor，将给定建议的行为暴露给基于拦截的AOP框架。 
	 *  <p>不用担心Advisor中包含的任何切入点； 
	 *  AOP框架将负责检查切入点。 
	 *  @param advisor顾问。 
	 * 此对象的AOP Alliance拦截器在此对象
	 * @return 上，supportsAdvice（）方法必须返回true。 
	 * 无需为了提高效率而缓存实例，因为AOP框架缓存了建议链。 
	 * 
	 */
	MethodInterceptor getInterceptor(Advisor advisor);

}
