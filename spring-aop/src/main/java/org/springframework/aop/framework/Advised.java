/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.framework;

import org.aopalliance.aop.Advice;

import org.springframework.aop.Advisor;
import org.springframework.aop.TargetClassAware;
import org.springframework.aop.TargetSource;

/**
 * Interface to be implemented by classes that hold the configuration
 * of a factory of AOP proxies. This configuration includes the
 * Interceptors and other advice, Advisors, and the proxied interfaces.
 *
 * <p>Any AOP proxy obtained from Spring can be cast to this interface to
 * allow manipulation of its AOP advice.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 13.03.2003
 * @see org.springframework.aop.framework.AdvisedSupport
 */
/**
 * 由包含AOP代理工厂配置的类实现的接口。 
 * 此配置包括拦截器和其他建议，顾问以及代理接口。 
 *  <p>从Spring获得的任何AOP代理都可以转换为该接口，以允许对其AOP建议进行操作。 
 *  @author  Rod Johnson @author  Juergen Hoeller自2003年3月13日以来
 * @see  org.springframework.aop.framework.AdvisedSupport
 */
public interface Advised extends TargetClassAware {

	/**
	 * Return whether the Advised configuration is frozen,
	 * in which case no advice changes can be made.
	 */
	/**
	 * 返回建议的配置是否被冻结，在这种情况下，无法进行建议更改。 
	 * 
	 */
	boolean isFrozen();

	/**
	 * Are we proxying the full target class instead of specified interfaces?
	 */
	/**
	 * 我们是在代理完整的目标类而不是指定的接口吗？
	 */
	boolean isProxyTargetClass();

	/**
	 * Return the interfaces proxied by the AOP proxy.
	 * <p>Will not include the target class, which may also be proxied.
	 */
	/**
	 * 返回由AOP代理代理的接口。 
	 *  <p>将不包括目标类别，也可以将其作为代理。 
	 * 
	 */
	Class<?>[] getProxiedInterfaces();

	/**
	 * Determine whether the given interface is proxied.
	 * @param intf the interface to check
	 */
	/**
	 * 确定是否代理给定的接口。 
	 *  @param intf接口检查
	 */
	boolean isInterfaceProxied(Class<?> intf);

	/**
	 * Change the {@code TargetSource} used by this {@code Advised} object.
	 * <p>Only works if the configuration isn't {@linkplain #isFrozen frozen}.
	 * @param targetSource new TargetSource to use
	 */
	/**
	 * 更改此{@code  Advised}对象使用的{@code  TargetSource}。 
	 *  <p>仅在配置未{@link 普通#isFrozen冻结}时有效。 
	 *  @param targetSource要使用的新TargetSource
	 */
	void setTargetSource(TargetSource targetSource);

	/**
	 * Return the {@code TargetSource} used by this {@code Advised} object.
	 */
	/**
	 * 返回此{@code  Advised}对象使用的{@code  TargetSource}。 
	 * 
	 */
	TargetSource getTargetSource();

	/**
	 * Set whether the proxy should be exposed by the AOP framework as a
	 * {@link ThreadLocal} for retrieval via the {@link AopContext} class.
	 * <p>It can be necessary to expose the proxy if an advised object needs
	 * to invoke a method on itself with advice applied. Otherwise, if an
	 * advised object invokes a method on {@code this}, no advice will be applied.
	 * <p>Default is {@code false}, for optimal performance.
	 */
	/**
	 * 设置代理是否应由AOP框架公开为{@link  ThreadLocal}以便通过{@link  AopContext}类进行检索。 
	 *  <p>如果建议对象需要在应用建议的情况下调用自身的方法，则可能需要公开代理。 
	 * 否则，如果建议的对象在{@code  this}上调用方法，则不会应用任何建议。 
	 *  <p>默认为{@code  false}，以获得最佳性能。 
	 * 
	 */
	void setExposeProxy(boolean exposeProxy);

	/**
	 * Return whether the factory should expose the proxy as a {@link ThreadLocal}.
	 * <p>It can be necessary to expose the proxy if an advised object needs
	 * to invoke a method on itself with advice applied. Otherwise, if an
	 * advised object invokes a method on {@code this}, no advice will be applied.
	 * <p>Getting the proxy is analogous to an EJB calling {@code getEJBObject()}.
	 * @see AopContext
	 */
	/**
	 * 返回工厂是否应将代理公开为{@link  ThreadLocal}。 
	 *  <p>如果建议对象需要在应用建议的情况下调用自身的方法，则可能需要公开代理。 
	 * 否则，如果建议的对象在{@code  this}上调用方法，则不会应用任何建议。 
	 *  <p>获取代理类似于调用{@code  getEJBObject（）}的EJB。 
	 *  
	 * @see  AopContext
	 */
	boolean isExposeProxy();

	/**
	 * Set whether this proxy configuration is pre-filtered so that it only
	 * contains applicable advisors (matching this proxy's target class).
	 * <p>Default is "false". Set this to "true" if the advisors have been
	 * pre-filtered already, meaning that the ClassFilter check can be skipped
	 * when building the actual advisor chain for proxy invocations.
	 * @see org.springframework.aop.ClassFilter
	 */
	/**
	 * 设置此代理配置是否已预先过滤，以便仅包含适用的顾问程序（与该代理的目标类匹配）。 
	 *  <p>默认为"false"。 
	 * 如果已经对顾问程序进行了预过滤，则将其设置为"true"，这意味着在为代理调用构建实际的顾问程序链时可以跳过ClassFilter检查。 
	 *  
	 * @see  org.springframework.aop.ClassFilter
	 */
	void setPreFiltered(boolean preFiltered);

	/**
	 * Return whether this proxy configuration is pre-filtered so that it only
	 * contains applicable advisors (matching this proxy's target class).
	 */
	/**
	 * 返回此代理配置是否已预先过滤，以便仅包含适用的顾问程序（与该代理的目标类匹配）。 
	 * 
	 */
	boolean isPreFiltered();

	/**
	 * Return the advisors applying to this proxy.
	 * @return a list of Advisors applying to this proxy (never {@code null})
	 */
	/**
	 * 返回申请此代理的顾问。 
	 *  
	 * @return 应用于此代理的顾问的列表（永远{<@@code> null}）
	 */
	Advisor[] getAdvisors();

	/**
	 * Add an advisor at the end of the advisor chain.
	 * <p>The Advisor may be an {@link org.springframework.aop.IntroductionAdvisor},
	 * in which new interfaces will be available when a proxy is next obtained
	 * from the relevant factory.
	 * @param advisor the advisor to add to the end of the chain
	 * @throws AopConfigException in case of invalid advice
	 */
	/**
	 * 在顾问链的末尾添加顾问。 
	 *  <p>顾问可以是{@link  org.springframework.aop.IntroductionAdvisor}，在下一次从相关工厂获得代理时，新接口将可用。 
	 *  @param advisor顾问，在无效建议的情况下，将其添加到链
	 * @throws  AopConfigException的末尾
	 */
	void addAdvisor(Advisor advisor) throws AopConfigException;

	/**
	 * Add an Advisor at the specified position in the chain.
	 * @param advisor the advisor to add at the specified position in the chain
	 * @param pos position in chain (0 is head). Must be valid.
	 * @throws AopConfigException in case of invalid advice
	 */
	/**
	 * 在链中的指定位置添加顾问。 
	 *  @param advisor顾问在链中的指定位置添加@param pos在链中的位置（0为开头）。 
	 * 必须有效。 
	 *  
	 * @throws  AopConfigException在无效建议的情况下
	 */
	void addAdvisor(int pos, Advisor advisor) throws AopConfigException;

	/**
	 * Remove the given advisor.
	 * @param advisor the advisor to remove
	 * @return {@code true} if the advisor was removed; {@code false}
	 * if the advisor was not found and hence could not be removed
	 */
	/**
	 * 删除给定的顾问。 
	 *  @param advisor顾问如果删除了顾问，则删除
	 * @return  {@code  true}； 
	 *  {@code  false}如果找不到顾问，因此无法将其删除
	 */
	boolean removeAdvisor(Advisor advisor);

	/**
	 * Remove the advisor at the given index.
	 * @param index index of advisor to remove
	 * @throws AopConfigException if the index is invalid
	 */
	/**
	 * 删除给定索引处的顾问。 
	 * 顾问的@param索引索引，如果索引无效，则删除
	 * @throws  AopConfigException
	 */
	void removeAdvisor(int index) throws AopConfigException;

	/**
	 * Return the index (from 0) of the given advisor,
	 * or -1 if no such advisor applies to this proxy.
	 * <p>The return value of this method can be used to index into the advisors array.
	 * @param advisor the advisor to search for
	 * @return index from 0 of this advisor, or -1 if there's no such advisor
	 */
	/**
	 * 返回给定顾问程序的索引（从0开始）； 
	 * 如果没有适用于此代理程序的顾问程序，则返回-1。 
	 *  <p>此方法的返回值可用于索引Advisors数组。 
	 *  @param advisor顾问，从该顾问的0搜索
	 * @return 索引，如果没有这样的顾问，则从-1搜索
	 */
	int indexOf(Advisor advisor);

	/**
	 * Replace the given advisor.
	 * <p><b>Note:</b> If the advisor is an {@link org.springframework.aop.IntroductionAdvisor}
	 * and the replacement is not or implements different interfaces, the proxy will need
	 * to be re-obtained or the old interfaces won't be supported and the new interface
	 * won't be implemented.
	 * @param a the advisor to replace
	 * @param b the advisor to replace it with
	 * @return whether it was replaced. If the advisor wasn't found in the
	 * list of advisors, this method returns {@code false} and does nothing.
	 * @throws AopConfigException in case of invalid advice
	 */
	/**
	 * 替换给定的顾问。 
	 *  <p> <b>注意：</ b>如果顾问程序是{@link  org.springframework.aop.IntroductionAdvisor}且替换项不是或实现不同的接口，则需要重新获取代理或不支持旧的接口，也不会实现新的接口。 
	 *  @param a顾问替换@param b顾问用
	 * @return 替换它是否被替换。 
	 * 如果在顾问列表中未找到该顾问，则此方法返回{@code  false}并且不执行任何操作。 
	 *  
	 * @throws  AopConfigException在无效建议的情况下
	 */
	boolean replaceAdvisor(Advisor a, Advisor b) throws AopConfigException;

	/**
	 * Add the given AOP Alliance advice to the tail of the advice (interceptor) chain.
	 * <p>This will be wrapped in a DefaultPointcutAdvisor with a pointcut that always
	 * applies, and returned from the {@code getAdvisors()} method in this wrapped form.
	 * <p>Note that the given advice will apply to all invocations on the proxy,
	 * even to the {@code toString()} method! Use appropriate advice implementations
	 * or specify appropriate pointcuts to apply to a narrower set of methods.
	 * @param advice advice to add to the tail of the chain
	 * @throws AopConfigException in case of invalid advice
	 * @see #addAdvice(int, Advice)
	 * @see org.springframework.aop.support.DefaultPointcutAdvisor
	 */
	/**
	 * 将给定的AOP联盟建议添加到建议（拦截器）链的末尾。 
	 *  <p>这将包装在一个始终适用的切入点的DefaultPointcutAdvisor中，并以这种包装形式从{@code  getAdvisors（）}方法返回。 
	 *  <p>请注意，给出的建议将应用于代理上的所有调用，甚至适用于{@code  toString（）}方法！ 
	 * 使用适当的建议实现或指定适当的切入点以适用于一组较窄的方法。 
	 *  @param建议添加到链尾的建议
	 * @throws  AopConfigException，如果无效建议
	 * @see  #addAdvice（int，Advice）
	 * @see  org.springframework.aop.support.DefaultPointcutAdvisor
	 */
	void addAdvice(Advice advice) throws AopConfigException;

	/**
	 * Add the given AOP Alliance Advice at the specified position in the advice chain.
	 * <p>This will be wrapped in a {@link org.springframework.aop.support.DefaultPointcutAdvisor}
	 * with a pointcut that always applies, and returned from the {@link #getAdvisors()}
	 * method in this wrapped form.
	 * <p>Note: The given advice will apply to all invocations on the proxy,
	 * even to the {@code toString()} method! Use appropriate advice implementations
	 * or specify appropriate pointcuts to apply to a narrower set of methods.
	 * @param pos index from 0 (head)
	 * @param advice advice to add at the specified position in the advice chain
	 * @throws AopConfigException in case of invalid advice
	 */
	/**
	 * 在建议链中的指定位置添加给定的AOP联盟建议。 
	 *  <p>这将被包装在{@link  org.springframework.aop.support.DefaultPointcutAdvisor}中，并且切入点始终适用，并以这种包装形式从{@link  #getAdvisors（）}方法返回。 
	 *  <p>注意：给出的建议将应用于代理上的所有调用，甚至适用于{@code  toString（）}方法！ 
	 * 使用适当的建议实现或指定适当的切入点以适用于一组较窄的方法。 
	 *  @param pos索引从0（头）开始@param通知建议添加到建议链中的指定位置
	 * @throws  AopConfigException如果建议无效
	 */
	void addAdvice(int pos, Advice advice) throws AopConfigException;

	/**
	 * Remove the Advisor containing the given advice.
	 * @param advice the advice to remove
	 * @return {@code true} of the advice was found and removed;
	 * {@code false} if there was no such advice
	 */
	/**
	 * 删除包含给定建议的顾问。 
	 *  @param advisor找到并删除了删除
	 * @return  {@code  true}条建议的建议； 
	 * 如果没有这样的建议，则为{@code  false}
	 */
	boolean removeAdvice(Advice advice);

	/**
	 * Return the index (from 0) of the given AOP Alliance Advice,
	 * or -1 if no such advice is an advice for this proxy.
	 * <p>The return value of this method can be used to index into
	 * the advisors array.
	 * @param advice the AOP Alliance advice to search for
	 * @return index from 0 of this advice, or -1 if there's no such advice
	 */
	/**
	 * 返回给定的AOP联盟建议的索引（从0开始），如果没有此建议不是此代理的建议，则返回-1。 
	 *  <p>此方法的返回值可用于索引Advisors数组。 
	 *  @param建议AOP联盟建议从该建议的0中搜索
	 * @return 索引； 
	 * 如果没有此类建议，则从-1搜索
	 */
	int indexOf(Advice advice);

	/**
	 * As {@code toString()} will normally be delegated to the target,
	 * this returns the equivalent for the AOP proxy.
	 * @return a string description of the proxy configuration
	 */
	/**
	 * 由于{@code  toString（）}通常将委托给目标，因此这将返回AOP代理的等效项。 
	 *  
	 * @return 代理配置的字符串描述
	 */
	String toProxyConfigString();

}
