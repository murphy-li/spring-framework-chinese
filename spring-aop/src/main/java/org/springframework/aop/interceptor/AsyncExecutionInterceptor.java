/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.interceptor;

import java.lang.reflect.Method;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

import org.springframework.aop.support.AopUtils;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.core.BridgeMethodResolver;
import org.springframework.core.Ordered;
import org.springframework.core.task.AsyncTaskExecutor;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.lang.Nullable;
import org.springframework.util.ClassUtils;

/**
 * AOP Alliance {@code MethodInterceptor} that processes method invocations
 * asynchronously, using a given {@link org.springframework.core.task.AsyncTaskExecutor}.
 * Typically used with the {@link org.springframework.scheduling.annotation.Async} annotation.
 *
 * <p>In terms of target method signatures, any parameter types are supported.
 * However, the return type is constrained to either {@code void} or
 * {@code java.util.concurrent.Future}. In the latter case, the Future handle
 * returned from the proxy will be an actual asynchronous Future that can be used
 * to track the result of the asynchronous method execution. However, since the
 * target method needs to implement the same signature, it will have to return
 * a temporary Future handle that just passes the return value through
 * (like Spring's {@link org.springframework.scheduling.annotation.AsyncResult}
 * or EJB 3.1's {@code javax.ejb.AsyncResult}).
 *
 * <p>When the return type is {@code java.util.concurrent.Future}, any exception thrown
 * during the execution can be accessed and managed by the caller. With {@code void}
 * return type however, such exceptions cannot be transmitted back. In that case an
 * {@link AsyncUncaughtExceptionHandler} can be registered to process such exceptions.
 *
 * <p>As of Spring 3.1.2 the {@code AnnotationAsyncExecutionInterceptor} subclass is
 * preferred for use due to its support for executor qualification in conjunction with
 * Spring's {@code @Async} annotation.
 *
 * @author Juergen Hoeller
 * @author Chris Beams
 * @author Stephane Nicoll
 * @since 3.0
 * @see org.springframework.scheduling.annotation.Async
 * @see org.springframework.scheduling.annotation.AsyncAnnotationAdvisor
 * @see org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor
 */
/**
 * AOP联盟{@code  MethodInterceptor}使用给定的{@link  org.springframework.core.task.AsyncTaskExecutor}异步处理方法调用。 
 * 通常与{@link  org.springframework.scheduling.annotation.Async}注释一起使用。 
 *  <p>就目标方法签名而言，支持任何参数类型。 
 * 但是，返回类型被限制为{@code  void}或{@code  java.util.concurrent.Future}。 
 * 在后一种情况下，从代理返回的Future句柄将是实际的异步Future，可用于跟踪异步方法执行的结果。 
 * 但是，由于目标方法需要实现相同的签名，因此它必须返回一个临时的Future句柄，该句柄仅将返回值传递通过（例如Spring的{@link  org.springframework.scheduling.annotation.AsyncResult}或EJB 3.1的{@code  javax.ejb.AsyncResult}）。 
 *  <p>当返回类型为{@code  java.util.concurrent.Future}时，调用者可以访问和管理执行期间抛出的任何异常。 
 * 但是，使用{@code  void}返回类型时，此类异常无法发送回。 
 * 在这种情况下，可以注册{@link  AsyncUncaughtExceptionHandler}来处理此类异常。 
 *  <p>从Spring 3.1.2版本开始，首选使用{@code  AnnotationAsyncExecutionInterceptor}子类，因为它支持执行程序资格以及Spring的{@code  @Async}注解。 
 *  @author  Juergen Hoeller @author  Chris Beams @author  Stephane Nicoll @since 3.0 
 * @see  org.springframework.scheduling.annotation.Async 
 * @see  org.springframework.scheduling.annotation.AsyncAnnotationAdvisor <
 * @see > org.springframework.scheduling.annotation.AnnotationAsyncExecutionInterceptor
 */
public class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, Ordered {

	/**
	 * Create a new instance with a default {@link AsyncUncaughtExceptionHandler}.
	 * @param defaultExecutor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}
	 * or {@link java.util.concurrent.ExecutorService}) to delegate to;
	 * as of 4.2.6, a local executor for this interceptor will be built otherwise
	 */
	/**
	 * 使用默认的{@link  AsyncUncaughtExceptionHandler}创建一个新实例。 
	 *  
	 * @param  defaultExecutor委托给的{@link  Executor}（通常是Spring {@link  AsyncTaskExecutor}或{@link  java.util.concurrent.ExecutorService}）； 
	 * 从4.2.6开始，将为该拦截器构建本地执行程序
	 */
	public AsyncExecutionInterceptor(@Nullable Executor defaultExecutor) {
		super(defaultExecutor);
	}

	/**
	 * Create a new {@code AsyncExecutionInterceptor}.
	 * @param defaultExecutor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}
	 * or {@link java.util.concurrent.ExecutorService}) to delegate to;
	 * as of 4.2.6, a local executor for this interceptor will be built otherwise
	 * @param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use
	 */
	/**
	 * 创建一个新的{@code  AsyncExecutionInterceptor}。 
	 *  
	 * @param  defaultExecutor委托给的{@link  Executor}（通常是Spring {@link  AsyncTaskExecutor}或{@link  java.util.concurrent.ExecutorService}）； 
	 * 从4.2.6版本开始，将为该拦截器构建本地执行程序，否则将使用
	 * @param  exceptionHandler和{@link  AsyncUncaughtExceptionHandler}
	 */
	public AsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {
		super(defaultExecutor, exceptionHandler);
	}


	/**
	 * Intercept the given method invocation, submit the actual calling of the method to
	 * the correct task executor and return immediately to the caller.
	 * @param invocation the method to intercept and make asynchronous
	 * @return {@link Future} if the original method returns {@code Future}; {@code null}
	 * otherwise.
	 */
	/**
	 * 拦截给定的方法调用，将方法的实际调用提交给正确的任务执行器，并立即返回给调用者。 
	 *  
	 * @param 调用如果原始方法返回{@code  Future}的方法以拦截并进行异步
	 * @return  {@link  Future}； 
	 * 否则为{@code  null}。 
	 * 
	 */
	@Override
	@Nullable
	public Object invoke(final MethodInvocation invocation) throws Throwable {
		Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);
		Method specificMethod = ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);
		final Method userDeclaredMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);

		AsyncTaskExecutor executor = determineAsyncExecutor(userDeclaredMethod);
		if (executor == null) {
			throw new IllegalStateException(
					"No executor specified and no default executor set on AsyncExecutionInterceptor either");
		}

		Callable<Object> task = () -> {
			try {
				Object result = invocation.proceed();
				if (result instanceof Future) {
					return ((Future<?>) result).get();
				}
			}
			catch (ExecutionException ex) {
				handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());
			}
			catch (Throwable ex) {
				handleError(ex, userDeclaredMethod, invocation.getArguments());
			}
			return null;
		};

		return doSubmit(task, executor, invocation.getMethod().getReturnType());
	}

	/**
	 * This implementation is a no-op for compatibility in Spring 3.1.2.
	 * Subclasses may override to provide support for extracting qualifier information,
	 * e.g. via an annotation on the given method.
	 * @return always {@code null}
	 * @since 3.1.2
	 * @see #determineAsyncExecutor(Method)
	 */
	/**
	 * 在Spring 3.1.2中，此实现是不兼容的。 
	 * 子类可以覆盖以提供对提取限定符信息的支持，例如通过给定方法上的注释。 
	 *  
	 * @return 总是{@code  null} @从3.1.2起
	 * @see  #determineAsyncExecutor（Method）
	 */
	@Override
	@Nullable
	protected String getExecutorQualifier(Method method) {
		return null;
	}

	/**
	 * This implementation searches for a unique {@link org.springframework.core.task.TaskExecutor}
	 * bean in the context, or for an {@link Executor} bean named "taskExecutor" otherwise.
	 * If neither of the two is resolvable (e.g. if no {@code BeanFactory} was configured at all),
	 * this implementation falls back to a newly created {@link SimpleAsyncTaskExecutor} instance
	 * for local use if no default could be found.
	 * @see #DEFAULT_TASK_EXECUTOR_BEAN_NAME
	 */
	/**
	 * 此实现在上下文中搜索唯一的{@link  org.springframework.core.task.TaskExecutor} bean，否则搜索名为"taskExecutor"的{@link  Executor} bean。 
	 * 如果二者都不可解析（例如，如果根本没有配置{@code  BeanFactory}），则如果找不到默认值，则此实现将退回到新创建的{@link  SimpleAsyncTaskExecutor}实例供本地使用。 
	 *  
	 * @see  #DEFAULT_TASK_EXECUTOR_BEAN_NAME
	 */
	@Override
	@Nullable
	protected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {
		Executor defaultExecutor = super.getDefaultExecutor(beanFactory);
		return (defaultExecutor != null ? defaultExecutor : new SimpleAsyncTaskExecutor());
	}

	@Override
	public int getOrder() {
		return Ordered.HIGHEST_PRECEDENCE;
	}

}
