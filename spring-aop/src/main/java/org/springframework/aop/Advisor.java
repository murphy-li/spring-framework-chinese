/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop;

import org.aopalliance.aop.Advice;

/**
 * Base interface holding AOP <b>advice</b> (action to take at a joinpoint)
 * and a filter determining the applicability of the advice (such as
 * a pointcut). <i>This interface is not for use by Spring users, but to
 * allow for commonality in support for different types of advice.</i>
 *
 * <p>Spring AOP is based around <b>around advice</b> delivered via method
 * <b>interception</b>, compliant with the AOP Alliance interception API.
 * The Advisor interface allows support for different types of advice,
 * such as <b>before</b> and <b>after</b> advice, which need not be
 * implemented using interception.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 */
/**
 * 基本接口包含AOP <b>建议</ b>（在连接点采取的操作）和确定建议适用性的过滤器（例如切入点）。 
 *  <i>该界面不是供Spring用户使用，而是允许通用性以支持不同类型的建议。 
 * </ i> <p> Spring AOP基于通过方法提供的<b>围绕建议</ b> <b>拦截</ b>，符合AOP联盟拦截API。 
 *  Advisor界面支持对不同类型的建议的支持，例如<b>之前</ b>和<b>之后</ b>建议，这些建议不需要使用拦截来实现。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller
 */
public interface Advisor {

	/**
	 * Common placeholder for an empty {@code Advice} to be returned from
	 * {@link #getAdvice()} if no proper advice has been configured (yet).
	 * @since 5.0
	 */
	/**
	 * 如果尚未配置（尚未）适当的建议，将从{@link  #getAdvice（）}返回空的{@code 建议}的公用占位符。 
	 *  @5.0起
	 */
	Advice EMPTY_ADVICE = new Advice() {};


	/**
	 * Return the advice part of this aspect. An advice may be an
	 * interceptor, a before advice, a throws advice, etc.
	 * @return the advice that should apply if the pointcut matches
	 * @see org.aopalliance.intercept.MethodInterceptor
	 * @see BeforeAdvice
	 * @see ThrowsAdvice
	 * @see AfterReturningAdvice
	 */
	/**
	 * 返回这方面的建议部分。 
	 * 通知可以是拦截器，事前通知，抛出建议等。 
	 * 
	 * @return 如果切入点匹配
	 * @see  org.aopalliance.intercept.MethodInterceptor 
	 * @see  BeforeAdvice 
	 * @see  ThrowsAdvice 
	 * @see  AfterReturningAdvice
	 */
	Advice getAdvice();

	/**
	 * Return whether this advice is associated with a particular instance
	 * (for example, creating a mixin) or shared with all instances of
	 * the advised class obtained from the same Spring bean factory.
	 * <p><b>Note that this method is not currently used by the framework.</b>
	 * Typical Advisor implementations always return {@code true}.
	 * Use singleton/prototype bean definitions or appropriate programmatic
	 * proxy creation to ensure that Advisors have the correct lifecycle model.
	 * @return whether this advice is associated with a particular target instance
	 */
	/**
	 * 返回此建议是与特定实例关联（例如，创建一个mixin）还是与从同一Spring bean工厂获得的建议类的所有实例共享。 
	 *  <p> <b>请注意，框架当前未使用此方法。 
	 * </ b>典型的Advisor实现始终返回{@code  true}。 
	 * 使用单例/原型bean定义或适当的程序化代理创建，以确保Advisor具有正确的生命周期模型。 
	 *  
	 * @return 此建议是否与特定目标实例相关联
	 */
	boolean isPerInstance();

}
