/** Generated by english-annotation-buster, Powered by Google Translate.**/
/**
 * Core Spring AOP interfaces, built on AOP Alliance AOP interoperability interfaces.
 *
 * <p>Any AOP Alliance MethodInterceptor is usable in Spring.
 *
 * <br>Spring AOP also offers:
 * <ul>
 * <li>Introduction support
 * <li>A Pointcut abstraction, supporting "static" pointcuts
 * (class and method-based) and "dynamic" pointcuts (also considering method arguments).
 * There are currently no AOP Alliance interfaces for pointcuts.
 * <li>A full range of advice types, including around, before, after returning and throws advice.
 * <li>Extensibility allowing arbitrary custom advice types to
 * be plugged in without modifying the core framework.
 * </ul>
 *
 * <p>Spring AOP can be used programmatically or (preferably)
 * integrated with the Spring IoC container.
 */
/**
 * 建立在AOP Alliance AOP互操作性接口上的Core Spring AOP接口。 
 *  <p>任何AOP联盟MethodInterceptor在春季都可以使用。 
 *  <br> Spring AOP还提供：<ul> <li>简介支持<li>切入点抽象，支持"静态"切入点（基于类和方法）和"动态"切入点（还考虑方法参数）。 
 * 当前没有切入点的AOP Alliance接口。 
 *  <li>全方位的建议类型，包括返回之前，之后和抛出建议之前。 
 *  <li>可扩展性允许在不修改核心框架的情况下插入任意自定义建议类型。 
 *  </ ul> <p> Spring AOP可以以编程方式使用，也可以（最好）与Spring IoC容器集成在一起使用。 
 * 
 */
@NonNullApi
@NonNullFields
package org.springframework.aop;

import org.springframework.lang.NonNullApi;
import org.springframework.lang.NonNullFields;
