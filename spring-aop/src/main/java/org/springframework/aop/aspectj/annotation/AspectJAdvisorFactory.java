/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.aspectj.annotation;

import java.lang.reflect.Method;
import java.util.List;

import org.aopalliance.aop.Advice;

import org.springframework.aop.Advisor;
import org.springframework.aop.aspectj.AspectJExpressionPointcut;
import org.springframework.aop.framework.AopConfigException;
import org.springframework.lang.Nullable;

/**
 * Interface for factories that can create Spring AOP Advisors from classes
 * annotated with AspectJ annotation syntax.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 2.0
 * @see AspectMetadata
 * @see org.aspectj.lang.reflect.AjTypeSystem
 */
/**
 * 用于工厂的接口，这些工厂可以从使用AspectJ注释语法注释的类创建Spring AOP Advisor。 
 *  @author  Rod Johnson @author  Juergen Hoeller @自2.0起
 * @see  AspectMetadata 
 * @see  org.aspectj.lang.reflect.AjTypeSystem
 */
public interface AspectJAdvisorFactory {

	/**
	 * Determine whether or not the given class is an aspect, as reported
	 * by AspectJ's {@link org.aspectj.lang.reflect.AjTypeSystem}.
	 * <p>Will simply return {@code false} if the supposed aspect is
	 * invalid (such as an extension of a concrete aspect class).
	 * Will return true for some aspects that Spring AOP cannot process,
	 * such as those with unsupported instantiation models.
	 * Use the {@link #validate} method to handle these cases if necessary.
	 * @param clazz the supposed annotation-style AspectJ class
	 * @return whether or not this class is recognized by AspectJ as an aspect class
	 */
	/**
	 * 根据AspectJ的{@link  org.aspectj.lang.reflect.AjTypeSystem}报告，确定给定的类是否为方面。 
	 *  <p>如果假定的方面无效（例如，具体方面类的扩展），将仅返回{@code  false}。 
	 * 对于Spring AOP无法处理的某些方面（例如具有不受支持的实例化模型的方面），将返回true。 
	 * 如有必要，使用{@link  #validate}方法处理这些情况。 
	 *  @param会使用假定的注释样式的AspectJ类
	 * @return ，无论该类是否被AspectJ识别为方面类
	 */
	boolean isAspect(Class<?> clazz);

	/**
	 * Is the given class a valid AspectJ aspect class?
	 * @param aspectClass the supposed AspectJ annotation-style class to validate
	 * @throws AopConfigException if the class is an invalid aspect
	 * (which can never be legal)
	 * @throws NotAnAtAspectException if the class is not an aspect at all
	 * (which may or may not be legal, depending on the context)
	 */
	/**
	 * 给定的类是否是有效的AspectJ方面类？ @param AspectClass如果该类是无效方面（永远不会合法），则使用假定的AspectJ注释样式类来验证
	 * @throws  AopConfigException 
	 * @throws 如果该类根本不是方面（可能或可能会），则为NotAnAtAspectException不合法，视情况而定）
	 */
	void validate(Class<?> aspectClass) throws AopConfigException;

	/**
	 * Build Spring AOP Advisors for all annotated At-AspectJ methods
	 * on the specified aspect instance.
	 * @param aspectInstanceFactory the aspect instance factory
	 * (not the aspect instance itself in order to avoid eager instantiation)
	 * @return a list of advisors for this class
	 */
	/**
	 * 在指定的方面实例上为所有带注释的At-AspectJ方法构建Spring AOP Advisor。 
	 *  @param AspectInstanceFactory方面实例工厂（不是方面实例本身，以避免急于实例化）
	 * @return 此类的顾问列表
	 */
	List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory);

	/**
	 * Build a Spring AOP Advisor for the given AspectJ advice method.
	 * @param candidateAdviceMethod the candidate advice method
	 * @param aspectInstanceFactory the aspect instance factory
	 * @param declarationOrder the declaration order within the aspect
	 * @param aspectName the name of the aspect
	 * @return {@code null} if the method is not an AspectJ advice method
	 * or if it is a pointcut that will be used by other advice but will not
	 * create a Spring advice in its own right
	 */
	/**
	 * 为给定的AspectJ建议方法构建一个Spring AOP Advisor。 
	 *  @param候选人建议方法候选候选人建议方法方法，或者如果它是切入点，将由其他建议使用，但不会自行创建Spring建议
	 */
	@Nullable
	Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aspectInstanceFactory,
			int declarationOrder, String aspectName);

	/**
	 * Build a Spring AOP Advice for the given AspectJ advice method.
	 * @param candidateAdviceMethod the candidate advice method
	 * @param expressionPointcut the AspectJ expression pointcut
	 * @param aspectInstanceFactory the aspect instance factory
	 * @param declarationOrder the declaration order within the aspect
	 * @param aspectName the name of the aspect
	 * @return {@code null} if the method is not an AspectJ advice method
	 * or if it is a pointcut that will be used by other advice but will not
	 * create a Spring advice in its own right
	 * @see org.springframework.aop.aspectj.AspectJAroundAdvice
	 * @see org.springframework.aop.aspectj.AspectJMethodBeforeAdvice
	 * @see org.springframework.aop.aspectj.AspectJAfterAdvice
	 * @see org.springframework.aop.aspectj.AspectJAfterReturningAdvice
	 * @see org.springframework.aop.aspectj.AspectJAfterThrowingAdvice
	 */
	/**
	 * 为给定的AspectJ建议方法构建一个Spring AOP建议。 
	 *  @param advisoryAdviceMethod候选建议方法@param expressionPointcut AspectJ表达式pointcut @param AspectInstanceFactory方面实例工厂@paramclarificationOrder方面@param中的声明顺序AspectName方面的名称
	 * @return  {@code  null}如果该方法不是AspectJ建议方法，或者它是其他建议将使用的切入点，但不会自行创建Spring建议。 
	 * 
	 * @see  org.springframework.aop.aspectj.AspectJAroundAdvice 
	 * @see  org .springframework.aop.aspectj.AspectJMethodBeforeAdvice 
	 * @see  org.springframework.aop.aspectj.AspectJAfterAdvice 
	 * @see  org.springframework.aop.aspectj.AspectJAfterReturningAdvice 
	 * @see  org.springframework.aop.aspectj.AspectJAfterThrowing
	 */
	@Nullable
	Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,
			MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName);

}
