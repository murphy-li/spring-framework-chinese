/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.aop.aspectj;

import org.aspectj.weaver.tools.PointcutParser;
import org.aspectj.weaver.tools.TypePatternMatcher;

import org.springframework.aop.ClassFilter;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

/**
 * Spring AOP {@link ClassFilter} implementation using AspectJ type matching.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 2.0
 */
/**
 * 使用AspectJ类型匹配的Spring AOP {@link  ClassFilter}实现。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @author  Sam Brannen @since 2.0
 */
public class TypePatternClassFilter implements ClassFilter {

	private String typePattern = "";

	@Nullable
	private TypePatternMatcher aspectJTypePatternMatcher;


	/**
	 * Creates a new instance of the {@link TypePatternClassFilter} class.
	 * <p>This is the JavaBean constructor; be sure to set the
	 * {@link #setTypePattern(String) typePattern} property, else a
	 * no doubt fatal {@link IllegalStateException} will be thrown
	 * when the {@link #matches(Class)} method is first invoked.
	 */
	/**
	 * 创建{@link  TypePatternClassFilter}类的新实例。 
	 *  <p>这是JavaBean构造函数； 
	 * 请确保设置{@link  #setTypePattern（String）typePattern}属性，否则无疑会在首先使用{@link  #matches（Class）}方法时引发致命的{@link  IllegalStateException}调用。 
	 * 
	 */
	public TypePatternClassFilter() {
	}

	/**
	 * Create a fully configured {@link TypePatternClassFilter} using the
	 * given type pattern.
	 * @param typePattern the type pattern that AspectJ weaver should parse
	 */
	/**
	 * 使用给定的类型模式创建完全配置的{@link  TypePatternClassFilter}。 
	 *  @param typePattern AspectJ Weaver应该解析的类型模式
	 */
	public TypePatternClassFilter(String typePattern) {
		setTypePattern(typePattern);
	}


	/**
	 * Set the AspectJ type pattern to match.
	 * <p>Examples include:
	 * <code class="code">
	 * org.springframework.beans.*
	 * </code>
	 * This will match any class or interface in the given package.
	 * <code class="code">
	 * org.springframework.beans.ITestBean+
	 * </code>
	 * This will match the {@code ITestBean} interface and any class
	 * that implements it.
	 * <p>These conventions are established by AspectJ, not Spring AOP.
	 * @param typePattern the type pattern that AspectJ weaver should parse
	 */
	/**
	 * 设置AspectJ类型模式以匹配。 
	 *  <p>示例包括：<code class ="code"> org.springframework.beans。 
	 *  </ code>它将匹配给定包中的任何类或接口。 
	 *  <code class ="code"> org.springframework.beans.ITestBean + </ code>这将与{@code  ITestBean}接口以及实现该接口的任何类相匹配。 
	 *  <p>这些约定是由AspectJ而非Spring AOP建立的。 
	 *  @param typePattern AspectJ Weaver应该解析的类型模式
	 */
	public void setTypePattern(String typePattern) {
		Assert.notNull(typePattern, "Type pattern must not be null");
		this.typePattern = typePattern;
		this.aspectJTypePatternMatcher =
				PointcutParser.getPointcutParserSupportingAllPrimitivesAndUsingContextClassloaderForResolution().
				parseTypePattern(replaceBooleanOperators(typePattern));
	}

	/**
	 * Return the AspectJ type pattern to match.
	 */
	/**
	 * 返回AspectJ类型的模式以进行匹配。 
	 * 
	 */
	public String getTypePattern() {
		return this.typePattern;
	}


	/**
	 * Should the pointcut apply to the given interface or target class?
	 * @param clazz candidate target class
	 * @return whether the advice should apply to this candidate target class
	 * @throws IllegalStateException if no {@link #setTypePattern(String)} has been set
	 */
	/**
	 * 切入点应该应用于给定的接口或目标类吗？ @param clazz候选目标类
	 * @return 如果未设置{@link  #setTypePattern（String）}，则建议是否应应用于此候选目标类
	 * @throws  IllegalStateException
	 */
	@Override
	public boolean matches(Class<?> clazz) {
		Assert.state(this.aspectJTypePatternMatcher != null, "No type pattern has been set");
		return this.aspectJTypePatternMatcher.matches(clazz);
	}

	/**
	 * If a type pattern has been specified in XML, the user cannot
	 * write {@code and} as "&&" (though &amp;&amp; will work).
	 * We also allow {@code and} between two sub-expressions.
	 * <p>This method converts back to {@code &&} for the AspectJ pointcut parser.
	 */
	/**
	 * 如果在XML中指定了类型模式，则用户无法将{@code 和}编写为"&&"（尽管&&可以使用）。 
	 * 我们还允许在两个子表达式之间使用{@code 和}。 
	 *  <p>对于AspectJ切入点解析器，此方法转换回{@code  &&}。 
	 * 
	 */
	private String replaceBooleanOperators(String pcExpr) {
		String result = StringUtils.replace(pcExpr," and "," && ");
		result = StringUtils.replace(result, " or ", " || ");
		return StringUtils.replace(result, " not ", " ! ");
	}

	@Override
	public boolean equals(Object other) {
		return (this == other || (other instanceof TypePatternClassFilter &&
				ObjectUtils.nullSafeEquals(this.typePattern, ((TypePatternClassFilter) other).typePattern)));
	}

	@Override
	public int hashCode() {
		return ObjectUtils.nullSafeHashCode(this.typePattern);
	}

	@Override
	public String toString() {
		return getClass().getName() + ": " + this.typePattern;
	}

}
