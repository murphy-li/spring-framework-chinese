/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.aopalliance.intercept;

/**
 * Intercepts calls on an interface on its way to the target. These
 * are nested "on top" of the target.
 *
 * <p>The user should implement the {@link #invoke(MethodInvocation)}
 * method to modify the original behavior. E.g. the following class
 * implements a tracing interceptor (traces all the calls on the
 * intercepted method(s)):
 *
 * <pre class=code>
 * class TracingInterceptor implements MethodInterceptor {
 *   Object invoke(MethodInvocation i) throws Throwable {
 *     System.out.println("method "+i.getMethod()+" is called on "+
 *                        i.getThis()+" with args "+i.getArguments());
 *     Object ret=i.proceed();
 *     System.out.println("method "+i.getMethod()+" returns "+ret);
 *     return ret;
 *   }
 * }
 * </pre>
 *
 * @author Rod Johnson
 */
/**
 * 拦截在到达目标的接口上的调用。 
 * 这些嵌套在目标的"顶部"。 
 *  <p>用户应实现{@link  #invoke（MethodInvocation）}方法以修改原始行为。 
 * 例如。 
 * 以下类实现了跟踪拦截器（跟踪对被拦截方法的所有调用）：<pre class = code>类TracingInterceptor实现了MethodInterceptor {Object invoke（MethodInvocation i）throws Throwable {System.out.println（"method"+"i.getMethod（）+"在带有参数"+ i.getArguments（））的"+ i.getThis（）+"上调用； 
 * 对象ret = i.proceed（）; System.out.println（"method"+ i.getMethod（）+"返回"+ ret）;返回ret }} </ pre> @author  Rod Johnson
 */
@FunctionalInterface
public interface MethodInterceptor extends Interceptor {

	/**
	 * Implement this method to perform extra treatments before and
	 * after the invocation. Polite implementations would certainly
	 * like to invoke {@link Joinpoint#proceed()}.
	 * @param invocation the method invocation joinpoint
	 * @return the result of the call to {@link Joinpoint#proceed()};
	 * might be intercepted by the interceptor
	 * @throws Throwable if the interceptors or the target object
	 * throws an exception
	 */
	/**
	 * 实现此方法以在调用之前和之后执行额外的处理。 
	 * 礼貌的实现当然想调用{@link  Joinpoint＃proceed（）}。 
	 *  @param调用方法调用joinpoint 
	 * @return 调用{@link  Joinpoint＃proceed（）}的结果； 
	 * 可能被拦截器
	 * @throws 拦截如果拦截器或目标对象抛出异常，则抛出该异常
	 */
	Object invoke(MethodInvocation invocation) throws Throwable;

}
