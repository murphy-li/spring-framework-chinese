/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.view;

import java.util.Locale;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.lang.Nullable;

/**
 * Abstract base class for URL-based views. Provides a consistent way of
 * holding the URL that a View wraps, in the form of a "url" bean property.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 基于URL的视图的抽象基类。 
 * 以"url"bean属性的形式提供一种一致的方式来保存View包装的URL。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public abstract class AbstractUrlBasedView extends AbstractView implements InitializingBean {

	@Nullable
	private String url;


	/**
	 * Constructor for use as a bean.
	 */
	/**
	 * 用作bean的构造方法。 
	 * 
	 */
	protected AbstractUrlBasedView() {
	}

	/**
	 * Create a new AbstractUrlBasedView with the given URL.
	 */
	/**
	 * 使用给定的URL创建一个新的AbstractUrlBasedView。 
	 * 
	 */
	protected AbstractUrlBasedView(String url) {
		this.url = url;
	}


	/**
	 * Set the URL of the resource that this view wraps.
	 * The URL must be appropriate for the concrete View implementation.
	 */
	/**
	 * 设置此视图包装的资源的URL。 
	 * 该URL必须适合于具体的View实现。 
	 * 
	 */
	public void setUrl(@Nullable String url) {
		this.url = url;
	}

	/**
	 * Return the URL of the resource that this view wraps.
	 */
	/**
	 * 返回此视图包装的资源的URL。 
	 * 
	 */
	@Nullable
	public String getUrl() {
		return this.url;
	}


	@Override
	public void afterPropertiesSet() throws Exception {
		if (getUrl() == null) {
			throw new IllegalArgumentException("Property 'url' is required");
		}
	}

	/**
	 * Check whether the resource for the configured URL actually exists.
	 * @param locale the desired Locale that we're looking for
	 * @return {@code false} if the resource exists
	 * {@code false} if we know that it does not exist
	 * @throws Exception if the resource exists but is invalid (e.g. could not be parsed)
	 */
	/**
	 * 检查配置的URL资源是否实际存在。 
	 *  
	 * @param 语言环境我们正在寻找的所需语言环境
	 * @return  {@code  false}如果资源存在{{@@code> false}如果我们知道它不存在
	 * @throws 异常资源存在但无效（例如，无法解析）
	 */
	public abstract boolean checkResourceExists(Locale locale) throws Exception;


	@Override
	public String toString() {
		return super.toString() + "; URL [" + getUrl() + "]";
	}

}
