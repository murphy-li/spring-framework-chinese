/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.view;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import reactor.core.publisher.Mono;

import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.web.reactive.HandlerResult;
import org.springframework.web.server.ServerWebExchange;

/**
 * Contract to render {@link HandlerResult} to the HTTP response.
 *
 * <p>In contrast to an {@link org.springframework.core.codec.Encoder Encoder}
 * which is a singleton and encodes any object of a given type, a {@code View}
 * is typically selected by name and resolved using a {@link ViewResolver}
 * which may for example match it to an HTML template. Furthermore a {@code View}
 * may render based on multiple attributes contained in the model.
 *
 * <p>A {@code View} can also choose to select an attribute from the model use
 * any existing {@code Encoder} to render alternate media types.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 约定将{@link  HandlerResult}呈现给HTTP响应。 
 *  <p>与{@link  org.springframework.core.codec.Encoder Encoder}是单例并且对给定类型的任何对象进行编码相比，{{@code> View}通常按名称和使用{@link  ViewResolver}解析，例如可以将其与HTML模板匹配。 
 * 此外，{<@code>视图}可以基于模型中包含的多个属性进行渲染。 
 *  <p> {<@code>视图}也可以选择使用任何现有的{@code  Encoder}来从模型中选择属性来呈现备用媒体类型。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface View {

	/**
	 * The name of the exchange attribute that contains the
	 * {@link org.springframework.web.reactive.BindingContext BindingContext}
	 * for the request which can be used to create
	 * {@link org.springframework.validation.BindingResult BindingResult}
	 * instances for objects in to the model.
	 * <p>Note: This attribute is not required and may not be present.
	 * @since 5.1.8
	 */
	/**
	 * 交换属性的名称，该属性包含请求的{@link  org.springframework.web.reactive.BindingContext BindingContext}，可用于为该请求创建{@link  org.springframework.validation.BindingResult BindingResult}实例对象加入模型。 
	 *  <p>注意：此属性不是必需的，可能不存在。 
	 *  @5.1.8起
	 */
	String BINDING_CONTEXT_ATTRIBUTE = View.class.getName() + ".bindingContext";


	/**
	 * Return the list of media types this View supports, or an empty list.
	 */
	/**
	 * 返回此视图支持的媒体类型列表或空列表。 
	 * 
	 */
	default List<MediaType> getSupportedMediaTypes() {
		return Collections.emptyList();
	}

	/**
	 * Whether this View does rendering by performing a redirect.
	 */
	/**
	 * 此View是否通过执行重定向来渲染。 
	 * 
	 */
	default boolean isRedirectView() {
		return false;
	}

	/**
	 * Render the view based on the given {@link HandlerResult}. Implementations
	 * can access and use the model or only a specific attribute in it.
	 * @param model a Map with name Strings as keys and corresponding model
	 * objects as values (Map can also be {@code null} in case of empty model)
	 * @param contentType the content type selected to render with which should
	 * match one of the {@link #getSupportedMediaTypes() supported media types}.
	 * @param exchange the current exchange
	 * @return {@code Mono} to represent when and if rendering succeeds
	 */
	/**
	 * 根据给定的{@link  HandlerResult}渲染视图。 
	 * 实现可以访问和使用模型或仅其中的特定属性。 
	 *  
	 * @param 使用名称字符串作为键，对应的模型对象作为值对Map进行建模（如果模型为空，Map也可以为{@code  null}）。 
	 * @
	 * @param> contentType选择要呈现的内容类型匹配{@link  #getSupportedMediaTypes（）支持的媒体类型之一）。 
	 *  
	 * @param 交换当前交换
	 * @return  {@code  Mono}以表示何时以及是否成功渲染
	 */
	Mono<Void> render(@Nullable Map<String, ?> model, @Nullable MediaType contentType, ServerWebExchange exchange);

}
