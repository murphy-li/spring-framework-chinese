/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive;

import java.util.function.Function;

import reactor.core.publisher.Mono;

import org.springframework.core.MethodParameter;
import org.springframework.core.ResolvableType;
import org.springframework.lang.Nullable;
import org.springframework.ui.Model;
import org.springframework.util.Assert;

/**
 * Represent the result of the invocation of a handler or a handler method.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 表示调用处理程序或处理程序方法的结果。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class HandlerResult {

	private final Object handler;

	@Nullable
	private final Object returnValue;

	private final ResolvableType returnType;

	private final BindingContext bindingContext;

	@Nullable
	private Function<Throwable, Mono<HandlerResult>> exceptionHandler;


	/**
	 * Create a new {@code HandlerResult}.
	 * @param handler the handler that handled the request
	 * @param returnValue the return value from the handler possibly {@code null}
	 * @param returnType the return value type
	 */
	/**
	 * 创建一个新的{@code  HandlerResult}。 
	 *  
	 * @param 处理程序处理请求的处理程序
	 * @param  returnValue处理程序的返回值可能为{@code  null} 
	 * @param  returnType返回值类型
	 */
	public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType) {
		this(handler, returnValue, returnType, null);
	}

	/**
	 * Create a new {@code HandlerResult}.
	 * @param handler the handler that handled the request
	 * @param returnValue the return value from the handler possibly {@code null}
	 * @param returnType the return value type
	 * @param context the binding context used for request handling
	 */
	/**
	 * 创建一个新的{@code  HandlerResult}。 
	 *  
	 * @param 处理程序处理请求的处理程序
	 * @param  returnValue处理程序的返回值可能为{@code  null} 
	 * @param  returnType返回值类型
	 * @param 上下文用于请求的绑定上下文处理
	 */
	public HandlerResult(Object handler, @Nullable Object returnValue, MethodParameter returnType,
			@Nullable BindingContext context) {

		Assert.notNull(handler, "'handler' is required");
		Assert.notNull(returnType, "'returnType' is required");
		this.handler = handler;
		this.returnValue = returnValue;
		this.returnType = ResolvableType.forMethodParameter(returnType);
		this.bindingContext = (context != null ? context : new BindingContext());
	}


	/**
	 * Return the handler that handled the request.
	 */
	/**
	 * 返回处理请求的处理程序。 
	 * 
	 */
	public Object getHandler() {
		return this.handler;
	}

	/**
	 * Return the value returned from the handler, if any.
	 */
	/**
	 * 返回从处理程序返回的值（如果有）。 
	 * 
	 */
	@Nullable
	public Object getReturnValue() {
		return this.returnValue;
	}

	/**
	 * Return the type of the value returned from the handler -- e.g. the return
	 * type declared on a controller method's signature. Also see
	 * {@link #getReturnTypeSource()} to obtain the underlying
	 * {@link MethodParameter} for the return type.
	 */
	/**
	 * 返回从处理程序返回的值的类型-例如在控制器方法的签名上声明的返回类型。 
	 * 另请参见{@link  #getReturnTypeSource（）}，以获取返回类型的基础{@link  MethodParameter}。 
	 * 
	 */
	public ResolvableType getReturnType() {
		return this.returnType;
	}

	/**
	 * Return the {@link MethodParameter} from which {@link #getReturnType()
	 * returnType} was created.
	 */
	/**
	 * 返回创建{@link  #getReturnType（）returnType}的{@link  MethodParameter}。 
	 * 
	 */
	public MethodParameter getReturnTypeSource() {
		return (MethodParameter) this.returnType.getSource();
	}

	/**
	 * Return the BindingContext used for request handling.
	 */
	/**
	 * 返回用于请求处理的BindingContext。 
	 * 
	 */
	public BindingContext getBindingContext() {
		return this.bindingContext;
	}

	/**
	 * Return the model used for request handling. This is a shortcut for
	 * {@code getBindingContext().getModel()}.
	 */
	/**
	 * 返回用于请求处理的模型。 
	 * 这是{@code  getBindingContext（）。 
	 * getModel（）}的快捷方式。 
	 * 
	 */
	public Model getModel() {
		return this.bindingContext.getModel();
	}

	/**
	 * Configure an exception handler that may be used to produce an alternative
	 * result when result handling fails. Especially for an async return value
	 * errors may occur after the invocation of the handler.
	 * @param function the error handler
	 * @return the current instance
	 */
	/**
	 * 配置异常处理程序，当结果处理失败时，该异常处理程序可用于产生替代结果。 
	 * 特别是对于异步返回值，在调用处理程序之后可能会发生错误。 
	 *  
	 * @param 函数错误处理程序
	 * @return 当前实例
	 */
	public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {
		this.exceptionHandler = function;
		return this;
	}

	/**
	 * Whether there is an exception handler.
	 */
	/**
	 * 是否有异常处理程序。 
	 * 
	 */
	public boolean hasExceptionHandler() {
		return (this.exceptionHandler != null);
	}

	/**
	 * Apply the exception handler and return the alternative result.
	 * @param failure the exception
	 * @return the new result or the same error if there is no exception handler
	 */
	/**
	 * 应用异常处理程序并返回替代结果。 
	 *  
	 * @param 使异常
	 * @return 失败新的结果，或者如果没有异常处理程序则出现相同的错误
	 */
	public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {
		return (this.exceptionHandler != null ? this.exceptionHandler.apply(failure) : Mono.error(failure));
	}

}
