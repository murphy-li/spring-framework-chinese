/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.socket.server.upgrade;

import java.net.URI;
import java.util.function.Supplier;

import reactor.core.publisher.Mono;
import reactor.netty.http.server.HttpServerResponse;

import org.springframework.core.io.buffer.NettyDataBufferFactory;
import org.springframework.http.server.reactive.AbstractServerHttpResponse;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.http.server.reactive.ServerHttpResponseDecorator;
import org.springframework.lang.Nullable;
import org.springframework.web.reactive.socket.HandshakeInfo;
import org.springframework.web.reactive.socket.WebSocketHandler;
import org.springframework.web.reactive.socket.adapter.NettyWebSocketSessionSupport;
import org.springframework.web.reactive.socket.adapter.ReactorNettyWebSocketSession;
import org.springframework.web.reactive.socket.server.RequestUpgradeStrategy;
import org.springframework.web.server.ServerWebExchange;

/**
 * A {@link RequestUpgradeStrategy} for use with Reactor Netty.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 与Reactor Netty一起使用的{@link  RequestUpgradeStrategy}。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class ReactorNettyRequestUpgradeStrategy implements RequestUpgradeStrategy {

	private int maxFramePayloadLength = NettyWebSocketSessionSupport.DEFAULT_FRAME_MAX_SIZE;

	private boolean handlePing = false;


	/**
	 * Configure the maximum allowable frame payload length. Setting this value
	 * to your application's requirement may reduce denial of service attacks
	 * using long data frames.
	 * <p>Corresponds to the argument with the same name in the constructor of
	 * {@link io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory
	 * WebSocketServerHandshakerFactory} in Netty.
	 * <p>By default set to 65536 (64K).
	 * @param maxFramePayloadLength the max length for frames.
	 * @since 5.1
	 */
	/**
	 * 配置最大允许帧有效载荷长度。 
	 * 将此值设置为您的应用程序要求可以减少使用长数据帧的拒绝服务攻击。 
	 *  <p>对应于Netty中{@link  io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory WebSocketServerHandshakerFactory}的构造函数中具有相同名称的参数。 
	 *  <p>默认设置为65536（64K）。 
	 *  
	 * @param  maxFramePayloadLength帧的最大长度。 
	 *  @5.1起
	 */
	public void setMaxFramePayloadLength(Integer maxFramePayloadLength) {
		this.maxFramePayloadLength = maxFramePayloadLength;
	}

	/**
	 * Return the configured max length for frames.
	 * @since 5.1
	 */
	/**
	 * 返回配置的最大帧长度。 
	 *  @5.1起
	 */
	public int getMaxFramePayloadLength() {
		return this.maxFramePayloadLength;
	}

	/**
	 * Configure whether to let ping frames through to be handled by the
	 * {@link WebSocketHandler} given to the upgrade method. By default, Reactor
	 * Netty automatically replies with pong frames in response to pings. This is
	 * useful in a proxy for allowing ping and pong frames through.
	 * <p>By default this is set to {@code false} in which case ping frames are
	 * handled automatically by Reactor Netty. If set to {@code true}, ping
	 * frames will be passed through to the {@link WebSocketHandler}.
	 * @param handlePing whether to let Ping frames through for handling
	 * @since 5.2.4
	 */
	/**
	 * 配置是否允许ping帧通过由升级方法指定的{@link  WebSocketHandler}处理。 
	 * 默认情况下，Reactor Netty会自动响应pong帧以响应ping。 
	 * 这在允许ping和pong帧通过的代理中很有用。 
	 *  <p>默认情况下，此值设置为{@code  false}，在这种情况下，Ping帧由Reactor Netty自动处理。 
	 * 如果设置为{@code  true}，则ping帧将传递到{@link  WebSocketHandler}。 
	 *  
	 * @param  handlePing是否让Ping帧通过以进行处理，自5.2.4起
	 */
	public void setHandlePing(boolean handlePing) {
		this.handlePing = handlePing;
	}

	/**
	 * Return the configured {@link #setHandlePing(boolean)}.
	 * @since 5.2.4
	 */
	/**
	 * 返回已配置的{@link  #setHandlePing（boolean）}。 
	 *  @从5.2.4开始
	 */
	public boolean getHandlePing() {
		return this.handlePing;
	}


	@Override
	@SuppressWarnings("deprecation")
	public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler,
			@Nullable String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory) {

		ServerHttpResponse response = exchange.getResponse();
		HttpServerResponse reactorResponse = getNativeResponse(response);
		HandshakeInfo handshakeInfo = handshakeInfoFactory.get();
		NettyDataBufferFactory bufferFactory = (NettyDataBufferFactory) response.bufferFactory();

		// Trigger WebFlux preCommit actions and upgrade
		return response.setComplete()
				.then(Mono.defer(() -> reactorResponse.sendWebsocket(
						subProtocol,
						this.maxFramePayloadLength,
						this.handlePing,
						(in, out) -> {
							ReactorNettyWebSocketSession session =
									new ReactorNettyWebSocketSession(
											in, out, handshakeInfo, bufferFactory, this.maxFramePayloadLength);
							URI uri = exchange.getRequest().getURI();
							return handler.handle(session).checkpoint(uri + " [ReactorNettyRequestUpgradeStrategy]");
						})));
	}

	private static HttpServerResponse getNativeResponse(ServerHttpResponse response) {
		if (response instanceof AbstractServerHttpResponse) {
			return ((AbstractServerHttpResponse) response).getNativeResponse();
		}
		else if (response instanceof ServerHttpResponseDecorator) {
			return getNativeResponse(((ServerHttpResponseDecorator) response).getDelegate());
		}
		else {
			throw new IllegalArgumentException(
					"Couldn't find native response in " + response.getClass().getName());
		}
	}

}
