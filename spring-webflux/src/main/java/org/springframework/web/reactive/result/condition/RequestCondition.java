/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.condition;

import org.springframework.lang.Nullable;
import org.springframework.web.server.ServerWebExchange;

/**
 * Contract for request mapping conditions.
 *
 * <p>Request conditions can be combined via {@link #combine(Object)}, matched to
 * a request via {@link #getMatchingCondition(ServerWebExchange)}, and compared
 * to each other via {@link #compareTo(Object, ServerWebExchange)} to determine
 * which is a closer match for a given request.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 * @param <T> the type of objects that this RequestCondition can be combined
 * with and compared to
 */
/**
 * 合同要求映射条件。 
 *  <p>请求条件可以通过{@link  #combine（Object）}进行组合，通过{@link  #getMatchingCondition（ServerWebExchange）}与请求匹配，并通过{@link ＃相互比较compareTo（Object，ServerWebExchange）}来确定哪个更匹配给定请求。 
 *  @author  Rossen Stoyanchev @从5.0开始
 * @param  <T>此RequestCondition可以与之组合并比较的对象类型
 */
public interface RequestCondition<T> {

	/**
	 * Combine this condition with another such as conditions from a
	 * type-level and method-level {@code @RequestMapping} annotation.
	 * @param other the condition to combine with.
	 * @return a request condition instance that is the result of combining
	 * the two condition instances.
	 */
	/**
	 * 将此条件与另一个条件（例如来自类型级别和方法级别的{@code  @RequestMapping}注解的条件）结合起来。 
	 *  
	 * @param 其他要结合的条件。 
	 *  
	 * @return 一个请求条件实例，它是两个条件实例相结合的结果。 
	 * 
	 */
	T combine(T other);

	/**
	 * Check if the condition matches the request returning a potentially new
	 * instance created for the current request. For example a condition with
	 * multiple URL patterns may return a new instance only with those patterns
	 * that match the request.
	 * <p>For CORS pre-flight requests, conditions should match to the would-be,
	 * actual request (e.g. URL pattern, query parameters, and the HTTP method
	 * from the "Access-Control-Request-Method" header). If a condition cannot
	 * be matched to a pre-flight request it should return an instance with
	 * empty content thus not causing a failure to match.
	 * @return a condition instance in case of a match or {@code null} otherwise.
	 */
	/**
	 * 检查条件是否与请求匹配，返回可能为当前请求创建的新实例。 
	 * 例如，具有多个URL模式的条件可能仅返回具有与请求匹配的那些模式的新实例。 
	 *  <p>对于CORS飞行前请求，条件应与可能的实际请求相匹配（例如，URL模式，查询参数和"Access-Control-Request-Method"标头中的HTTP方法）。 
	 * 如果条件不能与飞行前请求匹配，则它应返回一个内容为空的实例，从而不会导致匹配失败。 
	 *  
	 * @return 匹配条件实例，否则为{@code  null}。 
	 * 
	 */
	@Nullable
	T getMatchingCondition(ServerWebExchange exchange);

	/**
	 * Compare this condition to another condition in the context of
	 * a specific request. This method assumes both instances have
	 * been obtained via {@link #getMatchingCondition(ServerWebExchange)}
	 * to ensure they have content relevant to current request only.
	 */
	/**
	 * 在特定请求的上下文中，将此条件与另一个条件进行比较。 
	 * 此方法假定两个实例都是通过{@link  #getMatchingCondition（ServerWebExchange）}获得的，以确保它们都具有仅与当前请求相关的内容。 
	 * 
	 */
	int compareTo(T other, ServerWebExchange exchange);

}
