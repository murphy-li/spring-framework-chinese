/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.config;

import java.util.ArrayList;
import java.util.Arrays;

import org.springframework.web.cors.CorsConfiguration;

/**
 * Assists with the creation of a {@link CorsConfiguration} instance for a given
 * URL path pattern.
 *
 * @author Sebastien Deleuze
 * @author Rossen Stoyanchev
 * @since 5.0
 * @see CorsRegistry
 */
/**
 * 协助创建给定URL路径模式的{@link  CorsConfiguration}实例。 
 *  @author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）@author  Rossen Stoyanchev @从5.0开始
 * @see  CorsRegistry
 */
public class CorsRegistration {

	private final String pathPattern;

	private final CorsConfiguration config;


	public CorsRegistration(String pathPattern) {
		this.pathPattern = pathPattern;
		this.config = new CorsConfiguration().applyPermitDefaultValues();
	}


	/**
	 * The list of allowed origins that be specific origins, e.g.
	 * {@code "https://domain1.com"}, or {@code "*"} for all origins.
	 * <p>A matched origin is listed in the {@code Access-Control-Allow-Origin}
	 * response header of preflight actual CORS requests.
	 * <p>By default all origins are allowed.
	 * <p><strong>Note:</strong> CORS checks use values from "Forwarded"
	 * (<a href="https://tools.ietf.org/html/rfc7239">RFC 7239</a>),
	 * "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" headers,
	 * if present, in order to reflect the client-originated address.
	 * Consider using the {@code ForwardedHeaderFilter} in order to choose from a
	 * central place whether to extract and use, or to discard such headers.
	 * See the Spring Framework reference for more on this filter.
	 */
	/**
	 * 特定来源的允许来源列表，例如{@code "https://domain1.com"}，或{@code ""}用于所有来源。 
	 *  <p>匹配的来源在飞行前实际CORS请求的{@code  Access-Control-Allow-Origin}响应标头中列出。 
	 *  <p>默认情况下，所有来源都允许。 
	 *  <p> <strong>注意</ strong>：CORS会检查"Forwarded"（<a href="https://tools.ietf.org/html/rfc7239"> RFC 7239 </a>）， X-Forwarded-Host"，"X-Forwarded-Port"和"X-Forwarded-Proto"标头（如果存在），以反映客户端起源的地址。 
	 * 考虑使用{@code  ForwardedHeaderFilter}以便从中央位置选择是提取还是使用还是丢弃此类标头。 
	 * 有关此过滤器的更多信息，请参见Spring Framework参考。 
	 * 
	 */
	public CorsRegistration allowedOrigins(String... origins) {
		this.config.setAllowedOrigins(new ArrayList<>(Arrays.asList(origins)));
		return this;
	}

	/**
	 * Set the HTTP methods to allow, e.g. {@code "GET"}, {@code "POST"}, etc.
	 * <p>The special value {@code "*"} allows all methods.
	 * <p>By default "simple" methods {@code GET}, {@code HEAD}, and {@code POST}
	 * are allowed.
	 */
	/**
	 * 设置HTTP方法以允许，例如{@code "GET"}，{<@code>"POST"}等。 
	 * <p>特殊值{@code ""}允许所有方法。 
	 *  <p>默认情况下，允许使用"简单"方法{@code  GET}，{<@code> HEAD}和{@code  POST}。 
	 * 
	 */
	public CorsRegistration allowedMethods(String... methods) {
		this.config.setAllowedMethods(new ArrayList<>(Arrays.asList(methods)));
		return this;
	}

	/**
	 * Set the list of headers that a pre-flight request can list as allowed
	 * for use during an actual request.
	 * <p>The special value {@code "*"} may be used to allow all headers.
	 * <p>A header name is not required to be listed if it is one of:
	 * {@code Cache-Control}, {@code Content-Language}, {@code Expires},
	 * {@code Last-Modified}, or {@code Pragma} as per the CORS spec.
	 * <p>By default all headers are allowed.
	 */
	/**
	 * 设置飞行前请求可以列出的标头列表，以允许在实际请求期间使用。 
	 *  <p>特殊值{@code ""}可用于允许所有标头。 
	 *  <p>如果标头名称是以下之一，则不需要列出标头名称：{@code  Cache-Control}，{<@code> Content-Language}，{<@code> Expires}，{<@code > Last-Modified}或{@code  Pragma}（根据CORS规范）。 
	 *  <p>默认情况下，所有标头都是允许的。 
	 * 
	 */
	public CorsRegistration allowedHeaders(String... headers) {
		this.config.setAllowedHeaders(new ArrayList<>(Arrays.asList(headers)));
		return this;
	}

	/**
	 * Set the list of response headers other than "simple" headers, i.e.
	 * {@code Cache-Control}, {@code Content-Language}, {@code Content-Type},
	 * {@code Expires}, {@code Last-Modified}, or {@code Pragma}, that an
	 * actual response might have and can be exposed.
	 * <p>Note that {@code "*"} is not supported on this property.
	 * <p>By default this is not set.
	 */
	/**
	 * 设置响应标头的列表，而不是"简单"标头，例如{@code  Cache-Control}，{<@code> Content-Language}，{<@code> Content-Type}，{<@code> Expires }，{<@code> Last-Modified}或{@code  Pragma}，实际的响应可能已经并且可以公开。 
	 *  <p>请注意，此属性不支持{@code ""}。 
	 *  <p>默认情况下未设置。 
	 * 
	 */
	public CorsRegistration exposedHeaders(String... headers) {
		this.config.setExposedHeaders(new ArrayList<>(Arrays.asList(headers)));
		return this;
	}

	/**
	 * Whether the browser should send credentials, such as cookies along with
	 * cross domain requests, to the annotated endpoint. The configured value is
	 * set on the {@code Access-Control-Allow-Credentials} response header of
	 * preflight requests.
	 * <p><strong>NOTE:</strong> Be aware that this option establishes a high
	 * level of trust with the configured domains and also increases the surface
	 * attack of the web application by exposing sensitive user-specific
	 * information such as cookies and CSRF tokens.
	 * <p>By default this is not set in which case the
	 * {@code Access-Control-Allow-Credentials} header is also not set and
	 * credentials are therefore not allowed.
	 */
	/**
	 * 浏览器是否应将凭据（例如cookie和跨域请求）发送到带注释的端点。 
	 * 在预检请求的{@code  Access-Control-Allow-Credentials}响应标头上设置配置的值。 
	 *  <p> <strong>注意：</ strong>：请注意，此选项通过暴露敏感的特定于用户的特定信息（例如cookie和CSRF令牌）来建立与已配置域的高度信任，并且还增加了Web应用程序的表面攻击。 
	 *  。 
	 *  <p>默认情况下不设置此项，在这种情况下也不会设置{@code  Access-Control-Allow-Credentials}标头，因此不允许使用凭据。 
	 * 
	 */
	public CorsRegistration allowCredentials(boolean allowCredentials) {
		this.config.setAllowCredentials(allowCredentials);
		return this;
	}

	/**
	 * Configure how long in seconds the response from a pre-flight request
	 * can be cached by clients.
	 * <p>By default this is set to 1800 seconds (30 minutes).
	 */
	/**
	 * 配置客户端可以将飞行前请求的响应缓存多少秒。 
	 *  <p>默认情况下，此设置为1800秒（30分钟）。 
	 * 
	 */
	public CorsRegistration maxAge(long maxAge) {
		this.config.setMaxAge(maxAge);
		return this;
	}

	protected String getPathPattern() {
		return this.pathPattern;
	}

	protected CorsConfiguration getCorsConfiguration() {
		return this.config;
	}

}
