/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.function.client;

import java.net.URI;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.client.reactive.ClientHttpRequest;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.BodyInserter;

/**
 * Represents a typed, immutable, client-side HTTP request, as executed by the
 * {@link ExchangeFunction}. Instances of this interface can be created via static
 * builder methods.
 *
 * <p>Note that applications are more likely to perform requests through
 * {@link WebClient} rather than using this directly.
 *
 * @author Brian Clozel
 * @author Arjen Poutsma
 * @since 5.0
 */
/**
 * 表示由{@link  ExchangeFunction}执行的类型化，不可变的客户端HTTP请求。 
 * 可以通过静态构建器方法创建此接口的实例。 
 *  <p>请注意，应用程序更有可能通过{@link  WebClient}执行请求，而不是直接使用请求。 
 *  @author  Brian Clozel @author  Arjen Poutsma @从5.0开始
 */
public interface ClientRequest {

	/**
	 * Name of {@link #attributes() attribute} whose value can be used to
	 * correlate log messages for this request. Use {@link #logPrefix()} to
	 * obtain a consistently formatted prefix based on this attribute.
	 * @since 5.1
	 * @see #logPrefix()
	 */
	/**
	 * {@link  #attributes（）attribute}的名称，其值可用于关联此请求的日志消息。 
	 * 使用{@link  #logPrefix（）}基于此属性获取格式一致的前缀。 
	 *  @since 5.1 
	 * @see  #logPrefix（）
	 */
	String LOG_ID_ATTRIBUTE = ClientRequest.class.getName() + ".LOG_ID";


	/**
	 * Return the HTTP method.
	 */
	/**
	 * 返回HTTP方法。 
	 * 
	 */
	HttpMethod method();

	/**
	 * Return the request URI.
	 */
	/**
	 * 返回请求URI。 
	 * 
	 */
	URI url();

	/**
	 * Return the headers of this request.
	 */
	/**
	 * 返回此请求的标头。 
	 * 
	 */
	HttpHeaders headers();

	/**
	 * Return the cookies of this request.
	 */
	/**
	 * 返回此请求的cookie。 
	 * 
	 */
	MultiValueMap<String, String> cookies();

	/**
	 * Return the body inserter of this request.
	 */
	/**
	 * 返回此请求的正文插入器。 
	 * 
	 */
	BodyInserter<?, ? super ClientHttpRequest> body();

	/**
	 * Return the request attribute value if present.
	 * @param name the attribute name
	 * @return the attribute value
	 */
	/**
	 * 返回请求属性值（如果存在）。 
	 *  
	 * @param 命名属性名称
	 * @return 属性值
	 */
	default Optional<Object> attribute(String name) {
		return Optional.ofNullable(attributes().get(name));
	}

	/**
	 * Return the attributes of this request.
	 */
	/**
	 * 返回此请求的属性。 
	 * 
	 */
	Map<String, Object> attributes();

	/**
	 * Return a log message prefix to use to correlate messages for this request.
	 * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE
	 * LOG_ID_ATTRIBUTE} surrounded with "[" and "]".
	 * @return the log message prefix or an empty String if the
	 * {@link #LOG_ID_ATTRIBUTE LOG_ID_ATTRIBUTE} is not set.
	 * @since 5.1
	 */
	/**
	 * 返回一个日志消息前缀，以用于关联此请求的消息。 
	 * 前缀基于属性{@link  #LOG_ID_ATTRIBUTE LOG_ID_ATTRIBUTE}的值，并用"["和"]"包围。 
	 *  
	 * @return 日志消息前缀，如果未设置{@link  #LOG_ID_ATTRIBUTE LOG_ID_ATTRIBUTE}，则为空字符串。 
	 *  @5.1起
	 */
	String logPrefix();

	/**
	 * Write this request to the given {@link ClientHttpRequest}.
	 * @param request the client http request to write to
	 * @param strategies the strategies to use when writing
	 * @return {@code Mono<Void>} to indicate when writing is complete
	 */
	/**
	 * 将此请求写入给定的{@link  ClientHttpRequest}。 
	 *  
	 * @param 请求客户端http请求向
	 * @param 策略写入策略，在写入
	 * @return  {@code  Mono <Void>}时使用该策略来指示写入完成
	 */
	Mono<Void> writeTo(ClientHttpRequest request, ExchangeStrategies strategies);


	// Static builder methods

	/**
	 * Create a builder with the method, URI, headers, and cookies of the given request.
	 * @param other the request to copy the method, URI, headers, and cookies from
	 * @return the created builder
	 */
	/**
	 * 使用给定请求的方法，URI，标头和cookie创建一个构建器。 
	 *  
	 * @param 其他从
	 * @return 创建的构建器复制方法，URI，标头和cookie的请求
	 */
	static Builder from(ClientRequest other) {
		return new DefaultClientRequestBuilder(other);
	}

	/**
	 * Create a builder with the given method and url.
	 * @param method the HTTP method (GET, POST, etc)
	 * @param url the url (as a URI instance)
	 * @return the created builder
	 * @deprecated in favor of {@link #create(HttpMethod, URI)}
	 */
	/**
	 * 使用给定的方法和URL创建一个构建器。 
	 *  
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  url url（作为URI实例）
	 * @return 创建的生成器@deprecated，取而代之的是{@link  #create（HttpMethod， URI）}
	 */
	@Deprecated
	static Builder method(HttpMethod method, URI url) {
		return new DefaultClientRequestBuilder(method, url);
	}

	/**
	 * Create a request builder with the given method and url.
	 * @param method the HTTP method (GET, POST, etc)
	 * @param url the url (as a URI instance)
	 * @return the created builder
	 */
	/**
	 * 使用给定的方法和URL创建一个请求构建器。 
	 *  
	 * @param 方法HTTP方法（GET，POST等）
	 * @param  url url（作为URI实例）
	 * @return 创建的构建器
	 */
	static Builder create(HttpMethod method, URI url) {
		return new DefaultClientRequestBuilder(method, url);
	}


	/**
	 * Defines a builder for a request.
	 */
	/**
	 * 定义请求的构建器。 
	 * 
	 */
	interface Builder {

		/**
		 * Set the method of the request.
		 * @param method the new method
		 * @return this builder
		 * @since 5.0.1
		 */
		/**
		 * 设置请求的方法。 
		 *  
		 * @param 方法新方法
		 * @return 此构建器@始于5.0.1
		 */
		Builder method(HttpMethod method);

		/**
		 * Set the url of the request.
		 * @param url the new url
		 * @return this builder
		 * @since 5.0.1
		 */
		/**
		 * 设置请求的URL。 
		 *  
		 * @param  url新的URL url 
		 * @return 此构建器@since 5.0.1
		 */
		Builder url(URI url);

		/**
		 * Add the given header value(s) under the given name.
		 * @param headerName  the header name
		 * @param headerValues the header value(s)
		 * @return this builder
		 * @see HttpHeaders#add(String, String)
		 */
		/**
		 * 在给定名称下添加给定标头值。 
		 *  
		 * @param  headerName标头名称
		 * @param  headerValues标头值
		 * @return 此构建器
		 * @see  HttpHeaders＃add（String，String）
		 */
		Builder header(String headerName, String... headerValues);

		/**
		 * Manipulate this request's headers with the given consumer. The
		 * headers provided to the consumer are "live", so that the consumer can be used to
		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,
		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other
		 * {@link HttpHeaders} methods.
		 * @param headersConsumer a function that consumes the {@code HttpHeaders}
		 * @return this builder
		 */
		/**
		 * 使用给定的使用者处理此请求的标头。 
		 * 提供给使用者的标头是"活动的"，因此使用者可以用来{@link 纯HttpHeaders＃set（String，String）覆盖}现有标头值{@link 纯HttpHeaders＃remove（Object ）删除}值，或使用其他任何{@link  HttpHeaders}方法。 
		 *  
		 * @param  headers消费一个使用{@code  HttpHeaders} 
		 * @return 此构建器的函数
		 */
		Builder headers(Consumer<HttpHeaders> headersConsumer);

		/**
		 * Add a cookie with the given name and value(s).
		 * @param name the cookie name
		 * @param values the cookie value(s)
		 * @return this builder
		 */
		/**
		 * 添加具有给定名称和值的Cookie。 
		 *  
		 * @param 命名cookie名称
		 * @param 评估cookie值
		 * @return 此构建器
		 */
		Builder cookie(String name, String... values);

		/**
		 * Manipulate this request's cookies with the given consumer. The
		 * map provided to the consumer is "live", so that the consumer can be used to
		 * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing header values,
		 * {@linkplain MultiValueMap#remove(Object) remove} values, or use any of the other
		 * {@link MultiValueMap} methods.
		 * @param cookiesConsumer a function that consumes the cookies map
		 * @return this builder
		 */
		/**
		 * 与给定的使用者操作此请求的cookie。 
		 * 提供给使用者的映射是"实时的"，因此使用者可以用来{@link  plain MultiValueMap＃set（Object，Object）覆盖}现有的标头值，{<@link> plain MultiValueMap＃remove（Object ）删除}值，或使用其他任何{@link  MultiValueMap}方法。 
		 *  
		 * @param  cookies消费一个使用Cookies映射的函数
		 * @return 此构建器
		 */
		Builder cookies(Consumer<MultiValueMap<String, String>> cookiesConsumer);

		/**
		 * Set the body of the request to the given {@code BodyInserter}.
		 * @param inserter the {@code BodyInserter} that writes to the request
		 * @return this builder
		 */
		/**
		 * 将请求的主体设置为给定的{@code  BodyInserter}。 
		 *  
		 * @param 插入器，将{@code  BodyInserter}写入请求
		 * @return 此构建器
		 */
		Builder body(BodyInserter<?, ? super ClientHttpRequest> inserter);

		/**
		 * Set the body of the request to the given {@code Publisher} and return it.
		 * @param publisher the {@code Publisher} to write to the request
		 * @param elementClass the class of elements contained in the publisher
		 * @param <S> the type of the elements contained in the publisher
		 * @param <P> the type of the {@code Publisher}
		 * @return the built request
		 */
		/**
		 * 将请求的主体设置为给定的{@code  Publisher}并返回它。 
		 *  
		 * @param 发布者{{@@code> Publisher}向请求
		 * @param  elementClass写入发布者中包含的元素类
		 * @param  <S>发布者中包含的元素类型<
		 * @param > <P> {@code 发布者}的类型
		 * @return 生成的请求
		 */
		<S, P extends Publisher<S>> Builder body(P publisher, Class<S> elementClass);

		/**
		 * Set the body of the request to the given {@code Publisher} and return it.
		 * @param publisher the {@code Publisher} to write to the request
		 * @param typeReference a type reference describing the elements contained in the publisher
		 * @param <S> the type of the elements contained in the publisher
		 * @param <P> the type of the {@code Publisher}
		 * @return the built request
		 */
		/**
		 * 将请求的主体设置为给定的{@code  Publisher}并返回它。 
		 *  
		 * @param 发布者{{@@code>发布者}写入请求
		 * @param  typeReference类型参考，描述发布者中包含的元素
		 * @param  <S>发布者中包含的元素的类型
		 * @param  <P> {@code  Publisher}的类型
		 * @return 构建的请求
		 */
		<S, P extends Publisher<S>> Builder body(P publisher, ParameterizedTypeReference<S> typeReference);

		/**
		 * Set the attribute with the given name to the given value.
		 * @param name the name of the attribute to add
		 * @param value the value of the attribute to add
		 * @return this builder
		 */
		/**
		 * 将具有给定名称的属性设置为给定值。 
		 *  
		 * @param 名称要添加的属性的名称
		 * @param 值要添加的属性的值
		 * @return 此构建器
		 */
		Builder attribute(String name, Object value);

		/**
		 * Manipulate the request attributes with the given consumer. The attributes provided to
		 * the consumer are "live", so that the consumer can be used to inspect attributes,
		 * remove attributes, or use any of the other map-provided methods.
		 * @param attributesConsumer a function that consumes the attributes
		 * @return this builder
		 */
		/**
		 * 使用给定的使用者处理请求属性。 
		 * 提供给使用者的属性是"活动的"，因此可以使用使用者检查属性，删除属性或使用任何其他地图提供的方法。 
		 *  
		 * @param  attributes消费一个使用属性的函数
		 * @return 此构建器
		 */
		Builder attributes(Consumer<Map<String, Object>> attributesConsumer);

		/**
		 * Build the request.
		 */
		/**
		 * 建立请求。 
		 * 
		 */
		ClientRequest build();
	}

}
