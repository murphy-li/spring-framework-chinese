/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */
package org.springframework.web.reactive.socket;

import java.util.Map;
import java.util.function.Function;

import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferFactory;

/**
 * Represents a WebSocket session.
 *
 * <p>Use {@link WebSocketSession#receive() session.receive()} to compose on
 * the inbound message stream, and {@link WebSocketSession#send(Publisher)
 * session.send(publisher)} to provide the outbound message stream.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 表示一个WebSocket会话。 
 *  <p>使用{@link  WebSocketSession＃receive（）session.receive（）}组成入站消息流，并使用{@link  WebSocketSession＃send（Publisher）session.send（publisher）}提供出站消息流。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface WebSocketSession {

	/**
	 * Return the id for the session.
	 */
	/**
	 * 返回会话的ID。 
	 * 
	 */
	String getId();

	/**
	 * Return information from the handshake request.
	 */
	/**
	 * 从握手请求返回信息。 
	 * 
	 */
	HandshakeInfo getHandshakeInfo();

	/**
	 * Return a {@code DataBuffer} Factory to create message payloads.
	 * @return the buffer factory for the session
	 */
	/**
	 * 返回{@code  DataBuffer}工厂以创建消息有效负载。 
	 *  
	 * @return 会话的缓冲区工厂
	 */
	DataBufferFactory bufferFactory();

	/**
	 * Return the map with attributes associated with the WebSocket session.
	 * @return a Map with the session attributes (never {@code null})
	 * @since 5.1
	 */
	/**
	 * 返回具有与WebSocket会话关联的属性的映射。 
	 *  
	 * @return 具有会话属性的地图（从{<@@code> null}开始）@5.1
	 */
	Map<String, Object> getAttributes();

	/**
	 * Provides access to the stream of inbound messages.
	 * <p>This stream receives a completion or error signal when the connection
	 * is closed. In a typical {@link WebSocketHandler} implementation this
	 * stream is composed into the overall processing flow, so that when the
	 * connection is closed, handling will end.
	 *
	 * <p>See the class-level doc of {@link WebSocketHandler} and the reference
	 * for more details and examples of how to handle the session.
	 */
	/**
	 * 提供对入站消息流的访问。 
	 *  <p>当连接关闭时，此流接收到完成或错误信号。 
	 * 在典型的{@link  WebSocketHandler}实现中，此流组成整个处理流程，因此，当连接关闭时，处理将结束。 
	 *  <p>有关更多详细信息和如何处理会话的示例，请参见{@link  WebSocketHandler}的类级文档和参考。 
	 * 
	 */
	Flux<WebSocketMessage> receive();

	/**
	 * Give a source of outgoing messages, write the messages and return a
	 * {@code Mono<Void>} that completes when the source completes and writing
	 * is done.
	 *
	 * <p>See the class-level doc of {@link WebSocketHandler} and the reference
	 * for more details and examples of how to handle the session.
	 */
	/**
	 * 提供传出消息的来源，编写消息并返回一个{@code  Mono <Void>}，该消息将在源完成并完成写入时完成。 
	 *  <p>有关更多详细信息和如何处理会话的示例，请参见{@link  WebSocketHandler}的类级文档和参考。 
	 * 
	 */
	Mono<Void> send(Publisher<WebSocketMessage> messages);

	/**
	 * Close the WebSocket session with {@link CloseStatus#NORMAL}.
	 */
	/**
	 * 使用{@link  CloseStatus＃NORMAL}关闭WebSocket会话。 
	 * 
	 */
	default Mono<Void> close() {
		return close(CloseStatus.NORMAL);
	}

	/**
	 * Close the WebSocket session with the given status.
	 * @param status the close status
	 */
	/**
	 * 以给定状态关闭WebSocket会话。 
	 *  
	 * @param 状态关闭状态
	 */
	Mono<Void> close(CloseStatus status);


	// WebSocketMessage factory methods

	/**
	 * Factory method to create a text {@link WebSocketMessage} using the
	 * {@link #bufferFactory()} for the session.
	 */
	/**
	 * 使用{{@link> #bufferFactory（）}会话创建文本{@link  WebSocketMessage}的工厂方法。 
	 * 
	 */
	WebSocketMessage textMessage(String payload);

	/**
	 * Factory method to create a binary WebSocketMessage using the
	 * {@link #bufferFactory()} for the session.
	 */
	/**
	 * 使用{@link  #bufferFactory（）}创建会话的二进制WebSocketMessage的工厂方法。 
	 * 
	 */
	WebSocketMessage binaryMessage(Function<DataBufferFactory, DataBuffer> payloadFactory);

	/**
	 * Factory method to create a ping WebSocketMessage using the
	 * {@link #bufferFactory()} for the session.
	 */
	/**
	 * 使用{@link  #bufferFactory（）}为会话创建ping WebSocketMessage的工厂方法。 
	 * 
	 */
	WebSocketMessage pingMessage(Function<DataBufferFactory, DataBuffer> payloadFactory);

	/**
	 * Factory method to create a pong WebSocketMessage using the
	 * {@link #bufferFactory()} for the session.
	 */
	/**
	 * 使用{@link  #bufferFactory（）}创建pong WebSocketMessage的工厂方法。 
	 * 
	 */
	WebSocketMessage pongMessage(Function<DataBufferFactory, DataBuffer> payloadFactory);

}
