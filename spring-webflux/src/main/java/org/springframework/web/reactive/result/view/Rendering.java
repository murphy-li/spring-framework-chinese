/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.view;

import java.util.Collection;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.lang.Nullable;
import org.springframework.ui.Model;

/**
 * Public API for HTML rendering. Supported as a return value in Spring WebFlux
 * controllers. Comparable to the use of {@code ModelAndView} as a return value
 * in Spring MVC controllers.
 *
 * <p>Controllers typically return a {@link String} view name and rely on the
 * "implicit" model which can also be injected into the controller method.
 * Or controllers may return model attribute(s) and rely on a default view name
 * being selected based on the request path.
 *
 * <p>{@link Rendering} can be used to combine a view name with model attributes,
 * set the HTTP status or headers, and for other more advanced options around
 * redirect scenarios.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 用于HTML呈现的公共API。 
 * 在Spring WebFlux控制器中作为返回值支持。 
 * 与在Spring MVC控制器中使用{@code  ModelAndView}作为返回值相当。 
 *  <p>控制器通常返回一个{@link  String}视图名称，并依赖于"隐式"模型，该模型也可以注入到控制器方法中。 
 * 或控制器可以返回模型属性，并依赖基于请求路径选择的默认视图名称。 
 *  <p> {<@link> Rendering}可以用于将视图名称与模型属性组合，设置HTTP状态或标头以及其他有关重定向方案的高级选项。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface Rendering {

	/**
	 * Return the selected {@link String} view name or {@link View} object.
	 */
	/**
	 * 返回选定的{@link  String}视图名称或{@link  View}对象。 
	 * 
	 */
	@Nullable
	Object view();

	/**
	 * Return attributes to add to the model.
	 */
	/**
	 * 返回属性以添加到模型。 
	 * 
	 */
	Map<String, Object> modelAttributes();

	/**
	 * Return the HTTP status to set the response to.
	 */
	/**
	 * 返回HTTP状态以设置响应。 
	 * 
	 */
	@Nullable
	HttpStatus status();

	/**
	 * Return headers to add to the response.
	 */
	/**
	 * 返回标头以添加到响应中。 
	 * 
	 */
	HttpHeaders headers();


	/**
	 * Create a new builder for response rendering based on the given view name.
	 * @param name the view name to be resolved to a {@link View}
	 * @return the builder
	 */
	/**
	 * 根据给定的视图名称创建一个新的构建器用于响应呈现。 
	 *  
	 * @param 命名要解析为{@link  View}的视图名称
	 * @return 构建器
	 */
	static Builder<?> view(String name) {
		return new DefaultRenderingBuilder(name);
	}

	/**
	 * Create a new builder for a redirect through a {@link RedirectView}.
	 * @param url the redirect URL
	 * @return the builder
	 */
	/**
	 * 通过{@link  RedirectView}为重定向创建新的构建器。 
	 *  
	 * @param  url重定向URL 
	 * @return 构建器
	 */
	static RedirectBuilder redirectTo(String url) {
		return new DefaultRenderingBuilder(new RedirectView(url));
	}


	/**
	 * Defines a builder for {@link Rendering}.
	 *
	 * @param <B> a self reference to the builder type
	 */
	/**
	 * 为{@link  Rendering}定义构建器。 
	 *  
	 * @param  <B>对构建器类型的自引用
	 */
	interface Builder<B extends Builder<B>> {

		/**
		 * Add the given model attribute with the supplied name.
		 * @see Model#addAttribute(String, Object)
		 */
		/**
		 * 使用提供的名称添加给定的模型属性。 
		 *  
		 * @see  Model＃addAttribute（字符串，对象）
		 */
		B modelAttribute(String name, Object value);

		/**
		 * Add an attribute to the model using a
		 * {@link org.springframework.core.Conventions#getVariableName generated name}.
		 * @see Model#addAttribute(Object)
		 */
		/**
		 * 使用{@link  org.springframework.core.Conventions＃getVariableName生成的名称}向模型添加属性。 
		 *  
		 * @see  Model＃addAttribute（对象）
		 */
		B modelAttribute(Object value);

		/**
		 * Add all given attributes to the model using
		 * {@link org.springframework.core.Conventions#getVariableName generated names}.
		 * @see Model#addAllAttributes(Collection)
		 */
		/**
		 * 使用{@link  org.springframework.core.Conventions＃getVariableName生成的名称}将所有给定的属性添加到模型中。 
		 *  
		 * @see  Model＃addAllAttributes（集合）
		 */
		B modelAttributes(Object... values);

		/**
		 * Add the given attributes to the model.
		 * @see Model#addAllAttributes(Map)
		 */
		/**
		 * 将给定的属性添加到模型。 
		 *  
		 * @see  Model＃addAllAttributes（地图）
		 */
		B model(Map<String, ?> map);

		/**
		 * Specify the status to use for the response.
		 */
		/**
		 * 指定用于响应的状态。 
		 * 
		 */
		B status(HttpStatus status);

		/**
		 * Specify a header to add to the response.
		 */
		/**
		 * 指定要添加到响应的标题。 
		 * 
		 */
		B header(String headerName, String... headerValues);

		/**
		 * Specify headers to add to the response.
		 */
		/**
		 * 指定要添加到响应的标题。 
		 * 
		 */
		B headers(HttpHeaders headers);

		/**
		 * Builder the {@link Rendering} instance.
		 */
		/**
		 * 生成{@link  Rendering}实例。 
		 * 
		 */
		Rendering build();
	}


	/**
	 * Extends {@link Builder} with extra options for redirect scenarios.
	 */
	/**
	 * 使用用于重定向方案的其他选项扩展{@link  Builder}。 
	 * 
	 */
	interface RedirectBuilder extends Builder<RedirectBuilder> {

		/**
		 * Whether to the provided redirect URL should be prepended with the
		 * application context path (if any).
		 * <p>By default this is set to {@code true}.
		 *
		 * @see RedirectView#setContextRelative(boolean)
		 */
		/**
		 * 是否应使用提供的重定向URL加上应用程序上下文路径（如果有）。 
		 *  <p>默认情况下，此设置为{@code  true}。 
		 *  
		 * @see  RedirectView＃setContextRelative（boolean）
		 */
		RedirectBuilder contextRelative(boolean contextRelative);

		/**
		 * Whether to append the query string of the current URL to the target
		 * redirect URL or not.
		 * <p>By default this is set to {@code false}.
		 *
		 * @see RedirectView#setPropagateQuery(boolean)
		 */
		/**
		 * 是否将当前URL的查询字符串附加到目标重定向URL。 
		 *  <p>默认情况下，此设置为{@code  false}。 
		 *  
		 * @see  RedirectView＃setPropagateQuery（boolean）
		 */
		RedirectBuilder propagateQuery(boolean propagate);
	}

}
