/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.config;

import org.springframework.core.convert.converter.Converter;
import org.springframework.format.Formatter;
import org.springframework.format.FormatterRegistry;
import org.springframework.http.codec.ServerCodecConfigurer;
import org.springframework.lang.Nullable;
import org.springframework.validation.MessageCodesResolver;
import org.springframework.validation.Validator;
import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;
import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;

/**
 * Defines callback methods to customize the configuration for WebFlux
 * applications enabled via {@link EnableWebFlux @EnableWebFlux}.
 *
 * <p>{@code @EnableWebFlux}-annotated configuration classes may implement
 * this interface to be called back and given a chance to customize the
 * default configuration. Consider implementing this interface and
 * overriding the relevant methods for your needs.
 *
 * @author Brian Clozel
 * @author Rossen Stoyanchev
 * @since 5.0
 * @see WebFluxConfigurationSupport
 * @see DelegatingWebFluxConfiguration
 */
/**
 * 定义回调方法，以自定义通过{@link  EnableWebFlux @EnableWebFlux}启用的WebFlux应用程序的配置。 
 * 带有<p> {<@@code> @EnableWebFlux}注释的配置类可以实现此接口，以便对其进行回调，并有机会自定义默认配置。 
 * 考虑实现此接口，并根据需要覆盖相关方法。 
 *  @author  Brian Clozel @author  Rossen Stoyanchev @从5.0起
 * @see  WebFluxConfigurationSupport 
 * @see  DelegatingWebFluxConfiguration
 */
public interface WebFluxConfigurer {

	/**
	 * Configure how the content type requested for the response is resolved
	 * when handling requests with annotated controllers.
	 * @param builder for configuring the resolvers to use
	 */
	/**
	 * 配置在使用带注释的控制器处理请求时如何解析请求响应的内容类型。 
	 *  
	 * @param 构建器，用于配置要使用的解析器
	 */
	default void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {
	}

	/**
	 * Configure "global" cross origin request processing.
	 * <p>The configured readers and writers will apply to all requests including
	 * annotated controllers and functional endpoints. Annotated controllers can
	 * further declare more fine-grained configuration via
	 * {@link org.springframework.web.bind.annotation.CrossOrigin @CrossOrigin}.
	 * @see CorsRegistry
	 */
	/**
	 * 配置"全局"跨源请求处理。 
	 *  <p>配置的读取器和写入器将应用于所有请求，包括带注释的控制器和功能端点。 
	 * 带注释的控制器可以通过{@link  org.springframework.web.bind.annotation.CrossOrigin @CrossOrigin}进一步声明更精细的配置。 
	 *  
	 * @see  CorsRegistry
	 */
	default void addCorsMappings(CorsRegistry registry) {
	}

	/**
	 * Configure path matching options.
	 * <p>The configured path matching options will be used for mapping to
	 * annotated controllers and also
	 * {@link #addResourceHandlers(ResourceHandlerRegistry) static resources}.
	 * @param configurer the {@link PathMatchConfigurer} instance
	 */
	/**
	 * 配置路径匹配选项。 
	 *  <p>配置的路径匹配选项将用于映射到带注释的控制器以及{@link  #addResourceHandlers（ResourceHandlerRegistry）静态资源}。 
	 *  
	 * @param 配置器{@link  PathMatchConfigurer}实例
	 */
	default void configurePathMatching(PathMatchConfigurer configurer) {
	}

	/**
	 * Add resource handlers for serving static resources.
	 * @see ResourceHandlerRegistry
	 */
	/**
	 * 添加用于处理静态资源的资源处理程序。 
	 *  
	 * @see  ResourceHandlerRegistry
	 */
	default void addResourceHandlers(ResourceHandlerRegistry registry) {
	}

	/**
	 * Configure resolvers for custom {@code @RequestMapping} method arguments.
	 * @param configurer to configurer to use
	 */
	/**
	 * 为自定义{@code  @RequestMapping}方法参数配置解析器。 
	 *  
	 * @param 配置器以使用配置器
	 */
	default void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {
	}

	/**
	 * Configure custom HTTP message readers and writers or override built-in ones.
	 * <p>The configured readers and writers will be used for both annotated
	 * controllers and functional endpoints.
	 * @param configurer the configurer to use
	 */
	/**
	 * 配置自定义HTTP消息读取器和写入器，或覆盖内置的HTTP和消息读取器。 
	 *  <p>已配置的读取器和写入器将用于带注释的控制器和功能端点。 
	 *  
	 * @param 配置器要使用的配置器
	 */
	default void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {
	}

	/**
	 * Add custom {@link Converter Converters} and {@link Formatter Formatters} for
	 * performing type conversion and formatting of annotated controller method arguments.
	 */
	/**
	 * 添加自定义{@link 转换器Converters}和{@link  Formatter Formatters}，以执行带注释的控制器方法参数的类型转换和格式化。 
	 * 
	 */
	default void addFormatters(FormatterRegistry registry) {
	}

	/**
	 * Provide a custom {@link Validator}.
	 * <p>By default a validator for standard bean validation is created if
	 * bean validation API is present on the classpath.
	 * <p>The configured validator is used for validating annotated controller
	 * method arguments.
	 */
	/**
	 * 提供自定义的{@link 验证程序}。 
	 *  <p>如果在类路径中存在bean验证API，则默认情况下会创建一个用于标准bean验证的验证器。 
	 *  <p>配置的验证器用于验证带注释的控制器方法参数。 
	 * 
	 */
	@Nullable
	default Validator getValidator() {
		return null;
	}

	/**
	 * Provide a custom {@link MessageCodesResolver} to use for data binding in
	 * annotated controller method arguments instead of the one created by
	 * default in {@link org.springframework.validation.DataBinder}.
	 */
	/**
	 * 提供一个自定义的{@link  MessageCodesResolver}来用于带注释的控制器方法参数中的数据绑定，而不是默认在{@link  org.springframework.validation.DataBinder}中创建的参数。 
	 * 
	 */
	@Nullable
	default MessageCodesResolver getMessageCodesResolver() {
		return null;
	}

	/**
	 * Configure view resolution for rendering responses with a view and a model,
	 * where the view is typically an HTML template but could also be based on
	 * an HTTP message writer (e.g. JSON, XML).
	 * <p>The configured view resolvers will be used for both annotated
	 * controllers and functional endpoints.
	 */
	/**
	 * 配置视图分辨率以使用视图和模型来呈现响应，其中视图通常是HTML模板，但也可以基于HTTP消息编写器（例如JSON，XML）。 
	 *  <p>配置的视图解析器将用于带注释的控制器和功能端点。 
	 * 
	 */
	default void configureViewResolvers(ViewResolverRegistry registry) {
	}

}
