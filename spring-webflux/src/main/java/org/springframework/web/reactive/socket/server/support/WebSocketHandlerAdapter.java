/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */
package org.springframework.web.reactive.socket.server.support;

import reactor.core.publisher.Mono;

import org.springframework.util.Assert;
import org.springframework.web.reactive.DispatcherHandler;
import org.springframework.web.reactive.HandlerAdapter;
import org.springframework.web.reactive.HandlerResult;
import org.springframework.web.reactive.socket.WebSocketHandler;
import org.springframework.web.reactive.socket.server.WebSocketService;
import org.springframework.web.server.ServerWebExchange;

/**
 * {@link HandlerAdapter} that allows using a {@link WebSocketHandler} with the
 * generic {@link DispatcherHandler} mapping URLs directly to such handlers.
 * Requests are handled by delegating to the configured {@link WebSocketService}
 * which by default is {@link HandshakeWebSocketService}.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * {@link  HandlerAdapter}允许将{@link  WebSocketHandler}与通用{@link  DispatcherHandler}一起使用，将URL直接映射到此类处理程序。 
 * 通过委派给已配置的{@link  WebSocketService}来处理请求，默认情况下为{@link  HandshakeWebSocketService}。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class WebSocketHandlerAdapter implements HandlerAdapter {

	private final WebSocketService webSocketService;


	/**
	 * Default constructor that creates and uses a
	 * {@link HandshakeWebSocketService}.
	 */
	/**
	 * 创建并使用{@link  HandshakeWebSocketService}的默认构造函数。 
	 * 
	 */
	public WebSocketHandlerAdapter() {
		this(new HandshakeWebSocketService());
	}

	/**
	 * Alternative constructor with the {@link WebSocketService} to use.
	 */
	/**
	 * 与{@link  WebSocketService}一起使用的替代构造函数。 
	 * 
	 */
	public WebSocketHandlerAdapter(WebSocketService webSocketService) {
		Assert.notNull(webSocketService, "'webSocketService' is required");
		this.webSocketService = webSocketService;
	}


	/**
	 * Return the configured {@code WebSocketService} to handle requests.
	 */
	/**
	 * 返回配置的{@code  WebSocketService}来处理请求。 
	 * 
	 */
	public WebSocketService getWebSocketService() {
		return this.webSocketService;
	}


	@Override
	public boolean supports(Object handler) {
		return WebSocketHandler.class.isAssignableFrom(handler.getClass());
	}

	@Override
	public Mono<HandlerResult> handle(ServerWebExchange exchange, Object handler) {
		WebSocketHandler webSocketHandler = (WebSocketHandler) handler;
		return getWebSocketService().handleRequest(exchange, webSocketHandler).then(Mono.empty());
	}

}
