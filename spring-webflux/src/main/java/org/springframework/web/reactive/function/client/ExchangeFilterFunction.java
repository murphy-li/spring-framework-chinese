/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.function.client;

import java.util.function.Function;

import reactor.core.publisher.Mono;

import org.springframework.util.Assert;

/**
 * Represents a function that filters an {@linkplain ExchangeFunction exchange function}.
 * <p>The filter is executed when a {@code Subscriber} subscribes to the
 * {@code Publisher} returned by the {@code WebClient}.
 *
 * @author Arjen Poutsma
 * @since 5.0
 */
/**
 * 表示一个过滤{@link  plain ExchangeFunction交换函数}的函数。 
 *  <p>当{@code 订阅者}订阅由{@code  WebClient}返回的{@code 发布者}时，将执行筛选器。 
 *  @author  Arjen Poutsma @从5.0开始
 */
@FunctionalInterface
public interface ExchangeFilterFunction {

	/**
	 * Apply this filter to the given request and exchange function.
	 * <p>The given {@linkplain ExchangeFunction} represents the next entity
	 * in the chain, to be invoked via
	 * {@linkplain ExchangeFunction#exchange(ClientRequest) invoked} in order to
	 * proceed with the exchange, or not invoked to shortcut the chain.
	 * @param request the current request
	 * @param next the next exchange function in the chain
	 * @return the filtered response
	 */
	/**
	 * 将此过滤器应用于给定的请求和交换功能。 
	 *  <p>给定的{@link  plain ExchangeFunction}表示链中的下一个实体，该实体将通过{@link  plain ExchangeFunction＃exchange（ClientRequest）被调用}进行调用，以便继续进行交换或不被调用缩短链。 
	 *  
	 * @param 请求当前请求
	 * @param 链中的下一个交换函数
	 * @return 过滤后的响应
	 */
	Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next);

	/**
	 * Return a composed filter function that first applies this filter, and
	 * then applies the given {@code "after"} filter.
	 * @param afterFilter the filter to apply after this filter
	 * @return the composed filter
	 */
	/**
	 * 返回一个组合的过滤器函数，该函数首先应用此过滤器，然后应用给定的{@code "after"}过滤器。 
	 *  
	 * @param  afterFilter过滤器要在此过滤器之后应用
	 * @return 组成的过滤器
	 */
	default ExchangeFilterFunction andThen(ExchangeFilterFunction afterFilter) {
		Assert.notNull(afterFilter, "ExchangeFilterFunction must not be null");
		return (request, next) ->
				filter(request, afterRequest -> afterFilter.filter(afterRequest, next));
	}

	/**
	 * Apply this filter to the given {@linkplain ExchangeFunction}, resulting
	 * in a filtered exchange function.
	 * @param exchange the exchange function to filter
	 * @return the filtered exchange function
	 */
	/**
	 * 将此过滤器应用于给定的{@link  plain ExchangeFunction}，从而得到过滤后的交换函数。 
	 *  
	 * @param 交换交换函数以过滤
	 * @return 过滤后的交换函数
	 */
	default ExchangeFunction apply(ExchangeFunction exchange) {
		Assert.notNull(exchange, "ExchangeFunction must not be null");
		return request -> this.filter(request, exchange);
	}

	/**
	 * Adapt the given request processor function to a filter function that only
	 * operates on the {@code ClientRequest}.
	 * @param processor the request processor
	 * @return the resulting filter adapter
	 */
	/**
	 * 使给定的请求处理器功能适应仅在{@code  ClientRequest}上运行的过滤器功能。 
	 *  
	 * @param 处理器，请求处理器
	 * @return 结果过滤器适配器
	 */
	static ExchangeFilterFunction ofRequestProcessor(Function<ClientRequest, Mono<ClientRequest>> processor) {
		Assert.notNull(processor, "ClientRequest Function must not be null");
		return (request, next) -> processor.apply(request).flatMap(next::exchange);
	}

	/**
	 * Adapt the given response processor function to a filter function that
	 * only operates on the {@code ClientResponse}.
	 * @param processor the response processor
	 * @return the resulting filter adapter
	 */
	/**
	 * 使给定的响应处理器功能适应仅在{@code  ClientResponse}上运行的筛选器功能。 
	 *  
	 * @param 处理器响应处理器
	 * @return 生成的过滤器适配器
	 */
	static ExchangeFilterFunction ofResponseProcessor(Function<ClientResponse, Mono<ClientResponse>> processor) {
		Assert.notNull(processor, "ClientResponse Function must not be null");
		return (request, next) -> next.exchange(request).flatMap(processor);
	}

}
