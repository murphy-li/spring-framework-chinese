/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.function.server;

import java.util.Collection;
import java.util.Map;
import java.util.function.Consumer;

import reactor.core.publisher.Mono;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseCookie;
import org.springframework.lang.Nullable;
import org.springframework.util.MultiValueMap;

/**
 * Rendering-specific subtype of {@link ServerResponse} that exposes model and template data.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 5.0
 */
/**
 * {@link  ServerResponse}的特定于渲染的子类型，用于公开模型和模板数据。 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @从5.0开始
 */
public interface RenderingResponse extends ServerResponse {

	/**
	 * Return the name of the template to be rendered.
	 */
	/**
	 * 返回要渲染的模板的名称。 
	 * 
	 */
	String name();

	/**
	 * Return the unmodifiable model map.
	 */
	/**
	 * 返回不可修改的模型图。 
	 * 
	 */
	Map<String, Object> model();


	// Builder

	/**
	 * Create a builder with the template name, status code, headers and model of the given response.
	 * @param other the response to copy the values from
	 * @return the created builder
	 */
	/**
	 * 使用给定响应的模板名称，状态代码，标题和模型来创建构建器。 
	 *  
	 * @param 其他从
	 * @return 创建的构建器复制值的响应
	 */
	static Builder from(RenderingResponse other) {
		return new DefaultRenderingResponseBuilder(other);
	}

	/**
	 * Create a builder with the given template name.
	 * @param name the name of the template to render
	 * @return the created builder
	 */
	/**
	 * 使用给定的模板名称创建一个构建器。 
	 *  
	 * @param 命名要渲染的模板的名称
	 * @return 创建的构建器
	 */
	static Builder create(String name) {
		return new DefaultRenderingResponseBuilder(name);
	}


	/**
	 * Defines a builder for {@code RenderingResponse}.
	 */
	/**
	 * 为{@code  RenderingResponse}定义一个构建器。 
	 * 
	 */
	interface Builder {

		/**
		 * Add the supplied attribute to the model using a
		 * {@linkplain org.springframework.core.Conventions#getVariableName generated name}.
		 * <p><em>Note: Empty {@link Collection Collections} are not added to
		 * the model when using this method because we cannot correctly determine
		 * the true convention name. View code should check for {@code null} rather
		 * than for empty collections.</em>
		 * @param attribute the model attribute value (never {@code null})
		 */
		/**
		 * 使用{@link 纯org.springframework.core.Conventions＃getVariableName生成的名称}将提供的属性添加到模型。 
		 *  <p> <em>注意：使用此方法时，不会将空的{@link 集合集合}添加到模型中，因为我们无法正确确定真实的约定名称。 
		 * 查看代码应检查{@code  null}，而不是空集合。 
		 * </ em> 
		 * @param 属性model属性值（从不输入{@code  null}）
		 */
		Builder modelAttribute(Object attribute);

		/**
		 * Add the supplied attribute value under the supplied name.
		 * @param name the name of the model attribute (never {@code null})
		 * @param value the model attribute value (can be {@code null})
		 */
		/**
		 * 在提供的名称下添加提供的属性值。 
		 *  
		 * @param 命名模型属性的名称（不要{<@@code> null}）
		 * @param 值模型属性的值（可以是{@code  null}）
		 */
		Builder modelAttribute(String name, @Nullable Object value);

		/**
		 * Copy all attributes in the supplied array into the model,
		 * using attribute name generation for each element.
		 * @see #modelAttribute(Object)
		 */
		/**
		 * 使用每个元素的属性名称生成，将提供的数组中的所有属性复制到模型中。 
		 *  
		 * @see  #modelAttribute（对象）
		 */
		Builder modelAttributes(Object... attributes);

		/**
		 * Copy all attributes in the supplied {@code Collection} into the model,
		 * using attribute name generation for each element.
		 * @see #modelAttribute(Object)
		 */
		/**
		 * 使用每个元素的属性名称生成，将提供的{@code 集合}中的所有属性复制到模型中。 
		 *  
		 * @see  #modelAttribute（对象）
		 */
		Builder modelAttributes(Collection<?> attributes);

		/**
		 * Copy all attributes in the supplied {@code Map} into the model.
		 * @see #modelAttribute(String, Object)
		 */
		/**
		 * 将提供的{@code 映射}中的所有属性复制到模型中。 
		 *  
		 * @see  #modelAttribute（字符串，对象）
		 */
		Builder modelAttributes(Map<String, ?> attributes);

		/**
		 * Add the given header value(s) under the given name.
		 * @param headerName the header name
		 * @param headerValues the header value(s)
		 * @return this builder
		 * @see HttpHeaders#add(String, String)
		 */
		/**
		 * 在给定名称下添加给定标头值。 
		 *  
		 * @param  headerName标头名称
		 * @param  headerValues标头值
		 * @return 此构建器
		 * @see  HttpHeaders＃add（String，String）
		 */
		Builder header(String headerName, String... headerValues);

		/**
		 * Copy the given headers into the entity's headers map.
		 * @param headers the existing HttpHeaders to copy from
		 * @return this builder
		 * @see HttpHeaders#add(String, String)
		 */
		/**
		 * 将给定的标题复制到实体的标题映射中。 
		 *  
		 * @param 标头要从此构建器
		 * @return 复制的现有HttpHeaders标头
		 * @see  HttpHeaders＃add（String，String）
		 */
		Builder headers(HttpHeaders headers);

		/**
		 * Set the HTTP status.
		 * @param status the response status
		 * @return this builder
		 */
		/**
		 * 设置HTTP状态。 
		 *  
		 * @param 状态响应状态
		 * @return 此构建器
		 */
		Builder status(HttpStatus status);

		/**
		 * Set the HTTP status.
		 * @param status the response status
		 * @return this builder
		 * @since 5.0.3
		 */
		/**
		 * 设置HTTP状态。 
		 *  
		 * @param 状态响应状态
		 * @return 此构建器@始于5.0.3
		 */
		Builder status(int status);

		/**
		 * Add the given cookie to the response.
		 * @param cookie the cookie to add
		 * @return this builder
		 */
		/**
		 * 将给定的cookie添加到响应中。 
		 *  
		 * @param  cookie cookie以添加
		 * @return 此构建器
		 */
		Builder cookie(ResponseCookie cookie);

		/**
		 * Manipulate this response's cookies with the given consumer. The
		 * cookies provided to the consumer are "live", so that the consumer can be used to
		 * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,
		 * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other
		 * {@link MultiValueMap} methods.
		 * @param cookiesConsumer a function that consumes the cookies
		 * @return this builder
		 */
		/**
		 * 与给定的消费者操作此响应的cookie。 
		 * 提供给使用者的cookie是"活动的"，因此可以使用使用者{@link  plain MultiValueMap＃set（Object，Object）覆盖}现有的cookie，{<@link> plain MultiValueMap＃remove（Object）删除} cookie，或使用其他任何{@link  MultiValueMap}方法。 
		 *  
		 * @param  cookies消费一个消耗cookie的函数，该构建器
		 * @return 
		 */
		Builder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer);

		/**
		 * Build the response.
		 * @return the built response
		 */
		/**
		 * 建立响应。 
		 *  
		 * @return 内置响应
		 */
		Mono<RenderingResponse> build();
	}

}
