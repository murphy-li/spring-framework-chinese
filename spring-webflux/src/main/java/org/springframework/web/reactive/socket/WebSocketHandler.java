/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.socket;

import java.util.Collections;
import java.util.List;

import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

/**
 * Handler for a WebSocket session.
 *
 * <p>A server {@code WebSocketHandler} is mapped to requests with
 * {@link org.springframework.web.reactive.handler.SimpleUrlHandlerMapping
 * SimpleUrlHandlerMapping} and
 * {@link org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter
 * WebSocketHandlerAdapter}. A client {@code WebSocketHandler} is passed to the
 * {@link org.springframework.web.reactive.socket.client.WebSocketClient
 * WebSocketClient} execute method.
 *
 * <p>Use {@link WebSocketSession#receive() session.receive()} to compose on
 * the inbound message stream, and {@link WebSocketSession#send(Publisher)
 * session.send(publisher)} for the outbound message stream. Below is an
 * example, combined flow to process inbound and to send outbound messages:
 *
 * <pre class="code">
 * class ExampleHandler implements WebSocketHandler {

 * 	&#064;Override
 * 	public Mono&lt;Void&gt; handle(WebSocketSession session) {
 *
 * 		Flux&lt;WebSocketMessage&gt; output = session.receive()
 *			.doOnNext(message -> {
 * 				// ...
 * 			})
 * 			.concatMap(message -> {
 * 				// ...
 * 			})
 * 			.map(value -> session.textMessage("Echo " + value));
 *
 * 		return session.send(output);
 * 	}
 * }
 * </pre>
 *
 * <p>If processing inbound and sending outbound messages are independent
 * streams, they can be joined together with the "zip" operator:
 *
 * <pre class="code">
 * class ExampleHandler implements WebSocketHandler {

 * 	&#064;Override
 * 	public Mono&lt;Void&gt; handle(WebSocketSession session) {
 *
 * 		Mono&lt;Void&gt; input = session.receive()
 *			.doOnNext(message -> {
 * 				// ...
 * 			})
 * 			.concatMap(message -> {
 * 				// ...
 * 			})
 * 			.then();
 *
 *		Flux&lt;String&gt; source = ... ;
 * 		Mono&lt;Void&gt; output = session.send(source.map(session::textMessage));
 *
 * 		return Mono.zip(input, output).then();
 * 	}
 * }
 * </pre>
 *
 * <p>A {@code WebSocketHandler} must compose the inbound and outbound streams
 * into a unified flow and return a {@code Mono<Void>} that reflects the
 * completion of that flow. That means there is no need to check if the
 * connection is open, since Reactive Streams signals will terminate activity.
 * The inbound stream receives a completion/error signal, and the outbound
 * stream receives a cancellation signal.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * WebSocket会话的处理程序。 
 *  <p>服务器{@code  WebSocketHandler}映射到具有{@link  org.springframework.web.reactive.handler.SimpleUrlHandlerMapping SimpleUrlHandlerMapping}和{@link  org.springframework.web.reactive.socket的请求.server.support.WebSocketHandlerAdapter WebSocketHandlerAdapter}。 
 * 客户端{@code  WebSocketHandler}传递给{@link  org.springframework.web.reactive.socket.client.WebSocketClient WebSocketClient}执行方法。 
 *  <p>使用{@link  WebSocketSession＃receive（）session.receive（）}组成入站消息流，并使用{@link  WebSocketSession＃send（Publisher）session.send（publisher）}进行出站消息流消息流。 
 * 下面是一个处理入站和发送出站消息的组合流示例：<pre class ="code">类ExampleHandler实现WebSocketHandler {@Override public Mono <Void> handle（WebSocketSession session）{Flux <WebSocketMessage> output = session。 
 *  receive（）.doOnNext（message-> {// ...}）.concatMap（message-> {// ...}）.map（value-> session.textMessage（"Echo"+ value））;返回session.send（output）; }} </ pre> <p>如果处理入站消息和发送出站消息是独立的流，则可以使用"zip"运算符将它们结合在一起：<pre class ="code"> class ExampleHandler实现WebSocketHandler {@Override public Mono <无效> handle（WebSocketSession会话）{Mono <无效> input = session.receive（）.doOnNext（消息-> {// ...}）.concatMap（消息-> {// ...}）.then（ ）; Flux <String>源= ...; Mono <Void>输出= session.send（source.map（session :: textMessage））;返回Mono.zip（input，output）.then（）; }} </ pre> <p> {<@code> WebSocketHandler}必须将入站和出站流组成一个统一的流，并返回反映该流已完成的{@code  Mono <Void>}。 
 * 这意味着无需检查连接是否已打开，因为"响应流"信号将终止活动。 
 * 入站流接收完成/错误信号，而出站流接收取消信号。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface WebSocketHandler {

	/**
	 * Return the list of sub-protocols supported by this handler.
	 * <p>By default an empty list is returned.
	 */
	/**
	 * 返回此处理程序支持的子协议列表。 
	 *  <p>默认情况下，返回一个空列表。 
	 * 
	 */
	default List<String> getSubProtocols() {
		return Collections.emptyList();
	}

	/**
	 * Invoked when a new WebSocket connection is established, and allows
	 * handling of the session.
	 *
	 * <p>See the class-level doc and the reference for more details and
	 * examples of how to handle the session.
	 *
	 * @param session the session to handle
	 * @return indicates when appilcation handling of the session is complete,
	 * which should reflect the completion of the inbound message stream
	 * (i.e. connection closing) and possibly the completion of the outbound
	 * message stream and the writing of messages.
	 */
	/**
	 * 在建立新的WebSocket连接时调用，并允许处理会话。 
	 *  <p>有关如何处理会话的更多详细信息和示例，请参见类级文档和参考。 
	 *  
	 * @param 会话要处理的会话
	 * @return 指示会话的应用处理何时完成，这应反映入站消息流的完成（即连接关闭），并可能反映出站消息流的完成和写入消息。 
	 * 
	 */
	Mono<Void> handle(WebSocketSession session);

}
