/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.config;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.cache.Cache;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.CacheControl;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.web.reactive.resource.ResourceWebHandler;

/**
 * Assist with creating and configuring a static resources handler.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 协助创建和配置静态资源处理程序。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class ResourceHandlerRegistration {

	private final ResourceLoader resourceLoader;

	private final String[] pathPatterns;

	private final List<String> locationValues = new ArrayList<>();

	@Nullable
	private CacheControl cacheControl;

	@Nullable
	private ResourceChainRegistration resourceChainRegistration;


	/**
	 * Create a {@link ResourceHandlerRegistration} instance.
	 * @param resourceLoader a resource loader for turning a String location
	 * into a {@link Resource}
	 * @param pathPatterns one or more resource URL path patterns
	 */
	/**
	 * 创建一个{@link  ResourceHandlerRegistration}实例。 
	 *  
	 * @param  resourceLoader资源加载器，用于将字符串位置转换为{@link  Resource} 
	 * @param  pathPatterns一个或多个资源URL路径模式
	 */
	public ResourceHandlerRegistration(ResourceLoader resourceLoader, String... pathPatterns) {
		Assert.notNull(resourceLoader, "ResourceLoader is required");
		Assert.notEmpty(pathPatterns, "At least one path pattern is required for resource handling");
		this.resourceLoader = resourceLoader;
		this.pathPatterns = pathPatterns;
	}


	/**
	 * Add one or more resource locations from which to serve static content.
	 * Each location must point to a valid directory. Multiple locations may
	 * be specified as a comma-separated list, and the locations will be checked
	 * for a given resource in the order specified.
	 *
	 * <p>For example, {{@code "/"},
	 * {@code "classpath:/META-INF/public-web-resources/"}} allows resources to
	 * be served both from the web application root and from any JAR on the
	 * classpath that contains a {@code /META-INF/public-web-resources/} directory,
	 * with resources in the web application root taking precedence.
	 * @return the same {@link ResourceHandlerRegistration} instance, for
	 * chained method invocation
	 */
	/**
	 * 添加一个或多个资源位置以从其提供静态内容。 
	 * 每个位置必须指向一个有效目录。 
	 * 可以将多个位置指定为以逗号分隔的列表，并将按照指定的顺序检查给定资源的位置。 
	 *  <p>例如，{{<@code>"/"}，{<@code>"classpath：/ META-INF / public-web-resources /"}}允许从Web应用程序根目录同时提供资源并从包含{@code  / META-INF / public-web-resources /}目录的类路径上的任何JAR中，Web应用程序根目录中的资源优先。 
	 *  
	 * @return 相同的{@link  ResourceHandlerRegistration}实例，用于链式方法调用
	 */
	public ResourceHandlerRegistration addResourceLocations(String... resourceLocations) {
		this.locationValues.addAll(Arrays.asList(resourceLocations));
		return this;
	}

	/**
	 * Specify the {@link CacheControl} which should be used
	 * by the resource handler.
	 * @param cacheControl the CacheControl configuration to use
	 * @return the same {@link ResourceHandlerRegistration} instance, for
	 * chained method invocation
	 */
	/**
	 * 指定资源处理程序应使用的{@link  CacheControl}。 
	 *  
	 * @param  cacheControl CacheControl配置使用
	 * @return 相同的{@link  ResourceHandlerRegistration}实例，以进行链式方法调用
	 */
	public ResourceHandlerRegistration setCacheControl(CacheControl cacheControl) {
		this.cacheControl = cacheControl;
		return this;
	}

	/**
	 * Configure a chain of resource resolvers and transformers to use. This
	 * can be useful, for example, to apply a version strategy to resource URLs.
	 * <p>If this method is not invoked, by default only a simple
	 * {@code PathResourceResolver} is used in order to match URL paths to
	 * resources under the configured locations.
	 * @param cacheResources whether to cache the result of resource resolution;
	 * setting this to "true" is recommended for production (and "false" for
	 * development, especially when applying a version strategy)
	 * @return the same {@link ResourceHandlerRegistration} instance, for
	 * chained method invocation
	 */
	/**
	 * 配置要使用的资源解析器和转换器链。 
	 * 例如，这对于将版本策略应用于资源URL很有用。 
	 *  <p>如果未调用此方法，则默认情况下仅使用简单的{@code  PathResourceResolver}来将URL路径与配置位置下的资源进行匹配。 
	 *  
	 * @param  cacheResources是否缓存资源解析的结果； 
	 * 对于生产，建议将其设置为"true"（对于开发，建议设置为"false"，尤其是在应用版本策略时）
	 * @return 相同的{@link  ResourceHandlerRegistration}实例，用于链接方法调用
	 */
	public ResourceChainRegistration resourceChain(boolean cacheResources) {
		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources);
		return this.resourceChainRegistration;
	}

	/**
	 * Configure a chain of resource resolvers and transformers to use. This
	 * can be useful, for example, to apply a version strategy to resource URLs.
	 * <p>If this method is not invoked, by default only a simple
	 * {@code PathResourceResolver} is used in order to match URL paths to
	 * resources under the configured locations.
	 * @param cacheResources whether to cache the result of resource resolution;
	 * setting this to "true" is recommended for production (and "false" for
	 * development, especially when applying a version strategy
	 * @param cache the cache to use for storing resolved and transformed resources;
	 * by default a {@link org.springframework.cache.concurrent.ConcurrentMapCache}
	 * is used. Since Resources aren't serializable and can be dependent on the
	 * application host, one should not use a distributed cache but rather an
	 * in-memory cache.
	 * @return the same {@link ResourceHandlerRegistration} instance, for chained method invocation
	 */
	/**
	 * 配置要使用的资源解析器和转换器链。 
	 * 例如，这对于将版本策略应用于资源URL很有用。 
	 *  <p>如果未调用此方法，则默认情况下仅使用简单的{@code  PathResourceResolver}来将URL路径与配置位置下的资源进行匹配。 
	 *  
	 * @param  cacheResources是否缓存资源解析的结果； 
	 * 建议在生产时将其设置为"true"（对于开发，建议将其设置为"false"，特别是在应用版本策略
	 * @param 缓存时，用于存储已解析和转换的资源的缓存； 
	 * 默认为{@link  org）。 
	 * 使用springframework.cache.concurrent.ConcurrentMapCache}由于资源不可序列化并且可以依赖于应用程序主机，因此不应使用分布式缓存，而应使用内存中的缓存。 
	 *  link> ResourceHandlerRegistration}实例，用于链式方法调用
	 */
	public ResourceChainRegistration resourceChain(boolean cacheResources, Cache cache) {
		this.resourceChainRegistration = new ResourceChainRegistration(cacheResources, cache);
		return this.resourceChainRegistration;
	}

	/**
	 * Returns the URL path patterns for the resource handler.
	 */
	/**
	 * 返回资源处理程序的URL路径模式。 
	 * 
	 */
	protected String[] getPathPatterns() {
		return this.pathPatterns;
	}

	/**
	 * Returns a {@link ResourceWebHandler} instance.
	 */
	/**
	 * 返回一个{@link  ResourceWebHandler}实例。 
	 * 
	 */
	protected ResourceWebHandler getRequestHandler() {
		ResourceWebHandler handler = new ResourceWebHandler();
		handler.setLocationValues(this.locationValues);
		handler.setResourceLoader(this.resourceLoader);
		if (this.resourceChainRegistration != null) {
			handler.setResourceResolvers(this.resourceChainRegistration.getResourceResolvers());
			handler.setResourceTransformers(this.resourceChainRegistration.getResourceTransformers());
		}
		if (this.cacheControl != null) {
			handler.setCacheControl(this.cacheControl);
		}
		return handler;
	}

}
