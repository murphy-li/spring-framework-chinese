/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive;

import java.util.function.Function;

import reactor.core.publisher.Mono;

import org.springframework.web.server.ServerWebExchange;

/**
 * Contract that decouples the {@link DispatcherHandler} from the details of
 * invoking a handler and makes it possible to support any handler type.
 *
 * @author Rossen Stoyanchev
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * 使{@link  DispatcherHandler}与调用处理程序的细节分离的协定，并且可以支持任何处理程序类型。 
 *  @author  Rossen Stoyanchev @author 塞巴斯蒂安·德勒兹@5.0
 */
public interface HandlerAdapter {

	/**
	 * Whether this {@code HandlerAdapter} supports the given {@code handler}.
	 * @param handler handler object to check
	 * @return whether or not the handler is supported
	 */
	/**
	 * 此{@code  HandlerAdapter}是否支持给定的{@code  handler}。 
	 *  
	 * @param 处理程序处理程序对象以检查
	 * @return 是否支持该处理程序
	 */
	boolean supports(Object handler);

	/**
	 * Handle the request with the given handler.
	 * <p>Implementations are encouraged to handle exceptions resulting from the
	 * invocation of a handler in order and if necessary to return an alternate
	 * result that represents an error response.
	 * <p>Furthermore since an async {@code HandlerResult} may produce an error
	 * later during result handling implementations are also encouraged to
	 * {@link HandlerResult#setExceptionHandler(Function) set an exception
	 * handler} on the {@code HandlerResult} so that may also be applied later
	 * after result handling.
	 * @param exchange current server exchange
	 * @param handler the selected handler which must have been previously
	 * checked via {@link #supports(Object)}
	 * @return {@link Mono} that emits a single {@code HandlerResult} or none if
	 * the request has been fully handled and doesn't require further handling.
	 */
	/**
	 * 使用给定的处理程序处理请求。 
	 *  <p>鼓励执行顺序处理因调用处理程序而导致的异常，并在必要时返回表示错误响应的替代结果。 
	 *  <p>此外，由于异步{@code  HandlerResult}稍后可能会在结果处理期间产生错误，因此也鼓励在{@code 上{{@link> HandlerResult＃setExceptionHandler（Function）设置异常处理程序} HandlerResult}，以便在结果处理之后也可以应用。 
	 *  
	 * @param 交换当前服务器交换
	 * @param 处理程序选定的处理程序，该处理程序先前必须已经通过{@link  #supports（Object）}检查过，而
	 * @return  {@link  Mono}发出了一个{ @code  HandlerResult}，如果请求已被完全处理并且不需要进一步处理，则为None。 
	 * 
	 */
	Mono<HandlerResult> handle(ServerWebExchange exchange, Object handler);

}
