/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive;

import reactor.core.publisher.Mono;

import org.springframework.web.server.ServerWebExchange;

/**
 * Interface to be implemented by objects that define a mapping between
 * requests and handler objects.
 *
 * @author Rossen Stoyanchev
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * 由定义请求和处理程序对象之间的映射关系的对象实现的接口。 
 *  @author  Rossen Stoyanchev @author 塞巴斯蒂安·德勒兹@5.0
 */
public interface HandlerMapping {

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that
	 * contains the mapped handler for the best matching pattern.
	 */
	/**
	 * {@link  ServerWebExchange＃getAttributes（）属性}的名称，其中包含最佳匹配模式的映射处理程序。 
	 * 
	 */
	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that
	 * contains the best matching pattern within the handler mapping.
	 */
	/**
	 * {@link  ServerWebExchange＃getAttributes（）属性}的名称，该名称包含处理程序映射中的最佳匹配模式。 
	 * 
	 */
	String BEST_MATCHING_PATTERN_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingPattern";

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that
	 * contains the path within the handler mapping, in case of a pattern match
	 * such as {@code "/static/**"} or the full relevant URI otherwise.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. URL-based HandlerMappings will
	 * typically support it but handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * 在诸如{@code "/ static"}之类的模式匹配的情况下，包含处理程序映射内的路径的{@link  ServerWebExchange＃getAttributes（）属性}的名称，否则为完整的相关URI。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 基于URL的HandlerMappings通常将支持它，但是处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE = HandlerMapping.class.getName() + ".pathWithinHandlerMapping";

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that
	 * contains the URI templates map mapping variable names to values.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. URL-based HandlerMappings will
	 * typically support it, but handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * 包含URI模板的{@link  ServerWebExchange＃getAttributes（）属性}的名称将映射变量名称映射到值。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 基于URL的HandlerMappings通常将支持它，但是处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String URI_TEMPLATE_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + ".uriTemplateVariables";

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that
	 * contains a map with URI variable names and a corresponding MultiValueMap
	 * of URI matrix variables for each.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations and may also not be present depending on
	 * whether the HandlerMapping is configured to keep matrix variable content
	 * in the request URI.
	 */
	/**
	 * {@link  ServerWebExchange＃getAttributes（）属性}的名称，其中包含具有URI变量名称的映射以及每个URI矩阵变量的对应MultiValueMap。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性，并且取决于是否将HandlerMapping配置为在请求URI中保留矩阵变量内容，该属性也可能不存在。 
	 * 
	 */
	String MATRIX_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + ".matrixVariables";

	/**
	 * Name of the {@link ServerWebExchange#getAttributes() attribute} containing
	 * the set of producible MediaType's applicable to the mapped handler.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. Handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * {@link  ServerWebExchange＃getAttributes（）属性}的名称，其中包含适用于映射处理程序的可生产MediaType集。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";


	/**
	 * Return a handler for this request.
	 * @param exchange current server exchange
	 * @return a {@link Mono} that emits one value or none in case the request
	 * cannot be resolved to a handler
	 */
	/**
	 * 返回此请求的处理程序。 
	 *  
	 * @param 交换当前服务器交换
	 * @return 一个{@link  Mono}，在无法将请求解析为处理程序的情况下发出一个值或不发送任何值
	 */
	Mono<Object> getHandler(ServerWebExchange exchange);

}
