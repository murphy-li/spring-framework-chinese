/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.view.freemarker;

import java.io.IOException;
import java.util.List;

import freemarker.cache.ClassTemplateLoader;
import freemarker.cache.TemplateLoader;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.ResourceLoaderAware;
import org.springframework.lang.Nullable;
import org.springframework.ui.freemarker.FreeMarkerConfigurationFactory;
import org.springframework.util.Assert;

/**
 * Configures FreeMarker for web usage via the "configLocation" and/or
 * "freemarkerSettings" and/or "templateLoaderPath" properties.
 * The simplest way to use this class is to specify just a "templateLoaderPath"
 * (e.g. "classpath:templates"); you do not need any further configuration then.
 *
 * <p>This bean must be included in the application context of any application
 * using {@link FreeMarkerView}. It exists purely to configure FreeMarker.
 * It is not meant to be referenced by application components but just internally
 * by {@code FreeMarkerView}. Implements {@link FreeMarkerConfig} to be found by
 * {@code FreeMarkerView} without depending on the bean name of the configurer.
 *
 * <p>Note that you can also refer to a pre-configured FreeMarker Configuration
 * instance via the "configuration" property. This allows to share a FreeMarker
 * Configuration for web and email usage for example.
 *
 * <p>This configurer registers a template loader for this package, allowing to
 * reference the "spring.ftl" macro library contained in this package:
 *
 * <pre class="code">
 * &lt;#import "/spring.ftl" as spring/&gt;
 * &lt;@spring.bind "person.age"/&gt;
 * age is ${spring.status.value}</pre>
 *
 * Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 通过"configLocation"和/或"freemarkerSettings"和/或"templateLoaderPath"属性来配置FreeMarker以供Web使用。 
 * 使用此类的最简单方法是仅指定"templateLoaderPath"（例如"classpath：templates"）； 
 * 然后，您不需要任何进一步的配置。 
 *  <p>必须使用{@link  FreeMarkerView}在任何应用程序的应用程序上下文中包含此bean。 
 * 它仅用于配置FreeMarker。 
 * 它不是由应用程序组件引用的，而是由{@code  FreeMarkerView}内部引用的。 
 * 实现{@link  FreeMarkerConfig}由{@code  FreeMarkerView}查找，而不依赖于配置程序的bean名称。 
 *  <p>请注意，您还可以通过"configuration"属性引用预配置的FreeMarker Configuration实例。 
 * 例如，这允许共享用于Web和电子邮件使用的FreeMarker配置。 
 *  <p>此配置程序为此程序包注册一个模板加载器，从而允许引用此程序包中包含的"spring.ftl"宏库：<pre class ="code"> <#import"/spring.ftl"作为sp​​ring /> <@spring.bind"person.age"/>的年龄为$ {spring.status.value} </ pre>注意：Spring的FreeMarker支持需要FreeMarker 2.3或更高版本。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class FreeMarkerConfigurer extends FreeMarkerConfigurationFactory
		implements FreeMarkerConfig, InitializingBean, ResourceLoaderAware {

	@Nullable
	private Configuration configuration;


	public FreeMarkerConfigurer() {
		setDefaultEncoding("UTF-8");
	}


	/**
	 * Set a pre-configured Configuration to use for the FreeMarker web config,
	 * e.g. a shared one for web and email usage. If this is not set,
	 * FreeMarkerConfigurationFactory's properties (inherited by this class)
	 * have to be specified.
	 */
	/**
	 * 设置用于FreeMarker Web配置的预配置配置，例如用于网络和电子邮件共享的共享。 
	 * 如果未设置，则必须指定FreeMarkerConfigurationFactory的属性（由此类继承）。 
	 * 
	 */
	public void setConfiguration(Configuration configuration) {
		this.configuration = configuration;
	}


	/**
	 * Initialize FreeMarkerConfigurationFactory's Configuration
	 * if not overridden by a pre-configured FreeMarker Configuration.
	 * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.
	 * @see #createConfiguration
	 * @see #setConfiguration
	 */
	/**
	 * 如果未被预先配置的FreeMarker配置覆盖，则初始化FreeMarkerConfigurationFactory的配置。 
	 *  <p>设置用于加载Spring宏的ClassTemplateLoader。 
	 *  
	 * @see  #createConfiguration 
	 * @see  #setConfiguration
	 */
	@Override
	public void afterPropertiesSet() throws IOException, TemplateException {
		if (this.configuration == null) {
			this.configuration = createConfiguration();
		}
	}

	/**
	 * This implementation registers an additional ClassTemplateLoader
	 * for the Spring-provided macros, added to the end of the list.
	 */
	/**
	 * 此实现为Spring提供的宏注册了一个附加的ClassTemplateLoader，该宏添加到列表的末尾。 
	 * 
	 */
	@Override
	protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {
		templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class, ""));
	}


	/**
	 * Return the Configuration object wrapped by this bean.
	 */
	/**
	 * 返回此bean包装的Configuration对象。 
	 * 
	 */
	@Override
	public Configuration getConfiguration() {
		Assert.state(this.configuration != null, "No Configuration available");
		return this.configuration;
	}

}
