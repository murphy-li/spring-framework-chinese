/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.result.view;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;

import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceResolvable;
import org.springframework.context.NoSuchMessageException;
import org.springframework.context.i18n.LocaleContext;
import org.springframework.context.i18n.TimeZoneAwareLocaleContext;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.EscapedErrors;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.util.HtmlUtils;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * Context holder for request-specific state, like the {@link MessageSource} to
 * use, current locale, binding errors, etc. Provides easy access to localized
 * messages and Errors instances.
 *
 * <p>Suitable for exposition to views, and usage within FreeMarker templates
 * and tag libraries.
 *
 * <p>Can be instantiated manually or automatically exposed to views as a model
 * attribute via AbstractView's "requestContextAttribute" property.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 特定请求状态的上下文持有者，例如要使用的{@link  MessageSource}，当前语言环境，绑定错误等。 
 * 可轻松访问本地化消息和Errors实例。 
 *  <p>适用于展示视图以及在FreeMarker模板和标签库中的用法。 
 *  <p>可以通过AbstractView的"requestContextAttribute"属性手动实例化或作为模型属性自动公开给视图。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public class RequestContext {

	private final ServerWebExchange exchange;

	private final Map<String, Object> model;

	private final MessageSource messageSource;

	private Locale locale;

	private TimeZone timeZone;

	@Nullable
	private Boolean defaultHtmlEscape;

	@Nullable
	private Map<String, Errors> errorsMap;

	@Nullable
	private RequestDataValueProcessor dataValueProcessor;


	public RequestContext(ServerWebExchange exchange, Map<String, Object> model, MessageSource messageSource) {
		this(exchange, model, messageSource, null);
	}

	public RequestContext(ServerWebExchange exchange, Map<String, Object> model, MessageSource messageSource,
			@Nullable RequestDataValueProcessor dataValueProcessor) {

		Assert.notNull(exchange, "ServerWebExchange is required");
		Assert.notNull(model, "Model is required");
		Assert.notNull(messageSource, "MessageSource is required");
		this.exchange = exchange;
		this.model = model;
		this.messageSource = messageSource;

		LocaleContext localeContext = exchange.getLocaleContext();
		Locale locale = localeContext.getLocale();
		this.locale = (locale != null ? locale : Locale.getDefault());
		TimeZone timeZone = (localeContext instanceof TimeZoneAwareLocaleContext ?
				((TimeZoneAwareLocaleContext) localeContext).getTimeZone() : null);
		this.timeZone = (timeZone != null ? timeZone : TimeZone.getDefault());

		this.defaultHtmlEscape = null;  // TODO
		this.dataValueProcessor = dataValueProcessor;
	}


	protected final ServerWebExchange getExchange() {
		return this.exchange;
	}

	/**
	 * Return the MessageSource in use with this request.
	 */
	/**
	 * 返回与此请求一起使用的MessageSource。 
	 * 
	 */
	public MessageSource getMessageSource() {
		return this.messageSource;
	}

	/**
	 * Return the model Map that this RequestContext encapsulates, if any.
	 * @return the populated model Map, or {@code null} if none available
	 */
	/**
	 * 返回此RequestContext封装的模型Map（如果有）。 
	 *  
	 * @return 填充的模型Map，如果没有可用，则返回{@code  null}
	 */
	@Nullable
	public Map<String, Object> getModel() {
		return this.model;
	}

	/**
	 * Return the current Locale.
	 */
	/**
	 * 返回当前的语言环境。 
	 * 
	 */
	public final Locale getLocale() {
		return this.locale;
	}

	/**
	 * Return the current TimeZone.
	 */
	/**
	 * 返回当前的时区。 
	 * 
	 */
	public TimeZone getTimeZone() {
		return this.timeZone;
	}

	/**
	 * Change the current locale to the specified one.
	 */
	/**
	 * 将当前语言环境更改为指定的语言环境。 
	 * 
	 */
	public void changeLocale(Locale locale) {
		this.locale = locale;
	}

	/**
	 * Change the current locale to the specified locale and time zone context.
	 */
	/**
	 * 将当前语言环境更改为指定的语言环境和时区上下文。 
	 * 
	 */
	public void changeLocale(Locale locale, TimeZone timeZone) {
		this.locale = locale;
		this.timeZone = timeZone;
	}

	/**
	 * (De)activate default HTML escaping for messages and errors, for the scope
	 * of this RequestContext.
	 * <p>TODO: currently no application-wide setting ...
	 */
	/**
	 * 在此RequestContext的范围内，（取消）激活用于消息和错误的默认HTML转义。 
	 *  <p> TODO：当前没有应用程序范围的设置...
	 */
	public void setDefaultHtmlEscape(boolean defaultHtmlEscape) {
		this.defaultHtmlEscape = defaultHtmlEscape;
	}

	/**
	 * Is default HTML escaping active? Falls back to {@code false} in case of
	 * no explicit default given.
	 */
	/**
	 * 默认HTML转义是否有效？如果未给出明确的默认值，则退回到{@code  false}。 
	 * 
	 */
	public boolean isDefaultHtmlEscape() {
		return (this.defaultHtmlEscape != null && this.defaultHtmlEscape.booleanValue());
	}

	/**
	 * Return the default HTML escape setting, differentiating between no default
	 * specified and an explicit value.
	 * @return whether default HTML escaping is enabled (null = no explicit default)
	 */
	/**
	 * 返回默认的HTML转义设置，区分未指定的默认值和显式的值。 
	 *  
	 * @return 是否启用默认HTML转义（null =没有明确的默认值）
	 */
	@Nullable
	public Boolean getDefaultHtmlEscape() {
		return this.defaultHtmlEscape;
	}

	/**
	 * Return the {@link RequestDataValueProcessor} instance to apply to in form
	 * tag libraries and to redirect URLs.
	 */
	/**
	 * 返回{@link  RequestDataValueProcessor}实例，以应用于表单标签库并重定向URL。 
	 * 
	 */
	@Nullable
	public RequestDataValueProcessor getRequestDataValueProcessor() {
		return this.dataValueProcessor;
	}

	/**
	 * Return the context path of the current web application. This is
	 * useful for building links to other resources within the application.
	 * <p>Delegates to {@link ServerHttpRequest#getPath()}.
	 */
	/**
	 * 返回当前Web应用程序的上下文路径。 
	 * 这对于建立到应用程序内其他资源的链接很有用。 
	 *  <p>代表{@link  ServerHttpRequest＃getPath（）}。 
	 * 
	 */
	public String getContextPath() {
		return this.exchange.getRequest().getPath().contextPath().value();
	}

	/**
	 * Return a context-aware URl for the given relative URL.
	 * @param relativeUrl the relative URL part
	 * @return a URL that points back to the current web application with an
	 * absolute path also URL-encoded accordingly
	 */
	/**
	 * 返回给定相对URL的上下文感知UR1。 
	 *  
	 * @param  relativeUrl相对URL部分
	 * @return 指向当前Web应用程序的URL，其绝对路径也经过相应的URL编码
	 */
	public String getContextUrl(String relativeUrl) {
		String url = StringUtils.applyRelativePath(getContextPath() + "/", relativeUrl);
		return getExchange().transformUrl(url);
	}

	/**
	 * Return a context-aware URl for the given relative URL with placeholders --
	 * named keys with braces {@code {}}. For example, send in a relative URL
	 * {@code foo/{bar}?spam={spam}} and a parameter map {@code {bar=baz,spam=nuts}}
	 * and the result will be {@code [contextpath]/foo/baz?spam=nuts}.
	 * @param relativeUrl the relative URL part
	 * @param params a map of parameters to insert as placeholders in the url
	 * @return a URL that points back to the current web application with an
	 * absolute path also URL-encoded accordingly
	 */
	/**
	 * 对于给定的相对URL，使用占位符（带有大括号{@code  {}}的命名键）返回上下文感知的UR1。 
	 * 例如，发送相对URL {@code  foo / {bar}？spam = {spam}}和参数映射{@code  {bar = baz，spam = nuts}}，结果将为{ @code  [contextpath] / foo / baz？spam = nuts}。 
	 *  
	 * @param  relativeUrl相对URL部分
	 * @param 参数化参数映射，以在URL 
	 * @return 中作为占位符插入一个指向当前Web应用程序的URL，该URL带有绝对路径，并也进行了URL编码
	 */
	public String getContextUrl(String relativeUrl, Map<String, ?> params) {
		String url = StringUtils.applyRelativePath(getContextPath() + "/", relativeUrl);
		url = UriComponentsBuilder.fromUriString(url).buildAndExpand(params).encode().toUri().toASCIIString();
		return getExchange().transformUrl(url);
	}

	/**
	 * Return the request path of the request. This is useful as HTML form
	 * action target, also in combination with the original query string.
	 */
	/**
	 * 返回请求的请求路径。 
	 * 这可用作HTML表单操作目标，也可以与原始查询字符串结合使用。 
	 * 
	 */
	public String getRequestPath() {
		return this.exchange.getRequest().getURI().getPath();
	}

	/**
	 * Return the query string of the current request. This is useful for
	 * building an HTML form action target in combination with the original
	 * request path.
	 */
	/**
	 * 返回当前请求的查询字符串。 
	 * 这对于结合原始请求路径来构建HTML表单操作目标很有用。 
	 * 
	 */
	public String getQueryString() {
		return this.exchange.getRequest().getURI().getQuery();
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getMessage(String code, String defaultMessage) {
		return getMessage(code, null, defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getMessage(String code, @Nullable Object[] args, String defaultMessage) {
		return getMessage(code, args, defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param  args作为列表的消息参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 信息
	 */
	public String getMessage(String code, @Nullable List<?> args, String defaultMessage) {
		return getMessage(code, (args != null ? args.toArray() : null), defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 */
	/**
	 * 检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @param  htmlEscape如果消息应该用HTML转义
	 * @return 消息
	 */
	public String getMessage(String code, @Nullable Object[] args, String defaultMessage, boolean htmlEscape) {
		String msg = this.messageSource.getMessage(code, args, defaultMessage, this.locale);
		if (msg == null) {
			return "";
		}
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException（如果未找到）
	 */
	public String getMessage(String code) throws NoSuchMessageException {
		return getMessage(code, null, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有，则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(String code, @Nullable Object[] args) throws NoSuchMessageException {
		return getMessage(code, args, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param 将该消息的参数作为列表，如果没有则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException未找到
	 */
	public String getMessage(String code, @Nullable List<?> args) throws NoSuchMessageException {
		return getMessage(code, (args != null ? args.toArray() : null), isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  htmlEscape如果消息应使用HTML转义
	 * @return 消息<@如果找不到，则抛出> org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(String code, @Nullable Object[] args, boolean htmlEscape) throws NoSuchMessageException {
		String msg = this.messageSource.getMessage(code, args, this.locale);
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance), using the "defaultHtmlEscape" setting.
	 * @param resolvable the MessageSourceResolvable
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定的MessageSourceResolvable（例如ObjectError实例）。 
	 *  
	 * @param 可解决MessageSourceResolvable 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(MessageSourceResolvable resolvable) throws NoSuchMessageException {
		return getMessage(resolvable, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance).
	 * @param resolvable the MessageSourceResolvable
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定的MessageSourceResolvable（例如ObjectError实例）。 
	 *  
	 * @param 可解析的MessageSourceResolvable 
	 * @param  htmlEscape，如果应将消息转义为HTML转义
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(MessageSourceResolvable resolvable, boolean htmlEscape) throws NoSuchMessageException {
		String msg = this.messageSource.getMessage(resolvable, this.locale);
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the Errors instance for the given bind object, using the
	 * "defaultHtmlEscape" setting.
	 * @param name name of the bind object
	 * @return the Errors instance, or {@code null} if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定绑定对象的Errors实例。 
	 *  
	 * @param 名称绑定对象的名称
	 * @return  Errors实例，如果找不到，则为{@code  null}
	 */
	@Nullable
	public Errors getErrors(String name) {
		return getErrors(name, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the Errors instance for the given bind object.
	 * @param name name of the bind object
	 * @param htmlEscape create an Errors instance with automatic HTML escaping?
	 * @return the Errors instance, or {@code null} if not found
	 */
	/**
	 * 检索给定绑定对象的Errors实例。 
	 *  
	 * @param 名称绑定对象的名称
	 * @param  htmlEscape创建带有自动HTML转义的Errors实例？ 
	 * @return 错误实例，或{@code  null}（如果未找到）
	 */
	@Nullable
	public Errors getErrors(String name, boolean htmlEscape) {
		if (this.errorsMap == null) {
			this.errorsMap = new HashMap<>();
		}

		Errors errors = this.errorsMap.get(name);
		if (errors == null) {
			errors = getModelObject(BindingResult.MODEL_KEY_PREFIX + name);
			if (errors == null) {
				return null;
			}
		}

		if (errors instanceof BindException) {
			errors = ((BindException) errors).getBindingResult();
		}

		if (htmlEscape && !(errors instanceof EscapedErrors)) {
			errors = new EscapedErrors(errors);
		}
		else if (!htmlEscape && errors instanceof EscapedErrors) {
			errors = ((EscapedErrors) errors).getSource();
		}

		this.errorsMap.put(name, errors);
		return errors;
	}

	/**
	 * Retrieve the model object for the given model name, either from the model
	 * or from the request attributes.
	 * @param modelName the name of the model object
	 * @return the model object
	 */
	/**
	 * 从模型或从请求属性中检索给定模型名称的模型对象。 
	 *  
	 * @param  modelName模型对象的名称
	 * @return 模型对象
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	protected <T> T getModelObject(String modelName) {
		T modelObject = (T) this.model.get(modelName);
		if (modelObject == null) {
			modelObject = this.exchange.getAttribute(modelName);
		}
		return modelObject;
	}

	/**
	 * Create a BindStatus for the given bind object using the
	 * "defaultHtmlEscape" setting.
	 * @param path the bean and property path for which values and errors will
	 * be resolved (e.g. "person.age")
	 * @return the new BindStatus instance
	 * @throws IllegalStateException if no corresponding Errors object found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置为给定的绑定对象创建BindStatus。 
	 *  
	 * @param 路径将解决值和错误的Bean和属性路径（例如"person.age"）
	 * @return 新的BindStatus实例
	 * @throws  IllegalStateException（如果未找到相应的Errors对象）
	 */
	public BindStatus getBindStatus(String path) throws IllegalStateException {
		return new BindStatus(this, path, isDefaultHtmlEscape());
	}

	/**
	 * Create a BindStatus for the given bind object, using the
	 * "defaultHtmlEscape" setting.
	 * @param path the bean and property path for which values and errors will
	 * be resolved (e.g. "person.age")
	 * @param htmlEscape create a BindStatus with automatic HTML escaping?
	 * @return the new BindStatus instance
	 * @throws IllegalStateException if no corresponding Errors object found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置为给定的绑定对象创建BindStatus。 
	 *  
	 * @param  path将解决值和错误的bean和属性路径（例如"person.age"）
	 * @param  htmlEscape创建具有自动HTML转义的BindStatus吗？ 
	 * @return 新的BindStatus实例
	 * @throws 如果没有找到对应的Errors对象，则为IllegalStateException
	 */
	public BindStatus getBindStatus(String path, boolean htmlEscape) throws IllegalStateException {
		return new BindStatus(this, path, htmlEscape);
	}

}
