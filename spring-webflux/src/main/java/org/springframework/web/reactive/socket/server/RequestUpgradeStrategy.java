/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.socket.server;

import java.util.function.Supplier;

import reactor.core.publisher.Mono;

import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.web.reactive.socket.HandshakeInfo;
import org.springframework.web.reactive.socket.WebSocketHandler;
import org.springframework.web.server.ServerWebExchange;

/**
 * A strategy for upgrading an HTTP request to a WebSocket session depending
 * on the underlying network runtime.
 *
 * <p>Typically there is one such strategy for every {@link ServerHttpRequest}
 * and {@link ServerHttpResponse} type except in the case of Servlet containers
 * for which the standard Java WebSocket API JSR-356 does not define a way to
 * upgrade a request so a custom strategy is needed for every Servlet container.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 根据基础网络运行时将HTTP请求升级到WebSocket会话的策略。 
 *  <p>通常，对于每种{@link  ServerHttpRequest}和{@link  ServerHttpResponse}类型都有一种这样的策略，除了Servlet容器的情况外，标准Java WebSocket API JSR-356并未为其定义一种方法。 
 * 升级请求，以便每个Servlet容器都需要一个自定义策略。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface RequestUpgradeStrategy {

	/**
	 * Upgrade to a WebSocket session and handle it with the given handler.
	 * @param exchange the current exchange
	 * @param webSocketHandler handler for the WebSocket session
	 * @param subProtocol the selected sub-protocol got the handler
	 * @return completion {@code Mono<Void>} to indicate the outcome of the
	 * WebSocket session handling.
	 * @deprecated as of 5.1 in favor of
	 * {@link #upgrade(ServerWebExchange, WebSocketHandler, String, Supplier)}
	 */
	/**
	 * 升级到WebSocket会话并使用给定的处理程序进行处理。 
	 *  
	 * @param 将当前交换的
	 * @param  webSocketHandler处理程序交换为WebSocket会话
	 * @param  subProtocol选定的子协议获得处理程序
	 * @return 完成{@code  Mono <Void>}以指示结果WebSocket会话处理。 
	 *  @自5.1开始弃用，推荐使用{@link  #upgrade（ServerWebExchange，WebSocketHandler，String，Supplier）}
	 */
	@Deprecated
	default Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler webSocketHandler,
			@Nullable String subProtocol) {

		return Mono.error(new UnsupportedOperationException());
	}

	/**
	 * Upgrade to a WebSocket session and handle it with the given handler.
	 * @param exchange the current exchange
	 * @param webSocketHandler handler for the WebSocket session
	 * @param subProtocol the selected sub-protocol got the handler
	 * @param handshakeInfoFactory factory to create HandshakeInfo for the WebSocket session
	 * @return completion {@code Mono<Void>} to indicate the outcome of the
	 * WebSocket session handling.
	 * @since 5.1
	 */
	/**
	 * 升级到WebSocket会话并使用给定的处理程序进行处理。 
	 *  
	 * @param 交换当前交换的WebSocket会话的
	 * @param  webSocketHandler处理程序
	 * @param  subProtocol选定的子协议获取处理程序
	 * @param  handshakeInfoFactory工厂以为WebSocket会话创建HandshakeInfo 
	 * @return 完成{ @code  Mono <Void>}表示WebSocket会话处理的结果。 
	 *  @5.1起
	 */
	@SuppressWarnings("deprecation")
	default Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler webSocketHandler,
			@Nullable String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory) {

		return upgrade(exchange, webSocketHandler, subProtocol);
	}

}
