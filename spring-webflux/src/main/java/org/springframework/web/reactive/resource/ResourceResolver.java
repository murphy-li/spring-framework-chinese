/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.resource;

import java.util.List;

import reactor.core.publisher.Mono;

import org.springframework.core.io.Resource;
import org.springframework.http.server.RequestPath;
import org.springframework.lang.Nullable;
import org.springframework.web.server.ServerWebExchange;

/**
 * A strategy for resolving a request to a server-side resource.
 *
 * <p>Provides mechanisms for resolving an incoming request to an actual
 * {@link Resource} and for obtaining the
 * public URL path that clients should use when requesting the resource.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 */
/**
 * 解决对服务器端资源的请求的策略。 
 *  <p>提供了用于解决对实际{@link  Resource}的传入请求并获得客户端在请求资源时应使用的公共URL路径的机制。 
 *  @author  Rossen Stoyanchev @从5.0开始
 */
public interface ResourceResolver {

	/**
	 * Resolve the supplied request and request path to a {@link Resource} that
	 * exists under one of the given resource locations.
	 * @param exchange the current exchange
	 * @param requestPath the portion of the request path to use. This is
	 * expected to be the encoded path, i.e. {@link RequestPath#value()}.
	 * @param locations the locations to search in when looking up resources
	 * @param chain the chain of remaining resolvers to delegate to
	 * @return the resolved resource or an empty {@code Mono} if unresolved
	 */
	/**
	 * 将提供的请求和请求路径解析为给定资源位置之一下存在的{@link  Resource}。 
	 *  
	 * @param 交换当前交换
	 * @param  requestPath要使用的请求路径部分。 
	 * 这应该是编码路径，即{@link  RequestPath＃value（）}。 
	 *  
	 * @param 定位查找资源时要搜索的位置
	 * @param 链接其余解析器链，以委托给
	 * @return 已解析资源或空{{@code> Mono}（如果未解析）
	 */
	Mono<Resource> resolveResource(@Nullable ServerWebExchange exchange, String requestPath,
			List<? extends Resource> locations, ResourceResolverChain chain);

	/**
	 * Resolve the externally facing <em>public</em> URL path for clients to use
	 * to access the resource that is located at the given <em>internal</em>
	 * resource path.
	 * <p>This is useful when rendering URL links to clients.
	 * @param resourcePath the "internal" resource path to resolve a path for
	 * public use. This is expected to be the encoded path.
	 * @param locations the locations to search in when looking up resources
	 * @param chain the chain of resolvers to delegate to
	 * @return the resolved public URL path or an empty {@code Mono} if unresolved
	 */
	/**
	 * 解析面向外部的<em> public </ em> URL路径，供客户端用来访问位于给定的<em> internal </ em>资源路径中的资源。 
	 *  <p>当呈现指向客户端的URL链接时，这很有用。 
	 *  
	 * @param  resourcePath"内部"资源路径，用于解析供公共使用的路径。 
	 * 预期这是编码路径。 
	 *  
	 * @param 定位查找资源时要搜索的位置
	 * @param 链接解析程序链，以委托给
	 * @return 已解析的公共URL路径； 
	 * 如果未解析，则为空的{@code  Mono}
	 */
	Mono<String> resolveUrlPath(String resourcePath, List<? extends Resource> locations,
			ResourceResolverChain chain);

}
