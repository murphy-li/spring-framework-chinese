/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.function.server

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.reactive.awaitSingle
import org.reactivestreams.Publisher
import org.springframework.core.ParameterizedTypeReference
import org.springframework.http.MediaType
import reactor.core.publisher.Mono

/**
 * Extension for [ServerResponse.BodyBuilder.body] providing a `body(Publisher<T>)`
 * variant. This extension is not subject to type erasure and retains actual generic
 * type arguments.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ServerResponse.BodyBuilder.body]的扩展，提供`body（Publisher <T>）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> ServerResponse.BodyBuilder.body(publisher: Publisher<T>): Mono<ServerResponse> =
		body(publisher, object : ParameterizedTypeReference<T>() {})

/**
 * Extension for [ServerResponse.BodyBuilder.body] providing a `body<T>(Any)` variant
 * leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * @param producer the producer to write to the response. This must be a
 * [Publisher] or another producer adaptable to a
 * [Publisher] via [org.springframework.core.ReactiveAdapterRegistry]
 * @param T the type of the elements contained in the producer
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerResponse.BodyBuilder.body]的扩展提供了一个利用Kotlin修饰类型参数的`body <T>（Any）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  
 * @param 生产者生产者写入响应。 
 * 它必须是[Publisher]或通过[org.springframework.core.ReactiveAdapterRegistry]适应[Publisher]的其他生产者
 * @param  T包含在生产者中的元素类型@author  Sebastien Deleuze @since 5.2
 */
inline fun <reified T : Any> ServerResponse.BodyBuilder.body(producer: Any): Mono<ServerResponse> =
		body(producer, object : ParameterizedTypeReference<T>() {})

/**
 * Coroutines variant of [ServerResponse.BodyBuilder.bodyValue].
 *
 * Set the body of the response to the given {@code Object} and return it.
 * This convenience method combines [body] and
 * [org.springframework.web.reactive.function.BodyInserters.fromValue].
 * @param body the body of the response
 * @return the built response
 * @throws IllegalArgumentException if `body` is a [Publisher] or an
 * instance of a type supported by [org.springframework.core.ReactiveAdapterRegistry.getSharedInstance],
 */
/**
 * [ServerResponse.BodyBuilder.bodyValue]的协程变体。 
 * 将响应的主体设置为给定的{@code  Object}并返回它。 
 * 此便捷方法将[body]和[org.springframework.web.reactive.function.BodyInserters.fromValue]结合在一起。 
 *  
 * @param 正文响应的正文
 * @return 构建的响应
 * @throws  IllegalArgumentException如果`body`是[Publisher]或[org.springframework.core.ReactiveAdapterRegistry.getSharedInstance]支持的类型的实例，
 */
suspend fun ServerResponse.BodyBuilder.bodyValueAndAwait(body: Any): ServerResponse =
		bodyValue(body).awaitSingle()

/**
 * Coroutines variant of [ServerResponse.BodyBuilder.body] with [Any] and
 * [ParameterizedTypeReference] parameters providing a `bodyAndAwait(Flow<T>)` variant.
 * This extension is not subject to type erasure and retains actual generic type arguments.
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * 具有[Any]和[ParameterizedTypeReference]参数的[ServerResponse.BodyBuilder.body]协程变体，提供了一个`bodyAndAwait（Flow <T>）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend inline fun <reified T : Any> ServerResponse.BodyBuilder.bodyAndAwait(flow: Flow<T>): ServerResponse =
		body(flow, object : ParameterizedTypeReference<T>() {}).awaitSingle()

/**
 * Extension for [ServerResponse.BodyBuilder.body] providing a
 * `bodyToServerSentEvents(Publisher<T>)` variant. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ServerResponse.BodyBuilder.body]的扩展，提供`bodyToServerSentEvents（Publisher <T>）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
@Deprecated("Use 'sse().body(publisher)' instead.", replaceWith = ReplaceWith("sse().body(publisher)"))
inline fun <reified T : Any> ServerResponse.BodyBuilder.bodyToServerSentEvents(publisher: Publisher<T>): Mono<ServerResponse> =
		contentType(MediaType.TEXT_EVENT_STREAM).body(publisher, object : ParameterizedTypeReference<T>() {})

/**
 * Shortcut for setting [MediaType.APPLICATION_JSON] `Content-Type` header.
 * @author Sebastien Deleuze
 * @since 5.1
 */
/**
 * 设置[MediaType.APPLICATION_JSON]`Content-Type`标头的快捷方式。 
 *  @author 塞巴斯蒂安·德勒兹@5.1起
 */
fun ServerResponse.BodyBuilder.json() = contentType(MediaType.APPLICATION_JSON)

/**
 * Shortcut for setting [MediaType.APPLICATION_XML] `Content-Type` header.
 * @author Sebastien Deleuze
 * @since 5.1
 */
/**
 * 设置[MediaType.APPLICATION_XML]`Content-Type`标头的快捷方式。 
 *  @author 塞巴斯蒂安·德勒兹@5.1起
 */
fun ServerResponse.BodyBuilder.xml() = contentType(MediaType.APPLICATION_XML)

/**
 * Shortcut for setting [MediaType.TEXT_HTML] `Content-Type` header.
 * @author Sebastien Deleuze
 * @since 5.1
 */
/**
 * 设置[MediaType.TEXT_HTML]`Content-Type`标头的快捷方式。 
 *  @author 塞巴斯蒂安·德勒兹@5.1起
 */
fun ServerResponse.BodyBuilder.html() = contentType(MediaType.TEXT_HTML)

/**
 * Shortcut for setting [MediaType.TEXT_EVENT_STREAM] `Content-Type` header.
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * 设置[MediaType.TEXT_EVENT_STREAM]`Content-Type`标头的快捷方式。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
fun ServerResponse.BodyBuilder.sse() = contentType(MediaType.TEXT_EVENT_STREAM)

/**
 * Coroutines variant of [ServerResponse.BodyBuilder.render].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerResponse.BodyBuilder.render]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerResponse.BodyBuilder.renderAndAwait(name: String, vararg modelAttributes: String): ServerResponse =
		render(name, *modelAttributes).awaitSingle()

/**
 * Coroutines variant of [ServerResponse.BodyBuilder.render].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerResponse.BodyBuilder.render]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerResponse.BodyBuilder.renderAndAwait(name: String, model: Map<String, *>): ServerResponse =
		render(name, model).awaitSingle()

/**
 * Coroutines variant of [ServerResponse.HeadersBuilder.build].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerResponse.HeadersBuilder.build]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerResponse.HeadersBuilder<out ServerResponse.HeadersBuilder<*>>.buildAndAwait(): ServerResponse =
		build().awaitSingle()

