/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.reactive.function.server

import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.reactive.awaitFirstOrNull
import kotlinx.coroutines.reactive.awaitSingle
import kotlinx.coroutines.reactive.asFlow
import org.springframework.core.ParameterizedTypeReference
import org.springframework.http.MediaType
import org.springframework.http.codec.multipart.Part
import org.springframework.util.CollectionUtils
import org.springframework.util.MultiValueMap
import org.springframework.web.server.WebSession
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import java.net.InetSocketAddress
import java.security.Principal

/**
 * Extension for [ServerRequest.bodyToMono] providing a `bodyToMono<Foo>()` variant
 * leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * 
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ServerRequest.bodyToMono]的扩展提供了一个利用Kotlin修饰类型参数的`bodyToMono <Foo>（）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> ServerRequest.bodyToMono(): Mono<T> =
		bodyToMono(object : ParameterizedTypeReference<T>() {})

/**
 * Extension for [ServerRequest.bodyToFlux] providing a `bodyToFlux<Foo>()` variant
 * leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [ServerRequest.bodyToFlux]的扩展提供了一个利用Kotlin修饰类型参数的`bodyToFlux <Foo>（）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> ServerRequest.bodyToFlux(): Flux<T> =
		bodyToFlux(object : ParameterizedTypeReference<T>() {})

/**
 * Coroutines [kotlinx.coroutines.flow.Flow] based variant of [ServerRequest.bodyToFlux].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * 基于协程[kotlinx.coroutines.flow.Flow]的[ServerRequest.bodyToFlux]变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
inline fun <reified T : Any> ServerRequest.bodyToFlow(): Flow<T> =
		bodyToFlux<T>().asFlow()

/**
 * Non-nullable Coroutines variant of [ServerRequest.bodyToMono].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.bodyToMono]的非空协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend inline fun <reified T : Any> ServerRequest.awaitBody(): T =
		bodyToMono<T>().awaitSingle()

/**
 * Nullable Coroutines variant of [ServerRequest.bodyToMono].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.bodyToMono]的Nullable Coroutines变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend inline fun <reified T : Any> ServerRequest.awaitBodyOrNull(): T? =
		bodyToMono<T>().awaitFirstOrNull()

/**
 * Coroutines variant of [ServerRequest.formData].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.formData]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerRequest.awaitFormData(): MultiValueMap<String, String> =
		formData().awaitSingle()

/**
 * Coroutines variant of [ServerRequest.multipartData].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.multipartData]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerRequest.awaitMultipartData(): MultiValueMap<String, Part> =
		multipartData().awaitSingle()

/**
 * Coroutines variant of [ServerRequest.principal].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.principal]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerRequest.awaitPrincipal(): Principal? =
		principal().awaitFirstOrNull()

/**
 * Coroutines variant of [ServerRequest.session].
 *
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [ServerRequest.session]的协程变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.2起
 */
suspend fun ServerRequest.awaitSession(): WebSession =
		session().awaitSingle()

/**
 * Nullable variant of [ServerRequest.remoteAddress]
 *
 * @author Sebastien Deleuze
 * @since 5.2.2
 */
/**
 * [ServerRequest.remoteAddress]的可空变体@author  Sebastien Deleuze @since 5.2.2
 */
fun ServerRequest.remoteAddressOrNull(): InetSocketAddress? = remoteAddress().orElse(null)

/**
 * Nullable variant of [ServerRequest.attribute]
 *
 * @author Sebastien Deleuze
 * @since 5.2.2
 */
/**
 * [ServerRequest.attribute] @author  Sebastien Deleuze @5.2.2。 
 * 开始的可空变体
 */
fun ServerRequest.attributeOrNull(name: String): Any? = attributes()[name]

/**
 * Nullable variant of [ServerRequest.queryParam]
 *
 * @author Sebastien Deleuze
 * @since 5.2.2
 */
/**
 * [ServerRequest.queryParam]的可空变体@author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）从5.2.2开始
 */
fun ServerRequest.queryParamOrNull(name: String): String? {
	val queryParamValues = queryParams()[name]
	return if (CollectionUtils.isEmpty(queryParamValues)) {
		null
	} else {
		var value: String? = queryParamValues!![0]
		if (value == null) {
			value = ""
		}
		value
	}
}

/**
 * Nullable variant of [ServerRequest.Headers.contentLength]
 *
 * @author Sebastien Deleuze
 * @since 5.2.2
 */
/**
 * [ServerRequest.Headers.contentLength]的可空变体@author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）从5.2.2开始
 */
fun ServerRequest.Headers.contentLengthOrNull(): Long? =
		contentLength().run { if (isPresent) asLong else null }

/**
 * Nullable variant of [ServerRequest.Headers.contentType]
 *
 * @author Sebastien Deleuze
 * @since 5.2.2
 */
/**
 * [ServerRequest.Headers.contentType]的可空变体@author  Sebastien Deleuze @since 5.2.2
 */
fun ServerRequest.Headers.contentTypeOrNull(): MediaType? =
		contentType().orElse(null)
