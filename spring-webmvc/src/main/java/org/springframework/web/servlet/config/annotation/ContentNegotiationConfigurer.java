/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.config.annotation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;

import org.springframework.http.MediaType;
import org.springframework.http.MediaTypeFactory;
import org.springframework.lang.Nullable;
import org.springframework.web.accept.ContentNegotiationManager;
import org.springframework.web.accept.ContentNegotiationManagerFactoryBean;
import org.springframework.web.accept.ContentNegotiationStrategy;
import org.springframework.web.accept.FixedContentNegotiationStrategy;
import org.springframework.web.accept.HeaderContentNegotiationStrategy;
import org.springframework.web.accept.ParameterContentNegotiationStrategy;

/**
 * Creates a {@code ContentNegotiationManager} and configures it with
 * one or more {@link ContentNegotiationStrategy} instances.
 *
 * <p>This factory offers properties that in turn result in configuring the
 * underlying strategies. The table below shows the property names, their
 * default settings, as well as the strategies that they help to configure:
 *
 * <table>
 * <tr>
 * <th>Property Setter</th>
 * <th>Default Value</th>
 * <th>Underlying Strategy</th>
 * <th>Enabled Or Not</th>
 * </tr>
 * <tr>
 * <td>{@link #favorPathExtension}</td>
 * <td>true</td>
 * <td>{@link org.springframework.web.accept.PathExtensionContentNegotiationStrategy
 * PathExtensionContentNegotiationStrategy}</td>
 * <td>Enabled</td>
 * </tr>
 * <tr>
 * <td>{@link #favorParameter}</td>
 * <td>false</td>
 * <td>{@link ParameterContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * <tr>
 * <td>{@link #ignoreAcceptHeader}</td>
 * <td>false</td>
 * <td>{@link HeaderContentNegotiationStrategy}</td>
 * <td>Enabled</td>
 * </tr>
 * <tr>
 * <td>{@link #defaultContentType}</td>
 * <td>null</td>
 * <td>{@link FixedContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * <tr>
 * <td>{@link #defaultContentTypeStrategy}</td>
 * <td>null</td>
 * <td>{@link ContentNegotiationStrategy}</td>
 * <td>Off</td>
 * </tr>
 * </table>
 *
 * <p>As of 5.0 you can set the exact strategies to use via
 * {@link #strategies(List)}.
 *
 * <p><strong>Note:</strong> if you must use URL-based content type resolution,
 * the use of a query parameter is simpler and preferable to the use of a path
 * extension since the latter can cause issues with URI variables, path
 * parameters, and URI decoding. Consider setting {@link #favorPathExtension}
 * to {@literal false} or otherwise set the strategies to use explicitly via
 * {@link #strategies(List)}.
 *
 * @author Rossen Stoyanchev
 * @since 3.2
 */
/**
 * 创建一个{@code  ContentNegotiationManager}并使用一个或多个{@link  ContentNegotiationStrategy}实例对其进行配置。 
 *  <p>此工厂提供的属性反过来会导致配置基础策略。 
 * 下表显示了属性名称，它们的默认设置以及有助于配置的策略：<table> <tr> <th>属性设置器</ th> <th>默认值</ th> <th>底层策略</ th> <th>已启用</ th> </ tr> <tr> <td> {<@link> #favorPathExtension} </ td> <td> true </ td> <td> { @link  org.springframework.web.accept.PathExtensionContentNegotiationStrategy} PathttensionContentNegotiationStrategy} </ td> <td>已启用</ td> </ tr> <tr> <td> {<@link> #favorParameter} </ td> < td> false </ td> <td> {<@link> ParameterContentNegotiationStrategy} </ td> <td>关闭</ td> </ tr> <tr> <td> {<@link> #ignoreAcceptHeader} </ td > <td> false </ td> <td> {<@link> HeaderContentNegotiationStrategy} </ td> <td>已启用</ td> </ tr> <tr> <td> {<@link> #defaultContentType} < / td> <td>空</ td> <td> {<@link> FixedContentNegotiationStrategy} </ td> <td>关闭</ td> </ tr> <tr> <td> {<@link> #defaultContentTypeStrategy } </ td> <td>空</ td> <td> {<@link> ContentNegotiationStrategy} </ td> <td>关闭</ td> </ tr> </ table> <p>截至5.0您可以通过{@link  #strategies（List）}设置要使用的确切策略。 
 *  <p> <strong>注意</ strong>：如果您必须使用基于URL的内容类型解析，则使用查询参数更简单，并且比使用路径扩展更可取，因为路径扩展会导致URI变量出现问题，路径参数和URI解码。 
 * 考虑将{@link  #favorPathExtension}设置为{@literal false}，否则可以通过{@link  #strategies（List）}设置要显式使用的策略。 
 *  @author  Rossen Stoyanchev @从3.2开始
 */
public class ContentNegotiationConfigurer {

	private final ContentNegotiationManagerFactoryBean factory = new ContentNegotiationManagerFactoryBean();

	private final Map<String, MediaType> mediaTypes = new HashMap<>();


	/**
	 * Class constructor with {@link javax.servlet.ServletContext}.
	 */
	/**
	 * 具有{@link  javax.servlet.ServletContext}的类构造函数。 
	 * 
	 */
	public ContentNegotiationConfigurer(@Nullable ServletContext servletContext) {
		if (servletContext != null) {
			this.factory.setServletContext(servletContext);
		}
	}


	/**
	 * Set the exact list of strategies to use.
	 * <p><strong>Note:</strong> use of this method is mutually exclusive with
	 * use of all other setters in this class which customize a default, fixed
	 * set of strategies. See class level doc for more details.
	 * @param strategies the strategies to use
	 * @since 5.0
	 */
	/**
	 * 设置要使用的策略的确切列表。 
	 *  <p> <strong>注意</ strong>：此方法的使用与该类中的所有其他设置器（定义默认的固定策略集）互斥。 
	 * 有关更多详细信息，请参见类级文档。 
	 *  
	 * @param 策略自@5.0起使用策略
	 */
	public void strategies(@Nullable List<ContentNegotiationStrategy> strategies) {
		this.factory.setStrategies(strategies);
	}

	/**
	 * Whether the path extension in the URL path should be used to determine
	 * the requested media type.
	 * <p>By default this is set to {@code true} in which case a request
	 * for {@code /hotels.pdf} will be interpreted as a request for
	 * {@code "application/pdf"} regardless of the 'Accept' header.
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link ContentNegotiationManagerFactoryBean} on the deprecation of path
	 * extension config options.
	 */
	/**
	 * URL路径中的路径扩展是否应用于确定请求的媒体类型。 
	 *  <p>默认情况下，此设置为{@code  true}，在这种情况下，对{@code  /hotels.pdf}的请求将被解释为对{@code "application / pdf"}的请求无论"Accept"标头如何。 
	 * 从5.2.4开始不推荐使用。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  ContentNegotiationManagerFactoryBean}中的类级别注释。 
	 * 
	 */
	@Deprecated
	public ContentNegotiationConfigurer favorPathExtension(boolean favorPathExtension) {
		this.factory.setFavorPathExtension(favorPathExtension);
		return this;
	}

	/**
	 * Add a mapping from a key, extracted from a path extension or a query
	 * parameter, to a MediaType. This is required in order for the parameter
	 * strategy to work. Any extensions explicitly registered here are also
	 * whitelisted for the purpose of Reflected File Download attack detection
	 * (see Spring Framework reference documentation for more details on RFD
	 * attack protection).
	 * <p>The path extension strategy will also try to use
	 * {@link ServletContext#getMimeType} and {@link MediaTypeFactory} to resolve path
	 * extensions. To change this behavior see the {@link #useRegisteredExtensionsOnly} property.
	 * @param extension the key to look up
	 * @param mediaType the media type
	 * @see #mediaTypes(Map)
	 * @see #replaceMediaTypes(Map)
	 */
	/**
	 * 将从路径扩展或查询参数中提取的键的映射添加到MediaType。 
	 * 为了使参数策略起作用，这是必需的。 
	 * 出于反射文件下载攻击检测的目的，此处明确注册的所有扩展也都列入了白名单（有关RFD攻击保护的更多详细信息，请参见Spring Framework参考文档）。 
	 *  <p>路径扩展策略还将尝试使用{@link  ServletContext＃getMimeType}和{@link  MediaTypeFactory}来解析路径扩展。 
	 * 若要更改此行为，请参见{@link  #useRegisteredExtensionsOnly}属性。 
	 *  
	 * @param 扩展查找键的键
	 * @param  mediaType媒体类型
	 * @see  #mediaTypes（Map）
	 * @see  #replaceMediaTypes（Map）
	 */
	public ContentNegotiationConfigurer mediaType(String extension, MediaType mediaType) {
		this.mediaTypes.put(extension, mediaType);
		return this;
	}

	/**
	 * An alternative to {@link #mediaType}.
	 * @see #mediaType(String, MediaType)
	 * @see #replaceMediaTypes(Map)
	 */
	/**
	 * {@link  #mediaType}的替代方法。 
	 *  
	 * @see  #mediaType（String，MediaType）
	 * @see  #replaceMediaTypes（Map）
	 */
	public ContentNegotiationConfigurer mediaTypes(@Nullable Map<String, MediaType> mediaTypes) {
		if (mediaTypes != null) {
			this.mediaTypes.putAll(mediaTypes);
		}
		return this;
	}

	/**
	 * Similar to {@link #mediaType} but for replacing existing mappings.
	 * @see #mediaType(String, MediaType)
	 * @see #mediaTypes(Map)
	 */
	/**
	 * 与{@link  #mediaType}相似，但用于替换现有映射。 
	 *  
	 * @see  #mediaType（String，MediaType）
	 * @see  #mediaTypes（地图）
	 */
	public ContentNegotiationConfigurer replaceMediaTypes(Map<String, MediaType> mediaTypes) {
		this.mediaTypes.clear();
		mediaTypes(mediaTypes);
		return this;
	}

	/**
	 * Whether to ignore requests with path extension that cannot be resolved
	 * to any media type. Setting this to {@code false} will result in an
	 * {@code HttpMediaTypeNotAcceptableException} if there is no match.
	 * <p>By default this is set to {@code true}.
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link ContentNegotiationManagerFactoryBean} on the deprecation of path
	 * extension config options.
	 */
	/**
	 * 是否忽略无法解析为任何媒体类型的具有路径扩展名的请求。 
	 * 如果不匹配，则将其设置为{@code  false}将导致{@code  HttpMediaTypeNotAcceptableException}。 
	 *  <p>默认情况下，此设置为{@code  true}。 
	 * 从5.2.4开始不推荐使用。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  ContentNegotiationManagerFactoryBean}中的类级别注释。 
	 * 
	 */
	@Deprecated
	public ContentNegotiationConfigurer ignoreUnknownPathExtensions(boolean ignore) {
		this.factory.setIgnoreUnknownPathExtensions(ignore);
		return this;
	}

	/**
	 * When {@link #favorPathExtension} is set, this property determines whether
	 * to allow use of JAF (Java Activation Framework) to resolve a path
	 * extension to a specific MediaType.
	 * @deprecated as of 5.0, in favor of {@link #useRegisteredExtensionsOnly(boolean)}
	 * which has reverse behavior
	 */
	/**
	 * 设置{@link  #favorPathExtension}时，此属性确定是否允许使用JAF（Java激活框架）将路径扩展解析为特定的MediaType。 
	 *  @自5.0弃用，推荐使用{@link  #useRegisteredExtensionsOnly（boolean）}，它具有相反的行为
	 */
	@Deprecated
	public ContentNegotiationConfigurer useJaf(boolean useJaf) {
		return this.useRegisteredExtensionsOnly(!useJaf);
	}

	/**
	 * When {@link #favorPathExtension favorPathExtension} is set, this
	 * property determines whether to use only registered {@code MediaType} mappings
	 * to resolve a path extension to a specific MediaType.
	 * <p>By default this is not set in which case
	 * {@code PathExtensionContentNegotiationStrategy} will use defaults if available.
	 */
	/**
	 * 设置{@link  #favorPathExtensionfatentPathExtension}时，此属性确定是否仅使用注册的{@code  MediaType}映射将路径扩展解析为特定的MediaType。 
	 *  <p>默认情况下未设置默认值，在这种情况下，{<@code> PathExtensionContentNegotiationStrategy}将使用默认值（如果有）。 
	 * 
	 */
	public ContentNegotiationConfigurer useRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {
		this.factory.setUseRegisteredExtensionsOnly(useRegisteredExtensionsOnly);
		return this;
	}

	/**
	 * Whether a request parameter ("format" by default) should be used to
	 * determine the requested media type. For this option to work you must
	 * register {@link #mediaType(String, MediaType) media type mappings}.
	 * <p>By default this is set to {@code false}.
	 * @see #parameterName(String)
	 */
	/**
	 * 是否应使用请求参数（默认为"格式"）来确定请求的媒体类型。 
	 * 为了使此选项起作用，您必须注册{@link  #mediaType（String，MediaType）媒体类型映射}。 
	 *  <p>默认情况下，此设置为{@code  false}。 
	 *  
	 * @see  #parameterName（String）
	 */
	public ContentNegotiationConfigurer favorParameter(boolean favorParameter) {
		this.factory.setFavorParameter(favorParameter);
		return this;
	}

	/**
	 * Set the query parameter name to use when {@link #favorParameter} is on.
	 * <p>The default parameter name is {@code "format"}.
	 */
	/**
	 * 设置在打开{@link  #favorParameter}时要使用的查询参数名称。 
	 *  <p>默认参数名称为{@code "format"}。 
	 * 
	 */
	public ContentNegotiationConfigurer parameterName(String parameterName) {
		this.factory.setParameterName(parameterName);
		return this;
	}

	/**
	 * Whether to disable checking the 'Accept' request header.
	 * <p>By default this value is set to {@code false}.
	 */
	/**
	 * 是否禁用检查"接受"请求标头。 
	 *  <p>默认情况下，此值设置为{@code  false}。 
	 * 
	 */
	public ContentNegotiationConfigurer ignoreAcceptHeader(boolean ignoreAcceptHeader) {
		this.factory.setIgnoreAcceptHeader(ignoreAcceptHeader);
		return this;
	}

	/**
	 * Set the default content type(s) to use when no content type is requested
	 * in order of priority.
	 * <p>If destinations are present that do not support any of the given media
	 * types, consider appending {@link MediaType#ALL} at the end.
	 * <p>By default this is not set.
	 * @see #defaultContentTypeStrategy
	 */
	/**
	 * 设置默认内容类型，以便在不按优先级请求任何内容类型时使用。 
	 *  <p>如果存在不支持任何给定媒体类型的目标，请考虑在末尾附加{@link  MediaType＃ALL}。 
	 *  <p>默认情况下未设置。 
	 *  
	 * @see  #defaultContentTypeStrategy
	 */
	public ContentNegotiationConfigurer defaultContentType(MediaType... defaultContentTypes) {
		this.factory.setDefaultContentTypes(Arrays.asList(defaultContentTypes));
		return this;
	}

	/**
	 * Set a custom {@link ContentNegotiationStrategy} to use to determine
	 * the content type to use when no content type is requested.
	 * <p>By default this is not set.
	 * @since 4.1.2
	 * @see #defaultContentType
	 */
	/**
	 * 设置自定义{@link  ContentNegotiationStrategy}，以用于确定在不请求任何内容类型时要使用的内容类型。 
	 *  <p>默认情况下未设置。 
	 *  @since 4.1.2 
	 * @see  #defaultContentType
	 */
	public ContentNegotiationConfigurer defaultContentTypeStrategy(ContentNegotiationStrategy defaultStrategy) {
		this.factory.setDefaultContentTypeStrategy(defaultStrategy);
		return this;
	}


	/**
	 * Build a {@link ContentNegotiationManager} based on this configurer's settings.
	 * @since 4.3.12
	 * @see ContentNegotiationManagerFactoryBean#getObject()
	 */
	/**
	 * 根据此配置程序的设置构建一个{@link  ContentNegotiationManager}。 
	 *  @始于4.3.12 
	 * @see  ContentNegotiationManagerFactoryBean＃getObject（）
	 */
	protected ContentNegotiationManager buildContentNegotiationManager() {
		this.factory.addMediaTypes(this.mediaTypes);
		return this.factory.build();
	}

}
