/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.mvc;

import javax.servlet.http.HttpServletRequest;

/**
 * Supports last-modified HTTP requests to facilitate content caching.
 * Same contract as for the Servlet API's {@code getLastModified} method.
 *
 * <p>Delegated to by a {@link org.springframework.web.servlet.HandlerAdapter#getLastModified}
 * implementation. By default, any Controller or HttpRequestHandler within Spring's
 * default framework can implement this interface to enable last-modified checking.
 *
 * <p><b>Note:</b> Alternative handler implementation approaches have different
 * last-modified handling styles. For example, Spring 2.5's annotated controller
 * approach (using {@code @RequestMapping}) provides last-modified support
 * through the {@link org.springframework.web.context.request.WebRequest#checkNotModified}
 * method, allowing for last-modified checking within the main handler method.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see javax.servlet.http.HttpServlet#getLastModified
 * @see Controller
 * @see SimpleControllerHandlerAdapter
 * @see org.springframework.web.HttpRequestHandler
 * @see HttpRequestHandlerAdapter
 */
/**
 * 支持最后修改的HTTP请求，以促进内容缓存。 
 * 与Servlet API的{@code  getLastModified}方法具有相同的约定。 
 *  <p>由{@link  org.springframework.web.servlet.HandlerAdapter＃getLastModified}实现委托。 
 * 默认情况下，Spring的默认框架内的任何Controller或HttpRequestHandler都可以实现此接口以启用最后修改的检查。 
 *  <p> <b>注意：</ b>替代处理程序实现方法具有不同的上次修改处理风格。 
 * 例如，Spring 2.5的带注释的控制器方法（使用{@code  @RequestMapping}）通过{@link  org.springframework.web.context.request.WebRequest＃checkNotModified}方法提供了最后修改的支持，用于主处理程序方法中的最后修改检查。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  javax.servlet.http.HttpServlet＃getLastModified 
 * @see 控制器
 * @see  SimpleControllerHandlerAdapter 
 * @see  org.springframework.web.HttpRequestHandler 
 * @see  HttpRequestHandlerAdapter
 */
public interface LastModified {

	/**
	 * Same contract as for HttpServlet's {@code getLastModified} method.
	 * Invoked <b>before</b> request processing.
	 * <p>The return value will be sent to the HTTP client as Last-Modified header,
	 * and compared with If-Modified-Since headers that the client sends back.
	 * The content will only get regenerated if there has been a modification.
	 * @param request current HTTP request
	 * @return the time the underlying resource was last modified, or -1
	 * meaning that the content must always be regenerated
	 * @see org.springframework.web.servlet.HandlerAdapter#getLastModified
	 * @see javax.servlet.http.HttpServlet#getLastModified
	 */
	/**
	 * 与HttpServlet的{@code  getLastModified}方法具有相同的约定。 
	 * 在请求处理之前调用<b> </ b>。 
	 *  <p>返回值将作为Last-Modified标头发送到HTTP客户端，并与客户端发回的If-Modified-Since标头进行比较。 
	 * 只有进行了修改，内容才会重新生成。 
	 *  
	 * @param 请求当前HTTP请求
	 * @return 上次修改基础资源的时间，或-1表示必须始终重新生成内容
	 * @see  org.springframework.web.servlet.HandlerAdapter＃getLastModified <
	 * @see > javax.servlet.http.HttpServlet＃getLastModified
	 */
	long getLastModified(HttpServletRequest request);

}
