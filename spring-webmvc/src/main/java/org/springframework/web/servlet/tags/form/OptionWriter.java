/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.tags.form;

import java.beans.PropertyEditor;
import java.util.Collection;
import java.util.Map;

import javax.servlet.jsp.JspException;

import org.springframework.beans.BeanWrapper;
import org.springframework.beans.PropertyAccessorFactory;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.web.servlet.support.BindStatus;

/**
 * Provides supporting functionality to render a list of '{@code option}'
 * tags based on some source object. This object can be either an array, a
 * {@link Collection}, or a {@link Map}.
 * <h3>Using an array or a {@link Collection}:</h3>
 * <p>
 * If you supply an array or {@link Collection} source object to render the
 * inner '{@code option}' tags, you may optionally specify the name of
 * the property on the objects which corresponds to the <em>value</em> of the
 * rendered '{@code option}' (i.e., the {@code valueProperty})
 * and the name of the property that corresponds to the <em>label</em> (i.e.,
 * the {@code labelProperty}). These properties are then used when
 * rendering each element of the array/{@link Collection} as an '{@code option}'.
 * If either property name is omitted, the value of {@link Object#toString()} of
 * the corresponding array/{@link Collection} element is used instead.  However,
 * if the item is an enum, {@link Enum#name()} is used as the default value.
 * </p>
 * <h3>Using a {@link Map}:</h3>
 * <p>
 * You can alternatively choose to render '{@code option}' tags by
 * supplying a {@link Map} as the source object.
 * </p>
 * <p>
 * If you <strong>omit</strong> property names for the <em>value</em> and
 * <em>label</em>:
 * </p>
 * <ul>
 * <li>the {@code key} of each {@link Map} entry will correspond to the
 * <em>value</em> of the rendered '{@code option}', and</li>
 * <li>the {@code value} of each {@link Map} entry will correspond to
 * the <em>label</em> of the rendered '{@code option}'.</li>
 * </ul>
 * <p>
 * If you <strong>supply</strong> property names for the <em>value</em> and
 * <em>label</em>:
 * </p>
 * <ul>
 * <li>the <em>value</em> of the rendered '{@code option}' will be
 * retrieved from the {@code valueProperty} on the object
 * corresponding to the {@code key} of each {@link Map} entry, and</li>
 * <li>the <em>label</em> of the rendered '{@code option}' will be
 * retrieved from the {@code labelProperty} on the object
 * corresponding to the {@code value} of each {@link Map} entry.
 * </ul>
 * <h3>When using either of these approaches:</h3>
 * <ul>
 * <li>Property names for the <em>value</em> and <em>label</em> are
 * specified as arguments to the
 * {@link #OptionWriter(Object, BindStatus, String, String, boolean) constructor}.</li>
 * <li>An '{@code option}' is marked as 'selected' if its key
 * {@link #isOptionSelected matches} the value that is bound to the tag instance.</li>
 * </ul>
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Scott Andrews
 * @since 2.0
 */
/**
 * 提供支持功能，以基于某些源对象呈现"{@code 选项}"标签的列表。 
 * 该对象可以是数组，{<@link>集合}或{@link 映射}。 
 *  <h3>使用数组或{@link 集合}：</ h3> <p>如果提供数组或{@link  Collection}源对象以呈现内部的'{@code 选项} '标签，您可以选择在对象上指定与呈现的'{@code 选项}'的<em> value </ em>相对应的属性名称（即{@code  valueProperty} ）以及与<em> label </ em>相对应的属性名称（即{@code  labelProperty}）。 
 * 然后，在将数组/ {<@link>集合}的每个元素呈现为"{@code 选项}"时使用这些属性。 
 * 如果省略任何一个属性名，则使用相应数组/ {<@link> Collection}元素的{@link  Object＃toString（）}的值代替。 
 * 但是，如果该项是枚举，则将{@link  Enum＃name（）}用作默认值。 
 *  </ p> <h3>使用{@link 地图}：</ h3> <p>您也可以通过提供{@link 地图}选择呈现'{@code 选项}'标签。 
 * 作为源对象。 
 *  </ p> <p>如果您<strong>省略</ strong> <em>值</ em>和<em>标签</ em>的属性名称：</ p> <ul> <li>每个{@link  Map}条目的{@code 键}将对应于呈现的'{@code 选项}'的<em>值</ em>，并且</ li> <li>每个{@link 映射}条目的{@code 值}将与呈现的'{@code 选项}'的<em>标签</ em>相对应。 
 * </ li> </ ul > <p>如果为<em>值</ em>和<em> label </ em> <strong>供应</ strong>属性名称：</ p> <ul> <li> <em>呈现的"{@code 选项}"的值</ em>将从对应于每个{@link 映射的{@code 键}的对象的{@code  valueProperty}中检索}条目，并且</ li> <li>呈现的"{@code 选项}"的<em>标签</ em>将从与该对象对应的对象上的{@code  labelProperty}中检索每个{@link  Map}条目的{@code  value}。 
 *  </ ul> <h3>使用以下两种方法之一时：</ h3> <ul> <li>将<em> value </ em>和<em> label </ em>的属性名称指定为{@link  #OptionWriter（Object，BindStatus，String，String，boolean）构造函数}。 
 * </ li> <li>如果'{@code  option}'的键为{@link  #isOptionSelected匹配}绑定到标签实例的值。 
 * </ li> </ ul> @author  Rob Harrop @author  Juergen Hoeller @author  Sam Brannen @author  Scott Andrews @从2.0开始
 */
class OptionWriter {

	private final Object optionSource;

	private final BindStatus bindStatus;

	@Nullable
	private final String valueProperty;

	@Nullable
	private final String labelProperty;

	private final boolean htmlEscape;


	/**
	 * Create a new {@code OptionWriter} for the supplied {@code objectSource}.
	 * @param optionSource the source of the {@code options} (never {@code null})
	 * @param bindStatus the {@link BindStatus} for the bound value (never {@code null})
	 * @param valueProperty the name of the property used to render {@code option} values
	 * (optional)
	 * @param labelProperty the name of the property used to render {@code option} labels
	 * (optional)
	 */
	/**
	 * 为提供的{@code  objectSource}创建一个新的{@code  OptionWriter}。 
	 *  
	 * @param  optionSource {{@@code>选项}的来源（从不{@code  null}）
	 * @param  bindStatus {@link  BindStatus}作为绑定值（从不{<@@> null}）
	 * @param  valueProperty用于呈现{@code  option}标签的属性的名称（可选）
	 * @param  labelProperty用于呈现{@code  option}标签的属性的名称（可选）
	 */
	public OptionWriter(Object optionSource, BindStatus bindStatus,
			@Nullable String valueProperty, @Nullable String labelProperty, boolean htmlEscape) {

		Assert.notNull(optionSource, "'optionSource' must not be null");
		Assert.notNull(bindStatus, "'bindStatus' must not be null");
		this.optionSource = optionSource;
		this.bindStatus = bindStatus;
		this.valueProperty = valueProperty;
		this.labelProperty = labelProperty;
		this.htmlEscape = htmlEscape;
	}


	/**
	 * Write the '{@code option}' tags for the configured {@link #optionSource} to
	 * the supplied {@link TagWriter}.
	 */
	/**
	 * 将已配置的{@link  #optionSource}的'{@code  option}'标签写入提供的{@link  TagWriter}。 
	 * 
	 */
	public void writeOptions(TagWriter tagWriter) throws JspException {
		if (this.optionSource.getClass().isArray()) {
			renderFromArray(tagWriter);
		}
		else if (this.optionSource instanceof Collection) {
			renderFromCollection(tagWriter);
		}
		else if (this.optionSource instanceof Map) {
			renderFromMap(tagWriter);
		}
		else if (this.optionSource instanceof Class && ((Class<?>) this.optionSource).isEnum()) {
			renderFromEnum(tagWriter);
		}
		else {
			throw new JspException(
					"Type [" + this.optionSource.getClass().getName() + "] is not valid for option items");
		}
	}

	/**
	 * Render the inner '{@code option}' tags using the {@link #optionSource}.
	 * @see #doRenderFromCollection(java.util.Collection, TagWriter)
	 */
	/**
	 * 使用{@link  #optionSource}渲染内部的'{@code  option}'标签。 
	 *  
	 * @see  #doRenderFromCollection（java.util.Collection，TagWriter）
	 */
	private void renderFromArray(TagWriter tagWriter) throws JspException {
		doRenderFromCollection(CollectionUtils.arrayToList(this.optionSource), tagWriter);
	}

	/**
	 * Render the inner '{@code option}' tags using the supplied
	 * {@link Map} as the source.
	 * @see #renderOption(TagWriter, Object, Object, Object)
	 */
	/**
	 * 使用提供的{@link  Map}作为源，渲染内部的'{@code  option}'标签。 
	 *  
	 * @see  #renderOption（TagWriter，Object，Object，Object）
	 */
	private void renderFromMap(TagWriter tagWriter) throws JspException {
		Map<?, ?> optionMap = (Map<?, ?>) this.optionSource;
		for (Map.Entry<?, ?> entry : optionMap.entrySet()) {
			Object mapKey = entry.getKey();
			Object mapValue = entry.getValue();
			Object renderValue = (this.valueProperty != null ?
					PropertyAccessorFactory.forBeanPropertyAccess(mapKey).getPropertyValue(this.valueProperty) :
					mapKey);
			Object renderLabel = (this.labelProperty != null ?
					PropertyAccessorFactory.forBeanPropertyAccess(mapValue).getPropertyValue(this.labelProperty) :
					mapValue);
			renderOption(tagWriter, mapKey, renderValue, renderLabel);
		}
	}

	/**
	 * Render the inner '{@code option}' tags using the {@link #optionSource}.
	 * @see #doRenderFromCollection(java.util.Collection, TagWriter)
	 */
	/**
	 * 使用{@link  #optionSource}渲染内部的'{@code  option}'标签。 
	 *  
	 * @see  #doRenderFromCollection（java.util.Collection，TagWriter）
	 */
	private void renderFromCollection(TagWriter tagWriter) throws JspException {
		doRenderFromCollection((Collection<?>) this.optionSource, tagWriter);
	}

	/**
	 * Render the inner '{@code option}' tags using the {@link #optionSource}.
	 * @see #doRenderFromCollection(java.util.Collection, TagWriter)
	 */
	/**
	 * 使用{@link  #optionSource}渲染内部的'{@code  option}'标签。 
	 *  
	 * @see  #doRenderFromCollection（java.util.Collection，TagWriter）
	 */
	private void renderFromEnum(TagWriter tagWriter) throws JspException {
		doRenderFromCollection(CollectionUtils.arrayToList(((Class<?>) this.optionSource).getEnumConstants()), tagWriter);
	}

	/**
	 * Render the inner '{@code option}' tags using the supplied {@link Collection} of
	 * objects as the source. The value of the {@link #valueProperty} field is used
	 * when rendering the '{@code value}' of the '{@code option}' and the value of the
	 * {@link #labelProperty} property is used when rendering the label.
	 */
	/**
	 * 使用提供的对象{@link 集合}作为源，渲染内部的'{@code 选项}'标签。 
	 * 呈现"{@code 选项}"的"{@code 值}"和{@link  #labelProperty的值时，将使用{@link  #valueProperty}字段的值}属性在呈现标签时使用。 
	 * 
	 */
	private void doRenderFromCollection(Collection<?> optionCollection, TagWriter tagWriter) throws JspException {
		for (Object item : optionCollection) {
			BeanWrapper wrapper = PropertyAccessorFactory.forBeanPropertyAccess(item);
			Object value;
			if (this.valueProperty != null) {
				value = wrapper.getPropertyValue(this.valueProperty);
			}
			else if (item instanceof Enum) {
				value = ((Enum<?>) item).name();
			}
			else {
				value = item;
			}
			Object label = (this.labelProperty != null ? wrapper.getPropertyValue(this.labelProperty) : item);
			renderOption(tagWriter, item, value, label);
		}
	}

	/**
	 * Render an HTML '{@code option}' with the supplied value and label. Marks the
	 * value as 'selected' if either the item itself or its value match the bound value.
	 */
	/**
	 * 使用提供的值和标签呈现HTML'{@code  option}'。 
	 * 如果项目本身或其值与绑定值匹配，则将该值标记为"选定"。 
	 * 
	 */
	private void renderOption(TagWriter tagWriter, Object item, @Nullable Object value, @Nullable Object label)
			throws JspException {

		tagWriter.startTag("option");
		writeCommonAttributes(tagWriter);

		String valueDisplayString = getDisplayString(value);
		String labelDisplayString = getDisplayString(label);

		valueDisplayString = processOptionValue(valueDisplayString);

		// allows render values to handle some strange browser compat issues.
		tagWriter.writeAttribute("value", valueDisplayString);

		if (isOptionSelected(value) || (value != item && isOptionSelected(item))) {
			tagWriter.writeAttribute("selected", "selected");
		}
		if (isOptionDisabled()) {
			tagWriter.writeAttribute("disabled", "disabled");
		}
		tagWriter.appendValue(labelDisplayString);
		tagWriter.endTag();
	}

	/**
	 * Determine the display value of the supplied {@code Object},
	 * HTML-escaped as required.
	 */
	/**
	 * 确定提供的{@code  Object}的显示值，并根据需要将其转义为HTML。 
	 * 
	 */
	private String getDisplayString(@Nullable Object value) {
		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null);
		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape);
	}

	/**
	 * Process the option value before it is written.
	 * <p>The default implementation simply returns the same value unchanged.
	 */
	/**
	 * 在写入选项值之前对其进行处理。 
	 *  <p>默认实现只是简单地返回相同的值。 
	 * 
	 */
	protected String processOptionValue(String resolvedValue) {
		return resolvedValue;
	}

	/**
	 * Determine whether the supplied values matched the selected value.
	 * <p>Delegates to {@link SelectedValueComparator#isSelected}.
	 */
	/**
	 * 确定提供的值是否与所选值匹配。 
	 *  <p>代表{@link  SelectedValueComparator＃isSelected}。 
	 * 
	 */
	private boolean isOptionSelected(@Nullable Object resolvedValue) {
		return SelectedValueComparator.isSelected(this.bindStatus, resolvedValue);
	}

	/**
	 * Determine whether the option fields should be disabled.
	 */
	/**
	 * 确定是否应禁用选项字段。 
	 * 
	 */
	protected boolean isOptionDisabled() throws JspException {
		return false;
	}

	/**
	 * Write default attributes configured to the supplied {@link TagWriter}.
	 */
	/**
	 * 编写配置为提供的{@link  TagWriter}的默认属性。 
	 * 
	 */
	protected void writeCommonAttributes(TagWriter tagWriter) throws JspException {
	}

}
