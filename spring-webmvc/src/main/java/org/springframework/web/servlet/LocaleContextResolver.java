/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.i18n.LocaleContext;
import org.springframework.lang.Nullable;

/**
 * Extension of {@link LocaleResolver}, adding support for a rich locale context
 * (potentially including locale and time zone information).
 *
 * @author Juergen Hoeller
 * @since 4.0
 * @see org.springframework.context.i18n.LocaleContext
 * @see org.springframework.context.i18n.TimeZoneAwareLocaleContext
 * @see org.springframework.context.i18n.LocaleContextHolder
 * @see org.springframework.web.servlet.support.RequestContext#getTimeZone
 * @see org.springframework.web.servlet.support.RequestContextUtils#getTimeZone
 */
/**
 * {@link  LocaleResolver}的扩展，增加了对丰富的语言环境的支持（可能包括语言环境和时区信息）。 
 *  @author 尤尔根·霍勒（Juergen Hoeller）@从4.0起请参阅> org.springframework.web.servlet.support.RequestContext＃getTimeZone <@请参阅> org.springframework.web.servlet.support.RequestContextUtils＃getTimeZone
 */
public interface LocaleContextResolver extends LocaleResolver {

	/**
	 * Resolve the current locale context via the given request.
	 * <p>This is primarily intended for framework-level processing; consider using
	 * {@link org.springframework.web.servlet.support.RequestContextUtils} or
	 * {@link org.springframework.web.servlet.support.RequestContext} for
	 * application-level access to the current locale and/or time zone.
	 * <p>The returned context may be a
	 * {@link org.springframework.context.i18n.TimeZoneAwareLocaleContext},
	 * containing a locale with associated time zone information.
	 * Simply apply an {@code instanceof} check and downcast accordingly.
	 * <p>Custom resolver implementations may also return extra settings in
	 * the returned context, which again can be accessed through downcasting.
	 * @param request the request to resolve the locale context for
	 * @return the current locale context (never {@code null}
	 * @see #resolveLocale(HttpServletRequest)
	 * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale
	 * @see org.springframework.web.servlet.support.RequestContextUtils#getTimeZone
	 */
	/**
	 * 通过给定的请求解析当前的语言环境。 
	 *  <p>这主要用于框架级处理； 
	 * 考虑使用{@link  org.springframework.web.servlet.support.RequestContextUtils}或{@link  org.springframework.web.servlet.support.RequestContext}在应用程序级别访问当前语言环境和/或时间区。 
	 *  <p>返回的上下文可以是{@link  org.springframework.context.i18n.TimeZoneAwareLocaleContext}，其中包含具有关联的时区信息的语言环境。 
	 * 只需应用{@code  instanceof}检查并相应地向下转换。 
	 *  <p>自定义解析器实现也可能会在返回的上下文中返回额外的设置，这些设置又可以通过向下转换进行访问。 
	 *  
	 * @param 请求请求为当前的区域设置上下文<@r​​eturn>解析区域设置上下文（切勿{<@@code> null} 
	 * @see  #resolveLocale（HttpServletRequest）
	 * @see  org.springframework.web.servlet .support.RequestContextUtils＃getLocale 
	 * @see  org.springframework.web.servlet.support.RequestContextUtils＃getTimeZone
	 */
	LocaleContext resolveLocaleContext(HttpServletRequest request);

	/**
	 * Set the current locale context to the given one,
	 * potentially including a locale with associated time zone information.
	 * @param request the request to be used for locale modification
	 * @param response the response to be used for locale modification
	 * @param localeContext the new locale context, or {@code null} to clear the locale
	 * @throws UnsupportedOperationException if the LocaleResolver implementation
	 * does not support dynamic changing of the locale or time zone
	 * @see #setLocale(HttpServletRequest, HttpServletResponse, Locale)
	 * @see org.springframework.context.i18n.SimpleLocaleContext
	 * @see org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	/**
	 * 将当前语言环境设置为给定的语言环境，可能包括具有相关时区信息的语言环境。 
	 *  
	 * @param 请求将用于区域设置修改的请求
	 * @param 响应将用于区域设置修改的响应
	 * @param  localeContext新的区域设置上下文，或{@code  null}清除区域设置<@如果LocaleResolver实现不支持语言环境或时区的动态更改，则引发throws> UnsupportedOperationException 
	 * @see  #setLocale（HttpServletRequest，HttpServletResponse，Locale） springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	void setLocaleContext(HttpServletRequest request, @Nullable HttpServletResponse response,
			@Nullable LocaleContext localeContext);

}
