/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.view;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.context.MessageSource;
import org.springframework.lang.Nullable;
import org.springframework.web.servlet.support.JstlUtils;
import org.springframework.web.servlet.support.RequestContext;

/**
 * Specialization of {@link InternalResourceView} for JSTL pages,
 * i.e. JSP pages that use the JSP Standard Tag Library.
 *
 * <p>Exposes JSTL-specific request attributes specifying locale
 * and resource bundle for JSTL's formatting and message tags,
 * using Spring's locale and {@link org.springframework.context.MessageSource}.
 *
 * <p>Typical usage with {@link InternalResourceViewResolver} would look as follows,
 * from the perspective of the DispatcherServlet context definition:
 *
 * <pre class="code">
 * &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
 *   &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
 *   &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;
 *   &lt;property name="suffix" value=".jsp"/&gt;
 * &lt;/bean&gt;
 *
 * &lt;bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
 *   &lt;property name="basename" value="messages"/&gt;
 * &lt;/bean&gt;</pre>
 *
 * Every view name returned from a handler will be translated to a JSP
 * resource (for example: "myView" -> "/WEB-INF/jsp/myView.jsp"), using
 * this view class to enable explicit JSTL support.
 *
 * <p>The specified MessageSource loads messages from "messages.properties" etc
 * files in the class path. This will automatically be exposed to views as
 * JSTL localization context, which the JSTL fmt tags (message etc) will use.
 * Consider using Spring's ReloadableResourceBundleMessageSource instead of
 * the standard ResourceBundleMessageSource for more sophistication.
 * Of course, any other Spring components can share the same MessageSource.
 *
 * <p>This is a separate class mainly to avoid JSTL dependencies in
 * {@link InternalResourceView} itself. JSTL has not been part of standard
 * J2EE up until J2EE 1.4, so we can't assume the JSTL API jar to be
 * available on the class path.
 *
 * <p>Hint: Set the {@link #setExposeContextBeansAsAttributes} flag to "true"
 * in order to make all Spring beans in the application context accessible
 * within JSTL expressions (e.g. in a {@code c:out} value expression).
 * This will also make all such beans accessible in plain {@code ${...}}
 * expressions in a JSP 2.0 page.
 *
 * @author Juergen Hoeller
 * @since 27.02.2003
 * @see org.springframework.web.servlet.support.JstlUtils#exposeLocalizationContext
 * @see InternalResourceViewResolver
 * @see org.springframework.context.support.ResourceBundleMessageSource
 * @see org.springframework.context.support.ReloadableResourceBundleMessageSource
 */
/**
 * {@link  InternalResourceView}对于JSTL页面（即使用JSP标准标记库的JSP页面）的特殊化。 
 *  <p>使用Spring的语言环境和{@link  org.springframework.context.MessageSource}，公开特定于JSTL的请求属性，为JSTL的格式和消息标签指定语言环境和资源包。 
 * 从DispatcherServlet上下文定义的角度来看，<p> {<@link> InternalResourceViewResolver}的典型用法如下所示：<pre class ="code"> <bean id ="viewResolver"class ="org.springframework.web .servlet.view.InternalResourceViewResolver"> <属性名称="viewClass"value ="org.springframework.web.servlet.view.JstlView"/> <属性名称="前缀"value ="/ WEB-INF / jsp /"/> <property name ="suffix"value ="。 
 * jsp"/> </ bean> <bean id ="messageSource"class ="org.springframework.context.support.ResourceBundleMessageSource"> <property name ="basename"值="messages"/> </ bean> </ pre>从处理程序返回的每个视图名称都将转换为JSP资源（例如："myView"->"/WEB-INF/jsp/myView.jsp"） ，使用此视图类启用显式JSTL支持。 
 *  <p>指定的MessageSource从类路径中的"messages.properties"等文件加载消息。 
 * 这将作为JSTL本地化上下文自动显示给JSTL fmt标签（消息等）使用的视图。 
 * 考虑使用Spring的ReloadableResourceBundleMessageSource而不是标准ResourceBundleMessageSource以获得更多的复杂性。 
 * 当然，任何其他Spring组件都可以共享相同的MessageSource。 
 *  <p>这是一个单独的类，主要是为了避免{@link  InternalResourceView}本身中的JSTL依赖关系。 
 * 直到J2EE 1.4，JSTL才成为标准J2EE的一部分，因此我们不能假定JSTL API jar在类路径中可用。 
 *  <p>提示：将{@link  #setExposeContextBeansAsAttributes}标志设置为"true"，以使应用程序上下文中的所有Spring Bean均可在JSTL表达式中访问（例如，在{@code  c：out}值表达式中） ）。 
 * 这还将使所有此类Bean在JSP 2.0页面中都可以通过普通{@code  $ {...}}表达式进行访问。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@2003年2月27日起org.springframework.context.support.ReloadableResourceBundleMessageSource
 */
public class JstlView extends InternalResourceView {

	@Nullable
	private MessageSource messageSource;


	/**
	 * Constructor for use as a bean.
	 * @see #setUrl
	 */
	/**
	 * 用作bean的构造方法。 
	 *  
	 * @see  #setUrl
	 */
	public JstlView() {
	}

	/**
	 * Create a new JstlView with the given URL.
	 * @param url the URL to forward to
	 */
	/**
	 * 使用给定的URL创建一个新的JstlView。 
	 *  
	 * @param 将该URL转发到URL
	 */
	public JstlView(String url) {
		super(url);
	}

	/**
	 * Create a new JstlView with the given URL.
	 * @param url the URL to forward to
	 * @param messageSource the MessageSource to expose to JSTL tags
	 * (will be wrapped with a JSTL-aware MessageSource that is aware of JSTL's
	 * {@code javax.servlet.jsp.jstl.fmt.localizationContext} context-param)
	 * @see JstlUtils#getJstlAwareMessageSource
	 */
	/**
	 * 使用给定的URL创建一个新的JstlView。 
	 *  
	 * @param 将该URL转发到
	 * @param  messageSource的URL，以将MessageSource公开给JSTL标记（将被感知JSTL的{@code  javax.servlet.jsp.jstl的JSTL感知MessageSource包装。 
	 *  fmt.localizationContext} context-param）
	 * @see  JstlUtils＃getJstlAwareMessageSource
	 */
	public JstlView(String url, MessageSource messageSource) {
		this(url);
		this.messageSource = messageSource;
	}


	/**
	 * Wraps the MessageSource with a JSTL-aware MessageSource that is aware
	 * of JSTL's {@code javax.servlet.jsp.jstl.fmt.localizationContext}
	 * context-param.
	 * @see JstlUtils#getJstlAwareMessageSource
	 */
	/**
	 * 用知道JSTL的{@code  javax.servlet.jsp.jstl.fmt.localizationContext}上下文参数的JSTL感知MessageSource包裹MessageSource。 
	 *  
	 * @see  JstlUtils＃getJstlAwareMessageSource
	 */
	@Override
	protected void initServletContext(ServletContext servletContext) {
		if (this.messageSource != null) {
			this.messageSource = JstlUtils.getJstlAwareMessageSource(servletContext, this.messageSource);
		}
		super.initServletContext(servletContext);
	}

	/**
	 * Exposes a JSTL LocalizationContext for Spring's locale and MessageSource.
	 * @see JstlUtils#exposeLocalizationContext
	 */
	/**
	 * 为Spring的语言环境和MessageSource公开一个JSTL LocalizationContext。 
	 *  
	 * @see  JstlUtils＃exposeLocalizationContext
	 */
	@Override
	protected void exposeHelpers(HttpServletRequest request) throws Exception {
		if (this.messageSource != null) {
			JstlUtils.exposeLocalizationContext(request, this.messageSource);
		}
		else {
			JstlUtils.exposeLocalizationContext(new RequestContext(request, getServletContext()));
		}
	}

}
