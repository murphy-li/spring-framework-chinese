/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.tags;

import org.springframework.context.MessageSource;
import org.springframework.context.NoSuchMessageException;

/**
 * The {@code <theme>} tag looks up a theme message in the scope of this page.
 * Messages are looked up using the ApplicationContext's ThemeSource,
 * and thus should support internationalization.
 *
 * <p>Regards a HTML escaping setting, either on this tag instance,
 * the page level, or the web.xml level.
 *
 * <p>If "code" isn't set or cannot be resolved, "text" will be used
 * as default message.
 *
 * <p>Message arguments can be specified via the {@link #setArguments(Object)
 * arguments} attribute or by using nested {@code <spring:argument>} tags.
 *
 * <table>
 * <caption>Attribute Summary</caption>
 * <thead>
 * <tr>
 * <th>Attribute</th>
 * <th>Required?</th>
 * <th>Runtime Expression?</th>
 * <th>Description</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr>
 * <td>arguments</td>
 * <td>false</td>
 * <td>true</td>
 * <td>Set optional message arguments for this tag, as a (comma-)delimited
 * String (each String argument can contain JSP EL), an Object array (used as
 * argument array), or a single Object (used as single argument).</td>
 * </tr>
 * <tr>
 * <td>argumentSeparator</td>
 * <td>false</td>
 * <td>true</td>
 * <td>The separator character to be used for splitting the arguments string
 * value; defaults to a 'comma' (',').</td>
 * </tr>
 * <tr>
 * <td>code</td>
 * <td>false</td>
 * <td>true</td>
 * <td>The code (key) to use when looking up the message. If code is not
 * provided, the text attribute will be used.</td>
 * </tr>
 * <tr>
 * <td>htmlEscape</td>
 * <td>false</td>
 * <td>true</td>
 * <td>Set HTML escaping for this tag, as boolean value. Overrides the default
 * HTML escaping setting for the current page.</td>
 * </tr>
 * <tr>
 * <td>javaScriptEscape</td>
 * <td>false</td>
 * <td>true</td>
 * <td>Set JavaScript escaping for this tag, as boolean value.
 * Default is false.</td>
 * </tr>
 * <tr>
 * <td>message</td>
 * <td>false</td>
 * <td>true</td>
 * <td>A MessageSourceResolvable argument (direct or through JSP EL).</td>
 * </tr>
 * <tr>
 * <td>scope</td>
 * <td>false</td>
 * <td>true</td>
 * <td>The scope to use when exporting the result to a variable. This attribute
 * is only used when var is also set. Possible values are page, request, session
 * and application.</td>
 * </tr>
 * <tr>
 * <td>text</td>
 * <td>false</td>
 * <td>true</td>
 * <td>Default text to output when a message for the given code could not be
 * found. If both text and code are not set, the tag will output null.</td>
 * </tr>
 * <tr>
 * <td>var</td>
 * <td>false</td>
 * <td>true</td>
 * <td>The string to use when binding the result to the page, request, session
 * or application scope. If not specified, the result gets outputted to the
 * writer (i.e. typically directly to the JSP).</td>
 * </tr>
 * </tbody>
 * </table>
 *
 * @author Jean-Pierre Pawlak
 * @author Juergen Hoeller
 * @see org.springframework.ui.context.Theme
 * @see org.springframework.ui.context.ThemeSource
 * @see #setCode
 * @see #setText
 * @see #setHtmlEscape
 * @see HtmlEscapeTag#setDefaultHtmlEscape
 * @see org.springframework.web.util.WebUtils#HTML_ESCAPE_CONTEXT_PARAM
 * @see ArgumentTag
 */
/**
 * {@code  <theme>}标签在此页面范围内查找主题消息。 
 * 使用ApplicationContext的ThemeSource查找消息，因此应该支持国际化。 
 *  <p>关于此标记实例，页面级别或web.xml级别的HTML转义设置。 
 *  <p>如果未设置"代码"或无法解析，则"文本"将用作默认消息。 
 * 消息参数可以通过{@link  #setArguments（Object）arguments}属性或使用嵌套的{@code  <spring：argument>}标签来指定。 
 *  <table> <caption>属性摘要</ caption> <thead> <tr> <th>属性</ th> <th>是否必需？</ th> <th>运行时表达式？</ th> <th>描述< / th> </ tr> </ thead> <tbody> <tr> <td>参数</ td> <td> false </ td> <td> true </ td> <td>为此设置可选的消息参数标签，以（逗号分隔）字符串（每个字符串参数可以包含JSP EL），对象数组（用作参数数组）或单个对象（用作单个参数）。 
 * </ td> </ tr> < tr> <td> argumentSeparator </ td> <td> false </ td> <td> true </ td> <td>用于分隔参数字符串值的分隔符； 
 * 默认为'逗号'（'，'）。 
 * </ td> </ tr> <tr> <td>代码</ td> <td> false </ td> <td> true </ td> <td>查找消息时使用的代码（密钥）。 
 * 如果未提供代码，则将使用text属性。 
 * </ td> </ tr> <tr> <td> htmlEscape </ td> <td> false </ td> <td> true </ td> <td >为此标签设置HTML转义符，为布尔值。 
 * 覆盖当前页面的默认HTML转义设置。 
 * </ td> </ tr> <tr> <td> javaScriptEscape </ td> <td> false </ td> <td> true </ td> <td> Set JavaScript将此标记转义为布尔值。 
 * 默认值为false。 
 * </ td> </ tr> <tr> <td>消息</ td> <td> false </ td> <td> true </ td> <td> MessageSourceResolvable参数（直接或通过JSP） EL）。 
 * </ td> </ tr> <tr> <td>范围</ td> <td> false </ td> <td> true </ td> <td>将结果导出到一个变量。 
 * 仅当还设置了var时，才使用此属性。 
 * 可能的值是页面，请求，会话和应用程序。 
 * </ td> </ tr> <tr> <td> text </ td> <td> false </ td> <td> true </ td> <td>默认当找不到给定代码的消息时输出的文本。 
 * 如果未同时设置文本和代码，则标记将输出null。 
 * </ td> </ tr> <tr> <td> var </ td> <td> false </ td> <td> true </ td> <td>将结果绑定到页面，请求，会话或应用程序范围时使用的字符串。 
 * 如果未指定，结果将输出到编写器（即通常直接输出到JSP）。 
 * </ td> </ tr> </ tbody> </ table> @author  Jean-Pierre Pawlak @author  Juergen Hoeller 
 * @see  org.springframework.ui.context.Theme 
 * @see  org.springframework.ui.context.ThemeSource 
 * @see  #setCode 
 * @see  #setText 
 * @see  #setHtmlEscape 
 * @see  HtmlEscapeTag＃ setDefaultHtmlEscape 
 * @see  org.springframework.web.util.WebUtils＃HTML_ESCAPE_CONTEXT_PARAM 
 * @see  ArgumentTag
 */
@SuppressWarnings("serial")
public class ThemeTag extends MessageTag {

	/**
	 * Use the theme MessageSource for theme message resolution.
	 */
	/**
	 * 使用主题MessageSource进行主题消息解析。 
	 * 
	 */
	@Override
	protected MessageSource getMessageSource() {
		return getRequestContext().getTheme().getMessageSource();
	}

	/**
	 * Return exception message that indicates the current theme.
	 */
	/**
	 * 返回指示当前主题的异常消息。 
	 * 
	 */
	@Override
	protected String getNoSuchMessageExceptionDescription(NoSuchMessageException ex) {
		return "Theme '" + getRequestContext().getTheme().getName() + "': " + ex.getMessage();
	}

}
