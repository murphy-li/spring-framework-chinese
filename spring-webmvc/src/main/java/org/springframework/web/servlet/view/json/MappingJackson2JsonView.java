/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.view.json;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ser.FilterProvider;

import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.lang.Nullable;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.View;

/**
 * Spring MVC {@link View} that renders JSON content by serializing the model for the current request
 * using <a href="https://github.com/FasterXML/jackson">Jackson 2's</a> {@link ObjectMapper}.
 *
 * <p>By default, the entire contents of the model map (with the exception of framework-specific classes)
 * will be encoded as JSON. If the model contains only one key, you can have it extracted encoded as JSON
 * alone via  {@link #setExtractValueFromSingleKeyModel}.
 *
 * <p>The default constructor uses the default configuration provided by {@link Jackson2ObjectMapperBuilder}.
 *
 * <p>Compatible with Jackson 2.6 and higher, as of Spring 4.3.
 *
 * @author Jeremy Grelle
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @author Sebastien Deleuze
 * @since 3.1.2
 */
/**
 * Spring MVC {@link  View}通过使用<a href="https://github.com/FasterXML/jackson"> Jackson 2's </a>来为当前请求序列化模型来呈现JSON内容。 
 *  > ObjectMapper}。 
 *  <p>默认情况下，模型映射的全部内容（特定于框架的类除外）将被编码为JSON。 
 * 如果模型仅包含一个密钥，则可以通过{@link  #setExtractValueFromSingleKeyModel}将其提取为JSON编码。 
 *  <p>默认构造函数使用{@link  Jackson2ObjectMapperBuilder}提供的默认配置。 
 *  <p>从Spring 4.3开始与Jackson 2.6和更高版本兼容。 
 *  @author  Jeremy Grelle @author  Arjen Poutsma @author  Rossen Stoyanchev @author  Juergen Hoeller @author 塞巴斯蒂安·德勒兹（Sebastien Deleuze）从3.1.2开始
 */
public class MappingJackson2JsonView extends AbstractJackson2View {

	/**
	 * Default content type: "application/json".
	 * Overridable through {@link #setContentType}.
	 */
	/**
	 * 默认内容类型："application / json"。 
	 * 可通过{@link  #setContentType}覆盖。 
	 * 
	 */
	public static final String DEFAULT_CONTENT_TYPE = "application/json";

	@Nullable
	private String jsonPrefix;

	@Nullable
	private Set<String> modelKeys;

	private boolean extractValueFromSingleKeyModel = false;


	/**
	 * Construct a new {@code MappingJackson2JsonView} using default configuration
	 * provided by {@link Jackson2ObjectMapperBuilder} and setting the content type
	 * to {@code application/json}.
	 */
	/**
	 * 使用{@link  Jackson2ObjectMapperBuilder}提供的默认配置，构造一个新的{@code  MappingJackson2JsonView}并将内容类型设置为{@code  application / json}。 
	 * 
	 */
	public MappingJackson2JsonView() {
		super(Jackson2ObjectMapperBuilder.json().build(), DEFAULT_CONTENT_TYPE);
	}

	/**
	 * Construct a new {@code MappingJackson2JsonView} using the provided
	 * {@link ObjectMapper} and setting the content type to {@code application/json}.
	 * @since 4.2.1
	 */
	/**
	 * 使用提供的{@link  ObjectMapper}构造一个新的{@code  MappingJackson2JsonView}并将内容类型设置为{@code  application / json}。 
	 *  @4.2.1起
	 */
	public MappingJackson2JsonView(ObjectMapper objectMapper) {
		super(objectMapper, DEFAULT_CONTENT_TYPE);
	}


	/**
	 * Specify a custom prefix to use for this view's JSON output.
	 * Default is none.
	 * @see #setPrefixJson
	 */
	/**
	 * 指定用于此视图的JSON输出的自定义前缀。 
	 * 默认为无。 
	 *  
	 * @see  #setPrefixJson
	 */
	public void setJsonPrefix(String jsonPrefix) {
		this.jsonPrefix = jsonPrefix;
	}

	/**
	 * Indicates whether the JSON output by this view should be prefixed with <tt>")]}', "</tt>.
	 * Default is {@code false}.
	 * <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking.
	 * The prefix renders the string syntactically invalid as a script so that it cannot be hijacked.
	 * This prefix should be stripped before parsing the string as JSON.
	 * @see #setJsonPrefix
	 */
	/**
	 * 指示此视图的JSON输出是否应该以<tt>"）]}'，"</ tt>作为前缀。 
	 * 默认值为{@code  false}。 
	 *  <p>以这种方式给JSON字符串加上前缀有助于防止JSON劫持。 
	 * 该前缀使该字符串在语法上作为脚本无效，因此不能被劫持。 
	 * 在将字符串解析为JSON之前，应先删除此前缀。 
	 *  
	 * @see  #setJsonPrefix
	 */
	public void setPrefixJson(boolean prefixJson) {
		this.jsonPrefix = (prefixJson ? ")]}', " : null);
	}

	/**
	 * {@inheritDoc}
	 */
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setModelKey(String modelKey) {
		this.modelKeys = Collections.singleton(modelKey);
	}

	/**
	 * Set the attributes in the model that should be rendered by this view.
	 * When set, all other model attributes will be ignored.
	 */
	/**
	 * 在模型中设置应由该视图呈现的属性。 
	 * 设置后，所有其他模型属性将被忽略。 
	 * 
	 */
	public void setModelKeys(@Nullable Set<String> modelKeys) {
		this.modelKeys = modelKeys;
	}

	/**
	 * Return the attributes in the model that should be rendered by this view.
	 */
	/**
	 * 返回该视图应在模型中呈现的属性。 
	 * 
	 */
	@Nullable
	public final Set<String> getModelKeys() {
		return this.modelKeys;
	}

	/**
	 * Set whether to serialize models containing a single attribute as a map or
	 * whether to extract the single value from the model and serialize it directly.
	 * <p>The effect of setting this flag is similar to using
	 * {@code MappingJackson2HttpMessageConverter} with an {@code @ResponseBody}
	 * request-handling method.
	 * <p>Default is {@code false}.
	 */
	/**
	 * 设置是序列化包含单个属性作为映射的模型，还是从模型中提取单个值并直接序列化。 
	 *  <p>设置此标志的效果类似于将{@code  MappingJackson2HttpMessageConverter}与{@code  @ResponseBody}请求处理方法一起使用。 
	 *  <p>默认值为{@code  false}。 
	 * 
	 */
	public void setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel) {
		this.extractValueFromSingleKeyModel = extractValueFromSingleKeyModel;
	}

	/**
	 * Filter out undesired attributes from the given model.
	 * The return value can be either another {@link Map} or a single value object.
	 * <p>The default implementation removes {@link BindingResult} instances and entries
	 * not included in the {@link #setModelKeys modelKeys} property.
	 * @param model the model, as passed on to {@link #renderMergedOutputModel}
	 * @return the value to be rendered
	 */
	/**
	 * 从给定模型中过滤掉不需要的属性。 
	 * 返回值可以是另一个{@link  Map}或单个值对象。 
	 *  <p>默认实现将删除{@link  #setModelKeys modelKeys}属性中未包括的{@link  BindingResult}实例和条目。 
	 *  
	 * @param 为模型建模，传递给{@link  #renderMergedOutputModel} 
	 * @return 要呈现的值
	 */
	@Override
	protected Object filterModel(Map<String, Object> model) {
		Map<String, Object> result = new HashMap<>(model.size());
		Set<String> modelKeys = (!CollectionUtils.isEmpty(this.modelKeys) ? this.modelKeys : model.keySet());
		model.forEach((clazz, value) -> {
			if (!(value instanceof BindingResult) && modelKeys.contains(clazz) &&
					!clazz.equals(JsonView.class.getName()) &&
					!clazz.equals(FilterProvider.class.getName())) {
				result.put(clazz, value);
			}
		});
		return (this.extractValueFromSingleKeyModel && result.size() == 1 ? result.values().iterator().next() : result);
	}

	@Override
	protected void writePrefix(JsonGenerator generator, Object object) throws IOException {
		if (this.jsonPrefix != null) {
			generator.writeRaw(this.jsonPrefix);
		}
	}

}
