/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.config.annotation;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Predicate;

import org.springframework.lang.Nullable;
import org.springframework.util.PathMatcher;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import org.springframework.web.util.UrlPathHelper;

/**
 * Helps with configuring HandlerMappings path matching options such as trailing
 * slash match, suffix registration, path matcher and path helper.
 *
 * <p>Configured path matcher and path helper instances are shared for:
 * <ul>
 * <li>RequestMappings</li>
 * <li>ViewControllerMappings</li>
 * <li>ResourcesMappings</li>
 * </ul>
 *
 * @author Brian Clozel
 * @since 4.0.3
 * @see RequestMappingHandlerMapping
 * @see org.springframework.web.servlet.handler.SimpleUrlHandlerMapping
 */
/**
 * 帮助配置HandlerMappings路径匹配选项，例如尾部斜杠匹配，后缀注册，路径匹配器和路径帮助器。 
 *  <p>已配置的路径匹配器和路径帮助器实例共享给：<ul> <li> RequestMappings </ li> <li> ViewControllerMappings </ li> <li> ResourcesMappings </ li> </ ul> </ ul> @author  Brian Clozel @since 4.0.3 
 * @see  RequestMappingHandlerMapping 
 * @see  org.springframework.web.servlet.handler.SimpleUrlHandlerMapping
 */
public class PathMatchConfigurer {

	@Nullable
	private Boolean suffixPatternMatch;

	@Nullable
	private Boolean registeredSuffixPatternMatch;

	@Nullable
	private Boolean trailingSlashMatch;

	@Nullable
	private UrlPathHelper urlPathHelper;

	@Nullable
	private PathMatcher pathMatcher;

	@Nullable
	private Map<String, Predicate<Class<?>>> pathPrefixes;


	/**
	 * Whether to use suffix pattern match (".*") when matching patterns to
	 * requests. If enabled a method mapped to "/users" also matches to "/users.*".
	 * <p>By default this is set to {@code true}.
	 * @see #registeredSuffixPatternMatch
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link RequestMappingHandlerMapping} on the deprecation of path extension
	 * config options.
	 */
	/**
	 * 在将模式与请求匹配时是否使用后缀模式匹配（"。 
	 * "）。 
	 * 如果启用，则映射到"/ users"的方法也将匹配"/ users"。 
	 *  <p>默认情况下，此设置为{@code  true}。 
	 *  
	 * @see  #registeredSuffixPatternMatch @从5.2.4开始不推荐使用。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  RequestMappingHandlerMapping}中的类级别注释。 
	 * 
	 */
	@Deprecated
	public PathMatchConfigurer setUseSuffixPatternMatch(Boolean suffixPatternMatch) {
		this.suffixPatternMatch = suffixPatternMatch;
		return this;
	}

	/**
	 * Whether suffix pattern matching should work only against path extensions
	 * explicitly registered when you
	 * {@link WebMvcConfigurer#configureContentNegotiation configure content
	 * negotiation}. This is generally recommended to reduce ambiguity and to
	 * avoid issues such as when a "." appears in the path for other reasons.
	 * <p>By default this is set to "false".
	 * @see WebMvcConfigurer#configureContentNegotiation
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link RequestMappingHandlerMapping} on the deprecation of path extension
	 * config options.
	 */
	/**
	 * 后缀模式匹配是否仅应对{{@link> WebMvcConfigurer＃configureContentNegotiation配置内容协商}时显式注册的路径扩展有效。 
	 * 通常建议这样做以减少歧义并避免出现诸如"。 
	 * "之类的问题。 
	 * 由于其他原因出现在路径中。 
	 *  <p>默认情况下将其设置为"false"。 
	 * 从5.2.4开始不推荐使用
	 * @see  WebMvcConfigurer＃configureContentNegotiation。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  RequestMappingHandlerMapping}中的类级别注释。 
	 * 
	 */
	@Deprecated
	public PathMatchConfigurer setUseRegisteredSuffixPatternMatch(Boolean registeredSuffixPatternMatch) {
		this.registeredSuffixPatternMatch = registeredSuffixPatternMatch;
		return this;
	}

	/**
	 * Whether to match to URLs irrespective of the presence of a trailing slash.
	 * If enabled a method mapped to "/users" also matches to "/users/".
	 * <p>The default value is {@code true}.
	 */
	/**
	 * 是否与URL匹配，无论是否存在斜杠。 
	 * 如果启用，则映射到"/ users"的方法也将匹配"/ users /"。 
	 *  <p>默认值为{@code  true}。 
	 * 
	 */
	public PathMatchConfigurer setUseTrailingSlashMatch(Boolean trailingSlashMatch) {
		this.trailingSlashMatch = trailingSlashMatch;
		return this;
	}

	/**
	 * Set the UrlPathHelper to use for resolution of lookup paths.
	 * <p>Use this to override the default UrlPathHelper with a custom subclass,
	 * or to share common UrlPathHelper settings across multiple HandlerMappings
	 * and MethodNameResolvers.
	 */
	/**
	 * 设置UrlPathHelper以用于解析查找路径。 
	 *  <p>使用它使用自定义子类覆盖默认的UrlPathHelper，或在多个HandlerMappings和MethodNameResolvers之间共享通用的UrlPathHelper设置。 
	 * 
	 */
	public PathMatchConfigurer setUrlPathHelper(UrlPathHelper urlPathHelper) {
		this.urlPathHelper = urlPathHelper;
		return this;
	}

	/**
	 * Set the PathMatcher implementation to use for matching URL paths
	 * against registered URL patterns. Default is AntPathMatcher.
	 * @see org.springframework.util.AntPathMatcher
	 */
	/**
	 * 设置PathMatcher实现，以将URL路径与已注册的URL模式进行匹配。 
	 * 默认值为AntPathMatcher。 
	 *  
	 * @see  org.springframework.util.AntPathMatcher
	 */
	public PathMatchConfigurer setPathMatcher(PathMatcher pathMatcher) {
		this.pathMatcher = pathMatcher;
		return this;
	}

	/**
	 * Configure a path prefix to apply to matching controller methods.
	 * <p>Prefixes are used to enrich the mappings of every {@code @RequestMapping}
	 * method whose controller type is matched by the corresponding
	 * {@code Predicate}. The prefix for the first matching predicate is used.
	 * <p>Consider using {@link org.springframework.web.method.HandlerTypePredicate
	 * HandlerTypePredicate} to group controllers.
	 * @param prefix the prefix to apply
	 * @param predicate a predicate for matching controller types
	 * @since 5.1
	 */
	/**
	 * 配置路径前缀以应用于匹配的控制器方法。 
	 *  <p>前缀用于丰富其控制器类型与相应的{@code 谓词}匹配的每个{@code  @RequestMapping}方法的映射。 
	 * 使用第一个匹配谓词的前缀。 
	 *  <p>考虑使用{@link  org.springframework.web.method.HandlerTypePredicate HandlerTypePredicate}对控制器进行分组。 
	 *  
	 * @param 为要应用的前缀添加前缀
	 * @param 谓词，用于匹配控制器类型@5.1起
	 */
	public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate) {
		if (this.pathPrefixes == null) {
			this.pathPrefixes = new LinkedHashMap<>();
		}
		this.pathPrefixes.put(prefix, predicate);
		return this;
	}


	/**
	 * Whether to use registered suffixes for pattern matching.
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link RequestMappingHandlerMapping} on the deprecation of path extension
	 * config options.
	 */
	/**
	 * 是否使用注册的后缀进行模式匹配。 
	 * 从5.2.4开始不推荐使用。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  RequestMappingHandlerMapping}中的类级别注释。 
	 * 
	 */
	@Nullable
	@Deprecated
	public Boolean isUseSuffixPatternMatch() {
		return this.suffixPatternMatch;
	}

	/**
	 * Whether to use registered suffixes for pattern matching.
	 * @deprecated as of 5.2.4. See class-level note in
	 * {@link RequestMappingHandlerMapping} on the deprecation of path extension
	 * config options.
	 */
	/**
	 * 是否使用注册的后缀进行模式匹配。 
	 * 从5.2.4开始不推荐使用。 
	 * 有关弃用路径扩展配置选项的信息，请参见{@link  RequestMappingHandlerMapping}中的类级别注释。 
	 * 
	 */
	@Nullable
	@Deprecated
	public Boolean isUseRegisteredSuffixPatternMatch() {
		return this.registeredSuffixPatternMatch;
	}

	@Nullable
	public Boolean isUseTrailingSlashMatch() {
		return this.trailingSlashMatch;
	}

	@Nullable
	public UrlPathHelper getUrlPathHelper() {
		return this.urlPathHelper;
	}

	@Nullable
	public PathMatcher getPathMatcher() {
		return this.pathMatcher;
	}

	@Nullable
	protected Map<String, Predicate<Class<?>>> getPathPrefixes() {
		return this.pathPrefixes;
	}
}
