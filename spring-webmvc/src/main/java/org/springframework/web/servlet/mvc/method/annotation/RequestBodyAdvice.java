/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.mvc.method.annotation;

import java.io.IOException;
import java.lang.reflect.Type;

import org.springframework.core.MethodParameter;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.lang.Nullable;

/**
 * Allows customizing the request before its body is read and converted into an
 * Object and also allows for processing of the resulting Object before it is
 * passed into a controller method as an {@code @RequestBody} or an
 * {@code HttpEntity} method argument.
 *
 * <p>Implementations of this contract may be registered directly with the
 * {@code RequestMappingHandlerAdapter} or more likely annotated with
 * {@code @ControllerAdvice} in which case they are auto-detected.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 */
/**
 * 允许在读取请求的主体并将其转换为对象之前对其进行自定义，并且还可以在将生成的对象作为{@code  @RequestBody}或{@code  HttpEntity}传递到控制器方法之前进行处理方法参数。 
 *  <p>可以直接在{@code  RequestMappingHandlerAdapter}中注册此合同的实现，或者更可能用{@code  @ControllerAdvice}进行注释，在这种情况下，它们会被自动检测到。 
 *  @author  Rossen Stoyanchev @从4.2开始
 */
public interface RequestBodyAdvice {

	/**
	 * Invoked first to determine if this interceptor applies.
	 * @param methodParameter the method parameter
	 * @param targetType the target type, not necessarily the same as the method
	 * parameter type, e.g. for {@code HttpEntity<String>}.
	 * @param converterType the selected converter type
	 * @return whether this interceptor should be invoked or not
	 */
	/**
	 * 首先调用以确定此拦截器是否适用。 
	 *  
	 * @param  methodParameter方法参数
	 * @param  targetType目标类型，不一定与方法参数类型相同，例如用于{@code  HttpEntity <String>}。 
	 *  
	 * @param  converterType键入选定的转换器类型
	 * @return 是否应调用此拦截器
	 */
	boolean supports(MethodParameter methodParameter, Type targetType,
			Class<? extends HttpMessageConverter<?>> converterType);

	/**
	 * Invoked second before the request body is read and converted.
	 * @param inputMessage the request
	 * @param parameter the target method parameter
	 * @param targetType the target type, not necessarily the same as the method
	 * parameter type, e.g. for {@code HttpEntity<String>}.
	 * @param converterType the converter used to deserialize the body
	 * @return the input request or a new instance, never {@code null}
	 */
	/**
	 * 在读取和转换请求正文之前调用第二秒。 
	 *  
	 * @param  inputMessage请求的
	 * @param 参数为目标方法参数
	 * @param  targetType目标类型，不一定与方法参数类型相同，例如用于{@code  HttpEntity <String>}。 
	 *  
	 * @param  converterType用于反序列化正文的转换器
	 * @return 输入请求或新实例，从不{@code  null}
	 */
	HttpInputMessage beforeBodyRead(HttpInputMessage inputMessage, MethodParameter parameter,
			Type targetType, Class<? extends HttpMessageConverter<?>> converterType) throws IOException;

	/**
	 * Invoked third (and last) after the request body is converted to an Object.
	 * @param body set to the converter Object before the first advice is called
	 * @param inputMessage the request
	 * @param parameter the target method parameter
	 * @param targetType the target type, not necessarily the same as the method
	 * parameter type, e.g. for {@code HttpEntity<String>}.
	 * @param converterType the converter used to deserialize the body
	 * @return the same body or a new instance
	 */
	/**
	 * 将请求正文转换为对象后调用的第三个（也是最后一个）。 
	 *  
	 * @param 主体设置为转换器对象在第一个建议之前称为
	 * @param  inputMessage请求的请求
	 * @param 参数目标方法参数
	 * @param  targetType目标类型，不一定与方法参数类型相同，例如用于{@code  HttpEntity <String>}。 
	 *  
	 * @param  converter键入用于反序列化主体的转换器
	 * @return 同一主体或新实例
	 */
	Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter,
			Type targetType, Class<? extends HttpMessageConverter<?>> converterType);

	/**
	 * Invoked second (and last) if the body is empty.
	 * @param body usually set to {@code null} before the first advice is called
	 * @param inputMessage the request
	 * @param parameter the method parameter
	 * @param targetType the target type, not necessarily the same as the method
	 * parameter type, e.g. for {@code HttpEntity<String>}.
	 * @param converterType the selected converter type
	 * @return the value to use or {@code null} which may then raise an
	 * {@code HttpMessageNotReadableException} if the argument is required.
	 */
	/**
	 * 如果主体为空，则调用第二（也是最后一个）。 
	 *  
	 * @param 主体通常设置为{@code  null}，然后将第一个建议称为
	 * @param  inputMessage请求
	 * @param 参数方法参数
	 * @param  targetType目标类型，不一定与目标类型相同方法参数类型，例如用于{@code  HttpEntity <String>}。 
	 *  
	 * @param  converterType所选的转换器类型
	 * @return 要使用的值或{@code  null}，如果需要该参数，则可能引发{@code  HttpMessageNotReadableException}。 
	 * 
	 */
	@Nullable
	Object handleEmptyBody(@Nullable Object body, HttpInputMessage inputMessage, MethodParameter parameter,
			Type targetType, Class<? extends HttpMessageConverter<?>> converterType);


}
