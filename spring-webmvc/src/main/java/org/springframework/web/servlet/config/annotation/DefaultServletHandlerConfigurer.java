/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.config.annotation;

import java.util.Collections;

import javax.servlet.ServletContext;

import org.springframework.core.Ordered;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.web.servlet.DispatcherServlet;
import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;
import org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler;

/**
 * Configures a request handler for serving static resources by forwarding
 * the request to the Servlet container's "default" Servlet. This is intended
 * to be used when the Spring MVC {@link DispatcherServlet} is mapped to "/"
 * thus overriding the Servlet container's default handling of static resources.
 *
 * <p>Since this handler is configured at the lowest precedence, effectively
 * it allows all other handler mappings to handle the request, and if none
 * of them do, this handler can forward it to the "default" Servlet.
 *
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @since 3.1
 * @see DefaultServletHttpRequestHandler
 */
/**
 * 通过将请求转发到Servlet容器的"默认"Servlet，配置用于处理静态资源的请求处理程序。 
 * 当Spring MVC {@link  DispatcherServlet}映射到"/"时，将使用此方法，从而覆盖Servlet容器对静态资源的默认处理。 
 *  <p>由于此处理程序的优先级最低，因此有效地允许所有其他处理程序映射处理该请求，并且如果没有处理，则此处理程序可以将其转发至"默认"Servlet。 
 *  @author  Rossen Stoyanchev @author 于尔根·霍勒（Juergen Hoeller）@从3.1起
 * @see  DefaultServletHttpRequestHandler
 */
public class DefaultServletHandlerConfigurer {

	private final ServletContext servletContext;

	@Nullable
	private DefaultServletHttpRequestHandler handler;


	/**
	 * Create a {@link DefaultServletHandlerConfigurer} instance.
	 * @param servletContext the ServletContext to use.
	 */
	/**
	 * 创建一个{@link  DefaultServletHandlerConfigurer}实例。 
	 *  
	 * @param  servletContext要使用的ServletContext。 
	 * 
	 */
	public DefaultServletHandlerConfigurer(ServletContext servletContext) {
		Assert.notNull(servletContext, "ServletContext is required");
		this.servletContext = servletContext;
	}


	/**
	 * Enable forwarding to the "default" Servlet.
	 * <p>When this method is used the {@link DefaultServletHttpRequestHandler}
	 * will try to autodetect the "default" Servlet name. Alternatively, you can
	 * specify the name of the default Servlet via {@link #enable(String)}.
	 * @see DefaultServletHttpRequestHandler
	 */
	/**
	 * 启用转发到"默认"Servlet的功能。 
	 *  <p>使用此方法时，{<@link> DefaultServletHttpRequestHandler}将尝试自动检测"默认"Servlet名称。 
	 * 另外，您可以通过{@link  #enable（String）}指定默认Servlet的名称。 
	 *  
	 * @see  DefaultServletHttpRequestHandler
	 */
	public void enable() {
		enable(null);
	}

	/**
	 * Enable forwarding to the "default" Servlet identified by the given name.
	 * <p>This is useful when the default Servlet cannot be autodetected,
	 * for example when it has been manually configured.
	 * @see DefaultServletHttpRequestHandler
	 */
	/**
	 * 启用转发到由给定名称标识的"默认"Servlet的功能。 
	 *  <p>当无法自动检测到默认Servlet时，例如在手动配置时，这很有用。 
	 *  
	 * @see  DefaultServletHttpRequestHandler
	 */
	public void enable(@Nullable String defaultServletName) {
		this.handler = new DefaultServletHttpRequestHandler();
		if (defaultServletName != null) {
			this.handler.setDefaultServletName(defaultServletName);
		}
		this.handler.setServletContext(this.servletContext);
	}


	/**
	 * Return a handler mapping instance ordered at {@link Ordered#LOWEST_PRECEDENCE}
	 * containing the {@link DefaultServletHttpRequestHandler} instance mapped
	 * to {@code "/**"}; or {@code null} if default servlet handling was not
	 * been enabled.
	 * @since 4.3.12
	 */
	/**
	 * 返回在{@link  Ordered＃LOWEST_PRECEDENCE}处排序的处理程序映射实例，其中包含映射到{@code ""}的{@link  DefaultServletHttpRequestHandler}实例； 
	 * 或{@code  null}（如果未启用默认的servlet处理）。 
	 *  @自4.3.12起
	 */
	@Nullable
	protected SimpleUrlHandlerMapping buildHandlerMapping() {
		if (this.handler == null) {
			return null;
		}
		return new SimpleUrlHandlerMapping(Collections.singletonMap("/**", this.handler),
				Ordered.LOWEST_PRECEDENCE);
	}

}
