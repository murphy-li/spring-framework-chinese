/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.lang.Nullable;

/**
 * MVC framework SPI, allowing parameterization of the core MVC workflow.
 *
 * <p>Interface that must be implemented for each handler type to handle a request.
 * This interface is used to allow the {@link DispatcherServlet} to be indefinitely
 * extensible. The {@code DispatcherServlet} accesses all installed handlers through
 * this interface, meaning that it does not contain code specific to any handler type.
 *
 * <p>Note that a handler can be of type {@code Object}. This is to enable
 * handlers from other frameworks to be integrated with this framework without
 * custom coding, as well as to allow for annotation-driven handler objects that
 * do not obey any specific Java interface.
 *
 * <p>This interface is not intended for application developers. It is available
 * to handlers who want to develop their own web workflow.
 *
 * <p>Note: {@code HandlerAdapter} implementors may implement the {@link
 * org.springframework.core.Ordered} interface to be able to specify a sorting
 * order (and thus a priority) for getting applied by the {@code DispatcherServlet}.
 * Non-Ordered instances get treated as lowest priority.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
 * @see org.springframework.web.servlet.handler.SimpleServletHandlerAdapter
 */
/**
 * MVC框架SPI，允许对核心MVC工作流程进行参数化。 
 *  <p>必须为每种处理程序类型实现的接口才能处理请求。 
 * 此接口用于允许{@link  DispatcherServlet}无限地扩展。 
 *  {@code  DispatcherServlet}通过此接口访问所有已安装的处理程序，这意味着它不包含特定于任何处理程序类型的代码。 
 *  <p>请注意，处理程序的类型可以为{@code  Object}。 
 * 这是为了使其他框架中的处理程序可以与该框架集成，而无需自定义编码，并且允许注释驱动的处理程序对象不遵循任何特定的Java接口。 
 *  <p>此接口不适用于应用程序开发人员。 
 * 想要开发自己的Web工作流程的处理程序可以使用它。 
 *  <p>注意：{@code  HandlerAdapter}实现者可以实现{@link  org.springframework.core.Ordered}接口，以便能够指定排序顺序（因此优先级），以供{ @code  DispatcherServlet}。 
 * 非订购实例被视为最低优先级。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter 
 * @see  org.springframework.web.servlet.handler.SimpleServletHandlerAdapter
 */
public interface HandlerAdapter {

	/**
	 * Given a handler instance, return whether or not this {@code HandlerAdapter}
	 * can support it. Typical HandlerAdapters will base the decision on the handler
	 * type. HandlerAdapters will usually only support one handler type each.
	 * <p>A typical implementation:
	 * <p>{@code
	 * return (handler instanceof MyHandler);
	 * }
	 * @param handler handler object to check
	 * @return whether or not this object can use the given handler
	 */
	/**
	 * 给定处理程序实例，请返回此{@code  HandlerAdapter}是否可以支持它。 
	 * 典型的HandlerAdapters将根据处理程序类型做出决定。 
	 *  HandlerAdapters通常通常仅支持一种处理程序类型。 
	 *  <p>一个典型的实现：<p> {<@code> return（MyHandler的处理程序实例）； 
	 *  } 
	 * @param 处理程序处理程序对象以检查
	 * @return 此对象是否可以使用给定的处理程序
	 */
	boolean supports(Object handler);

	/**
	 * Use the given handler to handle this request.
	 * The workflow that is required may vary widely.
	 * @param request current HTTP request
	 * @param response current HTTP response
	 * @param handler handler to use. This object must have previously been passed
	 * to the {@code supports} method of this interface, which must have
	 * returned {@code true}.
	 * @throws Exception in case of errors
	 * @return a ModelAndView object with the name of the view and the required
	 * model data, or {@code null} if the request has been handled directly
	 */
	/**
	 * 使用给定的处理程序来处理此请求。 
	 * 所需的工作流程可能相差很大。 
	 *  
	 * @param 请求当前HTTP请求
	 * @param 响应当前HTTP响应
	 * @param 处理程序要使用的处理程序。 
	 * 该对象必须先前已传递到此接口的{@code  supports}方法，该方法必须返回{@code  true}。 
	 *  
	 * @throws 发生错误时的异常
	 * @return 具有视图名称和所需模型数据的ModelAndView对象； 
	 * 如果直接处理了请求，则为{@code  null}
	 */
	@Nullable
	ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;

	/**
	 * Same contract as for HttpServlet's {@code getLastModified} method.
	 * Can simply return -1 if there's no support in the handler class.
	 * @param request current HTTP request
	 * @param handler handler to use
	 * @return the lastModified value for the given handler
	 * @see javax.servlet.http.HttpServlet#getLastModified
	 * @see org.springframework.web.servlet.mvc.LastModified#getLastModified
	 */
	/**
	 * 与HttpServlet的{@code  getLastModified}方法具有相同的约定。 
	 * 如果处理程序类不支持，则可以简单地返回-1。 
	 *  
	 * @param 请求当前的HTTP请求
	 * @param 处理程序处理程序，以使用
	 * @return 给定处理程序的lastModified值
	 * @see  javax.servlet.http.HttpServlet＃getLastModified 
	 * @see  org.springframework.web。 
	 *  servlet.mvc.LastModified＃getLastModified
	 */
	long getLastModified(HttpServletRequest request, Object handler);

}
