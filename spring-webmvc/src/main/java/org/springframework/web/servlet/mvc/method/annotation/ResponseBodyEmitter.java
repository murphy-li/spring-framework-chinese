/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.mvc.method.annotation;

import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.Consumer;

import org.springframework.http.MediaType;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;

/**
 * A controller method return value type for asynchronous request processing
 * where one or more objects are written to the response.
 *
 * <p>While {@link org.springframework.web.context.request.async.DeferredResult}
 * is used to produce a single result, a {@code ResponseBodyEmitter} can be used
 * to send multiple objects where each object is written with a compatible
 * {@link org.springframework.http.converter.HttpMessageConverter}.
 *
 * <p>Supported as a return type on its own as well as within a
 * {@link org.springframework.http.ResponseEntity}.
 *
 * <pre>
 * &#064;RequestMapping(value="/stream", method=RequestMethod.GET)
 * public ResponseBodyEmitter handle() {
 * 	   ResponseBodyEmitter emitter = new ResponseBodyEmitter();
 * 	   // Pass the emitter to another component...
 * 	   return emitter;
 * }
 *
 * // in another thread
 * emitter.send(foo1);
 *
 * // and again
 * emitter.send(foo2);
 *
 * // and done
 * emitter.complete();
 * </pre>
 *
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @since 4.2
 */
/**
 * 一种用于异步请求处理的控制器方法返回值类型，其中一个或多个对象被写入响应。 
 *  <p>虽然{@link  org.springframework.web.context.request.async.DeferredResult}用于产生单个结果，但是{@code  ResponseBodyEmitter}可以用于发送多个对象，其中每个对象都是用兼容的{@link  org.springframework.http.converter.HttpMessageConverter}编写。 
 *  <p>本身以及在{@link  org.springframework.http.ResponseEntity}中都被支持作为返回类型。 
 *  <pre> @RequestMapping（value ="/ stream"，method = RequestMethod.GET）公共ResponseBodyEmitter handle（）{ResponseBodyEmitter generator = new ResponseBodyEmitter（）; //将发射器传递给另一个组件...返回发射器； 
 *  } //在另一个线程内端generator.send（foo1）; //再次发射器.send（foo2）; //并且完成了generator.complete（）; </ pre> @author  Rossen Stoyanchev @author  Juergen Hoeller @始于4.2
 */
public class ResponseBodyEmitter {

	@Nullable
	private final Long timeout;

	@Nullable
	private Handler handler;

	/** Store send data before handler is initialized. */
	/**
	 * 在处理程序初始化之前存储发送数据。 
	 * 
	 */
	private final Set<DataWithMediaType> earlySendAttempts = new LinkedHashSet<>(8);

	/** Store complete invocation before handler is initialized. */
	/**
	 * 在初始化处理程序之前，存储完整的调用。 
	 * 
	 */
	private boolean complete;

	/** Store completeWithError invocation before handler is initialized. */
	/**
	 * 在初始化处理程序之前，存储completeWithError调用。 
	 * 
	 */
	@Nullable
	private Throwable failure;

	/**
	 * After an IOException on send, the servlet container will provide an onError
	 * callback that we'll handle as completeWithError (on container thread).
	 * We use this flag to ignore competing attempts to completeWithError by
	 * the application via try-catch. */
	/**
	 * 发送IOException之后，servlet容器将提供一个onError回调，我们将其作为completeWithError处理（在容器线程上）。 
	 * 我们使用此标志来忽略应用程序通过try-catch进行的completeWithError竞争尝试。 
	 * 
	 */
	private boolean sendFailed;

	private final DefaultCallback timeoutCallback = new DefaultCallback();

	private final ErrorCallback errorCallback = new ErrorCallback();

	private final DefaultCallback completionCallback = new DefaultCallback();


	/**
	 * Create a new ResponseBodyEmitter instance.
	 */
	/**
	 * 创建一个新的ResponseBodyEmitter实例。 
	 * 
	 */
	public ResponseBodyEmitter() {
		this.timeout = null;
	}

	/**
	 * Create a ResponseBodyEmitter with a custom timeout value.
	 * <p>By default not set in which case the default configured in the MVC
	 * Java Config or the MVC namespace is used, or if that's not set, then the
	 * timeout depends on the default of the underlying server.
	 * @param timeout timeout value in milliseconds
	 */
	/**
	 * 创建具有自定义超时值的ResponseBodyEmitter。 
	 *  <p>默认情况下不设置默认值，在这种情况下，将使用MVC Java Config或MVC名称空间中配置的默认值，或者如果未设置默认值，则超时时间取决于基础服务器的默认值。 
	 *  
	 * @param 超时超时值（以毫秒为单位）
	 */
	public ResponseBodyEmitter(Long timeout) {
		this.timeout = timeout;
	}


	/**
	 * Return the configured timeout value, if any.
	 */
	/**
	 * 返回配置的超时值（如果有）。 
	 * 
	 */
	@Nullable
	public Long getTimeout() {
		return this.timeout;
	}


	synchronized void initialize(Handler handler) throws IOException {
		this.handler = handler;

		for (DataWithMediaType sendAttempt : this.earlySendAttempts) {
			sendInternal(sendAttempt.getData(), sendAttempt.getMediaType());
		}
		this.earlySendAttempts.clear();

		if (this.complete) {
			if (this.failure != null) {
				this.handler.completeWithError(this.failure);
			}
			else {
				this.handler.complete();
			}
		}
		else {
			this.handler.onTimeout(this.timeoutCallback);
			this.handler.onError(this.errorCallback);
			this.handler.onCompletion(this.completionCallback);
		}
	}

	/**
	 * Invoked after the response is updated with the status code and headers,
	 * if the ResponseBodyEmitter is wrapped in a ResponseEntity, but before the
	 * response is committed, i.e. before the response body has been written to.
	 * <p>The default implementation is empty.
	 */
	/**
	 * 如果将ResponseBodyEmitter包装在ResponseEntity中，但是在提交响应之前（即在写入响应主体之前），则使用状态码和标头更新响应后调用。 
	 *  <p>默认实现为空。 
	 * 
	 */
	protected void extendResponse(ServerHttpResponse outputMessage) {
	}

	/**
	 * Write the given object to the response.
	 * <p>If any exception occurs a dispatch is made back to the app server where
	 * Spring MVC will pass the exception through its exception handling mechanism.
	 * <p><strong>Note:</strong> if the send fails with an IOException, you do
	 * not need to call {@link #completeWithError(Throwable)} in order to clean
	 * up. Instead the Servlet container creates a notification that results in a
	 * dispatch where Spring MVC invokes exception resolvers and completes
	 * processing.
	 * @param object the object to write
	 * @throws IOException raised when an I/O error occurs
	 * @throws java.lang.IllegalStateException wraps any other errors
	 */
	/**
	 * 将给定对象写入响应。 
	 *  <p>如果发生任何异常，则将分派回应用服务器，Spring MVC将在该服务器上通过其异常处理机制传递异常。 
	 *  <p> <strong>注意</ strong>：如果发送失败并出现IOException，则无需调用{@link  #completeWithError（Throwable）}进行清理。 
	 * 取而代之的是，Servlet容器创建一个通知，该通知将导致调度，在该调度中Spring MVC调用异常解析器并完成处理。 
	 *  
	 * @param 对象要写入的对象
	 * @throws 发生I / O错误时引发的IOException 
	 * @throws  java.lang.IllegalStateException包装任何其他错误
	 */
	public void send(Object object) throws IOException {
		send(object, null);
	}

	/**
	 * Overloaded variant of {@link #send(Object)} that also accepts a MediaType
	 * hint for how to serialize the given Object.
	 * @param object the object to write
	 * @param mediaType a MediaType hint for selecting an HttpMessageConverter
	 * @throws IOException raised when an I/O error occurs
	 * @throws java.lang.IllegalStateException wraps any other errors
	 */
	/**
	 * {@link  #send（Object）}的重载变体，它也接受有关如何序列化给定Object的MediaType提示。 
	 *  
	 * @param 对象要写入的对象
	 * @param  mediaType用于选择HttpMessageConverter的MediaType提示
	 * @throws 发生I / O错误时引发的IOException 
	 * @throws  java.lang.IllegalStateException包装了其他任何错误
	 */
	public synchronized void send(Object object, @Nullable MediaType mediaType) throws IOException {
		Assert.state(!this.complete, "ResponseBodyEmitter is already set complete");
		sendInternal(object, mediaType);
	}

	private void sendInternal(Object object, @Nullable MediaType mediaType) throws IOException {
		if (this.handler != null) {
			try {
				this.handler.send(object, mediaType);
			}
			catch (IOException ex) {
				this.sendFailed = true;
				throw ex;
			}
			catch (Throwable ex) {
				this.sendFailed = true;
				throw new IllegalStateException("Failed to send " + object, ex);
			}
		}
		else {
			this.earlySendAttempts.add(new DataWithMediaType(object, mediaType));
		}
	}

	/**
	 * Complete request processing by performing a dispatch into the servlet
	 * container, where Spring MVC is invoked once more, and completes the
	 * request processing lifecycle.
	 * <p><strong>Note:</strong> this method should be called by the application
	 * to complete request processing. It should not be used after container
	 * related events such as an error while {@link #send(Object) sending}.
	 */
	/**
	 * 通过对servlet容器执行调度来完成请求处理，在该容器中再次调用Spring MVC，并完成请求处理生命周期。 
	 *  <p> <strong>注意</ strong>：应用程序应调用此方法以完成请求处理。 
	 * 在与容器相关的事件（例如{@link  #send（Object）发送}发生错误）之后，不应使用它。 
	 * 
	 */
	public synchronized void complete() {
		// Ignore, after send failure
		if (this.sendFailed) {
			return;
		}
		this.complete = true;
		if (this.handler != null) {
			this.handler.complete();
		}
	}

	/**
	 * Complete request processing with an error.
	 * <p>A dispatch is made into the app server where Spring MVC will pass the
	 * exception through its exception handling mechanism. Note however that
	 * at this stage of request processing, the response is committed and the
	 * response status can no longer be changed.
	 * <p><strong>Note:</strong> this method should be called by the application
	 * to complete request processing with an error. It should not be used after
	 * container related events such as an error while
	 * {@link #send(Object) sending}.
	 */
	/**
	 * 完成请求处理并出现错误。 
	 *  <p>将对应用服务器进行调度，Spring MVC将在该服务器中通过其异常处理机制传递异常。 
	 * 但是请注意，在请求处理的这一阶段，响应已提交，并且响应状态不能再更改。 
	 *  <p> <strong>注意</ strong>：应用程序应调用此方法，以完成请求处理并出现错误。 
	 * 在与容器相关的事件（例如{@link  #send（Object）发送}发生错误）之后，不应使用它。 
	 * 
	 */
	public synchronized void completeWithError(Throwable ex) {
		// Ignore, after send failure
		if (this.sendFailed) {
			return;
		}
		this.complete = true;
		this.failure = ex;
		if (this.handler != null) {
			this.handler.completeWithError(ex);
		}
	}

	/**
	 * Register code to invoke when the async request times out. This method is
	 * called from a container thread when an async request times out.
	 */
	/**
	 * 注册代码以在异步请求超时时调用。 
	 * 当异步请求超时时，从容器线程调用此方法。 
	 * 
	 */
	public synchronized void onTimeout(Runnable callback) {
		this.timeoutCallback.setDelegate(callback);
	}

	/**
	 * Register code to invoke for an error during async request processing.
	 * This method is called from a container thread when an error occurred
	 * while processing an async request.
	 * @since 5.0
	 */
	/**
	 * 注册代码以在异步请求处理期间调用错误。 
	 * 在处理异步请求时发生错误时，将从容器线程中调用此方法。 
	 *  @5.0起
	 */
	public synchronized void onError(Consumer<Throwable> callback) {
		this.errorCallback.setDelegate(callback);
	}

	/**
	 * Register code to invoke when the async request completes. This method is
	 * called from a container thread when an async request completed for any
	 * reason including timeout and network error. This method is useful for
	 * detecting that a {@code ResponseBodyEmitter} instance is no longer usable.
	 */
	/**
	 * 注册代码以在异步请求完成时调用。 
	 * 当异步请求由于任何原因（包括超时和网络错误）而完成时，将从容器线程中调用此方法。 
	 * 此方法可用于检测{@code  ResponseBodyEmitter}实例不再可用。 
	 * 
	 */
	public synchronized void onCompletion(Runnable callback) {
		this.completionCallback.setDelegate(callback);
	}


	@Override
	public String toString() {
		return "ResponseBodyEmitter@" + ObjectUtils.getIdentityHexString(this);
	}


	/**
	 * Handle sent objects and complete request processing.
	 */
	/**
	 * 处理发送的对象并完成请求处理。 
	 * 
	 */
	interface Handler {

		void send(Object data, @Nullable MediaType mediaType) throws IOException;

		void complete();

		void completeWithError(Throwable failure);

		void onTimeout(Runnable callback);

		void onError(Consumer<Throwable> callback);

		void onCompletion(Runnable callback);
	}


	/**
	 * A simple holder of data to be written along with a MediaType hint for
	 * selecting a message converter to write with.
	 */
	/**
	 * 一个简单的待写入数据持有人，以及一个MediaType提示，用于选择要写入的消息转换器。 
	 * 
	 */
	public static class DataWithMediaType {

		private final Object data;

		@Nullable
		private final MediaType mediaType;

		public DataWithMediaType(Object data, @Nullable MediaType mediaType) {
			this.data = data;
			this.mediaType = mediaType;
		}

		public Object getData() {
			return this.data;
		}

		@Nullable
		public MediaType getMediaType() {
			return this.mediaType;
		}
	}


	private class DefaultCallback implements Runnable {

		@Nullable
		private Runnable delegate;

		public void setDelegate(Runnable delegate) {
			this.delegate = delegate;
		}

		@Override
		public void run() {
			ResponseBodyEmitter.this.complete = true;
			if (this.delegate != null) {
				this.delegate.run();
			}
		}
	}


	private class ErrorCallback implements Consumer<Throwable> {

		@Nullable
		private Consumer<Throwable> delegate;

		public void setDelegate(Consumer<Throwable> callback) {
			this.delegate = callback;
		}

		@Override
		public void accept(Throwable t) {
			ResponseBodyEmitter.this.complete = true;
			if (this.delegate != null) {
				this.delegate.accept(t);
			}
		}
	}

}
