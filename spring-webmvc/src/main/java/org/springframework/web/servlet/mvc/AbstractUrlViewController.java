/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.mvc;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.Assert;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.support.RequestContextUtils;
import org.springframework.web.util.UrlPathHelper;

/**
 * Abstract base class for {@code Controllers} that return a view name
 * based on the request URL.
 *
 * <p>Provides infrastructure for determining view names from URLs and configurable
 * URL lookup. For information on the latter, see {@code alwaysUseFullPath}
 * and {@code urlDecode} properties.
 *
 * @author Juergen Hoeller
 * @since 1.2.6
 * @see #setAlwaysUseFullPath
 * @see #setUrlDecode
 */
/**
 * {@code  Controllers}的抽象基类，该基类基于请求URL返回视图名称。 
 *  <p>提供用于从URL和可配置的URL查找确定视图名称的基础结构。 
 * 有关后者的信息，请参见{@code  alwaysUseFullPath}和{@code  urlDecode}属性。 
 *  @author  Juergen Hoeller @始于1.2.6 
 * @see  #setAlwaysUseFullPath 
 * @see  #setUrlDecode
 */
public abstract class AbstractUrlViewController extends AbstractController {

	private UrlPathHelper urlPathHelper = new UrlPathHelper();


	/**
	 * Set if URL lookup should always use full path within current servlet
	 * context. Else, the path within the current servlet mapping is used
	 * if applicable (i.e. in the case of a ".../*" servlet mapping in web.xml).
	 * Default is "false".
	 * @see org.springframework.web.util.UrlPathHelper#setAlwaysUseFullPath
	 */
	/**
	 * 设置URL查找是否应始终在当前servlet上下文中使用完整路径。 
	 * 另外，如果适用，则使用当前servlet映射中的路径（即，在web.xml中为"..."servlet映射的情况下）。 
	 * 默认值为"false"。 
	 *  
	 * @see  org.springframework.web.util.UrlPathHelper＃setAlwaysUseFullPath
	 */
	public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {
		this.urlPathHelper.setAlwaysUseFullPath(alwaysUseFullPath);
	}

	/**
	 * Set if context path and request URI should be URL-decoded.
	 * Both are returned <i>undecoded</i> by the Servlet API,
	 * in contrast to the servlet path.
	 * <p>Uses either the request encoding or the default encoding according
	 * to the Servlet spec (ISO-8859-1).
	 * @see org.springframework.web.util.UrlPathHelper#setUrlDecode
	 */
	/**
	 * 设置是否应该对上下文路径和请求URI进行URL解码。 
	 * 与Servlet路径相反，两者都是由Servlet API <i> unecoded </ i>返回的。 
	 *  <p>根据Servlet规范（ISO-8859-1）使用请求编码或默认编码。 
	 *  
	 * @see  org.springframework.web.util.UrlPathHelper＃setUrlDecode
	 */
	public void setUrlDecode(boolean urlDecode) {
		this.urlPathHelper.setUrlDecode(urlDecode);
	}

	/**
	 * Set if ";" (semicolon) content should be stripped from the request URI.
	 * @see org.springframework.web.util.UrlPathHelper#setRemoveSemicolonContent(boolean)
	 */
	/**
	 * 设置是否为";"（分号）内容应从请求URI中删除。 
	 *  
	 * @see  org.springframework.web.util.UrlPathHelper＃setRemoveSemicolonContent（boolean）
	 */
	public void setRemoveSemicolonContent(boolean removeSemicolonContent) {
		this.urlPathHelper.setRemoveSemicolonContent(removeSemicolonContent);
	}

	/**
	 * Set the UrlPathHelper to use for the resolution of lookup paths.
	 * <p>Use this to override the default UrlPathHelper with a custom subclass,
	 * or to share common UrlPathHelper settings across multiple MethodNameResolvers
	 * and HandlerMappings.
	 * @see org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#setUrlPathHelper
	 */
	/**
	 * 设置UrlPathHelper以用于解析查找路径。 
	 *  <p>使用它使用自定义子类覆盖默认的UrlPathHelper，或在多个MethodNameResolvers和HandlerMappings之间共享通用的UrlPathHelper设置。 
	 *  
	 * @see  org.springframework.web.servlet.handler.AbstractUrlHandlerMapping＃setUrlPathHelper
	 */
	public void setUrlPathHelper(UrlPathHelper urlPathHelper) {
		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null");
		this.urlPathHelper = urlPathHelper;
	}

	/**
	 * Return the UrlPathHelper to use for the resolution of lookup paths.
	 */
	/**
	 * 返回UrlPathHelper以用于解析查找路径。 
	 * 
	 */
	protected UrlPathHelper getUrlPathHelper() {
		return this.urlPathHelper;
	}


	/**
	 * Retrieves the URL path to use for lookup and delegates to
	 * {@link #getViewNameForRequest}. Also adds the content of
	 * {@link RequestContextUtils#getInputFlashMap} to the model.
	 */
	/**
	 * 检索用于查找的URL路径，并将其委托给{@link  #getViewNameForRequest}。 
	 * 还将{@link  RequestContextUtils＃getInputFlashMap}的内容添加到模型中。 
	 * 
	 */
	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) {
		String viewName = getViewNameForRequest(request);
		if (logger.isTraceEnabled()) {
			logger.trace("Returning view name '" + viewName + "'");
		}
		return new ModelAndView(viewName, RequestContextUtils.getInputFlashMap(request));
	}

	/**
	 * Return the name of the view to render for this request, based on the
	 * given lookup path. Called by {@link #handleRequestInternal}.
	 * @param request current HTTP request
	 * @return a view name for this request (never {@code null})
	 * @see #handleRequestInternal
	 * @see #setAlwaysUseFullPath
	 * @see #setUrlDecode
	 */
	/**
	 * 根据给定的查找路径，返回要为此请求呈现的视图的名称。 
	 * 由{@link  #handleRequestInternal}调用。 
	 *  
	 * @param 请求当前HTTP请求
	 * @return 此请求的视图名称（从不{@code  null}）
	 * @see  #handleRequestInternal 
	 * @see  #setAlwaysUseFullPath 
	 * @see  #setUrlDecode
	 */
	protected abstract String getViewNameForRequest(HttpServletRequest request);

}
