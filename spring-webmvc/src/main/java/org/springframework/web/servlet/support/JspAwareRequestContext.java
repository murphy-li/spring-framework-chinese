/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.support;

import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.jstl.core.Config;

import org.springframework.lang.Nullable;

/**
 * JSP-aware (and JSTL-aware) subclass of RequestContext, allowing for
 * population of the context from a {@code javax.servlet.jsp.PageContext}.
 *
 * <p>This context will detect a JSTL locale attribute in page/request/session/application
 * scope, in addition to the fallback locale strategy provided by the base class.
 *
 * @author Juergen Hoeller
 * @since 1.1.4
 * @see #getFallbackLocale
 */
/**
 * RequestContext的JSP感知（和JSTL感知）子类，允许从{@code  javax.servlet.jsp.PageContext}填充上下文。 
 *  <p>除了基类提供的后备语言环境策略外，此上下文还将在页面/请求/会话/应用程序范围内检测JSTL语言环境属性。 
 *  @author  Juergen Hoeller @1.1.4起
 * @see  #getFallbackLocale
 */
public class JspAwareRequestContext extends RequestContext {

	private PageContext pageContext;


	/**
	 * Create a new JspAwareRequestContext for the given page context,
	 * using the request attributes for Errors retrieval.
	 * @param pageContext current JSP page context
	 */
	/**
	 * 使用用于错误检索的请求属性，为给定的页面上下文创建一个新的JspAwareRequestContext。 
	 *  
	 * @param  pageContext当前JSP页面上下文
	 */
	public JspAwareRequestContext(PageContext pageContext) {
		this(pageContext, null);
	}

	/**
	 * Create a new JspAwareRequestContext for the given page context,
	 * using the given model attributes for Errors retrieval.
	 * @param pageContext current JSP page context
	 * @param model the model attributes for the current view
	 * (can be {@code null}, using the request attributes for Errors retrieval)
	 */
	/**
	 * 使用给定的错误检索模型属性，为给定的页面上下文创建一个新的JspAwareRequestContext。 
	 *  
	 * @param  pageContext当前JSP页面上下文
	 * @param 为当前视图的模型属性建模（可以为{@code  null}，使用用于错误检索的请求属性）
	 */
	public JspAwareRequestContext(PageContext pageContext, @Nullable Map<String, Object> model) {
		super((HttpServletRequest) pageContext.getRequest(), (HttpServletResponse) pageContext.getResponse(),
				pageContext.getServletContext(), model);
		this.pageContext = pageContext;
	}


	/**
	 * Return the underlying PageContext.
	 * Only intended for cooperating classes in this package.
	 */
	/**
	 * 返回基础的PageContext。 
	 * 仅用于此包中的合作类。 
	 * 
	 */
	protected final PageContext getPageContext() {
		return this.pageContext;
	}

	/**
	 * This implementation checks for a JSTL locale attribute in page,
	 * request, session or application scope; if not found, returns the
	 * {@code HttpServletRequest.getLocale()}.
	 */
	/**
	 * 此实现检查页面，请求，会话或应用程序范围内的JSTL语言环境属性； 
	 * 如果找不到，则返回{@code  HttpServletRequest.getLocale（）}。 
	 * 
	 */
	@Override
	protected Locale getFallbackLocale() {
		if (jstlPresent) {
			Locale locale = JstlPageLocaleResolver.getJstlLocale(getPageContext());
			if (locale != null) {
				return locale;
			}
		}
		return getRequest().getLocale();
	}

	/**
	 * This implementation checks for a JSTL time zone attribute in page,
	 * request, session or application scope; if not found, returns {@code null}.
	 */
	/**
	 * 此实现检查页面，请求，会话或应用程序范围内的JSTL时区属性； 
	 * 如果未找到，则返回{@code  null}。 
	 * 
	 */
	@Override
	protected TimeZone getFallbackTimeZone() {
		if (jstlPresent) {
			TimeZone timeZone = JstlPageLocaleResolver.getJstlTimeZone(getPageContext());
			if (timeZone != null) {
				return timeZone;
			}
		}
		return null;
	}


	/**
	 * Inner class that isolates the JSTL dependency.
	 * Just called to resolve the fallback locale if the JSTL API is present.
	 */
	/**
	 * 隔离JSTL依赖关系的内部类。 
	 * 仅在存在JSTL API的情况下被调用来解析后备语言环境。 
	 * 
	 */
	private static class JstlPageLocaleResolver {

		@Nullable
		public static Locale getJstlLocale(PageContext pageContext) {
			Object localeObject = Config.find(pageContext, Config.FMT_LOCALE);
			return (localeObject instanceof Locale ? (Locale) localeObject : null);
		}

		@Nullable
		public static TimeZone getJstlTimeZone(PageContext pageContext) {
			Object timeZoneObject = Config.find(pageContext, Config.FMT_TIME_ZONE);
			return (timeZoneObject instanceof TimeZone ? (TimeZone) timeZoneObject : null);
		}
	}

}
