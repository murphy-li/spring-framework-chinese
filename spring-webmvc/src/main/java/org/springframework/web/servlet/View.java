/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.lang.Nullable;

/**
 * MVC View for a web interaction. Implementations are responsible for rendering
 * content, and exposing the model. A single view exposes multiple model attributes.
 *
 * <p>This class and the MVC approach associated with it is discussed in Chapter 12 of
 * <a href="https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/">Expert One-On-One J2EE Design and Development</a>
 * by Rod Johnson (Wrox, 2002).
 *
 * <p>View implementations may differ widely. An obvious implementation would be
 * JSP-based. Other implementations might be XSLT-based, or use an HTML generation library.
 * This interface is designed to avoid restricting the range of possible implementations.
 *
 * <p>Views should be beans. They are likely to be instantiated as beans by a ViewResolver.
 * As this interface is stateless, view implementations should be thread-safe.
 *
 * @author Rod Johnson
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @see org.springframework.web.servlet.view.AbstractView
 * @see org.springframework.web.servlet.view.InternalResourceView
 */
/**
 * MVC视图用于Web交互。 
 * 实现负责呈现内容并公开模型。 
 * 单个视图公开了多个模型属性。 
 *  <p>该类及其相关的MVC方法在<a href="https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/">专家一- Rod Johnson的On-One J2EE设计与开发</a>（Wrox，2002年）。 
 *  <p>视图实现可能有很大的不同。 
 * 一个明显的实现是基于JSP的。 
 * 其他实现可能基于XSLT，或者使用HTML生成库。 
 * 该接口旨在避免限制可能的实现范围。 
 *  <p>视图应为bean。 
 * 它们很可能被ViewResolver实例化为bean。 
 * 由于此接口是无状态的，因此视图实现应该是线程安全的。 
 *  @author  Rod Johnson @author  Arjen Poutsma @author  Rossen Stoyanchev 
 * @see  org.springframework.web.servlet.view.AbstractView 
 * @see  org.springframework.web.servlet.view.InternalResourceView
 */
public interface View {

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the response status code.
	 * <p>Note: This attribute is not required to be supported by all View implementations.
	 * @since 3.0
	 */
	/**
	 * 包含响应状态代码的{@link  HttpServletRequest}属性的名称。 
	 *  <p>注意：并非所有View实现都支持此属性。 
	 *  @从3.0起
	 */
	String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + ".responseStatus";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains a Map with path variables.
	 * The map consists of String-based URI template variable names as keys and their corresponding
	 * Object-based values -- extracted from segments of the URL and type converted.
	 * <p>Note: This attribute is not required to be supported by all View implementations.
	 * @since 3.1
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含具有路径变量的Map。 
	 * 该映射由基于字符串的URI模板变量名称（作为键）和它们相应的基于对象的值组成-从URL的片段中提取并进行类型转换。 
	 *  <p>注意：并非所有View实现都支持此属性。 
	 *  @3.1起
	 */
	String PATH_VARIABLES = View.class.getName() + ".pathVariables";

	/**
	 * The {@link org.springframework.http.MediaType} selected during content negotiation,
	 * which may be more specific than the one the View is configured with. For example:
	 * "application/vnd.example-v1+xml" vs "application/*+xml".
	 * @since 3.2
	 */
	/**
	 * 在内容协商期间选择的{@link  org.springframework.http.MediaType}，可能比配置了View的具体得多。 
	 * 例如："application / vnd.example-v1 + xml"与"application + xml"。 
	 *  @3.2起
	 */
	String SELECTED_CONTENT_TYPE = View.class.getName() + ".selectedContentType";


	/**
	 * Return the content type of the view, if predetermined.
	 * <p>Can be used to check the view's content type upfront,
	 * i.e. before an actual rendering attempt.
	 * @return the content type String (optionally including a character set),
	 * or {@code null} if not predetermined
	 */
	/**
	 * 返回视图的内容类型（如果已预定）。 
	 *  <p>可用于预先检查视图的内容类型，即在实际渲染尝试之前。 
	 *  
	 * @return 内容类型String（可选地包括字符集），或者{@code  null}（如果未预先确定）
	 */
	@Nullable
	default String getContentType() {
		return null;
	}

	/**
	 * Render the view given the specified model.
	 * <p>The first step will be preparing the request: In the JSP case, this would mean
	 * setting model objects as request attributes. The second step will be the actual
	 * rendering of the view, for example including the JSP via a RequestDispatcher.
	 * @param model a Map with name Strings as keys and corresponding model
	 * objects as values (Map can also be {@code null} in case of empty model)
	 * @param request current HTTP request
	 * @param response he HTTP response we are building
	 * @throws Exception if rendering failed
	 */
	/**
	 * 渲染给定指定模型的视图。 
	 *  <p>第一步将是准备请求：在JSP情况下，这意味着将模型对象设置为请求属性。 
	 * 第二步将是视图的实际呈现，例如，通过RequestDispatcher包含JSP。 
	 *  
	 * @param 使用名称字符串作为键并使用相应的模型对象作为值对Map进行建模（如果模型为空，则Map也可以为{@code  null}）。 
	 * @
	 * @param>请求当前HTTP请求
	 * @param 响应我们正在构建的HTTP响应
	 * @throws 如果呈现失败，则异常
	 */
	void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
			throws Exception;

}
