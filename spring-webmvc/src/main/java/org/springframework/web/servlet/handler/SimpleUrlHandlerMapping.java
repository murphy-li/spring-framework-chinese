/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.handler;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.springframework.beans.BeansException;
import org.springframework.util.CollectionUtils;

/**
 * Implementation of the {@link org.springframework.web.servlet.HandlerMapping}
 * interface that maps from URLs to request handler beans. Supports both mapping to bean
 * instances and mapping to bean names; the latter is required for non-singleton handlers.
 *
 * <p>The "urlMap" property is suitable for populating the handler map with
 * bean references, e.g. via the map element in XML bean definitions.
 *
 * <p>Mappings to bean names can be set via the "mappings" property, in a form
 * accepted by the {@code java.util.Properties} class, as follows:
 *
 * <pre class="code">
 * /welcome.html=ticketController
 * /show.html=ticketController</pre>
 *
 * <p>The syntax is {@code PATH=HANDLER_BEAN_NAME}. If the path doesn't begin
 * with a slash, one is prepended.
 *
 * <p>Supports direct matches (given "/test" -&gt; registered "/test") and "*"
 * pattern matches (given "/test" -&gt; registered "/t*"). Note that the default
 * is to map within the current servlet mapping if applicable; see the
 * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the
 * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc.

 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @see #setMappings
 * @see #setUrlMap
 * @see BeanNameUrlHandlerMapping
 */
/**
 * {@link  org.springframework.web.servlet.HandlerMapping}接口的实现，该接口从URL映射到请求处理程序bean。 
 * 支持映射到Bean实例和映射到Bean名称； 
 * 非单事件处理程序则需要后者。 
 *  <p>"urlMap"属性适用于使用Bean引用（例如，通过XML bean定义中的map元素。 
 *  <p>可以通过{mappings"属性以{@code  java.util.Properties}类接受的格式设置对bean名称的映射，如下所示：<pre class ="code"> / welcome。 
 *  html = ticketController /show.html=ticketController </ pre> <p>语法为{@code  PATH = HANDLER_BEAN_NAME}。 
 * 如果路径不是以斜杠开头，则在前面加上一个斜杠。 
 *  <p>支持直接匹配（给定为"/ test"->已注册的"/ test"）和""模式匹配（给定为"/ test"->已注册"/ t"）。 
 * 请注意，如果适用，默认值是在当前servlet映射内进行映射。 
 * 请参见{@link  #setAlwaysUseFullPath"alwaysUseFullPath"}属性。 
 * 有关模式选项的详细信息，请参见{@link  org.springframework.util.AntPathMatcher} javadoc。 
 *  @author  Rod Johnson @author  Juergen Hoeller @author  Sam Brannen 
 * @see  #setMappings 
 * @see  #setUrlMap 
 * @see  BeanNameUrlHandlerMapping
 */
public class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping {

	private final Map<String, Object> urlMap = new LinkedHashMap<>();


	/**
	 * Create a {@code SimpleUrlHandlerMapping} with default settings.
	 */
	/**
	 * 使用默认设置创建一个{@code  SimpleUrlHandlerMapping}。 
	 * 
	 */
	public SimpleUrlHandlerMapping() {
	}

	/**
	 * Create a {@code SimpleUrlHandlerMapping} using the supplied URL map.
	 * @param urlMap map with URL paths as keys and handler beans (or handler
	 * bean names) as values
	 * @since 5.2
	 * @see #setUrlMap(Map)
	 */
	/**
	 * 使用提供的URL映射创建{@code  SimpleUrlHandlerMapping}。 
	 *  
	 * @param  urlMap映射，其中URL路径作为键，而处理程序bean（或处理程序bean名称）作为值@since 5.2 
	 * @see  #setUrlMap（Map）
	 */
	public SimpleUrlHandlerMapping(Map<String, ?> urlMap) {
		setUrlMap(urlMap);
	}

	/**
	 * Create a {@code SimpleUrlHandlerMapping} using the supplied URL map and order.
	 * @param urlMap map with URL paths as keys and handler beans (or handler
	 * bean names) as values
	 * @param order the order value for this {@code SimpleUrlHandlerMapping}
	 * @since 5.2
	 * @see #setUrlMap(Map)
	 * @see #setOrder(int)
	 */
	/**
	 * 使用提供的URL映射和顺序创建一个{@code  SimpleUrlHandlerMapping}。 
	 *  
	 * @param  urlMap映射，其中URL路径作为键，而处理程序bean（或处理程序bean名称）作为值
	 * @param 对此{@code  SimpleUrlHandlerMapping}的订单值进行排序@@5.2起
	 * @see  #setUrlMap（Map ）
	 * @see  #setOrder（int）
	 */
	public SimpleUrlHandlerMapping(Map<String, ?> urlMap, int order) {
		setUrlMap(urlMap);
		setOrder(order);
	}


	/**
	 * Map URL paths to handler bean names.
	 * This is the typical way of configuring this HandlerMapping.
	 * <p>Supports direct URL matches and Ant-style pattern matches. For syntax
	 * details, see the {@link org.springframework.util.AntPathMatcher} javadoc.
	 * @param mappings properties with URLs as keys and bean names as values
	 * @see #setUrlMap
	 */
	/**
	 * 将URL路径映射到处理程序bean名称。 
	 * 这是配置此HandlerMapping的典型方法。 
	 *  <p>支持直接URL匹配和Ant样式模式匹配。 
	 * 有关语法的详细信息，请参见{@link  org.springframework.util.AntPathMatcher} Javadoc。 
	 *  
	 * @param 使用URL作为键和Bean名称作为值映射属性
	 * @see  #setUrlMap
	 */
	public void setMappings(Properties mappings) {
		CollectionUtils.mergePropertiesIntoMap(mappings, this.urlMap);
	}

	/**
	 * Set a Map with URL paths as keys and handler beans (or handler bean names)
	 * as values. Convenient for population with bean references.
	 * <p>Supports direct URL matches and Ant-style pattern matches. For syntax
	 * details, see the {@link org.springframework.util.AntPathMatcher} javadoc.
	 * @param urlMap map with URLs as keys and beans as values
	 * @see #setMappings
	 */
	/**
	 * 设置一个映射，将URL路径作为键，并将处理程序bean（或处理程序bean名称）作为值。 
	 * 方便使用bean引用进行填充。 
	 *  <p>支持直接URL匹配和Ant样式模式匹配。 
	 * 有关语法的详细信息，请参见{@link  org.springframework.util.AntPathMatcher} Javadoc。 
	 *  
	 * @param  urlMap映射，其中URL作为键，而bean作为值
	 * @see  #setMappings
	 */
	public void setUrlMap(Map<String, ?> urlMap) {
		this.urlMap.putAll(urlMap);
	}

	/**
	 * Allow Map access to the URL path mappings, with the option to add or
	 * override specific entries.
	 * <p>Useful for specifying entries directly, for example via "urlMap[myKey]".
	 * This is particularly useful for adding or overriding entries in child
	 * bean definitions.
	 */
	/**
	 * 允许地图访问URL路径映射，并带有添加或覆盖特定条目的选项。 
	 *  <p>可用于直接指定条目，例如通过"urlMap [myKey]"。 
	 * 这对于在子bean定义中添加或覆盖条目特别有用。 
	 * 
	 */
	public Map<String, ?> getUrlMap() {
		return this.urlMap;
	}


	/**
	 * Calls the {@link #registerHandlers} method in addition to the
	 * superclass's initialization.
	 */
	/**
	 * 除了超类的初始化之外，还调用{@link  #registerHandlers}方法。 
	 * 
	 */
	@Override
	public void initApplicationContext() throws BeansException {
		super.initApplicationContext();
		registerHandlers(this.urlMap);
	}

	/**
	 * Register all handlers specified in the URL map for the corresponding paths.
	 * @param urlMap a Map with URL paths as keys and handler beans or bean names as values
	 * @throws BeansException if a handler couldn't be registered
	 * @throws IllegalStateException if there is a conflicting handler registered
	 */
	/**
	 * 注册URL映射中为相应路径指定的所有处理程序。 
	 *  
	 * @param  urlMap一个以URL路径作为键并将处理程序Bean或Bean名称作为值的Map 
	 * @throws  BeansException如果无法注册处理程序
	 * @throws  IllegalStateException如果注册了冲突的处理程序
	 */
	protected void registerHandlers(Map<String, Object> urlMap) throws BeansException {
		if (urlMap.isEmpty()) {
			logger.trace("No patterns in " + formatMappingName());
		}
		else {
			urlMap.forEach((url, handler) -> {
				// Prepend with slash if not already present.
				if (!url.startsWith("/")) {
					url = "/" + url;
				}
				// Remove whitespace from handler bean name.
				if (handler instanceof String) {
					handler = ((String) handler).trim();
				}
				registerHandler(url, handler);
			});
			if (logger.isDebugEnabled()) {
				List<String> patterns = new ArrayList<>();
				if (getRootHandler() != null) {
					patterns.add("/");
				}
				if (getDefaultHandler() != null) {
					patterns.add("/**");
				}
				patterns.addAll(getHandlerMap().keySet());
				logger.debug("Patterns " + patterns + " in " + formatMappingName());
			}
		}
	}

}
