/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.tags.form;

import javax.servlet.jsp.JspException;

import org.springframework.web.bind.WebDataBinder;

/**
 * The {@code <checkboxes>} tag renders multiple HTML 'input' tags with type 'checkbox'.
 * Intended to be used with a Collection as the {@link #getItems()} bound value.
 *
 * <p>
 * <table>
 * <caption>Attribute Summary</caption>
 * <thead>
 * <tr>
 * <th class="colFirst">Attribute</th>
 * <th class="colOne">Required?</th>
 * <th class="colOne">Runtime Expression?</th>
 * <th class="colLast">Description</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr class="altColor">
 * <td><p>accesskey</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>cssClass</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>cssErrorClass</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute. Used when the bound field has errors.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>cssStyle</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>delimiter</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Delimiter to use between each 'input' tag with type 'checkbox'.
 * There is no delimiter by default.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>dir</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>disabled</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute. Setting the value of this attribute to 'true'
 * will disable the HTML element.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>element</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Specifies the HTML element that is used to enclose each 'input' tag with
 * type 'checkbox'. Defaults to 'span'.</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>htmlEscape</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Enable/disable HTML escaping of rendered values.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>id</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>itemLabel</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Value to be displayed as part of the 'input' tags with type 'checkbox'</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>items</p></td>
 * <td><p>true</p></td>
 * <td><p>true</p></td>
 * <td><p>The Collection, Map or array of objects used to generate the 'input' tags
 * with type 'checkbox'</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>itemValue</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Name of the property mapped to 'value' attribute of the 'input' tags with
 * type 'checkbox'</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>lang</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onblur</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onchange</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onclick</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>ondblclick</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onfocus</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onkeydown</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onkeypress</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onkeyup</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onmousedown</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onmousemove</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onmouseout</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onmouseover</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onmouseup</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>path</p></td>
 * <td><p>true</p></td>
 * <td><p>true</p></td>
 * <td><p>Path to property for data binding</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>tabindex</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>title</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * </tbody>
 * </table>
 *
 * @author Thomas Risberg
 * @author Juergen Hoeller
 * @author Mark Fisher
 * @since 2.5
 */
/**
 * {<< @code >> <checkboxes>}标签呈现类型为'checkbox'的多个HTML'input'标签。 
 * 打算与Collection一起用作{<< @link >> #getItems（）}绑定值。 
 *  <p> <表> <标题>属性摘要</标题> <thead> <tr> <th class ="colFirst">属性</ th> <th class ="colOne">必需？</ th> <th class ="colOne">运行时表达式？</ th> <th class ="colLast">描述</ th> </ tr> </ thead> <tbody> <tr class ="altColor"> <td> <p > accesskey </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性< / p> </ td> </ tr> <tr class ="rowColor"> <td> <p> cssClass </ p> </ td> <td> <p> false </ p> </ td> < td> <p> true </ p> </ td> <td> <p> HTML可选属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> cssErrorClass </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML可选属性。 
 *  </ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> cssStyle </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML可选属性</ p> </ td> </ tr> <tr class ="altColor "> <td> <p>定界符</ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>在类型为"复选框"的每个"输入"标记之间使用的分隔符。 
 * 默认情况下没有定界符。 
 * </ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> dir </ p> </ td> <td> <p> false < / p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p>禁用</ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> < p> HTML可选属性。 
 * 将此属性的值设置为'true'将禁用HTML元素。 
 * </ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> element </ p> </ td > <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>指定用于封装每个"输入"的HTML元素类型为"复选框"的代码
 */
/**
 * 默认值为"span"。 
 * </ p> </ td> </ tr> <tr class ="altColor"> <td> <p> htmlEscape </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>启用/禁用呈现值的HTML转义。 
 * </ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> id </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td > <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> itemLabel </ p> </ td> <td> <p > false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>要显示为类型为"复选框"的"输入"标签一部分的值</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p>项目</ p> </ td> <td> <p> true </ p> </ td> <td > <p> true </ p> </ td> <td> <p>用于生成类型为"复选框"的"input"标签的对象的集合，映射或数组</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> itemValue </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p > </ td> <td> <p>映射到'input'标签的'value'属性的属性名称，类型为'checkbox'</ p> </ td> </ tr> <tr class ="rowColor "> <td> <p> lang </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onblur </ p> </ td> <td> < p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr类="rowColor"> <td> <p> onchange </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onclick </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> ondblclick </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td > <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onfocus </ p> </ td> <td> <p> false < / p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> onkeydown </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> < p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onkeypress </ p> </ td> <td> <p> false </ p > </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColo r"> <td> <p> onkeyup </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td > <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onmousedown </ p> </ td> <td> <p> false < / p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> onmoousemove </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> < p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onmouseout </ p> </ td> <td> <p> false </ p > </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> < td> <p> onmouseover </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onmouseup </ p> </ td> <td> <p> false </ p> < / td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p>路径</ p> </ td> <td> <p> true </ p> </ td> <td> <p> true </ p> </ td> <td> <p>路径数据绑定属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> tabindex </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p>标题</ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> </ tbody> </ table> << @author >> Thomas Risberg << @author >> Juergen Hoeller << @author >>马克·费舍尔@since 2.5
 */
@SuppressWarnings("serial")
public class CheckboxesTag extends AbstractMultiCheckedElementTag {

	@Override
	protected int writeTagContent(TagWriter tagWriter) throws JspException {
		super.writeTagContent(tagWriter);

		if (!isDisabled()) {
			// Write out the 'field was present' marker.
			tagWriter.startTag("input");
			tagWriter.writeAttribute("type", "hidden");
			String name = WebDataBinder.DEFAULT_FIELD_MARKER_PREFIX + getName();
			tagWriter.writeAttribute("name", name);
			tagWriter.writeAttribute("value", processFieldValue(name, "on", "hidden"));
			tagWriter.endTag();
		}

		return SKIP_BODY;
	}

	@Override
	protected String getInputType() {
		return "checkbox";
	}

}
