/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.lang.Nullable;

/**
 * Interface for web-based theme resolution strategies that allows for
 * both theme resolution via the request and theme modification via
 * request and response.
 *
 * <p>This interface allows for implementations based on session,
 * cookies, etc. The default implementation is
 * {@link org.springframework.web.servlet.theme.FixedThemeResolver},
 * simply using a configured default theme.
 *
 * <p>Note that this resolver is only responsible for determining the
 * current theme name. The Theme instance for the resolved theme name
 * gets looked up by DispatcherServlet via the respective ThemeSource,
 * i.e. the current WebApplicationContext.
 *
 * <p>Use {@link org.springframework.web.servlet.support.RequestContext#getTheme()}
 * to retrieve the current theme in controllers or views, independent
 * of the actual resolution strategy.
 *
 * @author Jean-Pierre Pawlak
 * @author Juergen Hoeller
 * @since 17.06.2003
 * @see org.springframework.ui.context.Theme
 * @see org.springframework.ui.context.ThemeSource
 */
/**
 * 基于Web的主题解析策略的界面，该界面允许通过请求进行主题解析，以及通过请求和响应进行主题修改。 
 *  <p>此接口允许基于会话，cookie等的实现。 
 * 默认实现为{@link  org.springframework.web.servlet.theme.FixedThemeResolver}，只需使用配置的默认主题即可。 
 *  <p>请注意，此解析器仅负责确定当前主题名称。 
 *  DispatcherServlet通过各自的ThemeSource（即当前的WebApplicationContext）查找解析的主题名称的Theme实例。 
 *  <p>使用{@link  org.springframework.web.servlet.support.RequestContext＃getTheme（）}来检索控制器或​​视图中的当前主题，而与实际的解析策略无关。 
 *  @author  Jean-Pierre Pawlak @author  Juergen Hoeller @2003年6月17日起
 * @see  org.springframework.ui.context.Theme 
 * @see  org.springframework.ui.context.ThemeSource
 */
public interface ThemeResolver {

	/**
	 * Resolve the current theme name via the given request.
	 * Should return a default theme as fallback in any case.
	 * @param request request to be used for resolution
	 * @return the current theme name
	 */
	/**
	 * 通过给定的请求解析当前主题名称。 
	 * 在任何情况下都应返回默认主题作为后备。 
	 *  
	 * @param 请求请求用于解析
	 * @return 当前主题名称
	 */
	String resolveThemeName(HttpServletRequest request);

	/**
	 * Set the current theme name to the given one.
	 * @param request request to be used for theme name modification
	 * @param response response to be used for theme name modification
	 * @param themeName the new theme name ({@code null} or empty to reset it)
	 * @throws UnsupportedOperationException if the ThemeResolver implementation
	 * does not support dynamic changing of the theme
	 */
	/**
	 * 将当前主题名称设置为给定的主题名称。 
	 *  
	 * @param 用于主题名称修改的请求
	 * @param 响应用于主题名称修改的响应
	 * @param  themeName新主题名称（{@code  null}或为空以重置它）<如果ThemeResolver实现不支持动态更改主题，则
	 * @throws> UnsupportedOperationException
	 */
	void setThemeName(HttpServletRequest request, @Nullable HttpServletResponse response, @Nullable String themeName);

}
