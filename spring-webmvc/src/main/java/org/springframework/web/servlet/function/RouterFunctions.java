/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.function;

import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.core.io.Resource;
import org.springframework.util.Assert;

/**
 * <strong>Central entry point to Spring's functional web framework.</strong>
 * Exposes routing functionality, such as to {@linkplain #route() create} a
 * {@code RouterFunction} using a discoverable builder-style API, to
 * {@linkplain #route(RequestPredicate, HandlerFunction) create} a {@code RouterFunction}
 * given a {@code RequestPredicate} and {@code HandlerFunction}, and to do further
 * {@linkplain #nest(RequestPredicate, RouterFunction) subrouting} on an existing routing
 * function.
 *
 * @author Arjen Poutsma
 * @since 5.2
 */
/**
 * <strong> Spring功能性Web框架的中央入口点。 
 * </ strong>公开路由功能，例如使用可发现的构建器样式的API {{@link> plain #route（）create} {{@code> RouterFunction} ，以{给定一个{@code  RequestPredicate}和{@code  HandlerFunction}给{@link  plain #route（RequestPredicate，HandlerFunction）创建一个{@code  RouterFunction}，并做进一步的{<@现有路由功能上的link> plain #nest（RequestPredicate，RouterFunction）子路由}。 
 *  @author  Arjen Poutsma @从5.2开始
 */
public abstract class RouterFunctions {

	private static final Log logger = LogFactory.getLog(RouterFunctions.class);

	/**
	 * Name of the request attribute that contains the {@link ServerRequest}.
	 */
	/**
	 * 包含{@link  ServerRequest}的请求属性的名称。 
	 * 
	 */
	public static final String REQUEST_ATTRIBUTE = RouterFunctions.class.getName() + ".request";

	/**
	 * Name of the request attribute that contains the URI
	 * templates map, mapping variable names to values.
	 */
	/**
	 * 包含URI模板映射的请求属性的名称，将变量名称映射为值。 
	 * 
	 */
	public static final String URI_TEMPLATE_VARIABLES_ATTRIBUTE =
			RouterFunctions.class.getName() + ".uriTemplateVariables";

	/**
	 * Name of the request attribute that contains the matching pattern, as a
	 * {@link org.springframework.web.util.pattern.PathPattern}.
	 */
	/**
	 * 包含匹配模式的请求属性的名称，为{@link  org.springframework.web.util.pattern.PathPattern}。 
	 * 
	 */
	public static final String MATCHING_PATTERN_ATTRIBUTE =
			RouterFunctions.class.getName() + ".matchingPattern";


	/**
	 * Offers a discoverable way to create router functions through a builder-style interface.
	 * @return a router function builder
	 */
	/**
	 * 提供了一种通过生成器样式的界面创建路由器功能的可发现方式。 
	 *  
	 * @return 路由器功能构建器
	 */
	public static Builder route() {
		return new RouterFunctionBuilder();
	}

	/**
	 * Route to the given handler function if the given request predicate applies.
	 * <p>For instance, the following example routes GET requests for "/user" to the
	 * {@code listUsers} method in {@code userController}:
	 * <pre class="code">
	 * RouterFunction&lt;ServerResponse&gt; route =
	 *     RouterFunctions.route(RequestPredicates.GET("/user"), userController::listUsers);
	 * </pre>
	 * @param predicate the predicate to test
	 * @param handlerFunction the handler function to route to if the predicate applies
	 * @param <T> the type of response returned by the handler function
	 * @return a router function that routes to {@code handlerFunction} if
	 * {@code predicate} evaluates to {@code true}
	 * @see RequestPredicates
	 */
	/**
	 * 如果给定的请求谓词适用，则路由到给定的处理函数。 
	 *  <p>例如，以下示例将对"/ user"的GET请求路由到{@code  userController}中的{@code  listUsers}方法：<pre class ="code"> RouterFunction <ServerResponse> route = RouterFunctions.route（RequestPredicates.GET（"/ user"），userController :: listUsers）; </ pre> 
	 * @param 谓词以测试
	 * @param  handlerFunction如果谓词应用了
	 * @param  <T>处理函数返回的响应类型，则路由到该路由的处理函数如果{@code 谓词}评估为{@code  true}，则路由到{@code  handlerFunction}的函数
	 * @see  RequestPredicates
	 */
	public static <T extends ServerResponse> RouterFunction<T> route(
			RequestPredicate predicate, HandlerFunction<T> handlerFunction) {

		return new DefaultRouterFunction<>(predicate, handlerFunction);
	}

	/**
	 * Route to the given router function if the given request predicate applies. This method can be
	 * used to create <strong>nested routes</strong>, where a group of routes share a common path
	 * (prefix), header, or other request predicate.
	 * <p>For instance, the following example first creates a composed route that resolves to
	 * {@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets
	 * nested with a "/user" path predicate, so that GET requests for "/user" will list users,
	 * and POST request for "/user" will create a new user.
	 * <pre class="code">
	 * RouterFunction&lt;ServerResponse&gt; userRoutes =
	 *   RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)
	 *     .andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser);
	 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
	 *   RouterFunctions.nest(RequestPredicates.path("/user"), userRoutes);
	 * </pre>
	 * @param predicate the predicate to test
	 * @param routerFunction the nested router function to delegate to if the predicate applies
	 * @param <T> the type of response returned by the handler function
	 * @return a router function that routes to {@code routerFunction} if
	 * {@code predicate} evaluates to {@code true}
	 * @see RequestPredicates
	 */
	/**
	 * 如果给定的请求谓词适用，则路由到给定的路由器功能。 
	 * 此方法可用于创建<strong>嵌套路由</ strong>，其中一组路由共享一个公共路径（前缀），标头或其他请求谓词。 
	 *  <p>例如，下面的示例首先创建一个组合路由，对于GET，解析为{@code  listUsers}，对于POST，解析为{@code  createUser}。 
	 * 然后，此组合的路由将嵌套一个"/ user"路径谓词，以便对"/ user"的GET请求将列出用户，而对"/ user"的POST请求将创建一个新用户。 
	 *  <pre class ="code"> RouterFunction <ServerResponse> userRoutes = RouterFunctions.route（RequestPredicates.method（HttpMethod.GET），this :: listUsers）andRoute（RequestPredicates.method（HttpMethod.POST），this :: createUser）; RouterFunction <ServerResponse> nestedRoute = RouterFunctions.nest（RequestPredicates.path（"/ user"），userRoutes）; </ pre> 
	 * @param 谓词要测试
	 * @param  routerFunction如果谓词应用了
	 * @param  <T>处理程序函数
	 * @return 返回的响应类型，则将嵌套的路由器函数委托给它如果{@code 谓词}评估为{@code  true}，则路由到{@code  routerFunction}的路由器函数
	 */
	public static <T extends ServerResponse> RouterFunction<T> nest(
			RequestPredicate predicate, RouterFunction<T> routerFunction) {

		return new DefaultNestedRouterFunction<>(predicate, routerFunction);
	}

	/**
	 * Route requests that match the given pattern to resources relative to the given root location.
	 * For instance
	 * <pre class="code">
	 * Resource location = new FileSystemResource("public-resources/");
	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);
     * </pre>
	 * @param pattern the pattern to match
	 * @param location the location directory relative to which resources should be resolved
	 * @return a router function that routes to resources
	 * @see #resourceLookupFunction(String, Resource)
	 */
	/**
	 * 将与给定模式匹配的请求路由到相对于给定根位置的资源。 
	 * 例如<pre class ="code">资源位置= new FileSystemResource（"public-resources /"）; RouterFunction <ServerResponse>资源= RouterFunctions.resources（"/ resources"，location）; </ pre> 
	 * @param 模式化模式以匹配
	 * @param 位置相对应解析资源的位置目录
	 * @return 路由到资源的路由器功能
	 * @see  #resourceLookupFunction（String，Resource）
	 */
	public static RouterFunction<ServerResponse> resources(String pattern, Resource location) {
		return resources(resourceLookupFunction(pattern, location));
	}

	/**
	 * Returns the resource lookup function used by {@link #resources(String, Resource)}.
	 * The returned function can be {@linkplain Function#andThen(Function) composed} on, for
	 * instance to return a default resource when the lookup function does not match:
	 * <pre class="code">
	 * Optional&lt;Resource&gt; defaultResource = Optional.of(new ClassPathResource("index.html"));
	 * Function&lt;ServerRequest, Optional&lt;Resource&gt;&gt; lookupFunction =
	 *   RouterFunctions.resourceLookupFunction("/resources/**", new FileSystemResource("public-resources/"))
	 *     .andThen(resource -&gt; resource.or(() -&gt; defaultResource));
	 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources(lookupFunction);
     * </pre>
	 * @param pattern the pattern to match
	 * @param location the location directory relative to which resources should be resolved
	 * @return the default resource lookup function for the given parameters.
	 */
	/**
	 * 返回{@link  #resources（String，Resource）}使用的资源查找函数。 
	 * 返回的函数可以是{@link  plain Function＃andThen（Function）composition}，例如在查找函数不匹配时返回默认资源：<pre class ="code">可选<Resource> defaultResource = Optional.of（new ClassPathResource（"index.html"））; Function <ServerRequest，Optional <Resource >> lookupFunction = RouterFunctions.resourceLookupFunction（"/ resources"，new FileSystemResource（"public-resources /"））.andThen（resource-> resource.or（（）-> defaultResource））; RouterFunction <ServerResponse>资源= RouterFunctions.resources（lookupFunction）; </ pre> 
	 * @param 模式化模式以匹配
	 * @param  location应相对于其解析资源的位置目录
	 * @return 给定参数的默认资源查找功能。 
	 * 
	 */
	public static Function<ServerRequest, Optional<Resource>> resourceLookupFunction(String pattern, Resource location) {
		return new PathResourceLookupFunction(pattern, location);
	}

	/**
	 * Route to resources using the provided lookup function. If the lookup function provides a
	 * {@link Resource} for the given request, it will be it will be exposed using a
	 * {@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests.
	 * @param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}
	 * @return a router function that routes to resources
	 */
	/**
	 * 使用提供的查找功能路由到资源。 
	 * 如果查找功能为给定的请求提供了一个{@link  Resource}，它将使用处理GET，HEAD和OPTIONS请求的{@link  HandlerFunction}公开。 
	 *  
	 * @param  lookupFunction该函数提供给定的{@link  ServerRequest} {
	 * @return>路由到资源的路由器功能的{@link  Resource}
	 */
	public static RouterFunction<ServerResponse> resources(Function<ServerRequest, Optional<Resource>> lookupFunction) {
		return new ResourcesRouterFunction(lookupFunction);
	}


	/**
	 * Represents a discoverable builder for router functions.
	 * Obtained via {@link RouterFunctions#route()}.
	 */
	/**
	 * 表示路由器功能的可发现生成器。 
	 * 通过{@link  RouterFunctions＃route（）}获得。 
	 * 
	 */
	public interface Builder {

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code GET} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code GET} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 将路由添加到给定的处理函数，以处理与给定模式匹配的所有HTTP {@code  GET}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  GET}请求
		 * @return 此构建器
		 */
		Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code GET} requests
		 * that match the given pattern and predicate.
		 * <p>For instance, the following example routes GET requests for "/user" that accept JSON
		 * to the {@code listUsers} method in {@code userController}:
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; route =
		 *   RouterFunctions.route()
		 *     .GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers)
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code GET} requests that
		 * match {@code pattern}
		 * @return this builder
		 * @see RequestPredicates
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定的模式和谓词匹配的所有HTTP {@code  GET}请求。 
		 *  <p>例如，以下示例将接受JSON的"/ user"的GET请求路由到{@code  userController}中的{@code  listUsers}方法：<pre class ="code"> RouterFunction <ServerResponse > route = RouterFunctions.route（）.GET（"/ user"，RequestPredicates.accept（MediaType.APPLICATION_JSON），userController :: listUsers）.build（）; </ pre> 
		 * @param 模式将模式匹配到
		 * @param 谓词以匹配其他谓词，以匹配
		 * @param  handler函数处理程序函数以处理所有与{@code 模式匹配的{@code  GET}请求} 
		 * @return 此构建器
		 * @see  RequestPredicates
		 */
		Builder GET(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code HEAD} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code HEAD} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定模式匹配的所有HTTP {@code  HEAD}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  HEAD}请求此生成器
		 */
		Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code HEAD} requests
		 * that match the given pattern and predicate.
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code HEAD} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定模式和谓词匹配的所有HTTP {@code  HEAD}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param 谓词附加谓词以匹配
		 * @param  handler函数处理函数以处理与{@code 模式}匹配的所有{@code  HEAD}请求<
		 * @return >这个建造者
		 */
		Builder HEAD(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code POST} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code POST} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加一条路由，该路由处理与给定模式匹配的所有HTTP {@code  POST}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  POST}请求
		 * @return 此构建器
		 */
		Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code POST} requests
		 * that match the given pattern and predicate.
		 * <p>For instance, the following example routes POST requests for "/user" that contain JSON
		 * to the {@code addUser} method in {@code userController}:
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; route =
		 *   RouterFunctions.route()
		 *     .POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser)
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code POST} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 将路由添加到给定的处理函数，该路由处理与给定的模式和谓词匹配的所有HTTP {@code  POST}请求。 
		 *  <p>例如，以下示例将对包含JSON的"/ user"的POST请求路由到{@code  userController}中的{@code  addUser}方法：<pre class ="code"> RouterFunction <ServerResponse > route = RouterFunctions.route（）.POST（"/ user"，RequestPredicates.contentType（MediaType.APPLICATION_JSON），userController :: addUser）.build（）; </ pre> 
		 * @param 模式将模式匹配到
		 * @param 谓词以匹配其他谓词，以匹配
		 * @param  handler函数处理程序函数以处理所有与{@code 模式匹配的{@code  POST}请求} 
		 * @return 此构建器
		 */
		Builder POST(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code PUT} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code PUT} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加一条路由，该路由处理与给定模式匹配的所有HTTP {@code  PUT}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  PUT}请求
		 * @return 此构建器
		 */
		Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code PUT} requests
		 * that match the given pattern and predicate.
		 * <p>For instance, the following example routes PUT requests for "/user" that contain JSON
		 * to the {@code editUser} method in {@code userController}:
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; route =
		 *   RouterFunctions.route()
		 *     .PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code PUT} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加一条路由，该路由处理与给定的模式和谓词匹配的所有HTTP {@code  PUT}请求。 
		 *  <p>例如，以下示例将包含JSON的对"/ user"的PUT请求路由到{@code  userController}中的{@code  editUser}方法：<pre class ="code"> RouterFunction <ServerResponse > route = RouterFunctions.route（）.PUT（"/ user"，RequestPredicates.contentType（MediaType.APPLICATION_JSON），userController :: editUser）.build（）; </ pre> 
		 * @param 模式将模式匹配到
		 * @param 谓词以匹配其他谓词，以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式匹配的所有{@code  PUT}请求} 
		 * @return 此构建器
		 */
		Builder PUT(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code PATCH} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code PATCH} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定模式匹配的所有HTTP {@code  PATCH}请求。 
		 *  
		 * @param 将模式匹配到
		 * @param  handler的函数函数处理程序函数来处理与{@code 模式}匹配的所有{@code  PATCH}请求
		 * @return 此构建器
		 */
		Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code PATCH} requests
		 * that match the given pattern and predicate.
		 * <p>For instance, the following example routes PATCH requests for "/user" that contain JSON
		 * to the {@code editUser} method in {@code userController}:
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; route =
		 *   RouterFunctions.route()
		 *     .PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser)
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code PATCH} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 将路由添加到给定的处理函数，该路由处理与给定的模式和谓词匹配的所有HTTP {@code  PATCH}请求。 
		 *  <p>例如，以下示例将包含JSON的"/ user"的PATCH请求路由到{@code  userController}中的{@code  editUser}方法：<pre class ="code"> RouterFunction <ServerResponse > route = RouterFunctions.route（）.PATCH（"/ user"，RequestPredicates.contentType（MediaType.APPLICATION_JSON），userController :: editUser）.build（）; </ pre> 
		 * @param 模式将模式匹配到
		 * @param 谓词以匹配其他谓词，以匹配
		 * @param  handler函数处理程序函数以处理所有与{@code 模式匹配的{@code  PATCH}请求} 
		 * @return 此构建器
		 */
		Builder PATCH(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code DELETE} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code DELETE} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定模式匹配的所有HTTP {@code  DELETE}请求。 
		 *  
		 * @param 将模式匹配到
		 * @param  handler的函数函数处理程序函数来处理与{@code 模式}匹配的所有{@code  DELETE}请求
		 * @return 此构建器
		 */
		Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code DELETE} requests
		 * that match the given pattern and predicate.
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code DELETE} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加一条路由，该路由处理与给定的模式和谓词匹配的所有HTTP {@code  DELETE}请求。 
		 *  
		 * @param 将模式匹配到
		 * @param 谓词以匹配其他谓词，以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  DELETE}请求>这个建造者
		 */
		Builder DELETE(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests
		 * that match the given pattern.
		 * @param pattern the pattern to match to
		 * @param handlerFunction the handler function to handle all {@code OPTIONS} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 向给定的处理函数添加路由，该路由处理与给定模式匹配的所有HTTP {@code  OPTIONS}请求。 
		 *  
		 * @param 模式化模式以匹配
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  OPTIONS}请求
		 * @return 此构建器
		 */
		Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all requests that match the
		 * given predicate.
		 *
		 * @param predicate the request predicate to match
		 * @param handlerFunction the handler function to handle all requests that match the predicate
		 * @return this builder
		 * @see RequestPredicates
		 */
		/**
		 * 向给定的处理函数添加一条路由，该路由处理与给定谓词匹配的所有请求。 
		 *  
		 * @param 谓词匹配谓词
		 * @param  handlerFunction处理函数以处理所有与谓词匹配的请求
		 * @return 此构建器
		 * @see  RequestPredicates
		 */
		Builder route(RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds a route to the given handler function that handles all HTTP {@code OPTIONS} requests
		 * that match the given pattern and predicate.
		 * @param pattern the pattern to match to
		 * @param predicate additional predicate to match
		 * @param handlerFunction the handler function to handle all {@code OPTIONS} requests that
		 * match {@code pattern}
		 * @return this builder
		 */
		/**
		 * 将路由添加到给定的处理函数，以处理与给定的模式和谓词匹配的所有HTTP {@code  OPTIONS}请求。 
		 *  
		 * @param 模式要匹配的模式
		 * @param 谓词以匹配其他谓词
		 * @param  handler函数处理程序函数以处理与{@code 模式}匹配的所有{@code  OPTIONS}请求<
		 * @return >这个建造者
		 */
		Builder OPTIONS(String pattern, RequestPredicate predicate, HandlerFunction<ServerResponse> handlerFunction);

		/**
		 * Adds the given route to this builder. Can be used to merge externally defined router
		 * functions into this builder, or can be combined with
		 * {@link RouterFunctions#route(RequestPredicate, HandlerFunction)}
		 * to allow for more flexible predicate matching.
		 * <p>For instance, the following example adds the router function returned from
		 * {@code OrderController.routerFunction()}.
		 * to the {@code changeUser} method in {@code userController}:
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; route =
		 *   RouterFunctions.route()
		 *     .GET("/users", userController::listUsers)
		 *     .add(orderController.routerFunction());
		 *     .build();
		 * </pre>
		 * @param routerFunction the router function to be added
		 * @return this builder
		 * @see RequestPredicates
		 */
		/**
		 * 将给定的路线添加到此构建器。 
		 * 可以用于将外部定义的路由器功能合并到此构建器中，也可以与{@link  RouterFunctions＃route（RequestPredicate，HandlerFunction）}}结合使用，以实现更灵活的谓词匹配。 
		 *  <p>例如，以下示例添加了从{@code  OrderController.routerFunction（）}返回的路由器功能。 
		 * 到{@code  userController}中的{@code  changeUser}方法：<pre class ="code"> RouterFunction <ServerResponse> route = RouterFunctions.route（）.GET（"/ users"，userController :: listUsers ）.add（orderController.routerFunction（））; 。 
		 * 建立（）; </ pre> 
		 * @param  routerFunction要添加的路由器功能
		 * @return 此构建器
		 * @see  RequestPredicates
		 */
		Builder add(RouterFunction<ServerResponse> routerFunction);

		/**
		 * Route requests that match the given pattern to resources relative to the given root location.
		 * For instance
		 * <pre class="code">
		 * Resource location = new FileSystemResource("public-resources/");
		 * RouterFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);
	     * </pre>
		 * @param pattern the pattern to match
		 * @param location the location directory relative to which resources should be resolved
		 * @return this builder
		 */
		/**
		 * 将与给定模式匹配的请求路由到相对于给定根位置的资源。 
		 * 例如<pre class ="code">资源位置= new FileSystemResource（"public-resources /"）; RouterFunction <ServerResponse>资源= RouterFunctions.resources（"/ resources"，location）; </ pre> 
		 * @param 模式化模式以匹配
		 * @param  location相对应解析资源的位置目录
		 * @return 此构建器
		 */
		Builder resources(String pattern, Resource location);

		/**
		 * Route to resources using the provided lookup function. If the lookup function provides a
		 * {@link Resource} for the given request, it will be it will be exposed using a
		 * {@link HandlerFunction} that handles GET, HEAD, and OPTIONS requests.
		 * @param lookupFunction the function to provide a {@link Resource} given the {@link ServerRequest}
		 * @return this builder
		 */
		/**
		 * 使用提供的查找功能路由到资源。 
		 * 如果查找功能为给定的请求提供了一个{@link  Resource}，它将使用处理GET，HEAD和OPTIONS请求的{@link  HandlerFunction}公开。 
		 *  
		 * @param  lookupFunction在给定此构建器{@link  ServerRequest} 
		 * @return 的情况下提供{@link  Resource}的函数
		 */
		Builder resources(Function<ServerRequest, Optional<Resource>> lookupFunction);

		/**
		 * Route to the supplied router function if the given request predicate applies. This method
		 * can be used to create <strong>nested routes</strong>, where a group of routes share a
		 * common path (prefix), header, or other request predicate.
		 * <p>For instance, the following example creates a nested route with a "/user" path
		 * predicate, so that GET requests for "/user" will list users,
		 * and POST request for "/user" will create a new user.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
		 *   RouterFunctions.route()
		 *     .nest(RequestPredicates.path("/user"), () ->
		 *       RouterFunctions.route()
		 *         .GET(this::listUsers)
		 *         .POST(this::createUser)
		 *         .build())
		 *     .build();
		 * </pre>
		 * @param predicate the predicate to test
		 * @param routerFunctionSupplier supplier for the nested router function to delegate to if
		 * the predicate applies
		 * @return this builder
		 * @see RequestPredicates
		 */
		/**
		 * 如果给定的请求谓词适用，则路由到提供的路由器功能。 
		 * 此方法可用于创建<strong>嵌套路由</ strong>，其中一组路由共享一个公共路径（前缀），标头或其他请求谓词。 
		 *  <p>例如，以下示例使用"/ user"路径谓词创建一个嵌套路由，以便对"/ user"的GET请求将列出用户，而对"/ user"的POST请求将创建一个新用户。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> nestedRoute = RouterFunctions.route（）.nest（RequestPredicates.path（"/ user"），（）-> RouterFunctions.route（）.GET（this :: listUsers）。 
		 *  POST（this :: createUser）.build（））.build（）; </ pre> 
		 * @param 谓词以测试
		 * @param  routerFunctionSupplier供应商，以供嵌套路由器功能委托给谓词（如果该谓词适用）
		 * @return 此构建器
		 * @see  RequestPredicates
		 */
		Builder nest(RequestPredicate predicate, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier);

		/**
		 * Route to a built router function if the given request predicate applies.
		 * This method can be used to create <strong>nested routes</strong>, where a group of routes
		 * share a common path (prefix), header, or other request predicate.
		 * <p>For instance, the following example creates a nested route with a "/user" path
		 * predicate, so that GET requests for "/user" will list users,
		 * and POST request for "/user" will create a new user.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
		 *   RouterFunctions.route()
		 *     .nest(RequestPredicates.path("/user"), builder ->
		 *       builder.GET(this::listUsers)
		 *              .POST(this::createUser))
		 *     .build();
		 * </pre>
		 * @param predicate the predicate to test
		 * @param builderConsumer consumer for a {@code Builder} that provides the nested router
		 * function
		 * @return this builder
		 * @see RequestPredicates
		 */
		/**
		 * 如果给定的请求谓词适用，则路由到内置的路由器功能。 
		 * 此方法可用于创建<strong>嵌套路由</ strong>，其中一组路由共享一个公共路径（前缀），标头或其他请求谓词。 
		 *  <p>例如，以下示例使用"/ user"路径谓词创建一个嵌套路由，以便对"/ user"的GET请求将列出用户，而对"/ user"的POST请求将创建一个新用户。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> nestedRoute = RouterFunctions.route（）.nest（RequestPredicates.path（"/ user"），生成器-> builder.GET（this :: listUsers）.POST（this :: createUser））.build（）; </ pre> 
		 * @param 谓词来测试{@@code> Builder}的消费者
		 * @param  builderConsumer使用者，该消费者提供嵌套路由器功能
		 * @return 此构建器
		 * @see  RequestPredicates
		 */
		Builder nest(RequestPredicate predicate, Consumer<Builder> builderConsumer);

		/**
		 * Route to the supplied router function if the given path prefix pattern applies. This method
		 * can be used to create <strong>nested routes</strong>, where a group of routes share a
		 * common path prefix. Specifically, this method can be used to merge externally defined
		 * router functions under a path prefix.
		 * <p>For instance, the following example creates a nested route with a "/user" path
		 * predicate that delegates to the router function defined in {@code userController},
		 * and with a "/order" path that delegates to {@code orderController}.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
		 *   RouterFunctions.route()
		 *     .path("/user", userController::routerFunction)
		 *     .path("/order", orderController::routerFunction)
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param routerFunctionSupplier supplier for the nested router function to delegate to if
		 * the pattern matches
		 * @return this builder
		 */
		/**
		 * 如果使用给定的路径前缀模式，请路由到提供的路由器功能。 
		 * 此方法可用于创建<strong>嵌套路由</ strong>，其中一组路由共享一个公共路径前缀。 
		 * 具体来说，该方法可用于在路径前缀下合并外部定义的路由器功能。 
		 *  <p>例如，下面的示例创建一个嵌套路由，该路由具有一个"/ user"路径谓词，该谓词委托给{@code  userController}中定义的路由器功能，而一个"/ order"路径则委托给{@code  orderController}。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> nestedRoute = RouterFunctions.route（）.path（"/ user"，userController :: routerFunction）.path（"/ order"，orderController :: routerFunction）.build（）; </ pre> 
		 * @param 模式化模式以匹配
		 * @param  routerFunctionSupplier供应商，以便在模式匹配
		 * @return 此构建器时委托给嵌套路由器功能
		 */
		Builder path(String pattern, Supplier<RouterFunction<ServerResponse>> routerFunctionSupplier);

		/**
		 * Route to a built router function if the given path prefix pattern applies.
		 * This method can be used to create <strong>nested routes</strong>, where a group of routes
		 * share a common path prefix.
		 * <p>For instance, the following example creates a nested route with a "/user" path
		 * predicate, so that GET requests for "/user" will list users,
		 * and POST request for "/user" will create a new user.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
		 *   RouterFunctions.route()
		 *     .path("/user", builder ->
		 *       builder.GET(this::listUsers)
		 *              .POST(this::createUser))
		 *     .build();
		 * </pre>
		 * @param pattern the pattern to match to
		 * @param builderConsumer consumer for a {@code Builder} that provides the nested router
		 * function
		 * @return this builder
		 */
		/**
		 * 如果给定的路径前缀模式适用，则路由到内置的路由器功能。 
		 * 此方法可用于创建<strong>嵌套路由</ strong>，其中一组路由共享一个公共路径前缀。 
		 *  <p>例如，以下示例使用"/ user"路径谓词创建一个嵌套路由，以便对"/ user"的GET请求将列出用户，而对"/ user"的POST请求将创建一个新用户。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> nestedRoute = RouterFunctions.route（）.path（"/ user"，builder-> builder.GET（this :: listUsers）.POST（this :: createUser））.build （）; </ pre> 
		 * @param 模式化模式以匹配
		 * @param  builder的{@code  Builder}的消费者消费者，该消费者提供嵌套路由器功能
		 * @return 此构建器
		 */
		Builder path(String pattern, Consumer<Builder> builderConsumer);

		/**
		 * Filters all routes created by this builder with the given filter function. Filter
		 * functions are typically used to address cross-cutting concerns, such as logging,
		 * security, etc.
		 * <p>For instance, the following example creates a filter that returns a 401 Unauthorized
		 * response if the request does not contain the necessary authentication headers.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =
		 *   RouterFunctions.route()
		 *     .GET("/user", this::listUsers)
		 *     .filter((request, next) -> {
		 *       // check for authentication headers
		 *       if (isAuthenticated(request)) {
		 *         return next.handle(request);
		 *       }
		 *       else {
		 *         return ServerResponse.status(HttpStatus.UNAUTHORIZED).build();
		 *       }
		 *     })
		 *     .build();
		 * </pre>
		 * @param filterFunction the function to filter all routes built by this builder
		 * @return this builder
		 */
		/**
		 * 使用给定的过滤器功能过滤由该构建器创建的所有路由。 
		 * 过滤器功能通常用于解决跨领域的问题，例如日志记录，安全性等。 
		 * <p>例如，以下示例创建一个过滤器，如果请求不包含必要的身份验证标头，则该过滤器将返回401未经授权的响应。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> filteredRoute = RouterFunctions.route（）.GET（"/ user"，this :: listUsers）.filter（（request，next）-> {//检查身份验证标头是否（isAuthenticated（request））{return next.handle（request）;} else {return ServerResponse.status（HttpStatus.UNAUTHORIZED）.build（）;}））.build（）; </ pre> 
		 * @param  filterFunction该函数过滤此构建器构建的所有路由
		 * @return 此构建器
		 */
		Builder filter(HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction);

		/**
		 * Filter the request object for all routes created by this builder with the given request
		 * processing function. Filters are typically used to address cross-cutting concerns, such
		 * as logging, security, etc.
		 * <p>For instance, the following example creates a filter that logs the request before
		 * the handler function executes.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =
		 *   RouterFunctions.route()
		 *     .GET("/user", this::listUsers)
		 *     .before(request -> {
		 *       log(request);
		 *       return request;
		 *     })
		 *     .build();
		 * </pre>
		 * @param requestProcessor a function that transforms the request
		 * @return this builder
		 */
		/**
		 * 使用给定的请求处理功能，过滤此构建器创建的所有路由的请求对象。 
		 * 过滤器通常用于解决跨领域的问题，例如日志记录，安全性等。 
		 * <p>例如，以下示例创建一个过滤器，该过滤器在处理程序函数执行之前记录请求。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> filteredRoute = RouterFunctions.route（）.GET（"/ user"，this :: listUsers）.before（request-> {log（request）; return request;}）。 
		 * 建立（）; </ pre> 
		 * @param  requestProcessor一个转换请求的函数
		 * @return 此构建器
		 */
		Builder before(Function<ServerRequest, ServerRequest> requestProcessor);

		/**
		 * Filter the response object for all routes created by this builder with the given response
		 * processing function. Filters are typically used to address cross-cutting concerns, such
		 * as logging, security, etc.
		 * <p>For instance, the following example creates a filter that logs the response after
		 * the handler function executes.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =
		 *   RouterFunctions.route()
		 *     .GET("/user", this::listUsers)
		 *     .after((request, response) -> {
		 *       log(response);
		 *       return response;
		 *     })
		 *     .build();
		 * </pre>
		 * @param responseProcessor a function that transforms the response
		 * @return this builder
		 */
		/**
		 * 使用给定的响应处理功能过滤此构建器创建的所有路由的响应对象。 
		 * 过滤器通常用于解决跨领域的问题，例如日志记录，安全性等。 
		 * <p>例如，以下示例创建一个过滤器，该过滤器在处理程序函数执行后记录响应。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> filteredRoute = RouterFunctions.route（）.GET（"/ user"，this :: listUsers）.after（（request，response）-> {log（response）;返回响应;}）.build（）; </ pre> 
		 * @param  responseProcessor一个转换响应的函数，该函数
		 * @return 此构建器
		 */
		Builder after(BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor);

		/**
		 * Filters all exceptions that match the predicate by applying the given response provider
		 * function.
		 * <p>For instance, the following example creates a filter that returns a 500 response
		 * status when an {@code IllegalStateException} occurs.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =
		 *   RouterFunctions.route()
		 *     .GET("/user", this::listUsers)
		 *     .onError(e -> e instanceof IllegalStateException,
		 *       (e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())
		 *     .build();
		 * </pre>
		 * @param predicate the type of exception to filter
		 * @param responseProvider a function that creates a response
		 * @return this builder
		 */
		/**
		 * 通过应用给定的响应提供程序功能，筛选与谓词匹配的所有异常。 
		 *  <p>例如，以下示例创建一个过滤器，该过滤器在发生{@code  IllegalStateException}时返回500响应状态。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> filteredRoute = RouterFunctions.route（）.GET（"/ user"，this :: listUsers）.onError（e-> e instanceof IllegalStateException，（e，request）-> ServerResponse .status（HttpStatus.INTERNAL_SERVER_ERROR）.build（））.build（）; </ pre> 
		 * @param 声明要过滤的异常类型
		 * @param  responseProvider一个创建响应的函数
		 * @return 此构建器
		 */
		Builder onError(Predicate<Throwable> predicate,
				BiFunction<Throwable, ServerRequest, ServerResponse> responseProvider);

		/**
		 * Filters all exceptions of the given type by applying the given response provider
		 * function.
		 * <p>For instance, the following example creates a filter that returns a 500 response
		 * status when an {@code IllegalStateException} occurs.
		 * <pre class="code">
		 * RouterFunction&lt;ServerResponse&gt; filteredRoute =
		 *   RouterFunctions.route()
		 *     .GET("/user", this::listUsers)
		 *     .onError(IllegalStateException.class,
		 *       (e, request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build())
		 *     .build();
		 * </pre>
		 * @param exceptionType the type of exception to filter
		 * @param responseProvider a function that creates a response
		 * @return this builder
		 */
		/**
		 * 通过应用给定的响应提供程序功能过滤给定类型的所有异常。 
		 *  <p>例如，以下示例创建一个过滤器，该过滤器在发生{@code  IllegalStateException}时返回500响应状态。 
		 *  <pre class ="code"> RouterFunction <ServerResponse> filteredRoute = RouterFunctions.route（）.GET（"/ user"，this :: listUsers）.onError（IllegalStateException.class，（e，request）-> ServerResponse.status（ HttpStatus.INTERNAL_SERVER_ERROR）.build（））.build（）; </ pre> 
		 * @param 异常键入要过滤的异常类型
		 * @param  responseProvider一个创建响应的函数
		 * @return 此构建器
		 */
		Builder onError(Class<? extends Throwable> exceptionType,
				BiFunction<Throwable, ServerRequest, ServerResponse> responseProvider);

		/**
		 * Builds the {@code RouterFunction}. All created routes are
		 * {@linkplain RouterFunction#and(RouterFunction) composed} with one another, and filters
		 * (if any) are applied to the result.
		 * @return the built router function
		 */
		/**
		 * 生成{@code  RouterFunction}。 
		 * 所有创建的路由都是{@link 普通RouterFunction＃and（RouterFunction）组成的}，并且将过滤器（如果有）应用于结果。 
		 *  
		 * @return 内置路由器功能
		 */
		RouterFunction<ServerResponse> build();
	}
	/**
	 * Receives notifications from the logical structure of router functions.
	 */
	/**
	 * 从路由器功能的逻辑结构接收通知。 
	 * 
	 */
	public interface Visitor {

		/**
		 * Receive notification of the beginning of a nested router function.
		 * @param predicate the predicate that applies to the nested router functions
		 * @see RouterFunctions#nest(RequestPredicate, RouterFunction)
		 */
		/**
		 * 接收有关嵌套路由器功能开始的通知。 
		 *  
		 * @param 谓词适用于嵌套路由器功能
		 * @see  RouterFunctions＃nest（RequestPredicate，RouterFunction）
		 */
		void startNested(RequestPredicate predicate);

		/**
		 * Receive notification of the end of a nested router function.
		 * @param predicate the predicate that applies to the nested router functions
		 * @see RouterFunctions#nest(RequestPredicate, RouterFunction)
		 */
		/**
		 * 接收有关嵌套路由器功能结束的通知。 
		 *  
		 * @param 谓词适用于嵌套路由器功能
		 * @see  RouterFunctions＃nest（RequestPredicate，RouterFunction）
		 */
		void endNested(RequestPredicate predicate);

		/**
		 * Receive notification of a standard predicated route to a handler function.
		 * @param predicate the predicate that applies to the handler function
		 * @param handlerFunction the handler function.
		 * @see RouterFunctions#route(RequestPredicate, HandlerFunction)
		 */
		/**
		 * 接收到到处理程序函数的标准谓词路由的通知。 
		 *  
		 * @param 谓词适用于处理程序函数
		 * @param  handlerFunction处理函数。 
		 *  
		 * @see  RouterFunctions＃route（RequestPredicate，HandlerFunction）
		 */
		void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction);

		/**
		 * Receive notification of a resource router function.
		 * @param lookupFunction the lookup function for the resources
		 * @see RouterFunctions#resources(Function)
		 */
		/**
		 * 接收资源路由器功能的通知。 
		 *  
		 * @param  lookupFunction资源的查找功能
		 * @see  RouterFunctions＃resources（Function）
		 */
		void resources(Function<ServerRequest, Optional<Resource>> lookupFunction);

		/**
		 * Receive notification of an unknown router function. This method is called for router
		 * functions that were not created via the various {@link RouterFunctions} methods.
		 * @param routerFunction the router function
		 */
		/**
		 * 接收有关未知路由器功能的通知。 
		 * 对于未通过各种{@link  RouterFunctions}方法创建的路由器功能，将调用此方法。 
		 *  
		 * @param  routerFunction路由器功能
		 */
		void unknown(RouterFunction<?> routerFunction);
	}


	private abstract static class AbstractRouterFunction<T extends ServerResponse> implements RouterFunction<T> {

		@Override
		public String toString() {
			ToStringVisitor visitor = new ToStringVisitor();
			accept(visitor);
			return visitor.toString();
		}
	}

	/**
	 * A composed routing function that first invokes one function, and then invokes the
	 * another function (of the same response type {@code T}) if this route had
	 * {@linkplain Optional#empty() no result}.
	 * @param <T> the server response type
	 */
	/**
	 * 如果此路由具有{@link  plain Optional＃empty（）no result}，则该组合路由功能将首先调用一个功能，然后调用另一个功能（具有相同的响应类型{@code  T}）。 
	 *  
	 * @param  <T>服务器响应类型
	 */
	static final class SameComposedRouterFunction<T extends ServerResponse> extends AbstractRouterFunction<T> {

		private final RouterFunction<T> first;

		private final RouterFunction<T> second;

		public SameComposedRouterFunction(RouterFunction<T> first, RouterFunction<T> second) {
			this.first = first;
			this.second = second;
		}

		@Override
		public Optional<HandlerFunction<T>> route(ServerRequest request) {
			Optional<HandlerFunction<T>> firstRoute = this.first.route(request);
			if (firstRoute.isPresent()) {
				return firstRoute;
			}
			else {
				return this.second.route(request);
			}
		}

		@Override
		public void accept(Visitor visitor) {
			this.first.accept(visitor);
			this.second.accept(visitor);
		}
	}

	/**
	 * A composed routing function that first invokes one function, and then invokes
	 * another function (of a different response type) if this route had
	 * {@linkplain Optional#empty() no result}.
	 */
	/**
	 * 如果此路由具有{@link  plain Optional＃empty（）no result}，则该组合路由功能将首先调用一个功能，然后调用另一个功能（响应类型不同）。 
	 * 
	 */
	static final class DifferentComposedRouterFunction extends AbstractRouterFunction<ServerResponse> {

		private final RouterFunction<?> first;

		private final RouterFunction<?> second;

		public DifferentComposedRouterFunction(RouterFunction<?> first, RouterFunction<?> second) {
			this.first = first;
			this.second = second;
		}

		@Override
		@SuppressWarnings("unchecked")
		public Optional<HandlerFunction<ServerResponse>> route(ServerRequest request) {
			Optional<? extends HandlerFunction<?>> firstRoute = this.first.route(request);
			if (firstRoute.isPresent()) {
				return (Optional<HandlerFunction<ServerResponse>>) firstRoute;
			}
			else {
				Optional<? extends HandlerFunction<?>> secondRoute = this.second.route(request);
				return (Optional<HandlerFunction<ServerResponse>>) secondRoute;
			}
		}

		@Override
		public void accept(Visitor visitor) {
			this.first.accept(visitor);
			this.second.accept(visitor);
		}
	}


	/**
	 * Filter the specified {@linkplain HandlerFunction handler functions} with the given
	 * {@linkplain HandlerFilterFunction filter function}.
	 * @param <T> the type of the {@linkplain HandlerFunction handler function} to filter
	 * @param <S> the type of the response of the function
	 */
	/**
	 * 使用给定的{@link  plain HandlerFilterFunction过滤器函数}过滤指定的{@link  plain HandlerFunction处理器函数}。 
	 *  
	 * @param  <T> {@link  plain HandlerFunction handler function}的类型以过滤
	 * @param  <S>函数响应的类型
	 */
	static final class FilteredRouterFunction<T extends ServerResponse, S extends ServerResponse>
			implements RouterFunction<S> {

		private final RouterFunction<T> routerFunction;

		private final HandlerFilterFunction<T, S> filterFunction;

		public FilteredRouterFunction(
				RouterFunction<T> routerFunction,
				HandlerFilterFunction<T, S> filterFunction) {
			this.routerFunction = routerFunction;
			this.filterFunction = filterFunction;
		}

		@Override
		public Optional<HandlerFunction<S>> route(ServerRequest request) {
			return this.routerFunction.route(request).map(this.filterFunction::apply);
		}

		@Override
		public void accept(Visitor visitor) {
			this.routerFunction.accept(visitor);
		}

		@Override
		public String toString() {
			return this.routerFunction.toString();
		}
	}

	private static final class DefaultRouterFunction<T extends ServerResponse>
			extends AbstractRouterFunction<T> {

		private final RequestPredicate predicate;

		private final HandlerFunction<T> handlerFunction;

		public DefaultRouterFunction(RequestPredicate predicate, HandlerFunction<T> handlerFunction) {
			Assert.notNull(predicate, "Predicate must not be null");
			Assert.notNull(handlerFunction, "HandlerFunction must not be null");
			this.predicate = predicate;
			this.handlerFunction = handlerFunction;
		}

		@Override
		public Optional<HandlerFunction<T>> route(ServerRequest request) {
			if (this.predicate.test(request)) {
				if (logger.isTraceEnabled()) {
					logger.trace(String.format("Predicate \"%s\" matches against \"%s\"", this.predicate, request));
				}
				return Optional.of(this.handlerFunction);
			}
			else {
				return Optional.empty();
			}
		}

		@Override
		public void accept(Visitor visitor) {
			visitor.route(this.predicate, this.handlerFunction);
		}

	}

	private static final class DefaultNestedRouterFunction<T extends ServerResponse>
			extends AbstractRouterFunction<T> {

		private final RequestPredicate predicate;

		private final RouterFunction<T> routerFunction;

		public DefaultNestedRouterFunction(RequestPredicate predicate, RouterFunction<T> routerFunction) {
			Assert.notNull(predicate, "Predicate must not be null");
			Assert.notNull(routerFunction, "RouterFunction must not be null");
			this.predicate = predicate;
			this.routerFunction = routerFunction;
		}

		@Override
		public Optional<HandlerFunction<T>> route(ServerRequest serverRequest) {
			return this.predicate.nest(serverRequest)
					.map(nestedRequest -> {
								if (logger.isTraceEnabled()) {
									logger.trace(
											String.format(
													"Nested predicate \"%s\" matches against \"%s\"",
													this.predicate, serverRequest));
								}
								Optional<HandlerFunction<T>> result =
										this.routerFunction.route(nestedRequest);
								if (result.isPresent() && nestedRequest != serverRequest) {
									serverRequest.attributes().clear();
									serverRequest.attributes().putAll(nestedRequest.attributes());
								}
								return result;
							}
					)
					.orElseGet(Optional::empty);
		}


		@Override
		public void accept(Visitor visitor) {
			visitor.startNested(this.predicate);
			this.routerFunction.accept(visitor);
			visitor.endNested(this.predicate);
		}

	}

	private static class ResourcesRouterFunction extends  AbstractRouterFunction<ServerResponse> {

		private final Function<ServerRequest, Optional<Resource>> lookupFunction;

		public ResourcesRouterFunction(Function<ServerRequest, Optional<Resource>> lookupFunction) {
			Assert.notNull(lookupFunction, "Function must not be null");
			this.lookupFunction = lookupFunction;
		}

		@Override
		public Optional<HandlerFunction<ServerResponse>> route(ServerRequest request) {
			return this.lookupFunction.apply(request).map(ResourceHandlerFunction::new);
		}

		@Override
		public void accept(Visitor visitor) {
			visitor.resources(this.lookupFunction);
		}
	}


}
