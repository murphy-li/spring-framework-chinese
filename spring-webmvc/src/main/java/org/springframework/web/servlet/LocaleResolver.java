/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.lang.Nullable;

/**
 * Interface for web-based locale resolution strategies that allows for
 * both locale resolution via the request and locale modification via
 * request and response.
 *
 * <p>This interface allows for implementations based on request, session,
 * cookies, etc. The default implementation is
 * {@link org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver},
 * simply using the request's locale provided by the respective HTTP header.
 *
 * <p>Use {@link org.springframework.web.servlet.support.RequestContext#getLocale()}
 * to retrieve the current locale in controllers or views, independent
 * of the actual resolution strategy.
 *
 * <p>Note: As of Spring 4.0, there is an extended strategy interface
 * called {@link LocaleContextResolver}, allowing for resolution of
 * a {@link org.springframework.context.i18n.LocaleContext} object,
 * potentially including associated time zone information. Spring's
 * provided resolver implementations implement the extended
 * {@link LocaleContextResolver} interface wherever appropriate.
 *
 * @author Juergen Hoeller
 * @since 27.02.2003
 * @see LocaleContextResolver
 * @see org.springframework.context.i18n.LocaleContextHolder
 * @see org.springframework.web.servlet.support.RequestContext#getLocale
 * @see org.springframework.web.servlet.support.RequestContextUtils#getLocale
 */
/**
 * 基于Web的语言环境解析策略的接口，它既可以通过请求进行语言环境解析，又可以通过请求和响应进行语言环境修改。 
 *  <p>此接口允许基于请求，会话，cookie等的实现。 
 * 默认实现为{@link  org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver}，只需使用相应HTTP提供的请求区域设置即可标头。 
 *  <p>使用{@link  org.springframework.web.servlet.support.RequestContext＃getLocale（）}来获取控制器或视图中的当前语言环境，而与实际的解析策略无关。 
 *  <p>注意：从Spring 4.0开始，有一个名为{@link  LocaleContextResolver}的扩展策略接口，允许解析{@link  org.springframework.context.i18n.LocaleContext}对象，可能包括关联的对象。 
 * 时区信息。 
 *  Spring提供的解析器实现在适当的地方实现扩展的{@link  LocaleContextResolver}接口。 
 *  @author  Juergen Hoeller @2003年2月27日起
 * @see  LocaleContextResolver 
 * @see  org.springframework.context.i18n.LocaleContextHolder 
 * @see  org.springframework.web.servlet.support.RequestContext＃getLocale 
 * @see  org.springframework.web.servlet.support.RequestContextUtils＃getLocale
 */
public interface LocaleResolver {

	/**
	 * Resolve the current locale via the given request.
	 * Can return a default locale as fallback in any case.
	 * @param request the request to resolve the locale for
	 * @return the current locale (never {@code null})
	 */
	/**
	 * 通过给定的请求解析当前语言环境。 
	 * 在任何情况下都可以返回默认语言环境作为后备。 
	 *  
	 * @param 请求请求为当前的语言环境
	 * @return 解析语言环境（切勿{<@@code> null}）
	 */
	Locale resolveLocale(HttpServletRequest request);

	/**
	 * Set the current locale to the given one.
	 * @param request the request to be used for locale modification
	 * @param response the response to be used for locale modification
	 * @param locale the new locale, or {@code null} to clear the locale
	 * @throws UnsupportedOperationException if the LocaleResolver
	 * implementation does not support dynamic changing of the locale
	 */
	/**
	 * 将当前语言环境设置为给定的语言环境。 
	 *  
	 * @param 请求用于区域设置修改的请求
	 * @param 响应将用于区域设置修改的响应
	 * @param 设置新的区域设置，或{@code  null}清除区域设置<
	 * @throws > UnsupportedOperationException如果LocaleResolver实现不支持语言环境的动态更改
	 */
	void setLocale(HttpServletRequest request, @Nullable HttpServletResponse response, @Nullable Locale locale);

}
