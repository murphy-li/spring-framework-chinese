/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.view.document;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfStamper;

import org.springframework.util.Assert;
import org.springframework.web.servlet.view.AbstractUrlBasedView;

/**
 * Abstract superclass for PDF views that operate on an existing
 * document with an AcroForm. Application-specific view classes
 * will extend this class to merge the PDF form with model data.
 *
 * <p>This view implementation uses Bruno Lowagie's
 * <a href="https://www.lowagie.com/iText">iText</a> API.
 * Known to work with the original iText 2.1.7 as well as its fork
 * <a href="https://github.com/LibrePDF/OpenPDF">OpenPDF</a>.
 * <b>We strongly recommend OpenPDF since it is actively maintained
 * and fixes an important vulnerability for untrusted PDF content.</b>
 *
 * <p>Thanks to Bryant Larsen for the suggestion and the original prototype!
 *
 * @author Juergen Hoeller
 * @since 2.5.4
 * @see AbstractPdfView
 */
/**
 * 使用AcroForm对现有文档进行操作的PDF视图的抽象超类。 
 * 特定于应用程序的视图类将扩展此类，以将PDF表单与模型数据合并。 
 *  <p>此视图实现使用Bruno Lowagie的<a href="https://www.lowagie.com/iText"> iText </a> API。 
 * 已知可以与原始iText 2.1.7以及它的fork <a href="https://github.com/LibrePDF/OpenPDF"> OpenPDF </a>一起使用。 
 *  <b>我们强烈推荐OpenPDF，因为它是主动维护的，并修复了不受信任的PDF内容的重要漏洞。 
 * </ b> <p>感谢科比·拉森的建议和原始原型！ 
 *  @author  Juergen Hoeller @2.5.4起
 * @see  AbstractPdfView
 */
public abstract class AbstractPdfStamperView extends AbstractUrlBasedView {

	public AbstractPdfStamperView(){
		setContentType("application/pdf");
	}


	@Override
	protected boolean generatesDownloadContent() {
		return true;
	}

	@Override
	protected final void renderMergedOutputModel(
			Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		// IE workaround: write into byte array first.
		ByteArrayOutputStream baos = createTemporaryOutputStream();

		PdfReader reader = readPdfResource();
		PdfStamper stamper = new PdfStamper(reader, baos);
		mergePdfDocument(model, stamper, request, response);
		stamper.close();

		// Flush to HTTP response.
		writeToResponse(response, baos);
	}

	/**
	 * Read the raw PDF resource into an iText PdfReader.
	 * <p>The default implementation resolve the specified "url" property
	 * as ApplicationContext resource.
	 * @return the PdfReader instance
	 * @throws IOException if resource access failed
	 * @see #setUrl
	 */
	/**
	 * 将原始PDF资源读取到iText PdfReader中。 
	 *  <p>默认实现将指定的"url"属性解析为ApplicationContext资源。 
	 *  
	 * @return  PdfReader实例
	 * @throws  IOException如果资源访问失败
	 * @see  #setUrl
	 */
	protected PdfReader readPdfResource() throws IOException {
		String url = getUrl();
		Assert.state(url != null, "'url' not set");
		return new PdfReader(obtainApplicationContext().getResource(url).getInputStream());
	}

	/**
	 * Subclasses must implement this method to merge the PDF form
	 * with the given model data.
	 * <p>This is where you are able to set values on the AcroForm.
	 * An example of what can be done at this level is:
	 * <pre class="code">
	 * // get the form from the document
	 * AcroFields form = stamper.getAcroFields();
	 *
	 * // set some values on the form
	 * form.setField("field1", "value1");
	 * form.setField("field2", "Vvlue2");
	 *
	 * // set the disposition and filename
	 * response.setHeader("Content-disposition", "attachment; FILENAME=someName.pdf");</pre>
	 * <p>Note that the passed-in HTTP response is just supposed to be used
	 * for setting cookies or other HTTP headers. The built PDF document itself
	 * will automatically get written to the response after this method returns.
	 * @param model the model Map
	 * @param stamper the PdfStamper instance that will contain the AcroFields.
	 * You may also customize this PdfStamper instance according to your needs,
	 * e.g. setting the "formFlattening" property.
	 * @param request in case we need locale etc. Shouldn't look at attributes.
	 * @param response in case we need to set cookies. Shouldn't write to it.
	 * @throws Exception any exception that occurred during document building
     */
	/**
	 * 子类必须实现此方法才能将PDF表单与给定的模型数据合并。 
	 *  <p>在这里您可以在AcroForm上设置值。 
	 * 在此级别上可以执行的操作的示例是：<pre class ="code"> //从文档AcroFields获得表单form = stamper.getAcroFields（）;。 
	 *  //以form.setField（"field1"，"value1"）;的形式设置一些值form.setField（"field2"，"Vvlue2"）; //设置处置和文件名响应。 
	 * setHeader（"Content-disposition"，"attachment; FILENAME = someName.pdf"）; </ pre> <p>请注意，传入的HTTP响应仅应用于设置cookie或其他HTTP标头。 
	 * 此方法返回后，内置的PDF文档本身将自动写入响应中。 
	 *  
	 * @param 对模型Map 
	 * @param 建模，将包含AcroField的PdfStamper实例压模。 
	 * 您也可以根据需要自定义此PdfStamper实例，例如设置"formFlattening"属性。 
	 *  
	 * @param 请求，以防我们需要语言环境等。 
	 * 不应查看属性。 
	 *  
	 * @param 响应，以防我们需要设置cookie。 
	 * 不应该写。 
	 *  
	 * @throws 异常在文档构建期间发生的任何异常
	 */
	protected abstract void mergePdfDocument(Map<String, Object> model, PdfStamper stamper,
			HttpServletRequest request, HttpServletResponse response) throws Exception;

}
