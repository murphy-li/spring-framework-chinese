/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.support;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.CacheControl;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.lang.Nullable;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.HttpSessionRequiredException;
import org.springframework.web.context.support.WebApplicationObjectSupport;

/**
 * Convenient superclass for any kind of web content generator,
 * like {@link org.springframework.web.servlet.mvc.AbstractController}
 * and {@link org.springframework.web.servlet.mvc.WebContentInterceptor}.
 * Can also be used for custom handlers that have their own
 * {@link org.springframework.web.servlet.HandlerAdapter}.
 *
 * <p>Supports HTTP cache control options. The usage of corresponding HTTP
 * headers can be controlled via the {@link #setCacheSeconds "cacheSeconds"}
 * and {@link #setCacheControl "cacheControl"} properties.
 *
 * <p><b>NOTE:</b> As of Spring 4.2, this generator's default behavior changed when
 * using only {@link #setCacheSeconds}, sending HTTP response headers that are in line
 * with current browsers and proxies implementations (i.e. no HTTP 1.0 headers anymore)
 * Reverting to the previous behavior can be easily done by using one of the newly
 * deprecated methods {@link #setUseExpiresHeader}, {@link #setUseCacheControlHeader},
 * {@link #setUseCacheControlNoStore} or {@link #setAlwaysMustRevalidate}.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Brian Clozel
 * @author Rossen Stoyanchev
 * @see #setCacheSeconds
 * @see #setCacheControl
 * @see #setRequireSession
 */
/**
 * 任何类型的Web内容生成器的便捷超类，例如{@link  org.springframework.web.servlet.mvc.AbstractController}和{@link  org.springframework.web.servlet.mvc.WebContentInterceptor}。 
 * 也可以用于具有自己的{@link  org.springframework.web.servlet.HandlerAdapter}的自定义处理程序。 
 *  <p>支持HTTP缓存控制选项。 
 * 可以通过{@link  #setCacheSeconds"cacheSeconds"}和{@link  #setCacheControl"cacheControl"}属性来控制相应HTTP标头的使用。 
 *  <p> <b>注意：</ b>从Spring 4.2开始，仅使用{@link  #setCacheSeconds}并发送与当前浏览器和代理实现一致的HTTP响应标头时，此生成器的默认行为已更改。 
 * 不再有HTTP 1.0标头），可以使用新弃用的方法之一轻松恢复到以前的行为：{<@link> #setUseExpiresHeader}，{<@link> #setUseCacheControlHeader}，{<@link> #setUseCacheControlNoStore}或{@link  #setAlwaysMustRevalidate}。 
 *  @author  Rod Johnson @author  Juergen Hoeller @author  Brian Clozel @author  Rossen Stoyanchev 
 * @see  #setCacheSeconds 
 * @see  #setCacheControl 
 * @see  #setRequireSession
 */
public abstract class WebContentGenerator extends WebApplicationObjectSupport {

	/** HTTP method "GET". */
	/**
	 * HTTP方法"GET"。 
	 * 
	 */
	public static final String METHOD_GET = "GET";

	/** HTTP method "HEAD". */
	/**
	 * HTTP方法"HEAD"。 
	 * 
	 */
	public static final String METHOD_HEAD = "HEAD";

	/** HTTP method "POST". */
	/**
	 * HTTP方法"POST"。 
	 * 
	 */
	public static final String METHOD_POST = "POST";

	private static final String HEADER_PRAGMA = "Pragma";

	private static final String HEADER_EXPIRES = "Expires";

	protected static final String HEADER_CACHE_CONTROL = "Cache-Control";


	/** Set of supported HTTP methods. */
	/**
	 * 支持的HTTP方法集。 
	 * 
	 */
	@Nullable
	private Set<String> supportedMethods;

	@Nullable
	private String allowHeader;

	private boolean requireSession = false;

	@Nullable
	private CacheControl cacheControl;

	private int cacheSeconds = -1;

	@Nullable
	private String[] varyByRequestHeaders;


	// deprecated fields

	/** Use HTTP 1.0 expires header? */
	/**
	 * 使用HTTP 1.0过期标头？
	 */
	private boolean useExpiresHeader = false;

	/** Use HTTP 1.1 cache-control header? */
	/**
	 * 使用HTTP 1.1缓存控制标头？
	 */
	private boolean useCacheControlHeader = true;

	/** Use HTTP 1.1 cache-control header value "no-store"? */
	/**
	 * 使用HTTP 1.1缓存控制标头值"无存储"？
	 */
	private boolean useCacheControlNoStore = true;

	private boolean alwaysMustRevalidate = false;


	/**
	 * Create a new WebContentGenerator which supports
	 * HTTP methods GET, HEAD and POST by default.
	 */
	/**
	 * 创建一个默认支持HTTP方法GET，HEAD和POST的新WebContentGenerator。 
	 * 
	 */
	public WebContentGenerator() {
		this(true);
	}

	/**
	 * Create a new WebContentGenerator.
	 * @param restrictDefaultSupportedMethods {@code true} if this
	 * generator should support HTTP methods GET, HEAD and POST by default,
	 * or {@code false} if it should be unrestricted
	 */
	/**
	 * 创建一个新的WebContentGenerator。 
	 *  
	 * @param  strictDefaultSupportedMethods {@code  true}（如果此生成器默认情况下应支持HTTP方法GET，HEAD和POST； 
	 * 如果不受限制，则为{@code  false}）。 
	 * 
	 */
	public WebContentGenerator(boolean restrictDefaultSupportedMethods) {
		if (restrictDefaultSupportedMethods) {
			this.supportedMethods = new LinkedHashSet<>(4);
			this.supportedMethods.add(METHOD_GET);
			this.supportedMethods.add(METHOD_HEAD);
			this.supportedMethods.add(METHOD_POST);
		}
		initAllowHeader();
	}

	/**
	 * Create a new WebContentGenerator.
	 * @param supportedMethods the supported HTTP methods for this content generator
	 */
	/**
	 * 创建一个新的WebContentGenerator。 
	 *  
	 * @param  supportMethods此内容生成器支持的HTTP方法
	 */
	public WebContentGenerator(String... supportedMethods) {
		setSupportedMethods(supportedMethods);
	}


	/**
	 * Set the HTTP methods that this content generator should support.
	 * <p>Default is GET, HEAD and POST for simple form controller types;
	 * unrestricted for general controllers and interceptors.
	 */
	/**
	 * 设置此内容生成器应支持的HTTP方法。 
	 *  <p>对于简单的表单控制器类型，默认为GET，HEAD和POST； 
	 * 不受通用控制器和拦截器的限制。 
	 * 
	 */
	public final void setSupportedMethods(@Nullable String... methods) {
		if (!ObjectUtils.isEmpty(methods)) {
			this.supportedMethods = new LinkedHashSet<>(Arrays.asList(methods));
		}
		else {
			this.supportedMethods = null;
		}
		initAllowHeader();
	}

	/**
	 * Return the HTTP methods that this content generator supports.
	 */
	/**
	 * 返回此内容生成器支持的HTTP方法。 
	 * 
	 */
	@Nullable
	public final String[] getSupportedMethods() {
		return (this.supportedMethods != null ? StringUtils.toStringArray(this.supportedMethods) : null);
	}

	private void initAllowHeader() {
		Collection<String> allowedMethods;
		if (this.supportedMethods == null) {
			allowedMethods = new ArrayList<>(HttpMethod.values().length - 1);
			for (HttpMethod method : HttpMethod.values()) {
				if (method != HttpMethod.TRACE) {
					allowedMethods.add(method.name());
				}
			}
		}
		else if (this.supportedMethods.contains(HttpMethod.OPTIONS.name())) {
			allowedMethods = this.supportedMethods;
		}
		else {
			allowedMethods = new ArrayList<>(this.supportedMethods);
			allowedMethods.add(HttpMethod.OPTIONS.name());

		}
		this.allowHeader = StringUtils.collectionToCommaDelimitedString(allowedMethods);
	}

	/**
	 * Return the "Allow" header value to use in response to an HTTP OPTIONS request
	 * based on the configured {@link #setSupportedMethods supported methods} also
	 * automatically adding "OPTIONS" to the list even if not present as a supported
	 * method. This means subclasses don't have to explicitly list "OPTIONS" as a
	 * supported method as long as HTTP OPTIONS requests are handled before making a
	 * call to {@link #checkRequest(HttpServletRequest)}.
	 * @since 4.3
	 */
	/**
	 * 根据配置的{@link  #setSupportedMethods受支持的方法}，返回用于响应HTTP OPTIONS请求的"允许"标头值，即使该列表不作为受支持的方法，也会自动将"OPTIONS"添加到列表中。 
	 * 这意味着只要在调用{@link  #checkRequest（HttpServletRequest）}之前处理HTTP OPTIONS请求，子类就不必显式列出"OPTIONS"作为受支持的方法。 
	 *  @4.3起
	 */
	@Nullable
	protected String getAllowHeader() {
		return this.allowHeader;
	}

	/**
	 * Set whether a session should be required to handle requests.
	 */
	/**
	 * 设置是否需要会话来处理请求。 
	 * 
	 */
	public final void setRequireSession(boolean requireSession) {
		this.requireSession = requireSession;
	}

	/**
	 * Return whether a session is required to handle requests.
	 */
	/**
	 * 返回是否需要会话来处理请求。 
	 * 
	 */
	public final boolean isRequireSession() {
		return this.requireSession;
	}

	/**
	 * Set the {@link org.springframework.http.CacheControl} instance to build
	 * the Cache-Control HTTP response header.
	 * @since 4.2
	 */
	/**
	 * 设置{@link  org.springframework.http.CacheControl}实例以构建Cache-Control HTTP响应标头。 
	 *  @4.2起
	 */
	public final void setCacheControl(@Nullable CacheControl cacheControl) {
		this.cacheControl = cacheControl;
	}

	/**
	 * Get the {@link org.springframework.http.CacheControl} instance
	 * that builds the Cache-Control HTTP response header.
	 * @since 4.2
	 */
	/**
	 * 获取{@link  org.springframework.http.CacheControl}实例，该实例构建Cache-Control HTTP响应标头。 
	 *  @4.2起
	 */
	@Nullable
	public final CacheControl getCacheControl() {
		return this.cacheControl;
	}

	/**
	 * Cache content for the given number of seconds, by writing
	 * cache-related HTTP headers to the response:
	 * <ul>
	 * <li>seconds == -1 (default value): no generation cache-related headers</li>
	 * <li>seconds == 0: "Cache-Control: no-store" will prevent caching</li>
	 * <li>seconds > 0: "Cache-Control: max-age=seconds" will ask to cache content</li>
	 * </ul>
	 * <p>For more specific needs, a custom {@link org.springframework.http.CacheControl}
	 * should be used.
	 * @see #setCacheControl
	 */
	/**
	 * 通过将与缓存相关的HTTP标头写入响应中，以给定的秒数缓存内容：<ul> <li> seconds == -1（默认值）：没有生成与缓存相关的标头</ li> <li> seconds == 0："缓存控件：不存储"将阻止缓存</ li> <li> seconds> 0："缓存控件：max-age = seconds"将要求缓存内容</ li> </ ul > <p>对于更具体的需求，应该使用定制的{@link  org.springframework.http.CacheControl}。 
	 *  
	 * @see  #setCacheControl
	 */
	public final void setCacheSeconds(int seconds) {
		this.cacheSeconds = seconds;
	}

	/**
	 * Return the number of seconds that content is cached.
	 */
	/**
	 * 返回内容缓存的秒数。 
	 * 
	 */
	public final int getCacheSeconds() {
		return this.cacheSeconds;
	}

	/**
	 * Configure one or more request header names (e.g. "Accept-Language") to
	 * add to the "Vary" response header to inform clients that the response is
	 * subject to content negotiation and variances based on the value of the
	 * given request headers. The configured request header names are added only
	 * if not already present in the response "Vary" header.
	 * @param varyByRequestHeaders one or more request header names
	 * @since 4.3
	 */
	/**
	 * 配置一个或多个请求标头名称（例如"Accept-Language"）以添加到"Vary"响应标头中，以告知客户端响应取决于内容协商和基于给定请求标头值的变化。 
	 * 仅当响应"Vary"标头中不存在已配置的请求标头名称时，才添加该名称。 
	 *  
	 * @param  variableByRequestHeaders一个或多个请求标头名称，自4.3起
	 */
	public final void setVaryByRequestHeaders(@Nullable String... varyByRequestHeaders) {
		this.varyByRequestHeaders = varyByRequestHeaders;
	}

	/**
	 * Return the configured request header names for the "Vary" response header.
	 * @since 4.3
	 */
	/**
	 * 返回"Vary"响应头的已配置请求头名称。 
	 *  @4.3起
	 */
	@Nullable
	public final String[] getVaryByRequestHeaders() {
		return this.varyByRequestHeaders;
	}

	/**
	 * Set whether to use the HTTP 1.0 expires header. Default is "false",
	 * as of 4.2.
	 * <p>Note: Cache headers will only get applied if caching is enabled
	 * (or explicitly prevented) for the current request.
	 * @deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control
	 * header will be required, with the HTTP 1.0 headers disappearing
	 */
	/**
	 * 设置是否使用HTTP 1.0 expires标头。 
	 * 从4.2开始，默认值为"false"。 
	 *  <p>注意：仅当为当前请求启用（或明确禁止）缓存时，才会应用缓存头。 
	 *  @从4.2开始不推荐使用，因为从此以后，将需要HTTP 1.1缓存控制标头，而HTTP 1.0标头将消失
	 */
	@Deprecated
	public final void setUseExpiresHeader(boolean useExpiresHeader) {
		this.useExpiresHeader = useExpiresHeader;
	}

	/**
	 * Return whether the HTTP 1.0 expires header is used.
	 * @deprecated as of 4.2, in favor of {@link #getCacheControl()}
	 */
	/**
	 * 返回是否使用HTTP 1.0 expires标头。 
	 *  @自4.2起弃用，推荐使用{@link  #getCacheControl（）}
	 */
	@Deprecated
	public final boolean isUseExpiresHeader() {
		return this.useExpiresHeader;
	}

	/**
	 * Set whether to use the HTTP 1.1 cache-control header. Default is "true".
	 * <p>Note: Cache headers will only get applied if caching is enabled
	 * (or explicitly prevented) for the current request.
	 * @deprecated as of 4.2, since going forward, the HTTP 1.1 cache-control
	 * header will be required, with the HTTP 1.0 headers disappearing
	 */
	/**
	 * 设置是否使用HTTP 1.1缓存控制标头。 
	 * 默认值为"true"。 
	 *  <p>注意：仅当为当前请求启用（或明确禁止）缓存时，才会应用缓存头。 
	 *  @从4.2开始不推荐使用，因为从此以后，将需要HTTP 1.1缓存控制标头，而HTTP 1.0标头将消失
	 */
	@Deprecated
	public final void setUseCacheControlHeader(boolean useCacheControlHeader) {
		this.useCacheControlHeader = useCacheControlHeader;
	}

	/**
	 * Return whether the HTTP 1.1 cache-control header is used.
	 * @deprecated as of 4.2, in favor of {@link #getCacheControl()}
	 */
	/**
	 * 返回是否使用HTTP 1.1缓存控制标头。 
	 *  @自4.2起弃用，推荐使用{@link  #getCacheControl（）}
	 */
	@Deprecated
	public final boolean isUseCacheControlHeader() {
		return this.useCacheControlHeader;
	}

	/**
	 * Set whether to use the HTTP 1.1 cache-control header value "no-store"
	 * when preventing caching. Default is "true".
	 * @deprecated as of 4.2, in favor of {@link #setCacheControl}
	 */
	/**
	 * 设置防止缓存时是否使用HTTP 1.1缓存控制标头值"no-store"。 
	 * 默认值为"true"。 
	 *  @自4.2起弃用，推荐使用{@link  #setCacheControl}
	 */
	@Deprecated
	public final void setUseCacheControlNoStore(boolean useCacheControlNoStore) {
		this.useCacheControlNoStore = useCacheControlNoStore;
	}

	/**
	 * Return whether the HTTP 1.1 cache-control header value "no-store" is used.
	 * @deprecated as of 4.2, in favor of {@link #getCacheControl()}
	 */
	/**
	 * 返回是否使用HTTP 1.1缓存控制标头值"no-store"。 
	 *  @自4.2起弃用，推荐使用{@link  #getCacheControl（）}
	 */
	@Deprecated
	public final boolean isUseCacheControlNoStore() {
		return this.useCacheControlNoStore;
	}

	/**
	 * An option to add 'must-revalidate' to every Cache-Control header.
	 * This may be useful with annotated controller methods, which can
	 * programmatically do a last-modified calculation as described in
	 * {@link org.springframework.web.context.request.WebRequest#checkNotModified(long)}.
	 * <p>Default is "false".
	 * @deprecated as of 4.2, in favor of {@link #setCacheControl}
	 */
	/**
	 * 向每个Cache-Control标头添加"必须重新验证"的选项。 
	 * 这对于带注释的控制器方法可能很有用，该控制器方法可以按编程方式进行最后修改的计算，如{@link  org.springframework.web.context.request.WebRequest＃checkNotModified（long）}中所述。 
	 *  <p>默认为"false"。 
	 *  @自4.2起弃用，推荐使用{@link  #setCacheControl}
	 */
	@Deprecated
	public final void setAlwaysMustRevalidate(boolean mustRevalidate) {
		this.alwaysMustRevalidate = mustRevalidate;
	}

	/**
	 * Return whether 'must-revalidate' is added to every Cache-Control header.
	 * @deprecated as of 4.2, in favor of {@link #getCacheControl()}
	 */
	/**
	 * 返回是否将"必须重新验证"添加到每个Cache-Control标头。 
	 *  @自4.2起弃用，推荐使用{@link  #getCacheControl（）}
	 */
	@Deprecated
	public final boolean isAlwaysMustRevalidate() {
		return this.alwaysMustRevalidate;
	}


	/**
	 * Check the given request for supported methods and a required session, if any.
	 * @param request current HTTP request
	 * @throws ServletException if the request cannot be handled because a check failed
	 * @since 4.2
	 */
	/**
	 * 检查给定的请求以获取受支持的方法和所需的会话（如果有）。 
	 *  
	 * @param 请求当前的HTTP请求
	 * @throws  ServletException如果由于检查失败而无法处理该请求，则从4.2开始
	 */
	protected final void checkRequest(HttpServletRequest request) throws ServletException {
		// Check whether we should support the request method.
		String method = request.getMethod();
		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {
			throw new HttpRequestMethodNotSupportedException(method, this.supportedMethods);
		}

		// Check whether a session is required.
		if (this.requireSession && request.getSession(false) == null) {
			throw new HttpSessionRequiredException("Pre-existing session required but none found");
		}
	}

	/**
	 * Prepare the given response according to the settings of this generator.
	 * Applies the number of cache seconds specified for this generator.
	 * @param response current HTTP response
	 * @since 4.2
	 */
	/**
	 * 根据此生成器的设置准备给定的响应。 
	 * 应用为此生成器指定的高速缓存秒数。 
	 *  
	 * @param 响应当前HTTP响应@始于4.2
	 */
	protected final void prepareResponse(HttpServletResponse response) {
		if (this.cacheControl != null) {
			applyCacheControl(response, this.cacheControl);
		}
		else {
			applyCacheSeconds(response, this.cacheSeconds);
		}
		if (this.varyByRequestHeaders != null) {
			for (String value : getVaryRequestHeadersToAdd(response, this.varyByRequestHeaders)) {
				response.addHeader("Vary", value);
			}
		}
	}

	/**
	 * Set the HTTP Cache-Control header according to the given settings.
	 * @param response current HTTP response
	 * @param cacheControl the pre-configured cache control settings
	 * @since 4.2
	 */
	/**
	 * 根据给定的设置设置HTTP Cache-Control标头。 
	 *  
	 * @param 响应当前的HTTP响应
	 * @param  cacheControl自4.2开始的预配置缓存控制设置
	 */
	protected final void applyCacheControl(HttpServletResponse response, CacheControl cacheControl) {
		String ccValue = cacheControl.getHeaderValue();
		if (ccValue != null) {
			// Set computed HTTP 1.1 Cache-Control header
			response.setHeader(HEADER_CACHE_CONTROL, ccValue);

			if (response.containsHeader(HEADER_PRAGMA)) {
				// Reset HTTP 1.0 Pragma header if present
				response.setHeader(HEADER_PRAGMA, "");
			}
			if (response.containsHeader(HEADER_EXPIRES)) {
				// Reset HTTP 1.0 Expires header if present
				response.setHeader(HEADER_EXPIRES, "");
			}
		}
	}

	/**
	 * Apply the given cache seconds and generate corresponding HTTP headers,
	 * i.e. allow caching for the given number of seconds in case of a positive
	 * value, prevent caching if given a 0 value, do nothing else.
	 * Does not tell the browser to revalidate the resource.
	 * @param response current HTTP response
	 * @param cacheSeconds positive number of seconds into the future that the
	 * response should be cacheable for, 0 to prevent caching
	 */
	/**
	 * 应用给定的缓存秒数并生成相应的HTTP标头，即在为正数的情况下允许缓存给定的秒数，如果给定值为0则阻止缓存，则不执行其他任何操作。 
	 * 不告诉浏览器重新验证资源。 
	 *  
	 * @param 响应当前的HTTP响应
	 * @param  cache响应应该在未来秒内以秒为单位的秒数，应为0，以防止缓存
	 */
	@SuppressWarnings("deprecation")
	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds) {
		if (this.useExpiresHeader || !this.useCacheControlHeader) {
			// Deprecated HTTP 1.0 cache behavior, as in previous Spring versions
			if (cacheSeconds > 0) {
				cacheForSeconds(response, cacheSeconds);
			}
			else if (cacheSeconds == 0) {
				preventCaching(response);
			}
		}
		else {
			CacheControl cControl;
			if (cacheSeconds > 0) {
				cControl = CacheControl.maxAge(cacheSeconds, TimeUnit.SECONDS);
				if (this.alwaysMustRevalidate) {
					cControl = cControl.mustRevalidate();
				}
			}
			else if (cacheSeconds == 0) {
				cControl = (this.useCacheControlNoStore ? CacheControl.noStore() : CacheControl.noCache());
			}
			else {
				cControl = CacheControl.empty();
			}
			applyCacheControl(response, cControl);
		}
	}


	/**
	 * Check and prepare the given request and response according to the settings
	 * of this generator.
	 * @see #checkRequest(HttpServletRequest)
	 * @see #prepareResponse(HttpServletResponse)
	 * @deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,
	 * with a must-revalidate header only generated if explicitly configured
	 */
	/**
	 * 根据此生成器的设置检查并准备给定的请求和响应。 
	 *  
	 * @see  #checkRequest（HttpServletRequest）
	 * @see  #prepareResponse（HttpServletResponse）@自4.2以来已弃用，因为{@code  lastModified}标志实际上被忽略，只有在显式配置时才会生成必须重新验证的标头
	 */
	@Deprecated
	protected final void checkAndPrepare(
			HttpServletRequest request, HttpServletResponse response, boolean lastModified) throws ServletException {

		checkRequest(request);
		prepareResponse(response);
	}

	/**
	 * Check and prepare the given request and response according to the settings
	 * of this generator.
	 * @see #checkRequest(HttpServletRequest)
	 * @see #applyCacheSeconds(HttpServletResponse, int)
	 * @deprecated as of 4.2, since the {@code lastModified} flag is effectively ignored,
	 * with a must-revalidate header only generated if explicitly configured
	 */
	/**
	 * 根据此生成器的设置检查并准备给定的请求和响应。 
	 *  
	 * @see  #checkRequest（HttpServletRequest）
	 * @see  #applyCacheSeconds（HttpServletResponse，int）自4.2以来已弃用，因为{@code  lastModified}标志已被有效忽略，只有在显式生成时才生成必须重新验证的标头已配置
	 */
	@Deprecated
	protected final void checkAndPrepare(
			HttpServletRequest request, HttpServletResponse response, int cacheSeconds, boolean lastModified)
			throws ServletException {

		checkRequest(request);
		applyCacheSeconds(response, cacheSeconds);
	}

	/**
	 * Apply the given cache seconds and generate respective HTTP headers.
	 * <p>That is, allow caching for the given number of seconds in the
	 * case of a positive value, prevent caching if given a 0 value, else
	 * do nothing (i.e. leave caching to the client).
	 * @param response the current HTTP response
	 * @param cacheSeconds the (positive) number of seconds into the future
	 * that the response should be cacheable for; 0 to prevent caching; and
	 * a negative value to leave caching to the client.
	 * @param mustRevalidate whether the client should revalidate the resource
	 * (typically only necessary for controllers with last-modified support)
	 * @deprecated as of 4.2, in favor of {@link #applyCacheControl}
	 */
	/**
	 * 应用给定的缓存秒数并生成相应的HTTP标头。 
	 *  <p>也就是说，如果为正值，则允许缓存给定的秒数，如果给定值为0，则阻止缓存，否则不做任何事情（即将缓存留给客户端）。 
	 *  
	 * @param 响应当前的HTTP响应
	 * @param  cache第二个响应（秒）是响应应该可缓存的未来秒数； 
	 *  0防止缓存； 
	 * 负值将缓存留给客户端。 
	 *  
	 * @param  mustRevalidate客户端是否应该重新验证资源（通常仅对最后修改支持的控制器必要），自4.2开始弃用，推荐使用{@link  #applyCacheControl}
	 */
	@Deprecated
	protected final void applyCacheSeconds(HttpServletResponse response, int cacheSeconds, boolean mustRevalidate) {
		if (cacheSeconds > 0) {
			cacheForSeconds(response, cacheSeconds, mustRevalidate);
		}
		else if (cacheSeconds == 0) {
			preventCaching(response);
		}
	}

	/**
	 * Set HTTP headers to allow caching for the given number of seconds.
	 * Does not tell the browser to revalidate the resource.
	 * @param response current HTTP response
	 * @param seconds number of seconds into the future that the response
	 * should be cacheable for
	 * @deprecated as of 4.2, in favor of {@link #applyCacheControl}
	 */
	/**
	 * 设置HTTP标头以允许缓存给定的秒数。 
	 * 不告诉浏览器重新验证资源。 
	 *  
	 * @param 响应当前的HTTP响应
	 * @param 秒从4.2开始，响应应该可缓存@deprecated的时间，以秒为单位的秒数，以{@link  #applyCacheControl}为准
	 */
	@Deprecated
	protected final void cacheForSeconds(HttpServletResponse response, int seconds) {
		cacheForSeconds(response, seconds, false);
	}

	/**
	 * Set HTTP headers to allow caching for the given number of seconds.
	 * Tells the browser to revalidate the resource if mustRevalidate is
	 * {@code true}.
	 * @param response the current HTTP response
	 * @param seconds number of seconds into the future that the response
	 * should be cacheable for
	 * @param mustRevalidate whether the client should revalidate the resource
	 * (typically only necessary for controllers with last-modified support)
	 * @deprecated as of 4.2, in favor of {@link #applyCacheControl}
	 */
	/**
	 * 设置HTTP标头以允许缓存给定的秒数。 
	 * 如果mustRevalidate为{@code  true}，则告诉浏览器重新验证资源。 
	 *  
	 * @param 响应当前的HTTP响应
	 * @param 秒响应应该可缓存为
	 * @param 的秒数（秒）mustRevalidate客户端是否应该重新验证资源（通常仅对于具有最新修改支持的控制器而言必需） ）自4.2起不推荐使用，推荐使用{@link  #applyCacheControl}
	 */
	@Deprecated
	protected final void cacheForSeconds(HttpServletResponse response, int seconds, boolean mustRevalidate) {
		if (this.useExpiresHeader) {
			// HTTP 1.0 header
			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L);
		}
		else if (response.containsHeader(HEADER_EXPIRES)) {
			// Reset HTTP 1.0 Expires header if present
			response.setHeader(HEADER_EXPIRES, "");
		}

		if (this.useCacheControlHeader) {
			// HTTP 1.1 header
			String headerValue = "max-age=" + seconds;
			if (mustRevalidate || this.alwaysMustRevalidate) {
				headerValue += ", must-revalidate";
			}
			response.setHeader(HEADER_CACHE_CONTROL, headerValue);
		}

		if (response.containsHeader(HEADER_PRAGMA)) {
			// Reset HTTP 1.0 Pragma header if present
			response.setHeader(HEADER_PRAGMA, "");
		}
	}

	/**
	 * Prevent the response from being cached.
	 * Only called in HTTP 1.0 compatibility mode.
	 * <p>See {@code https://www.mnot.net/cache_docs}.
	 * @deprecated as of 4.2, in favor of {@link #applyCacheControl}
	 */
	/**
	 * 防止响应被缓存。 
	 * 仅在HTTP 1.0兼容模式下调用。 
	 *  <p>请参阅{@code  https://www.mnot.net/cache_docs}。 
	 *  @自4.2起弃用，推荐使用{@link  #applyCacheControl}
	 */
	@Deprecated
	protected final void preventCaching(HttpServletResponse response) {
		response.setHeader(HEADER_PRAGMA, "no-cache");

		if (this.useExpiresHeader) {
			// HTTP 1.0 Expires header
			response.setDateHeader(HEADER_EXPIRES, 1L);
		}

		if (this.useCacheControlHeader) {
			// HTTP 1.1 Cache-Control header: "no-cache" is the standard value,
			// "no-store" is necessary to prevent caching on Firefox.
			response.setHeader(HEADER_CACHE_CONTROL, "no-cache");
			if (this.useCacheControlNoStore) {
				response.addHeader(HEADER_CACHE_CONTROL, "no-store");
			}
		}
	}


	private Collection<String> getVaryRequestHeadersToAdd(HttpServletResponse response, String[] varyByRequestHeaders) {
		if (!response.containsHeader(HttpHeaders.VARY)) {
			return Arrays.asList(varyByRequestHeaders);
		}
		Collection<String> result = new ArrayList<>(varyByRequestHeaders.length);
		Collections.addAll(result, varyByRequestHeaders);
		for (String header : response.getHeaders(HttpHeaders.VARY)) {
			for (String existing : StringUtils.tokenizeToStringArray(header, ",")) {
				if ("*".equals(existing)) {
					return Collections.emptyList();
				}
				for (String value : varyByRequestHeaders) {
					if (value.equalsIgnoreCase(existing)) {
						result.remove(value);
					}
				}
			}
		}
		return result;
	}

}
