/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.view.feed;

import java.io.OutputStreamWriter;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.rometools.rome.feed.WireFeed;
import com.rometools.rome.io.WireFeedOutput;

import org.springframework.util.StringUtils;
import org.springframework.web.servlet.view.AbstractView;

/**
 * Abstract base class for Atom and RSS Feed views, using the
 * <a href="https://github.com/rometools/rome">ROME</a> package.
 *
 * <p>><b>NOTE: As of Spring 4.1, this is based on the {@code com.rometools}
 * variant of ROME, version 1.5. Please upgrade your build dependency.</b>
 *
 * <p>Application-specific view classes will typically extend from either
 * {@link AbstractRssFeedView} or {@link AbstractAtomFeedView} instead of from this class.
 *
 * <p>Thanks to Jettro Coenradie and Sergio Bossa for the original feed view prototype!
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 3.0
 * @param <T> the {@link WireFeed} type
 * @see AbstractRssFeedView
 * @see AbstractAtomFeedView
 */
/**
 * 使用<a href="https://github.com/rometools/rome"> ROME </a>软件包的Atom和RSS Feed视图的抽象基类。 
 *  <p >> <b>注意：从Spring 4.1开始，它基于ROME 1.5版的{@code  com.rometools}变体。 
 * 请升级您的构建依赖项。 
 * </ b> <p>特定于应用程序的视图类通常从{@link  AbstractRssFeedView}或{@link  AbstractAtomFeedView}扩展，而不是从此类扩展。 
 *  <p>感谢Jettro Coenradie和Sergio Bossa提供了原始供稿视图原型！ 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @since 3.0 
 * @param  <T> {@link  WireFeed}类型
 * @see  AbstractRssFeedView 
 * @see  AbstractAtomFeedView
 */
public abstract class AbstractFeedView<T extends WireFeed> extends AbstractView {

	@Override
	protected final void renderMergedOutputModel(
			Map<String, Object> model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		T wireFeed = newFeed();
		buildFeedMetadata(model, wireFeed, request);
		buildFeedEntries(model, wireFeed, request, response);

		setResponseContentType(request, response);
		if (!StringUtils.hasText(wireFeed.getEncoding())) {
			wireFeed.setEncoding("UTF-8");
		}

		WireFeedOutput feedOutput = new WireFeedOutput();
		ServletOutputStream out = response.getOutputStream();
		feedOutput.output(wireFeed, new OutputStreamWriter(out, wireFeed.getEncoding()));
		out.flush();
	}

	/**
	 * Create a new feed to hold the entries.
	 * @return the newly created Feed instance
	 */
	/**
	 * 创建一个新的提要来保存条目。 
	 *  
	 * @return 新创建的Feed实例
	 */
	protected abstract T newFeed();

	/**
	 * Populate the feed metadata (title, link, description, etc.).
	 * <p>Default is an empty implementation. Subclasses can override this method
	 * to add meta fields such as title, link description, etc.
	 * @param model the model, in case meta information must be populated from it
	 * @param feed the feed being populated
	 * @param request in case we need locale etc. Shouldn't look at attributes.
	 */
	/**
	 * 填充提要元数据（标题，链接，描述等）。 
	 *  <p>默认为空实现。 
	 * 子类可以重写此方法以添加元字段，例如标题，链接描述等。 
	 * 
	 * @param 为模型建模，以防万一必须从中填充元信息
	 * @param  feed中要填充的feed @
	 * @param>请求情况下我们需要语言环境等。 
	 * 不应查看属性。 
	 * 
	 */
	protected void buildFeedMetadata(Map<String, Object> model, T feed, HttpServletRequest request) {
	}

	/**
	 * Subclasses must implement this method to build feed entries, given the model.
	 * <p>Note that the passed-in HTTP response is just supposed to be used for
	 * setting cookies or other HTTP headers. The built feed itself will automatically
	 * get written to the response after this method returns.
	 * @param model the model Map
	 * @param feed the feed to add entries to
	 * @param request in case we need locale etc. Shouldn't look at attributes.
	 * @param response in case we need to set cookies. Shouldn't write to it.
	 * @throws Exception any exception that occurred during building
	 */
	/**
	 * 给定模型，子类必须实现此方法才能构建提要条目。 
	 *  <p>请注意，传入的HTTP响应仅应用于设置cookie或其他HTTP标头。 
	 * 此方法返回后，内置的提要本身将自动写入响应中。 
	 *  
	 * @param 对模型进行建模Map 
	 * @param 提要供稿，以便在需要区域设置等情况下向
	 * @param 请求添加条目。 
	 * 不应查看属性。 
	 *  
	 * @param 响应，以防我们需要设置cookie。 
	 * 不应该写。 
	 *  
	 * @throws 排除构建期间发生的任何异常
	 */
	protected abstract void buildFeedEntries(Map<String, Object> model, T feed,
			HttpServletRequest request, HttpServletResponse response) throws Exception;

}
