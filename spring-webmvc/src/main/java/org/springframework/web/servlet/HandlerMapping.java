/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet;

import javax.servlet.http.HttpServletRequest;

import org.springframework.lang.Nullable;

/**
 * Interface to be implemented by objects that define a mapping between
 * requests and handler objects.
 *
 * <p>This class can be implemented by application developers, although this is not
 * necessary, as {@link org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping}
 * and {@link org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping}
 * are included in the framework. The former is the default if no
 * HandlerMapping bean is registered in the application context.
 *
 * <p>HandlerMapping implementations can support mapped interceptors but do not
 * have to. A handler will always be wrapped in a {@link HandlerExecutionChain}
 * instance, optionally accompanied by some {@link HandlerInterceptor} instances.
 * The DispatcherServlet will first call each HandlerInterceptor's
 * {@code preHandle} method in the given order, finally invoking the handler
 * itself if all {@code preHandle} methods have returned {@code true}.
 *
 * <p>The ability to parameterize this mapping is a powerful and unusual
 * capability of this MVC framework. For example, it is possible to write
 * a custom mapping based on session state, cookie state or many other
 * variables. No other MVC framework seems to be equally flexible.
 *
 * <p>Note: Implementations can implement the {@link org.springframework.core.Ordered}
 * interface to be able to specify a sorting order and thus a priority for getting
 * applied by DispatcherServlet. Non-Ordered instances get treated as lowest priority.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see org.springframework.core.Ordered
 * @see org.springframework.web.servlet.handler.AbstractHandlerMapping
 * @see org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping
 * @see org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
 */
/**
 * 由定义请求和处理程序对象之间的映射关系的对象实现的接口。 
 *  <p>此类可以由应用程序开发人员实现，尽管不是必需的，例如{@link  org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping}和{@link  org.springframework.web.servlet。 
 * 该框架中包含mvc.method.annotation.RequestMappingHandlerMapping}。 
 * 如果未在应用程序上下文中注册HandlerMapping bean，则前者是默认值。 
 *  <p> HandlerMapping实现可以支持映射的拦截器，但不是必须的。 
 * 处理程序将始终包装在{@link  HandlerExecutionChain}实例中，并可选地伴随一些{@link  HandlerInterceptor}实例。 
 *  DispatcherServlet将首先以给定的顺序调用每个HandlerInterceptor的{@code  preHandle}方法，如果所有的{@code  preHandle}方法都返回了{@code  true}，则最终调用处理程序本身。 
 *  <p>参数化此映射的功能是此MVC框架的强大而独特的功能。 
 * 例如，可以根据会话状态，cookie状态或许多其他变量编写自定义映射。 
 * 没有其他MVC框架似乎同样灵活。 
 *  <p>注意：实现可以实现{@link  org.springframework.core.Ordered}接口，以指定排序顺序，从而指定DispatcherServlet应用的优先级。 
 * 非订购实例被视为最低优先级。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  org.springframework.core.Ordered 
 * @see  org.springframework.web.servlet.handler.AbstractHandlerMapping 
 * @see  org.springframework.web.servlet。 
 *  handler.BeanNameUrlHandlerMapping 
 * @see  org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
 */
public interface HandlerMapping {

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the mapped
	 * handler for the best matching pattern.
	 * @since 4.3.21
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含最佳匹配模式的映射处理程序。 
	 *  @自4.3.21起
	 */
	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the path
	 * used to look up the matching handler, which depending on the configured
	 * {@link org.springframework.web.util.UrlPathHelper} could be the full path
	 * or without the context path, decoded or not, etc.
	 * @since 5.2
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含用于查找匹配处理程序的路径，取决于配置的{@link  org.springframework.web.util.UrlPathHelper}，该路径可以是完整路径，也可以不包含完整路径上下文路径，是否已解码，等等。 
	 * @5.2起
	 */
	String LOOKUP_PATH = HandlerMapping.class.getName() + ".lookupPath";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the path
	 * within the handler mapping, in case of a pattern match, or the full
	 * relevant URI (typically within the DispatcherServlet's mapping) else.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. URL-based HandlerMappings will
	 * typically support it, but handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，如果模式匹配，则包含处理程序映射中的路径，否则包含完整的相关URI（通常在DispatcherServlet的映射中）。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 基于URL的HandlerMappings通常将支持它，但是处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE = HandlerMapping.class.getName() + ".pathWithinHandlerMapping";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the
	 * best matching pattern within the handler mapping.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. URL-based HandlerMappings will
	 * typically support it, but handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含处理程序映射中的最佳匹配模式。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 基于URL的HandlerMappings通常将支持它，但是处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String BEST_MATCHING_PATTERN_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingPattern";

	/**
	 * Name of the boolean {@link HttpServletRequest} attribute that indicates
	 * whether type-level mappings should be inspected.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations.
	 */
	/**
	 * 布尔型{@link  HttpServletRequest}属性的名称，该属性指示是否应检查类型级别的映射。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 
	 */
	String INTROSPECT_TYPE_LEVEL_MAPPING = HandlerMapping.class.getName() + ".introspectTypeLevelMapping";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the URI
	 * templates map, mapping variable names to values.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. URL-based HandlerMappings will
	 * typically support it, but handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * 包含URI模板映射的{@link  HttpServletRequest}属性的名称，将变量名称映射为值。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 基于URL的HandlerMappings通常将支持它，但是处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String URI_TEMPLATE_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + ".uriTemplateVariables";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains a map with
	 * URI variable names and a corresponding MultiValueMap of URI matrix
	 * variables for each.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations and may also not be present depending on
	 * whether the HandlerMapping is configured to keep matrix variable content
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含具有URI变量名称的映射以及每个URI矩阵变量的对应MultiValueMap。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性，并且取决于是否将HandlerMapping配置为保留矩阵变量内容，该属性也可能不存在
	 */
	String MATRIX_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + ".matrixVariables";

	/**
	 * Name of the {@link HttpServletRequest} attribute that contains the set of
	 * producible MediaTypes applicable to the mapped handler.
	 * <p>Note: This attribute is not required to be supported by all
	 * HandlerMapping implementations. Handlers should not necessarily expect
	 * this request attribute to be present in all scenarios.
	 */
	/**
	 * {@link  HttpServletRequest}属性的名称，该属性包含适用于映射处理程序的可产生MediaType的集合。 
	 *  <p>注意：并非所有HandlerMapping实现都支持此属性。 
	 * 处理程序不必一定希望此请求属性在所有情况下都存在。 
	 * 
	 */
	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";

	/**
	 * Return a handler and any interceptors for this request. The choice may be made
	 * on request URL, session state, or any factor the implementing class chooses.
	 * <p>The returned HandlerExecutionChain contains a handler Object, rather than
	 * even a tag interface, so that handlers are not constrained in any way.
	 * For example, a HandlerAdapter could be written to allow another framework's
	 * handler objects to be used.
	 * <p>Returns {@code null} if no match was found. This is not an error.
	 * The DispatcherServlet will query all registered HandlerMapping beans to find
	 * a match, and only decide there is an error if none can find a handler.
	 * @param request current HTTP request
	 * @return a HandlerExecutionChain instance containing handler object and
	 * any interceptors, or {@code null} if no mapping found
	 * @throws Exception if there is an internal error
	 */
	/**
	 * 返回此请求的处理程序和所有拦截器。 
	 * 可以根据请求URL，会话状态或实现类选择的任何因素进行选择。 
	 *  <p>返回的HandlerExecutionChain包含一个处理程序对象，甚至没有一个标签接口，因此不会以任何方式限制处理程序。 
	 * 例如，可以编写HandlerAdapter来允许使用另一个框架的处理程序对象。 
	 *  <p>如果未找到匹配项，则返回{@code  null}。 
	 * 这不是错误。 
	 *  DispatcherServlet将查询所有已注册的HandlerMapping Bean以查找匹配项，并且仅在没有人可以找到处理程序的情况下才确定错误。 
	 *  
	 * @param 请求当前的HTTP请求
	 * @return 包含处理程序对象和任何拦截器的HandlerExecutionChain实例； 
	 * 如果未找到映射，则返回{@code  null} 
	 * @throws 如果存在内部错误，则异常
	 */
	@Nullable
	HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;

}
