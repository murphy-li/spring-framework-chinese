/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.view.freemarker;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletContext;

import freemarker.cache.ClassTemplateLoader;
import freemarker.cache.TemplateLoader;
import freemarker.ext.jsp.TaglibFactory;
import freemarker.template.Configuration;
import freemarker.template.TemplateException;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.ResourceLoaderAware;
import org.springframework.lang.Nullable;
import org.springframework.ui.freemarker.FreeMarkerConfigurationFactory;
import org.springframework.util.Assert;
import org.springframework.web.context.ServletContextAware;

/**
 * JavaBean to configure FreeMarker for web usage, via the "configLocation"
 * and/or "freemarkerSettings" and/or "templateLoaderPath" properties.
 * The simplest way to use this class is to specify just a "templateLoaderPath";
 * you do not need any further configuration then.
 *
 * <pre class="code">
 * &lt;bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"&gt;
 *   &lt;property name="templateLoaderPath"&gt;&lt;value&gt;/WEB-INF/freemarker/&lt;/value>&lt;/property&gt;
 * &lt;/bean&gt;</pre>
 *
 * This bean must be included in the application context of any application
 * using Spring's FreeMarkerView for web MVC. It exists purely to configure FreeMarker.
 * It is not meant to be referenced by application components but just internally
 * by FreeMarkerView. Implements FreeMarkerConfig to be found by FreeMarkerView without
 * depending on the bean name of the configurer. Each DispatcherServlet can define its
 * own FreeMarkerConfigurer if desired.
 *
 * <p>Note that you can also refer to a preconfigured FreeMarker Configuration
 * instance, for example one set up by FreeMarkerConfigurationFactoryBean, via
 * the "configuration" property. This allows to share a FreeMarker Configuration
 * for web and email usage, for example.
 *
 * <p>This configurer registers a template loader for this package, allowing to
 * reference the "spring.ftl" macro library contained in this package:
 *
 * <pre class="code">
 * &lt;#import "/spring.ftl" as spring/&gt;
 * &lt;@spring.bind "person.age"/&gt;
 * age is ${spring.status.value}</pre>
 *
 * Note: Spring's FreeMarker support requires FreeMarker 2.3 or higher.
 *
 * @author Darren Davison
 * @author Rob Harrop
 * @since 03.03.2004
 * @see #setConfigLocation
 * @see #setFreemarkerSettings
 * @see #setTemplateLoaderPath
 * @see #setConfiguration
 * @see org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean
 * @see FreeMarkerView
 */
/**
 * JavaBean通过"configLocation"和/或"freemarkerSettings"和/或"templateLoaderPath"属性来配置FreeMarker用于Web。 
 * 使用此类的最简单方法是只指定一个"templateLoaderPath"。 
 * 然后，您不需要任何进一步的配置。 
 *  <pre class ="code"> <bean id ="freemarkerConfig"class ="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> <属性名称="templateLoaderPath"> <值> / WEB-INF / freemarker / </ value> </ property> </ bean> </ pre>此Bean必须包含在任何使用Spring的FreeMarkerView for Web MVC的应用程序的应用程序上下文中。 
 * 它仅用于配置FreeMarker。 
 * 它不是由应用程序组件引用的，而是由FreeMarkerView内部引用的。 
 * 实现由FreeMarkerView查找的FreeMarkerConfig，而不依赖于配置程序的bean名称。 
 * 如果需要，每个DispatcherServlet可以定义自己的FreeMarkerConfigurer。 
 *  <p>请注意，您还可以通过"configuration"属性引用预配置的FreeMarker Configuration实例，例如，由FreeMarkerConfigurationFactoryBean设置的实例。 
 * 例如，这允许共享用于Web和电子邮件使用的FreeMarker配置。 
 *  <p>此配置程序为此程序包注册一个模板加载器，从而允许引用此程序包中包含的"spring.ftl"宏库：<pre class ="code"> <#import"/spring.ftl"作为sp​​ring /> <@spring.bind"person.age"/>的年龄为$ {spring.status.value} </ pre>注意：Spring的FreeMarker支持需要FreeMarker 2.3或更高版本。 
 *  @author  Darren Davison @author  Rob Harrop @since 03.03.2004 
 * @see  #setConfigLocation 
 * @see  #setFreemarkerSettings 
 * @see  #setTemplateLoaderPath 
 * @see  #setConfiguration 
 * @see  org.springframework.ui .freemarker.FreeMarkerConfigurationFactoryBean 
 * @see  FreeMarkerView
 */
public class FreeMarkerConfigurer extends FreeMarkerConfigurationFactory
		implements FreeMarkerConfig, InitializingBean, ResourceLoaderAware, ServletContextAware {

	@Nullable
	private Configuration configuration;

	@Nullable
	private TaglibFactory taglibFactory;


	/**
	 * Set a preconfigured Configuration to use for the FreeMarker web config, e.g. a
	 * shared one for web and email usage, set up via FreeMarkerConfigurationFactoryBean.
	 * If this is not set, FreeMarkerConfigurationFactory's properties (inherited by
	 * this class) have to be specified.
	 * @see org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean
	 */
	/**
	 * 设置用于FreeMarker Web配置的预配置配置，例如通过FreeMarkerConfigurationFactoryBean设置的用于Web和电子邮件使用的共享库。 
	 * 如果未设置，则必须指定FreeMarkerConfigurationFactory的属性（由此类继承）。 
	 *  
	 * @see  org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean
	 */
	public void setConfiguration(Configuration configuration) {
		this.configuration = configuration;
	}

	/**
	 * Initialize the {@link TaglibFactory} for the given ServletContext.
	 */
	/**
	 * 初始化给定ServletContext的{@link  TaglibFactory}。 
	 * 
	 */
	@Override
	public void setServletContext(ServletContext servletContext) {
		this.taglibFactory = new TaglibFactory(servletContext);
	}


	/**
	 * Initialize FreeMarkerConfigurationFactory's Configuration
	 * if not overridden by a preconfigured FreeMarker Configuration.
	 * <p>Sets up a ClassTemplateLoader to use for loading Spring macros.
	 * @see #createConfiguration
	 * @see #setConfiguration
	 */
	/**
	 * 如果未被预配置的FreeMarker配置覆盖，则初始化FreeMarkerConfigurationFactory的配置。 
	 *  <p>设置用于加载Spring宏的ClassTemplateLoader。 
	 *  
	 * @see  #createConfiguration 
	 * @see  #setConfiguration
	 */
	@Override
	public void afterPropertiesSet() throws IOException, TemplateException {
		if (this.configuration == null) {
			this.configuration = createConfiguration();
		}
	}

	/**
	 * This implementation registers an additional ClassTemplateLoader
	 * for the Spring-provided macros, added to the end of the list.
	 */
	/**
	 * 此实现为Spring提供的宏注册了一个附加的ClassTemplateLoader，该宏添加到列表的末尾。 
	 * 
	 */
	@Override
	protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {
		templateLoaders.add(new ClassTemplateLoader(FreeMarkerConfigurer.class, ""));
	}


	/**
	 * Return the Configuration object wrapped by this bean.
	 */
	/**
	 * 返回此bean包装的Configuration对象。 
	 * 
	 */
	@Override
	public Configuration getConfiguration() {
		Assert.state(this.configuration != null, "No Configuration available");
		return this.configuration;
	}

	/**
	 * Return the TaglibFactory object wrapped by this bean.
	 */
	/**
	 * 返回此bean包装的TaglibFactory对象。 
	 * 
	 */
	@Override
	public TaglibFactory getTaglibFactory() {
		Assert.state(this.taglibFactory != null, "No TaglibFactory available");
		return this.taglibFactory;
	}

}
