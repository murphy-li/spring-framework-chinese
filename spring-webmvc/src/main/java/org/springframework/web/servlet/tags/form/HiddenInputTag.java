/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.tags.form;

import javax.servlet.jsp.JspException;

/**
 * The {@code <hidden>} tag renders an HTML 'input' tag with type 'hidden' using
 * the bound value.
 *
 * <p>Example (binding to 'name' property of form backing object):
 * <pre class="code">
 * &lt;form:hidden path=&quot;name&quot;/&gt;
 * </pre>
 *
 * <p>
 * <table>
 * <caption>Attribute Summary</caption>
 * <thead>
 * <tr>
 * <th class="colFirst">Attribute</th>
 * <th class="colOne">Required?</th>
 * <th class="colOne">Runtime Expression?</th>
 * <th class="colLast">Description</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr class="altColor">
 * <td><p>htmlEscape</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Enable/disable HTML escaping of rendered values.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>id</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>path</p></td>
 * <td><p>true</p></td>
 * <td><p>true</p></td>
 * <td><p>Path to property for data binding</p></td>
 * </tr>
 * </tbody>
 * </table>
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @author Rossen Stoyanchev
 * @since 2.0
 */
/**
 * {@code  <hidden>}标签使用绑定值呈现类型为"hidden"的HTML"input"标签。 
 *  <p>示例（绑定到表单支持对象的'name'属性）：<pre class ="code"> <form：hidden path ="name"/> </ pre> <p> <table> <caption>属性摘要</ caption> <thead> <tr> <th class ="colFirst">属性</ th> <th class ="colOne">必需？</ th> <th class ="colOne">运行时表达式？< / th> <th class ="colLast">描述</ th> </ tr> </ thead> <tbody> <tr class ="altColor"> <td> <p> htmlEscape </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>启用/禁用呈现值的HTML转义。 
 * </ p> < / td> </ tr> <tr class ="rowColor"> <td> <p> id </ p> </ td> <td> <p> false </ p> </ td> <td> <p > true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p>路径</ p> </ td> <td> <p> true </ p> </ td> <td> <p> true </ p> </ td> <td> <p>数据绑定属性的路径</ p> </ td> </ tr> </ tbody> </ table> @author  Rob Harrop @author  Juergen Hoeller @author  Rossen Stoyanchev @since 2.0
 */
@SuppressWarnings("serial")
public class HiddenInputTag extends AbstractHtmlElementTag {

	/**
	 * The name of the '{@code disabled}' attribute.
	 */
	/**
	 * "{{@code  disabled}"属性的名称。 
	 * 
	 */
	public static final String DISABLED_ATTRIBUTE = "disabled";

	private boolean disabled;


	/**
	 * Set the value of the '{@code disabled}' attribute.
	 * May be a runtime expression.
	 */
	/**
	 * 设置'{@code  disabled}'属性的值。 
	 * 可能是运行时表达式。 
	 * 
	 */
	public void setDisabled(boolean disabled) {
		this.disabled = disabled;
	}

	/**
	 * Get the value of the '{@code disabled}' attribute.
	 */
	/**
	 * 获取"{{@code  disabled}"属性的值。 
	 * 
	 */
	public boolean isDisabled() {
		return this.disabled;
	}


	/**
	 * Flags "type" as an illegal dynamic attribute.
	 */
	/**
	 * 将"类型"标记为非法动态属性。 
	 * 
	 */
	@Override
	protected boolean isValidDynamicAttribute(String localName, Object value) {
		return !"type".equals(localName);
	}

	/**
	 * Writes the HTML '{@code input}' tag to the supplied {@link TagWriter} including the
	 * databound value.
	 * @see #writeDefaultAttributes(TagWriter)
	 * @see #getBoundValue()
	 */
	/**
	 * 将HTML'{@code  input}'标记写入提供的{@link  TagWriter}，包括数据绑定值。 
	 *  
	 * @see  #writeDefaultAttributes（TagWriter）
	 * @see  #getBoundValue（）
	 */
	@Override
	protected int writeTagContent(TagWriter tagWriter) throws JspException {
		tagWriter.startTag("input");
		writeDefaultAttributes(tagWriter);
		tagWriter.writeAttribute("type", "hidden");
		if (isDisabled()) {
			tagWriter.writeAttribute(DISABLED_ATTRIBUTE, "disabled");
		}
		String value = getDisplayString(getBoundValue(), getPropertyEditor());
		tagWriter.writeAttribute("value", processFieldValue(getName(), value, "hidden"));
		tagWriter.endTag();
		return SKIP_BODY;
	}

}
