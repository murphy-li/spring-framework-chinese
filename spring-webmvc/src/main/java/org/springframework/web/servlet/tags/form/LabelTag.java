/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.tags.form;

import javax.servlet.jsp.JspException;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

/**
 * The {@code <label>} tag renders a form field label in an HTML 'label' tag.
 *
 * <p>See the "formTags" showcase application that ships with the
 * full Spring distribution for an example of this class in action.
 *
 * <p>
 * <table>
 * <caption>Attribute Summary</caption>
 * <thead>
 * <tr>
 * <th class="colFirst">Attribute</th>
 * <th class="colOne">Required?</th>
 * <th class="colOne">Runtime Expression?</th>
 * <th class="colLast">Description</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr class="altColor">
 * <td><p>cssClass</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute.</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>cssErrorClass</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute. Used only when errors are present.</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>cssStyle</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Optional Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>dir</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>for</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>htmlEscape</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>Enable/disable HTML escaping of rendered values.</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>id</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>lang</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onclick</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>ondblclick</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onkeydown</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onkeypress</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onkeyup</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onmousedown</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onmousemove</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onmouseout</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>onmouseover</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>onmouseup</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Event Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>path</p></td>
 * <td><p>true</p></td>
 * <td><p>true</p></td>
 * <td><p>Path to errors object for data binding</p></td>
 * </tr>
 * <tr class="rowColor">
 * <td><p>tabindex</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * <tr class="altColor">
 * <td><p>title</p></td>
 * <td><p>false</p></td>
 * <td><p>true</p></td>
 * <td><p>HTML Standard Attribute</p></td>
 * </tr>
 * </tbody>
 * </table>
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * {@code  <label>}标签在HTML'label'标签中呈现表单字段标签。 
 *  <p>有关实际使用的此类的示例，请参见完整的Spring发行版附带的"formTags"展示应用程序。 
 *  <p> <表> <标题>属性摘要</标题> <thead> <tr> <th class ="colFirst">属性</ th> <th class ="colOne">必需？</ th> <th class ="colOne">运行时表达式？</ th> <th class ="colLast">描述</ th> </ tr> </ thead> <tbody> <tr class ="altColor"> <td> <p > cssClass </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML可选属性。 
 *  </ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> cssErrorClass </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML可选属性。 
 * 仅在出现错误时使用。 
 * </ p> </ td> </ tr> <tr class ="altColor"> <td> <p> cssStyle </ p> </ td> <td> <p> false < / p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML可选属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> dir </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> < p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> for </ p> </ td> <td> <p> false </ p > </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="rowColor"> < td> <p> htmlEscape </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p>启用/禁用呈现值的HTML转义。 
 * </ p> </ td> </ tr> <tr class ="altColor"> <td> <p> id </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> lang </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td > <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onclick </ p> </ td> <td> <p> false < / p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> < / tr> <tr class ="rowColor"> <td> <p> ondblclick </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onkeydown </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr > <tr class ="rowColor"> <td> <p> onkeypress </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onkeyup </ p> </ td> <td > <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> < tr class ="rowColor"> <td> <p> onmousedown </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onmousemove </ p> </ td> <td> < p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr类="rowColor"> <td> <p> onmouseout </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p> onmouseover </ p> </ td> <t d> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> onmouseup </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p> < / td> <td> <p> HTML事件属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p>路径</ p> </ td> <td> <p> true </ p> </ td> <td> <p> true </ p> </ td> <td> <p>数据绑定错误对象的路径</ p> </ td> </ tr> <tr class ="rowColor"> <td> <p> tabindex </ p> </ td> <td> <p> false </ p> </ td> <td> <p> true </ p > </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> <tr class ="altColor"> <td> <p>标题</ p> </ td> < td> <p> false </ p> </ td> <td> <p> true </ p> </ td> <td> <p> HTML标准属性</ p> </ td> </ tr> </ tbody> </ table> @author  Rob Harrop @author  Juergen Hoeller @since 2.0
 */
@SuppressWarnings("serial")
public class LabelTag extends AbstractHtmlElementTag {

	/**
	 * The HTML '{@code label}' tag.
	 */
	/**
	 * HTML的"{@code 标签}"标记。 
	 * 
	 */
	private static final String LABEL_TAG = "label";

	/**
	 * The name of the '{@code for}' attribute.
	 */
	/**
	 * "{{@code  for}"属性的名称。 
	 * 
	 */
	private static final String FOR_ATTRIBUTE = "for";


	/**
	 * The {@link TagWriter} instance being used.
	 * <p>Stored so we can close the tag on {@link #doEndTag()}.
	 */
	/**
	 * 正在使用{@link  TagWriter}实例。 
	 *  <p>已存储，因此我们可以关闭{@link  #doEndTag（）}上的标签。 
	 * 
	 */
	@Nullable
	private TagWriter tagWriter;

	/**
	 * The value of the '{@code for}' attribute.
	 */
	/**
	 * "{{@code  for}"属性的值。 
	 * 
	 */
	@Nullable
	private String forId;


	/**
	 * Set the value of the '{@code for}' attribute.
	 * <p>Defaults to the value of {@link #getPath}; may be a runtime expression.
	 */
	/**
	 * 设置'{@code  for}'属性的值。 
	 *  <p>默认为{@link  #getPath}的值； 
	 * 可以是运行时表达式。 
	 * 
	 */
	public void setFor(String forId) {
		this.forId = forId;
	}

	/**
	 * Get the value of the '{@code id}' attribute.
	 * <p>May be a runtime expression.
	 */
	/**
	 * 获取"{@code  id}"属性的值。 
	 *  <p>可能是运行时表达式。 
	 * 
	 */
	@Nullable
	protected String getFor() {
		return this.forId;
	}


	/**
	 * Writes the opening '{@code label}' tag and forces a block tag so
	 * that body content is written correctly.
	 * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}
	 */
	/**
	 * 写入开头的'{@code  label}标签，并强制使用block标签，以便正确编写正文内容。 
	 *  
	 * @return  {@link  javax.servlet.jsp.tagext.Tag＃EVAL_BODY_INCLUDE}
	 */
	@Override
	protected int writeTagContent(TagWriter tagWriter) throws JspException {
		tagWriter.startTag(LABEL_TAG);
		tagWriter.writeAttribute(FOR_ATTRIBUTE, resolveFor());
		writeDefaultAttributes(tagWriter);
		tagWriter.forceBlock();
		this.tagWriter = tagWriter;
		return EVAL_BODY_INCLUDE;
	}

	/**
	 * Overrides {@code #getName()} to always return {@code null},
	 * because the '{@code name}' attribute is not supported by the
	 * '{@code label}' tag.
	 * @return the value for the HTML '{@code name}' attribute
	 */
	/**
	 * 覆盖{@code  #getName（）}以始终返回{@code  null}，因为'{@code  label}'标签不支持'{@code  name}'属性。 
	 *  
	 * @return  HTML"{<@code>名称}"属性的值
	 */
	@Override
	@Nullable
	protected String getName() throws JspException {
		// This also suppresses the 'id' attribute (which is okay for a <label/>)
		return null;
	}

	/**
	 * Determine the '{@code for}' attribute value for this tag,
	 * autogenerating one if none specified.
	 * @see #getFor()
	 * @see #autogenerateFor()
	 */
	/**
	 * 确定此标记的"{@code  for}"属性值，如果未指定则自动生成一个。 
	 *  
	 * @see  #getFor（）
	 * @see  #autogenerateFor（）
	 */
	protected String resolveFor() throws JspException {
		if (StringUtils.hasText(this.forId)) {
			return getDisplayString(evaluate(FOR_ATTRIBUTE, this.forId));
		}
		else {
			return autogenerateFor();
		}
	}

	/**
	 * Autogenerate the '{@code for}' attribute value for this tag.
	 * <p>The default implementation delegates to {@link #getPropertyPath()},
	 * deleting invalid characters (such as "[" or "]").
	 */
	/**
	 * 自动为此标签生成'{@code  for}'属性值。 
	 *  <p>默认实现将委托给{@link  #getPropertyPath（）}，删除无效字符（例如"["或"]"）。 
	 * 
	 */
	protected String autogenerateFor() throws JspException {
		return StringUtils.deleteAny(getPropertyPath(), "[]");
	}

	/**
	 * Close the '{@code label}' tag.
	 */
	/**
	 * 关闭"{@code 标签}"标签。 
	 * 
	 */
	@Override
	public int doEndTag() throws JspException {
		Assert.state(this.tagWriter != null, "No TagWriter set");
		this.tagWriter.endTag();
		return EVAL_PAGE;
	}

	/**
	 * Disposes of the {@link TagWriter} instance.
	 */
	/**
	 * 处置{@link  TagWriter}实例。 
	 * 
	 */
	@Override
	public void doFinally() {
		super.doFinally();
		this.tagWriter = null;
	}

}
