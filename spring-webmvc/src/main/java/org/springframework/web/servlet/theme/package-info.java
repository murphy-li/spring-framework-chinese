/** Generated by english-annotation-buster, Powered by Google Translate.**/
/**
 * Theme support classes for Spring's web MVC framework.
 * Provides standard ThemeResolver implementations,
 * and a HandlerInterceptor for theme changes.
 *
 * <p>
 * <ul>
 * <li>If you don't provide a bean of one of these classes as {@code themeResolver},
 * a {@code FixedThemeResolver} will be provided with the default theme name 'theme'.</li>
 * <li>If you use a defined {@code FixedThemeResolver}, you will able to use another theme
 * name for default, but the users will stick on this theme.</li>
 * <li>With a {@code CookieThemeResolver} or {@code SessionThemeResolver}, you can allow
 * the user to change his current theme.</li>
 * <li>Generally, you will put in the themes resource bundles the paths of CSS files, images and HTML constructs.</li>
 * <li>For retrieving themes data, you can either use the spring:theme tag in JSP or access via the
 * {@code RequestContext} for other view technologies.</li>
 * <li>The {@code pagedlist} demo application uses themes</li>
 * </ul>
 */
/**
 * Spring的Web MVC框架的主题支持类。 
 * 提供标准的ThemeResolver实现，以及用于主题更改的HandlerInterceptor。 
 *  <p> <ul> <li>如果不提供以下类之一的bean作为{@code  themeResolver}，则会为{@code  FixedThemeResolver}提供默认主题名称'theme'。 
 *  。 
 * </ li> <li>如果您使用定义的{@code  FixedThemeResolver}，则可以默认使用其他主题名称，但用户将坚持使用该主题。 
 * </ li> <li>使用{@code  CookieThemeResolver}或{@code  SessionThemeResolver}，您可以允许用户更改其当前主题。 
 * </ li> <li>通常，您会在主题资源包中放入CSS文件的路径，图像和HTML构造。 
 * </ li> <li>要检索主题数据，可以在JSP中使用spring：theme标记，也可以通过{@code  RequestContext}访问其他视图技术。 
 * </ li> <li > {<@code> pagedlist}演示应用程序使用主题</ li> </ ul>
 */
@NonNullApi
@NonNullFields
package org.springframework.web.servlet.theme;

import org.springframework.lang.NonNullApi;
import org.springframework.lang.NonNullFields;
