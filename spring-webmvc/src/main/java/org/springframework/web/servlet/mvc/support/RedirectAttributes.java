/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.mvc.support;

import java.util.Collection;
import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.ui.Model;
import org.springframework.web.servlet.FlashMap;

/**
 * A specialization of the {@link Model} interface that controllers can use to
 * select attributes for a redirect scenario. Since the intent of adding
 * redirect attributes is very explicit --  i.e. to be used for a redirect URL,
 * attribute values may be formatted as Strings and stored that way to make
 * them eligible to be appended to the query string or expanded as URI
 * variables in {@code org.springframework.web.servlet.view.RedirectView}.
 *
 * <p>This interface also provides a way to add flash attributes. For a
 * general overview of flash attributes see {@link FlashMap}. You can use
 * {@link RedirectAttributes} to store flash attributes and they will be
 * automatically propagated to the "output" FlashMap of the current request.
 *
 * <p>Example usage in an {@code @Controller}:
 * <pre class="code">
 * &#064;RequestMapping(value = "/accounts", method = RequestMethod.POST)
 * public String handle(Account account, BindingResult result, RedirectAttributes redirectAttrs) {
 *   if (result.hasErrors()) {
 *     return "accounts/new";
 *   }
 *   // Save account ...
 *   redirectAttrs.addAttribute("id", account.getId()).addFlashAttribute("message", "Account created!");
 *   return "redirect:/accounts/{id}";
 * }
 * </pre>
 *
 * <p>A RedirectAttributes model is empty when the method is called and is never
 * used unless the method returns a redirect view name or a RedirectView.
 *
 * <p>After the redirect, flash attributes are automatically added to the model
 * of the controller that serves the target URL.
 *
 * @author Rossen Stoyanchev
 * @since 3.1
 */
/**
 * {@link 模型}接口的一种特殊化，控制器可以用来选择重定向方案的属性。 
 * 由于添加重定向属性的意图非常明确-即用于重定向URL，因此可以将属性值格式化为字符串并以这种方式存储，以使其有资格附加到查询字符串或扩展为{ @code  org.springframework.web.servlet.view.RedirectView}。 
 *  <p>此界面还提供了添加Flash属性的方法。 
 * 有关Flash属性的一般概述，请参见{@link  FlashMap}。 
 * 您可以使用{@link  RedirectAttributes}存储Flash属性，它们将被自动传播到当前请求的"输出"FlashMap。 
 *  <p>在{@code  @Controller}中的用法示例：<pre class ="code"> @RequestMapping（value ="/ accounts"，method = RequestMethod.POST）公共字符串句柄（帐户帐户，BindingResult结果， RedirectAttributes redirectAttrs）{如果（result.hasErrors（））{返回"帐户/新帐户"； 
 *  } //保存帐户... redirectAttrs.addAttribute（"id"，account.getId（））。 
 * addFlashAttribute（"message"，"创建帐户！ 
 * "）;返回"重定向：/帐户/ {id}"； 
 *  } </ pre> <p>调用该方法时，RedirectAttributes模型为空，除非该方法返回重定向视图名称或RedirectView，否则它将永远不会使用。 
 *  <p>重定向后，Flash属性会自动添加到提供目标URL的控制器模型中。 
 *  @author  Rossen Stoyanchev @从3.1开始
 */
public interface RedirectAttributes extends Model {

	@Override
	RedirectAttributes addAttribute(String attributeName, @Nullable Object attributeValue);

	@Override
	RedirectAttributes addAttribute(Object attributeValue);

	@Override
	RedirectAttributes addAllAttributes(Collection<?> attributeValues);

	@Override
	RedirectAttributes mergeAttributes(Map<String, ?> attributes);

	/**
	 * Add the given flash attribute.
	 * @param attributeName the attribute name; never {@code null}
	 * @param attributeValue the attribute value; may be {@code null}
	 */
	/**
	 * 添加给定的flash属性。 
	 *  
	 * @param  attributeName属性名称； 
	 * 从不{@code  null} 
	 * @param  attributeValue属性值； 
	 * 可能为{@code  null}
	 */
	RedirectAttributes addFlashAttribute(String attributeName, @Nullable Object attributeValue);

	/**
	 * Add the given flash storage using a
	 * {@link org.springframework.core.Conventions#getVariableName generated name}.
	 * @param attributeValue the flash attribute value; never {@code null}
	 */
	/**
	 * 使用{@link  org.springframework.core.Conventions＃getVariableName生成的名称}添加给定的闪存。 
	 *  
	 * @param  attributeValue闪存属性值； 
	 * 从不{@code  null}
	 */
	RedirectAttributes addFlashAttribute(Object attributeValue);

	/**
	 * Return the attributes candidate for flash storage or an empty Map.
	 */
	/**
	 * 返回用于闪存或空映射的候选属性。 
	 * 
	 */
	Map<String, ?> getFlashAttributes();
}
