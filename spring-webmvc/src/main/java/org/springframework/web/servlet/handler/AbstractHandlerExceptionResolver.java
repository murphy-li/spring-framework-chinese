/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.handler;

import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.core.Ordered;
import org.springframework.lang.Nullable;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;

/**
 * Abstract base class for {@link HandlerExceptionResolver} implementations.
 *
 * <p>Supports mapped {@linkplain #setMappedHandlers handlers} and
 * {@linkplain #setMappedHandlerClasses handler classes} that the resolver
 * should be applied to and implements the {@link Ordered} interface.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 3.0
 */
/**
 * {@link  HandlerExceptionResolver}实现的抽象基类。 
 *  <p>支持应将解析程序应用到的映射的{@link  plain #setMappedHandlers处理程序}和{@link  plain #setMappedHandlerClasses处理程序类}，并实现{@link  Ordered}接口。 
 *  @author  Arjen Poutsma @author 于尔根·霍勒（Juergen Hoeller）@author  Sam Brannen @since 3.0
 */
public abstract class AbstractHandlerExceptionResolver implements HandlerExceptionResolver, Ordered {

	private static final String HEADER_CACHE_CONTROL = "Cache-Control";


	/** Logger available to subclasses. */
	/**
	 * 记录器可用于子类。 
	 * 
	 */
	protected final Log logger = LogFactory.getLog(getClass());

	private int order = Ordered.LOWEST_PRECEDENCE;

	@Nullable
	private Set<?> mappedHandlers;

	@Nullable
	private Class<?>[] mappedHandlerClasses;

	@Nullable
	private Log warnLogger;

	private boolean preventResponseCaching = false;


	public void setOrder(int order) {
		this.order = order;
	}

	@Override
	public int getOrder() {
		return this.order;
	}

	/**
	 * Specify the set of handlers that this exception resolver should apply to.
	 * <p>The exception mappings and the default error view will only apply to the specified handlers.
	 * <p>If no handlers or handler classes are set, the exception mappings and the default error
	 * view will apply to all handlers. This means that a specified default error view will be used
	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be
	 * ignored in this case.
	 */
	/**
	 * 指定此异常解析器应应用于的处理程序集。 
	 *  <p>异常映射和默认错误视图仅适用于指定的处理程序。 
	 *  <p>如果未设置任何处理程序或处理程序类，则异常映射和默认错误视图将应用于所有处理程序。 
	 * 这意味着指定的默认错误视图将用作所有异常的后备； 
	 * 在这种情况下，将忽略链中所有其他HandlerExceptionResolvers。 
	 * 
	 */
	public void setMappedHandlers(Set<?> mappedHandlers) {
		this.mappedHandlers = mappedHandlers;
	}

	/**
	 * Specify the set of classes that this exception resolver should apply to.
	 * <p>The exception mappings and the default error view will only apply to handlers of the
	 * specified types; the specified types may be interfaces or superclasses of handlers as well.
	 * <p>If no handlers or handler classes are set, the exception mappings and the default error
	 * view will apply to all handlers. This means that a specified default error view will be used
	 * as a fallback for all exceptions; any further HandlerExceptionResolvers in the chain will be
	 * ignored in this case.
	 */
	/**
	 * 指定此异常解析器应应用的类集。 
	 *  <p>异常映射和默认错误视图仅适用于指定类型的处理程序； 
	 * 指定的类型也可以是处理程序的接口或超类。 
	 *  <p>如果未设置任何处理程序或处理程序类，则异常映射和默认错误视图将应用于所有处理程序。 
	 * 这意味着指定的默认错误视图将用作所有异常的后备； 
	 * 在这种情况下，将忽略链中所有其他HandlerExceptionResolvers。 
	 * 
	 */
	public void setMappedHandlerClasses(Class<?>... mappedHandlerClasses) {
		this.mappedHandlerClasses = mappedHandlerClasses;
	}

	/**
	 * Set the log category for warn logging. The name will be passed to the underlying logger
	 * implementation through Commons Logging, getting interpreted as a log category according
	 * to the logger's configuration. If {@code null} or empty String is passed, warn logging
	 * is turned off.
	 * <p>By default there is no warn logging although subclasses like
	 * {@link org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver}
	 * can change that default. Specify this setting to activate warn logging into a specific
	 * category. Alternatively, override the {@link #logException} method for custom logging.
	 * @see org.apache.commons.logging.LogFactory#getLog(String)
	 * @see java.util.logging.Logger#getLogger(String)
	 */
	/**
	 * 设置警告日志的日志类别。 
	 * 该名称将通过Commons Logging传递给基础记录器实现，根据记录器的配置将其解释为日志类别。 
	 * 如果传递{@code  null}或空字符串，则关闭警告日志记录。 
	 *  <p>默认情况下，没有警告日志记录，尽管{{@link> org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver}之类的子类可以更改该默认值。 
	 * 指定此设置以激活警告登录到特定类别。 
	 * 或者，重写{@link  #logException}方法以进行自定义日志记录。 
	 *  
	 * @see  org.apache.commons.logging.LogFactory＃getLog（String）
	 * @see  java.util.logging.Logger＃getLogger（String）
	 */
	public void setWarnLogCategory(String loggerName) {
		this.warnLogger = (StringUtils.hasLength(loggerName) ? LogFactory.getLog(loggerName) : null);
	}

	/**
	 * Specify whether to prevent HTTP response caching for any view resolved
	 * by this exception resolver.
	 * <p>Default is {@code false}. Switch this to {@code true} in order to
	 * automatically generate HTTP response headers that suppress response caching.
	 */
	/**
	 * 指定是否防止对此异常解析器解析的任何视图进行HTTP响应缓存。 
	 *  <p>默认值为{@code  false}。 
	 * 将此选项切换为{@code  true}，以自动生成抑制响应缓存的HTTP响应标头。 
	 * 
	 */
	public void setPreventResponseCaching(boolean preventResponseCaching) {
		this.preventResponseCaching = preventResponseCaching;
	}


	/**
	 * Check whether this resolver is supposed to apply (i.e. if the supplied handler
	 * matches any of the configured {@linkplain #setMappedHandlers handlers} or
	 * {@linkplain #setMappedHandlerClasses handler classes}), and then delegate
	 * to the {@link #doResolveException} template method.
	 */
	/**
	 * 检查是否应应用此解析器（即，提供的处理程序是否与任何已配置的{@link  plain #setMappedHandlers处理程序}或{@link  plain #setMappedHandlerClasses处理程序类}中的任何一个匹配），然后委托给{@link  #doResolveException}模板方法。 
	 * 
	 */
	@Override
	@Nullable
	public ModelAndView resolveException(
			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex) {

		if (shouldApplyTo(request, handler)) {
			prepareResponse(ex, response);
			ModelAndView result = doResolveException(request, response, handler, ex);
			if (result != null) {
				// Print debug message when warn logger is not enabled.
				if (logger.isDebugEnabled() && (this.warnLogger == null || !this.warnLogger.isWarnEnabled())) {
					logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result));
				}
				// Explicitly configured warn logger in logException method.
				logException(ex, request);
			}
			return result;
		}
		else {
			return null;
		}
	}

	/**
	 * Check whether this resolver is supposed to apply to the given handler.
	 * <p>The default implementation checks against the configured
	 * {@linkplain #setMappedHandlers handlers} and
	 * {@linkplain #setMappedHandlerClasses handler classes}, if any.
	 * @param request current HTTP request
	 * @param handler the executed handler, or {@code null} if none chosen
	 * at the time of the exception (for example, if multipart resolution failed)
	 * @return whether this resolved should proceed with resolving the exception
	 * for the given request and handler
	 * @see #setMappedHandlers
	 * @see #setMappedHandlerClasses
	 */
	/**
	 * 检查此解析器是否应该应用于给定的处理程序。 
	 *  <p>默认实现会根据已配置的{@link  plain #setMappedHandlers处理程序}和{@link  plain #setMappedHandlerClasses处理程序类}进行检查。 
	 *  
	 * @param 请求当前的HTTP请求
	 * @param 处理程序执行的处理程序； 
	 * 如果在异常发生时没有选择（例如，如果多部分解析失败），则返回{@code  null} 
	 * @return 是否已解决应该继续解决给定请求和处理程序的异常
	 * @see  #setMappedHandlers 
	 * @see  #setMappedHandlerClasses
	 */
	protected boolean shouldApplyTo(HttpServletRequest request, @Nullable Object handler) {
		if (handler != null) {
			if (this.mappedHandlers != null && this.mappedHandlers.contains(handler)) {
				return true;
			}
			if (this.mappedHandlerClasses != null) {
				for (Class<?> handlerClass : this.mappedHandlerClasses) {
					if (handlerClass.isInstance(handler)) {
						return true;
					}
				}
			}
		}
		// Else only apply if there are no explicit handler mappings.
		return (this.mappedHandlers == null && this.mappedHandlerClasses == null);
	}

	/**
	 * Log the given exception at warn level, provided that warn logging has been
	 * activated through the {@link #setWarnLogCategory "warnLogCategory"} property.
	 * <p>Calls {@link #buildLogMessage} in order to determine the concrete message to log.
	 * @param ex the exception that got thrown during handler execution
	 * @param request current HTTP request (useful for obtaining metadata)
	 * @see #setWarnLogCategory
	 * @see #buildLogMessage
	 * @see org.apache.commons.logging.Log#warn(Object, Throwable)
	 */
	/**
	 * 如果已通过{@link  #setWarnLogCategory"warnLogCategory"}属性激活了警告日志记录，则在警告级别记录给定的异常。 
	 *  <p>调用{@link  #buildLogMessage}以确定要记录的具体消息。 
	 *  
	 * @param 在处理程序执行期间抛出的异常
	 * @param 请求当前HTTP请求（用于获取元数据）
	 * @see  #setWarnLogCategory 
	 * @see  #buildLogMessage 
	 * @see  org.apache.commons.logging .Log＃warn（Object，Throwable）
	 */
	protected void logException(Exception ex, HttpServletRequest request) {
		if (this.warnLogger != null && this.warnLogger.isWarnEnabled()) {
			this.warnLogger.warn(buildLogMessage(ex, request));
		}
	}

	/**
	 * Build a log message for the given exception, occurred during processing the given request.
	 * @param ex the exception that got thrown during handler execution
	 * @param request current HTTP request (useful for obtaining metadata)
	 * @return the log message to use
	 */
	/**
	 * 为给定的异常生成一条日志消息，该消息在处理给定的请求期间发生。 
	 *  
	 * @param 在处理程序执行期间引发的异常
	 * @param 请求当前HTTP请求（用于获取元数据）
	 * @return 要使用的日志消息
	 */
	protected String buildLogMessage(Exception ex, HttpServletRequest request) {
		return "Resolved [" + ex + "]";
	}

	/**
	 * Prepare the response for the exceptional case.
	 * <p>The default implementation prevents the response from being cached,
	 * if the {@link #setPreventResponseCaching "preventResponseCaching"} property
	 * has been set to "true".
	 * @param ex the exception that got thrown during handler execution
	 * @param response current HTTP response
	 * @see #preventCaching
	 */
	/**
	 * 准备针对特殊情况的回复。 
	 *  <p>如果{@link  #setPreventResponseCaching"preventResponseCaching"}属性已设置为"true"，则默认实现将阻止对响应进行缓存。 
	 *  
	 * @param 在处理程序执行期间抛出的异常
	 * @param 响应当前HTTP响应
	 * @see  #preventCaching
	 */
	protected void prepareResponse(Exception ex, HttpServletResponse response) {
		if (this.preventResponseCaching) {
			preventCaching(response);
		}
	}

	/**
	 * Prevents the response from being cached, through setting corresponding
	 * HTTP {@code Cache-Control: no-store} header.
	 * @param response current HTTP response
	 */
	/**
	 * 通过设置相应的HTTP {@code  Cache-Control：no-store}标头，防止响应被缓存。 
	 *  
	 * @param 响应当前的HTTP响应
	 */
	protected void preventCaching(HttpServletResponse response) {
		response.addHeader(HEADER_CACHE_CONTROL, "no-store");
	}


	/**
	 * Actually resolve the given exception that got thrown during handler execution,
	 * returning a {@link ModelAndView} that represents a specific error page if appropriate.
	 * <p>May be overridden in subclasses, in order to apply specific exception checks.
	 * Note that this template method will be invoked <i>after</i> checking whether this
	 * resolved applies ("mappedHandlers" etc), so an implementation may simply proceed
	 * with its actual exception handling.
	 * @param request current HTTP request
	 * @param response current HTTP response
	 * @param handler the executed handler, or {@code null} if none chosen at the time
	 * of the exception (for example, if multipart resolution failed)
	 * @param ex the exception that got thrown during handler execution
	 * @return a corresponding {@code ModelAndView} to forward to,
	 * or {@code null} for default processing in the resolution chain
	 */
	/**
	 * 实际解决在处理程序执行期间引发的给定异常，如果合适，返回代表特定错误页面的{@link  ModelAndView}。 
	 *  <p>可以在子类中重写，以应用特定的异常检查。 
	 * 请注意，此模板方法将在<i> </ i>检查此解析是否适用后调用（"mappedHandlers"等），因此实现可以简单地进行其实际的异常处理。 
	 *  
	 * @param 请求当前HTTP请求
	 * @param 响应当前HTTP响应
	 * @param 处理程序执行的处理程序； 
	 * 如果在异常发生时没有选择，则为{@code  null}（例如，多部分解析失败） ）
	 * @param 会在处理程序执行期间抛出异常，<
	 * @return>会将相应的{@code  ModelAndView}转发给，或者将{@code  null}用于解析链中的默认处理
	 */
	@Nullable
	protected abstract ModelAndView doResolveException(
			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);

}
