/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.support;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.jstl.core.Config;

import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceResolvable;
import org.springframework.context.NoSuchMessageException;
import org.springframework.context.i18n.LocaleContext;
import org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext;
import org.springframework.context.i18n.TimeZoneAwareLocaleContext;
import org.springframework.lang.Nullable;
import org.springframework.ui.context.Theme;
import org.springframework.ui.context.ThemeSource;
import org.springframework.ui.context.support.ResourceBundleThemeSource;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.EscapedErrors;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.LocaleContextResolver;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.ThemeResolver;
import org.springframework.web.util.HtmlUtils;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.web.util.UrlPathHelper;
import org.springframework.web.util.WebUtils;

/**
 * Context holder for request-specific state, like current web application context, current locale,
 * current theme, and potential binding errors. Provides easy access to localized messages and
 * Errors instances.
 *
 * <p>Suitable for exposition to views, and usage within JSP's "useBean" tag, JSP scriptlets, JSTL EL,
 * etc. Necessary for views that do not have access to the servlet request, like FreeMarker templates.
 *
 * <p>Can be instantiated manually, or automatically exposed to views as model attribute via AbstractView's
 * "requestContextAttribute" property.
 *
 * <p>Will also work outside of DispatcherServlet requests, accessing the root WebApplicationContext
 * and using an appropriate fallback for the locale (the HttpServletRequest's primary locale).
 *
 * @author Juergen Hoeller
 * @author Rossen Stoyanchev
 * @since 03.03.2003
 * @see org.springframework.web.servlet.DispatcherServlet
 * @see org.springframework.web.servlet.view.AbstractView#setRequestContextAttribute
 * @see org.springframework.web.servlet.view.UrlBasedViewResolver#setRequestContextAttribute
 */
/**
 * 特定请求状态的上下文持有者，例如当前的Web应用程序上下文，当前的语言环境，当前的主题以及潜在的绑定错误。 
 * 提供对本地化消息和错误实例的轻松访问。 
 *  <p>非常适合显示视图，以及在JSP的"useBean"标记，JSP脚本，JSTL EL等中的用法。 
 * 对于无法访问Servlet请求的视图（如FreeMarker模板）是必需的。 
 *  <p>可以手动实例化，也可以通过AbstractView的"requestContextAttribute"属性自动将其作为模型属性公开给视图。 
 *  <p>还将在DispatcherServlet请求之外工作，访问根WebApplicationContext并为语言环境（HttpServletRequest的主要语言环境）使用适当的后备。 
 *  @author  Juergen Hoeller @author  Rossen Stoyanchev @2003年3月3日
 * @see  org.springframework.web.servlet.DispatcherServlet 
 * @see  org.springframework.web.servlet.view.AbstractView＃setRequestContextAttribute <
 * @see > org.springframework.web.servlet.view.UrlBasedViewResolver＃setRequestContextAttribute
 */
public class RequestContext {

	/**
	 * Default theme name used if the RequestContext cannot find a ThemeResolver.
	 * Only applies to non-DispatcherServlet requests.
	 * <p>Same as AbstractThemeResolver's default, but not linked in here to avoid package interdependencies.
	 * @see org.springframework.web.servlet.theme.AbstractThemeResolver#ORIGINAL_DEFAULT_THEME_NAME
	 */
	/**
	 * 如果RequestContext找不到ThemeResolver，则使用默认主题名称。 
	 * 仅适用于非DispatcherServlet请求。 
	 *  <p>与AbstractThemeResolver的默认值相同，但此处未链接以避免包相互依赖。 
	 *  
	 * @see  org.springframework.web.servlet.theme.AbstractThemeResolver＃ORIGINAL_DEFAULT_THEME_NAME
	 */
	public static final String DEFAULT_THEME_NAME = "theme";

	/**
	 * Request attribute to hold the current web application context for RequestContext usage.
	 * By default, the DispatcherServlet's context (or the root context as fallback) is exposed.
	 */
	/**
	 * Request属性保存当前Web应用程序上下文以供RequestContext使用。 
	 * 默认情况下，公开DispatcherServlet的上下文（或根上下文为后备）。 
	 * 
	 */
	public static final String WEB_APPLICATION_CONTEXT_ATTRIBUTE = RequestContext.class.getName() + ".CONTEXT";


	protected static final boolean jstlPresent = ClassUtils.isPresent(
			"javax.servlet.jsp.jstl.core.Config", RequestContext.class.getClassLoader());

	private HttpServletRequest request;

	@Nullable
	private HttpServletResponse response;

	@Nullable
	private Map<String, Object> model;

	private WebApplicationContext webApplicationContext;

	@Nullable
	private Locale locale;

	@Nullable
	private TimeZone timeZone;

	@Nullable
	private Theme theme;

	@Nullable
	private Boolean defaultHtmlEscape;

	@Nullable
	private Boolean responseEncodedHtmlEscape;

	private UrlPathHelper urlPathHelper;

	@Nullable
	private RequestDataValueProcessor requestDataValueProcessor;

	@Nullable
	private Map<String, Errors> errorsMap;


	/**
	 * Create a new RequestContext for the given request, using the request attributes for Errors retrieval.
	 * <p>This only works with InternalResourceViews, as Errors instances are part of the model and not
	 * normally exposed as request attributes. It will typically be used within JSPs or custom tags.
	 * <p><b>Will only work within a DispatcherServlet request.</b>
	 * Pass in a ServletContext to be able to fallback to the root WebApplicationContext.
	 * @param request current HTTP request
	 * @see org.springframework.web.servlet.DispatcherServlet
	 * @see #RequestContext(javax.servlet.http.HttpServletRequest, javax.servlet.ServletContext)
	 */
	/**
	 * 使用错误检索的请求属性为给定请求创建一个新的RequestContext。 
	 *  <p>这仅适用于InternalResourceViews，因为Errors实例是模型的一部分，通常不会公开为请求属性。 
	 * 通常将在JSP或自定义标记中使用它。 
	 *  <p> <b>仅在DispatcherServlet请求中工作。 
	 * </ b>传递ServletContext以便能够回退到根WebApplicationContext。 
	 *  
	 * @param 请求当前HTTP请求
	 * @see  org.springframework.web.servlet.DispatcherServlet 
	 * @see  #RequestContext（javax.servlet.http.HttpServletRequest，javax.servlet.ServletContext）
	 */
	public RequestContext(HttpServletRequest request) {
		this(request, null, null, null);
	}

	/**
	 * Create a new RequestContext for the given request, using the request attributes for Errors retrieval.
	 * <p>This only works with InternalResourceViews, as Errors instances are part of the model and not
	 * normally exposed as request attributes. It will typically be used within JSPs or custom tags.
	 * <p><b>Will only work within a DispatcherServlet request.</b>
	 * Pass in a ServletContext to be able to fallback to the root WebApplicationContext.
	 * @param request current HTTP request
	 * @param response current HTTP response
	 * @see org.springframework.web.servlet.DispatcherServlet
	 * @see #RequestContext(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, Map)
	 */
	/**
	 * 使用错误检索的请求属性为给定请求创建一个新的RequestContext。 
	 *  <p>这仅适用于InternalResourceViews，因为Errors实例是模型的一部分，通常不会公开为请求属性。 
	 * 通常将在JSP或自定义标记中使用它。 
	 *  <p> <b>仅在DispatcherServlet请求中工作。 
	 * </ b>传递ServletContext以便能够回退到根WebApplicationContext。 
	 *  
	 * @param 请求当前HTTP请求
	 * @param 响应当前HTTP响应
	 * @see  org.springframework.web.servlet.DispatcherServlet 
	 * @see  #RequestContext（javax.servlet.http.HttpServletRequest，javax.servlet.http。 
	 *  HttpServletResponse，javax.servlet.ServletContext，地图）
	 */
	public RequestContext(HttpServletRequest request, HttpServletResponse response) {
		this(request, response, null, null);
	}

	/**
	 * Create a new RequestContext for the given request, using the request attributes for Errors retrieval.
	 * <p>This only works with InternalResourceViews, as Errors instances are part of the model and not
	 * normally exposed as request attributes. It will typically be used within JSPs or custom tags.
	 * <p>If a ServletContext is specified, the RequestContext will also work with the root
	 * WebApplicationContext (outside a DispatcherServlet).
	 * @param request current HTTP request
	 * @param servletContext the servlet context of the web application (can be {@code null};
	 * necessary for fallback to root WebApplicationContext)
	 * @see org.springframework.web.context.WebApplicationContext
	 * @see org.springframework.web.servlet.DispatcherServlet
	 */
	/**
	 * 使用错误检索的请求属性为给定请求创建一个新的RequestContext。 
	 *  <p>这仅适用于InternalResourceViews，因为Errors实例是模型的一部分，通常不会公开为请求属性。 
	 * 通常将在JSP或自定义标记中使用它。 
	 *  <p>如果指定了ServletContext，则RequestContext也将与根WebApplicationContext（在DispatcherServlet外部）一起使用。 
	 *  
	 * @param 请求当前的HTTP请求
	 * @param  servletContext Web应用程序的servlet上下文（可以为{@code  null}； 
	 * 对于回退到根WebApplicationContext是必需的）
	 * @see  org.springframework.web.context。 
	 *  WebApplicationContext 
	 * @see  org.springframework.web.servlet.DispatcherServlet
	 */
	public RequestContext(HttpServletRequest request, @Nullable ServletContext servletContext) {
		this(request, null, servletContext, null);
	}

	/**
	 * Create a new RequestContext for the given request, using the given model attributes for Errors retrieval.
	 * <p>This works with all View implementations. It will typically be used by View implementations.
	 * <p><b>Will only work within a DispatcherServlet request.</b>
	 * Pass in a ServletContext to be able to fallback to the root WebApplicationContext.
	 * @param request current HTTP request
	 * @param model the model attributes for the current view (can be {@code null},
	 * using the request attributes for Errors retrieval)
	 * @see org.springframework.web.servlet.DispatcherServlet
	 * @see #RequestContext(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, Map)
	 */
	/**
	 * 使用给定的错误检索模型属性，为给定请求创建一个新的RequestContext。 
	 *  <p>这适用于所有View实现。 
	 *  View实现通常会使用它。 
	 *  <p> <b>仅在DispatcherServlet请求中工作。 
	 * </ b>传递ServletContext以便能够回退到根WebApplicationContext。 
	 *  
	 * @param 请求当前HTTP请求
	 * @param 为当前视图的模型属性建模（可以使用{@code  null}，使用错误检索的请求属性）
	 * @see  org.springframework.web.servlet .DispatcherServlet 
	 * @see  #RequestContext（javax.servlet.http.HttpServletRequest，javax.servlet.http.HttpServletResponse，javax.servlet.ServletContext，地图）
	 */
	public RequestContext(HttpServletRequest request, @Nullable Map<String, Object> model) {
		this(request, null, null, model);
	}

	/**
	 * Create a new RequestContext for the given request, using the given model attributes for Errors retrieval.
	 * <p>This works with all View implementations. It will typically be used by View implementations.
	 * <p>If a ServletContext is specified, the RequestContext will also work with a root
	 * WebApplicationContext (outside a DispatcherServlet).
	 * @param request current HTTP request
	 * @param response current HTTP response
	 * @param servletContext the servlet context of the web application (can be {@code null}; necessary for
	 * fallback to root WebApplicationContext)
	 * @param model the model attributes for the current view (can be {@code null}, using the request attributes
	 * for Errors retrieval)
	 * @see org.springframework.web.context.WebApplicationContext
	 * @see org.springframework.web.servlet.DispatcherServlet
	 */
	/**
	 * 使用给定的错误检索模型属性，为给定请求创建一个新的RequestContext。 
	 *  <p>这适用于所有View实现。 
	 *  View实现通常会使用它。 
	 *  <p>如果指定了ServletContext，则RequestContext也将与根WebApplicationContext（在DispatcherServlet外部）一起使用。 
	 *  
	 * @param 请求当前HTTP请求
	 * @param 响应当前HTTP响应
	 * @param  servletContext Web应用程序的servlet上下文（可以为{@code  null}； 
	 * 对于回退到根WebApplicationContext是必需的）
	 * @param 使用错误检索的请求属性为当前视图的模型属性建模（可以为{@code  null}。 
	 * 
	 * @see  org.springframework.web.context.WebApplicationContext 
	 * @see  org.springframework.web。 
	 *  servlet.DispatcherServlet
	 */
	public RequestContext(HttpServletRequest request, @Nullable HttpServletResponse response,
			@Nullable ServletContext servletContext, @Nullable Map<String, Object> model) {

		this.request = request;
		this.response = response;
		this.model = model;

		// Fetch WebApplicationContext, either from DispatcherServlet or the root context.
		// ServletContext needs to be specified to be able to fall back to the root context!
		WebApplicationContext wac = (WebApplicationContext) request.getAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE);
		if (wac == null) {
			wac = RequestContextUtils.findWebApplicationContext(request, servletContext);
			if (wac == null) {
				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet " +
						"request and no ContextLoaderListener registered?");
			}
		}
		this.webApplicationContext = wac;

		Locale locale = null;
		TimeZone timeZone = null;

		// Determine locale to use for this RequestContext.
		LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(request);
		if (localeResolver instanceof LocaleContextResolver) {
			LocaleContext localeContext = ((LocaleContextResolver) localeResolver).resolveLocaleContext(request);
			locale = localeContext.getLocale();
			if (localeContext instanceof TimeZoneAwareLocaleContext) {
				timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();
			}
		}
		else if (localeResolver != null) {
			// Try LocaleResolver (we're within a DispatcherServlet request).
			locale = localeResolver.resolveLocale(request);
		}

		this.locale = locale;
		this.timeZone = timeZone;

		// Determine default HTML escape setting from the "defaultHtmlEscape"
		// context-param in web.xml, if any.
		this.defaultHtmlEscape = WebUtils.getDefaultHtmlEscape(this.webApplicationContext.getServletContext());

		// Determine response-encoded HTML escape setting from the "responseEncodedHtmlEscape"
		// context-param in web.xml, if any.
		this.responseEncodedHtmlEscape =
				WebUtils.getResponseEncodedHtmlEscape(this.webApplicationContext.getServletContext());

		this.urlPathHelper = new UrlPathHelper();

		if (this.webApplicationContext.containsBean(RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {
			this.requestDataValueProcessor = this.webApplicationContext.getBean(
					RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);
		}
	}


	/**
	 * Return the underlying HttpServletRequest. Only intended for cooperating classes in this package.
	 */
	/**
	 * 返回基础的HttpServletRequest。 
	 * 仅用于此包中的合作类。 
	 * 
	 */
	protected final HttpServletRequest getRequest() {
		return this.request;
	}

	/**
	 * Return the underlying ServletContext. Only intended for cooperating classes in this package.
	 */
	/**
	 * 返回基础ServletContext。 
	 * 仅用于此包中的合作类。 
	 * 
	 */
	@Nullable
	protected final ServletContext getServletContext() {
		return this.webApplicationContext.getServletContext();
	}

	/**
	 * Return the current WebApplicationContext.
	 */
	/**
	 * 返回当前的WebApplicationContext。 
	 * 
	 */
	public final WebApplicationContext getWebApplicationContext() {
		return this.webApplicationContext;
	}

	/**
	 * Return the current WebApplicationContext as MessageSource.
	 */
	/**
	 * 返回当前的WebApplicationContext作为MessageSource。 
	 * 
	 */
	public final MessageSource getMessageSource() {
		return this.webApplicationContext;
	}

	/**
	 * Return the model Map that this RequestContext encapsulates, if any.
	 * @return the populated model Map, or {@code null} if none available
	 */
	/**
	 * 返回此RequestContext封装的模型Map（如果有）。 
	 *  
	 * @return 填充的模型Map，如果没有可用，则返回{@code  null}
	 */
	@Nullable
	public final Map<String, Object> getModel() {
		return this.model;
	}

	/**
	 * Return the current Locale (falling back to the request locale; never {@code null}).
	 * <p>Typically coming from a DispatcherServlet's {@link LocaleResolver}.
	 * Also includes a fallback check for JSTL's Locale attribute.
	 * @see RequestContextUtils#getLocale
	 */
	/**
	 * 返回当前的语言环境（回退到请求语言环境； 
	 * 从不{@code  null}）。 
	 *  <p>通常来自DispatcherServlet的{@link  LocaleResolver}。 
	 * 还包括对JSTL的Locale属性的后备检查。 
	 *  
	 * @see  RequestContextUtils＃getLocale
	 */
	public final Locale getLocale() {
		return (this.locale != null ? this.locale : getFallbackLocale());
	}

	/**
	 * Return the current TimeZone (or {@code null} if none derivable from the request).
	 * <p>Typically coming from a DispatcherServlet's {@link LocaleContextResolver}.
	 * Also includes a fallback check for JSTL's TimeZone attribute.
	 * @see RequestContextUtils#getTimeZone
	 */
	/**
	 * 返回当前的TimeZone（如果不能从请求派生，则返回{@code  null}）。 
	 *  <p>通常来自DispatcherServlet的{@link  LocaleContextResolver}。 
	 * 还包括对JSTL的TimeZone属性的后备检查。 
	 *  
	 * @see  RequestContextUtils＃getTimeZone
	 */
	@Nullable
	public TimeZone getTimeZone() {
		return (this.timeZone != null ? this.timeZone : getFallbackTimeZone());
	}

	/**
	 * Determine the fallback locale for this context.
	 * <p>The default implementation checks for a JSTL locale attribute in request, session
	 * or application scope; if not found, returns the {@code HttpServletRequest.getLocale()}.
	 * @return the fallback locale (never {@code null})
	 * @see javax.servlet.http.HttpServletRequest#getLocale()
	 */
	/**
	 * 确定此上下文的后备区域设置。 
	 *  <p>默认实现在请求，会话或应用程序范围内检查JSTL语言环境属性； 
	 * 如果找不到，则返回{@code  HttpServletRequest.getLocale（）}。 
	 *  
	 * @return 后备语言环境（从不会（<{@@code> null}）
	 * @see  javax.servlet.http.HttpServletRequest＃getLocale（）
	 */
	protected Locale getFallbackLocale() {
		if (jstlPresent) {
			Locale locale = JstlLocaleResolver.getJstlLocale(getRequest(), getServletContext());
			if (locale != null) {
				return locale;
			}
		}
		return getRequest().getLocale();
	}

	/**
	 * Determine the fallback time zone for this context.
	 * <p>The default implementation checks for a JSTL time zone attribute in request,
	 * session or application scope; returns {@code null} if not found.
	 * @return the fallback time zone (or {@code null} if none derivable from the request)
	 */
	/**
	 * 确定此上下文的后备时区。 
	 *  <p>默认实现在请求，会话或应用程序范围内检查JSTL时区属性； 
	 * 如果找不到，则返回{@code  null}。 
	 *  
	 * @return 后备时区（如果无法从请求派生，则为{@code  null}）
	 */
	@Nullable
	protected TimeZone getFallbackTimeZone() {
		if (jstlPresent) {
			TimeZone timeZone = JstlLocaleResolver.getJstlTimeZone(getRequest(), getServletContext());
			if (timeZone != null) {
				return timeZone;
			}
		}
		return null;
	}

	/**
	 * Change the current locale to the specified one,
	 * storing the new locale through the configured {@link LocaleResolver}.
	 * @param locale the new locale
	 * @see LocaleResolver#setLocale
	 * @see #changeLocale(java.util.Locale, java.util.TimeZone)
	 */
	/**
	 * 将当前语言环境更改为指定的语言环境，并通过配置的{@link  LocaleResolver}存储新的语言环境。 
	 *  
	 * @param 设置新语言环境
	 * @see  LocaleResolver＃setLocale 
	 * @see  #changeLocale（java.util.Locale，java.util.TimeZone）
	 */
	public void changeLocale(Locale locale) {
		LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(this.request);
		if (localeResolver == null) {
			throw new IllegalStateException("Cannot change locale if no LocaleResolver configured");
		}
		localeResolver.setLocale(this.request, this.response, locale);
		this.locale = locale;
	}

	/**
	 * Change the current locale to the specified locale and time zone context,
	 * storing the new locale context through the configured {@link LocaleResolver}.
	 * @param locale the new locale
	 * @param timeZone the new time zone
	 * @see LocaleContextResolver#setLocaleContext
	 * @see org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	/**
	 * 将当前语言环境更改为指定的语言环境和时区上下文，并通过配置的{@link  LocaleResolver}存储新的语言环境。 
	 *  
	 * @param 区域设置新区域设置
	 * @param  timeZone新时区
	 * @see  LocaleContextResolver＃setLocaleContext 
	 * @see  org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext
	 */
	public void changeLocale(Locale locale, TimeZone timeZone) {
		LocaleResolver localeResolver = RequestContextUtils.getLocaleResolver(this.request);
		if (!(localeResolver instanceof LocaleContextResolver)) {
			throw new IllegalStateException("Cannot change locale context if no LocaleContextResolver configured");
		}
		((LocaleContextResolver) localeResolver).setLocaleContext(this.request, this.response,
				new SimpleTimeZoneAwareLocaleContext(locale, timeZone));
		this.locale = locale;
		this.timeZone = timeZone;
	}

	/**
	 * Return the current theme (never {@code null}).
	 * <p>Resolved lazily for more efficiency when theme support is not being used.
	 */
	/**
	 * 返回当前主题（不要{@code  null}）。 
	 *  <p>当不使用主题支持时，懒惰地解决以提高效率。 
	 * 
	 */
	public Theme getTheme() {
		if (this.theme == null) {
			// Lazily determine theme to use for this RequestContext.
			this.theme = RequestContextUtils.getTheme(this.request);
			if (this.theme == null) {
				// No ThemeResolver and ThemeSource available -> try fallback.
				this.theme = getFallbackTheme();
			}
		}
		return this.theme;
	}

	/**
	 * Determine the fallback theme for this context.
	 * <p>The default implementation returns the default theme (with name "theme").
	 * @return the fallback theme (never {@code null})
	 */
	/**
	 * 确定此上下文的后备主题。 
	 *  <p>默认实现返回默认主题（名称为"theme"）。 
	 *  
	 * @return 后备主题（永不{@code  null}）
	 */
	protected Theme getFallbackTheme() {
		ThemeSource themeSource = RequestContextUtils.getThemeSource(getRequest());
		if (themeSource == null) {
			themeSource = new ResourceBundleThemeSource();
		}
		Theme theme = themeSource.getTheme(DEFAULT_THEME_NAME);
		if (theme == null) {
			throw new IllegalStateException("No theme defined and no fallback theme found");
		}
		return theme;
	}

	/**
	 * Change the current theme to the specified one,
	 * storing the new theme name through the configured {@link ThemeResolver}.
	 * @param theme the new theme
	 * @see ThemeResolver#setThemeName
	 */
	/**
	 * 将当前主题更改为指定的主题，并通过配置的{@link  ThemeResolver}存储新的主题名称。 
	 *  
	 * @param 主题新主题
	 * @see  ThemeResolver＃setThemeName
	 */
	public void changeTheme(@Nullable Theme theme) {
		ThemeResolver themeResolver = RequestContextUtils.getThemeResolver(this.request);
		if (themeResolver == null) {
			throw new IllegalStateException("Cannot change theme if no ThemeResolver configured");
		}
		themeResolver.setThemeName(this.request, this.response, (theme != null ? theme.getName() : null));
		this.theme = theme;
	}

	/**
	 * Change the current theme to the specified theme by name,
	 * storing the new theme name through the configured {@link ThemeResolver}.
	 * @param themeName the name of the new theme
	 * @see ThemeResolver#setThemeName
	 */
	/**
	 * 通过名称将当前主题更改为指定的主题，并通过配置的{@link  ThemeResolver}存储新的主题名称。 
	 *  
	 * @param  themeName新主题的名称
	 * @see  ThemeResolver＃setThemeName
	 */
	public void changeTheme(String themeName) {
		ThemeResolver themeResolver = RequestContextUtils.getThemeResolver(this.request);
		if (themeResolver == null) {
			throw new IllegalStateException("Cannot change theme if no ThemeResolver configured");
		}
		themeResolver.setThemeName(this.request, this.response, themeName);
		// Ask for re-resolution on next getTheme call.
		this.theme = null;
	}

	/**
	 * (De)activate default HTML escaping for messages and errors, for the scope of this RequestContext.
	 * <p>The default is the application-wide setting (the "defaultHtmlEscape" context-param in web.xml).
	 * @see org.springframework.web.util.WebUtils#getDefaultHtmlEscape
	 */
	/**
	 * 在此RequestContext的范围内，（取消）激活用于消息和错误的默认HTML转义。 
	 *  <p>默认设置是应用程序范围的设置（web.xml中的"defaultHtmlEscape"上下文参数）。 
	 *  
	 * @see  org.springframework.web.util.WebUtils＃getDefaultHtmlEscape
	 */
	public void setDefaultHtmlEscape(boolean defaultHtmlEscape) {
		this.defaultHtmlEscape = defaultHtmlEscape;
	}

	/**
	 * Is default HTML escaping active? Falls back to {@code false} in case of no explicit default given.
	 */
	/**
	 * 默认HTML转义是否有效？如果未给出明确的默认值，则退回到{@code  false}。 
	 * 
	 */
	public boolean isDefaultHtmlEscape() {
		return (this.defaultHtmlEscape != null && this.defaultHtmlEscape.booleanValue());
	}

	/**
	 * Return the default HTML escape setting, differentiating between no default specified and an explicit value.
	 * @return whether default HTML escaping is enabled (null = no explicit default)
	 */
	/**
	 * 返回默认的HTML转义设置，区分未指定的默认值和显式的值。 
	 *  
	 * @return 是否启用默认HTML转义（null =没有明确的默认值）
	 */
	@Nullable
	public Boolean getDefaultHtmlEscape() {
		return this.defaultHtmlEscape;
	}

	/**
	 * Is HTML escaping using the response encoding by default?
	 * If enabled, only XML markup significant characters will be escaped with UTF-* encodings.
	 * <p>Falls back to {@code true} in case of no explicit default given, as of Spring 4.2.
	 * @since 4.1.2
	 */
	/**
	 * HTML是否默认使用响应编码进行转义？如果启用，则仅XML标记有效字符将使用UTF编码进行转义。 
	 * 从Spring 4.2开始，在没有明确指定默认值的情况下，<p>跌回{@code  true}。 
	 *  @从4.1.2开始
	 */
	public boolean isResponseEncodedHtmlEscape() {
		return (this.responseEncodedHtmlEscape == null || this.responseEncodedHtmlEscape.booleanValue());
	}

	/**
	 * Return the default setting about use of response encoding for HTML escape setting,
	 * differentiating between no default specified and an explicit value.
	 * @return whether default use of response encoding HTML escaping is enabled (null = no explicit default)
	 * @since 4.1.2
	 */
	/**
	 * 返回有关将响应编码用于HTML转义设置的默认设置，以区分未指定默认值和显式值。 
	 *  
	 * @return 是否已启用默认使用响应编码HTML转义（null =无显式默认值）@自4.1.2起
	 */
	@Nullable
	public Boolean getResponseEncodedHtmlEscape() {
		return this.responseEncodedHtmlEscape;
	}


	/**
	 * Set the UrlPathHelper to use for context path and request URI decoding.
	 * Can be used to pass a shared UrlPathHelper instance in.
	 * <p>A default UrlPathHelper is always available.
	 */
	/**
	 * 设置UrlPathHelper以用于上下文路径和请求URI解码。 
	 * 可用于在其中传递共享的UrlPathHelper实例。 
	 * <p>默认UrlPathHelper始终可用。 
	 * 
	 */
	public void setUrlPathHelper(UrlPathHelper urlPathHelper) {
		Assert.notNull(urlPathHelper, "UrlPathHelper must not be null");
		this.urlPathHelper = urlPathHelper;
	}

	/**
	 * Return the UrlPathHelper used for context path and request URI decoding.
	 * Can be used to configure the current UrlPathHelper.
	 * <p>A default UrlPathHelper is always available.
	 */
	/**
	 * 返回用于上下文路径和请求URI解码的UrlPathHelper。 
	 * 可用于配置当前的UrlPathHelper。 
	 *  <p>默认UrlPathHelper始终可用。 
	 * 
	 */
	public UrlPathHelper getUrlPathHelper() {
		return this.urlPathHelper;
	}

	/**
	 * Return the RequestDataValueProcessor instance to use obtained from the
	 * WebApplicationContext under the name {@code "requestDataValueProcessor"}.
	 * Or {@code null} if no matching bean was found.
	 */
	/**
	 * 返回以名称{@code "requestDataValueProcessor"}从WebApplicationContext获取的要使用的RequestDataValueProcessor实例。 
	 * 或{@code  null}如果找不到匹配的bean。 
	 * 
	 */
	@Nullable
	public RequestDataValueProcessor getRequestDataValueProcessor() {
		return this.requestDataValueProcessor;
	}

	/**
	 * Return the context path of the original request, that is, the path that
	 * indicates the current web application. This is useful for building links
	 * to other resources within the application.
	 * <p>Delegates to the UrlPathHelper for decoding.
	 * @see javax.servlet.http.HttpServletRequest#getContextPath
	 * @see #getUrlPathHelper
	 */
	/**
	 * 返回原始请求的上下文路径，即指示当前Web应用程序的路径。 
	 * 这对于建立到应用程序内其他资源的链接很有用。 
	 *  <p>委托给UrlPathHelper进行解码。 
	 *  
	 * @see  javax.servlet.http.HttpServletRequest＃getContextPath 
	 * @see  #getUrlPathHelper
	 */
	public String getContextPath() {
		return this.urlPathHelper.getOriginatingContextPath(this.request);
	}

	/**
	 * Return a context-aware URl for the given relative URL.
	 * @param relativeUrl the relative URL part
	 * @return a URL that points back to the server with an absolute path (also URL-encoded accordingly)
	 */
	/**
	 * 返回给定相对URL的上下文感知UR1。 
	 *  
	 * @param  relativeUrl相对URL部分
	 * @return 用绝对路径指向服务器的URL（也进行相应的URL编码）
	 */
	public String getContextUrl(String relativeUrl) {
		String url = getContextPath() + relativeUrl;
		if (this.response != null) {
			url = this.response.encodeURL(url);
		}
		return url;
	}

	/**
	 * Return a context-aware URl for the given relative URL with placeholders (named keys with braces {@code {}}).
	 * For example, send in a relative URL {@code foo/{bar}?spam={spam}} and a parameter map
	 * {@code {bar=baz,spam=nuts}} and the result will be {@code [contextpath]/foo/baz?spam=nuts}.
	 * @param relativeUrl the relative URL part
	 * @param params a map of parameters to insert as placeholders in the url
	 * @return a URL that points back to the server with an absolute path (also URL-encoded accordingly)
	 */
	/**
	 * 对于给定的相对URL，使用占位符（用大括号{@code  {}}命名的键）返回上下文感知的UR1。 
	 * 例如，发送相对URL {@code  foo / {bar}？spam = {spam}}和参数映射{@code  {bar = baz，spam = nuts}}，结果将为{ @code  [contextpath] / foo / baz？spam = nuts}。 
	 *  
	 * @param  relativeUrl相对URL部分
	 * @param 设置参数映射，以作为占位符插入url 
	 * @return 中，该URL指向具有绝对路径的服务器（也进行了URL编码）
	 */
	public String getContextUrl(String relativeUrl, Map<String, ?> params) {
		String url = getContextPath() + relativeUrl;
		url = UriComponentsBuilder.fromUriString(url).buildAndExpand(params).encode().toUri().toASCIIString();
		if (this.response != null) {
			url = this.response.encodeURL(url);
		}
		return url;
	}

	/**
	 * Return the path to URL mappings within the current servlet including the
	 * context path and the servlet path of the original request. This is useful
	 * for building links to other resources within the application where a
	 * servlet mapping of the style {@code "/main/*"} is used.
	 * <p>Delegates to the UrlPathHelper to determine the context and servlet path.
	 */
	/**
	 * 将路径返回到当前servlet内的URL映射，包括原始请求的上下文路径和servlet路径。 
	 * 这对于在使用{@code "/ main"}样式的servlet映射的应用程序中建立到其他资源的链接很有用。 
	 *  <p>委派给UrlPathHelper以确定上下文和servlet路径。 
	 * 
	 */
	public String getPathToServlet() {
		String path = this.urlPathHelper.getOriginatingContextPath(this.request);
		if (StringUtils.hasText(this.urlPathHelper.getPathWithinServletMapping(this.request))) {
			path += this.urlPathHelper.getOriginatingServletPath(this.request);
		}
		return path;
	}

	/**
	 * Return the request URI of the original request, that is, the invoked URL
	 * without parameters. This is particularly useful as HTML form action target,
	 * possibly in combination with the original query string.
	 * <p>Delegates to the UrlPathHelper for decoding.
	 * @see #getQueryString
	 * @see org.springframework.web.util.UrlPathHelper#getOriginatingRequestUri
	 * @see #getUrlPathHelper
	 */
	/**
	 * 返回原始请求的请求URI，即不带参数的调用URL。 
	 * 作为HTML表单操作目标（可能与原始查询字符串结合使用）特别有用。 
	 *  <p>委托给UrlPathHelper进行解码。 
	 *  
	 * @see  #getQueryString 
	 * @see  org.springframework.web.util.UrlPathHelper＃getOriginatingRequestUri 
	 * @see  #getUrlPathHelper
	 */
	public String getRequestUri() {
		return this.urlPathHelper.getOriginatingRequestUri(this.request);
	}

	/**
	 * Return the query string of the current request, that is, the part after
	 * the request path. This is particularly useful for building an HTML form
	 * action target in combination with the original request URI.
	 * <p>Delegates to the UrlPathHelper for decoding.
	 * @see #getRequestUri
	 * @see org.springframework.web.util.UrlPathHelper#getOriginatingQueryString
	 * @see #getUrlPathHelper
	 */
	/**
	 * 返回当前请求的查询字符串，即请求路径后的部分。 
	 * 这对于结合原始请求URI构建HTML表单操作目标特别有用。 
	 *  <p>委托给UrlPathHelper进行解码。 
	 *  
	 * @see  #getRequestUri 
	 * @see  org.springframework.web.util.UrlPathHelper＃getOriginatingQueryString 
	 * @see  #getUrlPathHelper
	 */
	public String getQueryString() {
		return this.urlPathHelper.getOriginatingQueryString(this.request);
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getMessage(String code, String defaultMessage) {
		return getMessage(code, null, defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getMessage(String code, @Nullable Object[] args, String defaultMessage) {
		return getMessage(code, args, defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param  args作为列表的消息参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 信息
	 */
	public String getMessage(String code, @Nullable List<?> args, String defaultMessage) {
		return getMessage(code, (args != null ? args.toArray() : null), defaultMessage, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 */
	/**
	 * 检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @param  htmlEscape如果消息应该用HTML转义
	 * @return 消息
	 */
	public String getMessage(String code, @Nullable Object[] args, String defaultMessage, boolean htmlEscape) {
		String msg = this.webApplicationContext.getMessage(code, args, defaultMessage, getLocale());
		if (msg == null) {
			return "";
		}
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException（如果未找到）
	 */
	public String getMessage(String code) throws NoSuchMessageException {
		return getMessage(code, null, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有，则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(String code, @Nullable Object[] args) throws NoSuchMessageException {
		return getMessage(code, args, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code, using the "defaultHtmlEscape" setting.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param 将该消息的参数作为列表，如果没有则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException未找到
	 */
	public String getMessage(String code, @Nullable List<?> args) throws NoSuchMessageException {
		return getMessage(code, (args != null ? args.toArray() : null), isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the message for the given code.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定代码的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  htmlEscape如果消息应使用HTML转义
	 * @return 消息<@如果找不到，则抛出> org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(String code, @Nullable Object[] args, boolean htmlEscape) throws NoSuchMessageException {
		String msg = this.webApplicationContext.getMessage(code, args, getLocale());
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance), using the "defaultHtmlEscape" setting.
	 * @param resolvable the MessageSourceResolvable
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定的MessageSourceResolvable（例如ObjectError实例）。 
	 *  
	 * @param 可解决MessageSourceResolvable 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(MessageSourceResolvable resolvable) throws NoSuchMessageException {
		return getMessage(resolvable, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance).
	 * @param resolvable the MessageSourceResolvable
	 * @param htmlEscape if the message should be HTML-escaped
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定的MessageSourceResolvable（例如ObjectError实例）。 
	 *  
	 * @param 可解析的MessageSourceResolvable 
	 * @param  htmlEscape，如果应将消息转义为HTML转义
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getMessage(MessageSourceResolvable resolvable, boolean htmlEscape) throws NoSuchMessageException {
		String msg = this.webApplicationContext.getMessage(resolvable, getLocale());
		return (htmlEscape ? HtmlUtils.htmlEscape(msg) : msg);
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 代码
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getThemeMessage(String code, String defaultMessage) {
		String msg = getTheme().getMessageSource().getMessage(code, null, defaultMessage, getLocale());
		return (msg != null ? msg : "");
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 消息
	 */
	public String getThemeMessage(String code, @Nullable Object[] args, String defaultMessage) {
		String msg = getTheme().getMessageSource().getMessage(code, args, defaultMessage, getLocale());
		return (msg != null ? msg : "");
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @param defaultMessage the String to return if the lookup fails
	 * @return the message
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param  args作为列表的消息参数，如果没有则为{@code  null} 
	 * @param  defaultMessage如果查找失败，返回的字符串
	 * @return 信息
	 */
	public String getThemeMessage(String code, @Nullable List<?> args, String defaultMessage) {
		String msg = getTheme().getMessageSource().getMessage(code, (args != null ? args.toArray() : null),
				defaultMessage, getLocale());
		return (msg != null ? msg : "");
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 代码
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException（如果未找到）
	 */
	public String getThemeMessage(String code) throws NoSuchMessageException {
		return getTheme().getMessageSource().getMessage(code, null, getLocale());
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @param args arguments for the message, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 消息代码
	 * @param 消息的args参数，如果没有，则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getThemeMessage(String code, @Nullable Object[] args) throws NoSuchMessageException {
		return getTheme().getMessageSource().getMessage(code, args, getLocale());
	}

	/**
	 * Retrieve the theme message for the given code.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param code code of the message
	 * @param args arguments for the message as a List, or {@code null} if none
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 检索给定代码的主题消息。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 * 消息的
	 * @param 代码代码
	 * @param 将该消息的参数作为列表，如果没有则为{@code  null} 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException未找到
	 */
	public String getThemeMessage(String code, @Nullable List<?> args) throws NoSuchMessageException {
		return getTheme().getMessageSource().getMessage(code, (args != null ? args.toArray() : null), getLocale());
	}

	/**
	 * Retrieve the given MessageSourceResolvable in the current theme.
	 * <p>Note that theme messages are never HTML-escaped, as they typically denote
	 * theme-specific resource paths and not client-visible messages.
	 * @param resolvable the MessageSourceResolvable
	 * @return the message
	 * @throws org.springframework.context.NoSuchMessageException if not found
	 */
	/**
	 * 在当前主题中检索给定的MessageSourceResolvable。 
	 *  <p>请注意，主题消息绝不会转义为HTML，因为它们通常表示特定于主题的资源路径，而不是客户端可见的消息。 
	 *  
	 * @param 可解决MessageSourceResolvable 
	 * @return 消息
	 * @throws  org.springframework.context.NoSuchMessageException
	 */
	public String getThemeMessage(MessageSourceResolvable resolvable) throws NoSuchMessageException {
		return getTheme().getMessageSource().getMessage(resolvable, getLocale());
	}

	/**
	 * Retrieve the Errors instance for the given bind object, using the "defaultHtmlEscape" setting.
	 * @param name name of the bind object
	 * @return the Errors instance, or {@code null} if not found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置检索给定绑定对象的Errors实例。 
	 *  
	 * @param 名称绑定对象的名称
	 * @return  Errors实例，如果找不到，则为{@code  null}
	 */
	@Nullable
	public Errors getErrors(String name) {
		return getErrors(name, isDefaultHtmlEscape());
	}

	/**
	 * Retrieve the Errors instance for the given bind object.
	 * @param name name of the bind object
	 * @param htmlEscape create an Errors instance with automatic HTML escaping?
	 * @return the Errors instance, or {@code null} if not found
	 */
	/**
	 * 检索给定绑定对象的Errors实例。 
	 *  
	 * @param 名称绑定对象的名称
	 * @param  htmlEscape创建带有自动HTML转义的Errors实例？ 
	 * @return 错误实例，或{@code  null}（如果未找到）
	 */
	@Nullable
	public Errors getErrors(String name, boolean htmlEscape) {
		if (this.errorsMap == null) {
			this.errorsMap = new HashMap<>();
		}
		Errors errors = this.errorsMap.get(name);
		boolean put = false;
		if (errors == null) {
			errors = (Errors) getModelObject(BindingResult.MODEL_KEY_PREFIX + name);
			// Check old BindException prefix for backwards compatibility.
			if (errors instanceof BindException) {
				errors = ((BindException) errors).getBindingResult();
			}
			if (errors == null) {
				return null;
			}
			put = true;
		}
		if (htmlEscape && !(errors instanceof EscapedErrors)) {
			errors = new EscapedErrors(errors);
			put = true;
		}
		else if (!htmlEscape && errors instanceof EscapedErrors) {
			errors = ((EscapedErrors) errors).getSource();
			put = true;
		}
		if (put) {
			this.errorsMap.put(name, errors);
		}
		return errors;
	}

	/**
	 * Retrieve the model object for the given model name, either from the model
	 * or from the request attributes.
	 * @param modelName the name of the model object
	 * @return the model object
	 */
	/**
	 * 从模型或从请求属性中检索给定模型名称的模型对象。 
	 *  
	 * @param  modelName模型对象的名称
	 * @return 模型对象
	 */
	@Nullable
	protected Object getModelObject(String modelName) {
		if (this.model != null) {
			return this.model.get(modelName);
		}
		else {
			return this.request.getAttribute(modelName);
		}
	}

	/**
	 * Create a BindStatus for the given bind object, using the "defaultHtmlEscape" setting.
	 * @param path the bean and property path for which values and errors will be resolved (e.g. "person.age")
	 * @return the new BindStatus instance
	 * @throws IllegalStateException if no corresponding Errors object found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置为给定的绑定对象创建BindStatus。 
	 *  
	 * @param 路径将解决值和错误的Bean和属性路径（例如"person.age"）
	 * @return 新的BindStatus实例
	 * @throws  IllegalStateException（如果未找到相应的Errors对象）
	 */
	public BindStatus getBindStatus(String path) throws IllegalStateException {
		return new BindStatus(this, path, isDefaultHtmlEscape());
	}

	/**
	 * Create a BindStatus for the given bind object, using the "defaultHtmlEscape" setting.
	 * @param path the bean and property path for which values and errors will be resolved (e.g. "person.age")
	 * @param htmlEscape create a BindStatus with automatic HTML escaping?
	 * @return the new BindStatus instance
	 * @throws IllegalStateException if no corresponding Errors object found
	 */
	/**
	 * 使用"defaultHtmlEscape"设置为给定的绑定对象创建BindStatus。 
	 *  
	 * @param  path将解决值和错误的bean和属性路径（例如"person.age"）
	 * @param  htmlEscape创建具有自动HTML转义的BindStatus吗？ 
	 * @return 新的BindStatus实例
	 * @throws 如果没有找到对应的Errors对象，则为IllegalStateException
	 */
	public BindStatus getBindStatus(String path, boolean htmlEscape) throws IllegalStateException {
		return new BindStatus(this, path, htmlEscape);
	}


	/**
	 * Inner class that isolates the JSTL dependency.
	 * Just called to resolve the fallback locale if the JSTL API is present.
	 */
	/**
	 * 隔离JSTL依赖关系的内部类。 
	 * 仅在存在JSTL API的情况下被调用来解析后备语言环境。 
	 * 
	 */
	private static class JstlLocaleResolver {

		@Nullable
		public static Locale getJstlLocale(HttpServletRequest request, @Nullable ServletContext servletContext) {
			Object localeObject = Config.get(request, Config.FMT_LOCALE);
			if (localeObject == null) {
				HttpSession session = request.getSession(false);
				if (session != null) {
					localeObject = Config.get(session, Config.FMT_LOCALE);
				}
				if (localeObject == null && servletContext != null) {
					localeObject = Config.get(servletContext, Config.FMT_LOCALE);
				}
			}
			return (localeObject instanceof Locale ? (Locale) localeObject : null);
		}

		@Nullable
		public static TimeZone getJstlTimeZone(HttpServletRequest request, @Nullable ServletContext servletContext) {
			Object timeZoneObject = Config.get(request, Config.FMT_TIME_ZONE);
			if (timeZoneObject == null) {
				HttpSession session = request.getSession(false);
				if (session != null) {
					timeZoneObject = Config.get(session, Config.FMT_TIME_ZONE);
				}
				if (timeZoneObject == null && servletContext != null) {
					timeZoneObject = Config.get(servletContext, Config.FMT_TIME_ZONE);
				}
			}
			return (timeZoneObject instanceof TimeZone ? (TimeZone) timeZoneObject : null);
		}
	}

}
