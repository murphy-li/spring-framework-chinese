/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.servlet.config.annotation;

import java.util.List;

import org.springframework.core.convert.converter.Converter;
import org.springframework.format.Formatter;
import org.springframework.format.FormatterRegistry;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.lang.Nullable;
import org.springframework.validation.MessageCodesResolver;
import org.springframework.validation.Validator;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.HandlerMethodReturnValueHandler;
import org.springframework.web.servlet.DispatcherServlet;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;

/**
 * Defines callback methods to customize the Java-based configuration for
 * Spring MVC enabled via {@code @EnableWebMvc}.
 *
 * <p>{@code @EnableWebMvc}-annotated configuration classes may implement
 * this interface to be called back and given a chance to customize the
 * default configuration.
 *
 * @author Rossen Stoyanchev
 * @author Keith Donald
 * @author David Syer
 * @since 3.1
 */
/**
 * 定义回调方法，以自定义通过{@code  @EnableWebMvc}启用的Spring MVC的基于Java的配置。 
 * 带有<p> {<@@code> @EnableWebMvc}注释的配置类可以实现此接口，以便对其进行回调，并有机会自定义默认配置。 
 *  @author  Rossen Stoyanchev @author 基思·唐纳德@author  David Syer @since 3.1
 */
public interface WebMvcConfigurer {

	/**
	 * Helps with configuring HandlerMappings path matching options such as trailing slash match,
	 * suffix registration, path matcher and path helper.
	 * Configured path matcher and path helper instances are shared for:
	 * <ul>
	 * <li>RequestMappings</li>
	 * <li>ViewControllerMappings</li>
	 * <li>ResourcesMappings</li>
	 * </ul>
	 * @since 4.0.3
	 */
	/**
	 * 帮助配置HandlerMappings路径匹配选项，例如尾部斜杠匹配，后缀注册，路径匹配器和路径帮助器。 
	 * 为以下版本共享配置的路径匹配器和路径帮助器实例：<ul> <li> RequestMappings </ li> <li> ViewControllerMappings </ li> <li> ResourcesMappings </ li> </ ul> @since 4.0.3起
	 */
	default void configurePathMatch(PathMatchConfigurer configurer) {
	}

	/**
	 * Configure content negotiation options.
	 */
	/**
	 * 配置内容协商选项。 
	 * 
	 */
	default void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
	}

	/**
	 * Configure asynchronous request handling options.
	 */
	/**
	 * 配置异步请求处理选项。 
	 * 
	 */
	default void configureAsyncSupport(AsyncSupportConfigurer configurer) {
	}

	/**
	 * Configure a handler to delegate unhandled requests by forwarding to the
	 * Servlet container's "default" servlet. A common use case for this is when
	 * the {@link DispatcherServlet} is mapped to "/" thus overriding the
	 * Servlet container's default handling of static resources.
	 */
	/**
	 * 通过转发到Servlet容器的"默认"Servlet，配置处理程序以委派未处理的请求。 
	 * 常见的用法是将{@link  DispatcherServlet}映射到"/"，从而覆盖Servlet容器对静态资源的默认处理。 
	 * 
	 */
	default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
	}

	/**
	 * Add {@link Converter Converters} and {@link Formatter Formatters} in addition to the ones
	 * registered by default.
	 */
	/**
	 * 除了默认注册的之外，还添加{@link 转换器Converters}和{@link  Formatter Formatters}。 
	 * 
	 */
	default void addFormatters(FormatterRegistry registry) {
	}

	/**
	 * Add Spring MVC lifecycle interceptors for pre- and post-processing of
	 * controller method invocations and resource handler requests.
	 * Interceptors can be registered to apply to all requests or be limited
	 * to a subset of URL patterns.
	 */
	/**
	 * 添加Spring MVC生命周期拦截器，以对控制器方法调用和资源处理程序请求进行预处理。 
	 * 拦截器可以注册以应用于所有请求，也可以限于URL模式的子集。 
	 * 
	 */
	default void addInterceptors(InterceptorRegistry registry) {
	}

	/**
	 * Add handlers to serve static resources such as images, js, and, css
	 * files from specific locations under web application root, the classpath,
	 * and others.
	 */
	/**
	 * 添加处理程序以从Web应用程序根目录，类路径等中的特定位置提供静态资源，例如图像，js和css文件。 
	 * 
	 */
	default void addResourceHandlers(ResourceHandlerRegistry registry) {
	}

	/**
	 * Configure cross origin requests processing.
	 * @since 4.2
	 */
	/**
	 * 配置跨源请求处理。 
	 *  @4.2起
	 */
	default void addCorsMappings(CorsRegistry registry) {
	}

	/**
	 * Configure simple automated controllers pre-configured with the response
	 * status code and/or a view to render the response body. This is useful in
	 * cases where there is no need for custom controller logic -- e.g. render a
	 * home page, perform simple site URL redirects, return a 404 status with
	 * HTML content, a 204 with no content, and more.
	 */
	/**
	 * 配置预先配置了响应状态代码和/或用于呈现响应主体的视图的简单自动化控制器。 
	 * 这在不需要自定义控制器逻辑的情况下很有用-例如呈现主页，执行简单的站点URL重定向，返回包含HTML内容的404状态，不包含内容的204状态等等。 
	 * 
	 */
	default void addViewControllers(ViewControllerRegistry registry) {
	}

	/**
	 * Configure view resolvers to translate String-based view names returned from
	 * controllers into concrete {@link org.springframework.web.servlet.View}
	 * implementations to perform rendering with.
	 * @since 4.1
	 */
	/**
	 * 配置视图解析器，以将从控制器返回的基于字符串的视图名称转换为具体的{@link  org.springframework.web.servlet.View}实现，以执行呈现。 
	 *  @始于4.1
	 */
	default void configureViewResolvers(ViewResolverRegistry registry) {
	}

	/**
	 * Add resolvers to support custom controller method argument types.
	 * <p>This does not override the built-in support for resolving handler
	 * method arguments. To customize the built-in support for argument
	 * resolution, configure {@link RequestMappingHandlerAdapter} directly.
	 * @param resolvers initially an empty list
	 */
	/**
	 * 添加解析器以支持自定义控制器方法参数类型。 
	 *  <p>这不会覆盖对解析处理程序方法参数的内置支持。 
	 * 要自定义对参数解析的内置支持，请直接配置{@link  RequestMappingHandlerAdapter}。 
	 *  
	 * @param 解析器最初为空列表
	 */
	default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
	}

	/**
	 * Add handlers to support custom controller method return value types.
	 * <p>Using this option does not override the built-in support for handling
	 * return values. To customize the built-in support for handling return
	 * values, configure RequestMappingHandlerAdapter directly.
	 * @param handlers initially an empty list
	 */
	/**
	 * 添加处理程序以支持自定义控制器方法返回值类型。 
	 *  <p>使用此选项不会覆盖对返回值的内置支持。 
	 * 要自定义用于处理返回值的内置支持，请直接配置RequestMappingHandlerAdapter。 
	 *  
	 * @param 处理程序最初是一个空列表
	 */
	default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) {
	}

	/**
	 * Configure the {@link HttpMessageConverter HttpMessageConverters} to use for reading or writing
	 * to the body of the request or response. If no converters are added, a
	 * default list of converters is registered.
	 * <p><strong>Note</strong> that adding converters to the list, turns off
	 * default converter registration. To simply add a converter without impacting
	 * default registration, consider using the method
	 * {@link #extendMessageConverters(java.util.List)} instead.
	 * @param converters initially an empty list of converters
	 */
	/**
	 * 配置{@link  HttpMessageConverter HttpMessageConverters}以用于读取或写入请求或响应的正文。 
	 * 如果未添加任何转换器，则会注册默认的转换器列表。 
	 *  <p> <strong>注意</ strong>，将转换器添加到列表中会关闭默认的转换器注册。 
	 * 要简单地添加一个转换器而不影响默认注册，请考虑改用方法{@link  #extendMessageConverters（java.util.List）}。 
	 *  
	 * @param 转换器最初是转换器的空列表
	 */
	default void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
	}

	/**
	 * A hook for extending or modifying the list of converters after it has been
	 * configured. This may be useful for example to allow default converters to
	 * be registered and then insert a custom converter through this method.
	 * @param converters the list of configured converters to extend.
	 * @since 4.1.3
	 */
	/**
	 * 一个钩子，用于在配置后扩展或修改转换器列表。 
	 * 例如，这对于允许注册默认转换器，然后通过此方法插入自定义转换器很有用。 
	 *  
	 * @param 转换器扩展配置的转换器的列表。 
	 *  @自4.1.3起
	 */
	default void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
	}

	/**
	 * Configure exception resolvers.
	 * <p>The given list starts out empty. If it is left empty, the framework
	 * configures a default set of resolvers, see
	 * {@link WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List, org.springframework.web.accept.ContentNegotiationManager)}.
	 * Or if any exception resolvers are added to the list, then the application
	 * effectively takes over and must provide, fully initialized, exception
	 * resolvers.
	 * <p>Alternatively you can use
	 * {@link #extendHandlerExceptionResolvers(List)} which allows you to extend
	 * or modify the list of exception resolvers configured by default.
	 * @param resolvers initially an empty list
	 * @see #extendHandlerExceptionResolvers(List)
	 * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List, org.springframework.web.accept.ContentNegotiationManager)
	 */
	/**
	 * 配置异常解析器。 
	 *  <p>给定列表开始为空。 
	 * 如果保留为空，则框架将配置一组默认的解析程序，请参见{@link  WebMvcConfigurationSupport＃addDefaultHandlerExceptionResolvers（List，org.springframework.web.accept.ContentNegotiationManager）}。 
	 * 或者，如果将任何异常解决程序添加到列表中，则应用程序将有效地接管并且必须提供完全初始化的异常解决程序。 
	 *  <p>或者，您可以使用{@link  #extendHandlerExceptionResolvers（List）}，它允许您扩展或修改默认配置的异常解析器列表。 
	 *  
	 * @param 解析程序最初为空列表
	 * @see  #extendHandlerExceptionResolvers（List）
	 * @see  WebMvcConfigurationSupport＃addDefaultHandlerExceptionResolvers（List，org.springframework.web.accept.ContentNegotiationManager）
	 */
	default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {
	}

	/**
	 * Extending or modify the list of exception resolvers configured by default.
	 * This can be useful for inserting a custom exception resolver without
	 * interfering with default ones.
	 * @param resolvers the list of configured resolvers to extend
	 * @since 4.3
	 * @see WebMvcConfigurationSupport#addDefaultHandlerExceptionResolvers(List, org.springframework.web.accept.ContentNegotiationManager)
	 */
	/**
	 * 扩展或修改默认配置的异常解析器列表。 
	 * 这对于插入自定义异常解析器而不干扰默认解析器很有用。 
	 *  
	 * @param 解析程序已配置解析程序的列表，从4.3开始扩展。 
	 * 
	 * @see  WebMvcConfigurationSupport＃addDefaultHandlerExceptionResolvers（List，org.springframework.web.accept.ContentNegotiationManager）
	 */
	default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) {
	}

	/**
	 * Provide a custom {@link Validator} instead of the one created by default.
	 * The default implementation, assuming JSR-303 is on the classpath, is:
	 * {@link org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean}.
	 * Leave the return value as {@code null} to keep the default.
	 */
	/**
	 * 提供自定义的{@link 验证程序}，而不是默认创建的验证程序。 
	 * 假设JSR-303位于类路径上，则默认实现为：{@link  org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean}。 
	 * 将返回值保留为{@code  null}以保留默认值。 
	 * 
	 */
	@Nullable
	default Validator getValidator() {
		return null;
	}

	/**
	 * Provide a custom {@link MessageCodesResolver} for building message codes
	 * from data binding and validation error codes. Leave the return value as
	 * {@code null} to keep the default.
	 */
	/**
	 * 提供自定义{@link  MessageCodesResolver}，用于根据数据绑定和验证错误代码构建消息代码。 
	 * 将返回值保留为{@code  null}以保留默认值。 
	 * 
	 */
	@Nullable
	default MessageCodesResolver getMessageCodesResolver() {
		return null;
	}

}
