/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.handler.annotation.reactive;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.config.BeanExpressionContext;
import org.springframework.beans.factory.config.BeanExpressionResolver;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.core.MethodParameter;
import org.springframework.core.convert.ConversionService;
import org.springframework.core.convert.TypeDescriptor;
import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.handler.annotation.ValueConstants;
import org.springframework.messaging.handler.invocation.reactive.SyncHandlerMethodArgumentResolver;
import org.springframework.util.ClassUtils;

/**
 * Abstract base class to resolve method arguments from a named value, e.g.
 * message headers or destination variables. Named values could have one or more
 * of a name, a required flag, and a default value.
 *
 * <p>Subclasses only need to define specific steps such as how to obtain named
 * value details from a method parameter, how to resolve to argument values, or
 * how to handle missing values.
 *
 *  <p>A default value string can contain ${...} placeholders and Spring
 * Expression Language {@code #{...}} expressions which will be resolved if a
 * {@link ConfigurableBeanFactory} is supplied to the class constructor.
 *
 * <p>A {@link ConversionService} is used to convert a resolved String argument
 * value to the expected target method parameter type.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 */
/**
 * 抽象基类，用于从命名值解析方法参数，例如消息头或目标变量。 
 * 命名值可以具有名称，必需标志和默认值中的一个或多个。 
 *  <p>子类仅需要定义特定的步骤，例如如何从方法参数获取命名值详细信息，如何解析为参数值或如何处理缺失值。 
 *  <p>默认值字符串可以包含$ {...}占位符和Spring表达式语言{@code ＃{...}}表达式，如果将{@link  ConfigurableBeanFactory}提供给该表达式，这些表达式将被解析。 
 * 类的构造函数。 
 *  <p> {{@link> ConversionService}用于将解析的String参数值转换为预期的目标方法参数类型。 
 *  @author  Rossen Stoyanchev @从5.2开始
 */
public abstract class AbstractNamedValueMethodArgumentResolver implements SyncHandlerMethodArgumentResolver {

	private final ConversionService conversionService;

	@Nullable
	private final ConfigurableBeanFactory configurableBeanFactory;

	@Nullable
	private final BeanExpressionContext expressionContext;

	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<>(256);


	/**
	 * Constructor with a {@link ConversionService} and a {@link BeanFactory}.
	 * @param conversionService conversion service for converting String values
	 * to the target method parameter type
	 * @param beanFactory a bean factory for resolving {@code ${...}}
	 * placeholders and {@code #{...}} SpEL expressions in default values
	 */
	/**
	 * 带有{@link  ConversionService}和{@link  BeanFactory}的构造方法。 
	 *  
	 * @param  conversionService转换服务，用于将String值转换为目标方法参数类型
	 * @param  beanFactory一个bean工厂，用于解析{@code  $ {...}}占位符和{@code ＃{.。 
	 *  。 
	 * }} SpEL表达式的默认值
	 */
	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,
			@Nullable ConfigurableBeanFactory beanFactory) {

		this.conversionService = conversionService;
		this.configurableBeanFactory = beanFactory;
		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);
	}


	@Override
	public Object resolveArgumentValue(MethodParameter parameter, Message<?> message) {

		NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);
		MethodParameter nestedParameter = parameter.nestedIfOptional();

		Object resolvedName = resolveEmbeddedValuesAndExpressions(namedValueInfo.name);
		if (resolvedName == null) {
			throw new IllegalArgumentException(
					"Specified name must not resolve to null: [" + namedValueInfo.name + "]");
		}

		Object arg = resolveArgumentInternal(nestedParameter, message, resolvedName.toString());
		if (arg == null) {
			if (namedValueInfo.defaultValue != null) {
				arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);
			}
			else if (namedValueInfo.required && !nestedParameter.isOptional()) {
				handleMissingValue(namedValueInfo.name, nestedParameter, message);
			}
			arg = handleNullValue(namedValueInfo.name, arg, nestedParameter.getNestedParameterType());
		}
		else if ("".equals(arg) && namedValueInfo.defaultValue != null) {
			arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);
		}

		if (parameter != nestedParameter || !ClassUtils.isAssignableValue(parameter.getParameterType(), arg)) {
			arg = this.conversionService.convert(arg, TypeDescriptor.forObject(arg), new TypeDescriptor(parameter));
		}

		return arg;
	}

	/**
	 * Obtain the named value for the given method parameter.
	 */
	/**
	 * 获取给定方法参数的命名值。 
	 * 
	 */
	private NamedValueInfo getNamedValueInfo(MethodParameter parameter) {
		NamedValueInfo namedValueInfo = this.namedValueInfoCache.get(parameter);
		if (namedValueInfo == null) {
			namedValueInfo = createNamedValueInfo(parameter);
			namedValueInfo = updateNamedValueInfo(parameter, namedValueInfo);
			this.namedValueInfoCache.put(parameter, namedValueInfo);
		}
		return namedValueInfo;
	}

	/**
	 * Create the {@link NamedValueInfo} object for the given method parameter.
	 * Implementations typically retrieve the method annotation by means of
	 * {@link MethodParameter#getParameterAnnotation(Class)}.
	 * @param parameter the method parameter
	 * @return the named value information
	 */
	/**
	 * 为给定的方法参数创建{@link  NamedValueInfo}对象。 
	 * 实现通常通过{@link  MethodParameter＃getParameterAnnotation（Class）}检索方法注释。 
	 *  
	 * @param 参数方法参数
	 * @return 命名值信息
	 */
	protected abstract NamedValueInfo createNamedValueInfo(MethodParameter parameter);

	/**
	 * Fall back on the parameter name from the class file if necessary and
	 * replace {@link ValueConstants#DEFAULT_NONE} with null.
	 */
	/**
	 * 必要时从类文件中返回参数名称，并将{@link  ValueConstants＃DEFAULT_NONE}替换为null。 
	 * 
	 */
	private NamedValueInfo updateNamedValueInfo(MethodParameter parameter, NamedValueInfo info) {
		String name = info.name;
		if (info.name.isEmpty()) {
			name = parameter.getParameterName();
			if (name == null) {
				Class<?> type = parameter.getParameterType();
				throw new IllegalArgumentException(
						"Name for argument of type [" + type.getName() + "] not specified, " +
								"and parameter name information not found in class file either.");
			}
		}
		return new NamedValueInfo(name, info.required,
				ValueConstants.DEFAULT_NONE.equals(info.defaultValue) ? null : info.defaultValue);
	}

	/**
	 * Resolve the given annotation-specified value,
	 * potentially containing placeholders and expressions.
	 */
	/**
	 * 解决给定的注释指定值，可能包含占位符和表达式。 
	 * 
	 */
	@Nullable
	private Object resolveEmbeddedValuesAndExpressions(String value) {
		if (this.configurableBeanFactory == null || this.expressionContext == null) {
			return value;
		}
		String placeholdersResolved = this.configurableBeanFactory.resolveEmbeddedValue(value);
		BeanExpressionResolver exprResolver = this.configurableBeanFactory.getBeanExpressionResolver();
		if (exprResolver == null) {
			return value;
		}
		return exprResolver.evaluate(placeholdersResolved, this.expressionContext);
	}

	/**
	 * Resolves the given parameter type and value name into an argument value.
	 * @param parameter the method parameter to resolve to an argument value
	 * @param message the current request
	 * @param name the name of the value being resolved
	 * @return the resolved argument. May be {@code null}
	 */
	/**
	 * 将给定的参数类型和值名称解析为参数值。 
	 *  
	 * @param 参数方法参数解析为参数值
	 * @param 消息当前请求
	 * @param 名称要解析的值的名称
	 * @return 解析的参数。 
	 * 可能为{@code  null}
	 */
	@Nullable
	protected abstract Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name);

	/**
	 * Invoked when a value is required, but {@link #resolveArgumentInternal}
	 * returned {@code null} and there is no default value. Sub-classes can
	 * throw an appropriate exception for this case.
	 * @param name the name for the value
	 * @param parameter the target method parameter
	 * @param message the message being processed
	 */
	/**
	 * 当需要值时调用，但是{@link  #resolveArgumentInternal}返回{@code  null}，并且没有默认值。 
	 * 子类可以为此情况抛出适当的异常。 
	 *  
	 * @param 名称值的名称
	 * @param 参数的名称目标方法参数
	 * @param 消息正在处理的消息
	 */
	protected abstract void handleMissingValue(String name, MethodParameter parameter, Message<?> message);

	/**
	 * One last chance to handle a possible null value.
	 * Specifically for booleans method parameters, use {@link Boolean#FALSE}.
	 * Also raise an ISE for primitive types.
	 */
	/**
	 * 处理可能的空值的最后机会。 
	 * 专门用于布尔方法参数，请使用{@link  Boolean＃FALSE}。 
	 * 还针对原始类型提高ISE。 
	 * 
	 */
	@Nullable
	private Object handleNullValue(String name, @Nullable Object value, Class<?> paramType) {
		if (value == null) {
			if (Boolean.TYPE.equals(paramType)) {
				return Boolean.FALSE;
			}
			else if (paramType.isPrimitive()) {
				throw new IllegalStateException("Optional " + paramType + " parameter '" + name +
						"' is present but cannot be translated into a null value due to being " +
						"declared as a primitive type. Consider declaring it as object wrapper " +
						"for the corresponding primitive type.");
			}
		}
		return value;
	}


	/**
	 * Represents a named value declaration.
	 */
	/**
	 * 表示命名的值声明。 
	 * 
	 */
	protected static class NamedValueInfo {

		private final String name;

		private final boolean required;

		@Nullable
		private final String defaultValue;

		protected NamedValueInfo(String name, boolean required, @Nullable String defaultValue) {
			this.name = name;
			this.required = required;
			this.defaultValue = defaultValue;
		}
	}

}
