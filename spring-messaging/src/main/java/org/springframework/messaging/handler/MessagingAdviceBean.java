/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.handler;

import org.springframework.core.Ordered;
import org.springframework.lang.Nullable;

/**
 * Represents a Spring-managed bean with cross-cutting functionality to be
 * applied to one or more Spring beans with annotation-based message
 * handling methods.
 *
 * <p>Component stereotypes such as
 * {@link org.springframework.stereotype.Controller @Controller} with annotation
 * handler methods often need cross-cutting functionality across all or a subset
 * of such annotated components. A primary example of this is the need for "global"
 * annotated exception handler methods but the concept applies more generally.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 */
/**
 * 表示一种具有跨领域功能的Spring托管Bean，该Bean可以通过基于注释的消息处理方法应用于一个或多个Spring Bean。 
 * 带有注释处理程序方法的<p>组件原型，例如{@link  org.springframework.stereotype.Controller @Controller}，通常需要跨所有或部分此类已注释组件的交叉功能。 
 * 一个主要的例子是需要"全局"注释的异常处理程序方法，但是该概念更普遍地适用。 
 *  @author  Rossen Stoyanchev @从4.2开始
 */
public interface MessagingAdviceBean extends Ordered {

	/**
	 * Return the type of the contained advice bean.
	 * <p>If the bean type is a CGLIB-generated class, the original user-defined
	 * class is returned.
	 */
	/**
	 * 返回所包含的建议bean的类型。 
	 *  <p>如果bean类型是CGLIB生成的类，则返回原始的用户定义类。 
	 * 
	 */
	@Nullable
	Class<?> getBeanType();

	/**
	 * Return the advice bean instance, if necessary resolving a bean specified
	 * by name through the BeanFactory.
	 */
	/**
	 * 返回建议bean实例，如有必要，通过BeanFactory解析按名称指定的bean。 
	 * 
	 */
	Object resolveBean();

	/**
	 * Whether this {@link MessagingAdviceBean} applies to the given bean type.
	 * @param beanType the type of the bean to check
	 */
	/**
	 * 此{@link  MessagingAdviceBean}是否适用于给定的bean类型。 
	 *  
	 * @param  beanType要检查的bean类型
	 */
	boolean isApplicableToBeanType(Class<?> beanType);

}
