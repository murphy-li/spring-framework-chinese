/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.handler.annotation.support;

import java.lang.reflect.Method;

import org.springframework.messaging.handler.invocation.InvocableHandlerMethod;

/**
 * A factory for {@link InvocableHandlerMethod} that is suitable to process
 * an incoming {@link org.springframework.messaging.Message}
 *
 * <p>Typically used by listener endpoints that require a flexible method
 * signature.
 *
 * @author Stephane Nicoll
 * @since 4.1
 */
/**
 * {@link  InvocableHandlerMethod}的工厂，适合处理传入的{@link  org.springframework.messaging.Message}。 
 * <p>通常由需要灵活方法签名的侦听器端点使用。 
 *  @author 史蒂芬·尼科尔@since 4.1
 */
public interface MessageHandlerMethodFactory {

	/**
	 * Create the {@link InvocableHandlerMethod} that is able to process the specified
	 * method endpoint.
	 * @param bean the bean instance
	 * @param method the method to invoke
	 * @return an {@link InvocableHandlerMethod} suitable for that method
	 */
	/**
	 * 创建能够处理指定方法端点的{@link  InvocableHandlerMethod}。 
	 *  
	 * @param  bean Bean实例
	 * @param 方法调用
	 * @return 适用于该方法的{@link  InvocableHandlerMethod}的方法
	 */
	InvocableHandlerMethod createInvocableHandlerMethod(Object bean, Method method);

}
