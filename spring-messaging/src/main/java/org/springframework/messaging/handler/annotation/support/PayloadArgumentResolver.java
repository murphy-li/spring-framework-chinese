/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.handler.annotation.support;

import org.springframework.lang.Nullable;
import org.springframework.messaging.converter.MessageConverter;
import org.springframework.validation.Validator;

/**
 * A resolver to extract and convert the payload of a message using a
 * {@link MessageConverter}. It also validates the payload using a
 * {@link Validator} if the argument is annotated with a Validation annotation.
 *
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @author Brian Clozel
 * @author Stephane Nicoll
 * @since 4.0
 * @deprecated as of 5.2, in favor of {@link PayloadMethodArgumentResolver}
 */
/**
 * 解析器使用{@link  MessageConverter}提取和转换消息的有效负载。 
 * 如果自变量使用Validation注释进行注释，它还将使用{@link  Validator}来验证有效负载。 
 *  @author  Rossen Stoyanchev @author  Juergen Hoeller @author  Brian Clozel @author  Stephane Nicoll @自5.2起已弃用，支持{@link  PayloadMethodArgumentResolver}
 */
@Deprecated
public class PayloadArgumentResolver extends PayloadMethodArgumentResolver {

	/**
	 * Create a new {@code PayloadArgumentResolver} with the given
	 * {@link MessageConverter}.
	 * @param messageConverter the MessageConverter to use (required)
	 * @since 4.0.9
	 */
	/**
	 * 使用给定的{@link  MessageConverter}创建一个新的{@code  PayloadArgumentResolver}。 
	 *  
	 * @param  messageConverter自4.0.9起使用的MessageConverter（必需）
	 */
	public PayloadArgumentResolver(MessageConverter messageConverter) {
		this(messageConverter, null);
	}

	/**
	 * Create a new {@code PayloadArgumentResolver} with the given
	 * {@link MessageConverter} and {@link Validator}.
	 * @param messageConverter the MessageConverter to use (required)
	 * @param validator the Validator to use (optional)
	 */
	/**
	 * 使用给定的{@link  MessageConverter}和{@link  Validator}创建一个新的{@code  PayloadArgumentResolver}。 
	 *  
	 * @param  messageConverter要使用的MessageConverter（必需）
	 * @param 验证程序要使用的验证程序（可选）
	 */
	public PayloadArgumentResolver(MessageConverter messageConverter, @Nullable Validator validator) {
		this(messageConverter, validator, true);
	}

	/**
	 * Create a new {@code PayloadArgumentResolver} with the given
	 * {@link MessageConverter} and {@link Validator}.
	 * @param messageConverter the MessageConverter to use (required)
	 * @param validator the Validator to use (optional)
	 * @param useDefaultResolution if "true" (the default) this resolver supports
	 * all parameters; if "false" then only arguments with the {@code @Payload}
	 * annotation are supported.
	 */
	/**
	 * 使用给定的{@link  MessageConverter}和{@link  Validator}创建一个新的{@code  PayloadArgumentResolver}。 
	 *  
	 * @param  messageConverter要使用的MessageConverter（必需）
	 * @param 验证程序要使用的Validator（可选）
	 * @param  useDefaultResolution如果"true"（默认），则此解析程序支持所有参数； 
	 * 如果为"false"，则仅支持带有{@code  @Payload}注释的参数。 
	 * 
	 */
	public PayloadArgumentResolver(MessageConverter messageConverter, @Nullable Validator validator,
			boolean useDefaultResolution) {


		super(messageConverter, validator, useDefaultResolution);
	}

}
