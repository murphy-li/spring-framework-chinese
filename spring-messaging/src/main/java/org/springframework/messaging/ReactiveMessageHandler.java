/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging;

import reactor.core.publisher.Mono;

/**
 * Reactive contract for handling a {@link Message}.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 * @see MessageHandler
 */
/**
 * 用于处理{@link 消息}的反应性合同。 
 *  @author  Rossen Stoyanchev @从5.2开始
 * @see  MessageHandler
 */
@FunctionalInterface
public interface ReactiveMessageHandler {

	/**
	 * Handle the given message.
	 * @param message the message to be handled
	 * @return a completion {@link Mono} for the result of the message handling
	 */
	/**
	 * 处理给定的消息。 
	 *  
	 * @param 消息要处理的消息
	 * @return 消息处理结果的完成{@link  Mono}
	 */
	Mono<Void> handleMessage(Message<?> message);

}
