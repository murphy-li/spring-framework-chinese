/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.support;

import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;

/**
 * A simpler interceptor that calls {@link MessageHeaderAccessor#setImmutable()}
 * on the headers of messages passed through the preSend method.
 *
 * <p>When configured as the last interceptor in a chain, it allows the component
 * sending the message to leave headers mutable for interceptors to modify prior
 * to the message actually being sent and exposed to concurrent access.
 *
 * @author Rossen Stoyanchev
 * @since 4.1.2
 */
/**
 * 一个更简单的拦截器，它对通过preSend方法传递的消息的标头调用{@link  MessageHeaderAccessor＃setImmutable（）}。 
 *  <p>当配置为链中的最后一个拦截器时，它允许发送消息的组件使报头可变，以便拦截器在实际发送消息并暴露给并发访问之前对其进行修改。 
 *  @author  Rossen Stoyanchev @4.1.2起
 */
public class ImmutableMessageChannelInterceptor implements ChannelInterceptor {

	@Override
	public Message<?> preSend(Message<?> message, MessageChannel channel) {
		MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class);
		if (accessor != null && accessor.isMutable()) {
			accessor.setImmutable();
		}
		return message;
	}

}
