/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.support;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHandler;

/**
 * An extension of {@link ChannelInterceptor} with callbacks to intercept the
 * asynchronous sending of a {@link org.springframework.messaging.Message} to
 * a specific subscriber through an {@link java.util.concurrent.Executor}.
 * Supported on {@link org.springframework.messaging.MessageChannel}
 * implementations that can be configured with an {@code Executor}.
 *
 * @author Rossen Stoyanchev
 * @since 4.1
 * @see Message
 * @see MessageChannel
 * @see MessageHandler
 */
/**
 * {@link  ChannelInterceptor}的扩展带有回调，以拦截{@link  org.springframework.messaging.Message}通过{@link  java.util.concurrent.Executor向特定订阅者的异步发送}。 
 * 在{@link  org.springframework.messaging.MessageChannel}实现上受支持，该实现可以使用{@code  Executor}进行配置。 
 *  @author  Rossen Stoyanchev @从4.1开始
 * @see 消息
 * @see  MessageChannel 
 * @see  MessageHandler
 */
public interface ExecutorChannelInterceptor extends ChannelInterceptor {

	/**
	 * Invoked inside the {@link Runnable} submitted to the Executor just before
	 * calling the target MessageHandler to handle the message. Allows for
	 * modification of the Message if necessary or when {@code null} is returned
	 * the MessageHandler is not invoked.
	 * @param message the message to be handled
	 * @param channel the channel on which the message was sent to
	 * @param handler the target handler to handle the message
	 * @return the input message, or a new instance, or {@code null}
	 */
	/**
	 * 在调用目标MessageHandler处理消息之前，在提交给执行程序的{@link  Runnable}内部调用。 
	 * 允许在必要时修改消息，或者在返回{@code  null}时不调用MessageHandler。 
	 *  
	 * @param 消息要处理的消息
	 * @param 通道将消息发送到
	 * @param 处理程序的通道，目标处理程序处理消息的@
	 * @return>输入消息或新实例的通道，或者{@code 空}
	 */
	@Nullable
	default Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {
		return message;
	}

	/**
	 * Invoked inside the {@link Runnable} submitted to the Executor after calling
	 * the target MessageHandler regardless of the outcome (i.e. Exception raised
	 * or not) thus allowing for proper resource cleanup.
	 * <p>Note that this will be invoked only if beforeHandle successfully completed
	 * and returned a Message, i.e. it did not return {@code null}.
	 * @param message the message handled
	 * @param channel the channel on which the message was sent to
	 * @param handler the target handler that handled the message
	 * @param ex any exception that may been raised by the handler
	 */
	/**
	 * 在调用目标MessageHandler之后，在提交给执行程序的{@link  Runnable}内部调用，而不管结果如何（即是否引发异常），从而可以进行适当的资源清理。 
	 *  <p>请注意，只有在beforeHandle成功完成并返回消息后，即未返回{@code  null}时，才会调用此方法。 
	 *  
	 * @param 消息消息已处理的消息
	 * @param 通道将消息发送到
	 * @param 处理程序的通道，处理消息
	 * @param 的目标处理程序以及处理程序可能引发的任何异常
	 */
	default void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler,
			@Nullable Exception ex) {
	}

}
