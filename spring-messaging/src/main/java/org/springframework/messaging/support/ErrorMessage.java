/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.support;

import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;

/**
 * A {@link GenericMessage} with a {@link Throwable} payload.
 *
 * <p>The payload is typically a {@link org.springframework.messaging.MessagingException}
 * with the message at the point of failure in its {@code failedMessage} property.
 * An optional {@code originalMessage} may be provided, which represents the message
 * that existed at the point in the stack where the error message is created.
 *
 * <p>Consider some code that starts with a message, invokes some process that performs
 * transformation on that message and then fails for some reason, throwing the exception.
 * The exception is caught and an error message produced that contains both the original
 * message, and the transformed message that failed.
 *
 * @author Mark Fisher
 * @author Oleg Zhurakousky
 * @author Gary Russell
 * @since 4.0
 * @see MessageBuilder
 */
/**
 * 带有{@link  Throwable}有效载荷的{@link  GenericMessage}。 
 *  <p>有效负载通常是一个{@link  org.springframework.messaging.MessagingException}，其失败点的消息位于其{@code  failedMessage}属性中。 
 * 可以提供一个可选的{@code  originalMessage}，它表示在堆栈中创建错误消息的那一点上存在的消息。 
 *  <p>考虑一些以消息开头的代码，调用一些对该消息执行转换的过程，然后由于某种原因而失败，并引发异常。 
 * 捕获到异常，并生成一条错误消息，其中包含原始消息和失败的转换消息。 
 *  @author  Mark Fisher @author  Oleg Zhurakousky @author  Gary Russell @从4.0开始
 * @see  MessageBuilder
 */
public class ErrorMessage extends GenericMessage<Throwable> {

	private static final long serialVersionUID = -5470210965279837728L;

	@Nullable
	private final Message<?> originalMessage;


	/**
	 * Create a new message with the given payload.
	 * @param payload the message payload (never {@code null})
	 */
	/**
	 * 使用给定的有效负载创建一条新消息。 
	 *  
	 * @param 有效负载消息有效负载（永远{<@@code> null}）
	 */
	public ErrorMessage(Throwable payload) {
		super(payload);
		this.originalMessage = null;
	}

	/**
	 * Create a new message with the given payload and headers.
	 * The content of the given header map is copied.
	 * @param payload the message payload (never {@code null})
	 * @param headers message headers to use for initialization
	 */
	/**
	 * 使用给定的有效负载和标头创建新消息。 
	 * 给定标题映射的内容将被复制。 
	 *  
	 * @param 有效负载消息有效负载（永不{@code  null}）
	 * @param 标头用于初始化的消息标头
	 */
	public ErrorMessage(Throwable payload, Map<String, Object> headers) {
		super(payload, headers);
		this.originalMessage = null;
	}

	/**
	 * A constructor with the {@link MessageHeaders} instance to use.
	 * <p><strong>Note:</strong> the given {@code MessageHeaders} instance
	 * is used directly in the new message, i.e. it is not copied.
	 * @param payload the message payload (never {@code null})
	 * @param headers message headers
	 */
	/**
	 * 带有{@link  MessageHeaders}实例的构造函数。 
	 *  <p> <strong>注意</ strong>：给定的{@code  MessageHeaders}实例直接在新消息中使用，即不被复制。 
	 *  
	 * @param 有效负载消息有效负载（永不{@code  null}）
	 * @param 标头消息标头
	 */
	public ErrorMessage(Throwable payload, MessageHeaders headers) {
		super(payload, headers);
		this.originalMessage = null;
	}

	/**
	 * Create a new message with the given payload and original message.
	 * @param payload the message payload (never {@code null})
	 * @param originalMessage the original message (if present) at the point
	 * in the stack where the ErrorMessage was created
	 * @since 5.0
	 */
	/**
	 * 使用给定的有效负载和原始消息创建新消息。 
	 *  
	 * @param 有效负载消息有效负载（永不{<@@code> null}）
	 * @param  originalMessage原始消息（如果存在）在堆栈中自5.0以来创建ErrorMessage的位置
	 */
	public ErrorMessage(Throwable payload, Message<?> originalMessage) {
		super(payload);
		this.originalMessage = originalMessage;
	}

	/**
	 * Create a new message with the given payload, headers and original message.
	 * The content of the given header map is copied.
	 * @param payload the message payload (never {@code null})
	 * @param headers message headers to use for initialization
	 * @param originalMessage the original message (if present) at the point
	 * in the stack where the ErrorMessage was created
	 * @since 5.0
	 */
	/**
	 * 使用给定的有效负载，标头和原始消息创建新消息。 
	 * 给定标题映射的内容将被复制。 
	 *  
	 * @param 有效负载消息有效负载（永不{@code  null}）
	 * @param 标头用于初始化的消息标头
	 * @param  originalMessage原始消息（如果存在）在堆栈中ErrorMessage的位置从5.0开始创建
	 */
	public ErrorMessage(Throwable payload, Map<String, Object> headers, Message<?> originalMessage) {
		super(payload, headers);
		this.originalMessage = originalMessage;
	}

	/**
	 * Create a new message with the payload, {@link MessageHeaders} and original message.
	 * <p><strong>Note:</strong> the given {@code MessageHeaders} instance
	 * is used directly in the new message, i.e. it is not copied.
	 * @param payload the message payload (never {@code null})
	 * @param headers message headers
	 * @param originalMessage the original message (if present) at the point
	 * in the stack where the ErrorMessage was created
	 * @since 5.0
	 */
	/**
	 * 使用有效负载{@link  MessageHeaders}和原始消息创建一条新消息。 
	 *  <p> <strong>注意</ strong>：给定的{@code  MessageHeaders}实例直接在新消息中使用，即不被复制。 
	 *  
	 * @param 有效负载消息有效负载（永不{<@@code> null}）
	 * @param 标头消息标头
	 * @param  originalMessage原始消息（如果存在）在创建ErrorMessage的堆栈中的位置@since 5.0
	 */
	public ErrorMessage(Throwable payload, MessageHeaders headers, Message<?> originalMessage) {
		super(payload, headers);
		this.originalMessage = originalMessage;
	}


	/**
	 * Return the original message (if available) at the point in the stack
	 * where the ErrorMessage was created.
	 * @since 5.0
	 */
	/**
	 * 在堆栈中创建ErrorMessage的位置返回原始消息（如果有）。 
	 *  @5.0起
	 */
	@Nullable
	public Message<?> getOriginalMessage() {
		return this.originalMessage;
	}

	@Override
	public String toString() {
		if (this.originalMessage == null) {
			return super.toString();
		}
		return super.toString() + " for original " + this.originalMessage;
	}

}
