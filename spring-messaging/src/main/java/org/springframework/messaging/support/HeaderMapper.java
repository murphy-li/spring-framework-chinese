/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.support;

import org.springframework.messaging.MessageHeaders;

/**
 * Generic strategy interface for mapping {@link MessageHeaders} to and from other
 * types of objects. This would typically be used by adapters where the "other type"
 * has a concept of headers or properties (HTTP, JMS, AMQP, etc).
 *
 * @author Mark Fisher
 * @since 4.1
 * @param <T> type of the instance to and from which headers will be mapped
 */
/**
 * 用于将{@link  MessageHeaders}与其他类型的对象进行映射的通用策略接口。 
 * 如果"其他类型"具有标头或属性（HTTP，JMS，AMQP等）的概念，则适配器通常会使用它。 
 *  @author  Mark Fisher @since 4.1起
 * @param  <T>实例与头之间的映射类型
 */
public interface HeaderMapper<T> {

	/**
	 * Map from the given {@link MessageHeaders} to the specified target message.
	 * @param headers the abstracted MessageHeaders
	 * @param target the native target message
	 */
	/**
	 * 从给定的{@link  MessageHeaders}映射到指定的目标消息。 
	 *  
	 * @param 标头抽象的MessageHeaders 
	 * @param 标目标本机目标消息
	 */
	void fromHeaders(MessageHeaders headers, T target);

	/**
	 * Map from the given target message to abstracted {@link MessageHeaders}.
	 * @param source the native target message
	 * @return the abstracted MessageHeaders
	 */
	/**
	 * 从给定的目标消息映射到抽象的{@link  MessageHeaders}。 
	 *  
	 * @param 源本机目标消息
	 * @return 抽象的MessageHeaders
	 */
	MessageHeaders toHeaders(T source);

}
