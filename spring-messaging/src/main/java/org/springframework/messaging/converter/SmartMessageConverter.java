/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.converter;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;

/**
 * An extended {@link MessageConverter} SPI with conversion hint support.
 *
 * <p>In case of a conversion hint being provided, the framework will call
 * these extended methods if a converter implements this interface, instead
 * of calling the regular {@code fromMessage} / {@code toMessage} variants.
 *
 * @author Juergen Hoeller
 * @since 4.2.1
 */
/**
 * 具有转换提示支持的扩展{@link  MessageConverter} SPI。 
 *  <p>在提供转换提示的情况下，如果转换器实现此接口，则框架将调用这些扩展方法，而不是调用常规的{@code  fromMessage} / {@code  toMessage}变体。 
 *  @author  Juergen Hoeller @始于4.2.1
 */
public interface SmartMessageConverter extends MessageConverter {

	/**
	 * A variant of {@link #fromMessage(Message, Class)} which takes an extra
	 * conversion context as an argument, allowing to take e.g. annotations
	 * on a payload parameter into account.
	 * @param message the input message
	 * @param targetClass the target class for the conversion
	 * @param conversionHint an extra object passed to the {@link MessageConverter},
	 * e.g. the associated {@code MethodParameter} (may be {@code null}}
	 * @return the result of the conversion, or {@code null} if the converter cannot
	 * perform the conversion
	 * @see #fromMessage(Message, Class)
	 */
	/**
	 * {@link  #fromMessage（Message，Class）}的变体，以额外的转换上下文作为参数，例如将有效载荷参数上的注释考虑在内。 
	 *  
	 * @param 消息输入消息
	 * @param  targetClass转换的目标类
	 * @param  conversion提示传递给{@link  MessageConverter}的额外对象，例如关联的{@code  MethodParameter}（可能为{@code  null}} 
	 * @return 转换的结果，如果转换程序无法执行转换，则为{@code  null} 
	 * @see ＃ fromMessage（消息，类）
	 */
	@Nullable
	Object fromMessage(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint);

	/**
	 * A variant of {@link #toMessage(Object, MessageHeaders)} which takes an extra
	 * conversion context as an argument, allowing to take e.g. annotations
	 * on a return type into account.
	 * @param payload the Object to convert
	 * @param headers optional headers for the message (may be {@code null})
	 * @param conversionHint an extra object passed to the {@link MessageConverter},
	 * e.g. the associated {@code MethodParameter} (may be {@code null}}
	 * @return the new message, or {@code null} if the converter does not support the
	 * Object type or the target media type
	 * @see #toMessage(Object, MessageHeaders)
	 */
	/**
	 * {@link  #toMessage（Object，MessageHeaders）}的变体，它以额外的转换上下文作为参数，例如考虑到返回类型的注释。 
	 *  
	 * @param 负载要转换的对象
	 * @param 标头消息的可选标头（可能是{@code  null}）
	 * @param  conversionHint传递给{@link  MessageConverter}的额外对象，例如关联的{@code  MethodParameter}（可以是{@code  null}} 
	 * @return 新消息，如果转换器不支持对象类型或目标媒体类型，则可以为{@code  null} 
	 * @see  #toMessage（Object，MessageHeaders）
	 */
	@Nullable
	Message<?> toMessage(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint);

}
