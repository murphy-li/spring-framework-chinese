/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;

/**
 * Operations for sending messages to and receiving the reply from a destination.
 *
 * @author Mark Fisher
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <D> the type of destination
 * @see GenericMessagingTemplate
 */
/**
 * 向目的地发送消息和从目的地接收答复的操作。 
 *  @author  Mark Fisher @author  Rossen Stoyanchev @从4.0起
 * @param  <D>目标类型
 * @see  GenericMessagingTemplate
 */
public interface MessageRequestReplyOperations<D> {

	/**
	 * Send a request message and receive the reply from a default destination.
	 * @param requestMessage the message to send
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 */
	/**
	 * 发送请求消息并接收来自默认目标的答复。 
	 *  
	 * @param  requestMessage消息以发送
	 * @return 答复的消息，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException;

	/**
	 * Send a request message and receive the reply from the given destination.
	 * @param destination the target destination
	 * @param requestMessage the message to send
	 * @return the reply, possibly {@code null} if the message could not be received,
	 * for example due to a timeout
	 */
	/**
	 * 发送请求消息并接收来自给定目标的答复。 
	 *  
	 * @param 目的地目标目的地
	 * @param  request向消息发送消息以发送
	 * @return 答复，如果由于超时等原因无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter}, send
	 * it as a {@link Message} to a default destination, receive the reply and convert
	 * its body of the specified target class.
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其作为{@link  Message}发送到默认目标，接收答复并转换其指定目标类的主体。 
	 * 请求消息的
	 * @param 请求有效载荷，以向
	 * @param  targetClass发送目标类型，以将回复的有效载荷转换为
	 * @return 回复消息的有效载荷，如果消息为{@code  null}无法接收，例如由于超时
	 */
	@Nullable
	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter}, send
	 * it as a {@link Message} to the given destination, receive the reply and convert
	 * its body of the specified target class.
	 * @param destination the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其作为{@link  Message}发送到给定的目的地，接收答复并转换其指定目标类的主体。 
	 *  
	 * @param 目的地目标目的地
	 * @param 请求消息的有效载荷发送给
	 * @param  targetClass目标类型以将回复的有效载荷转换为
	 * @return 回复消息的有效载荷，可能是{@code  null}，例如由于超时而无法接收到消息
	 */
	@Nullable
	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter}, send
	 * it as a {@link Message} with the given headers, to the specified destination,
	 * receive the reply and convert its body of the specified target class.
	 * @param destination the target destination
	 * @param request payload for the request message to send
	 * @param headers headers for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其作为带有给定标头的{@link  Message}发送到指定目的地，接收回复并转换其为指定目标类的主体。 
	 *  
	 * @param 目标目标目标
	 * @param 请求消息的有效负载发送
	 * @param 标头请求消息的头部发送
	 * @param  targetClass目标类型目标类型将回复的有效负载转换为<@返回>回复消息的有效负载，如果由于超时等原因无法接收到该消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(
			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)
			throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * apply the given post processor and send the resulting {@link Message} to a
	 * default destination, receive the reply and convert its body of the given
	 * target class.
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @param requestPostProcessor post process to apply to the request message
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，应用给定的后处理器并将产生的{@link  Message}发送到默认目的地，接收答复并转换其给定目标类的主体。 
	 *  
	 * @param 请求消息的有效负载，将
	 * @param  targetClass发送给目标类型，以将回复的有效负载转换为
	 * @param  requestPostProcessor后处理，以应用于请求消息
	 * @return 回复的有效负载消息，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(
			Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor)
			throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * apply the given post processor and send the resulting {@link Message} to the
	 * given destination, receive the reply and convert its body of the given
	 * target class.
	 * @param destination the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @param requestPostProcessor post process to apply to the request message
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，应用给定的后处理器并将产生的{@link  Message}发送到给定的目的地，接收答复并转换其给定目标类的主体。 
	 *  
	 * @param 目标目标目标
	 * @param 请求消息的有效载荷发送给
	 * @param  targetClass目标类型，以将回复的有效载荷转换为
	 * @param  requestPostProcessor后期处理以应用于请求消息
	 * @return 回复消息的有效负载，如果由于超时等原因无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,
			MessagePostProcessor requestPostProcessor) throws MessagingException;

	/**
	 * Convert the given request Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post processor
	 * and send the resulting {@link Message} to the specified destination, receive
	 * the reply and convert its body of the given target class.
	 * @param destination the target destination
	 * @param request payload for the request message to send
	 * @param targetClass the target type to convert the payload of the reply to
	 * @param requestPostProcessor post process to apply to the request message
	 * @return the payload of the reply message, possibly {@code null} if the message
	 * could not be received, for example due to a timeout
	 */
	/**
	 * 将给定的请求对象转换为序列化形式，可能使用{@link  org.springframework.messaging.converter.MessageConverter}，将其包装为带有给定标头的消息，应用给定后处理器并发送结果{<@link> Message}到指定的目标，接收答复并转换其给定目标类的主体。 
	 *  
	 * @param 目标目标目标
	 * @param 请求消息的有效载荷发送给
	 * @param  targetClass目标类型，以将回复的有效载荷转换为
	 * @param  requestPostProcessor后期处理以应用于请求消息
	 * @return 回复消息的有效负载，如果由于超时等原因无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(
			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass,
			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException;

}
