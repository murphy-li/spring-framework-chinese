/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

/**
 * Strategy for resolving a String destination name to an actual destination
 * of type {@code <D>}.
 *
 * @author Mark Fisher
 * @since 4.0
 * @param <D> the destination type
 */
/**
 * 将字符串目标名称解析为{@code  <D>}类型的实际目标的策略。 
 *  @author  Mark Fisher @始于4.0 
 * @param  <D>目标类型
 */
@FunctionalInterface
public interface DestinationResolver<D> {

	/**
	 * Resolve the given destination name.
	 * @param name the destination name to resolve
	 * @return the resolved destination (never {@code null})
	 * @throws DestinationResolutionException if the specified destination
	 * wasn't found or wasn't resolvable for any other reason
	 */
	/**
	 * 解析给定的目的地名称。 
	 *  
	 * @param 命名要解析的目标名称
	 * @return 解析的目标（永远{@code  null}）
	 * @throws  DestinationResolutionException如果找不到指定的目标或由于任何其他原因无法解析指定的目标
	 */
	D resolveDestination(String name) throws DestinationResolutionException;

}
