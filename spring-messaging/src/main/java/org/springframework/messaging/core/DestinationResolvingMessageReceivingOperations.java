/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;

/**
 * Extends {@link MessageReceivingOperations} and adds operations for receiving messages
 * from a destination specified as a (resolvable) String name.
 *
 * @author Mark Fisher
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <D> the type of destination to receive messages from
 * @see DestinationResolver
 */
/**
 * 扩展{@link  MessageReceivingOperations}并添加用于从指定为（可解析的）字符串名称的目标接收消息的操作。 
 *  @author  Mark Fisher @author  Rossen Stoyanchev @从4.0起
 * @param  <D>从
 * @see  DestinationResolver接收消息的目的地类型
 */
public interface DestinationResolvingMessageReceivingOperations<D> extends MessageReceivingOperations<D> {

	/**
	 * Resolve the given destination name and receive a message from it.
	 * @param destinationName the destination name to resolve
	 */
	/**
	 * 解析给定的目的地名称，并从中接收消息。 
	 *  
	 * @param  destinationName要解析的目标名称
	 */
	@Nullable
	Message<?> receive(String destinationName) throws MessagingException;

	/**
	 * Resolve the given destination name, receive a message from it,
	 * convert the payload to the specified target type.
	 * @param destinationName the destination name to resolve
	 * @param targetClass the target class for the converted payload
	 */
	/**
	 * 解析给定的目标名称，从中接收消息，将有效负载转换为指定的目标类型。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param  targetClass转换后的有效负载的目标类
	 */
	@Nullable
	<T> T receiveAndConvert(String destinationName, Class<T> targetClass) throws MessagingException;

}
