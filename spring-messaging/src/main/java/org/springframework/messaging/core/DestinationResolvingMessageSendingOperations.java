/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;

/**
 * Extends {@link MessageSendingOperations} and adds operations for sending messages
 * to a destination specified as a (resolvable) String name.
 *
 * @author Mark Fisher
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <D> the destination type
 * @see DestinationResolver
 */
/**
 * 扩展{@link  MessageSendingOperations}并添加用于将消息发送到指定为（可解析的）字符串名称的目标的操作。 
 *  @author  Mark Fisher @author  Rossen Stoyanchev @从4.0开始
 * @param  <D>目标类型
 * @see  DestinationResolver
 */
public interface DestinationResolvingMessageSendingOperations<D> extends MessageSendingOperations<D> {

	/**
	 * Resolve the given destination name to a destination and send a message to it.
	 * @param destinationName the destination name to resolve
	 * @param message the message to send
	 */
	/**
	 * 将给定的目的地名称解析为目的地，然后向其发送消息。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param 消息要发送的消息
	 */
	void send(String destinationName, Message<?> message) throws MessagingException;

	/**
	 * Resolve the given destination name to a destination, convert the payload Object
	 * to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message and send it to the resolved destination.
	 * @param destinationName the destination name to resolve
   	 * @param payload the Object to use as payload
	 */
	/**
	 * 将给定的目的地名称解析为目的地，可以使用{@link  org.springframework.messaging.converter.MessageConverter}将有效负载对象转换为序列化形式，将其包装为消息并将其发送到解析的目的地。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param 有效负载用作有效负载的对象
	 */
	<T> void convertAndSend(String destinationName, T payload) throws MessagingException;

	/**
	 * Resolve the given destination name to a destination, convert the payload
	 * Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers and send it to the resolved
	 * destination.
	 * @param destinationName the destination name to resolve
	 * @param payload the Object to use as payload
 	 * @param headers headers for the message to send
	 */
	/**
	 * 将给定的目的地名称解析为目的地，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效负载对象转换为序列化形式，将其包装为带有给定标头的消息，并将其发送给已解决的目的地。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param 有效负载用作有效负载的对象
	 * @param 标头用于发送消息的标头
	 */
	<T> void convertAndSend(String destinationName, T payload, @Nullable Map<String, Object> headers)
			throws MessagingException;

	/**
	 * Resolve the given destination name to a destination, convert the payload
	 * Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message, apply the given post processor, and send the resulting
	 * message to the resolved destination.
	 * @param destinationName the destination name to resolve
	 * @param payload the Object to use as payload
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 将给定的目的地名称解析为目的地，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效负载对象转换为序列化形式，将其包装为消息，应用给定的后处理器，然后发送结果消息发送到已解决的目标。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param 有效负载用作有效负载的对象
	 * @param  postProcessor后处理器应用于消息
	 */
	<T> void convertAndSend(String destinationName, T payload, @Nullable MessagePostProcessor postProcessor)
			throws MessagingException;

	/**
	 * Resolve the given destination name to a destination, convert the payload
	 * Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post processor,
	 * and send the resulting message to the resolved destination.
	 * @param destinationName the destination name to resolve
	 * @param payload the Object to use as payload
	 * @param headers headers for the message to send
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 将给定的目的地名称解析为目的地，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效载荷对象转换为序列化形式，将其包装为带有给定标头的消息，应用给定帖子处理程序，然后将结果消息发送到已解决的目标。 
	 *  
	 * @param  destinationName要解析的目标名称
	 * @param 有效负载用作有效负载的对象
	 * @param 标头消息的标头发送给
	 * @param  postProcessor后处理器以应用于消息
	 */
	<T> void convertAndSend(String destinationName, T payload, @Nullable Map<String, Object> headers,
			@Nullable MessagePostProcessor postProcessor) throws MessagingException;

}
