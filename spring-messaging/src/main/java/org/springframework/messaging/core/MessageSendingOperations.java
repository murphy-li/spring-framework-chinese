/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;

/**
 * Operations for sending messages to a destination.
 *
 * @author Mark Fisher
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <D> the destination type
 */
/**
 * 将消息发送到目的地的操作。 
 *  @author  Mark Fisher @author  Rossen Stoyanchev @从4.0开始
 * @param  <D>目标类型
 */
public interface MessageSendingOperations<D> {

	/**
	 * Send a message to a default destination.
	 * @param message the message to send
	 */
	/**
	 * 将消息发送到默认目的地。 
	 *  
	 * @param 消息要发送的消息
	 */
	void send(Message<?> message) throws MessagingException;

	/**
	 * Send a message to the given destination.
	 * @param destination the target destination
	 * @param message the message to send
	 */
	/**
	 * 发送消息到给定的目的地。 
	 *  
	 * @param 目标目标目标
	 * @param 消息要发送的消息
	 */
	void send(D destination, Message<?> message) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message and send it to a default destination.
	 * @param payload the Object to use as payload
	 */
	/**
	 * 可以使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为消息并将其发送到默认目的地。 
	 *  
	 * @param 有效负载用作有效负载的对象
	 */
	void convertAndSend(Object payload) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message and send it to the given destination.
	 * @param destination the target destination
	 * @param payload the Object to use as payload
	 */
	/**
	 * 可以使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为消息并将其发送到给定的目的地。 
	 *  
	 * @param 目标目标目标
	 * @param 有效负载用作有效负载的对象
	 */
	void convertAndSend(D destination, Object payload) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers and send it to
	 * the given destination.
	 * @param destination the target destination
	 * @param payload the Object to use as payload
	 * @param headers headers for the message to send
	 */
	/**
	 * 可以使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为带有给定标头的消息，然后将其发送到给定的目的地。 
	 *  
	 * @param 目标目标目标
	 * @param 有效负载用作有效负载的对象
	 * @param 标头用于发送消息的标头
	 */
	void convertAndSend(D destination, Object payload, Map<String, Object> headers) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message, apply the given post processor, and send
	 * the resulting message to a default destination.
	 * @param payload the Object to use as payload
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 可能使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的对象转换为序列化形式，将其包装为消息，应用给定的后处理器，然后将结果消息发送到默认目的地。 
	 *  
	 * @param 负载用作负载的对象
	 * @param  postProcessor应用于消息的后处理器
	 */
	void convertAndSend(Object payload, @Nullable MessagePostProcessor postProcessor) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message, apply the given post processor, and send
	 * the resulting message to the given destination.
	 * @param destination the target destination
	 * @param payload the Object to use as payload
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 可能使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的对象转换为序列化形式，将其包装为消息，应用给定的后处理器，然后将结果消息发送到给定的目的地。 
	 *  
	 * @param 目标目标目标
	 * @param 有效负载用作有效负载的对象
	 * @param  postProcessor后处理器应用于消息
	 */
	void convertAndSend(D destination, Object payload, MessagePostProcessor postProcessor) throws MessagingException;

	/**
	 * Convert the given Object to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post processor,
	 * and send the resulting message to the given destination.
	 * @param destination the target destination
	 * @param payload the Object to use as payload
	 * @param headers headers for the message to send
	 * @param postProcessor the post processor to apply to the message
	 */
	/**
	 * 可能使用{@link  org.springframework.messaging.converter.MessageConverter}将给定的Object转换为序列化形式，将其包装为带有给定标头的消息，应用给定后处理器，然后将结果消息发送给给定的目的地。 
	 *  
	 * @param 目标目标目标
	 * @param 有效负载用作有效负载的对象
	 * @param 标头消息的标头发送给
	 * @param  postProcessor后处理器以应用于消息
	 */
	void convertAndSend(D destination, Object payload, @Nullable Map<String, Object> headers,
			@Nullable MessagePostProcessor postProcessor) throws MessagingException;

}
