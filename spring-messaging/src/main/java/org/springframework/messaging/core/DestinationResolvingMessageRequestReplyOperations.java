/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.core;

import java.util.Map;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessagingException;

/**
 * Extends {@link MessageRequestReplyOperations} and adds operations for sending and
 * receiving messages to and from a destination specified as a (resolvable) String name.
 *
 * @author Mark Fisher
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <D> the destination type
 * @see DestinationResolver
 */
/**
 * 扩展{@link  MessageRequestReplyOperations}，并添加用于向和从指定为（可解析的）字符串名称的目标发送和接收消息的操作。 
 *  @author  Mark Fisher @author  Rossen Stoyanchev @从4.0开始
 * @param  <D>目标类型
 * @see  DestinationResolver
 */
public interface DestinationResolvingMessageRequestReplyOperations<D> extends MessageRequestReplyOperations<D> {

	/**
	 * Resolve the given destination name to a destination and send the given message,
	 * receive a reply and return it.
	 * @param destinationName the name of the target destination
	 * @param requestMessage the message to send
	 * @return the received message, possibly {@code null} if the message could not
	 * be received, for example due to a timeout
	 */
	/**
	 * 将给定的目的地名称解析为目的地，然后发送给定的消息，接收答复并返回。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param  requestMessage发送消息的消息，以
	 * @return 接收到的消息，如果由于超时等原因而无法接收到该消息，则可能为{@code  null}
	 */
	@Nullable
	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException;

	/**
	 * Resolve the given destination name, convert the payload request Object
	 * to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message and send it to the resolved destination, receive a reply
	 * and convert its body to the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request the payload for the request message to send
	 * @param targetClass the target class to convert the payload of the reply to
	 * @return the converted payload of the reply message, possibly {@code null} if
	 * the message could not be received, for example due to a timeout
	 */
	/**
	 * 解析给定的目的地名称，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效载荷请求对象转换为序列化形式，将其包装为消息并将其发送到解析的目的地，得到回复并将其主体转换为指定的目标类。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param 请求请求消息的有效负载，以发送
	 * @param  targetClass目标类，将回复的有效负载转换为
	 * @return 转换后的回复有效负载消息，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass)
			throws MessagingException;

	/**
	 * Resolve the given destination name, convert the payload request Object
	 * to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers and send it to the resolved destination,
	 * receive a reply and convert its body to the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request the payload for the request message to send
	 * @param headers the headers for the request message to send
	 * @param targetClass the target class to convert the payload of the reply to
	 * @return the converted payload of the reply message, possibly {@code null} if
	 * the message could not be received, for example due to a timeout
	 */
	/**
	 * 解析给定的目的地名称，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效载荷请求对象转换为序列化形式，将其包装为带有给定标头的消息，并将其发送到解析的目的地，收到答复并将其主体转换为指定的目标类。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 请求请求消息的有效载荷发送
	 * @param 标头请求消息的头部发送
	 * @param  targetClass目标类以转换目标载荷对
	 * @return 的转换后的有效负载的回复，如果由于超时等原因而无法接收到该消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request,
			@Nullable Map<String, Object> headers, Class<T> targetClass) throws MessagingException;

	/**
	 * Resolve the given destination name, convert the payload request Object
	 * to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message, apply the given post process, and send the resulting
	 * message to the resolved destination, then receive a reply and convert its
	 * body to the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request the payload for the request message to send
	 * @param targetClass the target class to convert the payload of the reply to
	 * @param requestPostProcessor post process for the request message
	 * @return the converted payload of the reply message, possibly {@code null} if
	 * the message could not be received, for example due to a timeout
	 */
	/**
	 * 解析给定的目的地名称，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效载荷请求对象转换为序列化形式，将其包装为消息，应用给定的后期处理，然后发送结果消息发送到已解决的目标，然后接收答复并将其主体转换为指定的目标类。 
	 *  
	 * @param  destinationName目标目的地的名称
	 * @param 请求请求消息的有效负载以发送
	 * @param  targetClass目标类，以将回复的有效负载转换为请求的
	 * @param  requestPostProcessor后处理消息
	 * @return 转换后的回复消息的有效负载，如果由于超时等原因而无法接收到消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,
			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException;

	/**
	 * Resolve the given destination name, convert the payload request Object
	 * to serialized form, possibly using a
	 * {@link org.springframework.messaging.converter.MessageConverter},
	 * wrap it as a message with the given headers, apply the given post process,
	 * and send the resulting message to the resolved destination, then receive
	 * a reply and convert its body to the specified target class.
	 * @param destinationName the name of the target destination
	 * @param request the payload for the request message to send
	 * @param headers the headers for the request message to send
	 * @param targetClass the target class to convert the payload of the reply to
	 * @param requestPostProcessor post process for the request message
	 * @return the converted payload of the reply message, possibly {@code null} if
	 * the message could not be received, for example due to a timeout
	 */
	/**
	 * 解析给定的目的地名称，可能使用{@link  org.springframework.messaging.converter.MessageConverter}将有效载荷请求对象转换为序列化形式，将其包装为带有给定标头的消息，应用给定的发布过程，并将结果消息发送到已解决的目标，然后接收答复并将其正文转换为指定的目标类。 
	 *  
	 * @param  destinationName目标目标的名称
	 * @param 请求请求消息的有效载荷发送
	 * @param 标头请求消息的头部发送
	 * @param  targetClass目标类以转换目标载荷对请求消息
	 * @return 的转换后的有效负载，对
	 * @param  requestPostProcessor后期处理的答复，如果由于超时等原因而无法接收到该消息，则可能为{@code  null}
	 */
	@Nullable
	<T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers,
			Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) throws MessagingException;

}
