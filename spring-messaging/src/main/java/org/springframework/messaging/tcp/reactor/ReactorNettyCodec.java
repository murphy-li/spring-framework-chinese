/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */
package org.springframework.messaging.tcp.reactor;

import java.util.Collection;
import java.util.function.BiConsumer;
import java.util.function.Function;

import io.netty.buffer.ByteBuf;

import org.springframework.messaging.Message;

/**
 * Simple holder for a decoding {@link Function} and an encoding
 * {@link BiConsumer} to use with Reactor Netty.
 *
 * @author Rossen Stoyanchev
 * @since 5.0
 * @param <P> the message payload type
 */
/**
 * 用于解码{@link  Function}和编码{@link  BiConsumer}的简单持有者，可与Reactor Netty一起使用。 
 *  @author  Rossen Stoyanchev @从5.0开始
 * @param  <P>消息有效负载类型
 */
public interface ReactorNettyCodec<P> {

	/**
	 * Decode the input {@link ByteBuf} into one or more {@link Message Messages}.
	 * @param inputBuffer the input buffer to decode from
	 * @return 0 or more decoded messages
	 */
	/**
	 * 将输入{@link  ByteBuf}解码为一个或多个{@link  Message Messages}。 
	 *  
	 * @param  inputBuffer要从
	 * @return 进行解码的0或更多已解码消息的输入缓冲区
	 */
	Collection<Message<P>> decode(ByteBuf inputBuffer);

	/**
	 * Encode the given {@link Message} to the output {@link ByteBuf}.
	 * @param message the message to encode
	 * @param outputBuffer the buffer to write to
	 */
	/**
	 * 将给定的{@link 消息}编码到输出{@link  ByteBuf}。 
	 *  
	 * @param 消息消息编码
	 * @param  outputBuffer写入缓冲区
	 */
	void encode(Message<P> message, ByteBuf outputBuffer);

}
