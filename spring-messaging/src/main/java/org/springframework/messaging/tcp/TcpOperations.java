/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.tcp;

import org.springframework.util.concurrent.ListenableFuture;

/**
 * A contract for establishing TCP connections.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <P> the type of payload for in and outbound messages
 */
/**
 * 建立TCP连接的合同。 
 *  @author  Rossen Stoyanchev @从4.0开始
 * @param  <P>入站和出站邮件的有效负载类型
 */
public interface TcpOperations<P> {

	/**
	 * Open a new connection.
	 * @param connectionHandler a handler to manage the connection
	 * @return a ListenableFuture that can be used to determine when and if the
	 * connection is successfully established
	 */
	/**
	 * 打开一个新的连接。 
	 *  
	 * @param  connectionHandler用于管理连接的处理程序
	 * @return 一个ListenableFuture，可用于确定何时以及是否成功建立连接
	 */
	ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler);

	/**
	 * Open a new connection and a strategy for reconnecting if the connection fails.
	 * @param connectionHandler a handler to manage the connection
	 * @param reconnectStrategy a strategy for reconnecting
	 * @return a ListenableFuture that can be used to determine when and if the
	 * initial connection is successfully established
	 */
	/**
	 * 打开一个新的连接，以及在连接失败时重新连接的策略。 
	 *  
	 * @param  connectionHandler用于管理连接的处理程序
	 * @param  reconnectStrategy用于重新连接
	 * @return  ListenableFuture的策略，可用于确定何时以及是否成功建立初始连接
	 */
	ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy reconnectStrategy);

	/**
	 * Shut down and close any open connections.
	 * @return a ListenableFuture that can be used to determine when and if the
	 * connection is successfully closed
	 */
	/**
	 * 关闭并关闭所有打开的连接。 
	 *  
	 * @return 一个ListenableFuture，可用于确定何时以及是否成功关闭连接
	 */
	ListenableFuture<Void> shutdown();

}
