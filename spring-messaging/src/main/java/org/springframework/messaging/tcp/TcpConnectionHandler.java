/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.tcp;

import org.springframework.messaging.Message;

/**
 * A contract for managing lifecycle events for a TCP connection including
 * the handling of incoming messages.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 * @param <P> the type of payload for in and outbound messages
 */
/**
 * 用于管理TCP连接的生命周期事件（包括处理传入消息）的合同。 
 *  @author  Rossen Stoyanchev @从4.0开始
 * @param  <P>入站和出站邮件的有效负载类型
 */
public interface TcpConnectionHandler<P> {

	/**
	 * Invoked after a connection is successfully established.
	 * @param connection the connection
	 */
	/**
	 * 成功建立连接后调用。 
	 *  
	 * @param 连接连接
	 */
	void afterConnected(TcpConnection<P> connection);

	/**
	 * Invoked on failure to connect.
	 * @param ex the exception
	 */
	/**
	 * 在连接失败时调用。 
	 *  
	 * @param 除例外
	 */
	void afterConnectFailure(Throwable ex);

	/**
	 * Handle a message received from the remote host.
	 * @param message the message
	 */
	/**
	 * 处理从远程主机收到的消息。 
	 *  
	 * @param 向消息发送消息
	 */
	void handleMessage(Message<P> message);

	/**
	 * Handle a failure on the connection.
	 * @param ex the exception
	 */
	/**
	 * 处理连接失败。 
	 *  
	 * @param 除例外
	 */
	void handleFailure(Throwable ex);

	/**
	 * Invoked after the connection is closed.
	 */
	/**
	 * 关闭连接后调用。 
	 * 
	 */
	void afterConnectionClosed();

}
