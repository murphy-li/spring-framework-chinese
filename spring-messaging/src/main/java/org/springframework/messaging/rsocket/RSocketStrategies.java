/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.rsocket;

import java.util.List;
import java.util.function.Consumer;

import io.rsocket.Payload;
import io.rsocket.RSocketFactory.ClientRSocketFactory;
import io.rsocket.RSocketFactory.ServerRSocketFactory;

import org.springframework.core.ReactiveAdapterRegistry;
import org.springframework.core.ResolvableType;
import org.springframework.core.codec.Decoder;
import org.springframework.core.codec.Encoder;
import org.springframework.core.io.buffer.DataBufferFactory;
import org.springframework.core.io.buffer.DefaultDataBufferFactory;
import org.springframework.core.io.buffer.NettyDataBufferFactory;
import org.springframework.lang.Nullable;
import org.springframework.util.AntPathMatcher;
import org.springframework.util.MimeType;
import org.springframework.util.RouteMatcher;
import org.springframework.util.SimpleRouteMatcher;

/**
 * Access to strategies for use by RSocket requester and responder components.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 */
/**
 * 访问由RSocket请求者和响应者组件使用的策略。 
 *  @author  Rossen Stoyanchev @从5.2开始
 */
public interface RSocketStrategies {

	/**
	 * Return the configured {@link Builder#encoder(Encoder[]) encoders}.
	 * @see #encoder(ResolvableType, MimeType)
	 */
	/**
	 * 返回已配置的{@link  Builder＃encoder（Encoder []）编码器}。 
	 *  
	 * @see  #encoder（ResolvableType，MimeType）
	 */
	List<Encoder<?>> encoders();

	/**
	 * Find a compatible Encoder for the given element type.
	 * @param elementType the element type to match
	 * @param mimeType the MimeType to match
	 * @param <T> for casting the Encoder to the expected element type
	 * @return the matching Encoder
	 * @throws IllegalArgumentException if no matching Encoder is found
	 */
	/**
	 * 查找给定元素类型的兼容编码器。 
	 *  
	 * @param  elementType要匹配的元素类型
	 * @param  mimeType要匹配的MimeType 
	 * @param  <T>用于将编码器转换为期望的元素类型
	 * @return 匹配的编码器
	 * @throws  IllegalArgumentException如果没有匹配项找到编码器
	 */
	@SuppressWarnings("unchecked")
	default <T> Encoder<T> encoder(ResolvableType elementType, @Nullable MimeType mimeType) {
		for (Encoder<?> encoder : encoders()) {
			if (encoder.canEncode(elementType, mimeType)) {
				return (Encoder<T>) encoder;
			}
		}
		throw new IllegalArgumentException("No encoder for " + elementType);
	}

	/**
	 * Return the configured {@link Builder#decoder(Decoder[]) decoders}.
	 * @see #decoder(ResolvableType, MimeType)
	 */
	/**
	 * 返回已配置的{@link  Builder＃decoder（Decoder []）解码器}。 
	 *  
	 * @see  #decoder（ResolvableType，MimeType）
	 */
	List<Decoder<?>> decoders();

	/**
	 * Find a compatible Decoder for the given element type.
	 * @param elementType the element type to match
	 * @param mimeType the MimeType to match
	 * @param <T> for casting the Decoder to the expected element type
	 * @return the matching Decoder
	 * @throws IllegalArgumentException if no matching Decoder is found
	 */
	/**
	 * 查找给定元素类型的兼容解码器。 
	 *  
	 * @param  elementType要匹配的元素类型
	 * @param  mimeType要匹配的MimeType 
	 * @param  <T>用于将Decoder强制转换为期望的元素类型
	 * @return 匹配的Decoder 
	 * @throws  IllegalArgumentException如果没有匹配项找到解码器
	 */
	@SuppressWarnings("unchecked")
	default <T> Decoder<T> decoder(ResolvableType elementType, @Nullable MimeType mimeType) {
		for (Decoder<?> decoder : decoders()) {
			if (decoder.canDecode(elementType, mimeType)) {
				return (Decoder<T>) decoder;
			}
		}
		throw new IllegalArgumentException("No decoder for " + elementType);
	}

	/**
	 * Return the configured {@link Builder#routeMatcher(RouteMatcher)}.
	 */
	/**
	 * 返回已配置的{@link  Builder＃routeMatcher（RouteMatcher）}。 
	 * 
	 */
	RouteMatcher routeMatcher();

	/**
	 * Return the configured
	 * {@link Builder#reactiveAdapterStrategy(ReactiveAdapterRegistry) reactiveAdapterRegistry}.
	 */
	/**
	 * 返回已配置的{@link  Builder＃reactiveAdapterStrategy（ReactiveAdapterRegistry）reactAdapterRegistry}。 
	 * 
	 */
	ReactiveAdapterRegistry reactiveAdapterRegistry();

	/**
	 * Return the configured
	 * {@link Builder#dataBufferFactory(DataBufferFactory) dataBufferFactory}.
	 */
	/**
	 * 返回已配置的{@link  Builder＃dataBufferFactory（DataBufferFactory）dataBufferFactory}。 
	 * 
	 */
	DataBufferFactory dataBufferFactory();

	/**
	 * Return the configured {@link Builder#metadataExtractor(MetadataExtractor)}.
	 */
	/**
	 * 返回配置的{@link  Builder＃metadataExtractor（MetadataExtractor）}。 
	 * 
	 */
	MetadataExtractor metadataExtractor();

	/**
	 * Return a builder to create a new {@link RSocketStrategies} instance
	 * replicated from the current instance.
	 */
	/**
	 * 返回一个构建器，以创建一个从当前实例复制的新{@link  RSocketStrategies}实例。 
	 * 
	 */
	default Builder mutate() {
		return new DefaultRSocketStrategies.DefaultRSocketStrategiesBuilder(this);
	}


	/**
	 * Create an {@code RSocketStrategies} instance with default settings.
	 * Equivalent to {@code RSocketStrategies.builder().build()}. See individual
	 * builder methods for details on default settings.
	 */
	/**
	 * 使用默认设置创建一个{@code  RSocketStrategies}实例。 
	 * 等效于{@code  RSocketStrategies.builder（）。 
	 * build（）}。 
	 * 有关缺省设置的详细信息，请参见各个构建器方法。 
	 * 
	 */
	static RSocketStrategies create() {
		return new DefaultRSocketStrategies.DefaultRSocketStrategiesBuilder().build();
	}

	/**
	 * Return a builder to prepare a new {@code RSocketStrategies} instance.
	 * The builder applies default settings, see individual builder methods for
	 * details.
	 */
	/**
	 * 返回一个构建器以准备一个新的{@code  RSocketStrategies}实例。 
	 * 该构建器将应用缺省设置，有关详细信息，请参见各个构建器方法。 
	 * 
	 */
	static Builder builder() {
		return new DefaultRSocketStrategies.DefaultRSocketStrategiesBuilder();
	}


	/**
	 * The builder options for creating {@code RSocketStrategies}.
	 */
	/**
	 * 用于创建{@code  RSocketStrategies}的构建器选项。 
	 * 
	 */
	interface Builder {

		/**
		 * Append to the list of encoders to use for serializing Objects to the
		 * data or metadata of a {@link Payload}.
		 * <p>By default this is initialized with encoders for {@code String},
		 * {@code byte[]}, {@code ByteBuffer}, and {@code DataBuffer}.
		 */
		/**
		 * 追加到用于将对象序列化为{@link 有效负载}的数据或元数据的编码器列表。 
		 *  <p>默认情况下，这是使用{@code  String}，{<@code> byte []}，{<@code> ByteBuffer}和{@code  DataBuffer}的编码器初始化的。 
		 * 
		 */
		Builder encoder(Encoder<?>... encoder);

		/**
		 * Apply the consumer to the list of configured encoders, immediately.
		 */
		/**
		 * 立即将使用者应用于已配置的编码器列表。 
		 * 
		 */
		Builder encoders(Consumer<List<Encoder<?>>> consumer);

		/**
		 * Append to the list of decoders to use for de-serializing Objects from
		 * the data or metadata of a {@link Payload}.
		 * <p>By default this is initialized with decoders for {@code String},
		 * {@code byte[]}, {@code ByteBuffer}, and {@code DataBuffer}.
		 */
		/**
		 * 附加到用于从{@link 有效负载}的数据或元数据中反序列化对象的解码器列表。 
		 *  <p>默认情况下，它使用{@code  String}，{<@code> byte []}，{<@code> ByteBuffer}和{@code  DataBuffer}的解码器进行初始化。 
		 * 
		 */
		Builder decoder(Decoder<?>... decoder);

		/**
		 * Apply the consumer to the list of configured decoders, immediately.
		 */
		/**
		 * 立即将使用者应用于已配置的解码器列表。 
		 * 
		 */
		Builder decoders(Consumer<List<Decoder<?>>> consumer);

		/**
		 * Configure a {@code RouteMatcher} for matching routes to message
		 * handlers based on route patterns. This option is applicable to
		 * client or server responders.
		 * <p>By default, {@link SimpleRouteMatcher} is used, backed by
		 * {@link AntPathMatcher} with "." as separator. For better
		 * efficiency consider switching to {@code PathPatternRouteMatcher} from
		 * {@code spring-web} instead.
		 */
		/**
		 * 配置{@code  RouteMatcher}，以根据路由模式将路由与消息处理程序匹配。 
		 * 此选项适用于客户端或服务器响应者。 
		 *  <p>默认情况下，使用{@link  SimpleRouteMatcher}，并以{@link  AntPathMatcher}为后缀。 
		 * 作为分隔符。 
		 * 为了获得更高的效率，请考虑改为从{@code  spring-web}切换到{@code  PathPatternRouteMatcher}。 
		 * 
		 */
		Builder routeMatcher(@Nullable RouteMatcher routeMatcher);

		/**
		 * Configure the registry for reactive type support. This can be used to
		 * to adapt to, and/or determine the semantics of a given
		 * {@link org.reactivestreams.Publisher Publisher}.
		 * <p>By default this {@link ReactiveAdapterRegistry#getSharedInstance()}.
		 */
		/**
		 * 配置注册表以支持反应类型。 
		 * 这可用于适应和/或确定给定的{@link  org.reactivestreams.Publisher Publisher}的语义。 
		 *  <p>默认情况下，此{@link  ReactiveAdapterRegistry＃getSharedInstance（）}。 
		 * 
		 */
		Builder reactiveAdapterStrategy(@Nullable ReactiveAdapterRegistry registry);

		/**
		 * Configure the DataBufferFactory to use for allocating buffers when
		 * preparing requests or creating responses.
		 * <p>By default this is set to {@link NettyDataBufferFactory} with
		 * pooled, allocated buffers for zero copy. RSocket must also be
		 * <a href="https://github.com/rsocket/rsocket-java#zero-copy">configured</a>
		 * for zero copy. For client setup, {@link RSocketRequester.Builder}
		 * adapts automatically to the {@code DataBufferFactory} configured
		 * here, and sets the frame decoder in {@link ClientRSocketFactory
		 * ClientRSocketFactory} accordingly. For server setup, the
		 * {@link ServerRSocketFactory ServerRSocketFactory} must be configured
		 * accordingly for zero copy too.
		 * <p>If using {@link DefaultDataBufferFactory} instead, there is no
		 * need for related config changes in RSocket.
		 */
		/**
		 * 将DataBufferFactory配置为在准备请求或创建响应时用于分配缓冲区。 
		 *  <p>默认情况下，此参数设置为{@link  NettyDataBufferFactory}，其中包含分配给零拷贝的缓冲池。 
		 * 必须对RSocket进行<a href="https://github.com/rsocket/rsocket-java#zero-copy">配置</a>，以实现零拷贝。 
		 * 对于客户端设置，{@link  RSocketRequester.Builder}会自动适应此处配置的{@code  DataBufferFactory}，并在{@link  ClientRSocketFactory ClientRSocketFactory}中设置帧解码器。 
		 * 对于服务器设置，{<@link> ServerRSocketFactory ServerRSocketFactory}也必须相应地配置为零拷贝。 
		 *  <p>如果改为使用{@link  DefaultDataBufferFactory}，则无需在RSocket中进行相关的配置更改。 
		 * 
		 */
		Builder dataBufferFactory(@Nullable DataBufferFactory bufferFactory);

		/**
		 * Configure a {@link MetadataExtractor} to extract the route along with
		 * other metadata. This option is applicable to client or server
		 * responders.
		 * <p>By default this is {@link DefaultMetadataExtractor} created with
		 * the {@link #decoder(Decoder[]) configured} decoders and extracting a
		 * route from {@code "message/x.rsocket.routing.v0"} metadata.
		 */
		/**
		 * 配置{@link  MetadataExtractor}以提取路由以及其他元数据。 
		 * 此选项适用于客户端或服务器响应者。 
		 *  <p>默认情况下，这是{@link  DefaultMetadataExtractor}，它是使用{@link  #decoder（Decoder []）配置}解码器创建的，并从{@code "message / x.rsocket.routing中提取路由.v0"}元数据。 
		 * 
		 */
		Builder metadataExtractor(@Nullable MetadataExtractor metadataExtractor);

		/**
		 * Apply the consumer to the {@link MetadataExtractorRegistry} in order
		 * to register extra metadata entry extractors.
		 */
		/**
		 * 将使用者应用于{@link  MetadataExtractorRegistry}，以便注册额外的元数据条目提取器。 
		 * 
		 */
		Builder metadataExtractorRegistry(Consumer<MetadataExtractorRegistry> consumer);

		/**
		 * Build the {@code RSocketStrategies} instance.
		 */
		/**
		 * 生成{@code  RSocketStrategies}实例。 
		 * 
		 */
		RSocketStrategies build();
	}

}
