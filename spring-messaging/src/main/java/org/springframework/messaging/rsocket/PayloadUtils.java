/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.rsocket;

import java.nio.ByteBuffer;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.rsocket.Payload;
import io.rsocket.util.ByteBufPayload;
import io.rsocket.util.DefaultPayload;

import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferFactory;
import org.springframework.core.io.buffer.DefaultDataBuffer;
import org.springframework.core.io.buffer.NettyDataBuffer;
import org.springframework.core.io.buffer.NettyDataBufferFactory;

/**
 * Static utility methods to create {@link Payload} from {@link DataBuffer}s
 * and vice versa.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 */
/**
 * 静态实用程序方法可从{@link  DataBuffer}创建{@link  Payload}，反之亦然。 
 *  @author  Rossen Stoyanchev @从5.2开始
 */
public abstract class PayloadUtils {

	/**
	 * Use this method to slice, retain and wrap the data portion of the
	 * {@code Payload}, and also to release the {@code Payload}. This assumes
	 * the Payload metadata has been read by now and ensures downstream code
	 * need only be aware of {@code DataBuffer}s.
	 * @param payload the payload to process
	 * @param bufferFactory the DataBufferFactory to wrap with
	 * @return the created {@code DataBuffer} instance
	 */
	/**
	 * 使用此方法可以切片，保留和包装{@code 有效负载}的数据部分，还可以释放{@code 有效负载}。 
	 * 假设现在已经读取了有效负载元数据，并确保下游代码仅需要知道{@code  DataBuffer}。 
	 *  
	 * @param 有效负载要处理的有效负载
	 * @param  bufferFactory DataBufferFactory要包装后用
	 * @return 创建的{@code  DataBuffer}实例包装
	 */
	public static DataBuffer retainDataAndReleasePayload(Payload payload, DataBufferFactory bufferFactory) {
		try {
			if (bufferFactory instanceof NettyDataBufferFactory) {
				ByteBuf byteBuf = payload.sliceData().retain();
				return ((NettyDataBufferFactory) bufferFactory).wrap(byteBuf);
			}
			else {
				return bufferFactory.wrap(payload.getData());
			}
		}
		finally {
			if (payload.refCnt() > 0) {
				payload.release();
			}
		}
	}

	/**
	 * Create a Payload from the given metadata and data.
	 * <p>If at least one is {@link NettyDataBuffer} then {@link ByteBufPayload}
	 * is created with either obtaining the underlying native {@link ByteBuf}
	 * or using {@link Unpooled#wrappedBuffer(ByteBuffer...)} if necessary.
	 * Otherwise, if both are {@link DefaultDataBuffer}, then
	 * {@link DefaultPayload} is created.
	 * @param data the data part for the payload
	 * @param metadata the metadata part for the payload
	 * @return the created payload
	 */
	/**
	 * 根据给定的元数据和数据创建有效负载。 
	 *  <p>如果至少一个是{@link  NettyDataBuffer}，则通过获取基础本机{@link  ByteBuf}或使用{@link  Unpooled＃wrappedBuffer（ByteBuffer）创建{@link  ByteBufPayload} ...）}（如有必要）。 
	 * 否则，如果两者均为{@link  DefaultDataBuffer}，则将创建{@link  DefaultPayload}。 
	 *  
	 * @param 数据有效载荷的数据部分
	 * @param 元数据有效载荷的元数据部分
	 * @return 创建的有效载荷
	 */
	public static Payload createPayload(DataBuffer data, DataBuffer metadata) {
		return data instanceof NettyDataBuffer || metadata instanceof NettyDataBuffer ?
				ByteBufPayload.create(asByteBuf(data), asByteBuf(metadata)) :
				DefaultPayload.create(asByteBuffer(data), asByteBuffer(metadata));
	}

	/**
	 * Create a Payload with data only. The created payload is
	 * {@link ByteBufPayload} if the input is {@link NettyDataBuffer} or
	 * otherwise it is {@link DefaultPayload}.
	 * @param data the data part for the payload
	 * @return created payload
	 */
	/**
	 * 仅使用数据创建有效负载。 
	 * 如果输入是{@link  NettyDataBuffer}，则创建的有效负载是{@link  ByteBufPayload}，否则，它是{@link  DefaultPayload}。 
	 *  
	 * @param 数据有效负载的数据部分
	 * @return 创建的有效负载
	 */
	public static Payload createPayload(DataBuffer data) {
		return data instanceof NettyDataBuffer ?
				ByteBufPayload.create(asByteBuf(data)) : DefaultPayload.create(asByteBuffer(data));
	}


	static ByteBuf asByteBuf(DataBuffer buffer) {
		return buffer instanceof NettyDataBuffer ?
				((NettyDataBuffer) buffer).getNativeBuffer() : Unpooled.wrappedBuffer(buffer.asByteBuffer());
	}

	private static ByteBuffer asByteBuffer(DataBuffer buffer) {
		return buffer instanceof DefaultDataBuffer ?
				((DefaultDataBuffer) buffer).getNativeBuffer() : buffer.asByteBuffer();
	}

}
