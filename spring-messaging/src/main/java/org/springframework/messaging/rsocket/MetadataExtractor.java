/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */
package org.springframework.messaging.rsocket;

import java.util.Map;

import io.rsocket.Payload;

import org.springframework.core.codec.DecodingException;
import org.springframework.util.MimeType;

/**
 * Strategy to extract a map of value(s) from {@link Payload} metadata, which
 * could be composite metadata with multiple entries. Each metadata entry
 * is decoded based on its {@code MimeType} and a name is assigned to the decoded
 * value. The resulting name-value pairs can be added to the headers of a
 * {@link org.springframework.messaging.Message Message}.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 * @see MetadataExtractorRegistry
 */
/**
 * 从{@link 有效载荷}元数据提取值映射的策略，该元数据可以是具有多个条目的复合元数据。 
 * 每个元数据条目均基于其{@code  MimeType}进行解码，并为解码后的值分配名称。 
 * 可以将结果名称/值对添加到{@link  org.springframework.messaging.Message Message}的标头中。 
 *  @author  Rossen Stoyanchev @自5.2起
 * @see  MetadataExtractorRegistry
 */
public interface MetadataExtractor {

	/**
	 * The key to assign to the extracted "route" of the payload.
	 */
	/**
	 * 分配给已提取的有效负载"路由"的密钥。 
	 * 
	 */
	String ROUTE_KEY = "route";


	/**
	 * Extract a map of values from the given {@link Payload} metadata.
	 * The Payload "route", if present, should be saved under {@link #ROUTE_KEY}.
	 * @param payload the payload whose metadata should be read
	 * @param metadataMimeType the metadata MimeType for the connection.
	 * @return name values pairs extracted from the metadata
	 * @throws DecodingException if the metadata cannot be decoded
	 * @throws IllegalArgumentException if routing metadata cannot be decoded
	 */
	/**
	 * 从给定的{@link  Payload}元数据中提取值的映射。 
	 * 有效载荷"路线"（如果存在）应保存在{@link  #ROUTE_KEY}下。 
	 *  
	 * @param 有效负载应该读取其元数据的有效负载
	 * @param  metadataMimeType连接的元数据MimeType。 
	 * 从元数据提取的
	 * @return 名称值对
	 * @throws  DecodingException如果无法解码元数据
	 * @throws  IllegalArgumentException如果无法解码路由元数据
	 */
	Map<String, Object> extract(Payload payload, MimeType metadataMimeType);

}
