/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.config;

import org.springframework.lang.Nullable;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.SubscribableChannel;
import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler;
import org.springframework.messaging.tcp.TcpOperations;
import org.springframework.util.Assert;

/**
 * Registration class for configuring a {@link StompBrokerRelayMessageHandler}.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 用于配置{@link  StompBrokerRelayMessageHandler}的注册类。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public class StompBrokerRelayRegistration extends AbstractBrokerRegistration {

	private String relayHost = "127.0.0.1";

	private int relayPort = 61613;

	private String clientLogin = "guest";

	private String clientPasscode = "guest";

	private String systemLogin = "guest";

	private String systemPasscode = "guest";

	@Nullable
	private Long systemHeartbeatSendInterval;

	@Nullable
	private Long systemHeartbeatReceiveInterval;

	@Nullable
	private String virtualHost;

	@Nullable
	private TcpOperations<byte[]> tcpClient;

	private boolean autoStartup = true;

	@Nullable
	private String userDestinationBroadcast;

	@Nullable
	private String userRegistryBroadcast;


	public StompBrokerRelayRegistration(SubscribableChannel clientInboundChannel,
			MessageChannel clientOutboundChannel, String[] destinationPrefixes) {

		super(clientInboundChannel, clientOutboundChannel, destinationPrefixes);
	}


	/**
	 * Set the STOMP message broker host.
	 */
	/**
	 * 设置STOMP消息代理主机。 
	 * 
	 */
	public StompBrokerRelayRegistration setRelayHost(String relayHost) {
		Assert.hasText(relayHost, "relayHost must not be empty");
		this.relayHost = relayHost;
		return this;
	}

	/**
	 * Set the STOMP message broker port.
	 */
	/**
	 * 设置STOMP消息代理端口。 
	 * 
	 */
	public StompBrokerRelayRegistration setRelayPort(int relayPort) {
		this.relayPort = relayPort;
		return this;
	}

	/**
	 * Set the login to use when creating connections to the STOMP broker on
	 * behalf of connected clients.
	 * <p>By default this is set to "guest".
	 */
	/**
	 * 设置登录名以代表连接的客户端创建与STOMP代理的连接时使用。 
	 *  <p>默认情况下将其设置为"guest"。 
	 * 
	 */
	public StompBrokerRelayRegistration setClientLogin(String login) {
		Assert.hasText(login, "clientLogin must not be empty");
		this.clientLogin = login;
		return this;
	}

	/**
	 * Set the passcode to use when creating connections to the STOMP broker on
	 * behalf of connected clients.
	 * <p>By default this is set to "guest".
	 */
	/**
	 * 设置在代表所连接的客户端创建与STOMP代理的连接时使用的密码。 
	 *  <p>默认情况下将其设置为"guest"。 
	 * 
	 */
	public StompBrokerRelayRegistration setClientPasscode(String passcode) {
		Assert.hasText(passcode, "clientPasscode must not be empty");
		this.clientPasscode = passcode;
		return this;
	}

	/**
	 * Set the login for the shared "system" connection used to send messages to
	 * the STOMP broker from within the application, i.e. messages not associated
	 * with a specific client session (e.g. REST/HTTP request handling method).
	 * <p>By default this is set to "guest".
	 */
	/**
	 * 设置用于从应用程序内向STOMP代理发送消息的共享"系统"连接的登录名，即与特定客户端会话不相关的消息（例如REST / HTTP请求处理方法）。 
	 *  <p>默认情况下将其设置为"guest"。 
	 * 
	 */
	public StompBrokerRelayRegistration setSystemLogin(String login) {
		Assert.hasText(login, "systemLogin must not be empty");
		this.systemLogin = login;
		return this;
	}

	/**
	 * Set the passcode for the shared "system" connection used to send messages to
	 * the STOMP broker from within the application, i.e. messages not associated
	 * with a specific client session (e.g. REST/HTTP request handling method).
	 * <p>By default this is set to "guest".
	 */
	/**
	 * 设置用于从应用程序内部向STOMP代理发送消息的共享"系统"连接的密码，即与特定客户端会话不相关的消息（例如REST / HTTP请求处理方法）。 
	 *  <p>默认情况下将其设置为"guest"。 
	 * 
	 */
	public StompBrokerRelayRegistration setSystemPasscode(String passcode) {
		Assert.hasText(passcode, "systemPasscode must not be empty");
		this.systemPasscode = passcode;
		return this;
	}

	/**
	 * Set the interval, in milliseconds, at which the "system" relay session will,
	 * in the absence of any other data being sent, send a heartbeat to the STOMP broker.
	 * A value of zero will prevent heartbeats from being sent to the broker.
	 * <p>The default value is 10000.
	 */
	/**
	 * 设置间隔（以毫秒为单位），在该间隔下，"系统"中继会话将在不发送任何其他数据的情况下将心跳信号发送到STOMP代理。 
	 * 零值将阻止心跳发送给代理。 
	 *  <p>默认值为10000。 
	 * 
	 */
	public StompBrokerRelayRegistration setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {
		this.systemHeartbeatSendInterval = systemHeartbeatSendInterval;
		return this;
	}

	/**
	 * Set the maximum interval, in milliseconds, at which the "system" relay session
	 * expects, in the absence of any other data, to receive a heartbeat from the STOMP
	 * broker. A value of zero will configure the relay session to expect not to receive
	 * heartbeats from the broker.
	 * <p>The default value is 10000.
	 */
	/**
	 * 设置最大间隔（以毫秒为单位），在没有任何其他数据的情况下，"系统"中继会话期望从STOMP代理接收心跳的最大间隔。 
	 * 零值将配置中继会话以期望不接收来自代理的心跳。 
	 *  <p>默认值为10000。 
	 * 
	 */
	public StompBrokerRelayRegistration setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {
		this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval;
		return this;
	}

	/**
	 * Set the value of the "host" header to use in STOMP CONNECT frames. When this
	 * property is configured, a "host" header will be added to every STOMP frame sent to
	 * the STOMP broker. This may be useful for example in a cloud environment where the
	 * actual host to which the TCP connection is established is different from the host
	 * providing the cloud-based STOMP service.
	 * <p>By default this property is not set.
	 */
	/**
	 * 设置要在STOMP CONNECT帧中使用的"主机"标头的值。 
	 * 配置此属性后，将向发送到STOMP代理的每个STOMP帧添加一个"主机"标头。 
	 * 例如，这在云环境中很有用，在该环境中建立了TCP连接的实际主机与提供基于云的STOMP服务的主机不同。 
	 *  <p>默认情况下未设置此属性。 
	 * 
	 */
	public StompBrokerRelayRegistration setVirtualHost(String virtualHost) {
		this.virtualHost = virtualHost;
		return this;
	}

	/**
	 * Configure a TCP client for managing TCP connections to the STOMP broker.
	 * <p>By default {@code ReactorNettyTcpClient} is used.
	 * <p><strong>Note:</strong> when this property is used, any
	 * {@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}
	 * specified are effectively ignored.
	 * @since 4.3.15
	 */
	/**
	 * 配置TCP客户端以管理与STOMP代理的TCP连接。 
	 *  <p>默认情况下，使用{@code  ReactorNettyTcpClient}。 
	 *  <p> <strong>注意</ strong>：使用此属性时，将有效地忽略指定的任何{@link  #setRelayHost（String）主机}或{@link  #setRelayPort（int）端口}。 
	 *  @自4.3.15起
	 */
	public void setTcpClient(TcpOperations<byte[]> tcpClient) {
		this.tcpClient = tcpClient;
	}

	/**
	 * Configure whether the {@link StompBrokerRelayMessageHandler} should start
	 * automatically when the Spring ApplicationContext is refreshed.
	 * <p>The default setting is {@code true}.
	 */
	/**
	 * 配置{@link  StompBrokerRelayMessageHandler}是否应在刷新Spring ApplicationContext时自动启动。 
	 *  <p>默认设置为{@code  true}。 
	 * 
	 */
	public StompBrokerRelayRegistration setAutoStartup(boolean autoStartup) {
		this.autoStartup = autoStartup;
		return this;
	}

	/**
	 * Set a destination to broadcast messages to user destinations that remain
	 * unresolved because the user appears not to be connected. In a
	 * multi-application server scenario this gives other application servers
	 * a chance to try.
	 * <p>By default this is not set.
	 * @param destination the destination to broadcast unresolved messages to,
	 * e.g. "/topic/unresolved-user-destination"
	 */
	/**
	 * 设置目标以将消息广播到由于用户似乎未连接而仍未解决的用户目标。 
	 * 在多应用程序服务器方案中，这使其他应用程序服务器有机会尝试。 
	 *  <p>默认情况下未设置。 
	 *  
	 * @param 目的地要将未解析的消息广播到的目的地，例如"/ topic /未解决的用户目标"
	 */
	public StompBrokerRelayRegistration setUserDestinationBroadcast(String destination) {
		this.userDestinationBroadcast = destination;
		return this;
	}

	@Nullable
	protected String getUserDestinationBroadcast() {
		return this.userDestinationBroadcast;
	}

	/**
	 * Set a destination to broadcast the content of the local user registry to
	 * and to listen for such broadcasts from other servers. In a multi-application
	 * server scenarios this allows each server's user registry to be aware of
	 * users connected to other servers.
	 * <p>By default this is not set.
	 * @param destination the destination for broadcasting user registry details,
	 * e.g. "/topic/simp-user-registry".
	 */
	/**
	 * 设置目标以将本地用户注册表的内容广播到其他服务器，并从其他服务器侦听此类广播。 
	 * 在多应用程序服务器方案中，这允许每个服务器的用户注册表了解连接到其他服务器的用户。 
	 *  <p>默认情况下未设置。 
	 *  
	 * @param 目的地广播用户注册表详细信息的目的地，例如"/ topic / simp-user-registry"。 
	 * 
	 */
	public StompBrokerRelayRegistration setUserRegistryBroadcast(String destination) {
		this.userRegistryBroadcast = destination;
		return this;
	}

	@Nullable
	protected String getUserRegistryBroadcast() {
		return this.userRegistryBroadcast;
	}


	@Override
	protected StompBrokerRelayMessageHandler getMessageHandler(SubscribableChannel brokerChannel) {

		StompBrokerRelayMessageHandler handler = new StompBrokerRelayMessageHandler(
				getClientInboundChannel(), getClientOutboundChannel(),
				brokerChannel, getDestinationPrefixes());

		handler.setRelayHost(this.relayHost);
		handler.setRelayPort(this.relayPort);

		handler.setClientLogin(this.clientLogin);
		handler.setClientPasscode(this.clientPasscode);

		handler.setSystemLogin(this.systemLogin);
		handler.setSystemPasscode(this.systemPasscode);

		if (this.systemHeartbeatSendInterval != null) {
			handler.setSystemHeartbeatSendInterval(this.systemHeartbeatSendInterval);
		}
		if (this.systemHeartbeatReceiveInterval != null) {
			handler.setSystemHeartbeatReceiveInterval(this.systemHeartbeatReceiveInterval);
		}
		if (this.virtualHost != null) {
			handler.setVirtualHost(this.virtualHost);
		}
		if (this.tcpClient != null) {
			handler.setTcpClient(this.tcpClient);
		}

		handler.setAutoStartup(this.autoStartup);

		return handler;
	}

}
