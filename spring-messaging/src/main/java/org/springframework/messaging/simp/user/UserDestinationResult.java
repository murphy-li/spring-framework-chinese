/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.user;

import java.util.Set;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Contains the result from parsing a "user" destination from a source message
 * and translating it to target destinations (one per active user session).
 *
 * @author Rossen Stoyanchev
 * @since 4.0.2
 * @see org.springframework.messaging.simp.user.UserDestinationResolver
 */
/**
 * 包含从源消息中解析"用户"目标并将其转换为目标目标（每个活动用户会话一个）的结果。 
 *  @author  Rossen Stoyanchev @4.0.2起
 * @see  org.springframework.messaging.simp.user.UserDestinationResolver
 */
public class UserDestinationResult {

	private final String sourceDestination;

	private final Set<String> targetDestinations;

	private final String subscribeDestination;

	@Nullable
	private final String user;


	public UserDestinationResult(String sourceDestination, Set<String> targetDestinations,
			String subscribeDestination, @Nullable String user) {

		Assert.notNull(sourceDestination, "'sourceDestination' must not be null");
		Assert.notNull(targetDestinations, "'targetDestinations' must not be null");
		Assert.notNull(subscribeDestination, "'subscribeDestination' must not be null");

		this.sourceDestination = sourceDestination;
		this.targetDestinations = targetDestinations;
		this.subscribeDestination = subscribeDestination;
		this.user = user;
	}


	/**
	 * The "user" destination from the source message. This may look like
	 * "/user/queue/position-updates" when subscribing or
	 * "/user/{username}/queue/position-updates" when sending a message.
	 * @return the "user" destination, never {@code null}.
	 */
	/**
	 * 源消息中的"用户"目标。 
	 * 订阅时，此外观可能类似于"/ user / queue / position-updates"，发送邮件时，外观可能类似于"/ user / {username} / queue / position-updates"。 
	 *  
	 * @return 为"用户"目的地，从不为{@code  null}。 
	 * 
	 */
	public String getSourceDestination() {
		return this.sourceDestination;
	}

	/**
	 * The target destinations that the source destination was translated to,
	 * one per active user session, e.g. "/queue/position-updates-useri9oqdfzo".
	 * @return the target destinations, never {@code null} but possibly an empty
	 * set if there are no active sessions for the user.
	 */
	/**
	 * 每个活动用户会话（例如，每个活动用户会话）将源目的地转换为的目标目的地。 
	 *  "/ queue / position-updates-useri9oqdfzo"。 
	 *  
	 * @return 目标目的地，永远不要{@code  null}，但如果用户没有活动会话，则可能为空集。 
	 * 
	 */
	public Set<String> getTargetDestinations() {
		return this.targetDestinations;
	}

	/**
	 * The user destination in the form expected when a client subscribes, e.g.
	 * "/user/queue/position-updates".
	 * @return the subscribe form of the "user" destination, never {@code null}.
	 */
	/**
	 * 客户端订阅时预期格式的用户目的地，例如"/用户/队列/位置更新"。 
	 *  
	 * @return "用户"目标的订阅形式，切勿{<@@code> null}。 
	 * 
	 */
	public String getSubscribeDestination() {
		return this.subscribeDestination;
	}

	/**
	 * The user for this user destination.
	 * @return the user name or {@code null} if we have a session id only such as
	 * when the user is not authenticated; in such cases it is possible to use
	 * sessionId in place of a user name thus removing the need for a user-to-session
	 * lookup via {@link SimpUserRegistry}.
	 */
	/**
	 * 此用户目标的用户。 
	 *  
	 * @return 用户名或{@code  null}，如果我们只有一个会话ID（例如，未经身份验证的用户）； 
	 * 在这种情况下，可以使用sessionId代替用户名，从而不需要通过{@link  SimpUserRegistry}查找用户到会话。 
	 * 
	 */
	@Nullable
	public String getUser() {
		return this.user;
	}


	@Override
	public String toString() {
		return "UserDestinationResult [source=" + this.sourceDestination + ", target=" + this.targetDestinations +
				", subscribeDestination=" + this.subscribeDestination + ", user=" + this.user + "]";
	}

}
