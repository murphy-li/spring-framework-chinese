/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.core.log.LogDelegateFactory;

/**
 * Holds the shared logger named "org.springframework.web.SimpLogging" to use
 * for STOMP over WebSocket messaging when logging for
 * "org.springframework.messaging.simp" is off but logging for
 * "org.springframework.web" is on.
 *
 * <p>This makes it possible to enable all web related logging via
 * "org.springframework.web" including logging from lower-level packages such as
 * "org.springframework.messaging.simp".
 *
 * <p>To see logging from the primary classes where log messages originate from,
 * simply enable logging for "org.springframework.messaging".
 *
 * @author Rossen Stoyanchev
 * @since 5.1
 * @see LogDelegateFactory
 */
/**
 * 保留名为"org.springframework.web.SimpLogging"的共享记录器，以便在"org.springframework.messaging.simp"的日志记录已关闭但"org.springframework.web"的日志记录已打开时用于通过WebSocket消息进行STOMP的操作。 
 *  <p>这使得可以通过"org.springframework.web"启用所有与Web相关的日志记录，包括从诸如"org.springframework.messaging.simp"之类的较低级别的包进行日志记录。 
 *  <p>要查看来自日志消息来源的主要类的日志记录，只需启用"org.springframework.messaging"的日志记录即可。 
 *  @author  Rossen Stoyanchev @从5.1开始
 * @see  LogDelegateFactory
 */
public abstract class SimpLogging {

	private static final Log fallbackLogger =
			LogFactory.getLog("org.springframework.web." + SimpLogging.class.getSimpleName());


	/**
	 * Create a primary logger for the given class and wrap it with a composite
	 * that delegates to it or to the fallback logger named
	 * "org.springframework.web.SimpLogging", if the primary is not enabled.
	 * @param primaryLoggerClass the class for the name of the primary logger
	 * @return the resulting composite logger
	 */
	/**
	 * 为给定的类创建一个主记录器，并用一个委托给它的组合或一个名为"org.springframework.web.SimpLogging"的后备记录器的组合包装（如果未启用主记录器）。 
	 *  
	 * @param  primaryLoggerClass主记录器名称的类
	 * @return 生成的复合记录器
	 */
	public static Log forLogName(Class<?> primaryLoggerClass) {
		Log primaryLogger = LogFactory.getLog(primaryLoggerClass);
		return forLog(primaryLogger);
	}

	/**
	 * Wrap the given primary logger with a composite logger that delegates to
	 * either the primary or to the shared fallback logger
	 * "org.springframework.web.HttpLogging", if the primary is not enabled.
	 * @param primaryLogger the primary logger to use
	 * @return the resulting composite logger
	 */
	/**
	 * 如果未启用主数据库，则将给定的主数据库记录器与委派给主数据库或共享后备日志记录器"org.springframework.web.HttpLogging"的复合记录器进行包装。 
	 *  
	 * @param  primaryLogger主记录器使用
	 * @return 生成的复合记录器
	 */
	public static Log forLog(Log primaryLogger) {
		return LogDelegateFactory.getCompositeLog(primaryLogger, fallbackLogger);
	}

}
