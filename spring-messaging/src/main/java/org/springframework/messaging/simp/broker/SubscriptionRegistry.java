/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.broker;

import org.springframework.messaging.Message;
import org.springframework.util.MultiValueMap;

/**
 * A registry of subscription by session that allows looking up subscriptions.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 每个会话的订阅注册表，允许查找订阅。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public interface SubscriptionRegistry {

	/**
	 * Register a subscription represented by the given message.
	 * @param subscribeMessage the subscription request
	 */
	/**
	 * 注册给定消息表示的订阅。 
	 *  
	 * @param  subscriptionMessage订阅请求
	 */
	void registerSubscription(Message<?> subscribeMessage);

	/**
	 * Unregister a subscription.
	 * @param unsubscribeMessage the request to unsubscribe
	 */
	/**
	 * 注销注册。 
	 *  
	 * @param  unsubscribe通知取消订阅的请求
	 */
	void unregisterSubscription(Message<?> unsubscribeMessage);

	/**
	 * Remove all subscriptions associated with the given sessionId.
	 */
	/**
	 * 删除与给定sessionId关联的所有订阅。 
	 * 
	 */
	void unregisterAllSubscriptions(String sessionId);

	/**
	 * Find all subscriptions that should receive the given message.
	 * The map returned is safe to iterate and will never be modified.
	 * @param message the message
	 * @return a {@code MultiValueMap} with sessionId-subscriptionId pairs
	 * (possibly empty)
	 */
	/**
	 * 查找应该收到给定消息的所有订阅。 
	 * 返回的映射是可以安全迭代的，并且永远不会被修改。 
	 *  
	 * @param 消息
	 * @return 一个带有sessionId-subscriptionId对（可能为空）的{@code  MultiValueMap}
	 */
	MultiValueMap<String, String> findSubscriptions(Message<?> message);

}
