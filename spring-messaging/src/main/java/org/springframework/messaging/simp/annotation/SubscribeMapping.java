/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation for mapping subscription messages onto specific handler methods based
 * on the destination of a subscription. Supported with STOMP over WebSocket only
 * (e.g. STOMP SUBSCRIBE frame).
 *
 * <p>This is a method-level annotation that can be combined with a type-level
 * {@link org.springframework.messaging.handler.annotation.MessageMapping @MessageMapping}.
 *
 * <p>Supports the same method arguments as {@code @MessageMapping}; however,
 * subscription messages typically do not have a body.
 *
 * <p>The return value also follows the same rules as for {@code @MessageMapping},
 * except if the method is not annotated with
 * {@link org.springframework.messaging.handler.annotation.SendTo SendTo} or
 * {@link SendToUser}, the message is sent directly back to the connected
 * user and does not pass through the message broker. This is useful for
 * implementing a request-reply pattern.
 *
 * <p><b>NOTE:</b> When using controller interfaces (e.g. for AOP proxying),
 * make sure to consistently put <i>all</i> your mapping annotations - such as
 * {@code @MessageMapping} and {@code @SubscribeMapping} - on
 * the controller <i>interface</i> rather than on the implementation class.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 * @see org.springframework.messaging.handler.annotation.MessageMapping
 * @see org.springframework.messaging.handler.annotation.SendTo
 * @see org.springframework.messaging.simp.annotation.SendToUser
 */
/**
 * 用于根据订阅的目的地将订阅消息映射到特定处理程序方法的注释。 
 * 仅支持通过WebSocket的STOMP（例如STOMP SUBSCRIBE框架）。 
 *  <p>这是方法级别的注释，可以与类型级别的{@link  org.springframework.messaging.handler.annotation.MessageMapping @MessageMapping}结合使用。 
 *  <p>支持与{@code  @MessageMapping}相同的方法参数； 
 * 但是，订阅消息通常没有正文。 
 *  <p>返回值也遵循与{@code  @MessageMapping}相同的规则，除非该方法未使用{@link  org.springframework.messaging.handler.annotation.SendTo SendTo}或{ @link  SendToUser}，消息将直接发送回连接的用户，并且不会通过消息代理。 
 * 这对于实现请求-应答模式很有用。 
 *  <p> <b>注意：</ b>使用控制器接口（例如，用于AOP代理）时，请确保一致地放置<i>所有</ i>您的映射注释-例如{@code  @MessageMapping}和{@code  @SubscribeMapping}-在控制器<i>接口</ i>上，而不是在实现类上。 
 *  @author 罗森·斯托扬切夫（Rossen Stoyanchev）@since 4.0起@
 * @see .annotation.SendToUser
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SubscribeMapping {

	/**
	 * Destination-based mapping expressed by this annotation.
	 * <p>This is the destination of the STOMP message (e.g. {@code "/positions"}).
	 * Ant-style path patterns (e.g. {@code "/price.stock.*"}) and path template
	 * variables (e.g. <code>"/price.stock.{ticker}"</code>) are also supported.
	 */
	/**
	 * 此注释表示的基于目标的映射。 
	 *  <p>这是STOMP消息的目的地（例如{@code "/ positions"}）。 
	 * 还支持蚂蚁风格的路径模式（例如{@code "/price.stock。 
	 * "}）和路径模板变量（例如<code>"/ price.stock。 
	 * {ticker}"</ code>）。 
	 * 
	 */
	String[] value() default {};

}
