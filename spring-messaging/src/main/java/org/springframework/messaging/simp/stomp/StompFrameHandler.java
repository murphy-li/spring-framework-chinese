/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.stomp;

import java.lang.reflect.Type;

import org.springframework.lang.Nullable;

/**
 * Contract to handle a STOMP frame.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 */
/**
 * 签订合同以处理STOMP框架。 
 *  @author  Rossen Stoyanchev @从4.2开始
 */
public interface StompFrameHandler {

	/**
	 * Invoked before {@link #handleFrame(StompHeaders, Object)} to determine the
	 * type of Object the payload should be converted to.
	 * @param headers the headers of a message
	 */
	/**
	 * 在{@link  #handleFrame（StompHeaders，Object）}之前调用，以确定有效负载应转换为的对象类型。 
	 *  
	 * @param 标头消息标头
	 */
	Type getPayloadType(StompHeaders headers);

	/**
	 * Handle a STOMP frame with the payload converted to the target type returned
	 * from {@link #getPayloadType(StompHeaders)}.
	 * @param headers the headers of the frame
	 * @param payload the payload, or {@code null} if there was no payload
	 */
	/**
	 * 处理一个STOMP帧，将有效负载转换为从{@link  #getPayloadType（StompHeaders）}返回的目标类型。 
	 *  
	 * @param 标头是帧的头部，而
	 * @param 有效载荷是有效载荷，如果没有有效载荷，则为{@code  null}
	 */
	void handleFrame(StompHeaders headers, @Nullable Object payload);

}
