/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.stomp;

import org.springframework.lang.Nullable;

/**
 * Represents a STOMP session with operations to send messages,
 * create subscriptions and receive messages on those subscriptions.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 */
/**
 * 表示一个STOMP会话，该操作具有发送消息，创建订阅以及接收这些订阅上的消息的操作。 
 *  @author  Rossen Stoyanchev @从4.2开始
 */
public interface StompSession {

	/**
	 * Return the id for the session.
	 */
	/**
	 * 返回会话的ID。 
	 * 
	 */
	String getSessionId();

	/**
	 * Whether the session is connected.
	 */
	/**
	 * 会话是否已连接。 
	 * 
	 */
	boolean isConnected();

	/**
	 * When enabled, a receipt header is automatically added to future
	 * {@code send} and {@code subscribe} operations on this session, which
	 * causes the server to return a RECEIPT. An application can then use
	 * the {@link StompSession.Receiptable Receiptable} returned from the
	 * operation to track the receipt.
	 * <p>A receipt header can also be added manually through the overloaded
	 * methods that accept {@code StompHeaders}.
	 */
	/**
	 * 启用后，收据头会自动添加到此会话上将来的{@code  send}和{@code  subscribe}操作中，这将导致服务器返回RECEIPT。 
	 * 然后，应用程序可以使用从操作返回的{@link  StompSession.Receiptable Receiptable}来跟踪收据。 
	 *  <p>也可以通过接受{@code  StompHeaders}的重载方法手动添加收据标题。 
	 * 
	 */
	void setAutoReceipt(boolean enabled);

	/**
	 * Send a message to the specified destination, converting the payload to a
	 * {@code byte[]} with the help of a
	 * {@link org.springframework.messaging.converter.MessageConverter MessageConverter}.
	 * @param destination the destination to send a message to
	 * @param payload the message payload
	 * @return a Receiptable for tracking receipts
	 */
	/**
	 * 将消息发送到指定的目的地，借助{@link  org.springframework.messaging.converter.MessageConverter MessageConverter}将有效负载转换为{@code 字节[]}。 
	 *  
	 * @param 目的地要向
	 * @param 负载发送消息的目的地消息负载
	 * @return 用于跟踪收据的可接收表
	 */
	Receiptable send(String destination, Object payload);

	/**
	 * An overloaded version of {@link #send(String, Object)} with full
	 * {@link StompHeaders} instead of just a destination. The headers must
	 * contain a destination and may also have other headers such as
	 * "content-type" or custom headers for the broker to propagate to
	 * subscribers, or broker-specific, non-standard headers.
	 * @param headers the message headers
	 * @param payload the message payload
	 * @return a Receiptable for tracking receipts
	 */
	/**
	 * {@link  #send（String，Object）}的重载版本带有完整的{@link  StompHeaders}，而不仅仅是目的地。 
	 * 标头必须包含目标，并且还可以具有其他标头，例如"内容类型"或供代理传播到订户的自定义标头，或特定于代理的非标准标头。 
	 *  
	 * @param 标头邮件标头
	 * @param 有效载荷消息有效载荷
	 * @return 可用于跟踪收据的可接收项
	 */
	Receiptable send(StompHeaders headers, Object payload);

	/**
	 * Subscribe to the given destination by sending a SUBSCRIBE frame and handle
	 * received messages with the specified {@link StompFrameHandler}.
	 * @param destination the destination to subscribe to
	 * @param handler the handler for received messages
	 * @return a handle to use to unsubscribe and/or track receipts
	 */
	/**
	 * 通过发送SUBSCRIBE帧订阅给定的目的地，并使用指定的{@link  StompFrameHandler}处理收到的消息。 
	 *  
	 * @param 目的地要订阅的目的地
	 * @param 处理程序接收到的消息的处理程序
	 * @return 用于取消订阅和/或跟踪收据的句柄
	 */
	Subscription subscribe(String destination, StompFrameHandler handler);

	/**
	 * An overloaded version of {@link #subscribe(String, StompFrameHandler)}
	 * with full {@link StompHeaders} instead of just a destination.
	 * @param headers the headers for the subscribe message frame
	 * @param handler the handler for received messages
	 * @return a handle to use to unsubscribe and/or track receipts
	 */
	/**
	 * {@link  #subscribe（String，StompFrameHandler）}的重载版本带有完整的{@link  StompHeaders}而不是仅目的地。 
	 *  
	 * @param 标头订阅消息帧的标头
	 * @param 处理程序接收到的消息的处理程序
	 * @return 用于取消订阅和/或跟踪收据的句柄
	 */
	Subscription subscribe(StompHeaders headers, StompFrameHandler handler);

	/**
	 * Send an acknowledgement whether a message was consumed or not resulting
	 * in an ACK or NACK frame respectively.
	 * <p><strong>Note:</strong> to use this when subscribing you must set the
	 * {@link StompHeaders#setAck(String) ack} header to "client" or
	 * "client-individual" in order ot use this.
	 * @param messageId the id of the message
	 * @param consumed whether the message was consumed or not
	 * @return a Receiptable for tracking receipts
	 * @since 4.3
	 */
	/**
	 * 发送确认消息是否已被消费，是否分别导致ACK或NACK帧。 
	 *  <p> <strong>注意</ strong>：要在订阅时使用此功能，必须将{@link  StompHeaders＃setAck（String）ack}标头设置为"client"或"client-individual"才能使用此功能。 
	 *  
	 * @param  messageId消息是否已使用的消息
	 * @param 的ID，是否已使用该消息
	 * @return 自4.3起用于跟踪收据的可接收表
	 */
	Receiptable acknowledge(String messageId, boolean consumed);

	/**
	 * An overloaded version of {@link #acknowledge(String, boolean)} with
	 * full {@link StompHeaders} instead of just a {@code messageId}.
	 * @param headers the headers for the ACK or NACK message frame
	 * @param consumed whether the message was consumed or not
	 * @return a Receiptable for tracking receipts
	 * @since 5.0.5
	 */
	/**
	 * {@link  #acknowledge（String，boolean）}的重载版本，带有完整的{@link  StompHeaders}而不是仅一个{@code  messageId}。 
	 *  
	 * @param 标头无论是否使用消息，都使用ACK或NACK消息帧的标头
	 * @param  
	 * @return 自5.0.5起用于跟踪收据的可接收表
	 */
	Receiptable acknowledge(StompHeaders headers, boolean consumed);

	/**
	 * Disconnect the session by sending a DISCONNECT frame.
	 */
	/**
	 * 通过发送DISCONNECT帧来断开会话。 
	 * 
	 */
	void disconnect();

	/**
	 * Variant of {@link #disconnect()} with headers.
	 * @param headers the headers for the disconnect message frame
	 * @since 5.2.2
	 */
	/**
	 * {@link  #disconnect（）}带有标头的变体。 
	 *  
	 * @param 标头自5.2.2起@断开消息帧的标头
	 */
	void disconnect(StompHeaders headers);


	/**
	 * A handle to use to track receipts.
	 * @see #setAutoReceipt(boolean)
	 */
	/**
	 * 用于跟踪收据的句柄。 
	 *  
	 * @see  #setAutoReceipt（boolean）
	 */
	interface Receiptable {

		/**
		 * Return the receipt id, or {@code null} if the STOMP frame for which
		 * the handle was returned did not have a "receipt" header.
		 */
		/**
		 * 返回收据ID； 
		 * 如果返回句柄的STOMP框架没有"receipt"标头，则返回{@code  null}。 
		 * 
		 */
		@Nullable
		String getReceiptId();

		/**
		 * Task to invoke when a receipt is received.
		 * @throws java.lang.IllegalArgumentException if the receiptId is {@code null}
		 */
		/**
		 * 收到收据时要调用的任务。 
		 *  
		 * @throws  java.lang.IllegalArgumentException如果receiveId是{@code  null}
		 */
		void addReceiptTask(Runnable runnable);

		/**
		 * Task to invoke when a receipt is not received in the configured time.
		 * @throws java.lang.IllegalArgumentException if the receiptId is {@code null}
		 * @see org.springframework.messaging.simp.stomp.StompClientSupport#setReceiptTimeLimit(long)
		 */
		/**
		 * 在配置的时间内未收到收据时调用的任务。 
		 *  
		 * @throws  java.lang.IllegalArgumentException，如果receiveId为{@code  null} 
		 * @see  org.springframework.messaging.simp.stomp.StompClientSupport＃setReceiptTimeLimit（long）
		 */
		void addReceiptLostTask(Runnable runnable);
	}


	/**
	 * A handle to use to unsubscribe or to track a receipt.
	 */
	/**
	 * 用于取消订阅或跟踪收据的句柄。 
	 * 
	 */
	interface Subscription extends Receiptable {

		/**
		 * Return the id for the subscription.
		 */
		/**
		 * 返回订阅的ID。 
		 * 
		 */
		@Nullable
		String getSubscriptionId();

		/**
		 * Return the headers used on the SUBSCRIBE frame.
		 * @since 5.0
		 */
		/**
		 * 返回在SUBSCRIBE帧上使用的标头。 
		 *  @5.0起
		 */
		StompHeaders getSubscriptionHeaders();

		/**
		 * Remove the subscription by sending an UNSUBSCRIBE frame.
		 */
		/**
		 * 通过发送UNSUBSCRIBE框架删除订阅。 
		 * 
		 */
		void unsubscribe();

		/**
		 * Alternative to {@link #unsubscribe()} with additional custom headers
		 * to send to the server.
		 * <p><strong>Note:</strong> There is no need to set the subscription id.
		 * @param headers the custom headers, if any
		 * @since 5.0
		 */
		/**
		 * 替代{@link  #unsubscribe（）}并使用其他自定义标头发送到服务器。 
		 *  <p> <strong>注意</ strong>：无需设置订阅ID。 
		 *  
		 * @param 标头自定义标头（如果有）@since 5.0
		 */
		void unsubscribe(@Nullable StompHeaders headers);
	}

}
