/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.simp.broker;

import org.springframework.context.ApplicationEvent;

/**
 * Event raised when a broker's availability changes.
 *
 * @author Andy Wilkinson
 */
/**
 * 代理的可用性更改时引发的事件。 
 *  @author 安迪·威尔金森
 */
public class BrokerAvailabilityEvent extends ApplicationEvent {

	private static final long serialVersionUID = -8156742505179181002L;

	private final boolean brokerAvailable;


	/**
	 * Creates a new {@code BrokerAvailabilityEvent}.
	 *
	 * @param brokerAvailable {@code true} if the broker is available, {@code}
	 * false otherwise
	 * @param source the component that is acting as the broker, or as a relay
	 * for an external broker, that has changed availability. Must not be {@code
	 * null}.
	 */
	/**
	 * 创建一个新的{@code  BrokerAvailabilityEvent}。 
	 *  
	 * @param  brokerAvailable {@code  true}（如果代理可用），{<@code>}否，否则
	 * @param 源于充当代理或外部代理的中继的组件，即更改了可用性。 
	 * 不得为{@code  null}。 
	 * 
	 */
	public BrokerAvailabilityEvent(boolean brokerAvailable, Object source) {
		super(source);
		this.brokerAvailable = brokerAvailable;
	}

	public boolean isBrokerAvailable() {
		return this.brokerAvailable;
	}

	@Override
	public String toString() {
		return "BrokerAvailabilityEvent[available=" + this.brokerAvailable + ", " + getSource() + "]";
	}

}
