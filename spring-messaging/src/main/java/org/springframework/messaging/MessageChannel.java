/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging;

/**
 * Defines methods for sending messages.
 *
 * @author Mark Fisher
 * @since 4.0
 */
/**
 * 定义发送消息的方法。 
 *  @author 马克·费舍尔@始于4.0
 */
@FunctionalInterface
public interface MessageChannel {

	/**
	 * Constant for sending a message without a prescribed timeout.
	 */
	/**
	 * 在没有指定超时的情况下发送消息的常数。 
	 * 
	 */
	long INDEFINITE_TIMEOUT = -1;


	/**
	 * Send a {@link Message} to this channel. If the message is sent successfully,
	 * the method returns {@code true}. If the message cannot be sent due to a
	 * non-fatal reason, the method returns {@code false}. The method may also
	 * throw a RuntimeException in case of non-recoverable errors.
	 * <p>This method may block indefinitely, depending on the implementation.
	 * To provide a maximum wait time, use {@link #send(Message, long)}.
	 * @param message the message to send
	 * @return whether or not the message was sent
	 */
	/**
	 * 向此频道发送{@link 消息}。 
	 * 如果消息发送成功，则该方法返回{@code  true}。 
	 * 如果由于非致命原因而无法发送消息，则该方法返回{@code  false}。 
	 * 如果发生不可恢复的错误，该方法还可能引发RuntimeException。 
	 *  <p>根据实现的不同，此方法可能会无限期阻塞。 
	 * 要提供最大等待时间，请使用{@link  #send（Message，long）}。 
	 *  
	 * @param 消息要发送的消息
	 * @return 消息是否已发送
	 */
	default boolean send(Message<?> message) {
		return send(message, INDEFINITE_TIMEOUT);
	}

	/**
	 * Send a message, blocking until either the message is accepted or the
	 * specified timeout period elapses.
	 * @param message the message to send
	 * @param timeout the timeout in milliseconds or {@link #INDEFINITE_TIMEOUT}
	 * @return {@code true} if the message is sent, {@code false} if not
	 * including a timeout of an interrupt of the send
	 */
	/**
	 * 发送一条消息，直到收到该消息或经过指定的超时时间为止，它一直处于阻塞状态。 
	 *  
	 * @param 消息要发送的消息
	 * @param 超时（以毫秒为单位）或{@link  #INDEFINITE_TIMEOUT} 
	 * @return  {@code  true}（如果已发送消息），{<@code> false如果不包括发送中断的超时
	 */
	boolean send(Message<?> message, long timeout);

}
