/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.messaging.rsocket

import org.springframework.util.MimeType

/**
 * Extension for [MetadataExtractorRegistry.metadataToExtract] providing a `metadataToExtract<Foo>(...)`
 * variant leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * @param mimeType the mime type of metadata entries to extract
 * @param name assign a name for the decoded value; if not provided, then
 * the mime type is used as the key
 * @param T the target value type to decode to
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [MetadataExtractorRegistry.metadataToExtract]的扩展提供了一个利用Kotlin化类型参数的`metadataToExtract <Foo>（...）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  
 * @param  mimeType要提取的元数据条目的mime类型。 
 * 
 * @param  name为解码值指定名称； 
 * 如果未提供，则将mime类型用作键
 * @param  T目标值类型以解码为@author  Sebastien Deleuze @since 5.2
 */
inline fun <reified T : Any > MetadataExtractorRegistry.metadataToExtract(mimeType: MimeType, name: String? = null) =
		metadataToExtract(mimeType, object : org.springframework.core.ParameterizedTypeReference<T>() {}, name)

/**
 * Extension for [MetadataExtractorRegistry.metadataToExtract] providing a `metadataToExtract<Foo>(...)`
 * variant leveraging Kotlin reified type parameters. This extension is not subject to type
 * erasure and retains actual generic type arguments.
 * @param mimeType the mime type of metadata entries to extract
 * @param mapper custom logic to add the decoded value to the output map
 * @param T the target value type to decode to
 * @author Sebastien Deleuze
 * @since 5.2
 */
/**
 * [MetadataExtractorRegistry.metadataToExtract]的扩展提供了一个利用Kotlin化类型参数的`metadataToExtract <Foo>（...）`变体。 
 * 此扩展名不受类型擦除的约束，并保留实际的泛型类型参数。 
 *  
 * @param  mimeType元数据条目的mime类型以提取
 * @param 映射器自定义逻辑，以将解码后的值添加到输出映射中。 
 * 
 */
inline fun <reified T : Any > MetadataExtractorRegistry.metadataToExtract(mimeType: MimeType, noinline mapper: (T, MutableMap<String, Any>) -> Unit) =
		metadataToExtract(mimeType, object : org.springframework.core.ParameterizedTypeReference<T>() {}, mapper)

