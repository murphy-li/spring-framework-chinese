/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.util.Comparator;
import java.util.Map;

import org.springframework.lang.Nullable;

/**
 * Contract for matching routes to patterns.
 *
 * <p>Equivalent to {@link PathMatcher}, but enables use of parsed representations
 * of routes and patterns for efficiency reasons in scenarios where routes from
 * incoming messages are continuously matched against a large number of message
 * handler patterns.
 *
 * @author Rossen Stoyanchev
 * @since 5.2
 * @see PathMatcher
 */
/**
 * 将路线匹配到模式的合同。 
 *  <p>与{@link  PathMatcher}等效，但是出于效率原因，在来自传入消息的路由与大量消息处理程序模式连续匹配的情况下，可以使用路由和模式的解析表示形式。 
 *  @author  Rossen Stoyanchev @5.2起
 * @see  PathMatcher
 */
public interface RouteMatcher {

	/**
	 * Return a parsed representation of the given route.
	 * @param routeValue the route to parse
	 * @return the parsed representation of the route
	 */
	/**
	 * 返回给定路线的解析表示形式。 
	 *  
	 * @param  routeValue解析的路由
	 * @return 路由的解析表示
	 */
	Route parseRoute(String routeValue);

	/**
	 * Whether the given {@code route} contains pattern syntax which requires
	 * the {@link #match(String, Route)} method, or if it is a regular String
	 * that could be compared directly to others.
	 * @param route the route to check
	 * @return {@code true} if the given {@code route} represents a pattern
	 */
	/**
	 * 给定的{@code  route}是否包含需要{@link  #match（String，Route）}方法的模式语法，或者它是否是可以与其他字符串直接比较的常规String。 
	 *  
	 * @param 路由该路由以检查
	 * @return  {@code  true}，如果给定的{@code  route}表示一个模式
	 */
	boolean isPattern(String route);

	/**
	 * Combines two patterns into a single pattern.
	 * @param pattern1 the first pattern
	 * @param pattern2 the second pattern
	 * @return the combination of the two patterns
	 * @throws IllegalArgumentException when the two patterns cannot be combined
	 */
	/**
	 * 将两个模式组合为一个模式。 
	 *  
	 * @param  pattern1第一个模式
	 * @param  pattern2第二个模式
	 * @return 两个模式的组合
	 * @throws  IllegalArgumentException当两个模式无法组合时
	 */
	String combine(String pattern1, String pattern2);

	/**
	 * Match the given route against the given pattern.
	 * @param pattern the pattern to try to match
	 * @param route the route to test against
	 * @return {@code true} if there is a match, {@code false} otherwise
	 */
	/**
	 * 将给定的路线与给定的模式进行匹配。 
	 *  
	 * @param 模式化模式以尝试匹配
	 * @param 路由路径以针对
	 * @return  {@code  true}进行测试，如果存在匹配项，则{@code  false}
	 */
	boolean match(String pattern, Route route);

	/**
	 * Match the pattern to the route and extract template variables.
	 * @param pattern the pattern, possibly containing templates variables
	 * @param route the route to extract template variables from
	 * @return a map with template variables and values
	 */
	/**
	 * 将模式匹配到路线并提取模板变量。 
	 *  
	 * @param 模式化模式，可能包含模板变量
	 * @param 路由从
	 * @return 包含模板变量和值的映射中提取模板变量的路线
	 */
	@Nullable
	Map<String, String> matchAndExtract(String pattern, Route route);

	/**
	 * Given a route, return a {@link Comparator} suitable for sorting patterns
	 * in order of explicitness for that route, so that more specific patterns
	 * come before more generic ones.
	 * @param route the full path to use for comparison
	 * @return a comparator capable of sorting patterns in order of explicitness
	 */
	/**
	 * 给定一条路由，返回适合该模式的{@link  Comparator}，以该路由的显式性排序，以便在更通用的模式之前出现更具体的模式。 
	 *  
	 * @param 路由用于比较的完整路径
	 * @return 一个能够按显式顺序对模式进行排序的比较器
	 */
	Comparator<String> getPatternComparator(Route route);


	/**
	 * A parsed representation of a route.
 	 */
	/**
	 * 路线的解析表示形式。 
	 * 
	 */
	interface Route {

		/**
		 * The original route value.
		 */
		/**
		 * 原始路线值。 
		 * 
		 */
		String value();
	}

}
