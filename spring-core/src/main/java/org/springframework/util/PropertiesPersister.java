/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.util.Properties;

/**
 * Strategy interface for persisting {@code java.util.Properties},
 * allowing for pluggable parsing strategies.
 *
 * <p>The default implementation is DefaultPropertiesPersister,
 * providing the native parsing of {@code java.util.Properties},
 * but allowing for reading from any Reader and writing to any Writer
 * (which allows to specify an encoding for a properties file).
 *
 * @author Juergen Hoeller
 * @since 10.03.2004
 * @see DefaultPropertiesPersister
 * @see java.util.Properties
 */
/**
 * 用于持久化{@code  java.util.Properties}的策略接口，允许可插入的解析策略。 
 *  <p>默认实现为DefaultPropertiesPersister，提供{@code  java.util.Properties}的本机解析，但允许从任何Reader读取并写入任何Writer（这允许为属性文件指定编码） 。 
 *  @author  Juergen Hoeller @2004年10月10日以来
 * @see  DefaultPropertiesPersister 
 * @see  java.util.Properties
 */
public interface PropertiesPersister {

	/**
	 * Load properties from the given InputStream into the given
	 * Properties object.
	 * @param props the Properties object to load into
	 * @param is the InputStream to load from
	 * @throws IOException in case of I/O errors
	 * @see java.util.Properties#load
	 */
	/**
	 * 将属性从给定的InputStream加载到给定的Properties对象中。 
	 *  
	 * @param 支持将属性对象加载到
	 * @param 是要在I / O错误的情况下从
	 * @throws  IOException加载的InputStream 
	 * @see  java.util.Properties＃load
	 */
	void load(Properties props, InputStream is) throws IOException;

	/**
	 * Load properties from the given Reader into the given
	 * Properties object.
	 * @param props the Properties object to load into
	 * @param reader the Reader to load from
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定Reader的属性加载到给定Properties对象中。 
	 *  
	 * @param 支持将Properties对象加载到
	 * @param 读取器中，将Reader从
	 * @throws  IOException加载，以防发生I / O错误
	 */
	void load(Properties props, Reader reader) throws IOException;

	/**
	 * Write the contents of the given Properties object to the
	 * given OutputStream.
	 * @param props the Properties object to store
	 * @param os the OutputStream to write to
	 * @param header the description of the property list
	 * @throws IOException in case of I/O errors
	 * @see java.util.Properties#store
	 */
	/**
	 * 将给定Properties对象的内容写入给定OutputStream。 
	 *  
	 * @param 支撑Properties对象以存储
	 * @param 或OutputStream写入属性列表
	 * @throws  IOException中的
	 * @param 头，以防I / O错误
	 * @see  java.util .Properties＃store
	 */
	void store(Properties props, OutputStream os, String header) throws IOException;

	/**
	 * Write the contents of the given Properties object to the
	 * given Writer.
	 * @param props the Properties object to store
	 * @param writer the Writer to write to
	 * @param header the description of the property list
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定Properties对象的内容写入给定Writer。 
	 *  
	 * @param 支撑Properties对象以存储
	 * @param  writer，Writer向
	 * @param 标头写入属性列表的描述
	 * @throws  IOException（在发生I / O错误时）
	 */
	void store(Properties props, Writer writer, String header) throws IOException;

	/**
	 * Load properties from the given XML InputStream into the
	 * given Properties object.
	 * @param props the Properties object to load into
	 * @param is the InputStream to load from
	 * @throws IOException in case of I/O errors
	 * @see java.util.Properties#loadFromXML(java.io.InputStream)
	 */
	/**
	 * 将给定的XML InputStream中的属性加载到给定的Properties对象中。 
	 *  
	 * @param 支持将属性对象加载到
	 * @param 中，是在发生I / O错误时从
	 * @throws  IOException加载的InputStream 
	 * @see  java.util.Properties＃loadFromXML（java.io.InputStream ）
	 */
	void loadFromXml(Properties props, InputStream is) throws IOException;

	/**
	 * Write the contents of the given Properties object to the
	 * given XML OutputStream.
	 * @param props the Properties object to store
	 * @param os the OutputStream to write to
	 * @param header the description of the property list
	 * @throws IOException in case of I/O errors
	 * @see java.util.Properties#storeToXML(java.io.OutputStream, String)
	 */
	/**
	 * 将给定Properties对象的内容写入给定XML OutputStream。 
	 *  
	 * @param 支撑Properties对象以存储
	 * @param 或OutputStream写入属性列表
	 * @throws  IOException的
	 * @param 头中，以防I / O错误
	 * @see  java.util .Properties＃storeToXML（java.io.OutputStream，String）
	 */
	void storeToXml(Properties props, OutputStream os, String header) throws IOException;

	/**
	 * Write the contents of the given Properties object to the
	 * given XML OutputStream.
	 * @param props the Properties object to store
	 * @param os the OutputStream to write to
	 * @param encoding the encoding to use
	 * @param header the description of the property list
	 * @throws IOException in case of I/O errors
	 * @see java.util.Properties#storeToXML(java.io.OutputStream, String, String)
	 */
	/**
	 * 将给定Properties对象的内容写入给定XML OutputStream。 
	 *  
	 * @param 支撑Properties对象以存储
	 * @param 或OutputStream写入
	 * @param 进行编码，以使用
	 * @param 标头对属性列表的描述
	 * @throws  IOException（如果有I / O错误
	 * @see  java.util.Properties＃storeToXML（java.io.OutputStream，String，String）
	 */
	void storeToXml(Properties props, OutputStream os, String header, String encoding) throws IOException;

}
