/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.file.Files;

import org.springframework.lang.Nullable;

/**
 * Simple utility methods for file and stream copying. All copy methods use a block size
 * of 4096 bytes, and close all affected streams when done. A variation of the copy
 * methods from this class that leave streams open can be found in {@link StreamUtils}.
 *
 * <p>Mainly for use within the framework, but also useful for application code.
 *
 * @author Juergen Hoeller
 * @author Hyunjin Choi
 * @since 06.10.2003
 * @see StreamUtils
 * @see FileSystemUtils
 */
/**
 * 用于文件和流复制的简单实用程序方法。 
 * 所有复制方法都使用4096字节的块大小，并在完成后关闭所有受影响的流。 
 * 可以在{@link  StreamUtils}中找到此类使流保持打开状态的复制方法的变体。 
 *  <p>主要在框架内使用，但对应用程序代码也很有用。 
 *  @author  Juergen Hoeller @author 崔yun津@2003年10月6日
 * @see  StreamUtils 
 * @see  FileSystemUtils
 */
public abstract class FileCopyUtils {

	/**
	 * The default buffer size used when copying bytes.
	 */
	/**
	 * 复制字节时使用的默认缓冲区大小。 
	 * 
	 */
	public static final int BUFFER_SIZE = StreamUtils.BUFFER_SIZE;


	//---------------------------------------------------------------------
	// Copy methods for java.io.File
	//---------------------------------------------------------------------

	/**
	 * Copy the contents of the given input File to the given output File.
	 * @param in the file to copy from
	 * @param out the file to copy to
	 * @return the number of bytes copied
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定输入文件的内容复制到给定输出文件。 
	 * 要复制的文件中的
	 * @param 从
	 * @param 中复制出的文件要复制到
	 * @return 中的字节数
	 * @throws  IOException，如果发生I / O错误
	 */
	public static int copy(File in, File out) throws IOException {
		Assert.notNull(in, "No input File specified");
		Assert.notNull(out, "No output File specified");
		return copy(Files.newInputStream(in.toPath()), Files.newOutputStream(out.toPath()));
	}

	/**
	 * Copy the contents of the given byte array to the given output File.
	 * @param in the byte array to copy from
	 * @param out the file to copy to
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定字节数组的内容复制到给定输出文件。 
	 * 字节数组中的
	 * @param 要从
	 * @param 复制到文件中，然后在I / O错误的情况下复制到
	 * @throws  IOException
	 */
	public static void copy(byte[] in, File out) throws IOException {
		Assert.notNull(in, "No input byte array specified");
		Assert.notNull(out, "No output File specified");
		copy(new ByteArrayInputStream(in), Files.newOutputStream(out.toPath()));
	}

	/**
	 * Copy the contents of the given input File into a new byte array.
	 * @param in the file to copy from
	 * @return the new byte array that has been copied to
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定输入文件的内容复制到新的字节数组中。 
	 * 要从
	 * @return 复制新字节数组的文件中的
	 * @param ，如果发生I / O错误，该新字节数组已复制到
	 * @throws  IOException
	 */
	public static byte[] copyToByteArray(File in) throws IOException {
		Assert.notNull(in, "No input File specified");
		return copyToByteArray(Files.newInputStream(in.toPath()));
	}


	//---------------------------------------------------------------------
	// Copy methods for java.io.InputStream / java.io.OutputStream
	//---------------------------------------------------------------------

	/**
	 * Copy the contents of the given InputStream to the given OutputStream.
	 * Closes both streams when done.
	 * @param in the stream to copy from
	 * @param out the stream to copy to
	 * @return the number of bytes copied
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定InputStream的内容复制到给定OutputStream。 
	 * 完成后关闭两个流。 
	 * 流中的
	 * @param 要从
	 * @param 复制出来，流中要复制到
	 * @return 的流的字节数
	 * @throws  IOException，如果发生I / O错误
	 */
	public static int copy(InputStream in, OutputStream out) throws IOException {
		Assert.notNull(in, "No InputStream specified");
		Assert.notNull(out, "No OutputStream specified");

		try {
			return StreamUtils.copy(in, out);
		}
		finally {
			close(in);
			close(out);
		}
	}

	/**
	 * Copy the contents of the given byte array to the given OutputStream.
	 * Closes the stream when done.
	 * @param in the byte array to copy from
	 * @param out the OutputStream to copy to
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定字节数组的内容复制到给定的OutputStream。 
	 * 完成后关闭流。 
	 * 字节数组中的
	 * @param 要从
	 * @param 复制到OutputStream中，以在发生I / O错误时复制到
	 * @throws  IOException
	 */
	public static void copy(byte[] in, OutputStream out) throws IOException {
		Assert.notNull(in, "No input byte array specified");
		Assert.notNull(out, "No OutputStream specified");

		try {
			out.write(in);
		}
		finally {
			close(out);
		}
	}

	/**
	 * Copy the contents of the given InputStream into a new byte array.
	 * Closes the stream when done.
	 * @param in the stream to copy from (may be {@code null} or empty)
	 * @return the new byte array that has been copied to (possibly empty)
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定InputStream的内容复制到新的字节数组中。 
	 * 完成后关闭流。 
	 * 要从中复制的流中的
	 * @param （可以为{@code  null}或为空）
	 * @return 已复制到（可能为空）
	 * @throws  IOException的新字节数组（如果有I / O错误
	 */
	public static byte[] copyToByteArray(@Nullable InputStream in) throws IOException {
		if (in == null) {
			return new byte[0];
		}

		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);
		copy(in, out);
		return out.toByteArray();
	}


	//---------------------------------------------------------------------
	// Copy methods for java.io.Reader / java.io.Writer
	//---------------------------------------------------------------------

	/**
	 * Copy the contents of the given Reader to the given Writer.
	 * Closes both when done.
	 * @param in the Reader to copy from
	 * @param out the Writer to copy to
	 * @return the number of characters copied
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定Reader的内容复制到给定Writer。 
	 * 完成后都关闭。 
	 * 在Reader中将
	 * @param 从
	 * @param 复制到Writer中，以将复制的字符数
	 * @throws  IOException复制到
	 * @return 发生I / O错误
	 */
	public static int copy(Reader in, Writer out) throws IOException {
		Assert.notNull(in, "No Reader specified");
		Assert.notNull(out, "No Writer specified");

		try {
			int byteCount = 0;
			char[] buffer = new char[BUFFER_SIZE];
			int bytesRead = -1;
			while ((bytesRead = in.read(buffer)) != -1) {
				out.write(buffer, 0, bytesRead);
				byteCount += bytesRead;
			}
			out.flush();
			return byteCount;
		}
		finally {
			close(in);
			close(out);
		}
	}

	/**
	 * Copy the contents of the given String to the given output Writer.
	 * Closes the writer when done.
	 * @param in the String to copy from
	 * @param out the Writer to copy to
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定String的内容复制到给定输出Writer。 
	 * 完成后关闭编写器。 
	 * 在发生I / O错误的情况下，字符串中的
	 * @param 从
	 * @param 复制出Writer，复制到
	 * @throws  IOException
	 */
	public static void copy(String in, Writer out) throws IOException {
		Assert.notNull(in, "No input String specified");
		Assert.notNull(out, "No Writer specified");

		try {
			out.write(in);
		}
		finally {
			close(out);
		}
	}

	/**
	 * Copy the contents of the given Reader into a String.
	 * Closes the reader when done.
	 * @param in the reader to copy from (may be {@code null} or empty)
	 * @return the String that has been copied to (possibly empty)
	 * @throws IOException in case of I/O errors
	 */
	/**
	 * 将给定Reader的内容复制到字符串中。 
	 * 完成后关闭阅读器。 
	 * 阅读器中的
	 * @param 要从中复制（可能为{@code  null}或为空）
	 * @return 已复制到（可能为空）<
	 * @throws> IOException的字符串（如果发生I / O错误）
	 */
	public static String copyToString(@Nullable Reader in) throws IOException {
		if (in == null) {
			return "";
		}

		StringWriter out = new StringWriter();
		copy(in, out);
		return out.toString();
	}

	/**
	 * Attempt to close the supplied {@link Closeable}, silently swallowing any
	 * exceptions.
	 * @param closeable the {@code Closeable} to close
	 */
	/**
	 * 尝试关闭提供的{@link  Closeable}，无提示地吞下任何异常。 
	 *  
	 * @param 可关闭{{@@code> Closeable}关闭
	 */
	private static void close(Closeable closeable) {
		try {
			closeable.close();
		}
		catch (IOException ex) {
			// ignore
		}
	}

}
