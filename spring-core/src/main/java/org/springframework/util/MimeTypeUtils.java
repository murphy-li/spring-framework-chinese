/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.lang.Nullable;

/**
 * Miscellaneous {@link MimeType} utility methods.
 *
 * @author Arjen Poutsma
 * @author Rossen Stoyanchev
 * @author Dimitrios Liapis
 * @author Brian Clozel
 * @author Sam Brannen
 * @since 4.0
 */
/**
 * 其他{@link  MimeType}实用程序方法。 
 *  @author  Arjen Poutsma @author  Rossen Stoyanchev @author  Dimitrios Liapis @author  Brian Clozel @author  Sam Brannen @始于4.0
 */
public abstract class MimeTypeUtils {

	private static final byte[] BOUNDARY_CHARS =
			new byte[] {'-', '_', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
					'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',
					'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',
					'V', 'W', 'X', 'Y', 'Z'};

	/**
	 * Comparator used by {@link #sortBySpecificity(List)}.
	 */
	/**
	 * {@link  #sortBySpecificity（List）}使用的比较器。 
	 * 
	 */
	public static final Comparator<MimeType> SPECIFICITY_COMPARATOR = new MimeType.SpecificityComparator<>();

	/**
	 * Public constant mime type that includes all media ranges (i.e. "&#42;/&#42;").
	 */
	/**
	 * 包含所有媒体范围（即"* / *"）的公共常量mime类型。 
	 * 
	 */
	public static final MimeType ALL;

	/**
	 * A String equivalent of {@link MimeTypeUtils#ALL}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃ALL}的字符串。 
	 * 
	 */
	public static final String ALL_VALUE = "*/*";

	/**
	 * Public constant mime type for {@code application/json}.
	 * */
/**
 * "; {{@@code> application / json}的公共常量mime类型。 
 * 
 */
	public static final MimeType APPLICATION_JSON;

	/**
	 * A String equivalent of {@link MimeTypeUtils#APPLICATION_JSON}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃APPLICATION_JSON}的字符串。 
	 * 
	 */
	public static final String APPLICATION_JSON_VALUE = "application/json";

	/**
	 * Public constant mime type for {@code application/octet-stream}.
	 *  */
	/**
	 * {@code  application / octet-stream}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType APPLICATION_OCTET_STREAM;

	/**
	 * A String equivalent of {@link MimeTypeUtils#APPLICATION_OCTET_STREAM}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃APPLICATION_OCTET_STREAM}的字符串。 
	 * 
	 */
	public static final String APPLICATION_OCTET_STREAM_VALUE = "application/octet-stream";

	/**
	 * Public constant mime type for {@code application/xml}.
	 */
	/**
	 * {@code  application / xml}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType APPLICATION_XML;

	/**
	 * A String equivalent of {@link MimeTypeUtils#APPLICATION_XML}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃APPLICATION_XML}的字符串。 
	 * 
	 */
	public static final String APPLICATION_XML_VALUE = "application/xml";

	/**
	 * Public constant mime type for {@code image/gif}.
	 */
	/**
	 * {@code  image / gif}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType IMAGE_GIF;

	/**
	 * A String equivalent of {@link MimeTypeUtils#IMAGE_GIF}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃IMAGE_GIF}的字符串。 
	 * 
	 */
	public static final String IMAGE_GIF_VALUE = "image/gif";

	/**
	 * Public constant mime type for {@code image/jpeg}.
	 */
	/**
	 * {@code  image / jpeg}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType IMAGE_JPEG;

	/**
	 * A String equivalent of {@link MimeTypeUtils#IMAGE_JPEG}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃IMAGE_JPEG}的字符串。 
	 * 
	 */
	public static final String IMAGE_JPEG_VALUE = "image/jpeg";

	/**
	 * Public constant mime type for {@code image/png}.
	 */
	/**
	 * {@code  image / png}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType IMAGE_PNG;

	/**
	 * A String equivalent of {@link MimeTypeUtils#IMAGE_PNG}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃IMAGE_PNG}的字符串。 
	 * 
	 */
	public static final String IMAGE_PNG_VALUE = "image/png";

	/**
	 * Public constant mime type for {@code text/html}.
	 *  */
	/**
	 * {@code  text / html}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType TEXT_HTML;

	/**
	 * A String equivalent of {@link MimeTypeUtils#TEXT_HTML}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃TEXT_HTML}的字符串。 
	 * 
	 */
	public static final String TEXT_HTML_VALUE = "text/html";

	/**
	 * Public constant mime type for {@code text/plain}.
	 *  */
	/**
	 * {@code  text / plain}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType TEXT_PLAIN;

	/**
	 * A String equivalent of {@link MimeTypeUtils#TEXT_PLAIN}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃TEXT_PLAIN}的字符串。 
	 * 
	 */
	public static final String TEXT_PLAIN_VALUE = "text/plain";

	/**
	 * Public constant mime type for {@code text/xml}.
	 *  */
	/**
	 * {@code  text / xml}的公共常量mime类型。 
	 * 
	 */
	public static final MimeType TEXT_XML;

	/**
	 * A String equivalent of {@link MimeTypeUtils#TEXT_XML}.
	 */
	/**
	 * 等效于{@link  MimeTypeUtils＃TEXT_XML}的字符串。 
	 * 
	 */
	public static final String TEXT_XML_VALUE = "text/xml";


	private static final ConcurrentLruCache<String, MimeType> cachedMimeTypes =
			new ConcurrentLruCache<>(64, MimeTypeUtils::parseMimeTypeInternal);

	@Nullable
	private static volatile Random random;

	static {
		// Not using "parseMimeType" to avoid static init cost
		ALL = new MimeType("*", "*");
		APPLICATION_JSON = new MimeType("application", "json");
		APPLICATION_OCTET_STREAM = new MimeType("application", "octet-stream");
		APPLICATION_XML = new MimeType("application", "xml");
		IMAGE_GIF = new MimeType("image", "gif");
		IMAGE_JPEG = new MimeType("image", "jpeg");
		IMAGE_PNG = new MimeType("image", "png");
		TEXT_HTML = new MimeType("text", "html");
		TEXT_PLAIN = new MimeType("text", "plain");
		TEXT_XML = new MimeType("text", "xml");
	}


	/**
	 * Parse the given String into a single {@code MimeType}.
	 * Recently parsed {@code MimeType} are cached for further retrieval.
	 * @param mimeType the string to parse
	 * @return the mime type
	 * @throws InvalidMimeTypeException if the string cannot be parsed
	 */
	/**
	 * 将给定的String解析为单个{@code  MimeType}。 
	 * 最近解析的{@code  MimeType}被缓存以供进一步检索。 
	 *  
	 * @param  mime键入要解析的字符串
	 * @return  mime类型
	 * @throws 如果无法分析字符串，则InvalidMimeTypeException
	 */
	public static MimeType parseMimeType(String mimeType) {
		if (!StringUtils.hasLength(mimeType)) {
			throw new InvalidMimeTypeException(mimeType, "'mimeType' must not be empty");
		}
		return cachedMimeTypes.get(mimeType);
	}

	private static MimeType parseMimeTypeInternal(String mimeType) {
		int index = mimeType.indexOf(';');
		String fullType = (index >= 0 ? mimeType.substring(0, index) : mimeType).trim();
		if (fullType.isEmpty()) {
			throw new InvalidMimeTypeException(mimeType, "'mimeType' must not be empty");
		}

		// java.net.HttpURLConnection returns a *; q=.2 Accept header
		if (MimeType.WILDCARD_TYPE.equals(fullType)) {
			fullType = "*/*";
		}
		int subIndex = fullType.indexOf('/');
		if (subIndex == -1) {
			throw new InvalidMimeTypeException(mimeType, "does not contain '/'");
		}
		if (subIndex == fullType.length() - 1) {
			throw new InvalidMimeTypeException(mimeType, "does not contain subtype after '/'");
		}
		String type = fullType.substring(0, subIndex);
		String subtype = fullType.substring(subIndex + 1, fullType.length());
		if (MimeType.WILDCARD_TYPE.equals(type) && !MimeType.WILDCARD_TYPE.equals(subtype)) {
			throw new InvalidMimeTypeException(mimeType, "wildcard type is legal only in '*/*' (all mime types)");
/**
 * ";} int subIndex = fullType.indexOf（'/'）; if（subIndex == -1）{抛出新的InvalidMimeTypeException（mimeType，"不包含'/'"）;} if（subIndex == fullType.length（ ）-1）{抛出新的InvalidMimeTypeException（mimeType，"在'/'之后不包含子类型"）;}字符串类型= fullType.substring（0，subIndex）;字符串子类型= fullType.substring（subIndex + 1，fullType.length （））;如果（MimeType.WILDCARD_TYPE.equals（type）&&！ 
 * MimeType.WILDCARD_TYPE.equals（subtype））{抛出新的InvalidMimeTypeException（mimeType，"通配符类型仅在'
 */
		}

		Map<String, String> parameters = null;
		do {
			int nextIndex = index + 1;
			boolean quoted = false;
			while (nextIndex < mimeType.length()) {
				char ch = mimeType.charAt(nextIndex);
				if (ch == ';') {
					if (!quoted) {
						break;
					}
				}
				else if (ch == '"') {
					quoted = !quoted;
				}
				nextIndex++;
			}
			String parameter = mimeType.substring(index + 1, nextIndex).trim();
			if (parameter.length() > 0) {
				if (parameters == null) {
					parameters = new LinkedHashMap<>(4);
				}
				int eqIndex = parameter.indexOf('=');
				if (eqIndex >= 0) {
					String attribute = parameter.substring(0, eqIndex).trim();
					String value = parameter.substring(eqIndex + 1, parameter.length()).trim();
					parameters.put(attribute, value);
				}
			}
			index = nextIndex;
		}
		while (index < mimeType.length());

		try {
			return new MimeType(type, subtype, parameters);
		}
		catch (UnsupportedCharsetException ex) {
			throw new InvalidMimeTypeException(mimeType, "unsupported charset '" + ex.getCharsetName() + "'");
		}
		catch (IllegalArgumentException ex) {
			throw new InvalidMimeTypeException(mimeType, ex.getMessage());
		}
	}

	/**
	 * Parse the comma-separated string into a list of {@code MimeType} objects.
	 * @param mimeTypes the string to parse
	 * @return the list of mime types
	 * @throws InvalidMimeTypeException if the string cannot be parsed
	 */
	/**
	 * 将逗号分隔的字符串解析为{@code  MimeType}对象的列表。 
	 *  
	 * @param  mimeTypes解析的字符串
	 * @return  mime类型列表
	 * @throws  InvalidMimeTypeException如果无法解析字符串
	 */
	public static List<MimeType> parseMimeTypes(String mimeTypes) {
		if (!StringUtils.hasLength(mimeTypes)) {
			return Collections.emptyList();
		}
		return tokenize(mimeTypes).stream()
				.filter(StringUtils::hasText)
				.map(MimeTypeUtils::parseMimeType)
				.collect(Collectors.toList());
	}

	/**
	 * Tokenize the given comma-separated string of {@code MimeType} objects
	 * into a {@code List<String>}. Unlike simple tokenization by ",", this
	 * method takes into account quoted parameters.
	 * @param mimeTypes the string to tokenize
	 * @return the list of tokens
	 * @since 5.1.3
	 */
	/**
	 * 将{@code  MimeType}对象的给定逗号分隔字符串标记为{@code  List <String>}。 
	 * 与通过"，"进行简单标记不同，此方法将引用的参数考虑在内。 
	 *  
	 * @param  mime键入要标记化的字符串
	 * @return 标记列表@5.1.3起
	 */
	public static List<String> tokenize(String mimeTypes) {
		if (!StringUtils.hasLength(mimeTypes)) {
			return Collections.emptyList();
		}
		List<String> tokens = new ArrayList<>();
		boolean inQuotes = false;
		int startIndex = 0;
		int i = 0;
		while (i < mimeTypes.length()) {
			switch (mimeTypes.charAt(i)) {
				case '"':
					inQuotes = !inQuotes;
					break;
				case ',':
					if (!inQuotes) {
						tokens.add(mimeTypes.substring(startIndex, i));
						startIndex = i + 1;
					}
					break;
				case '\\':
					i++;
					break;
			}
			i++;
		}
		tokens.add(mimeTypes.substring(startIndex));
		return tokens;
	}

	/**
	 * Return a string representation of the given list of {@code MimeType} objects.
	 * @param mimeTypes the string to parse
	 * @return the list of mime types
	 * @throws IllegalArgumentException if the String cannot be parsed
	 */
	/**
	 * 返回{@code  MimeType}对象的给定列表的字符串表示形式。 
	 *  
	 * @param  mimeTypes解析的字符串
	 * @return  MIME类型列表
	 * @throws  IllegalArgumentException如果无法解析String
	 */
	public static String toString(Collection<? extends MimeType> mimeTypes) {
		StringBuilder builder = new StringBuilder();
		for (Iterator<? extends MimeType> iterator = mimeTypes.iterator(); iterator.hasNext();) {
			MimeType mimeType = iterator.next();
			mimeType.appendTo(builder);
			if (iterator.hasNext()) {
				builder.append(", ");
			}
		}
		return builder.toString();
	}

	/**
	 * Sorts the given list of {@code MimeType} objects by specificity.
	 * <p>Given two mime types:
	 * <ol>
	 * <li>if either mime type has a {@linkplain MimeType#isWildcardType() wildcard type},
	 * then the mime type without the wildcard is ordered before the other.</li>
	 * <li>if the two mime types have different {@linkplain MimeType#getType() types},
	 * then they are considered equal and remain their current order.</li>
	 * <li>if either mime type has a {@linkplain MimeType#isWildcardSubtype() wildcard subtype}
	 * , then the mime type without the wildcard is sorted before the other.</li>
	 * <li>if the two mime types have different {@linkplain MimeType#getSubtype() subtypes},
	 * then they are considered equal and remain their current order.</li>
	 * <li>if the two mime types have a different amount of
	 * {@linkplain MimeType#getParameter(String) parameters}, then the mime type with the most
	 * parameters is ordered before the other.</li>
	 * </ol>
	 * <p>For example: <blockquote>audio/basic &lt; audio/* &lt; *&#047;*</blockquote>
	 * <blockquote>audio/basic;level=1 &lt; audio/basic</blockquote>
	 * <blockquote>audio/basic == text/html</blockquote> <blockquote>audio/basic ==
	 * audio/wave</blockquote>
	 * @param mimeTypes the list of mime types to be sorted
	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1: Semantics
	 * and Content, section 5.3.2</a>
	 */
	/**
	 * 按特异性对{@code  MimeType}对象的给定列表进行排序。 
	 *  <p>给出两种mime类型：<ol> <li>如果任何一种mime类型都具有{@link  plain MimeType＃isWildcardType（）通配符类型}，则没有通配符的mime类型将在另一种之前排序。 
	 *  li> <li>如果两个mime类型具有不同的{@link  plain MimeType＃getType（）类型}，则它们被视为相等并保持其当前顺序。 
	 * </ li> <li>如果任一mime类型具有一个{@link  plain MimeType＃isWildcardSubtype（）通配符子类型}，然后将不带通配符的mime类型排在另一个之前。 
	 * </ li> <li>如果两个mime类型具有不同的{@link  plain MimeType＃ getlitype（）子类型}，则它们被视为相等并保持其当前顺序。 
	 * </ li> <li>如果两个mime类型具有不同数量的{@link  plain MimeType＃getParameter（String）parameters}，则</ li> </ ol> <p>例如，<blockquote> audio / basic <audio </ / </ blockquote> <blockquote> audio / basic; level = 1 <音频/基本</ blockquote> <blockquote>音频/ b asic == text / html </ blockquote> <blockquote>音频/基本==音频/波形</ blockquote> 
	 * @param  mimeTypes列出要排序的mime类型列表
	 * @see  <a href ="https：/ /tools.ietf.org/html/rfc7231#section-5.3.2">HTTP 1.1：语义和内容，第5.3.2节</a>
	 */
	public static void sortBySpecificity(List<MimeType> mimeTypes) {
		Assert.notNull(mimeTypes, "'mimeTypes' must not be null");
		if (mimeTypes.size() > 1) {
			mimeTypes.sort(SPECIFICITY_COMPARATOR);
		}
	}


	/**
	 * Lazily initialize the {@link SecureRandom} for {@link #generateMultipartBoundary()}.
	 */
	/**
	 * 延迟{{@link> #generateMultipartBoundary（）}的{@link  SecureRandom}初始化。 
	 * 
	 */
	private static Random initRandom() {
		Random randomToUse = random;
		if (randomToUse == null) {
			synchronized (MimeTypeUtils.class) {
				randomToUse = random;
				if (randomToUse == null) {
					randomToUse = new SecureRandom();
					random = randomToUse;
				}
			}
		}
		return randomToUse;
	}

	/**
	 * Generate a random MIME boundary as bytes, often used in multipart mime types.
	 */
	/**
	 * 生成随机的MIME边界（以字节为单位），通常在多部分mime类型中使用。 
	 * 
	 */
	public static byte[] generateMultipartBoundary() {
		Random randomToUse = initRandom();
		byte[] boundary = new byte[randomToUse.nextInt(11) + 30];
		for (int i = 0; i < boundary.length; i++) {
			boundary[i] = BOUNDARY_CHARS[randomToUse.nextInt(BOUNDARY_CHARS.length)];
		}
		return boundary;
	}

	/**
	 * Generate a random MIME boundary as String, often used in multipart mime types.
	 */
	/**
	 * 生成一个随机的MIME边界作为String，通常在多部分mime类型中使用。 
	 * 
	 */
	public static String generateMultipartBoundaryString() {
		return new String(generateMultipartBoundary(), StandardCharsets.US_ASCII);
	}


	/**
	 * Simple Least Recently Used cache, bounded by the maximum size given
	 * to the class constructor.
	 * <p>This implementation is backed by a {@code ConcurrentHashMap} for storing
	 * the cached values and a {@code ConcurrentLinkedQueue} for ordering the keys
	 * and choosing the least recently used key when the cache is at full capacity.
	 * @param <K> the type of the key used for caching
	 * @param <V> the type of the cached values
	 */
	/**
	 * 最近最少使用的简单缓存，以给类构造函数的最大大小为边界。 
	 *  <p>此实现由{@code  ConcurrentHashMap}（用于存储缓存的值）和{@code  ConcurrentLinkedQueue}（用于对键进行排序并在缓存已满时选择最近使用最少的键）的支持。 
	 *  
	 * @param  <K>用于缓存的键的类型
	 * @param  <V>缓存的值的类型
	 */
	private static class ConcurrentLruCache<K, V> {

		private final int maxSize;

		private final ConcurrentLinkedQueue<K> queue = new ConcurrentLinkedQueue<>();

		private final ConcurrentHashMap<K, V> cache = new ConcurrentHashMap<>();

		private final ReadWriteLock lock = new ReentrantReadWriteLock();

		private final Function<K, V> generator;

		public ConcurrentLruCache(int maxSize, Function<K, V> generator) {
			Assert.isTrue(maxSize > 0, "LRU max size should be positive");
			Assert.notNull(generator, "Generator function should not be null");
			this.maxSize = maxSize;
			this.generator = generator;
		}

		public V get(K key) {
			this.lock.readLock().lock();
			try {
				if (this.queue.size() < this.maxSize / 2) {
					V cached = this.cache.get(key);
					if (cached != null) {
						return cached;
					}
				}
				else if (this.queue.remove(key)) {
					this.queue.add(key);
					return this.cache.get(key);
				}
			}
			finally {
				this.lock.readLock().unlock();
			}
			this.lock.writeLock().lock();
			try {
				// retrying in case of concurrent reads on the same key
				if (this.queue.remove(key)) {
					this.queue.add(key);
					return this.cache.get(key);
				}
				if (this.queue.size() == this.maxSize) {
					K leastUsed = this.queue.poll();
					if (leastUsed != null) {
						this.cache.remove(leastUsed);
					}
				}
				V value = this.generator.apply(key);
				this.queue.add(key);
				this.cache.put(key, value);
				return value;
			}
			finally {
				this.lock.writeLock().unlock();
			}
		}
	}

}
