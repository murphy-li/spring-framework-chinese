/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util.backoff;

/**
 * Provide a {@link BackOffExecution} that indicates the rate at which
 * an operation should be retried.
 *
 * <p>Users of this interface are expected to use it like this:
 *
 * <pre class="code">
 * BackOffExecution exec = backOff.start();
 *
 * // In the operation recovery/retry loop:
 * long waitInterval = exec.nextBackOff();
 * if (waitInterval == BackOffExecution.STOP) {
 *     // do not retry operation
 * }
 * else {
 *     // sleep, e.g. Thread.sleep(waitInterval)
 *     // retry operation
 * }
 * }</pre>
 *
 * Once the underlying operation has completed successfully,
 * the execution instance can be simply discarded.
 *
 * @author Stephane Nicoll
 * @since 4.1
 * @see BackOffExecution
 */
/**
 * 提供{@link  BackOffExecution}，该值指示应重试操作的速率。 
 *  <p>此接口的用户应按以下方式使用它：<pre class ="code"> BackOffExecution exec = backOff.start（）; //在操作恢复/重试循环中：long waitInterval = exec.nextBackOff（）; if（waitInterval == BackOffExecution.STOP）{//不重试操作} else {//休眠，例如Thread.sleep（waitInterval）//重试操作}} </ pre>一旦基础操作成功完成，就可以简单地丢弃执行实例。 
 *  @author 史蒂芬·尼科尔（Stephane Nicoll）@始于4.1 
 * @see  BackOffExecution
 */
@FunctionalInterface
public interface BackOff {

	/**
	 * Start a new back off execution.
	 * @return a fresh {@link BackOffExecution} ready to be used
	 */
	/**
	 * 开始新的后退执行。 
	 *  
	 * @return 可以使用的全新{@link  BackOffExecution}
	 */
	BackOffExecution start();

}
