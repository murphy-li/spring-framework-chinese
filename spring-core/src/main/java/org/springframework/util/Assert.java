/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.util.Collection;
import java.util.Map;
import java.util.function.Supplier;

import org.springframework.lang.Nullable;

/**
 * Assertion utility class that assists in validating arguments.
 *
 * <p>Useful for identifying programmer errors early and clearly at runtime.
 *
 * <p>For example, if the contract of a public method states it does not
 * allow {@code null} arguments, {@code Assert} can be used to validate that
 * contract. Doing this clearly indicates a contract violation when it
 * occurs and protects the class's invariants.
 *
 * <p>Typically used to validate method arguments rather than configuration
 * properties, to check for cases that are usually programmer errors rather
 * than configuration errors. In contrast to configuration initialization
 * code, there is usually no point in falling back to defaults in such methods.
 *
 * <p>This class is similar to JUnit's assertion library. If an argument value is
 * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).
 * For example:
 *
 * <pre class="code">
 * Assert.notNull(clazz, "The class must not be null");
 * Assert.isTrue(i > 0, "The value must be greater than zero");</pre>
 *
 * <p>Mainly for internal use within the framework; consider
 * <a href="https://commons.apache.org/proper/commons-lang/">Apache's Commons Lang</a>
 * for a more comprehensive suite of {@code String} utilities.
 *
 * @author Keith Donald
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Colin Sampaleanu
 * @author Rob Harrop
 * @since 1.1.2
 */
/**
 * 辅助验证参数的断言实用程序类。 
 *  <p>用于在运行时及早清晰地识别程序员错误。 
 *  <p>例如，如果公用方法的合同规定不允许使用{@code  null}参数，则可以使用{@code  Assert}来验证该合同。 
 * 这样做清楚表明发生违约并保护类的不变式。 
 *  <p>通常用于验证方法参数而不是配置属性，以检查通常是程序员错误而不是配置错误的情况。 
 * 与配置初始化代码相反，在这种方法中通常没有必要退回到默认值。 
 *  <p>此类类似于JUnit的断言库。 
 * 如果参数值被视为无效，则将抛出{@link  IllegalArgumentException}（通常）。 
 * 例如：<pre class ="code"> Assert.notNull（clazz，"该类不能为null"）; Assert.isTrue（i> 0，"该值必须大于零"）; </ pre> <p>主要供框架内部使用； 
 * 考虑使用<a href="https://commons.apache.org/proper/commons-lang/"> Apache的Commons Lang </a>，以获得更全面的{@code  String}实用程序套件。 
 *  @author  Keith Donald @author  Juergen Hoeller @author  Sam Brannen @author  Colin Sampaleanu @author  Rob Harrop @自1.1.2起
 */
public abstract class Assert {

	/**
	 * Assert a boolean expression, throwing an {@code IllegalStateException}
	 * if the expression evaluates to {@code false}.
	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}
	 * on an assertion failure.
	 * <pre class="code">Assert.state(id == null, "The id property must not already be initialized");</pre>
	 * @param expression a boolean expression
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalStateException if {@code expression} is {@code false}
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的计算结果为{@code  false}，则抛出一个{@code  IllegalStateException}。 
	 *  <p>如果您想在断言失败时抛出{@code  IllegalArgumentException}，请调用{@link  #isTrue}。 
	 *  <pre class ="code"> Assert.state（id == null，"id属性必须尚未初始化"）; </ pre> 
	 * @param 表达式布尔表达式
	 * @param 向异常消息发送消息如果断言失败，则使用
	 * @throws  IllegalStateException如果{@code  expression}为{@code  false}
	 */
	public static void state(boolean expression, String message) {
		if (!expression) {
			throw new IllegalStateException(message);
		}
	}

	/**
	 * Assert a boolean expression, throwing an {@code IllegalStateException}
	 * if the expression evaluates to {@code false}.
	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}
	 * on an assertion failure.
	 * <pre class="code">
	 * Assert.state(id == null,
	 *     () -&gt; "ID for " + entity.getName() + " must not already be initialized");
	 * </pre>
	 * @param expression a boolean expression
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalStateException if {@code expression} is {@code false}
	 * @since 5.0
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的计算结果为{@code  false}，则抛出一个{@code  IllegalStateException}。 
	 *  <p>如果您想在断言失败时抛出{@code  IllegalArgumentException}，请调用{@link  #isTrue}。 
	 *  <pre class ="code"> Assert.state（id == null，（）->"+的ID。 
	 * entity.getName（）+"必须尚未初始化"）； 
	 *  </ pre> 
	 * @param 表达式布尔表达式
	 * @param  message如果断言失败，则为异常消息的供应商提供使用的错误消息
	 * @throws 如果{@code  expression}为{@code  false}，则为IllegalStateException @5.0起
	 */
	public static void state(boolean expression, Supplier<String> messageSupplier) {
		if (!expression) {
			throw new IllegalStateException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert a boolean expression, throwing an {@code IllegalStateException}
	 * if the expression evaluates to {@code false}.
	 * @deprecated as of 4.3.7, in favor of {@link #state(boolean, String)}
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的计算结果为{@code  false}，则抛出一个{@code  IllegalStateException}。 
	 *  @自4.3.7版开始弃用，推荐使用{@link  #state（boolean，String）}
	 */
	@Deprecated
	public static void state(boolean expression) {
		state(expression, "[Assertion failed] - this state invariant must be true");
	}

	/**
	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}
	 * if the expression evaluates to {@code false}.
	 * <pre class="code">Assert.isTrue(i &gt; 0, "The value must be greater than zero");</pre>
	 * @param expression a boolean expression
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if {@code expression} is {@code false}
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的值为{@code  false}，则抛出一个{@code  IllegalArgumentException}。 
	 *  <pre class ="code"> Assert.isTrue（i> 0，"该值必须大于零"）； 
	 *  </ pre> 
	 * @param 表达式布尔表达式
	 * @param 向异常消息发送消息，如果如果{@code  expression}为{@code  false}，则断言
	 * @throws  IllegalArgumentException
	 */
	public static void isTrue(boolean expression, String message) {
		if (!expression) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}
	 * if the expression evaluates to {@code false}.
	 * <pre class="code">
	 * Assert.isTrue(i &gt; 0, () -&gt; "The value '" + i + "' must be greater than zero");
	 * </pre>
	 * @param expression a boolean expression
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if {@code expression} is {@code false}
	 * @since 5.0
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的值为{@code  false}，则抛出一个{@code  IllegalArgumentException}。 
	 *  <pre class ="code"> Assert.isTrue（i> 0，（）->"值'"+ i +"'必须大于零"）; </ pre> 
	 * @param 表达式布尔表达式
	 * @param  message如果断言失败，则为异常消息的供应商提供使用的消息
	 * @throws  IllegalArgumentException如果{@code  expression}为{@code  false} @5.0起
	 */
	public static void isTrue(boolean expression, Supplier<String> messageSupplier) {
		if (!expression) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}
	 * if the expression evaluates to {@code false}.
	 * @deprecated as of 4.3.7, in favor of {@link #isTrue(boolean, String)}
	 */
	/**
	 * 声明一个布尔表达式，如果该表达式的值为{@code  false}，则抛出一个{@code  IllegalArgumentException}。 
	 *  @自4.3.7起弃用，推荐使用{@link  #isTrue（boolean，String）}
	 */
	@Deprecated
	public static void isTrue(boolean expression) {
		isTrue(expression, "[Assertion failed] - this expression must be true");
	}

	/**
	 * Assert that an object is {@code null}.
	 * <pre class="code">Assert.isNull(value, "The value must be null");</pre>
	 * @param object the object to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the object is not {@code null}
	 */
	/**
	 * 断言对象为{@code  null}。 
	 *  <pre class ="code"> Assert.isNull（value，"该值必须为null"）; </ pre> 
	 * @param 对象要检查的对象
	 * @param 消息断言失败时要使用的异常消息
	 * @throws  IllegalArgumentException如果对象不是{@code  null}
	 */
	public static void isNull(@Nullable Object object, String message) {
		if (object != null) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that an object is {@code null}.
	 * <pre class="code">
	 * Assert.isNull(value, () -&gt; "The value '" + value + "' must be null");
	 * </pre>
	 * @param object the object to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the object is not {@code null}
	 * @since 5.0
	 */
	/**
	 * 断言对象为{@code  null}。 
	 *  <pre class ="code"> Assert.isNull（value，（）->"值'"+值+"'必须为null"）; </ pre> 
	 * @param 对象要检查的对象
	 * @param  message如果断言失败，则向供应商提供要使用的异常消息
	 * @throws  IllegalArgumentException如果对象不是{@code  null} @从5.0开始
	 */
	public static void isNull(@Nullable Object object, Supplier<String> messageSupplier) {
		if (object != null) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that an object is {@code null}.
	 * @deprecated as of 4.3.7, in favor of {@link #isNull(Object, String)}
	 */
	/**
	 * 断言对象为{@code  null}。 
	 *  @自4.3.7起弃用，推荐使用{@link  #isNull（Object，String）}
	 */
	@Deprecated
	public static void isNull(@Nullable Object object) {
		isNull(object, "[Assertion failed] - the object argument must be null");
	}

	/**
	 * Assert that an object is not {@code null}.
	 * <pre class="code">Assert.notNull(clazz, "The class must not be null");</pre>
	 * @param object the object to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the object is {@code null}
	 */
	/**
	 * 断言对象不是{@code  null}。 
	 *  <pre class ="code"> Assert.notNull（clazz，"该类不能为null"）; </ pre> 
	 * @param 对象要检查的对象
	 * @param 消息异常消息，如果断言要使用如果对象为{@code  null}，则
	 * @throws  IllegalArgumentException失败
	 */
	public static void notNull(@Nullable Object object, String message) {
		if (object == null) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that an object is not {@code null}.
	 * <pre class="code">
	 * Assert.notNull(clazz, () -&gt; "The class '" + clazz.getName() + "' must not be null");
	 * </pre>
	 * @param object the object to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the object is {@code null}
	 * @since 5.0
	 */
	/**
	 * 断言对象不是{@code  null}。 
	 *  <pre class ="code"> Assert.notNull（clazz，（）->"类'"+ clazz.getName（）+"'不能为空"）； 
	 *  </ pre> 
	 * @param 对象，对象，用于检查
	 * @param  message，如果断言失败，则为供应商提供要使用的异常消息。 
	 * 
	 * @throws  IllegalArgumentException如果对象为{@code  null} @，从5.0开始
	 */
	public static void notNull(@Nullable Object object, Supplier<String> messageSupplier) {
		if (object == null) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that an object is not {@code null}.
	 * @deprecated as of 4.3.7, in favor of {@link #notNull(Object, String)}
	 */
	/**
	 * 断言对象不是{@code  null}。 
	 *  @自4.3.7起不推荐使用，而推荐使用{@link  #notNull（Object，String）}
	 */
	@Deprecated
	public static void notNull(@Nullable Object object) {
		notNull(object, "[Assertion failed] - this argument is required; it must not be null");
	}

	/**
	 * Assert that the given String is not empty; that is,
	 * it must not be {@code null} and not the empty String.
	 * <pre class="code">Assert.hasLength(name, "Name must not be empty");</pre>
	 * @param text the String to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the text is empty
	 * @see StringUtils#hasLength
	 */
	/**
	 * 断言给定的String不为空； 
	 * 也就是说，它不能为{@code  null}，并且不能为空字符串。 
	 *  <pre class ="code"> Assert.hasLength（name，"名称不能为空"）; </ pre> 
	 * @param 文本字符串以检查
	 * @param 消息，如果断言失败，则使用异常消息
	 * @throws  IllegalArgumentException如果文本为空
	 * @see  StringUtils＃hasLength
	 */
	public static void hasLength(@Nullable String text, String message) {
		if (!StringUtils.hasLength(text)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that the given String is not empty; that is,
	 * it must not be {@code null} and not the empty String.
	 * <pre class="code">
	 * Assert.hasLength(name, () -&gt; "Name for account '" + account.getId() + "' must not be empty");
	 * </pre>
	 * @param text the String to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the text is empty
	 * @since 5.0
	 * @see StringUtils#hasLength
	 */
	/**
	 * 断言给定的String不为空； 
	 * 也就是说，它不能为{@code  null}，并且不能为空字符串。 
	 *  <pre class ="code"> Assert.hasLength（name，（）->"帐户'"的名称+ account.getId（）+"'不得为空"）; </ pre> 
	 * @param 给字符串加上文本以检查
	 * @param  message如果断言失败，则向供应商提供要使用的异常消息
	 * @throws  IllegalArgumentException如果文本为空@5.0起，@
	 * @see> StringUtils＃hasLength
	 */
	public static void hasLength(@Nullable String text, Supplier<String> messageSupplier) {
		if (!StringUtils.hasLength(text)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that the given String is not empty; that is,
	 * it must not be {@code null} and not the empty String.
	 * @deprecated as of 4.3.7, in favor of {@link #hasLength(String, String)}
	 */
	/**
	 * 断言给定的String不为空； 
	 * 也就是说，它不能为{@code  null}，并且不能为空字符串。 
	 *  @自4.3.7版开始弃用，推荐使用{@link  #hasLength（String，String）}
	 */
	@Deprecated
	public static void hasLength(@Nullable String text) {
		hasLength(text,
				"[Assertion failed] - this String argument must have length; it must not be null or empty");
	}

	/**
	 * Assert that the given String contains valid text content; that is, it must not
	 * be {@code null} and must contain at least one non-whitespace character.
	 * <pre class="code">Assert.hasText(name, "'name' must not be empty");</pre>
	 * @param text the String to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the text does not contain valid text content
	 * @see StringUtils#hasText
	 */
	/**
	 * 断言给定的字符串包含有效的文本内容； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个非空白字符。 
	 *  <pre class ="code"> Assert.hasText（name，"'name'不能为空"）; </ pre> 
	 * @param 文本字符串以检查
	 * @param 消息，如果在如果文本不包含有效的文本内容，则断言失败
	 * @throws  IllegalArgumentException 
	 * @see  StringUtils＃hasText
	 */
	public static void hasText(@Nullable String text, String message) {
		if (!StringUtils.hasText(text)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that the given String contains valid text content; that is, it must not
	 * be {@code null} and must contain at least one non-whitespace character.
	 * <pre class="code">
	 * Assert.hasText(name, () -&gt; "Name for account '" + account.getId() + "' must not be empty");
	 * </pre>
	 * @param text the String to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the text does not contain valid text content
	 * @since 5.0
	 * @see StringUtils#hasText
	 */
	/**
	 * 断言给定的字符串包含有效的文本内容； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个非空白字符。 
	 *  <pre class ="code"> Assert.hasText（name，（）->"帐户'"的名称+ account.getId（）+"'不能为空"）; </ pre> 
	 * @param 给字符串添加文本以检查
	 * @param  message如果断言失败，则向供应商提供异常消息使用的消息
	 * @throws  IllegalArgumentException如果文本不包含有效的文本内容，则自5.0起<
	 * @see > StringUtils＃hasText
	 */
	public static void hasText(@Nullable String text, Supplier<String> messageSupplier) {
		if (!StringUtils.hasText(text)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that the given String contains valid text content; that is, it must not
	 * be {@code null} and must contain at least one non-whitespace character.
	 * @deprecated as of 4.3.7, in favor of {@link #hasText(String, String)}
	 */
	/**
	 * 断言给定的字符串包含有效的文本内容； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个非空白字符。 
	 *  @自4.3.7起弃用，推荐使用{@link  #hasText（String，String）}
	 */
	@Deprecated
	public static void hasText(@Nullable String text) {
		hasText(text,
				"[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
	}

	/**
	 * Assert that the given text does not contain the given substring.
	 * <pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'");</pre>
	 * @param textToSearch the text to search
	 * @param substring the substring to find within the text
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the text contains the substring
	 */
	/**
	 * 断言给定的文本不包含给定的子字符串。 
	 *  <pre class ="code"> Assert.doesNotContain（name，"rod"，"名称不得包含'rod'"）; </ pre> 
	 * @param  textTo搜索文本以搜索
	 * @param 子字符串并将其作为子字符串如果断言失败，请在文本
	 * @param 消息中查找要使用的异常消息
	 * @throws 如果文本包含子字符串，则为IllegalArgumentException
	 */
	public static void doesNotContain(@Nullable String textToSearch, String substring, String message) {
		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&
				textToSearch.contains(substring)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that the given text does not contain the given substring.
	 * <pre class="code">
	 * Assert.doesNotContain(name, forbidden, () -&gt; "Name must not contain '" + forbidden + "'");
	 * </pre>
	 * @param textToSearch the text to search
	 * @param substring the substring to find within the text
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the text contains the substring
	 * @since 5.0
	 */
	/**
	 * 断言给定的文本不包含给定的子字符串。 
	 *  <pre class ="code"> Assert.doesNotContain（名称，禁止，（）->"名称不得包含'"+禁止+"'））； 
	 *  </ pre> 
	 * @param  textTo搜索文本以搜索
	 * @param 子字符串，然后在文本
	 * @param  messageSupplier中寻找子字符串，以供断言失败时使用的异常消息供应商
	 * @throws  IllegalArgumentException如果文本包含子字符串@since 5.0
	 */
	public static void doesNotContain(@Nullable String textToSearch, String substring, Supplier<String> messageSupplier) {
		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&
				textToSearch.contains(substring)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that the given text does not contain the given substring.
	 * @deprecated as of 4.3.7, in favor of {@link #doesNotContain(String, String, String)}
	 */
	/**
	 * 断言给定的文本不包含给定的子字符串。 
	 *  @自4.3.7起不推荐使用，而推荐使用{@link  #doesNotContain（String，String，String）}
	 */
	@Deprecated
	public static void doesNotContain(@Nullable String textToSearch, String substring) {
		doesNotContain(textToSearch, substring,
				() -> "[Assertion failed] - this String argument must not contain the substring [" + substring + "]");
	}

	/**
	 * Assert that an array contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * <pre class="code">Assert.notEmpty(array, "The array must contain elements");</pre>
	 * @param array the array to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the object array is {@code null} or contains no elements
	 */
	/**
	 * 断言一个数组包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  <pre class ="code"> Assert.notEmpty（array，"该数组必须包含元素"）; </ pre> 
	 * @param  array该数组检查
	 * @param 消息，如果断言失败，则使用异常消息
	 * @throws  IllegalArgumentException如果对象数组为{@code  null}或不包含任何元素
	 */
	public static void notEmpty(@Nullable Object[] array, String message) {
		if (ObjectUtils.isEmpty(array)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that an array contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * <pre class="code">
	 * Assert.notEmpty(array, () -&gt; "The " + arrayType + " array must contain elements");
	 * </pre>
	 * @param array the array to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the object array is {@code null} or contains no elements
	 * @since 5.0
	 */
	/**
	 * 断言一个数组包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  <pre class ="code"> Assert.notEmpty（array，（）->""+ arrayType +"数组必须包含元素"）; </ pre> 
	 * @param 数组，以检查
	 * @param  message如果断言失败，则向供应商提供异常消息使用的供应商
	 * @throws  IllegalArgumentException如果对象数组为{@code  null}或不包含自5.0起
	 */
	public static void notEmpty(@Nullable Object[] array, Supplier<String> messageSupplier) {
		if (ObjectUtils.isEmpty(array)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that an array contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Object[], String)}
	 */
	/**
	 * 断言一个数组包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  @自4.3.7起弃用，推荐使用{@link  #notEmpty（Object []，String）}
	 */
	@Deprecated
	public static void notEmpty(@Nullable Object[] array) {
		notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element");
	}

	/**
	 * Assert that an array contains no {@code null} elements.
	 * <p>Note: Does not complain if the array is empty!
	 * <pre class="code">Assert.noNullElements(array, "The array must contain non-null elements");</pre>
	 * @param array the array to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the object array contains a {@code null} element
	 */
	/**
	 * 断言一个数组不包含任何{@code  null}元素。 
	 *  <p>注意：如果数组为空，不要抱怨！ 
	 *  <pre class ="code"> Assert.noNullElements（array，"该数组必须包含非null元素"）； 
	 *  </ pre> 
	 * @param 数组以检查
	 * @param 消息，如果出现以下情况则使用异常消息如果对象数组包含{@code  null}元素，则断言
	 * @throws  IllegalArgumentException
	 */
	public static void noNullElements(@Nullable Object[] array, String message) {
		if (array != null) {
			for (Object element : array) {
				if (element == null) {
					throw new IllegalArgumentException(message);
				}
			}
		}
	}

	/**
	 * Assert that an array contains no {@code null} elements.
	 * <p>Note: Does not complain if the array is empty!
	 * <pre class="code">
	 * Assert.noNullElements(array, () -&gt; "The " + arrayType + " array must contain non-null elements");
	 * </pre>
	 * @param array the array to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the object array contains a {@code null} element
	 * @since 5.0
	 */
	/**
	 * 断言一个数组不包含任何{@code  null}元素。 
	 *  <p>注意：如果数组为空，不要抱怨！ 
	 *  <pre class ="code"> Assert.noNullElements（array，（）->""+ arrayType +"数组必须包含非null元素"）； 
	 *  </ pre> 
	 * @param 数组，以检查
	 * @param  message如果断言失败，则为供应商提供异常消息使用的供应商
	 * @throws  IllegalArgumentException如果对象数组包含{@code  null}元素@从5.0开始
	 */
	public static void noNullElements(@Nullable Object[] array, Supplier<String> messageSupplier) {
		if (array != null) {
			for (Object element : array) {
				if (element == null) {
					throw new IllegalArgumentException(nullSafeGet(messageSupplier));
				}
			}
		}
	}

	/**
	 * Assert that an array contains no {@code null} elements.
	 * @deprecated as of 4.3.7, in favor of {@link #noNullElements(Object[], String)}
	 */
	/**
	 * 断言一个数组不包含任何{@code  null}元素。 
	 *  @自4.3.7起不推荐使用，而推荐使用{@link  #noNullElements（Object []，String）}
	 */
	@Deprecated
	public static void noNullElements(@Nullable Object[] array) {
		noNullElements(array, "[Assertion failed] - this array must not contain any null elements");
	}

	/**
	 * Assert that a collection contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * <pre class="code">Assert.notEmpty(collection, "Collection must contain elements");</pre>
	 * @param collection the collection to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the collection is {@code null} or
	 * contains no elements
	 */
	/**
	 * 断言一个集合包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  <pre class ="code"> Assert.notEmpty（集合，"集合必须包含元素"）； 
	 *  </ pre> 
	 * @param 收集集合以检查
	 * @param 消息，如果断言失败，则使用异常消息
	 * @throws  IllegalArgumentException如果集合为{@code  null}或不包含任何元素
	 */
	public static void notEmpty(@Nullable Collection<?> collection, String message) {
		if (CollectionUtils.isEmpty(collection)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that a collection contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * <pre class="code">
	 * Assert.notEmpty(collection, () -&gt; "The " + collectionType + " collection must contain elements");
	 * </pre>
	 * @param collection the collection to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the collection is {@code null} or
	 * contains no elements
	 * @since 5.0
	 */
	/**
	 * 断言一个集合包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  <pre class ="code"> Assert.notEmpty（collection，（）->""+ collectionType +"集合必须包含元素"）； 
	 *  </ pre> 
	 * @param 收集集合以检查
	 * @param  message如果断言失败，则向供应商提供异常消息使用的异常消息
	 * @throws  IllegalArgumentException如果集合为{@code  null}或不包含任何元素@5.0起
	 */
	public static void notEmpty(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {
		if (CollectionUtils.isEmpty(collection)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that a collection contains elements; that is, it must not be
	 * {@code null} and must contain at least one element.
	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Collection, String)}
	 */
	/**
	 * 断言一个集合包含元素； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个元素。 
	 *  @自4.3.7起不推荐使用，而推荐使用{@link  #notEmpty（Collection，String）}
	 */
	@Deprecated
	public static void notEmpty(@Nullable Collection<?> collection) {
		notEmpty(collection,
				"[Assertion failed] - this collection must not be empty: it must contain at least 1 element");
	}

	/**
	 * Assert that a collection contains no {@code null} elements.
	 * <p>Note: Does not complain if the collection is empty!
	 * <pre class="code">Assert.noNullElements(collection, "Collection must contain non-null elements");</pre>
	 * @param collection the collection to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the collection contains a {@code null} element
	 * @since 5.2
	 */
	/**
	 * 断言一个集合不包含{@code  null}元素。 
	 *  <p>注意：如果集合为空，请不要抱怨！ 
	 *  <pre class ="code"> Assert.noNullElements（集合，"集合必须包含非空元素"）； 
	 *  </ pre> 
	 * @param 收集集合以检查
	 * @param 消息，如果出现异常消息，则使用如果集合包含{@code  null}元素，则断言
	 * @throws  IllegalArgumentException自5.2起
	 */
	public static void noNullElements(@Nullable Collection<?> collection, String message) {
		if (collection != null) {
			for (Object element : collection) {
				if (element == null) {
					throw new IllegalArgumentException(message);
				}
			}
		}
	}

	/**
	 * Assert that a collection contains no {@code null} elements.
	 * <p>Note: Does not complain if the collection is empty!
	 * <pre class="code">
	 * Assert.noNullElements(collection, () -&gt; "Collection " + collectionName + " must contain non-null elements");
	 * </pre>
	 * @param collection the collection to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the collection contains a {@code null} element
	 * @since 5.2
	 */
	/**
	 * 断言一个集合不包含{@code  null}元素。 
	 *  <p>注意：如果集合为空，请不要抱怨！ 
	 *  <pre class ="code"> Assert.noNullElements（collection，（）->"Collection"+ collectionName +"必须包含非null元素"）; </ pre> 
	 * @param 收集集合以检查
	 * @param  message如果断言失败，则向供应商提供异常消息使用的异常消息
	 * @throws  IllegalArgumentException如果集合包含{@code  null}元素@since 5.2
	 */
	public static void noNullElements(@Nullable Collection<?> collection, Supplier<String> messageSupplier) {
		if (collection != null) {
			for (Object element : collection) {
				if (element == null) {
					throw new IllegalArgumentException(nullSafeGet(messageSupplier));
				}
			}
		}
	}

	/**
	 * Assert that a Map contains entries; that is, it must not be {@code null}
	 * and must contain at least one entry.
	 * <pre class="code">Assert.notEmpty(map, "Map must contain entries");</pre>
	 * @param map the map to check
	 * @param message the exception message to use if the assertion fails
	 * @throws IllegalArgumentException if the map is {@code null} or contains no entries
	 */
	/**
	 * 断言地图包含条目； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个条目。 
	 *  <pre class ="code"> Assert.notEmpty（地图，"地图必须包含条目"）； 
	 *  </ pre> 
	 * @param 映射地图以检查
	 * @param 消息，如果断言失败，则使用异常消息
	 * @throws  IllegalArgumentException如果映射为{@code  null}或不包含任何条目
	 */
	public static void notEmpty(@Nullable Map<?, ?> map, String message) {
		if (CollectionUtils.isEmpty(map)) {
			throw new IllegalArgumentException(message);
		}
	}

	/**
	 * Assert that a Map contains entries; that is, it must not be {@code null}
	 * and must contain at least one entry.
	 * <pre class="code">
	 * Assert.notEmpty(map, () -&gt; "The " + mapType + " map must contain entries");
	 * </pre>
	 * @param map the map to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails
	 * @throws IllegalArgumentException if the map is {@code null} or contains no entries
	 * @since 5.0
	 */
	/**
	 * 断言地图包含条目； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个条目。 
	 *  <pre class ="code"> Assert.notEmpty（map，（）->""+ mapType +"地图必须包含条目"）； 
	 *  </ pre> 
	 * @param 映射映射以检查
	 * @param  message如果声明失败，则为供应商提供要使用的异常消息
	 * @throws  IllegalArgumentException如果映射为{@code  null}或不包含任何条目@5.0起
	 */
	public static void notEmpty(@Nullable Map<?, ?> map, Supplier<String> messageSupplier) {
		if (CollectionUtils.isEmpty(map)) {
			throw new IllegalArgumentException(nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that a Map contains entries; that is, it must not be {@code null}
	 * and must contain at least one entry.
	 * @deprecated as of 4.3.7, in favor of {@link #notEmpty(Map, String)}
	 */
	/**
	 * 断言地图包含条目； 
	 * 也就是说，它不能为{@code  null}，并且必须至少包含一个条目。 
	 *  @自4.3.7起弃用，推荐使用{@link  #notEmpty（Map，String）}
	 */
	@Deprecated
	public static void notEmpty(@Nullable Map<?, ?> map) {
		notEmpty(map, "[Assertion failed] - this map must not be empty; it must contain at least one entry");
	}

	/**
	 * Assert that the provided object is an instance of the provided class.
	 * <pre class="code">Assert.instanceOf(Foo.class, foo, "Foo expected");</pre>
	 * @param type the type to check against
	 * @param obj the object to check
	 * @param message a message which will be prepended to provide further context.
	 * If it is empty or ends in ":" or ";" or "," or ".", a full exception message
	 * will be appended. If it ends in a space, the name of the offending object's
	 * type will be appended. In any other case, a ":" with a space and the name
	 * of the offending object's type will be appended.
	 * @throws IllegalArgumentException if the object is not an instance of type
	 */
	/**
	 * 断言所提供的对象是所提供类的实例。 
	 *  <pre class ="code"> Assert.instanceOf（Foo.class，foo，"期望Foo"）; </ pre> 
	 * @param 键入要检查的类型
	 * @param  obj要检查的对象<
	 * @param > message一条消息，它将被提供以提供进一步的上下文。 
	 * 如果为空或以"："或";"结尾或"，"或"。 
	 * "，将附加完整的异常消息。 
	 * 如果以空格结尾，则将附加违规对象类型的名称。 
	 * 在任何其他情况下，都将附加带有空格和违规对象类型名称的"："。 
	 *  
	 * @throws  IllegalArgumentException如果对象不是类型的实例
	 */
	public static void isInstanceOf(Class<?> type, @Nullable Object obj, String message) {
		notNull(type, "Type to check against must not be null");
		if (!type.isInstance(obj)) {
			instanceCheckFailed(type, obj, message);
		}
	}

	/**
	 * Assert that the provided object is an instance of the provided class.
	 * <pre class="code">
	 * Assert.instanceOf(Foo.class, foo, () -&gt; "Processing " + Foo.class.getSimpleName() + ":");
	 * </pre>
	 * @param type the type to check against
	 * @param obj the object to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails. See {@link #isInstanceOf(Class, Object, String)} for details.
	 * @throws IllegalArgumentException if the object is not an instance of type
	 * @since 5.0
	 */
	/**
	 * 断言所提供的对象是所提供类的实例。 
	 *  <pre class ="code"> Assert.instanceOf（Foo.class，foo，（）->"处理"+ Foo.class.getSimpleName（）+"："）; </ pre> 
	 * @param 键入要与
	 * @param  obj进行检查的对象，以检查
	 * @param  message对象。 
	 * 为供应商提供断言失败时要使用的异常消息。 
	 * 有关详细信息，请参见{@link  #isInstanceOf（Class，Object，String）}。 
	 *  
	 * @throws  IllegalArgumentException如果对象不是@since 5.0类型的实例
	 */
	public static void isInstanceOf(Class<?> type, @Nullable Object obj, Supplier<String> messageSupplier) {
		notNull(type, "Type to check against must not be null");
		if (!type.isInstance(obj)) {
			instanceCheckFailed(type, obj, nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that the provided object is an instance of the provided class.
	 * <pre class="code">Assert.instanceOf(Foo.class, foo);</pre>
	 * @param type the type to check against
	 * @param obj the object to check
	 * @throws IllegalArgumentException if the object is not an instance of type
	 */
	/**
	 * 断言所提供的对象是所提供类的实例。 
	 *  <pre class ="code"> Assert.instanceOf（Foo.class，foo）; </ pre> 
	 * @param 键入用于检查
	 * @param  obj的对象，然后检查对象
	 * @throws  IllegalArgumentException不是type的实例
	 */
	public static void isInstanceOf(Class<?> type, @Nullable Object obj) {
		isInstanceOf(type, obj, "");
	}

	/**
	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.
	 * <pre class="code">Assert.isAssignable(Number.class, myClass, "Number expected");</pre>
	 * @param superType the super type to check against
	 * @param subType the sub type to check
	 * @param message a message which will be prepended to provide further context.
	 * If it is empty or ends in ":" or ";" or "," or ".", a full exception message
	 * will be appended. If it ends in a space, the name of the offending sub type
	 * will be appended. In any other case, a ":" with a space and the name of the
	 * offending sub type will be appended.
	 * @throws IllegalArgumentException if the classes are not assignable
	 */
	/**
	 * 断言{@code  superType.isAssignableFrom（subType）}为{@code  true}。 
	 *  <pre class ="code"> Assert.isAssignable（Number.class，myClass，"期望的数字"）; </ pre> 
	 * @param  superType要检查的超级类型
	 * @param  subType要检查的子类型
	 * @param  message一条消息，它将被提供以提供进一步的上下文。 
	 * 如果为空或以"："或";"结尾或"，"或"。 
	 * "，将附加完整的异常消息。 
	 * 如果以空格结尾，则会添加有问题的子类型的名称。 
	 * 在任何其他情况下，都将附加带有空格和有问题的子类型名称的"："。 
	 *  
	 * @throws  IllegalArgumentException如果类不可分配
	 */
	public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, String message) {
		notNull(superType, "Super type to check against must not be null");
		if (subType == null || !superType.isAssignableFrom(subType)) {
			assignableCheckFailed(superType, subType, message);
		}
	}

	/**
	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.
	 * <pre class="code">
	 * Assert.isAssignable(Number.class, myClass, () -&gt; "Processing " + myAttributeName + ":");
	 * </pre>
	 * @param superType the super type to check against
	 * @param subType the sub type to check
	 * @param messageSupplier a supplier for the exception message to use if the
	 * assertion fails. See {@link #isAssignable(Class, Class, String)} for details.
	 * @throws IllegalArgumentException if the classes are not assignable
	 * @since 5.0
	 */
	/**
	 * 断言{@code  superType.isAssignableFrom（subType）}为{@code  true}。 
	 *  <pre class ="code"> Assert.isAssignable（Number.class，myClass，（）->"正在处理"+ myAttributeName +"："）; </ pre> 
	 * @param  superType用来检查
	 * @param 的超级类型subtype用来检查
	 * @param 消息的子类型供应商为供应商提供断言失败时要使用的异常消息。 
	 * 有关详细信息，请参见{@link  #isAssignable（Class，Class，String）}。 
	 *  
	 * @throws  IllegalArgumentException如果类不可分配@自5.0起
	 */
	public static void isAssignable(Class<?> superType, @Nullable Class<?> subType, Supplier<String> messageSupplier) {
		notNull(superType, "Super type to check against must not be null");
		if (subType == null || !superType.isAssignableFrom(subType)) {
			assignableCheckFailed(superType, subType, nullSafeGet(messageSupplier));
		}
	}

	/**
	 * Assert that {@code superType.isAssignableFrom(subType)} is {@code true}.
	 * <pre class="code">Assert.isAssignable(Number.class, myClass);</pre>
	 * @param superType the super type to check
	 * @param subType the sub type to check
	 * @throws IllegalArgumentException if the classes are not assignable
	 */
	/**
	 * 断言{@code  superType.isAssignableFrom（subType）}为{@code  true}。 
	 *  <pre class ="code"> Assert.isAssignable（Number.class，myClass）; </ pre> 
	 * @param  superType要检查的超级类型
	 * @param 子类型要检查
	 * @throws 的子类型IllegalArgumentException类不可分配
	 */
	public static void isAssignable(Class<?> superType, Class<?> subType) {
		isAssignable(superType, subType, "");
	}


	private static void instanceCheckFailed(Class<?> type, @Nullable Object obj, @Nullable String msg) {
		String className = (obj != null ? obj.getClass().getName() : "null");
		String result = "";
		boolean defaultMessage = true;
		if (StringUtils.hasLength(msg)) {
			if (endsWithSeparator(msg)) {
				result = msg + " ";
			}
			else {
				result = messageWithTypeName(msg, className);
				defaultMessage = false;
			}
		}
		if (defaultMessage) {
			result = result + ("Object of class [" + className + "] must be an instance of " + type);
		}
		throw new IllegalArgumentException(result);
	}

	private static void assignableCheckFailed(Class<?> superType, @Nullable Class<?> subType, @Nullable String msg) {
		String result = "";
		boolean defaultMessage = true;
		if (StringUtils.hasLength(msg)) {
			if (endsWithSeparator(msg)) {
				result = msg + " ";
			}
			else {
				result = messageWithTypeName(msg, subType);
				defaultMessage = false;
			}
		}
		if (defaultMessage) {
			result = result + (subType + " is not assignable to " + superType);
		}
		throw new IllegalArgumentException(result);
	}

	private static boolean endsWithSeparator(String msg) {
		return (msg.endsWith(":") || msg.endsWith(";") || msg.endsWith(",") || msg.endsWith("."));
	}

	private static String messageWithTypeName(String msg, @Nullable Object typeName) {
		return msg + (msg.endsWith(" ") ? "" : ": ") + typeName;
	}

	@Nullable
	private static String nullSafeGet(@Nullable Supplier<String> messageSupplier) {
		return (messageSupplier != null ? messageSupplier.get() : null);
	}

}
