/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util.comparator;

import java.util.Comparator;

/**
 * Convenient entry point with generically typed factory methods
 * for common Spring {@link Comparator} variants.
 *
 * @author Juergen Hoeller
 * @since 5.0
 */
/**
 * 通用Spring {@link  Comparator}变体的通用类型化工厂方法的便捷入口点。 
 *  @author  Juergen Hoeller @从5.0开始
 */
public abstract class Comparators {

	/**
	 * Return a {@link Comparable} adapter.
	 * @see ComparableComparator#INSTANCE
	 */
	/**
	 * 返回一个{@link  Comparable}适配器。 
	 *  
	 * @see  ComparableComparator＃INSTANCE
	 */
	@SuppressWarnings("unchecked")
	public static <T> Comparator<T> comparable() {
		return ComparableComparator.INSTANCE;
	}

	/**
	 * Return a {@link Comparable} adapter which accepts
	 * null values and sorts them lower than non-null values.
	 * @see NullSafeComparator#NULLS_LOW
	 */
	/**
	 * 返回一个{@link  Comparable}适配器，该适配器接受空值并将它们排序为小于非空值。 
	 *  
	 * @see  NullSafeComparator＃NULLS_LOW
	 */
	@SuppressWarnings("unchecked")
	public static <T> Comparator<T> nullsLow() {
		return NullSafeComparator.NULLS_LOW;
	}

	/**
	 * Return a decorator for the given comparator which accepts
	 * null values and sorts them lower than non-null values.
	 * @see NullSafeComparator#NullSafeComparator(boolean)
	 */
	/**
	 * 返回给定比较器的装饰器，该装饰器接受空值并将其排序为比非空值低的值。 
	 *  
	 * @see  NullSafeComparator＃NullSafeComparator（布尔值）
	 */
	public static <T> Comparator<T> nullsLow(Comparator<T> comparator) {
		return new NullSafeComparator<>(comparator, true);
	}

	/**
	 * Return a {@link Comparable} adapter which accepts
	 * null values and sorts them higher than non-null values.
	 * @see NullSafeComparator#NULLS_HIGH
	 */
	/**
	 * 返回一个{@link  Comparable}适配器，该适配器接受空值并将它们排序为高于非空值。 
	 *  
	 * @see  NullSafeComparator＃NULLS_HIGH
	 */
	@SuppressWarnings("unchecked")
	public static <T> Comparator<T> nullsHigh() {
		return NullSafeComparator.NULLS_HIGH;
	}

	/**
	 * Return a decorator for the given comparator which accepts
	 * null values and sorts them higher than non-null values.
	 * @see NullSafeComparator#NullSafeComparator(boolean)
	 */
	/**
	 * 返回给定比较器的装饰器，该装饰器接受空值并将它们排序为高于非空值。 
	 *  
	 * @see  NullSafeComparator＃NullSafeComparator（布尔值）
	 */
	public static <T> Comparator<T> nullsHigh(Comparator<T> comparator) {
		return new NullSafeComparator<>(comparator, false);
	}

}
