/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.util.Comparator;
import java.util.Map;

/**
 * Strategy interface for {@code String}-based path matching.
 *
 * <p>Used by {@link org.springframework.core.io.support.PathMatchingResourcePatternResolver},
 * {@link org.springframework.web.servlet.handler.AbstractUrlHandlerMapping},
 * and {@link org.springframework.web.servlet.mvc.WebContentInterceptor}.
 *
 * <p>The default implementation is {@link AntPathMatcher}, supporting the
 * Ant-style pattern syntax.
 *
 * @author Juergen Hoeller
 * @since 1.2
 * @see AntPathMatcher
 */
/**
 * 基于{@code  String}的路径匹配的策略接口。 
 *  <p>由{@link  org.springframework.core.io.support.PathMatchingResourcePatternResolver}，{<@link> org.springframework.web.servlet.handler.AbstractUrlHandlerMapping}和{@link  org.springframework .web.servlet.mvc.WebContentInterceptor}。 
 *  <p>默认实现是{@link  AntPathMatcher}，支持Ant样式模式语法。 
 *  @author  Juergen Hoeller @始于1.2 
 * @see  AntPathMatcher
 */
public interface PathMatcher {

	/**
	 * Does the given {@code path} represent a pattern that can be matched
	 * by an implementation of this interface?
	 * <p>If the return value is {@code false}, then the {@link #match}
	 * method does not have to be used because direct equality comparisons
	 * on the static path Strings will lead to the same result.
	 * @param path the path to check
	 * @return {@code true} if the given {@code path} represents a pattern
	 */
	/**
	 * 给定的{@code 路径}是否表示可以通过此接口的实现匹配的模式？ <p>如果返回值为{@code  false}，则不必使用{@link  #match}方法，因为在静态路径Strings上进行直接相等比较将得出相同的结果。 
	 *  
	 * @param 路径如果给定的{@code 路径}表示模式，则要检查
	 * @return  {@code  true}的路径
	 */
	boolean isPattern(String path);

	/**
	 * Match the given {@code path} against the given {@code pattern},
	 * according to this PathMatcher's matching strategy.
	 * @param pattern the pattern to match against
	 * @param path the path to test
	 * @return {@code true} if the supplied {@code path} matched,
	 * {@code false} if it didn't
	 */
	/**
	 * 根据此PathMatcher的匹配策略，将给定的{@code 路径}与给定的{@code 模式}进行匹配。 
	 *  
	 * @param 将模式匹配到
	 * @param 路径以测试路径
	 * @return  {@code  true}如果提供的{@code  path}匹配，则{@@code> false}它没有
	 */
	boolean match(String pattern, String path);

	/**
	 * Match the given {@code path} against the corresponding part of the given
	 * {@code pattern}, according to this PathMatcher's matching strategy.
	 * <p>Determines whether the pattern at least matches as far as the given base
	 * path goes, assuming that a full path may then match as well.
	 * @param pattern the pattern to match against
	 * @param path the path to test
	 * @return {@code true} if the supplied {@code path} matched,
	 * {@code false} if it didn't
	 */
	/**
	 * 根据此PathMatcher的匹配策略，将给定的{@code 路径}与给定的{@code 模式}的对应部分进行匹配。 
	 *  <p>确定模式是否至少匹配给定的基本路径，并假设一条完整路径也可以匹配。 
	 *  
	 * @param 将模式匹配到
	 * @param 路径以测试路径
	 * @return  {@code  true}如果提供的{@code  path}匹配，则{@@code> false}它没有
	 */
	boolean matchStart(String pattern, String path);

	/**
	 * Given a pattern and a full path, determine the pattern-mapped part.
	 * <p>This method is supposed to find out which part of the path is matched
	 * dynamically through an actual pattern, that is, it strips off a statically
	 * defined leading path from the given full path, returning only the actually
	 * pattern-matched part of the path.
	 * <p>For example: For "myroot/*.html" as pattern and "myroot/myfile.html"
	 * as full path, this method should return "myfile.html". The detailed
	 * determination rules are specified to this PathMatcher's matching strategy.
	 * <p>A simple implementation may return the given full path as-is in case
	 * of an actual pattern, and the empty String in case of the pattern not
	 * containing any dynamic parts (i.e. the {@code pattern} parameter being
	 * a static path that wouldn't qualify as an actual {@link #isPattern pattern}).
	 * A sophisticated implementation will differentiate between the static parts
	 * and the dynamic parts of the given path pattern.
	 * @param pattern the path pattern
	 * @param path the full path to introspect
	 * @return the pattern-mapped part of the given {@code path}
	 * (never {@code null})
	 */
	/**
	 * 给定图案和完整路径，请确定图案映射的零件。 
	 *  <p>该方法应该找出通过实际模式动态匹配路径的哪一部分，也就是说，它从给定的完整路径中剥离静态定义的引导路径，仅返回实际模式匹配的部分。 
	 * 路径。 
	 *  <p>例如：对于"myroot .html"作为模式，"myroot / myfile.html"作为完整路径，此方法应返回"myfile.html"。 
	 * 详细的确定规则已指定为此PathMatcher的匹配策略。 
	 *  <p>如果是实际模式，简单的实现可以按原样返回给定的完整路径，如果模式不包含任何动态部分（即{@code  pattern}参数为静态），则为空String不符合实际{@link  #isPattern模式}的路径。 
	 * 一个复杂的实现将区分给定路径模式的静态部分和动态部分。 
	 *  
	 * @param 模式路径模式
	 * @param 路径用于内省的完整路径
	 * @return 给定{@code 路径}的模式映射部分（绝不{<@@code> null}）
	 */
	String extractPathWithinPattern(String pattern, String path);

	/**
	 * Given a pattern and a full path, extract the URI template variables. URI template
	 * variables are expressed through curly brackets ('{' and '}').
	 * <p>For example: For pattern "/hotels/{hotel}" and path "/hotels/1", this method will
	 * return a map containing "hotel"->"1".
	 * @param pattern the path pattern, possibly containing URI templates
	 * @param path the full path to extract template variables from
	 * @return a map, containing variable names as keys; variables values as values
	 */
	/**
	 * 给定模式和完整路径，请提取URI模板变量。 
	 *  URI模板变量通过大括号（"{"和"}"）表示。 
	 *  <p>例如：对于模式"/ hotels / {hotel}"和路径"/ hotels / 1"，此方法将返回包含"hotel"->"1"的地图。 
	 *  
	 * @param 模式化路径模式，可能包含URI模板。 
	 * 
	 * @param  path是从
	 * @return 映射中提取模板变量的完整路径，其中包含变量名作为键； 
	 * 将变量值作为值
	 */
	Map<String, String> extractUriTemplateVariables(String pattern, String path);

	/**
	 * Given a full path, returns a {@link Comparator} suitable for sorting patterns
	 * in order of explicitness for that path.
	 * <p>The full algorithm used depends on the underlying implementation,
	 * but generally, the returned {@code Comparator} will
	 * {@linkplain java.util.List#sort(java.util.Comparator) sort}
	 * a list so that more specific patterns come before generic patterns.
	 * @param path the full path to use for comparison
	 * @return a comparator capable of sorting patterns in order of explicitness
	 */
	/**
	 * 给定完整路径后，将返回一个{@link  Comparator}，适用于按该路径的显式顺序对模式进行排序。 
	 *  <p>使用的完整算法取决于基础实现，但是通常，返回的{@code  Comparator}将{@link  plain java.util.List＃sort（java.util.Comparator）sort}列表因此，更具体的模式要比通用模式先出现。 
	 *  
	 * @param  path用于比较的完整路径
	 * @return 一个能够按显式顺序对模式进行排序的比较器
	 */
	Comparator<String> getPatternComparator(String path);

	/**
	 * Combines two patterns into a new pattern that is returned.
	 * <p>The full algorithm used for combining the two pattern depends on the underlying implementation.
	 * @param pattern1 the first pattern
	 * @param pattern2 the second pattern
	 * @return the combination of the two patterns
	 * @throws IllegalArgumentException when the two patterns cannot be combined
	 */
	/**
	 * 将两个模式组合成一个返回的新模式。 
	 *  <p>用于组合两种模式的完整算法取决于基础实现。 
	 *  
	 * @param  pattern1第一个模式
	 * @param  pattern2第二个模式
	 * @return 两个模式的组合
	 * @throws  IllegalArgumentException当两个模式无法组合时
	 */
	String combine(String pattern1, String pattern2);

}
