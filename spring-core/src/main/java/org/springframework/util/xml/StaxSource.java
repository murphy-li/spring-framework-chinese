/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util.xml;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.sax.SAXSource;

import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import org.springframework.lang.Nullable;

/**
 * Implementation of the {@code Source} tagging interface for StAX readers. Can be constructed with
 * an {@code XMLEventReader} or an {@code XMLStreamReader}.
 *
 * <p>This class is necessary because there is no implementation of {@code Source} for StAX Readers
 * in JAXP 1.3. There is a {@code StAXSource} in JAXP 1.4 (JDK 1.6), but this class is kept around
 * for backwards compatibility reasons.
 *
 * <p>Even though {@code StaxSource} extends from {@code SAXSource}, calling the methods of
 * {@code SAXSource} is <strong>not supported</strong>. In general, the only supported operation
 * on this class is to use the {@code XMLReader} obtained via {@link #getXMLReader()} to parse the
 * input source obtained via {@link #getInputSource()}. Calling {@link #setXMLReader(XMLReader)}
 * or {@link #setInputSource(InputSource)} will result in {@code UnsupportedOperationException #setInputSource(InputSource)} will result in {@code UnsupportedOperationExceptions}.
 *
 * @author Arjen Poutsma
 * @since 3.0
 * @see XMLEventReader
 * @see XMLStreamReader
 * @see javax.xml.transform.Transformer
 */
/**
 * 用于StAX阅读器的{@code  Source}标记接口的实现。 
 * 可以使用{@code  XMLEventReader}或{@code  XMLStreamReader}构造。 
 *  <p>此类是必需的，因为JAXP 1.3中没有针对StAX Readers的{@code  Source}实现。 
 *  JAXP 1.4（JDK 1.6）中有一个{@code  StAXSource}，但是出于向后兼容的原因而保留了此类。 
 *  <p>即使{@code  StaxSource}从{@code  SAXSource}扩展而来，<strong>不支持调用{@code  SAXSource}的方法</ strong>。 
 * 通常，此类的唯一受支持的操作是使用通过{@link  #getXMLReader（）}获得的{@code  XMLReader}来解析通过{@link  #getInputSource（）}获得的输入源。 
 *  。 
 * 调用{@link  #setXMLReader（XMLReader）}或{@link  #setInputSource（InputSource）}将导致{@code  UnsupportedOperationException #setInputSource（InputSource）}将导致{@code  UnsupportedOperationExceptions}。 
 *  @author  Arjen Poutsma @从3.0开始
 * @see  XMLEventReader 
 * @see  XMLStreamReader 
 * @see  javax.xml.transform.Transformer
 */
class StaxSource extends SAXSource {

	@Nullable
	private XMLEventReader eventReader;

	@Nullable
	private XMLStreamReader streamReader;


	/**
	 * Construct a new instance of the {@code StaxSource} with the specified {@code XMLEventReader}.
	 * The supplied event reader must be in {@code XMLStreamConstants.START_DOCUMENT} or
	 * {@code XMLStreamConstants.START_ELEMENT} state.
	 * @param eventReader the {@code XMLEventReader} to read from
	 * @throws IllegalStateException if the reader is not at the start of a document or element
	 */
	/**
	 * 使用指定的{@code  XMLEventReader}构造{@code  StaxSource}的新实例。 
	 * 提供的事件阅读器必须处于{@code  XMLStreamConstants.START_DOCUMENT}或{@code  XMLStreamConstants.START_ELEMENT}状态。 
	 *  
	 * @param  eventReader {{@@code> XMLEventReader}，如果读取器不在文档或元素的开头，则从
	 * @throws  IllegalStateException中读取
	 */
	StaxSource(XMLEventReader eventReader) {
		super(new StaxEventXMLReader(eventReader), new InputSource());
		this.eventReader = eventReader;
	}

	/**
	 * Construct a new instance of the {@code StaxSource} with the specified {@code XMLStreamReader}.
	 * The supplied stream reader must be in {@code XMLStreamConstants.START_DOCUMENT} or
	 * {@code XMLStreamConstants.START_ELEMENT} state.
	 * @param streamReader the {@code XMLStreamReader} to read from
	 * @throws IllegalStateException if the reader is not at the start of a document or element
	 */
	/**
	 * 使用指定的{@code  XMLStreamReader}构造{@code  StaxSource}的新实例。 
	 * 提供的流阅读器必须处于{@code  XMLStreamConstants.START_DOCUMENT}或{@code  XMLStreamConstants.START_ELEMENT}状态。 
	 *  
	 * @param  streamReader {{@@code> XMLStreamReader}要从
	 * @throws  IllegalStateException读取，如果阅读器不在文档或元素的开头
	 */
	StaxSource(XMLStreamReader streamReader) {
		super(new StaxStreamXMLReader(streamReader), new InputSource());
		this.streamReader = streamReader;
	}


	/**
	 * Return the {@code XMLEventReader} used by this {@code StaxSource}.
	 * <p>If this {@code StaxSource} was created with an {@code XMLStreamReader},
	 * the result will be {@code null}.
	 * @return the StAX event reader used by this source
	 * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)
	 */
	/**
	 * 返回此{@code  StaxSource}使用的{@code  XMLEventReader}。 
	 *  <p>如果此{@code  StaxSource}是使用{@code  XMLStreamReader}创建的，则结果将为{@code  null}。 
	 *  
	 * @return 此源使用的StAX事件阅读器
	 * @see  StaxSource＃StaxSource（javax.xml.stream.XMLEventReader）
	 */
	@Nullable
	XMLEventReader getXMLEventReader() {
		return this.eventReader;
	}

	/**
	 * Return the {@code XMLStreamReader} used by this {@code StaxSource}.
	 * <p>If this {@code StaxSource} was created with an {@code XMLEventReader},
	 * the result will be {@code null}.
	 * @return the StAX event reader used by this source
	 * @see StaxSource#StaxSource(javax.xml.stream.XMLEventReader)
	 */
	/**
	 * 返回此{@code  StaxSource}使用的{@code  XMLStreamReader}。 
	 *  <p>如果此{@code  StaxSource}是使用{@code  XMLEventReader}创建的，则结果将为{@code  null}。 
	 *  
	 * @return 此源使用的StAX事件阅读器
	 * @see  StaxSource＃StaxSource（javax.xml.stream.XMLEventReader）
	 */
	@Nullable
	XMLStreamReader getXMLStreamReader() {
		return this.streamReader;
	}


	/**
	 * Throws an {@code UnsupportedOperationException}.
	 * @throws UnsupportedOperationException always
	 */
	/**
	 * 引发{@code  UnsupportedOperationException}。 
	 *  
	 * @throws 总是UnsupportedOperationException
	 */
	@Override
	public void setInputSource(InputSource inputSource) {
		throw new UnsupportedOperationException("setInputSource is not supported");
	}

	/**
	 * Throws an {@code UnsupportedOperationException}.
	 * @throws UnsupportedOperationException always
	 */
	/**
	 * 引发{@code  UnsupportedOperationException}。 
	 *  
	 * @throws 总是UnsupportedOperationException
	 */
	@Override
	public void setXMLReader(XMLReader reader) {
		throw new UnsupportedOperationException("setXMLReader is not supported");
	}

}
