/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util.xml;

import java.util.List;
import java.util.function.Supplier;

import javax.xml.stream.XMLEventFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLResolver;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.stax.StAXResult;
import javax.xml.transform.stax.StAXSource;

import org.xml.sax.ContentHandler;
import org.xml.sax.XMLReader;

import org.springframework.lang.Nullable;
import org.springframework.util.StreamUtils;

/**
 * Convenience methods for working with the StAX API. Partly historic due to JAXP 1.3
 * compatibility; as of Spring 4.0, relying on JAXP 1.4 as included in JDK 1.6 and higher.
 *
 * <p>In particular, methods for using StAX ({@code javax.xml.stream}) in combination with
 * the TrAX API ({@code javax.xml.transform}), and converting StAX readers/writers into SAX
 * readers/handlers and vice-versa.
 *
 * @author Arjen Poutsma
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 使用StAX API的便捷方法。 
 * 由于具有JAXP 1.3兼容性，部分具有历史意义； 
 * 从Spring 4.0开始，依赖于JDK 1.6及更高版本中包含的JAXP 1.4。 
 *  <p>尤其是将StAX（{@code  javax.xml.stream}）与TrAX API（{@code  javax.xml.transform}）结合使用并将StAX读取器/写入器转换为SAX读取器/处理程序，反之亦然。 
 *  @author  Arjen Poutsma @author  Juergen Hoeller @从3.0开始
 */
public abstract class StaxUtils {

	private static final XMLResolver NO_OP_XML_RESOLVER =
			(publicID, systemID, base, ns) -> StreamUtils.emptyInput();


	/**
	 * Create an {@link XMLInputFactory} with Spring's defensive setup,
	 * i.e. no support for the resolution of DTDs and external entities.
	 * @return a new defensively initialized input factory instance to use
	 * @since 5.0
	 */
	/**
	 * 使用Spring的防御性设置创建一个{@link  XMLInputFactory}，即不支持DTD和外部实体的解析。 
	 *  
	 * @return 一个新的防御性初始化的输入工厂实例，以使用@since 5.0
	 */
	public static XMLInputFactory createDefensiveInputFactory() {
		return createDefensiveInputFactory(XMLInputFactory::newInstance);
	}

	/**
	 * Variant of {@link #createDefensiveInputFactory()} with a custom instance.
	 * @param instanceSupplier supplier for the input factory instance
	 * @return a new defensively initialized input factory instance to use
	 * @since 5.0.12
	 */
	/**
	 * {@link  #createDefensiveInputFactory（）}与自定义实例的变体。 
	 *  
	 * @param  instanceinput输入工厂实例的供应商
	 * @return 一个新的防御性初始化的输入工厂实例，以使用@since 5.0.12起
	 */
	public static <T extends XMLInputFactory> T createDefensiveInputFactory(Supplier<T> instanceSupplier) {
		T inputFactory = instanceSupplier.get();
		inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
		inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
		inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);
		return inputFactory;
	}

	/**
	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLStreamReader}.
	 * @param streamReader the StAX stream reader
	 * @return a source wrapping the {@code streamReader}
	 */
	/**
	 * 为给定的{@link  XMLStreamReader}创建一个JAXP 1.4 {@link  StAXSource}。 
	 *  
	 * @param  streamReader StAX流阅读器
	 * @return 包装{@code  streamReader}的源
	 */
	public static Source createStaxSource(XMLStreamReader streamReader) {
		return new StAXSource(streamReader);
	}

	/**
	 * Create a JAXP 1.4 {@link StAXSource} for the given {@link XMLEventReader}.
	 * @param eventReader the StAX event reader
	 * @return a source wrapping the {@code eventReader}
	 */
	/**
	 * 为给定的{@link  XMLEventReader}创建一个JAXP 1.4 {@link  StAXSource}。 
	 *  
	 * @param  eventReader StAX事件阅读器
	 * @return 包装{@code  eventReader}的源
	 */
	public static Source createStaxSource(XMLEventReader eventReader) throws XMLStreamException {
		return new StAXSource(eventReader);
	}

	/**
	 * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLStreamReader}.
	 * @param streamReader the StAX stream reader
	 * @return a source wrapping the {@code streamReader}
	 */
	/**
	 * 为给定的{@link  XMLStreamReader}创建一个定制的非JAXP 1.4 StAX {@link 源}。 
	 *  
	 * @param  streamReader StAX流阅读器
	 * @return 包装{@code  streamReader}的源
	 */
	public static Source createCustomStaxSource(XMLStreamReader streamReader) {
		return new StaxSource(streamReader);
	}

	/**
	 * Create a custom, non-JAXP 1.4 StAX {@link Source} for the given {@link XMLEventReader}.
	 * @param eventReader the StAX event reader
	 * @return a source wrapping the {@code eventReader}
	 */
	/**
	 * 为给定的{@link  XMLEventReader}创建一个定制的非JAXP 1.4 StAX {@link 源}。 
	 *  
	 * @param  eventReader StAX事件阅读器
	 * @return 包装{@code  eventReader}的源
	 */
	public static Source createCustomStaxSource(XMLEventReader eventReader) {
		return new StaxSource(eventReader);
	}

	/**
	 * Indicate whether the given {@link Source} is a JAXP 1.4 StAX Source or
	 * custom StAX Source.
	 * @return {@code true} if {@code source} is a JAXP 1.4 {@link StAXSource} or
	 * custom StAX Source; {@code false} otherwise
	 */
	/**
	 * 指示给定的{@link  Source}是JAXP 1.4 StAX Source还是自定义StAX Source。 
	 *  
	 * @return  {@code  true}，如果{@code  source}是JAXP 1.4 {@link  StAXSource}或自定义StAX Source； 
	 *  {@code  false}否则
	 */
	public static boolean isStaxSource(Source source) {
		return (source instanceof StAXSource || source instanceof StaxSource);
	}

	/**
	 * Return the {@link XMLStreamReader} for the given StAX Source.
	 * @param source a JAXP 1.4 {@link StAXSource}
	 * @return the {@link XMLStreamReader}
	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}
	 * or custom StAX Source
	 */
	/**
	 * 返回给定StAX源的{@link  XMLStreamReader}。 
	 *  
	 * @param 源JAXP 1.4 {@link  StAXSource} 
	 * @return  {@link  XMLStreamReader} 
	 * @throws  IllegalArgumentException如果{@code  source}不是JAXP 1.4 {<@link > StAXSource}或自定义StAX Source
	 */
	@Nullable
	public static XMLStreamReader getXMLStreamReader(Source source) {
		if (source instanceof StAXSource) {
			return ((StAXSource) source).getXMLStreamReader();
		}
		else if (source instanceof StaxSource) {
			return ((StaxSource) source).getXMLStreamReader();
		}
		else {
			throw new IllegalArgumentException("Source '" + source + "' is neither StaxSource nor StAXSource");
		}
	}

	/**
	 * Return the {@link XMLEventReader} for the given StAX Source.
	 * @param source a JAXP 1.4 {@link StAXSource}
	 * @return the {@link XMLEventReader}
	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXSource}
	 * or custom StAX Source
	 */
	/**
	 * 返回给定StAX源的{@link  XMLEventReader}。 
	 *  
	 * @param 源JAXP 1.4 {@link  StAXSource} 
	 * @return  {@link  XMLEventReader} 
	 * @throws  IllegalArgumentException如果{@code 源}不是JAXP 1.4 {<@link > StAXSource}或自定义StAX Source
	 */
	@Nullable
	public static XMLEventReader getXMLEventReader(Source source) {
		if (source instanceof StAXSource) {
			return ((StAXSource) source).getXMLEventReader();
		}
		else if (source instanceof StaxSource) {
			return ((StaxSource) source).getXMLEventReader();
		}
		else {
			throw new IllegalArgumentException("Source '" + source + "' is neither StaxSource nor StAXSource");
		}
	}

	/**
	 * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLStreamWriter}.
	 * @param streamWriter the StAX stream writer
	 * @return a result wrapping the {@code streamWriter}
	 */
	/**
	 * 为给定的{@link  XMLStreamWriter}创建一个JAXP 1.4 {@link  StAXResult}。 
	 *  
	 * @param  streamWriter StAX流编写器
	 * @return 包装{@code  streamWriter}的结果
	 */
	public static Result createStaxResult(XMLStreamWriter streamWriter) {
		return new StAXResult(streamWriter);
	}

	/**
	 * Create a JAXP 1.4 {@link StAXResult} for the given {@link XMLEventWriter}.
	 * @param eventWriter the StAX event writer
	 * @return a result wrapping {@code streamReader}
	 */
	/**
	 * 为给定的{@link  XMLEventWriter}创建一个JAXP 1.4 {@link  StAXResult}。 
	 *  
	 * @param  eventWriter StAX事件编写器
	 * @return 结果包装{@code  streamReader}
	 */
	public static Result createStaxResult(XMLEventWriter eventWriter) {
		return new StAXResult(eventWriter);
	}

	/**
	 * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLStreamWriter}.
	 * @param streamWriter the StAX stream writer
	 * @return a source wrapping the {@code streamWriter}
	 */
	/**
	 * 为给定的{@link  XMLStreamWriter}创建一个定制的非JAXP 1.4 StAX {@link  Result}。 
	 *  
	 * @param  streamWriter StAX流编写器
	 * @return 包装{@code  streamWriter}的源
	 */
	public static Result createCustomStaxResult(XMLStreamWriter streamWriter) {
		return new StaxResult(streamWriter);
	}

	/**
	 * Create a custom, non-JAXP 1.4 StAX {@link Result} for the given {@link XMLEventWriter}.
	 * @param eventWriter the StAX event writer
	 * @return a source wrapping the {@code eventWriter}
	 */
	/**
	 * 为给定的{@link  XMLEventWriter}创建一个定制的非JAXP 1.4 StAX {@link  Result}。 
	 *  
	 * @param  eventWriter StAX事件编写器
	 * @return 包装{@code  eventWriter}的源
	 */
	public static Result createCustomStaxResult(XMLEventWriter eventWriter) {
		return new StaxResult(eventWriter);
	}

	/**
	 * Indicate whether the given {@link Result} is a JAXP 1.4 StAX Result or
	 * custom StAX Result.
	 * @return {@code true} if {@code result} is a JAXP 1.4 {@link StAXResult} or
	 * custom StAX Result; {@code false} otherwise
	 */
	/**
	 * 指示给定的{@link  Result}是JAXP 1.4 StAX结果还是自定义StAX结果。 
	 *  
	 * @return  {@code  true}，如果{@code  result}是JAXP 1.4 {@link  StAXResult}或自定义StAX Result； 
	 *  {@code  false}否则
	 */
	public static boolean isStaxResult(Result result) {
		return (result instanceof StAXResult || result instanceof StaxResult);
	}

	/**
	 * Return the {@link XMLStreamWriter} for the given StAX Result.
	 * @param result a JAXP 1.4 {@link StAXResult}
	 * @return the {@link XMLStreamReader}
	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}
	 * or custom StAX Result
	 */
	/**
	 * 返回给定StAX结果的{@link  XMLStreamWriter}。 
	 *  
	 * @param 结果为JAXP 1.4 {@link  StAXResult} 
	 * @return  {@link  XMLStreamReader} 
	 * @throws  IllegalArgumentException如果{@code  source}不是JAXP 1.4 {<@link > StAXResult}或自定义StAX结果
	 */
	@Nullable
	public static XMLStreamWriter getXMLStreamWriter(Result result) {
		if (result instanceof StAXResult) {
			return ((StAXResult) result).getXMLStreamWriter();
		}
		else if (result instanceof StaxResult) {
			return ((StaxResult) result).getXMLStreamWriter();
		}
		else {
			throw new IllegalArgumentException("Result '" + result + "' is neither StaxResult nor StAXResult");
		}
	}

	/**
	 * Return the {@link XMLEventWriter} for the given StAX Result.
	 * @param result a JAXP 1.4 {@link StAXResult}
	 * @return the {@link XMLStreamReader}
	 * @throws IllegalArgumentException if {@code source} isn't a JAXP 1.4 {@link StAXResult}
	 * or custom StAX Result
	 */
	/**
	 * 返回给定StAX结果的{@link  XMLEventWriter}。 
	 *  
	 * @param 结果为JAXP 1.4 {@link  StAXResult} 
	 * @return  {@link  XMLStreamReader} 
	 * @throws  IllegalArgumentException如果{@code  source}不是JAXP 1.4 {<@link > StAXResult}或自定义StAX结果
	 */
	@Nullable
	public static XMLEventWriter getXMLEventWriter(Result result) {
		if (result instanceof StAXResult) {
			return ((StAXResult) result).getXMLEventWriter();
		}
		else if (result instanceof StaxResult) {
			return ((StaxResult) result).getXMLEventWriter();
		}
		else {
			throw new IllegalArgumentException("Result '" + result + "' is neither StaxResult nor StAXResult");
		}
	}

	/**
	 * Create a {@link XMLEventReader} from the given list of {@link XMLEvent}.
	 * @param events the list of {@link XMLEvent XMLEvents}.
	 * @return an {@code XMLEventReader} that reads from the given events
	 * @since 5.0
	 */
	/**
	 * 从{@link  XMLEvent}的给定列表中创建一个{@link  XMLEventReader}。 
	 *  
	 * @param 事件{@link  XMLEvent XMLEvents}的列表。 
	 *  
	 * @return 一个{@code  XMLEventReader}，它从给定事件开始读取，自5.0起
	 */
	public static XMLEventReader createXMLEventReader(List<XMLEvent> events) {
		return new ListBasedXMLEventReader(events);
	}

	/**
	 * Create a SAX {@link ContentHandler} that writes to the given StAX {@link XMLStreamWriter}.
	 * @param streamWriter the StAX stream writer
	 * @return a content handler writing to the {@code streamWriter}
	 */
	/**
	 * 创建一个SAX {@link  ContentHandler}写入给定的StAX {@link  XMLStreamWriter}。 
	 *  
	 * @param  streamWriter StAX流编写器
	 * @return 内容处理程序，它写入{@code  streamWriter}
	 */
	public static ContentHandler createContentHandler(XMLStreamWriter streamWriter) {
		return new StaxStreamHandler(streamWriter);
	}

	/**
	 * Create a SAX {@link ContentHandler} that writes events to the given StAX {@link XMLEventWriter}.
	 * @param eventWriter the StAX event writer
	 * @return a content handler writing to the {@code eventWriter}
	 */
	/**
	 * 创建一个SAX {@link  ContentHandler}，将事件写入给定的StAX {@link  XMLEventWriter}。 
	 *  
	 * @param  eventWriter StAX事件编写器
	 * @return 内容处理程序，它写入{@code  eventWriter}
	 */
	public static ContentHandler createContentHandler(XMLEventWriter eventWriter) {
		return new StaxEventHandler(eventWriter);
	}

	/**
	 * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLStreamReader}.
	 * @param streamReader the StAX stream reader
	 * @return a XMLReader reading from the {@code streamWriter}
	 */
	/**
	 * 创建一个SAX {@link  XMLReader}，它从给定的StAX {@link  XMLStreamReader}中读取。 
	 *  
	 * @param  streamReader StAX流阅读器
	 * @return 从{@code  streamWriter}读取的XMLReader
	 */
	public static XMLReader createXMLReader(XMLStreamReader streamReader) {
		return new StaxStreamXMLReader(streamReader);
	}

	/**
	 * Create a SAX {@link XMLReader} that reads from the given StAX {@link XMLEventReader}.
	 * @param eventReader the StAX event reader
	 * @return a XMLReader reading from the {@code eventWriter}
	 */
	/**
	 * 创建一个SAX {@link  XMLReader}，它从给定的StAX {@link  XMLEventReader}中读取。 
	 *  
	 * @param  eventReader StAX事件阅读器
	 * @return 从{@code  eventWriter}读取的XMLReader
	 */
	public static XMLReader createXMLReader(XMLEventReader eventReader) {
		return new StaxEventXMLReader(eventReader);
	}

	/**
	 * Return a {@link XMLStreamReader} that reads from a {@link XMLEventReader}.
	 * Useful because the StAX {@code XMLInputFactory} allows one to create an
	 * event reader from a stream reader, but not vice-versa.
	 * @return a stream reader that reads from an event reader
	 */
	/**
	 * 返回从{@link  XMLEventReader}读取的{@link  XMLStreamReader}。 
	 * 之所以有用，是因为StAX {@code  XMLInputFactory}允许从流读取器创建事件读取器，反之亦然。 
	 *  
	 * @return 从事件读取器读取的流读取器
	 */
	public static XMLStreamReader createEventStreamReader(XMLEventReader eventReader) throws XMLStreamException {
		return new XMLEventStreamReader(eventReader);
	}

	/**
	 * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.
	 * @return a stream writer that writes to an event writer
	 * @since 3.2
	 */
	/**
	 * 返回写入到{@link  XMLEventWriter}的{@link  XMLStreamWriter}。 
	 *  
	 * @return 一个从3.2开始写入事件编写器的流编写器
	 */
	public static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter) {
		return new XMLEventStreamWriter(eventWriter, XMLEventFactory.newFactory());
	}

	/**
	 * Return a {@link XMLStreamWriter} that writes to a {@link XMLEventWriter}.
	 * @return a stream writer that writes to an event writer
	 * @since 3.0.5
	 */
	/**
	 * 返回写入到{@link  XMLEventWriter}的{@link  XMLStreamWriter}。 
	 *  
	 * @return 从3.0.5开始写入事件编写器的流编写器
	 */
	public static XMLStreamWriter createEventStreamWriter(XMLEventWriter eventWriter, XMLEventFactory eventFactory) {
		return new XMLEventStreamWriter(eventWriter, eventFactory);
	}

}
