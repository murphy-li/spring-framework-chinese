/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Optional;
import java.util.StringJoiner;

import org.springframework.lang.Nullable;

/**
 * Miscellaneous object utility methods.
 *
 * <p>Mainly for internal use within the framework.
 *
 * <p>Thanks to Alex Ruiz for contributing several enhancements to this class!
 *
 * @author Juergen Hoeller
 * @author Keith Donald
 * @author Rod Johnson
 * @author Rob Harrop
 * @author Chris Beams
 * @author Sam Brannen
 * @since 19.03.2004
 * @see ClassUtils
 * @see CollectionUtils
 * @see StringUtils
 */
/**
 * 杂项对象实用程序方法。 
 *  <p>主要供框架内部使用。 
 *  <p>感谢Alex Ruiz为该课程做出了一些改进！ 
 *  @author  Juergen Hoeller @author  Keith Donald @author  Rod Johnson @author  Rob Harrop @author  Chris Beams @author  Sam Brannen @2004年3月19日以来
 * @see  ClassUtils 
 * @see  CollectionUtils 
 * @see  StringUtils
 */
public abstract class ObjectUtils {

	private static final int INITIAL_HASH = 7;
	private static final int MULTIPLIER = 31;

	private static final String EMPTY_STRING = "";
	private static final String NULL_STRING = "null";
	private static final String ARRAY_START = "{";
	private static final String ARRAY_END = "}";
	private static final String EMPTY_ARRAY = ARRAY_START + ARRAY_END;
	private static final String ARRAY_ELEMENT_SEPARATOR = ", ";
	private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];


	/**
	 * Return whether the given throwable is a checked exception:
	 * that is, neither a RuntimeException nor an Error.
	 * @param ex the throwable to check
	 * @return whether the throwable is a checked exception
	 * @see java.lang.Exception
	 * @see java.lang.RuntimeException
	 * @see java.lang.Error
	 */
	/**
	 * 返回给定的throwable是否为检查的异常：即RuntimeException或Error都不是。 
	 *  
	 * @param 通过throwable检查
	 * @return 抛出是否为已检查异常
	 * @see  java.lang.Exception 
	 * @see  java.lang.RuntimeException 
	 * @see  java.lang.Error
	 */
	public static boolean isCheckedException(Throwable ex) {
		return !(ex instanceof RuntimeException || ex instanceof Error);
	}

	/**
	 * Check whether the given exception is compatible with the specified
	 * exception types, as declared in a throws clause.
	 * @param ex the exception to check
	 * @param declaredExceptions the exception types declared in the throws clause
	 * @return whether the given exception is compatible
	 */
	/**
	 * 检查给定异常是否与throws子句中声明的指定异常类型兼容。 
	 *  
	 * @param 异常检查
	 * @param  clarifiedExceptions在throws子句中声明的异常类型
	 * @return 给定异常是否兼容
	 */
	public static boolean isCompatibleWithThrowsClause(Throwable ex, @Nullable Class<?>... declaredExceptions) {
		if (!isCheckedException(ex)) {
			return true;
		}
		if (declaredExceptions != null) {
			for (Class<?> declaredException : declaredExceptions) {
				if (declaredException.isInstance(ex)) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Determine whether the given object is an array:
	 * either an Object array or a primitive array.
	 * @param obj the object to check
	 */
	/**
	 * 确定给定的对象是数组：Object数组还是基本数组。 
	 *  
	 * @param  obj要检查的对象
	 */
	public static boolean isArray(@Nullable Object obj) {
		return (obj != null && obj.getClass().isArray());
	}

	/**
	 * Determine whether the given array is empty:
	 * i.e. {@code null} or of zero length.
	 * @param array the array to check
	 * @see #isEmpty(Object)
	 */
	/**
	 * 确定给定的数组是否为空：即{@code  null}或长度为零。 
	 *  
	 * @param  array要检查的数组
	 * @see  #isEmpty（Object）
	 */
	public static boolean isEmpty(@Nullable Object[] array) {
		return (array == null || array.length == 0);
	}

	/**
	 * Determine whether the given object is empty.
	 * <p>This method supports the following object types.
	 * <ul>
	 * <li>{@code Optional}: considered empty if {@link Optional#empty()}</li>
	 * <li>{@code Array}: considered empty if its length is zero</li>
	 * <li>{@link CharSequence}: considered empty if its length is zero</li>
	 * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>
	 * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>
	 * </ul>
	 * <p>If the given object is non-null and not one of the aforementioned
	 * supported types, this method returns {@code false}.
	 * @param obj the object to check
	 * @return {@code true} if the object is {@code null} or <em>empty</em>
	 * @since 4.2
	 * @see Optional#isPresent()
	 * @see ObjectUtils#isEmpty(Object[])
	 * @see StringUtils#hasLength(CharSequence)
	 * @see StringUtils#isEmpty(Object)
	 * @see CollectionUtils#isEmpty(java.util.Collection)
	 * @see CollectionUtils#isEmpty(java.util.Map)
	 */
	/**
	 * 确定给定对象是否为空。 
	 *  <p>此方法支持以下对象类型。 
	 *  <ul> <li> {<@code>可选}：如果{@link  Optional＃empty（）} </ li> <li> {<@code> Array}：则视为空，如果其长度为零</ li> <li> {<@link> CharSequence}：如果其长度为零，则视为空</ li> <li> {<@link> Collection}：委托给{@link  Collection＃isEmpty（）} </ li> <li> {<@link> Map}：如果给定对象不是null且不是一个，则委托给{@link  Map＃isEmpty（）} </ li> </ ul> <p>在上述支持的类型中，此方法返回{@code  false}。 
	 *  
	 * @param  obj要检查的对象
	 * @return  {@code  true}，如果对象是{@code  null}或<em> empty </ em> @4.2起，@
	 * @see>可选#isPresent （）
	 * @see  ObjectUtils＃isEmpty（Object []）
	 * @see  StringUtils＃hasLength（CharSequence）
	 * @see  StringUtils＃isEmpty（Object）
	 * @see  CollectionUtils＃isEmpty（java.util.Collection）<@请参见> CollectionUtils＃isEmpty（java.util.Map）
	 */
	@SuppressWarnings("rawtypes")
	public static boolean isEmpty(@Nullable Object obj) {
		if (obj == null) {
			return true;
		}

		if (obj instanceof Optional) {
			return !((Optional) obj).isPresent();
		}
		if (obj instanceof CharSequence) {
			return ((CharSequence) obj).length() == 0;
		}
		if (obj.getClass().isArray()) {
			return Array.getLength(obj) == 0;
		}
		if (obj instanceof Collection) {
			return ((Collection) obj).isEmpty();
		}
		if (obj instanceof Map) {
			return ((Map) obj).isEmpty();
		}

		// else
		return false;
	}

	/**
	 * Unwrap the given object which is potentially a {@link java.util.Optional}.
	 * @param obj the candidate object
	 * @return either the value held within the {@code Optional}, {@code null}
	 * if the {@code Optional} is empty, or simply the given object as-is
	 * @since 5.0
	 */
	/**
	 * 解开给定的对象，该对象可能是{@link  java.util.Optional}。 
	 *  
	 * @param  obj候选对象
	 * @return 在{@code  Optional}中保存的值，如果{@code  Optional}为空，则为{@code  null}，或者只是给定对象从5.0开始
	 */
	@Nullable
	public static Object unwrapOptional(@Nullable Object obj) {
		if (obj instanceof Optional) {
			Optional<?> optional = (Optional<?>) obj;
			if (!optional.isPresent()) {
				return null;
			}
			Object result = optional.get();
			Assert.isTrue(!(result instanceof Optional), "Multi-level Optional usage not supported");
			return result;
		}
		return obj;
	}

	/**
	 * Check whether the given array contains the given element.
	 * @param array the array to check (may be {@code null},
	 * in which case the return value will always be {@code false})
	 * @param element the element to check for
	 * @return whether the element has been found in the given array
	 */
	/**
	 * 检查给定数组是否包含给定元素。 
	 *  
	 * @param  array要检查的数组（可以为{@code  null}，在这种情况下，返回值将始终为{@code  false}）
	 * @param 元素要检查<
	 * @return的元素>是否在给定数组中找到了元素
	 */
	public static boolean containsElement(@Nullable Object[] array, Object element) {
		if (array == null) {
			return false;
		}
		for (Object arrayEle : array) {
			if (nullSafeEquals(arrayEle, element)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Check whether the given array of enum constants contains a constant with the given name,
	 * ignoring case when determining a match.
	 * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}
	 * @param constant the constant name to find (must not be null or empty string)
	 * @return whether the constant has been found in the given array
	 */
	/**
	 * 检查给定的枚举常量数组是否包含具有给定名称的常量，在确定匹配项时忽略大小写。 
	 *  
	 * @param  enumValues枚举要检查的枚举值，通常通过{@code  MyEnum.values（）}获得。 
	 * 
	 * @param 常量要查找的常量名称（不得为null或空字符串）
	 * @return 在给定数组中找到常数
	 */
	public static boolean containsConstant(Enum<?>[] enumValues, String constant) {
		return containsConstant(enumValues, constant, false);
	}

	/**
	 * Check whether the given array of enum constants contains a constant with the given name.
	 * @param enumValues the enum values to check, typically obtained via {@code MyEnum.values()}
	 * @param constant the constant name to find (must not be null or empty string)
	 * @param caseSensitive whether case is significant in determining a match
	 * @return whether the constant has been found in the given array
	 */
	/**
	 * 检查给定的枚举常量数组是否包含具有给定名称的常量。 
	 *  
	 * @param  enumValues枚举要检查的枚举值，通常通过{@code  MyEnum.values（）}获得。 
	 * 
	 * @param 常量要查找的常量名称（不得为null或空字符串）
	 * @param  caseSensitive是否在确定匹配
	 * @return 是否在给定数组中找到常量的情况下，大小写很重要
	 */
	public static boolean containsConstant(Enum<?>[] enumValues, String constant, boolean caseSensitive) {
		for (Enum<?> candidate : enumValues) {
			if (caseSensitive ? candidate.toString().equals(constant) :
					candidate.toString().equalsIgnoreCase(constant)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Case insensitive alternative to {@link Enum#valueOf(Class, String)}.
	 * @param <E> the concrete Enum type
	 * @param enumValues the array of all Enum constants in question, usually per {@code Enum.values()}
	 * @param constant the constant to get the enum value of
	 * @throws IllegalArgumentException if the given constant is not found in the given array
	 * of enum values. Use {@link #containsConstant(Enum[], String)} as a guard to avoid this exception.
	 */
	/**
	 * 不区分大小写的替代项{@link  Enum＃valueOf（Class，String）}。 
	 *  
	 * @param  <E>具体的Enum类型
	 * @param  enumValues讨论中的所有Enum常量的数组，通常按{@code  Enum.values（）} 
	 * @param 常量获取枚举值的常量如果在给定的枚举值数组中找不到给定的常量，则返回
	 * @throws  IllegalArgumentException。 
	 * 使用{@link  #containsConstant（Enum []，String）}作为防范措施来避免此异常。 
	 * 
	 */
	public static <E extends Enum<?>> E caseInsensitiveValueOf(E[] enumValues, String constant) {
		for (E candidate : enumValues) {
			if (candidate.toString().equalsIgnoreCase(constant)) {
				return candidate;
			}
		}
		throw new IllegalArgumentException("Constant [" + constant + "] does not exist in enum type " +
				enumValues.getClass().getComponentType().getName());
	}

	/**
	 * Append the given object to the given array, returning a new array
	 * consisting of the input array contents plus the given object.
	 * @param array the array to append to (can be {@code null})
	 * @param obj the object to append
	 * @return the new array (of the same component type; never {@code null})
	 */
	/**
	 * 将给定对象附加到给定数组，返回一个由输入数组内容和给定对象组成的新数组。 
	 *  
	 * @param 数组要追加到的数组（可以为{@code  null}）
	 * @param  obj追加
	 * @return 新数组的对象（具有相同组件类型； 
	 * 从不{<@@>空值}）
	 */
	public static <A, O extends A> A[] addObjectToArray(@Nullable A[] array, @Nullable O obj) {
		Class<?> compType = Object.class;
		if (array != null) {
			compType = array.getClass().getComponentType();
		}
		else if (obj != null) {
			compType = obj.getClass();
		}
		int newArrLength = (array != null ? array.length + 1 : 1);
		@SuppressWarnings("unchecked")
		A[] newArr = (A[]) Array.newInstance(compType, newArrLength);
		if (array != null) {
			System.arraycopy(array, 0, newArr, 0, array.length);
		}
		newArr[newArr.length - 1] = obj;
		return newArr;
	}

	/**
	 * Convert the given array (which may be a primitive array) to an
	 * object array (if necessary of primitive wrapper objects).
	 * <p>A {@code null} source value will be converted to an
	 * empty Object array.
	 * @param source the (potentially primitive) array
	 * @return the corresponding object array (never {@code null})
	 * @throws IllegalArgumentException if the parameter is not an array
	 */
	/**
	 * 将给定的数组（可以是原始数组）转换为对象数组（如果需要原始包装对象）。 
	 *  <p>一个{@code  null}源值将转换为空的Object数组。 
	 *  
	 * @param 源于（可能是原始的）数组
	 * @return 相应的对象数组（从不{@code  null}）
	 * @throws 如果参数不是数组，则抛出IllegalArgumentException
	 */
	public static Object[] toObjectArray(@Nullable Object source) {
		if (source instanceof Object[]) {
			return (Object[]) source;
		}
		if (source == null) {
			return EMPTY_OBJECT_ARRAY;
		}
		if (!source.getClass().isArray()) {
			throw new IllegalArgumentException("Source is not an array: " + source);
		}
		int length = Array.getLength(source);
		if (length == 0) {
			return EMPTY_OBJECT_ARRAY;
		}
		Class<?> wrapperType = Array.get(source, 0).getClass();
		Object[] newArray = (Object[]) Array.newInstance(wrapperType, length);
		for (int i = 0; i < length; i++) {
			newArray[i] = Array.get(source, i);
		}
		return newArray;
	}


	//---------------------------------------------------------------------
	// Convenience methods for content-based equality/hash-code handling
	//---------------------------------------------------------------------

	/**
	 * Determine if the given objects are equal, returning {@code true} if
	 * both are {@code null} or {@code false} if only one is {@code null}.
	 * <p>Compares arrays with {@code Arrays.equals}, performing an equality
	 * check based on the array elements rather than the array reference.
	 * @param o1 first Object to compare
	 * @param o2 second Object to compare
	 * @return whether the given objects are equal
	 * @see Object#equals(Object)
	 * @see java.util.Arrays#equals
	 */
	/**
	 * 确定给定的对象是否相等，如果两个都是{@code  null}，则返回{@code  true}； 
	 * 如果只有一个为{@code  null}，则返回{@code  false}。 
	 *  <p>使用{@code  Arrays.equals}比较数组，基于数组元素而不是数组引用执行相等性检查。 
	 *  
	 * @param  o1第一个要比较的对象
	 * @param  o2第二个要比较的对象
	 * @return 给定对象是否相等
	 * @see  Object＃equals（Object）
	 * @see  java.util.Arrays＃equals
	 */
	public static boolean nullSafeEquals(@Nullable Object o1, @Nullable Object o2) {
		if (o1 == o2) {
			return true;
		}
		if (o1 == null || o2 == null) {
			return false;
		}
		if (o1.equals(o2)) {
			return true;
		}
		if (o1.getClass().isArray() && o2.getClass().isArray()) {
			return arrayEquals(o1, o2);
		}
		return false;
	}

	/**
	 * Compare the given arrays with {@code Arrays.equals}, performing an equality
	 * check based on the array elements rather than the array reference.
	 * @param o1 first array to compare
	 * @param o2 second array to compare
	 * @return whether the given objects are equal
	 * @see #nullSafeEquals(Object, Object)
	 * @see java.util.Arrays#equals
	 */
	/**
	 * 将给定的数组与{@code  Arrays.equals}比较，基于数组元素而不是数组引用执行相等性检查。 
	 *  
	 * @param  o1比较的第一个数组
	 * @param  o2比较的第一个数组
	 * @return 给定对象是否相等
	 * @see  #nullSafeEquals（Object，Object）
	 * @see  java.util.Arrays＃equals
	 */
	private static boolean arrayEquals(Object o1, Object o2) {
		if (o1 instanceof Object[] && o2 instanceof Object[]) {
			return Arrays.equals((Object[]) o1, (Object[]) o2);
		}
		if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
			return Arrays.equals((boolean[]) o1, (boolean[]) o2);
		}
		if (o1 instanceof byte[] && o2 instanceof byte[]) {
			return Arrays.equals((byte[]) o1, (byte[]) o2);
		}
		if (o1 instanceof char[] && o2 instanceof char[]) {
			return Arrays.equals((char[]) o1, (char[]) o2);
		}
		if (o1 instanceof double[] && o2 instanceof double[]) {
			return Arrays.equals((double[]) o1, (double[]) o2);
		}
		if (o1 instanceof float[] && o2 instanceof float[]) {
			return Arrays.equals((float[]) o1, (float[]) o2);
		}
		if (o1 instanceof int[] && o2 instanceof int[]) {
			return Arrays.equals((int[]) o1, (int[]) o2);
		}
		if (o1 instanceof long[] && o2 instanceof long[]) {
			return Arrays.equals((long[]) o1, (long[]) o2);
		}
		if (o1 instanceof short[] && o2 instanceof short[]) {
			return Arrays.equals((short[]) o1, (short[]) o2);
		}
		return false;
	}

	/**
	 * Return as hash code for the given object; typically the value of
	 * {@code Object#hashCode()}}. If the object is an array,
	 * this method will delegate to any of the {@code nullSafeHashCode}
	 * methods for arrays in this class. If the object is {@code null},
	 * this method returns 0.
	 * @see Object#hashCode()
	 * @see #nullSafeHashCode(Object[])
	 * @see #nullSafeHashCode(boolean[])
	 * @see #nullSafeHashCode(byte[])
	 * @see #nullSafeHashCode(char[])
	 * @see #nullSafeHashCode(double[])
	 * @see #nullSafeHashCode(float[])
	 * @see #nullSafeHashCode(int[])
	 * @see #nullSafeHashCode(long[])
	 * @see #nullSafeHashCode(short[])
	 */
	/**
	 * 返回给定对象的哈希码； 
	 * 通常为{@code  Object＃hashCode（）}}的值。 
	 * 如果对象是数组，则此方法将委派给此类中数组的任何{@code  nullSafeHashCode}方法。 
	 * 如果对象为{@code  null}，则此方法返回0。 
	 * 
	 * @see  Object＃hashCode（）
	 * @see  #nullSafeHashCode（Object []）
	 * @see  #nullSafeHashCode（boolean []）<
	 * @see> #nullSafeHashCode（byte []）
	 * @see  #nullSafeHashCode（char []）
	 * @see  #nullSafeHashCode（double []）
	 * @see  #nullSafeHashCode（float []）
	 * @see  #nullSafeHashCode（int []）
	 * @see  #nullSafeHashCode（long []）
	 * @see  #nullSafeHashCode（short []）
	 */
	public static int nullSafeHashCode(@Nullable Object obj) {
		if (obj == null) {
			return 0;
		}
		if (obj.getClass().isArray()) {
			if (obj instanceof Object[]) {
				return nullSafeHashCode((Object[]) obj);
			}
			if (obj instanceof boolean[]) {
				return nullSafeHashCode((boolean[]) obj);
			}
			if (obj instanceof byte[]) {
				return nullSafeHashCode((byte[]) obj);
			}
			if (obj instanceof char[]) {
				return nullSafeHashCode((char[]) obj);
			}
			if (obj instanceof double[]) {
				return nullSafeHashCode((double[]) obj);
			}
			if (obj instanceof float[]) {
				return nullSafeHashCode((float[]) obj);
			}
			if (obj instanceof int[]) {
				return nullSafeHashCode((int[]) obj);
			}
			if (obj instanceof long[]) {
				return nullSafeHashCode((long[]) obj);
			}
			if (obj instanceof short[]) {
				return nullSafeHashCode((short[]) obj);
			}
		}
		return obj.hashCode();
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable Object[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (Object element : array) {
			hash = MULTIPLIER * hash + nullSafeHashCode(element);
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable boolean[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (boolean element : array) {
			hash = MULTIPLIER * hash + Boolean.hashCode(element);
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable byte[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (byte element : array) {
			hash = MULTIPLIER * hash + element;
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable char[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (char element : array) {
			hash = MULTIPLIER * hash + element;
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable double[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (double element : array) {
			hash = MULTIPLIER * hash + Double.hashCode(element);
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable float[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (float element : array) {
			hash = MULTIPLIER * hash + Float.hashCode(element);
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable int[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (int element : array) {
			hash = MULTIPLIER * hash + element;
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable long[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (long element : array) {
			hash = MULTIPLIER * hash + Long.hashCode(element);
		}
		return hash;
	}

	/**
	 * Return a hash code based on the contents of the specified array.
	 * If {@code array} is {@code null}, this method returns 0.
	 */
	/**
	 * 根据指定数组的内容返回哈希码。 
	 * 如果{@code  array}为{@code  null}，则此方法返回0。 
	 * 
	 */
	public static int nullSafeHashCode(@Nullable short[] array) {
		if (array == null) {
			return 0;
		}
		int hash = INITIAL_HASH;
		for (short element : array) {
			hash = MULTIPLIER * hash + element;
		}
		return hash;
	}

	/**
	 * Return the same value as {@link Boolean#hashCode(boolean)}}.
	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant
	 */
	/**
	 * 返回与{@link  Boolean＃hashCode（boolean）}}相同的值。 
	 * 从Spring Framework 5.0开始@弃用，推荐使用本机JDK 8变体
	 */
	@Deprecated
	public static int hashCode(boolean bool) {
		return Boolean.hashCode(bool);
	}

	/**
	 * Return the same value as {@link Double#hashCode(double)}}.
	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant
	 */
	/**
	 * 返回与{@link  Double＃hashCode（double）}}相同的值。 
	 * 从Spring Framework 5.0开始@弃用，推荐使用本机JDK 8变体
	 */
	@Deprecated
	public static int hashCode(double dbl) {
		return Double.hashCode(dbl);
	}

	/**
	 * Return the same value as {@link Float#hashCode(float)}}.
	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant
	 */
	/**
	 * 返回与{@link  Float＃hashCode（float）}}相同的值。 
	 * 从Spring Framework 5.0开始@弃用，推荐使用本机JDK 8变体
	 */
	@Deprecated
	public static int hashCode(float flt) {
		return Float.hashCode(flt);
	}

	/**
	 * Return the same value as {@link Long#hashCode(long)}}.
	 * @deprecated as of Spring Framework 5.0, in favor of the native JDK 8 variant
	 */
	/**
	 * 返回与{@link  Long＃hashCode（long）}}相同的值。 
	 * 从Spring Framework 5.0开始@弃用，推荐使用本机JDK 8变体
	 */
	@Deprecated
	public static int hashCode(long lng) {
		return Long.hashCode(lng);
	}


	//---------------------------------------------------------------------
	// Convenience methods for toString output
	//---------------------------------------------------------------------

	/**
	 * Return a String representation of an object's overall identity.
	 * @param obj the object (may be {@code null})
	 * @return the object's identity as String representation,
	 * or an empty String if the object was {@code null}
	 */
	/**
	 * 返回对象整体身份的String表示形式。 
	 *  
	 * @param  obj对象（可以为{@code  null}）
	 * @return 对象的身份，以String表示形式； 
	 * 如果对象为{@code  null}，则为空String
	 */
	public static String identityToString(@Nullable Object obj) {
		if (obj == null) {
			return EMPTY_STRING;
		}
		String className = obj.getClass().getName();
		String identityHexString = getIdentityHexString(obj);
		return className + '@' + identityHexString;
	}

	/**
	 * Return a hex String form of an object's identity hash code.
	 * @param obj the object
	 * @return the object's identity code in hex notation
	 */
	/**
	 * 返回对象标识哈希码的十六进制字符串形式。 
	 *  
	 * @param  obj对象
	 * @return 以十六进制表示形式的对象的标识代码
	 */
	public static String getIdentityHexString(Object obj) {
		return Integer.toHexString(System.identityHashCode(obj));
	}

	/**
	 * Return a content-based String representation if {@code obj} is
	 * not {@code null}; otherwise returns an empty String.
	 * <p>Differs from {@link #nullSafeToString(Object)} in that it returns
	 * an empty String rather than "null" for a {@code null} value.
	 * @param obj the object to build a display String for
	 * @return a display String representation of {@code obj}
	 * @see #nullSafeToString(Object)
	 */
	/**
	 * 如果{@code  obj}不是{@code  null}，则返回基于内容的String表示形式； 
	 * 否则返回一个空的字符串。 
	 *  <p>与{@link  #nullSafeToString（Object）}的区别在于，对于{@code  null}值，它返回一个空字符串，而不是"null"。 
	 *  
	 * @param  obj为
	 * @return 建立{@code  obj}的显示字符串表示形式的显示字符串的对象
	 * @see  #nullSafeToString（Object）
	 */
	public static String getDisplayString(@Nullable Object obj) {
		if (obj == null) {
			return EMPTY_STRING;
		}
		return nullSafeToString(obj);
	}

	/**
	 * Determine the class name for the given object.
	 * <p>Returns a {@code "null"} String if {@code obj} is {@code null}.
	 * @param obj the object to introspect (may be {@code null})
	 * @return the corresponding class name
	 */
	/**
	 * 确定给定对象的类名称。 
	 *  <p>如果{@code  obj}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param  obj自省对象（可能为{@code  null}）
	 * @return 相应的类名
	 */
	public static String nullSafeClassName(@Nullable Object obj) {
		return (obj != null ? obj.getClass().getName() : NULL_STRING);
	}

	/**
	 * Return a String representation of the specified Object.
	 * <p>Builds a String representation of the contents in case of an array.
	 * Returns a {@code "null"} String if {@code obj} is {@code null}.
	 * @param obj the object to build a String representation for
	 * @return a String representation of {@code obj}
	 */
	/**
	 * 返回指定对象的字符串表示形式。 
	 *  <p>在数组的情况下构建内容的字符串表示形式。 
	 * 如果{@code  obj}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param  obj为
	 * @return 构建字符串表示形式的对象，该字符串表示形式为{@code  obj}的字符串表示形式
	 */
	public static String nullSafeToString(@Nullable Object obj) {
		if (obj == null) {
			return NULL_STRING;
		}
		if (obj instanceof String) {
			return (String) obj;
		}
		if (obj instanceof Object[]) {
			return nullSafeToString((Object[]) obj);
		}
		if (obj instanceof boolean[]) {
			return nullSafeToString((boolean[]) obj);
		}
		if (obj instanceof byte[]) {
			return nullSafeToString((byte[]) obj);
		}
		if (obj instanceof char[]) {
			return nullSafeToString((char[]) obj);
		}
		if (obj instanceof double[]) {
			return nullSafeToString((double[]) obj);
		}
		if (obj instanceof float[]) {
			return nullSafeToString((float[]) obj);
		}
		if (obj instanceof int[]) {
			return nullSafeToString((int[]) obj);
		}
		if (obj instanceof long[]) {
			return nullSafeToString((long[]) obj);
		}
		if (obj instanceof short[]) {
			return nullSafeToString((short[]) obj);
		}
		String str = obj.toString();
		return (str != null ? str : EMPTY_STRING);
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable Object[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (Object o : array) {
			stringJoiner.add(String.valueOf(o));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable boolean[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (boolean b : array) {
			stringJoiner.add(String.valueOf(b));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable byte[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (byte b : array) {
			stringJoiner.add(String.valueOf(b));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable char[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (char c : array) {
			stringJoiner.add('\'' + String.valueOf(c) + '\'');
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable double[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (double d : array) {
			stringJoiner.add(String.valueOf(d));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable float[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (float f : array) {
			stringJoiner.add(String.valueOf(f));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable int[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (int i : array) {
			stringJoiner.add(String.valueOf(i));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable long[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (long l : array) {
			stringJoiner.add(String.valueOf(l));
		}
		return stringJoiner.toString();
	}

	/**
	 * Return a String representation of the contents of the specified array.
	 * <p>The String representation consists of a list of the array's elements,
	 * enclosed in curly braces ({@code "{}"}). Adjacent elements are separated
	 * by the characters {@code ", "} (a comma followed by a space).
	 * Returns a {@code "null"} String if {@code array} is {@code null}.
	 * @param array the array to build a String representation for
	 * @return a String representation of {@code array}
	 */
	/**
	 * 返回指定数组内容的String表示形式。 
	 *  <p> String表示形式由数组的元素列表组成，并用大括号（{@code "{}"}）括起来。 
	 * 相邻元素由字符{@code "，"}（逗号和空格分隔）分隔。 
	 * 如果{@code  array}为{@code  null}，则返回一个{@code "null"}字符串。 
	 *  
	 * @param 数组用于为
	 * @return 的{@code  array}的字符串表示形式构建字符串表示形式
	 */
	public static String nullSafeToString(@Nullable short[] array) {
		if (array == null) {
			return NULL_STRING;
		}
		int length = array.length;
		if (length == 0) {
			return EMPTY_ARRAY;
		}
		StringJoiner stringJoiner = new StringJoiner(ARRAY_ELEMENT_SEPARATOR, ARRAY_START, ARRAY_END);
		for (short s : array) {
			stringJoiner.add(String.valueOf(s));
		}
		return stringJoiner.toString();
	}

}
