/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.springframework.lang.Nullable;

/**
 * Simple stop watch, allowing for timing of a number of tasks, exposing total
 * running time and running time for each named task.
 *
 * <p>Conceals use of {@link System#nanoTime()}, improving the readability of
 * application code and reducing the likelihood of calculation errors.
 *
 * <p>Note that this object is not designed to be thread-safe and does not use
 * synchronization.
 *
 * <p>This class is normally used to verify performance during proof-of-concept
 * work and in development, rather than as part of production applications.
 *
 * <p>As of Spring Framework 5.2, running time is tracked and reported in
 * nanoseconds.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since May 2, 2001
 */
/**
 * 简单的秒表，允许为多个任务计时，公开总运行时间和每个命名任务的运行时间。 
 *  <p>隐藏使用{@link  System＃nanoTime（）}，从而提高了应用程序代码的可读性并减少了计算错误的可能性。 
 *  <p>请注意，此对象并非设计为线程安全的，并且不使用同步。 
 *  <p>此类通常用于在概念验证工作和开发过程中验证性能，而不是作为生产应用程序的一部分。 
 *  <p>从Spring Framework 5.2开始，以纳秒为单位跟踪和报告运行时间。 
 *  @author  Rod Johnson @author  Juergen Hoeller @author  Sam Brannen @自2001年5月2日起
 */
public class StopWatch {

	/**
	 * Identifier of this {@code StopWatch}.
	 * <p>Handy when we have output from multiple stop watches and need to
	 * distinguish between them in log or console output.
	 */
	/**
	 * 此{@code  StopWatch}的标识符。 
	 *  <p>当我们有多个秒表的输出并且需要在日志或控制台输出中进行区分时，非常方便。 
	 * 
	 */
	private final String id;

	private boolean keepTaskList = true;

	private final List<TaskInfo> taskList = new LinkedList<>();

	/** Start time of the current task. */
	/**
	 * 当前任务的开始时间。 
	 * 
	 */
	private long startTimeNanos;

	/** Name of the current task. */
	/**
	 * 当前任务的名称。 
	 * 
	 */
	@Nullable
	private String currentTaskName;

	@Nullable
	private TaskInfo lastTaskInfo;

	private int taskCount;

	/** Total running time. */
	/**
	 * 总运行时间。 
	 * 
	 */
	private long totalTimeNanos;


	/**
	 * Construct a new {@code StopWatch}.
	 * <p>Does not start any task.
	 */
	/**
	 * 构造一个新的{@code  StopWatch}。 
	 *  <p>不启动任何任务。 
	 * 
	 */
	public StopWatch() {
		this("");
	}

	/**
	 * Construct a new {@code StopWatch} with the given ID.
	 * <p>The ID is handy when we have output from multiple stop watches and need
	 * to distinguish between them.
	 * <p>Does not start any task.
	 * @param id identifier for this stop watch
	 */
	/**
	 * 使用给定的ID构造一个新的{@code  StopWatch}。 
	 *  <p>当我们从多个秒表中获得输出并且需要区分它们时，该ID很方便。 
	 *  <p>不启动任何任务。 
	 *  
	 * @param 此秒表的ID标识符
	 */
	public StopWatch(String id) {
		this.id = id;
	}


	/**
	 * Get the ID of this {@code StopWatch}, as specified on construction.
	 * @return the ID (empty String by default)
	 * @since 4.2.2
	 * @see #StopWatch(String)
	 */
	/**
	 * 获取此{@code  StopWatch}的ID，该ID在构造时已指定。 
	 *  
	 * @return  ID（默认为空字符串）@4.2.2起
	 * @see  #StopWatch（String）
	 */
	public String getId() {
		return this.id;
	}

	/**
	 * Configure whether the {@link TaskInfo} array is built over time.
	 * <p>Set this to {@code false} when using a {@code StopWatch} for millions
	 * of intervals; otherwise, the {@code TaskInfo} structure will consume
	 * excessive memory.
	 * <p>Default is {@code true}.
	 */
	/**
	 * 配置是否随时间构建{@link  TaskInfo}数组。 
	 *  <p>在使用{@code  StopWatch}进行数百万个间隔时，将其设置为{@code  false}； 
	 * 否则，{@code  TaskInfo}结构将消耗过多的内存。 
	 *  <p>默认值为{@code  true}。 
	 * 
	 */
	public void setKeepTaskList(boolean keepTaskList) {
		this.keepTaskList = keepTaskList;
	}


	/**
	 * Start an unnamed task.
	 * <p>The results are undefined if {@link #stop()} or timing methods are
	 * called without invoking this method first.
	 * @see #start(String)
	 * @see #stop()
	 */
	/**
	 * 启动一个未命名的任务。 
	 *  <p>如果调用{@link  #stop（）}或计时方法而未先调用此方法，则结果不确定。 
	 *  
	 * @see  #start（字符串）
	 * @see  #stop（）
	 */
	public void start() throws IllegalStateException {
		start("");
	}

	/**
	 * Start a named task.
	 * <p>The results are undefined if {@link #stop()} or timing methods are
	 * called without invoking this method first.
	 * @param taskName the name of the task to start
	 * @see #start()
	 * @see #stop()
	 */
	/**
	 * 启动一个命名任务。 
	 *  <p>如果调用{@link  #stop（）}或计时方法而未先调用此方法，则结果不确定。 
	 *  
	 * @param  taskName要启动的任务的名称
	 * @see  #start（）
	 * @see  #stop（）
	 */
	public void start(String taskName) throws IllegalStateException {
		if (this.currentTaskName != null) {
			throw new IllegalStateException("Can't start StopWatch: it's already running");
		}
		this.currentTaskName = taskName;
		this.startTimeNanos = System.nanoTime();
	}

	/**
	 * Stop the current task.
	 * <p>The results are undefined if timing methods are called without invoking
	 * at least one pair of {@code start()} / {@code stop()} methods.
	 * @see #start()
	 * @see #start(String)
	 */
	/**
	 * 停止当前任务。 
	 *  <p>如果在不调用至少一对{@code  start（）} / {@code  stop（）}方法的情况下调用计时方法，则结果不确定。 
	 *  
	 * @see  #start（）
	 * @see  #start（字符串）
	 */
	public void stop() throws IllegalStateException {
		if (this.currentTaskName == null) {
			throw new IllegalStateException("Can't stop StopWatch: it's not running");
		}
		long lastTime = System.nanoTime() - this.startTimeNanos;
		this.totalTimeNanos += lastTime;
		this.lastTaskInfo = new TaskInfo(this.currentTaskName, lastTime);
		if (this.keepTaskList) {
			this.taskList.add(this.lastTaskInfo);
		}
		++this.taskCount;
		this.currentTaskName = null;
	}

	/**
	 * Determine whether this {@code StopWatch} is currently running.
	 * @see #currentTaskName()
	 */
	/**
	 * 确定此{@code  StopWatch}当前是否正在运行。 
	 *  
	 * @see  #currentTaskName（）
	 */
	public boolean isRunning() {
		return (this.currentTaskName != null);
	}

	/**
	 * Get the name of the currently running task, if any.
	 * @since 4.2.2
	 * @see #isRunning()
	 */
	/**
	 * 获取当前正在运行的任务的名称（如果有）。 
	 *  @since 4.2.2 
	 * @see  #isRunning（）
	 */
	@Nullable
	public String currentTaskName() {
		return this.currentTaskName;
	}

	/**
	 * Get the time taken by the last task in nanoseconds.
	 * @since 5.2
	 * @see #getLastTaskTimeMillis()
	 */
	/**
	 * 获取上一个任务花费的时间（以纳秒为单位）。 
	 *  @since 5.2 
	 * @see  #getLastTaskTimeMillis（）
	 */
	public long getLastTaskTimeNanos() throws IllegalStateException {
		if (this.lastTaskInfo == null) {
			throw new IllegalStateException("No tasks run: can't get last task interval");
		}
		return this.lastTaskInfo.getTimeNanos();
	}

	/**
	 * Get the time taken by the last task in milliseconds.
	 * @see #getLastTaskTimeNanos()
	 */
	/**
	 * 获取上一个任务花费的时间（以毫秒为单位）。 
	 *  
	 * @see  #getLastTaskTimeNanos（）
	 */
	public long getLastTaskTimeMillis() throws IllegalStateException {
		if (this.lastTaskInfo == null) {
			throw new IllegalStateException("No tasks run: can't get last task interval");
		}
		return this.lastTaskInfo.getTimeMillis();
	}

	/**
	 * Get the name of the last task.
	 */
	/**
	 * 获取上一个任务的名称。 
	 * 
	 */
	public String getLastTaskName() throws IllegalStateException {
		if (this.lastTaskInfo == null) {
			throw new IllegalStateException("No tasks run: can't get last task name");
		}
		return this.lastTaskInfo.getTaskName();
	}

	/**
	 * Get the last task as a {@link TaskInfo} object.
	 */
	/**
	 * 获取最后一个任务作为{@link  TaskInfo}对象。 
	 * 
	 */
	public TaskInfo getLastTaskInfo() throws IllegalStateException {
		if (this.lastTaskInfo == null) {
			throw new IllegalStateException("No tasks run: can't get last task info");
		}
		return this.lastTaskInfo;
	}


	/**
	 * Get the total time in nanoseconds for all tasks.
	 * @since 5.2
	 * @see #getTotalTimeMillis()
	 * @see #getTotalTimeSeconds()
	 */
	/**
	 * 获取所有任务的总时间（以纳秒为单位）。 
	 *  @since 5.2 
	 * @see  #getTotalTimeMillis（）
	 * @see  #getTotalTimeSeconds（）
	 */
	public long getTotalTimeNanos() {
		return this.totalTimeNanos;
	}

	/**
	 * Get the total time in milliseconds for all tasks.
	 * @see #getTotalTimeNanos()
	 * @see #getTotalTimeSeconds()
	 */
	/**
	 * 获取所有任务的总时间（以毫秒为单位）。 
	 *  
	 * @see  #getTotalTimeNanos（）
	 * @see  #getTotalTimeSeconds（）
	 */
	public long getTotalTimeMillis() {
		return nanosToMillis(this.totalTimeNanos);
	}

	/**
	 * Get the total time in seconds for all tasks.
	 * @see #getTotalTimeNanos()
	 * @see #getTotalTimeMillis()
	 */
	/**
	 * 获取所有任务的总时间（以秒为单位）。 
	 *  
	 * @see  #getTotalTimeNanos（）
	 * @see  #getTotalTimeMillis（）
	 */
	public double getTotalTimeSeconds() {
		return nanosToSeconds(this.totalTimeNanos);
	}

	/**
	 * Get the number of tasks timed.
	 */
	/**
	 * 获取定时的任务数。 
	 * 
	 */
	public int getTaskCount() {
		return this.taskCount;
	}

	/**
	 * Get an array of the data for tasks performed.
	 */
	/**
	 * 获取执行的任务的数据数组。 
	 * 
	 */
	public TaskInfo[] getTaskInfo() {
		if (!this.keepTaskList) {
			throw new UnsupportedOperationException("Task info is not being kept!");
		}
		return this.taskList.toArray(new TaskInfo[0]);
	}


	/**
	 * Get a short description of the total running time.
	 */
	/**
	 * 获得总运行时间的简短描述。 
	 * 
	 */
	public String shortSummary() {
		return "StopWatch '" + getId() + "': running time = " + getTotalTimeNanos() + " ns";
	}

	/**
	 * Generate a string with a table describing all tasks performed.
	 * <p>For custom reporting, call {@link #getTaskInfo()} and use the task info
	 * directly.
	 */
	/**
	 * 生成带有描述所有已执行任务的表的字符串。 
	 *  <p>对于自定义报告，请调用{@link  #getTaskInfo（）}并直接使用任务信息。 
	 * 
	 */
	public String prettyPrint() {
		StringBuilder sb = new StringBuilder(shortSummary());
		sb.append('\n');
		if (!this.keepTaskList) {
			sb.append("No task info kept");
		}
		else {
			sb.append("---------------------------------------------\n");
			sb.append("ns         %     Task name\n");
			sb.append("---------------------------------------------\n");
			NumberFormat nf = NumberFormat.getNumberInstance();
			nf.setMinimumIntegerDigits(9);
			nf.setGroupingUsed(false);
			NumberFormat pf = NumberFormat.getPercentInstance();
			pf.setMinimumIntegerDigits(3);
			pf.setGroupingUsed(false);
			for (TaskInfo task : getTaskInfo()) {
				sb.append(nf.format(task.getTimeNanos())).append("  ");
				sb.append(pf.format((double) task.getTimeNanos() / getTotalTimeNanos())).append("  ");
				sb.append(task.getTaskName()).append("\n");
			}
		}
		return sb.toString();
	}

	/**
	 * Generate an informative string describing all tasks performed
	 * <p>For custom reporting, call {@link #getTaskInfo()} and use the task info
	 * directly.
	 */
	/**
	 * 生成描述所有执行的任务的信息性字符串<p>对于自定义报告，请调用{@link  #getTaskInfo（）}并直接使用任务信息。 
	 * 
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(shortSummary());
		if (this.keepTaskList) {
			for (TaskInfo task : getTaskInfo()) {
				sb.append("; [").append(task.getTaskName()).append("] took ").append(task.getTimeNanos()).append(" ns");
				long percent = Math.round(100.0 * task.getTimeNanos() / getTotalTimeNanos());
				sb.append(" = ").append(percent).append("%");
			}
		}
		else {
			sb.append("; no task info kept");
		}
		return sb.toString();
	}


	private static long nanosToMillis(long duration) {
		return TimeUnit.NANOSECONDS.toMillis(duration);
	}

	private static double nanosToSeconds(long duration) {
		return duration / 1_000_000_000.0;
	}


	/**
	 * Nested class to hold data about one task executed within the {@code StopWatch}.
	 */
	/**
	 * 嵌套类，用于保存在{@code  StopWatch}中执行的一项任务的数据。 
	 * 
	 */
	public static final class TaskInfo {

		private final String taskName;

		private final long timeNanos;

		TaskInfo(String taskName, long timeNanos) {
			this.taskName = taskName;
			this.timeNanos = timeNanos;
		}

		/**
		 * Get the name of this task.
		 */
		/**
		 * 获取此任务的名称。 
		 * 
		 */
		public String getTaskName() {
			return this.taskName;
		}

		/**
		 * Get the time in nanoseconds this task took.
		 * @since 5.2
		 * @see #getTimeMillis()
		 * @see #getTimeSeconds()
		 */
		/**
		 * 获取此任务花费的时间（以纳秒为单位）。 
		 *  @since 5.2 
		 * @see  #getTimeMillis（）
		 * @see  #getTimeSeconds（）
		 */
		public long getTimeNanos() {
			return this.timeNanos;
		}

		/**
		 * Get the time in milliseconds this task took.
		 * @see #getTimeNanos()
		 * @see #getTimeSeconds()
		 */
		/**
		 * 获取此任务花费的时间（以毫秒为单位）。 
		 *  
		 * @see  #getTimeNanos（）
		 * @see  #getTimeSeconds（）
		 */
		public long getTimeMillis() {
			return nanosToMillis(this.timeNanos);
		}

		/**
		 * Get the time in seconds this task took.
		 * @see #getTimeMillis()
		 * @see #getTimeNanos()
		 */
		/**
		 * 获取此任务花费的时间（以秒为单位）。 
		 *  
		 * @see  #getTimeMillis（）
		 * @see  #getTimeNanos（）
		 */
		public double getTimeSeconds() {
			return nanosToSeconds(this.timeNanos);
		}

	}

}
