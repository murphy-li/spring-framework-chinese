/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.util;

import java.util.List;
import java.util.Map;

import org.springframework.lang.Nullable;

/**
 * Extension of the {@code Map} interface that stores multiple values.
 *
 * @author Arjen Poutsma
 * @since 3.0
 * @param <K> the key type
 * @param <V> the value element type
 */
/**
 * {@code  Map}接口的扩展，用于存储多个值。 
 *  @author  Arjen Poutsma @从3.0开始
 * @param  <K>键类型
 * @param  <V>值元​​素类型
 */
public interface MultiValueMap<K, V> extends Map<K, List<V>> {

	/**
	 * Return the first value for the given key.
	 * @param key the key
	 * @return the first value for the specified key, or {@code null} if none
	 */
	/**
	 * 返回给定键的第一个值。 
	 *  
	 * @param 键，键
	 * @return 指定键的第一个值，如果没有，则为{@code  null}
	 */
	@Nullable
	V getFirst(K key);

	/**
	 * Add the given single value to the current list of values for the given key.
	 * @param key the key
	 * @param value the value to be added
	 */
	/**
	 * 将给定的单个值添加到给定键的当前值列表中。 
	 *  
	 * @param 键键
	 * @param 值要添加的值
	 */
	void add(K key, @Nullable V value);

	/**
	 * Add all the values of the given list to the current list of values for the given key.
	 * @param key they key
	 * @param values the values to be added
	 * @since 5.0
	 */
	/**
	 * 将给定列表的所有值添加到给定键的当前值列表中。 
	 *  
	 * @param 键，它们键
	 * @param 值@5.0起要添加的值
	 */
	void addAll(K key, List<? extends V> values);

	/**
	 * Add all the values of the given {@code MultiValueMap} to the current values.
	 * @param values the values to be added
	 * @since 5.0
	 */
	/**
	 * 将给定{@code  MultiValueMap}的所有值添加到当前值。 
	 *  
	 * @param 设置从5.0开始的值
	 */
	void addAll(MultiValueMap<K, V> values);

	/**
	 * {@link #add(Object, Object) Add} the given value, only when the map does not
	 * {@link #containsKey(Object) contain} the given key.
	 * @param key the key
	 * @param value the value to be added
	 * @since 5.2
	 */
	/**
	 * 仅当地图不{@link  #containsKey（Object）包含}给定键时，才给定值{@link  #add（Object，Object）Add}。 
	 *  
	 * @param 键键
	 * @param 值自5.2起要添加的值
	 */
	default void addIfAbsent(K key, @Nullable V value) {
		if (!containsKey(key)) {
			add(key, value);
		}
	}

	/**
	 * Set the given single value under the given key.
	 * @param key the key
	 * @param value the value to set
	 */
	/**
	 * 在给定的键下设置给定的单个值。 
	 *  
	 * @param 键键
	 * @param 值要设置的值
	 */
	void set(K key, @Nullable V value);

	/**
	 * Set the given values under.
	 * @param values the values.
	 */
	/**
	 * 在下面设置给定值。 
	 *  
	 * @param 将值赋值。 
	 * 
	 */
	void setAll(Map<K, V> values);

	/**
	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}.
	 * @return a single value representation of this map
	 */
	/**
	 * 返回带有此{@code  MultiValueMap}中包含的第一个值的{@code  Map}。 
	 *  
	 * @return 此映射的单个值表示
	 */
	Map<K, V> toSingleValueMap();

}
