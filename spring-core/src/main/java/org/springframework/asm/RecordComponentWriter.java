/** Generated by english-annotation-buster, Powered by Google Translate.**/
// ASM: a very small and fast Java bytecode manipulation framework
// Copyright (c) 2000-2011 INRIA, France Telecom
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
package org.springframework.asm;

@SuppressWarnings("deprecation")
final class RecordComponentWriter extends RecordComponentVisitor {
  /** Where the constants used in this RecordComponentWriter must be stored. */
  /**
   * 必须存储此RecordComponentWriter中使用的常量的位置。 
   * 
   */
  private final SymbolTable symbolTable;

  // Note: fields are ordered as in the component_info structure, and those related to attributes
  // are ordered as in Section TODO of the JVMS.
  // The field accessFlag doesn't exist in the component_info structure but is used to carry
  // ACC_DEPRECATED which is represented by an attribute in the structure and as an access flag by
  // ASM.

  /** The access_flags field can only be {@link Opcodes#ACC_DEPRECATED}. */
  /**
   * access_flags字段只能是{@link  Opcodes＃ACC_DEPRECATED}。 
   * 
   */
  private final int accessFlags;

  /** The name_index field of the Record attribute. */
  /**
   * 记录属性的name_index字段。 
   * 
   */
  private final int nameIndex;

  /** The descriptor_index field of the the Record attribute. */
  /**
   * Record属性的描述符描述符字段。 
   * 
   */
  private final int descriptorIndex;

  /**
   * The signature_index field of the Signature attribute of this record component, or 0 if there is
   * no Signature attribute.
   */
  /**
   * 此记录组件的Signature属性的signature_index字段，如果没有Signature属性，则为0。 
   * 
   */
  private int signatureIndex;

  /**
   * The last runtime visible annotation of this record component. The previous ones can be accessed
   * with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.
   */
  /**
   * 此记录组件的最后一个运行时可见注释。 
   * 可以使用{@link  AnnotationWriter＃previousAnnotation}字段访问先前的内容。 
   * 可能为{@literal null}。 
   * 
   */
  private AnnotationWriter lastRuntimeVisibleAnnotation;

  /**
   * The last runtime invisible annotation of this record component. The previous ones can be
   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.
   */
  /**
   * 此记录组件的最后一个运行时不可见注释。 
   * 可以使用{@link  AnnotationWriter＃previousAnnotation}字段访问先前的内容。 
   * 可能为{@literal null}。 
   * 
   */
  private AnnotationWriter lastRuntimeInvisibleAnnotation;

  /**
   * The last runtime visible type annotation of this record component. The previous ones can be
   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.
   */
  /**
   * 此记录组件的最后一个运行时可见类型注释。 
   * 可以使用{@link  AnnotationWriter＃previousAnnotation}字段访问先前的内容。 
   * 可能为{@literal null}。 
   * 
   */
  private AnnotationWriter lastRuntimeVisibleTypeAnnotation;

  /**
   * The last runtime invisible type annotation of this record component. The previous ones can be
   * accessed with the {@link AnnotationWriter#previousAnnotation} field. May be {@literal null}.
   */
  /**
   * 此记录组件的最后一个运行时不可见类型注释。 
   * 可以使用{@link  AnnotationWriter＃previousAnnotation}字段访问先前的内容。 
   * 可能为{@literal null}。 
   * 
   */
  private AnnotationWriter lastRuntimeInvisibleTypeAnnotation;

  /**
   * The first non standard attribute of this record component. The next ones can be accessed with
   * the {@link Attribute#nextAttribute} field. May be {@literal null}.
   *
   * <p><b>WARNING</b>: this list stores the attributes in the <i>reverse</i> order of their visit.
   * firstAttribute is actually the last attribute visited in {@link
   * #visitAttributeExperimental(Attribute)}. The {@link #putRecordComponentInfo(ByteVector)} method
   * writes the attributes in the order defined by this list, i.e. in the reverse order specified by
   * the user.
   */
  /**
   * 此记录组件的第一个非标准属性。 
   * 可以使用{@link  Attribute＃nextAttribute}字段访问下一个。 
   * 可能为{@literal null}。 
   *  <p> <b>警告</ b>：此列表按属性按其访问的<i>反向</ i>顺序存储。 
   *  firstAttribute实际上是{@link  #visitAttributeExperimental（Attribute）}中访问的最后一个属性。 
   *  {@link  #putRecordComponentInfo（ByteVector）}方法按照此列表定义的顺序（即，用户指定的相反顺序）写入属性。 
   * 
   */
  private Attribute firstAttribute;

  /**
   * Constructs a new {@link RecordComponentWriter}.
   *
   * @param symbolTable where the constants used in this RecordComponentWriter must be stored.
   * @param accessFlags the record component access flags, only synthetic and/or deprecated.
   * @param name the record component name.
   * @param descriptor the record component descriptor (see {@link Type}).
   * @param signature the record component signature. May be {@literal null}.
   */
  /**
   * 构造一个新的{@link  RecordComponentWriter}。 
   *  
   * @param  symbolTable必须存储此RecordComponentWriter中使用的常量的位置。 
   *  
   * @param  accessFlags记录组件访问标志，仅合成和/或已弃用。 
   *  
   * @param 命名记录组件名称。 
   *  
   * @param 描述符是记录组件描述符（请参见{@link 类型}）。 
   *  
   * @param 签名记录组件的签名。 
   * 可能为{@literal null}。 
   * 
   */
  RecordComponentWriter(
      final SymbolTable symbolTable,
      final int accessFlags,
      final String name,
      final String descriptor,
      final String signature) {
    super(/* latest api = */ Opcodes.ASM7);
/**
 * 最新API =
 */
    this.symbolTable = symbolTable;
    this.accessFlags = accessFlags;
    this.nameIndex = symbolTable.addConstantUtf8(name);
    this.descriptorIndex = symbolTable.addConstantUtf8(descriptor);
    if (signature != null) {
      this.signatureIndex = symbolTable.addConstantUtf8(signature);
    }
  }

  // -----------------------------------------------------------------------------------------------
  // Implementation of the FieldVisitor abstract class
  // -----------------------------------------------------------------------------------------------

  @Override
  public AnnotationVisitor visitAnnotationExperimental(
      final String descriptor, final boolean visible) {
    if (visible) {
      return lastRuntimeVisibleAnnotation =
          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeVisibleAnnotation);
    } else {
      return lastRuntimeInvisibleAnnotation =
          AnnotationWriter.create(symbolTable, descriptor, lastRuntimeInvisibleAnnotation);
    }
  }

  @Override
  public AnnotationVisitor visitTypeAnnotationExperimental(
      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {
    if (visible) {
      return lastRuntimeVisibleTypeAnnotation =
          AnnotationWriter.create(
              symbolTable, typeRef, typePath, descriptor, lastRuntimeVisibleTypeAnnotation);
    } else {
      return lastRuntimeInvisibleTypeAnnotation =
          AnnotationWriter.create(
              symbolTable, typeRef, typePath, descriptor, lastRuntimeInvisibleTypeAnnotation);
    }
  }

  @Override
  public void visitAttributeExperimental(final Attribute attribute) {
    // Store the attributes in the <i>reverse</i> order of their visit by this method.
    attribute.nextAttribute = firstAttribute;
    firstAttribute = attribute;
  }

  @Override
  public void visitEndExperimental() {
    // Nothing to do.
  }

  // -----------------------------------------------------------------------------------------------
  // Utility methods
  // -----------------------------------------------------------------------------------------------

  /**
   * Returns the size of the record component JVMS structure generated by this
   * RecordComponentWriter. Also adds the names of the attributes of this record component in the
   * constant pool.
   *
   * @return the size in bytes of the record_component_info of the Record attribute.
   */
  /**
   * 返回由此RecordComponentWriter生成的记录组件JVMS结构的大小。 
   * 还将此记录组件的属性名称添加到常量池中。 
   *  
   * @return  Record属性的record_component_info的大小（以字节为单位）。 
   * 
   */
  int computeRecordComponentInfoSize() {
    // name_index, descriptor_index and attributes_count fields use 6 bytes.
    int size = 6;
    size +=
        Attribute.computeAttributesSize(
            symbolTable, accessFlags & Opcodes.ACC_DEPRECATED, signatureIndex);
    size +=
        AnnotationWriter.computeAnnotationsSize(
            lastRuntimeVisibleAnnotation,
            lastRuntimeInvisibleAnnotation,
            lastRuntimeVisibleTypeAnnotation,
            lastRuntimeInvisibleTypeAnnotation);
    if (firstAttribute != null) {
      size += firstAttribute.computeAttributesSize(symbolTable);
    }
    return size;
  }

  /**
   * Puts the content of the record component generated by this RecordComponentWriter into the given
   * ByteVector.
   *
   * @param output where the record_component_info structure must be put.
   */
  /**
   * 将由此RecordComponentWriter生成的记录组件的内容放入给定的ByteVector中。 
   *  
   * @param 输出必须放置record_component_info结构的位置。 
   * 
   */
  void putRecordComponentInfo(final ByteVector output) {
    output.putShort(nameIndex).putShort(descriptorIndex);
    // Compute and put the attributes_count field.
    // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.
    int attributesCount = 0;
    if (signatureIndex != 0) {
      ++attributesCount;
    }
    if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) {
      ++attributesCount;
    }
    if (lastRuntimeVisibleAnnotation != null) {
      ++attributesCount;
    }
    if (lastRuntimeInvisibleAnnotation != null) {
      ++attributesCount;
    }
    if (lastRuntimeVisibleTypeAnnotation != null) {
      ++attributesCount;
    }
    if (lastRuntimeInvisibleTypeAnnotation != null) {
      ++attributesCount;
    }
    if (firstAttribute != null) {
      attributesCount += firstAttribute.getAttributeCount();
    }
    output.putShort(attributesCount);
    Attribute.putAttributes(symbolTable, accessFlags, signatureIndex, output);
    AnnotationWriter.putAnnotations(
        symbolTable,
        lastRuntimeVisibleAnnotation,
        lastRuntimeInvisibleAnnotation,
        lastRuntimeVisibleTypeAnnotation,
        lastRuntimeInvisibleTypeAnnotation,
        output);
    if (firstAttribute != null) {
      firstAttribute.putAttributes(symbolTable, output);
    }
  }

  /**
   * Collects the attributes of this record component into the given set of attribute prototypes.
   *
   * @param attributePrototypes a set of attribute prototypes.
   */
  /**
   * 将此记录组件的属性收集到给定的属性原型集中。 
   *  
   * @param  attributePrototypes一组属性原型。 
   * 
   */
  final void collectAttributePrototypes(final Attribute.Set attributePrototypes) {
    attributePrototypes.addAttributes(firstAttribute);
  }
}
