/** Generated by english-annotation-buster, Powered by Google Translate.**/
// ASM: a very small and fast Java bytecode manipulation framework
// Copyright (c) 2000-2011 INRIA, France Telecom
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
package org.springframework.asm;

/**
 * A visitor to visit a record component. The methods of this class must be called in the following
 * order: ( {@code visitAnnotation} | {@code visitTypeAnnotation} | {@code visitAttribute} )* {@code
 * visitEnd}.
 *
 * @author Remi Forax
 * @author Eric Bruneton
 * @deprecated this API is experimental.
 */
/**
 * 访问者访问记录组件。 
 * 此类的方法必须按以下顺序调用：（{@code  visitAnnotation} | {@code  visitTypeAnnotation} | {@code  visitAttribute}）{@code  visitEnd}。 
 *  @author  Remi Forax @author 埃里克·布鲁内顿（Eric Bruneton）@已弃用该API是试验性的。 
 * 
 */
@Deprecated
public abstract class RecordComponentVisitor {
  /**
   * The ASM API version implemented by this visitor. The value of this field must be {@link
   * Opcodes#ASM8_EXPERIMENTAL}.
   */
  /**
   * 此访问者实现的ASM API版本。 
   * 该字段的值必须为{@link  Opcodes＃ASM8_EXPERIMENTAL}。 
   * 
   */
  protected final int api;

  /**
   * The record visitor to which this visitor must delegate method calls. May be {@literal null}.
   */
  /**
   * 此访问者必须委派方法调用的记录访问者。 
   * 可能为{@literal null}。 
   * 
   */
  /*package-private*/ RecordComponentVisitor delegate;
  /**
   * 包私有
   */

  /**
   * Constructs a new {@link RecordComponentVisitor}.
   *
   * @param api the ASM API version implemented by this visitor. Must be {@link
   *     Opcodes#ASM8_EXPERIMENTAL}.
   * @deprecated this API is experimental.
   */
  /**
   * 构造一个新的{@link  RecordComponentVisitor}。 
   *  
   * @param  api此访客实现的ASM API版本。 
   * 必须为{@link  Opcodes＃ASM8_EXPERIMENTAL}。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public RecordComponentVisitor(final int api) {
    this(api, null);
  }

  /**
   * Constructs a new {@link RecordComponentVisitor}.
   *
   * @param api the ASM API version implemented by this visitor. Must be {@link
   *     Opcodes#ASM8_EXPERIMENTAL}.
   * @param recordComponentVisitor the record component visitor to which this visitor must delegate
   *     method calls. May be null.
   * @deprecated this API is experimental.
   */
  /**
   * 构造一个新的{@link  RecordComponentVisitor}。 
   *  
   * @param  api此访客实现的ASM API版本。 
   * 必须为{@link  Opcodes＃ASM8_EXPERIMENTAL}。 
   *  
   * @param  recordComponentVisitor该访问者必须委派该方法调用的记录组件访问者。 
   * 可能为空。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public RecordComponentVisitor(
      final int api, final RecordComponentVisitor recordComponentVisitor) {
    if (api != Opcodes.ASM7
        && api != Opcodes.ASM6
        && api != Opcodes.ASM5
        && api != Opcodes.ASM4
        && api != Opcodes.ASM8_EXPERIMENTAL) {
      throw new IllegalArgumentException("Unsupported api " + api);
    }
    if (api == Opcodes.ASM8_EXPERIMENTAL) {
      Constants.checkAsm8Experimental(this);
    }
    this.api = api;
    this.delegate = recordComponentVisitor;
  }

  /**
   * The record visitor to which this visitor must delegate method calls. May be {@literal null}.
   *
   * @return the record visitor to which this visitor must delegate method calls or {@literal null}.
   * @deprecated this API is experimental.
   */
  /**
   * 此访问者必须委派方法调用的记录访问者。 
   * 可能为{@literal null}。 
   *  
   * @return 该访问者必须委托该方法调用的记录访问者，或{@literal null}。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public RecordComponentVisitor getDelegateExperimental() {
    return delegate;
  }

  /**
   * Visits an annotation of the record component.
   *
   * @param descriptor the class descriptor of the annotation class.
   * @param visible {@literal true} if the annotation is visible at runtime.
   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not
   *     interested in visiting this annotation.
   * @deprecated this API is experimental.
   */
  /**
   * 访问记录组件的注释。 
   *  
   * @param 描述符注释类的类描述符。 
   *  
   * @param 可见{@literal true}（如果注释在运行时可见）。 
   *  
   * @return 访问者以访问注释值，如果访问者对访问此注释不感兴趣，则返回{@literal null}。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public AnnotationVisitor visitAnnotationExperimental(
      final String descriptor, final boolean visible) {
    if (delegate != null) {
      return delegate.visitAnnotationExperimental(descriptor, visible);
    }
    return null;
  }

  /**
   * Visits an annotation on a type in the record component signature.
   *
   * @param typeRef a reference to the annotated type. The sort of this type reference must be
   *     {@link TypeReference#CLASS_TYPE_PARAMETER}, {@link
   *     TypeReference#CLASS_TYPE_PARAMETER_BOUND} or {@link TypeReference#CLASS_EXTENDS}. See
   *     {@link TypeReference}.
   * @param typePath the path to the annotated type argument, wildcard bound, array element type, or
   *     static inner type within 'typeRef'. May be {@literal null} if the annotation targets
   *     'typeRef' as a whole.
   * @param descriptor the class descriptor of the annotation class.
   * @param visible {@literal true} if the annotation is visible at runtime.
   * @return a visitor to visit the annotation values, or {@literal null} if this visitor is not
   *     interested in visiting this annotation.
   * @deprecated this API is experimental.
   */
  /**
   * 访问记录组件签名中有关类型的注释。 
   *  
   * @param  typeRef对带注释类型的引用。 
   * 此类型引用的类型必须为{@link  TypeReference＃CLASS_TYPE_PARAMETER}，{<@link> TypeReference＃CLASS_TYPE_PARAMETER_BOUND}或{@link  TypeReference＃CLASS_EXTENDS}。 
   * 请参阅{@link  TypeReference}。 
   *  
   * @param  typePath注释类型参数，通配符绑定，数组元素类型或'typeRef'中的静态内部类型的路径。 
   * 如果注释整体上针对"typeRef"，则可能为{@literal null}。 
   *  
   * @param 描述符注释类的类描述符。 
   *  
   * @param 可见{@literal true}（如果注释在运行时可见）。 
   *  
   * @return 访问者以访问注释值，如果访问者对访问此注释不感兴趣，则返回{@literal null}。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public AnnotationVisitor visitTypeAnnotationExperimental(
      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {
    if (delegate != null) {
      return delegate.visitTypeAnnotationExperimental(typeRef, typePath, descriptor, visible);
    }
    return null;
  }

  /**
   * Visits a non standard attribute of the record component.
   *
   * @param attribute an attribute.
   * @deprecated this API is experimental.
   */
  /**
   * 访问记录组件的非标准属性。 
   *  
   * @param 属性属性。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public void visitAttributeExperimental(final Attribute attribute) {
    if (delegate != null) {
      delegate.visitAttributeExperimental(attribute);
    }
  }

  /**
   * Visits the end of the record component. This method, which is the last one to be called, is
   * used to inform the visitor that everything have been visited.
   *
   * @deprecated this API is experimental.
   */
  /**
   * 访问记录组件的末尾。 
   * 此方法是最后一个要调用的方法，用于通知访问者所有内容都已被访问。 
   *  @不推荐使用此API是实验性的。 
   * 
   */
  @Deprecated
  public void visitEndExperimental() {
    if (delegate != null) {
      delegate.visitEndExperimental();
    }
  }
}
