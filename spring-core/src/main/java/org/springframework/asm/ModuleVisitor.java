/** Generated by english-annotation-buster, Powered by Google Translate.**/
// ASM: a very small and fast Java bytecode manipulation framework
// Copyright (c) 2000-2011 INRIA, France Telecom
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
package org.springframework.asm;

/**
 * A visitor to visit a Java module. The methods of this class must be called in the following
 * order: ( {@code visitMainClass} | ( {@code visitPackage} | {@code visitRequire} | {@code
 * visitExport} | {@code visitOpen} | {@code visitUse} | {@code visitProvide} )* ) {@code visitEnd}.
 *
 * @author Remi Forax
 * @author Eric Bruneton
 */
/**
 * 访问者访问Java模块。 
 * 此类的方法必须按照以下顺序调用：（{@code  visitMainClass} |（{@code  visitPackage} | {@code  visitRequire} | {@code  visitExport} | {<@code> visitOpen} | {@code  visitUse} | {@code  visitProvide}））{@code  visitEnd}。 
 *  @author  Remi Forax @author 埃里克·布鲁内顿
 */
public abstract class ModuleVisitor {
  /**
   * The ASM API version implemented by this visitor. The value of this field must be one of {@link
   * Opcodes#ASM6} or {@link Opcodes#ASM7}.
   */
  /**
   * 此访问者实现的ASM API版本。 
   * 该字段的值必须是{@link  Opcodes＃ASM6}或{@link  Opcodes＃ASM7}之一。 
   * 
   */
  protected final int api;

  /**
   * The module visitor to which this visitor must delegate method calls. May be {@literal null}.
   */
  /**
   * 此访问者必须委派方法调用的模块访问者。 
   * 可能为{@literal null}。 
   * 
   */
  protected ModuleVisitor mv;

  /**
   * Constructs a new {@link ModuleVisitor}.
   *
   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}
   *     or {@link Opcodes#ASM7}.
   */
  /**
   * 构造一个新的{@link  ModuleVisitor}。 
   *  
   * @param  api此访客实现的ASM API版本。 
   * 必须是{@link  Opcodes＃ASM6}或{@link  Opcodes＃ASM7}之一。 
   * 
   */
  public ModuleVisitor(final int api) {
    this(api, null);
  }

  /**
   * Constructs a new {@link ModuleVisitor}.
   *
   * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM6}
   *     or {@link Opcodes#ASM7}.
   * @param moduleVisitor the module visitor to which this visitor must delegate method calls. May
   *     be null.
   */
  /**
   * 构造一个新的{@link  ModuleVisitor}。 
   *  
   * @param  api此访客实现的ASM API版本。 
   * 必须是{@link  Opcodes＃ASM6}或{@link  Opcodes＃ASM7}之一。 
   *  
   * @param  moduleVisitor此访问者必须委派方法调用的模块访问者。 
   * 可能为空。 
   * 
   */
  @SuppressWarnings("deprecation")
  public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor) {
    if (api != Opcodes.ASM7
        && api != Opcodes.ASM6
        && api != Opcodes.ASM5
        && api != Opcodes.ASM4
        && api != Opcodes.ASM8_EXPERIMENTAL) {
      throw new IllegalArgumentException("Unsupported api " + api);
    }
    if (api == Opcodes.ASM8_EXPERIMENTAL) {
      Constants.checkAsm8Experimental(this);
    }
    this.api = api;
    this.mv = moduleVisitor;
  }

  /**
   * Visit the main class of the current module.
   *
   * @param mainClass the internal name of the main class of the current module.
   */
  /**
   * 访问当前模块的主类。 
   *  
   * @param  mainClass当前模块的主类的内部名称。 
   * 
   */
  public void visitMainClass(final String mainClass) {
    if (mv != null) {
      mv.visitMainClass(mainClass);
    }
  }

  /**
   * Visit a package of the current module.
   *
   * @param packaze the internal name of a package.
   */
  /**
   * 访问当前模块的软件包。 
   *  
   * @param 打包程序包的内部名称。 
   * 
   */
  public void visitPackage(final String packaze) {
    if (mv != null) {
      mv.visitPackage(packaze);
    }
  }

  /**
   * Visits a dependence of the current module.
   *
   * @param module the fully qualified name (using dots) of the dependence.
   * @param access the access flag of the dependence among {@code ACC_TRANSITIVE}, {@code
   *     ACC_STATIC_PHASE}, {@code ACC_SYNTHETIC} and {@code ACC_MANDATED}.
   * @param version the module version at compile time, or {@literal null}.
   */
  /**
   * 访问当前模块的依赖项。 
   *  
   * @param 模块依赖项的完全限定名称（使用点）。 
   *  
   * @param 访问{@code  ACC_TRANSITIVE}，{<@code> ACC_STATIC_PHASE}，{<@code> ACC_SYNTHETIC}和{@code  ACC_MANDATED}之间的依存关系的访问标志。 
   *  
   * @param 在编译时对模块版本进行版本化，或{@literal null}。 
   * 
   */
  public void visitRequire(final String module, final int access, final String version) {
    if (mv != null) {
      mv.visitRequire(module, access, version);
    }
  }

  /**
   * Visit an exported package of the current module.
   *
   * @param packaze the internal name of the exported package.
   * @param access the access flag of the exported package, valid values are among {@code
   *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.
   * @param modules the fully qualified names (using dots) of the modules that can access the public
   *     classes of the exported package, or {@literal null}.
   */
  /**
   * 访问当前模块的导出包。 
   *  
   * @param 打包导出软件包的内部名称。 
   *  
   * @param 访问导出包的访问标志，有效值在{@code  ACC_SYNTHETIC}和{@code  ACC_MANDATED}中。 
   *  
   * @param 模块可以访问导出包的公共类的模块的标准名称（使用点），或{@literal null}。 
   * 
   */
  public void visitExport(final String packaze, final int access, final String... modules) {
    if (mv != null) {
      mv.visitExport(packaze, access, modules);
    }
  }

  /**
   * Visit an open package of the current module.
   *
   * @param packaze the internal name of the opened package.
   * @param access the access flag of the opened package, valid values are among {@code
   *     ACC_SYNTHETIC} and {@code ACC_MANDATED}.
   * @param modules the fully qualified names (using dots) of the modules that can use deep
   *     reflection to the classes of the open package, or {@literal null}.
   */
  /**
   * 访问当前模块的打开包。 
   *  
   * @param 打包打开的包的内部名称。 
   *  
   * @param 访问打开的程序包的访问标志，有效值在{@code  ACC_SYNTHETIC}和{@code  ACC_MANDATED}中。 
   *  
   * @param 组成模块的标准名称（使用点），这些名称可以对打开的程序包的类进行深入的反映，即{@literal null}。 
   * 
   */
  public void visitOpen(final String packaze, final int access, final String... modules) {
    if (mv != null) {
      mv.visitOpen(packaze, access, modules);
    }
  }

  /**
   * Visit a service used by the current module. The name must be the internal name of an interface
   * or a class.
   *
   * @param service the internal name of the service.
   */
  /**
   * 访问当前模块使用的服务。 
   * 该名称必须是接口或类的内部名称。 
   *  
   * @param  service服务的内部名称。 
   * 
   */
  public void visitUse(final String service) {
    if (mv != null) {
      mv.visitUse(service);
    }
  }

  /**
   * Visit an implementation of a service.
   *
   * @param service the internal name of the service.
   * @param providers the internal names of the implementations of the service (there is at least
   *     one provider).
   */
  /**
   * 访问服务的实现。 
   *  
   * @param  service服务的内部名称。 
   *  
   * @param 提供程序服务实现的内部名称（至少有一个提供程序）。 
   * 
   */
  public void visitProvide(final String service, final String... providers) {
    if (mv != null) {
      mv.visitProvide(service, providers);
    }
  }

  /**
   * Visits the end of the module. This method, which is the last one to be called, is used to
   * inform the visitor that everything have been visited.
   */
  /**
   * 访问模块的末尾。 
   * 此方法是最后一个要调用的方法，用于通知访问者所有内容都已被访问。 
   * 
   */
  public void visitEnd() {
    if (mv != null) {
      mv.visitEnd();
    }
  }
}
