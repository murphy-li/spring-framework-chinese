/** Generated by english-annotation-buster, Powered by Google Translate.**/
// ASM: a very small and fast Java bytecode manipulation framework
// Copyright (c) 2000-2011 INRIA, France Telecom
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holders nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.

package org.springframework.asm;

/**
 * A reference to a type appearing in a class, field or method declaration, or on an instruction.
 * Such a reference designates the part of the class where the referenced type is appearing (e.g. an
 * 'extends', 'implements' or 'throws' clause, a 'new' instruction, a 'catch' clause, a type cast, a
 * local variable declaration, etc).
 *
 * @author Eric Bruneton
 */
/**
 * 对出现在类，字段或方法声明或指令中的类型的引用。 
 * 这样的引用指定出现引用类型的类的一部分（例如，"扩展"，"实现"或"抛出"子句，"新"指令，"catch"子句，类型强制转换，局部变量）声明等）。 
 *  @author 埃里克·布鲁内顿
 */
public class TypeReference {

  /**
   * The sort of type references that target a type parameter of a generic class. See {@link
   * #getSort}.
   */
  /**
   * 面向通用类的类型参数的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CLASS_TYPE_PARAMETER = 0x00;

  /**
   * The sort of type references that target a type parameter of a generic method. See {@link
   * #getSort}.
   */
  /**
   * 以通用方法的类型参数为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_TYPE_PARAMETER = 0x01;

  /**
   * The sort of type references that target the super class of a class or one of the interfaces it
   * implements. See {@link #getSort}.
   */
  /**
   * 以类的超类或它所实现的接口之一为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CLASS_EXTENDS = 0x10;

  /**
   * The sort of type references that target a bound of a type parameter of a generic class. See
   * {@link #getSort}.
   */
  /**
   * 以通用类的类型参数为边界的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CLASS_TYPE_PARAMETER_BOUND = 0x11;

  /**
   * The sort of type references that target a bound of a type parameter of a generic method. See
   * {@link #getSort}.
   */
  /**
   * 以通用方法的类型参数为边界的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_TYPE_PARAMETER_BOUND = 0x12;

  /** The sort of type references that target the type of a field. See {@link #getSort}. */
  /**
   * 以字段类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int FIELD = 0x13;

  /** The sort of type references that target the return type of a method. See {@link #getSort}. */
  /**
   * 以方法的返回类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_RETURN = 0x14;

  /**
   * The sort of type references that target the receiver type of a method. See {@link #getSort}.
   */
  /**
   * 以方法的接收者类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_RECEIVER = 0x15;

  /**
   * The sort of type references that target the type of a formal parameter of a method. See {@link
   * #getSort}.
   */
  /**
   * 以方法形式参数类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_FORMAL_PARAMETER = 0x16;

  /**
   * The sort of type references that target the type of an exception declared in the throws clause
   * of a method. See {@link #getSort}.
   */
  /**
   * 以方法的throws子句中声明的异常类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int THROWS = 0x17;

  /**
   * The sort of type references that target the type of a local variable in a method. See {@link
   * #getSort}.
   */
  /**
   * 以方法中的局部变量类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int LOCAL_VARIABLE = 0x40;

  /**
   * The sort of type references that target the type of a resource variable in a method. See {@link
   * #getSort}.
   */
  /**
   * 以方法中的资源变量类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int RESOURCE_VARIABLE = 0x41;

  /**
   * The sort of type references that target the type of the exception of a 'catch' clause in a
   * method. See {@link #getSort}.
   */
  /**
   * 以方法中"catch"子句的异常类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int EXCEPTION_PARAMETER = 0x42;

  /**
   * The sort of type references that target the type declared in an 'instanceof' instruction. See
   * {@link #getSort}.
   */
  /**
   * 以"instanceof"指令中声明的类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int INSTANCEOF = 0x43;

  /**
   * The sort of type references that target the type of the object created by a 'new' instruction.
   * See {@link #getSort}.
   */
  /**
   * 类型引用的类型以"new"指令创建的对象的类型为目标。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int NEW = 0x44;

  /**
   * The sort of type references that target the receiver type of a constructor reference. See
   * {@link #getSort}.
   */
  /**
   * 面向构造函数引用的接收者类型的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CONSTRUCTOR_REFERENCE = 0x45;

  /**
   * The sort of type references that target the receiver type of a method reference. See {@link
   * #getSort}.
   */
  /**
   * 以方法引用的接收者类型为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_REFERENCE = 0x46;

  /**
   * The sort of type references that target the type declared in an explicit or implicit cast
   * instruction. See {@link #getSort}.
   */
  /**
   * 类型引用的类型，以在显式或隐式强制转换指令中声明的类型为目标。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CAST = 0x47;

  /**
   * The sort of type references that target a type parameter of a generic constructor in a
   * constructor call. See {@link #getSort}.
   */
  /**
   * 在构造函数调用中针对通用构造函数的类型参数的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;

  /**
   * The sort of type references that target a type parameter of a generic method in a method call.
   * See {@link #getSort}.
   */
  /**
   * 以方法调用为目标的通用方法的类型参数的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;

  /**
   * The sort of type references that target a type parameter of a generic constructor in a
   * constructor reference. See {@link #getSort}.
   */
  /**
   * 以构造函数引用中的通用构造函数的类型参数为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;

  /**
   * The sort of type references that target a type parameter of a generic method in a method
   * reference. See {@link #getSort}.
   */
  /**
   * 以方法引用中的通用方法的类型参数为目标的类型引用的种类。 
   * 请参阅{@link  #getSort}。 
   * 
   */
  public static final int METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;

  /**
   * The target_type and target_info structures - as defined in the Java Virtual Machine
   * Specification (JVMS) - corresponding to this type reference. target_type uses one byte, and all
   * the target_info union fields use up to 3 bytes (except localvar_target, handled with the
   * specific method {@link MethodVisitor#visitLocalVariableAnnotation}). Thus, both structures can
   * be stored in an int.
   *
   * <p>This int field stores target_type (called the TypeReference 'sort' in the public API of this
   * class) in its most significant byte, followed by the target_info fields. Depending on
   * target_type, 1, 2 or even 3 least significant bytes of this field are unused. target_info
   * fields which reference bytecode offsets are set to 0 (these offsets are ignored in ClassReader,
   * and recomputed in MethodWriter).
   *
   * @see <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20">JVMS
   *     4.7.20</a>
   * @see <a
   *     href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20.1">JVMS
   *     4.7.20.1</a>
   */
  /**
   * 对应于此类型引用的target_type和target_info结构（在Java虚拟机规范（JVMS）中定义）。 
   *  target_type使用一个字节，并且所有target_info联合字段最多使用3个字节（localvar_target除外，使用特定方法{@link  MethodVisitor＃visitLocalVariableAnnotation}处理）。 
   * 因此，两个结构都可以存储在一个int中。 
   *  <p>此int字段在其最高有效字节中存储target_type（在此类的公共API中称为TypeReference'sort'），其后是target_info字段。 
   * 根据target_type，未使用该字段的1、2或什至3个最低有效字节。 
   * 引用字节码偏移量的target_info字段设置为0（这些偏移量在ClassReader中被忽略，并在MethodWriter中重新计算）。 
   *  
   * @see  <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20"> JVMS 4.7.20 </a> 
   * @see  <a href="https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.20.1"> JVMS 4.7.20.1 </a>
   */
  private final int targetTypeAndInfo;

  /**
   * Constructs a new TypeReference.
   *
   * @param typeRef the int encoded value of the type reference, as received in a visit method
   *     related to type annotations, such as {@link ClassVisitor#visitTypeAnnotation}.
   */
  /**
   * 构造一个新的TypeReference。 
   *  
   * @param  typeRef类型引用的int编码值，是在与类型注释有关的访问方法中收到的，例如{@link  ClassVisitor＃visitTypeAnnotation}。 
   * 
   */
  public TypeReference(final int typeRef) {
    this.targetTypeAndInfo = typeRef;
  }

  /**
   * Returns a type reference of the given sort.
   *
   * @param sort one of {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link
   *     #LOCAL_VARIABLE}, {@link #RESOURCE_VARIABLE}, {@link #INSTANCEOF}, {@link #NEW}, {@link
   *     #CONSTRUCTOR_REFERENCE}, or {@link #METHOD_REFERENCE}.
   * @return a type reference of the given sort.
   */
  /**
   * 返回给定排序的类型引用。 
   *  
   * @param 对{@link  #FIELD}，{<@link> #METHOD_RETURN}，{<@link> #METHOD_RECEIVER}，{<@link> #LOCAL_VARIABLE}，{<@link> #RESOURCE_VARIABLE }，{<@link> #INSTANCEOF}，{<@link> #NEW}，{<@link> #CONSTRUCTOR_REFERENCE}或{@link  #METHOD_REFERENCE}。 
   *  
   * @return 给定类型的类型引用。 
   * 
   */
  public static TypeReference newTypeReference(final int sort) {
    return new TypeReference(sort << 24);
  }

  /**
   * Returns a reference to a type parameter of a generic class or method.
   *
   * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.
   * @param paramIndex the type parameter index.
   * @return a reference to the given generic class or method type parameter.
   */
  /**
   * 返回对泛型类或方法的类型参数的引用。 
   *  
   * @param 对{@link  #CLASS_TYPE_PARAMETER}或{@link  #METHOD_TYPE_PARAMETER}之一进行排序。 
   *  
   * @param  paramIndex类型参数索引。 
   *  
   * @return 对给定的通用类或方法类型参数的引用。 
   * 
   */
  public static TypeReference newTypeParameterReference(final int sort, final int paramIndex) {
    return new TypeReference((sort << 24) | (paramIndex << 16));
  }

  /**
   * Returns a reference to a type parameter bound of a generic class or method.
   *
   * @param sort one of {@link #CLASS_TYPE_PARAMETER} or {@link #METHOD_TYPE_PARAMETER}.
   * @param paramIndex the type parameter index.
   * @param boundIndex the type bound index within the above type parameters.
   * @return a reference to the given generic class or method type parameter bound.
   */
  /**
   * 返回对泛型类或方法的类型参数界限的引用。 
   *  
   * @param 对{@link  #CLASS_TYPE_PARAMETER}或{@link  #METHOD_TYPE_PARAMETER}之一进行排序。 
   *  
   * @param  paramIndex类型参数索引。 
   *  
   * @param  boundIndex是上述类型参数内的类型绑定索引。 
   *  
   * @return 对给定泛型类或方法类型参数绑定的引用。 
   * 
   */
  public static TypeReference newTypeParameterBoundReference(
      final int sort, final int paramIndex, final int boundIndex) {
    return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));
  }

  /**
   * Returns a reference to the super class or to an interface of the 'implements' clause of a
   * class.
   *
   * @param itfIndex the index of an interface in the 'implements' clause of a class, or -1 to
   *     reference the super class of the class.
   * @return a reference to the given super type of a class.
   */
  /**
   * 返回对超类或类的"implements"子句的接口的引用。 
   *  
   * @param  itfIndex在类的"implements"子句中的接口索引，或者为-1，以引用该类的超类。 
   *  
   * @return 对给定的类的超类型的引用。 
   * 
   */
  public static TypeReference newSuperTypeReference(final int itfIndex) {
    return new TypeReference((CLASS_EXTENDS << 24) | ((itfIndex & 0xFFFF) << 8));
  }

  /**
   * Returns a reference to the type of a formal parameter of a method.
   *
   * @param paramIndex the formal parameter index.
   * @return a reference to the type of the given method formal parameter.
   */
  /**
   * 返回对方法形式参数类型的引用。 
   *  
   * @param  paramIndex形式参数索引。 
   *  
   * @return 对给定方法形式参数的类型的引用。 
   * 
   */
  public static TypeReference newFormalParameterReference(final int paramIndex) {
    return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));
  }

  /**
   * Returns a reference to the type of an exception, in a 'throws' clause of a method.
   *
   * @param exceptionIndex the index of an exception in a 'throws' clause of a method.
   * @return a reference to the type of the given exception.
   */
  /**
   * 在方法的"throws"子句中返回对异常类型的引用。 
   *  
   * @param  exceptionIndex方法的"throws"子句中异常的索引。 
   *  
   * @return 对给定异常类型的引用。 
   * 
   */
  public static TypeReference newExceptionReference(final int exceptionIndex) {
    return new TypeReference((THROWS << 24) | (exceptionIndex << 8));
  }

  /**
   * Returns a reference to the type of the exception declared in a 'catch' clause of a method.
   *
   * @param tryCatchBlockIndex the index of a try catch block (using the order in which they are
   *     visited with visitTryCatchBlock).
   * @return a reference to the type of the given exception.
   */
  /**
   * 返回对方法的"catch"子句中声明的异常类型的引用。 
   *  
   * @param  tryCatchBlockIndex尝试捕获块的索引（使用通过visitTryCatchBlock访问它们的顺序）。 
   *  
   * @return 对给定异常类型的引用。 
   * 
   */
  public static TypeReference newTryCatchReference(final int tryCatchBlockIndex) {
    return new TypeReference((EXCEPTION_PARAMETER << 24) | (tryCatchBlockIndex << 8));
  }

  /**
   * Returns a reference to the type of a type argument in a constructor or method call or
   * reference.
   *
   * @param sort one of {@link #CAST}, {@link #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link
   *     #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link
   *     #METHOD_REFERENCE_TYPE_ARGUMENT}.
   * @param argIndex the type argument index.
   * @return a reference to the type of the given type argument.
   */
  /**
   * 返回对构造函数或方法调用或引用中类型实参类型的引用。 
   *  
   * @param 对{@link  #CAST}，{<@link> #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}，{<@link> #METHOD_INVOCATION_TYPE_ARGUMENT}，{<@link> #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}或{@link ＃ METHOD_REFERENCE_TYPE_ARGUMENT}。 
   *  
   * @param  argIndex类型参数索引。 
   *  
   * @return 对给定类型参数的类型的引用。 
   * 
   */
  public static TypeReference newTypeArgumentReference(final int sort, final int argIndex) {
    return new TypeReference((sort << 24) | argIndex);
  }

  /**
   * Returns the sort of this type reference.
   *
   * @return one of {@link #CLASS_TYPE_PARAMETER}, {@link #METHOD_TYPE_PARAMETER}, {@link
   *     #CLASS_EXTENDS}, {@link #CLASS_TYPE_PARAMETER_BOUND}, {@link #METHOD_TYPE_PARAMETER_BOUND},
   *     {@link #FIELD}, {@link #METHOD_RETURN}, {@link #METHOD_RECEIVER}, {@link
   *     #METHOD_FORMAL_PARAMETER}, {@link #THROWS}, {@link #LOCAL_VARIABLE}, {@link
   *     #RESOURCE_VARIABLE}, {@link #EXCEPTION_PARAMETER}, {@link #INSTANCEOF}, {@link #NEW},
   *     {@link #CONSTRUCTOR_REFERENCE}, {@link #METHOD_REFERENCE}, {@link #CAST}, {@link
   *     #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link
   *     #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.
   */
  /**
   * 返回此类型引用的排序。 
   *  
   * @return  {@link  #CLASS_TYPE_PARAMETER}，{<@link> #METHOD_TYPE_PARAMETER}，{<@link> #CLASS_EXTENDS}，{<@link> #CLASS_TYPE_PARAMETER_BOUND}，{<@link> #METHOD_TYPE_PARAMETER ，{@link  #FIELD}，{@link  #METHOD_RETURN}，{@link  #METHOD_RECEIVER}，{@link  #METHOD_FORMAL_PARAMETER}，{@link  #THROWS}，{<@link > #LOCAL_VARIABLE}，{<@link> #RESOURCE_VARIABLE}，{<@link> #EXCEPTION_PARAMETER}，{<@link> #INSTANCEOF}，{<@link> #NEW}，{<@link> #CONSTRUCTOR_REFERENCE}， {@link  #METHOD_REFERENCE}，{<@link> #CAST}，{<@link> #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}，{<@link> #METHOD_INVOCATION_TYPE_ARGUMENT}，{<@link> #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}或{<@link > #METHOD_REFERENCE_TYPE_ARGUMENT}。 
   * 
   */
  public int getSort() {
    return targetTypeAndInfo >>> 24;
  }

  /**
   * Returns the index of the type parameter referenced by this type reference. This method must
   * only be used for type references whose sort is {@link #CLASS_TYPE_PARAMETER}, {@link
   * #METHOD_TYPE_PARAMETER}, {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link
   * #METHOD_TYPE_PARAMETER_BOUND}.
   *
   * @return a type parameter index.
   */
  /**
   * 返回此类型引用所引用的类型参数的索引。 
   * 此方法只能用于排序为{@link  #CLASS_TYPE_PARAMETER}，{<@link> #METHOD_TYPE_PARAMETER}，{<@link> #CLASS_TYPE_PARAMETER_BOUND}或{@link  #METHOD_TYPE_PARAMETER_BOUND}的类型引用。 
   *  
   * @return 类型参数索引。 
   * 
   */
  public int getTypeParameterIndex() {
    return (targetTypeAndInfo & 0x00FF0000) >> 16;
  }

  /**
   * Returns the index of the type parameter bound, within the type parameter {@link
   * #getTypeParameterIndex}, referenced by this type reference. This method must only be used for
   * type references whose sort is {@link #CLASS_TYPE_PARAMETER_BOUND} or {@link
   * #METHOD_TYPE_PARAMETER_BOUND}.
   *
   * @return a type parameter bound index.
   */
  /**
   * 返回此类型引用引用的类型参数{@link  #getTypeParameterIndex}中绑定的类型参数的索引。 
   * 此方法只能用于排序为{@link  #CLASS_TYPE_PARAMETER_BOUND}或{@link  #METHOD_TYPE_PARAMETER_BOUND}的类型引用。 
   *  
   * @return 类型参数绑定索引。 
   * 
   */
  public int getTypeParameterBoundIndex() {
    return (targetTypeAndInfo & 0x0000FF00) >> 8;
  }

  /**
   * Returns the index of the "super type" of a class that is referenced by this type reference.
   * This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.
   *
   * @return the index of an interface in the 'implements' clause of a class, or -1 if this type
   *     reference references the type of the super class.
   */
  /**
   * 返回此类型引用所引用的类的"超级类型"的索引。 
   * 此方法只能用于排序为{@link  #CLASS_EXTENDS}的类型引用。 
   *  
   * @return 接口在类的"implements"子句中的索引； 
   * 如果此类型引用引用超类的类型，则为-1。 
   * 
   */
  public int getSuperTypeIndex() {
    return (short) ((targetTypeAndInfo & 0x00FFFF00) >> 8);
  }

  /**
   * Returns the index of the formal parameter whose type is referenced by this type reference. This
   * method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.
   *
   * @return a formal parameter index.
   */
  /**
   * 返回此类型引用引用其类型的形式参数的索引。 
   * 此方法只能用于排序为{@link  #METHOD_FORMAL_PARAMETER}的类型引用。 
   *  
   * @return 形式参数索引。 
   * 
   */
  public int getFormalParameterIndex() {
    return (targetTypeAndInfo & 0x00FF0000) >> 16;
  }

  /**
   * Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced
   * by this type reference. This method must only be used for type references whose sort is {@link
   * #THROWS}.
   *
   * @return the index of an exception in the 'throws' clause of a method.
   */
  /**
   * 在方法的"throws"子句中返回异常的索引，该类型的类型由该类型引用引用。 
   * 此方法只能用于排序为{@link  #THROWS}的类型引用。 
   *  
   * @return 方法的"throws"子句中异常的索引。 
   * 
   */
  public int getExceptionIndex() {
    return (targetTypeAndInfo & 0x00FFFF00) >> 8;
  }

  /**
   * Returns the index of the try catch block (using the order in which they are visited with
   * visitTryCatchBlock), whose 'catch' type is referenced by this type reference. This method must
   * only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .
   *
   * @return the index of an exception in the 'throws' clause of a method.
   */
  /**
   * 返回try catch块的索引（使用visitTryCatchBlock访问它们的顺序），该类型引用引用了其"catch"类型。 
   * 此方法只能用于排序为{@link  #EXCEPTION_PARAMETER}的类型引用。 
   *  
   * @return 方法的"throws"子句中异常的索引。 
   * 
   */
  public int getTryCatchBlockIndex() {
    return (targetTypeAndInfo & 0x00FFFF00) >> 8;
  }

  /**
   * Returns the index of the type argument referenced by this type reference. This method must only
   * be used for type references whose sort is {@link #CAST}, {@link
   * #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}, {@link #METHOD_INVOCATION_TYPE_ARGUMENT}, {@link
   * #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}, or {@link #METHOD_REFERENCE_TYPE_ARGUMENT}.
   *
   * @return a type parameter index.
   */
  /**
   * 返回此类型引用引用的类型参数的索引。 
   * 此方法只能用于排序为{@link  #CAST}，{<@link> #CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}，{<@link> #METHOD_INVOCATION_TYPE_ARGUMENT}，{<@link> #CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}的类型引用@link  #METHOD_REFERENCE_TYPE_ARGUMENT}。 
   *  
   * @return 类型参数索引。 
   * 
   */
  public int getTypeArgumentIndex() {
    return targetTypeAndInfo & 0xFF;
  }

  /**
   * Returns the int encoded value of this type reference, suitable for use in visit methods related
   * to type annotations, like visitTypeAnnotation.
   *
   * @return the int encoded value of this type reference.
   */
  /**
   * 返回此类型引用的int编码值，适用于与类型注释相关的访问方法，例如visitTypeAnnotation。 
   *  
   * @return 此类型引用的int编码值。 
   * 
   */
  public int getValue() {
    return targetTypeAndInfo;
  }

  /**
   * Puts the given target_type and target_info JVMS structures into the given ByteVector.
   *
   * @param targetTypeAndInfo a target_type and a target_info structures encoded as in {@link
   *     #targetTypeAndInfo}. LOCAL_VARIABLE and RESOURCE_VARIABLE target types are not supported.
   * @param output where the type reference must be put.
   */
  /**
   * 将给定的target_type和target_info JVMS结构放入给定的ByteVector中。 
   *  
   * @param  targetTypeAndInfo一个target_type和一个target_info结构，其编码方式为{@link  #targetTypeAndInfo}。 
   * 不支持LOCAL_VARIABLE和RESOURCE_VARIABLE目标类型。 
   *  
   * @param 输出必须在其中放置类型引用的位置。 
   * 
   */
  static void putTarget(final int targetTypeAndInfo, final ByteVector output) {
    switch (targetTypeAndInfo >>> 24) {
      case CLASS_TYPE_PARAMETER:
      case METHOD_TYPE_PARAMETER:
      case METHOD_FORMAL_PARAMETER:
        output.putShort(targetTypeAndInfo >>> 16);
        break;
      case FIELD:
      case METHOD_RETURN:
      case METHOD_RECEIVER:
        output.putByte(targetTypeAndInfo >>> 24);
        break;
      case CAST:
      case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
      case METHOD_INVOCATION_TYPE_ARGUMENT:
      case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
      case METHOD_REFERENCE_TYPE_ARGUMENT:
        output.putInt(targetTypeAndInfo);
        break;
      case CLASS_EXTENDS:
      case CLASS_TYPE_PARAMETER_BOUND:
      case METHOD_TYPE_PARAMETER_BOUND:
      case THROWS:
      case EXCEPTION_PARAMETER:
      case INSTANCEOF:
      case NEW:
      case CONSTRUCTOR_REFERENCE:
      case METHOD_REFERENCE:
        output.put12(targetTypeAndInfo >>> 24, (targetTypeAndInfo & 0xFFFF00) >> 8);
        break;
      default:
        throw new IllegalArgumentException();
    }
  }
}
