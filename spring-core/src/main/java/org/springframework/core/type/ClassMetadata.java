/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.type;

import org.springframework.lang.Nullable;

/**
 * Interface that defines abstract metadata of a specific class,
 * in a form that does not require that class to be loaded yet.
 *
 * @author Juergen Hoeller
 * @since 2.5
 * @see StandardClassMetadata
 * @see org.springframework.core.type.classreading.MetadataReader#getClassMetadata()
 * @see AnnotationMetadata
 */
/**
 * 该接口以不需要加载该类的形式定义特定类的抽象元数据。 
 *  @author  Juergen Hoeller @since 2.5起
 * @see  StandardClassMetadata 
 * @see  org.springframework.core.type.classreading.MetadataReader＃getClassMetadata（）
 * @see  AnnotationMetadata
 */
public interface ClassMetadata {

	/**
	 * Return the name of the underlying class.
	 */
	/**
	 * 返回基础类的名称。 
	 * 
	 */
	String getClassName();

	/**
	 * Return whether the underlying class represents an interface.
	 */
	/**
	 * 返回基础类是否表示接口。 
	 * 
	 */
	boolean isInterface();

	/**
	 * Return whether the underlying class represents an annotation.
	 * @since 4.1
	 */
	/**
	 * 返回基础类是否表示注释。 
	 *  @始于4.1
	 */
	boolean isAnnotation();

	/**
	 * Return whether the underlying class is marked as abstract.
	 */
	/**
	 * 返回基础类是否标记为抽象。 
	 * 
	 */
	boolean isAbstract();

	/**
	 * Return whether the underlying class represents a concrete class,
	 * i.e. neither an interface nor an abstract class.
	 */
	/**
	 * 返回基础类是否表示具体类，即既不是接口也不是抽象类。 
	 * 
	 */
	default boolean isConcrete() {
		return !(isInterface() || isAbstract());
	}

	/**
	 * Return whether the underlying class is marked as 'final'.
	 */
	/**
	 * 返回基础类是否标记为"final"。 
	 * 
	 */
	boolean isFinal();

	/**
	 * Determine whether the underlying class is independent, i.e. whether
	 * it is a top-level class or a nested class (static inner class) that
	 * can be constructed independently from an enclosing class.
	 */
	/**
	 * 确定基础类是否是独立的，即它是顶级类还是可以与封闭类独立构造的嵌套类（静态内部类）。 
	 * 
	 */
	boolean isIndependent();

	/**
	 * Return whether the underlying class is declared within an enclosing
	 * class (i.e. the underlying class is an inner/nested class or a
	 * local class within a method).
	 * <p>If this method returns {@code false}, then the underlying
	 * class is a top-level class.
	 */
	/**
	 * 返回是否在封闭类中声明基础类（即基础类是内部/嵌套类还是方法内的局部类）。 
	 *  <p>如果此方法返回{@code  false}，则基础类为顶级类。 
	 * 
	 */
	default boolean hasEnclosingClass() {
		return (getEnclosingClassName() != null);
	}

	/**
	 * Return the name of the enclosing class of the underlying class,
	 * or {@code null} if the underlying class is a top-level class.
	 */
	/**
	 * 返回基础类的封闭类的名称； 
	 * 如果基础类是顶级类，则返回{@code  null}。 
	 * 
	 */
	@Nullable
	String getEnclosingClassName();

	/**
	 * Return whether the underlying class has a super class.
	 */
	/**
	 * 返回基础类是否具有父类。 
	 * 
	 */
	default boolean hasSuperClass() {
		return (getSuperClassName() != null);
	}

	/**
	 * Return the name of the super class of the underlying class,
	 * or {@code null} if there is no super class defined.
	 */
	/**
	 * 返回基础类的超类的名称，如果未定义超类，则返回{@code  null}。 
	 * 
	 */
	@Nullable
	String getSuperClassName();

	/**
	 * Return the names of all interfaces that the underlying class
	 * implements, or an empty array if there are none.
	 */
	/**
	 * 返回基础类实现的所有接口的名称，如果没有，则返回一个空数组。 
	 * 
	 */
	String[] getInterfaceNames();

	/**
	 * Return the names of all classes declared as members of the class represented by
	 * this ClassMetadata object. This includes public, protected, default (package)
	 * access, and private classes and interfaces declared by the class, but excludes
	 * inherited classes and interfaces. An empty array is returned if no member classes
	 * or interfaces exist.
	 * @since 3.1
	 */
	/**
	 * 返回声明为该ClassMetadata对象表示的类的成员的所有类的名称。 
	 * 这包括公共，受保护的，默认（程序包）访问以及由该类声明的私有类和接口，但不包括继承的类和接口。 
	 * 如果不存在成员类或接口，则返回一个空数组。 
	 *  @3.1起
	 */
	String[] getMemberClassNames();

}
