/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.type;

import java.lang.annotation.Annotation;
import java.util.Map;

import org.springframework.core.annotation.MergedAnnotation;
import org.springframework.core.annotation.MergedAnnotation.Adapt;
import org.springframework.core.annotation.MergedAnnotationCollectors;
import org.springframework.core.annotation.MergedAnnotationPredicates;
import org.springframework.core.annotation.MergedAnnotationSelectors;
import org.springframework.core.annotation.MergedAnnotations;
import org.springframework.lang.Nullable;
import org.springframework.util.MultiValueMap;

/**
 * Defines access to the annotations of a specific type ({@link AnnotationMetadata class}
 * or {@link MethodMetadata method}), in a form that does not necessarily require the
 * class-loading.
 *
 * @author Juergen Hoeller
 * @author Mark Fisher
 * @author Mark Pollack
 * @author Chris Beams
 * @author Phillip Webb
 * @author Sam Brannen
 * @since 4.0
 * @see AnnotationMetadata
 * @see MethodMetadata
 */
/**
 * 定义对特定类型（{@link  AnnotationMetadata类}或{@link  MethodMetadata方法}的注释的访问，访问的形式不一定需要加载类。 
 *  @author  Juergen Hoeller @author  Mark Fisher @author  Mark Pollack @author  Chris Beams @author  Phillip Webb @author  Sam Brannen @从4.0开始
 * @see  AnnotationMetadata 
 * @see  MethodMetadata
 */
public interface AnnotatedTypeMetadata {

	/**
	 * Return annotation details based on the direct annotations of the
	 * underlying element.
	 * @return merged annotations based on the direct annotations
	 * @since 5.2
	 */
	/**
	 * 根据基础元素的直接注释返回注释详细信息。 
	 *  
	 * @return 基于直接注释@@5.2的合并注释
	 */
	MergedAnnotations getAnnotations();

	/**
	 * Determine whether the underlying element has an annotation or meta-annotation
	 * of the given type defined.
	 * <p>If this method returns {@code true}, then
	 * {@link #getAnnotationAttributes} will return a non-null Map.
	 * @param annotationName the fully qualified class name of the annotation
	 * type to look for
	 * @return whether a matching annotation is defined
	 */
	/**
	 * 确定基础元素是否具有已定义的给定类型的注释或元注释。 
	 *  <p>如果此方法返回{@code  true}，则{@link  #getAnnotationAttributes}将返回非null的Map。 
	 *  
	 * @param 注释名称注释类型的完全限定的类名称，以查找
	 * @return 是否定义了匹配的注释
	 */
	default boolean isAnnotated(String annotationName) {
		return getAnnotations().isPresent(annotationName);
	}

	/**
	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if
	 * defined on the underlying element, as direct annotation or meta-annotation),
	 * also taking attribute overrides on composed annotations into account.
	 * @param annotationName the fully qualified class name of the annotation
	 * type to look for
	 * @return a Map of attributes, with the attribute name as key (e.g. "value")
	 * and the defined attribute value as Map value. This return value will be
	 * {@code null} if no matching annotation is defined.
	 */
	/**
	 * 检索给定类型的注释的属性（如果有的话）（即，如果在基础元素上定义为直接注释或元注释），也要考虑组合注释上的属性覆盖。 
	 *  
	 * @param 注解名称注解类型的完全限定的类名，用于查找
	 * @return 属性图，属性名称为键（例如"value"），定义的属性值为Map值。 
	 * 如果未定义匹配的注释，则此返回值为{@code  null}。 
	 * 
	 */
	@Nullable
	default Map<String, Object> getAnnotationAttributes(String annotationName) {
		return getAnnotationAttributes(annotationName, false);
	}

	/**
	 * Retrieve the attributes of the annotation of the given type, if any (i.e. if
	 * defined on the underlying element, as direct annotation or meta-annotation),
	 * also taking attribute overrides on composed annotations into account.
	 * @param annotationName the fully qualified class name of the annotation
	 * type to look for
	 * @param classValuesAsString whether to convert class references to String
	 * class names for exposure as values in the returned Map, instead of Class
	 * references which might potentially have to be loaded first
	 * @return a Map of attributes, with the attribute name as key (e.g. "value")
	 * and the defined attribute value as Map value. This return value will be
	 * {@code null} if no matching annotation is defined.
	 */
	/**
	 * 检索给定类型的注释的属性（如果有的话）（即，如果在基础元素上定义为直接注释或元注释），也要考虑组合注释上的属性覆盖。 
	 *  
	 * @param 注解名称注解类型的完全限定的类名，用于查找
	 * @param  classValuesAsString是否将类引用转换为String类名以作为返回的Map中的值公开，而不是可能必须是首先加载
	 * @return 属性映射，属性名称作为键（例如"值"），定义的属性值作为Map值。 
	 * 如果未定义匹配的注释，则此返回值为{@code  null}。 
	 * 
	 */
	@Nullable
	default Map<String, Object> getAnnotationAttributes(String annotationName,
			boolean classValuesAsString) {

		MergedAnnotation<Annotation> annotation = getAnnotations().get(annotationName,
				null, MergedAnnotationSelectors.firstDirectlyDeclared());
		if (!annotation.isPresent()) {
			return null;
		}
		return annotation.asAnnotationAttributes(Adapt.values(classValuesAsString, true));
	}

	/**
	 * Retrieve all attributes of all annotations of the given type, if any (i.e. if
	 * defined on the underlying element, as direct annotation or meta-annotation).
	 * Note that this variant does <i>not</i> take attribute overrides into account.
	 * @param annotationName the fully qualified class name of the annotation
	 * type to look for
	 * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")
	 * and a list of the defined attribute values as Map value. This return value will
	 * be {@code null} if no matching annotation is defined.
	 * @see #getAllAnnotationAttributes(String, boolean)
	 */
	/**
	 * 检索给定类型的所有注释的所有属性（如果有）（即，如果在基础元素上定义为直接注释或元注释）。 
	 * 请注意，此变体<i>不</ i>不考虑属性覆盖。 
	 *  
	 * @param 注解名称注解类型的完全限定的类名，用于查找
	 * @return 属性的MultiMap，属性名称为键（例如"value"），定义的属性值列表为Map值。 
	 * 如果未定义匹配的注释，则此返回值为{@code  null}。 
	 *  
	 * @see  #getAllAnnotationAttributes（String，boolean）
	 */
	@Nullable
	default MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationName) {
		return getAllAnnotationAttributes(annotationName, false);
	}

	/**
	 * Retrieve all attributes of all annotations of the given type, if any (i.e. if
	 * defined on the underlying element, as direct annotation or meta-annotation).
	 * Note that this variant does <i>not</i> take attribute overrides into account.
	 * @param annotationName the fully qualified class name of the annotation
	 * type to look for
	 * @param classValuesAsString  whether to convert class references to String
	 * @return a MultiMap of attributes, with the attribute name as key (e.g. "value")
	 * and a list of the defined attribute values as Map value. This return value will
	 * be {@code null} if no matching annotation is defined.
	 * @see #getAllAnnotationAttributes(String)
	 */
	/**
	 * 检索给定类型的所有注释的所有属性（如果有）（即，如果在基础元素上定义为直接注释或元注释）。 
	 * 请注意，此变体<i>不</ i>不考虑属性覆盖。 
	 *  
	 * @param 注解名称注解类型的完全限定的类名，用于查找
	 * @param  classValuesAsString是否将类引用转换为String 
	 * @return 属性的MultiMap，以属性名作为键（例如，"值"）以及定义的属性值列表作为Map值。 
	 * 如果未定义匹配的注释，则此返回值为{@code  null}。 
	 *  
	 * @see  #getAllAnnotationAttributes（String）
	 */
	@Nullable
	default MultiValueMap<String, Object> getAllAnnotationAttributes(
			String annotationName, boolean classValuesAsString) {

		Adapt[] adaptations = Adapt.values(classValuesAsString, true);
		return getAnnotations().stream(annotationName)
				.filter(MergedAnnotationPredicates.unique(MergedAnnotation::getMetaTypes))
				.map(MergedAnnotation::withNonMergedAttributes)
				.collect(MergedAnnotationCollectors.toMultiValueMap(map ->
						map.isEmpty() ? null : map, adaptations));
	}

}
