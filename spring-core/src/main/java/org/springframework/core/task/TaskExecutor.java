/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.task;

import java.util.concurrent.Executor;

/**
 * Simple task executor interface that abstracts the execution
 * of a {@link Runnable}.
 *
 * <p>Implementations can use all sorts of different execution strategies,
 * such as: synchronous, asynchronous, using a thread pool, and more.
 *
 * <p>Equivalent to JDK 1.5's {@link java.util.concurrent.Executor}
 * interface; extending it now in Spring 3.0, so that clients may declare
 * a dependency on an Executor and receive any TaskExecutor implementation.
 * This interface remains separate from the standard Executor interface
 * mainly for backwards compatibility with JDK 1.4 in Spring 2.x.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see java.util.concurrent.Executor
 */
/**
 * 简单的任务执行程序界面，抽象了{@link  Runnable}的执行。 
 *  <p>实现可以使用各种不同的执行策略，例如：同步，异步，使用线程池等。 
 *  <p>等效于JDK 1.5的{@link  java.util.concurrent.Executor}接口； 
 * 现在在Spring 3.0中对其进行了扩展，以便客户端可以声明对Executor的依赖并接收任何TaskExecutor实现。 
 * 该接口与标准Executor接口保持独立，主要是为了与Spring 2.x中的JDK 1.4向后兼容。 
 *  @author  Juergen Hoeller @始于2.0 
 * @see  java.util.concurrent.Executor
 */
@FunctionalInterface
public interface TaskExecutor extends Executor {

	/**
	 * Execute the given {@code task}.
	 * <p>The call might return immediately if the implementation uses
	 * an asynchronous execution strategy, or might block in the case
	 * of synchronous execution.
	 * @param task the {@code Runnable} to execute (never {@code null})
	 * @throws TaskRejectedException if the given task was not accepted
	 */
	/**
	 * 执行给定的{@code 任务}。 
	 *  <p>如果实现使用异步执行策略，则该调用可能立即返回，或者在同步执行的情况下，该调用可能会阻塞。 
	 *  
	 * @param 任务{{@@code> Runnable}来执行（从不执行{@code  null}）
	 * @throws  TaskRejectedException如果给定任务未被接受
	 */
	@Override
	void execute(Runnable task);

}
