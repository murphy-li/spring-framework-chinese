/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.task;

import java.util.concurrent.Callable;
import java.util.concurrent.Future;

/**
 * Extended interface for asynchronous {@link TaskExecutor} implementations,
 * offering an overloaded {@link #execute(Runnable, long)} variant with a start
 * timeout parameter as well support for {@link java.util.concurrent.Callable}.
 *
 * <p>Note: The {@link java.util.concurrent.Executors} class includes a set of
 * methods that can convert some other common closure-like objects, for example,
 * {@link java.security.PrivilegedAction} to {@link Callable} before executing them.
 *
 * <p>Implementing this interface also indicates that the {@link #execute(Runnable)}
 * method will not execute its Runnable in the caller's thread but rather
 * asynchronously in some other thread.
 *
 * @author Juergen Hoeller
 * @since 2.0.3
 * @see SimpleAsyncTaskExecutor
 * @see org.springframework.scheduling.SchedulingTaskExecutor
 * @see java.util.concurrent.Callable
 * @see java.util.concurrent.Executors
 */
/**
 * 异步{@link  TaskExecutor}实现的扩展接口，提供带有启动超时参数的重载{@link  #execute（Runnable，long）}变体以及对{@link  java.util.concurrent的支持。 
 * 可通话}。 
 *  <p>注意：{@link  java.util.concurrent.Executors}类包含一组可以转换一些其他常见的类似于闭包的对象的方法，例如{@link  java.security.PrivilegedAction}执行之前将其设置为{@link  Callable}。 
 *  <p>实现此接口还表明{@link  #execute（Runnable）}方法不会在调用者的线程中执行其Runnable，而是在其他某个线程中异步执行。 
 *  @author  Juergen Hoeller @since 2.0.3 
 * @see  SimpleAsyncTaskExecutor 
 * @see  org.springframework.scheduling.SchedulingTaskExecutor 
 * @see  java.util.concurrent.Callable 
 * @see  java.util.concurrent.Executors
 */
public interface AsyncTaskExecutor extends TaskExecutor {

	/** Constant that indicates immediate execution. */
	/**
	 * 指示立即执行的常量。 
	 * 
	 */
	long TIMEOUT_IMMEDIATE = 0;

	/** Constant that indicates no time limit. */
	/**
	 * 表示没有时间限制的常数。 
	 * 
	 */
	long TIMEOUT_INDEFINITE = Long.MAX_VALUE;


	/**
	 * Execute the given {@code task}.
	 * @param task the {@code Runnable} to execute (never {@code null})
	 * @param startTimeout the time duration (milliseconds) within which the task is
	 * supposed to start. This is intended as a hint to the executor, allowing for
	 * preferred handling of immediate tasks. Typical values are {@link #TIMEOUT_IMMEDIATE}
	 * or {@link #TIMEOUT_INDEFINITE} (the default as used by {@link #execute(Runnable)}).
	 * @throws TaskTimeoutException in case of the task being rejected because
	 * of the timeout (i.e. it cannot be started in time)
	 * @throws TaskRejectedException if the given task was not accepted
	 */
	/**
	 * 执行给定的{@code 任务}。 
	 *  {
	 * @param>任务{{@@code> Runnable}来执行（从不行{@code  null}）
	 * @param  startTimeout应该在其中开始任务的持续时间（毫秒）。 
	 * 这是给执行者的提示，允许优先处理即时任务。 
	 * 典型值为{@link  #TIMEOUT_IMMEDIATE}或{@link  #TIMEOUT_INDEFINITE}（{<@link> #execute（Runnable）}使用的默认值）。 
	 *  
	 * @throws  TaskTimeoutException如果由于超时而导致任务被拒绝（即无法及时启动）
	 * @throws  TaskRejectedException如果给定任务未被接受
	 */
	void execute(Runnable task, long startTimeout);

	/**
	 * Submit a Runnable task for execution, receiving a Future representing that task.
	 * The Future will return a {@code null} result upon completion.
	 * @param task the {@code Runnable} to execute (never {@code null})
	 * @return a Future representing pending completion of the task
	 * @throws TaskRejectedException if the given task was not accepted
	 * @since 3.0
	 */
	/**
	 * 提交要执行的Runnable任务，并接收代表该任务的Future。 
	 * 完成后，Future将返回{@code  null}结果。 
	 *  
	 * @param 任务{{@@code> Runnable}的执行（决不执行{@code  null}）
	 * @return 表示未完成任务的Future 
	 * @throws  TaskRejectedException，如果给定任务未被接受@从3.0开始
	 */
	Future<?> submit(Runnable task);

	/**
	 * Submit a Callable task for execution, receiving a Future representing that task.
	 * The Future will return the Callable's result upon completion.
	 * @param task the {@code Callable} to execute (never {@code null})
	 * @return a Future representing pending completion of the task
	 * @throws TaskRejectedException if the given task was not accepted
	 * @since 3.0
	 */
	/**
	 * 提交要执行的Callable任务，接收代表该任务的Future。 
	 * 期货将在完成后返回可赎回债券的结果。 
	 *  {
	 * @param>任务{{@@code>可调用}来执行（永远不为{@code  null}）
	 * @return 表示未完成任务的Future 
	 * @throws  TaskRejectedException如果给定任务未被接受@从3.0开始
	 */
	<T> Future<T> submit(Callable<T> task);

}
