/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.task;

/**
 * A callback interface for a decorator to be applied to any {@link Runnable}
 * about to be executed.
 *
 * <p>Note that such a decorator is not necessarily being applied to the
 * user-supplied {@code Runnable}/{@code Callable} but rather to the actual
 * execution callback (which may be a wrapper around the user-supplied task).
 *
 * <p>The primary use case is to set some execution context around the task's
 * invocation, or to provide some monitoring/statistics for task execution.
 *
 * @author Juergen Hoeller
 * @since 4.3
 * @see TaskExecutor#execute(Runnable)
 * @see SimpleAsyncTaskExecutor#setTaskDecorator
 */
/**
 * 装饰器的回调接口，该回调接口将应用于将要执行的任何{@link  Runnable}。 
 *  <p>请注意，此类修饰符不一定适用于用户提供的{@code  Runnable} / {<@@code> Callable}，而是适用于实际的执行回调（可能是围绕用户的包装，提供的任务）。 
 *  <p>主要用例是围绕任务的调用设置一些执行上下文，或者为任务执行提供一些监视/统计信息。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@从4.3开始
 * @see  TaskExecutor＃execute（Runnable）
 * @see  SimpleAsyncTaskExecutor＃setTaskDecorator
 */
@FunctionalInterface
public interface TaskDecorator {

	/**
	 * Decorate the given {@code Runnable}, returning a potentially wrapped
	 * {@code Runnable} for actual execution.
	 * @param runnable the original {@code Runnable}
	 * @return the decorated {@code Runnable}
	 */
	/**
	 * 装饰给定的{@code  Runnable}，返回可能包装的{@code  Runnable}以便实际执行。 
	 *  
	 * @param 可运行的是原始的{@code  Runnable} 
	 * @return 装饰的{@code  Runnable}
	 */
	Runnable decorate(Runnable runnable);

}
