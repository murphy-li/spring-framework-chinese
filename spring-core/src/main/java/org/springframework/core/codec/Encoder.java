/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.codec;

import java.util.List;
import java.util.Map;

import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.springframework.core.ResolvableType;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferFactory;
import org.springframework.lang.Nullable;
import org.springframework.util.MimeType;

/**
 * Strategy to encode a stream of Objects of type {@code <T>} into an output
 * stream of bytes.
 *
 * @author Sebastien Deleuze
 * @author Rossen Stoyanchev
 * @since 5.0
 * @param <T> the type of elements in the input stream
 */
/**
 * 将{@code  <T>}类型的Objects流编码为字节输出流的策略。 
 *  @author  Sebastien Deleuze @author  Rossen Stoyanchev @从5.0起
 * @param  <T>输入流中元素的类型
 */
public interface Encoder<T> {

	/**
	 * Whether the encoder supports the given source element type and the MIME
	 * type for the output stream.
	 * @param elementType the type of elements in the source stream
	 * @param mimeType the MIME type for the output stream
	 * (can be {@code null} if not specified)
	 * @return {@code true} if supported, {@code false} otherwise
	 */
	/**
	 * 编码器是否支持给定的源元素类型和输出流的MIME类型。 
	 *  
	 * @param  elementType源流中元素的类型
	 * @param  mimeType输出流的MIME类型（如果未指定，可以为{@code  null}）
	 * @return  {@code  true}如果支持，则为{@code  false}
	 */
	boolean canEncode(ResolvableType elementType, @Nullable MimeType mimeType);

	/**
	 * Encode a stream of Objects of type {@code T} into a {@link DataBuffer}
	 * output stream.
	 * @param inputStream the input stream of Objects to encode. If the input should be
	 * encoded as a single value rather than as a stream of elements, an instance of
	 * {@link Mono} should be used.
	 * @param bufferFactory for creating output stream {@code DataBuffer}'s
	 * @param elementType the expected type of elements in the input stream;
	 * this type must have been previously passed to the {@link #canEncode}
	 * method and it must have returned {@code true}.
	 * @param mimeType the MIME type for the output content (optional)
	 * @param hints additional information about how to encode
	 * @return the output stream
	 */
	/**
	 * 将{@code  T}类型的对象流编码为{@link  DataBuffer}输出流。 
	 *  
	 * @param  inputStream要编码的Object的输入流。 
	 * 如果输入应被编码为单个值而不是元素流，则应使用{@link  Mono}的实例。 
	 *  
	 * @param  bufferFactory用于创建输出流{@code  DataBuffer}的
	 * @param  elementType输入流中期望的元素类型； 
	 * 此类型必须事先已传递给{@link  #canEncode}方法，并且必须已返回{@code  true}。 
	 *  
	 * @param  mimeType输出内容的MIME类型（可选）
	 * @param 提示有关如何对输出流进行编码的其他信息
	 * @return 
	 */
	Flux<DataBuffer> encode(Publisher<? extends T> inputStream, DataBufferFactory bufferFactory,
			ResolvableType elementType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints);

	/**
	 * Encode an Object of type T to a data buffer. This is useful for scenarios,
	 * that distinct messages (or events) are encoded and handled individually,
	 * in fully aggregated form.
	 * <p>By default this method raises {@link UnsupportedOperationException}
	 * and it is expected that some encoders cannot produce a single buffer or
	 * cannot do so synchronously (e.g. encoding a {@code Resource}).
	 * @param value the value to be encoded
	 * @param bufferFactory for creating the output {@code DataBuffer}
	 * @param valueType the type for the value being encoded
	 * @param mimeType the MIME type for the output content (optional)
	 * @param hints additional information about how to encode
	 * @return the encoded content
	 * @since 5.2
	 */
	/**
	 * 将类型为T的对象编码到数据缓冲区。 
	 * 这对于以下情况很有用：以完全聚合的形式分别编码和处理不同的消息（或事件）。 
	 *  <p>默认情况下，此方法引发{@link  UnsupportedOperationException}，并且预期某些编码器无法生成单个缓冲区或无法同步生成（例如，对{@code  Resource}进行编码）。 
	 *  
	 * @param 值要编码的值
	 * @param  bufferFactory用于创建输出{@code  DataBuffer} 
	 * @param  valueType所编码值的类型
	 * @param  mimeType输出内容的MIME类型（可选）
	 * @param 提示有关如何对5.2以后的内容进行编码的其他信息。 
	 * 
	 */
	default DataBuffer encodeValue(T value, DataBufferFactory bufferFactory,
			ResolvableType valueType, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {

		// It may not be possible to produce a single DataBuffer synchronously
		throw new UnsupportedOperationException();
	}

	/**
	 * Return the list of mime types this encoder supports.
	 */
	/**
	 * 返回此编码器支持的mime类型列表。 
	 * 
	 */
	List<MimeType> getEncodableMimeTypes();

}
