/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.env;

import java.util.function.Predicate;

/**
 * Profile predicate that may be {@linkplain Environment#acceptsProfiles(Profiles)
 * accepted} by an {@link Environment}.
 *
 * <p>May be implemented directly or, more usually, created using the
 * {@link #of(String...) of(...)} factory method.
 *
 * @author Phillip Webb
 * @since 5.1
 */
/**
 * {@link  Environment}可能{{@@link> plain Environment＃acceptsProfiles（Profiles）接受}}的概要谓词。 
 *  <p>可以直接实现，或更通常地，可以使用（...）的{@link  #of（String ...）}工厂方法创建。 
 *  @author 菲利普·韦伯@5.1
 */
@FunctionalInterface
public interface Profiles {

	/**
	 * Test if this {@code Profiles} instance <em>matches</em> against the given
	 * active profiles predicate.
	 * @param activeProfiles predicate that tests whether a given profile is
	 * currently active
	 */
	/**
	 * 测试此{@code 配置文件}实例<em>与</ em>是否匹配给定的活动配置文件谓词。 
	 *  
	 * @param  activeProfiles谓词用于测试给定的配置文件当前是否处于活动状态
	 */
	boolean matches(Predicate<String> activeProfiles);


	/**
	 * Create a new {@link Profiles} instance that checks for matches against
	 * the given <em>profile strings</em>.
	 * <p>The returned instance will {@linkplain Profiles#matches(Predicate) match}
	 * if any one of the given profile strings matches.
	 * <p>A profile string may contain a simple profile name (for example
	 * {@code "production"}) or a profile expression. A profile expression allows
	 * for more complicated profile logic to be expressed, for example
	 * {@code "production & cloud"}.
	 * <p>The following operators are supported in profile expressions:
	 * <ul>
	 * <li>{@code !} - A logical <em>not</em> of the profile</li>
	 * <li>{@code &} - A logical <em>and</em> of the profiles</li>
	 * <li>{@code |} - A logical <em>or</em> of the profiles</li>
	 * </ul>
	 * <p>Please note that the {@code &} and {@code |} operators may not be mixed
	 * without using parentheses. For example {@code "a & b | c"} is not a valid
	 * expression; it must be expressed as {@code "(a & b) | c"} or
	 * {@code "a & (b | c)"}.
	 * @param profiles the <em>profile strings</em> to include
	 * @return a new {@link Profiles} instance
	 */
	/**
	 * 创建一个新的{@link  Profiles}实例，以检查与给定的<em> profile字符串</ em>是否匹配。 
	 *  <p>如果任何给定的配置文件字符串匹配，则返回的实例将{@link  plain Profiles＃matches（Predicate）match}。 
	 *  <p>配置文件字符串可以包含简单的配置文件名称（例如{@code "production"}）或配置文件表达式。 
	 * 配置文件表达式允许表达更复杂的配置文件逻辑，例如{@code "production＆cloud"}。 
	 *  <p>配置文件表达式中支持以下运算符：<ul> <li> {<@code>！ 
	 * }-概要文件的逻辑<em> not </ em> </ li> <li> {<@code >＆}-配置文件的逻辑<em>和</ em> </ li> <li> {<@code> |}-配置文件的逻辑<em>或</ em> </ li> < / ul> <p>请注意，如果不使用括号，则不能混用{@code ＆}和{@code  |}运算符。 
	 * 例如{@code "a＆b | c"}不是有效的表达式； 
	 * 它必须表示为{@code "（a＆b）| c"}或{@code "a＆（b | c）"}}。 
	 *  
	 * @param 对<em>配置文件字符串</ em>进行配置，以包含
	 * @return 一个新的{@link  Profiles}实例
	 */
	static Profiles of(String... profiles) {
		return ProfilesParser.parse(profiles);
	}

}
