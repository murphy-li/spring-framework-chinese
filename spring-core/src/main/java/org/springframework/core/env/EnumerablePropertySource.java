/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.env;

import org.springframework.util.ObjectUtils;

/**
 * A {@link PropertySource} implementation capable of interrogating its
 * underlying source object to enumerate all possible property name/value
 * pairs. Exposes the {@link #getPropertyNames()} method to allow callers
 * to introspect available properties without having to access the underlying
 * source object. This also facilitates a more efficient implementation of
 * {@link #containsProperty(String)}, in that it can call {@link #getPropertyNames()}
 * and iterate through the returned array rather than attempting a call to
 * {@link #getProperty(String)} which may be more expensive. Implementations may
 * consider caching the result of {@link #getPropertyNames()} to fully exploit this
 * performance opportunity.
 *
 * <p>Most framework-provided {@code PropertySource} implementations are enumerable;
 * a counter-example would be {@code JndiPropertySource} where, due to the
 * nature of JNDI it is not possible to determine all possible property names at
 * any given time; rather it is only possible to try to access a property
 * (via {@link #getProperty(String)}) in order to evaluate whether it is present
 * or not.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @param <T> the source type
 */
/**
 * 一个{@link  PropertySource}实现，可以查询其基础源对象以枚举所有可能的属性名称/值对。 
 * 公开{@link  #getPropertyNames（）}方法，以允许调用者自省可用属性，而不必访问基础源对象。 
 * 这还有助于更有效地实现{@link  #containsProperty（String）}，因为它可以调用{@link  #getPropertyNames（）}并遍历返回的数组，而不是尝试调用{<@link> #getProperty（String）}可能会更昂贵。 
 * 实现可以考虑缓存{@link  #getPropertyNames（）}的结果，以充分利用此性能机会。 
 *  <p>大多数框架提供的{@code  PropertySource}实现都是可枚举的； 
 * 一个反例是{@code  JndiPropertySource}，由于JNDI的性质，不可能在任何给定时间确定所有可能的属性名称； 
 * 而是只能尝试访问属性（通过{@link  #getProperty（String）}）以评估该属性是否存在。 
 *  @author 克里斯·比姆斯（Chris Beams）@author 于尔根·霍勒（Juergen Hoeller）@从3.1开始
 * @param  <T>源类型
 */
public abstract class EnumerablePropertySource<T> extends PropertySource<T> {

	public EnumerablePropertySource(String name, T source) {
		super(name, source);
	}

	protected EnumerablePropertySource(String name) {
		super(name);
	}


	/**
	 * Return whether this {@code PropertySource} contains a property with the given name.
	 * <p>This implementation checks for the presence of the given name within the
	 * {@link #getPropertyNames()} array.
	 * @param name the name of the property to find
	 */
	/**
	 * 返回此{@code  PropertySource}是否包含具有给定名称的属性。 
	 *  <p>此实现检查{@link  #getPropertyNames（）}数组中是否存在给定名称。 
	 *  
	 * @param 命名要查找的属性的名称
	 */
	@Override
	public boolean containsProperty(String name) {
		return ObjectUtils.containsElement(getPropertyNames(), name);
	}

	/**
	 * Return the names of all properties contained by the
	 * {@linkplain #getSource() source} object (never {@code null}).
	 */
	/**
	 * 返回{@link  plain #getSource（）source}对象包含的所有属性的名称（绝不要{@code  null}）。 
	 * 
	 */
	public abstract String[] getPropertyNames();

}
