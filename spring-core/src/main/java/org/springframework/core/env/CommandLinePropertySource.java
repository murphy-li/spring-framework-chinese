/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.env;

import java.util.Collection;
import java.util.List;

import org.springframework.lang.Nullable;
import org.springframework.util.StringUtils;

/**
 * Abstract base class for {@link PropertySource} implementations backed by command line
 * arguments. The parameterized type {@code T} represents the underlying source of command
 * line options. This may be as simple as a String array in the case of
 * {@link SimpleCommandLinePropertySource}, or specific to a particular API such as JOpt's
 * {@code OptionSet} in the case of {@link JOptCommandLinePropertySource}.
 *
 * <h3>Purpose and General Usage</h3>
 *
 * For use in standalone Spring-based applications, i.e. those that are bootstrapped via
 * a traditional {@code main} method accepting a {@code String[]} of arguments from the
 * command line. In many cases, processing command-line arguments directly within the
 * {@code main} method may be sufficient, but in other cases, it may be desirable to
 * inject arguments as values into Spring beans. It is this latter set of cases in which
 * a {@code CommandLinePropertySource} becomes useful. A {@code CommandLinePropertySource}
 * will typically be added to the {@link Environment} of the Spring
 * {@code ApplicationContext}, at which point all command line arguments become available
 * through the {@link Environment#getProperty(String)} family of methods. For example:
 *
 * <pre class="code">
 * public static void main(String[] args) {
 *     CommandLinePropertySource clps = ...;
 *     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
 *     ctx.getEnvironment().getPropertySources().addFirst(clps);
 *     ctx.register(AppConfig.class);
 *     ctx.refresh();
 * }</pre>
 *
 * With the bootstrap logic above, the {@code AppConfig} class may {@code @Inject} the
 * Spring {@code Environment} and query it directly for properties:
 *
 * <pre class="code">
 * &#064;Configuration
 * public class AppConfig {
 *
 *     &#064;Inject Environment env;
 *
 *     &#064;Bean
 *     public void DataSource dataSource() {
 *         MyVendorDataSource dataSource = new MyVendorDataSource();
 *         dataSource.setHostname(env.getProperty("db.hostname", "localhost"));
 *         dataSource.setUsername(env.getRequiredProperty("db.username"));
 *         dataSource.setPassword(env.getRequiredProperty("db.password"));
 *         // ...
 *         return dataSource;
 *     }
 * }</pre>
 *
 * Because the {@code CommandLinePropertySource} was added to the {@code Environment}'s
 * set of {@link MutablePropertySources} using the {@code #addFirst} method, it has
 * highest search precedence, meaning that while "db.hostname" and other properties may
 * exist in other property sources such as the system environment variables, it will be
 * chosen from the command line property source first. This is a reasonable approach
 * given that arguments specified on the command line are naturally more specific than
 * those specified as environment variables.
 *
 * <p>As an alternative to injecting the {@code Environment}, Spring's {@code @Value}
 * annotation may be used to inject these properties, given that a {@link
 * PropertySourcesPropertyResolver} bean has been registered, either directly or through
 * using the {@code <context:property-placeholder>} element. For example:
 *
 * <pre class="code">
 * &#064;Component
 * public class MyComponent {
 *
 *     &#064;Value("my.property:defaultVal")
 *     private String myProperty;
 *
 *     public void getMyProperty() {
 *         return this.myProperty;
 *     }
 *
 *     // ...
 * }</pre>
 *
 * <h3>Working with option arguments</h3>
 *
 * <p>Individual command line arguments are represented as properties through the usual
 * {@link PropertySource#getProperty(String)} and
 * {@link PropertySource#containsProperty(String)} methods. For example, given the
 * following command line:
 *
 * <pre class="code">--o1=v1 --o2</pre>
 *
 * 'o1' and 'o2' are treated as "option arguments", and the following assertions would
 * evaluate true:
 *
 * <pre class="code">
 * CommandLinePropertySource<?> ps = ...
 * assert ps.containsProperty("o1") == true;
 * assert ps.containsProperty("o2") == true;
 * assert ps.containsProperty("o3") == false;
 * assert ps.getProperty("o1").equals("v1");
 * assert ps.getProperty("o2").equals("");
 * assert ps.getProperty("o3") == null;
 * </pre>
 *
 * Note that the 'o2' option has no argument, but {@code getProperty("o2")} resolves to
 * empty string ({@code ""}) as opposed to {@code null}, while {@code getProperty("o3")}
 * resolves to {@code null} because it was not specified. This behavior is consistent with
 * the general contract to be followed by all {@code PropertySource} implementations.
 *
 * <p>Note also that while "--" was used in the examples above to denote an option
 * argument, this syntax may vary across individual command line argument libraries. For
 * example, a JOpt- or Commons CLI-based implementation may allow for single dash ("-")
 * "short" option arguments, etc.
 *
 * <h3>Working with non-option arguments</h3>
 *
 * <p>Non-option arguments are also supported through this abstraction. Any arguments
 * supplied without an option-style prefix such as "-" or "--" are considered "non-option
 * arguments" and available through the special {@linkplain
 * #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME "nonOptionArgs"} property.  If multiple
 * non-option arguments are specified, the value of this property will be a
 * comma-delimited string containing all of the arguments. This approach ensures a simple
 * and consistent return type (String) for all properties from a {@code
 * CommandLinePropertySource} and at the same time lends itself to conversion when used
 * in conjunction with the Spring {@link Environment} and its built-in {@code
 * ConversionService}. Consider the following example:
 *
 * <pre class="code">--o1=v1 --o2=v2 /path/to/file1 /path/to/file2</pre>
 *
 * In this example, "o1" and "o2" would be considered "option arguments", while the two
 * filesystem paths qualify as "non-option arguments".  As such, the following assertions
 * will evaluate true:
 *
 * <pre class="code">
 * CommandLinePropertySource<?> ps = ...
 * assert ps.containsProperty("o1") == true;
 * assert ps.containsProperty("o2") == true;
 * assert ps.containsProperty("nonOptionArgs") == true;
 * assert ps.getProperty("o1").equals("v1");
 * assert ps.getProperty("o2").equals("v2");
 * assert ps.getProperty("nonOptionArgs").equals("/path/to/file1,/path/to/file2");
 * </pre>
 *
 * <p>As mentioned above, when used in conjunction with the Spring {@code Environment}
 * abstraction, this comma-delimited string may easily be converted to a String array or
 * list:
 *
 * <pre class="code">
 * Environment env = applicationContext.getEnvironment();
 * String[] nonOptionArgs = env.getProperty("nonOptionArgs", String[].class);
 * assert nonOptionArgs[0].equals("/path/to/file1");
 * assert nonOptionArgs[1].equals("/path/to/file2");
 * </pre>
 *
 * <p>The name of the special "non-option arguments" property may be customized through
 * the {@link #setNonOptionArgsPropertyName(String)} method. Doing so is recommended as
 * it gives proper semantic value to non-option arguments. For example, if filesystem
 * paths are being specified as non-option arguments, it is likely preferable to refer to
 * these as something like "file.locations" than the default of "nonOptionArgs":
 *
 * <pre class="code">
 * public static void main(String[] args) {
 *     CommandLinePropertySource clps = ...;
 *     clps.setNonOptionArgsPropertyName("file.locations");
 *
 *     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
 *     ctx.getEnvironment().getPropertySources().addFirst(clps);
 *     ctx.register(AppConfig.class);
 *     ctx.refresh();
 * }</pre>
 *
 * <h3>Limitations</h3>
 *
 * This abstraction is not intended to expose the full power of underlying command line
 * parsing APIs such as JOpt or Commons CLI. It's intent is rather just the opposite: to
 * provide the simplest possible abstraction for accessing command line arguments
 * <em>after</em> they have been parsed. So the typical case will involve fully configuring
 * the underlying command line parsing API, parsing the {@code String[]} of arguments
 * coming into the main method, and then simply providing the parsing results to an
 * implementation of {@code CommandLinePropertySource}. At that point, all arguments can
 * be considered either 'option' or 'non-option' arguments and as described above can be
 * accessed through the normal {@code PropertySource} and {@code Environment} APIs.
 *
 * @author Chris Beams
 * @since 3.1
 * @param <T> the source type
 * @see PropertySource
 * @see SimpleCommandLinePropertySource
 * @see JOptCommandLinePropertySource
 */
/**
 * 由命令行参数支持的{<< @link >> PropertySource}实现的抽象基类。 
 * 参数化类型{<< @code >> T}表示命令行选项的基础源。 
 * 对于{<< @link >> SimpleCommandLinePropertySource}，它可以像String数组一样简单； 
 * 对于{<< @link}，它可以特定于特定的API，例如JOpt的{<< @code >> OptionSet}。 
 *  >> JOptCommandLinePropertySource}。 
 *  <h3>用途和常规用法</ h3>用于基于独立Spring的应用程序，即通过接受{<< @code >> main []的传统{<< @code >> main}方法引导的应用程序命令行中的参数。 
 * 在许多情况下，直接在{<< @code >> main}方法中处理命令行参数就足够了，但是在其他情况下，可能希望将参数作为值注入到Spring bean中。 
 * 在后一种情况下，{<< @code >> CommandLinePropertySource}变得有用。 
 *  {{<< @code >> CommandLinePropertySource}通常会添加到Spring {<< @@code >> ApplicationContext}的{<< @link >> Environment}中，此时所有的命令行参数都可以通过{ << @link >> Environment＃getProperty（String）}系列方法。 
 * 例如：<pre class ="code"> public static void main（String [] args）{CommandLinePropertySource clps = ...; AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext（）; ctx.getEnvironment（）。 
 * getPropertySources（）。 
 * addFirst（clps）; ctx.register（AppConfig.class）; ctx.refresh（）; } </ pre>使用上面的引导程序逻辑，{<< @code >> AppConfig}类可以{{<< @code >> @Inject} Spring {<< @code >> Environment}并直接向其查询属性：<pre class ="code"> @Configuration公共类AppConfig {@Inject Environment env; @Bean public void DataSource dataSource（）{MyVendorDataSource dataSource = new MyVendorDataSource（）; dataSource.setHostname（env.getProperty（"db.hostname"，"localhost"））; dataSource.setUsername（env.getRequiredProperty（"db.username"））; dataSource.setPassword（env.getRequiredProperty（"db.password"））; // ... return dataSource; }} </ pre>因为使用{<< @@code将{<< @code >> CommandLinePropertySource}添加到{<< @link >> MutablePropertySources}的{<< @code >> Environment}的集合中>> #addFirst}方法，它具有最高的搜索优先级，这意味着"db.hostname"和其他属性可能存在于其他属性源（例如系统环境变量）中，但将从命令行属性源中首先选择它。 
 * 考虑到命令行上指定的参数自然比指定为环境变量的参数更具体，因此这是一种合理的方法。 
 *  <p>作为注入{<< @code >> Environment}的替代方法，考虑到{<< @link >> PropertySourcesPropertyResolver，可以使用Spring的{<< @code >> @Value}注释注入这些属性。 
 *  } bean已直接或通过使用{<< @code >> <context：property-placeholder>}元素进行了注册。 
 * 例如：<pre class ="code"> @Component公共类MyComponent {@Value（"my.property:defaultVal"）private String myProperty; public void getMyProperty（）{返回this.myProperty; } // ...} </ pre> <h3>使用选项参数</ h3> <p>单独的命令行参数通过常规的{<< @link >> PropertySource＃getProperty（String）}表示为属性。 
 * 和{<< @link >> PropertySource＃containsProperty（String）}方法。 
 * 例如，给定以下命令行：<pre class ="code">-o1 = v1 --o2 </ pre>'o1'和'o2'被视为"选项参数"，并且以下断言将求值true：<pre class ="code"> CommandLinePropertySource <？> ps = ... assert ps.containsProperty（"o1"）== true;断言ps.containsProperty（"o2"）== true;断言ps.containsProperty（"o3"）== false;断言ps.getProperty（"o1"）。 
 * equals（"v1"）;断言ps.getProperty（"o2"）。 
 * equals（""）;断言ps.getProperty（"o3"）== null; </ pre>请注意，'o2'选项没有参数，但是{<< @code >> getProperty（"o2"）}解析为空字符串（{<< @code >>""}），而不是{ << @code >> null}，而{<< @code >> getProperty（"o3"）}解析为{<< @code >> null}，因为未指定。 
 * 此行为与所有{<< @code >> PropertySource}实现所遵循的一般约定一致。 
 *  <p>还请注意，尽管在以上示例中使用"-"表示选项参数，但此语法在各个命令行参数库中可能有所不同。 
 * 例如，基于JOpt或Commons CLI的实现可能允许使用单破折号（"-"）"short"选项参数，等等。 
 * <h3>使用非选项参数</ h3> <p>非选项参数通过此抽象也受支持。 
 * 提供的没有选项样式前缀的任何参数（例如"-"或"-"）均被视为"非选项参数"，可通过特殊的{<< @link >> plain #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME"nonOptionArgs"}属性获得
 */
/**
 * 如果指定了多个非选项参数，则此属性的值将是一个包含所有参数的逗号分隔的字符串。 
 * 这种方法确保了{<< @code >> CommandLinePropertySource}中所有属性的简单且一致的返回类型（String），并且与Spring {<< @link >>环境一起使用时，它很容易进行转换。 
 *  }及其内置的{<< @code >> ConversionService}。 
 * 请考虑以下示例：<pre class ="code">-o1 = v1 --o2 = v2 / path / to / file1 / path / to / file2 </ pre>在此示例中，"o1"和"o2"将被视为"选项参数"，而两个文件系统路径则被视为"非选项参数"。 
 * 这样，以下声明将评估为true：<pre class ="code"> CommandLinePropertySource <？> ps = ... assert ps.containsProperty（"o1"）== true;断言ps.containsProperty（"o2"）== true;断言ps.containsProperty（"nonOptionArgs"）== true;断言ps.getProperty（"o1"）。 
 * equals（"v1"）;断言ps.getProperty（"o2"）。 
 * equals（"v2"）;断言ps.getProperty（"nonOptionArgs"）。 
 * equals（"/ path / to / file1，/ path / to / file2"）; </ pre> <p>如上所述，当与Spring {<< @code >> Environment}抽象一起使用时，此逗号分隔的字符串可以轻松转换为String数组或列表：<pre class ="代码">环境env = applicationContext.getEnvironment（）; String [] nonOptionArgs = env.getProperty（"nonOptionArgs"，String []。 
 * class）;断言nonOptionArgs [0] .equals（"/ path / to / file1"）;断言nonOptionArgs [1] .equals（"/ path / to / file2"）; </ pre> <p>特殊的"非选项参数"属性的名称可以通过{<< @link >> #setNonOptionArgsPropertyName（String）}方法进行自定义。 
 * 建议这样做，因为它可以为非选项参数提供适当的语义值。 
 * 例如，如果将文件系统路径指定为非选项参数，则可能更喜欢将其称为"file.locations"，而不是默认的"nonOptionArgs"：<pre class ="code"> public static void main（String [] args）{CommandLinePropertySource clps = ...; clps.setNonOptionArgsPropertyName（"file.locations"）; AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext（）; ctx.getEnvironment（）。 
 * getPropertySources（）。 
 * addFirst（clps）; ctx.register（AppConfig.class）; ctx.refresh（）; } </ pre> <h3>限制</ h3>此抽象的目的不是要充分利用底层命令行解析API（例如JOpt或Commons CLI）的全部功能。 
 * 它的意图恰好相反：在解析了命令行参数<em> </ em>之后，提供最简单的抽象方法来访问命令行参数。 
 * 因此，典型情况将涉及完全配置基础命令行解析API，解析进入main方法的参数的{<< @code >> String []}，然后简单地将解析结果提供给{<< @code >> CommandLinePropertySource}。 
 * 在这一点上，所有参数都可以被视为"选项"或"非选项"参数，并且如上所述，可以通过常规{<< @code >> PropertySource}和{<< @code >> Environment} API访问。 
 *  << @author >> Chris Beams @since 3.1起@
 * @param >> <T>源类型<< 
 * @see >> PropertySource << 
 * @see >> SimpleCommandLinePropertySource << 
 * @see >> JOptCommandLinePropertySource
 */
public abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T> {

	/** The default name given to {@link CommandLinePropertySource} instances: {@value}. */
	/**
	 * 为{@link  CommandLinePropertySource}实例指定的默认名称为{@value}。 
	 * 
	 */
	public static final String COMMAND_LINE_PROPERTY_SOURCE_NAME = "commandLineArgs";

	/** The default name of the property representing non-option arguments: {@value}. */
	/**
	 * 表示非选项参数的属性的默认名称：{@value}。 
	 * 
	 */
	public static final String DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME = "nonOptionArgs";


	private String nonOptionArgsPropertyName = DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME;


	/**
	 * Create a new {@code CommandLinePropertySource} having the default name
	 * {@value #COMMAND_LINE_PROPERTY_SOURCE_NAME} and backed by the given source object.
	 */
	/**
	 * 创建一个新的{@code  CommandLinePropertySource}，其默认名称为{@value #COMMAND_LINE_PROPERTY_SOURCE_NAME}，并由给定的源对象支持。 
	 * 
	 */
	public CommandLinePropertySource(T source) {
		super(COMMAND_LINE_PROPERTY_SOURCE_NAME, source);
	}

	/**
	 * Create a new {@link CommandLinePropertySource} having the given name
	 * and backed by the given source object.
	 */
	/**
	 * 创建一个具有给定名称并由给定源对象支持的新{@link  CommandLinePropertySource}。 
	 * 
	 */
	public CommandLinePropertySource(String name, T source) {
		super(name, source);
	}


	/**
	 * Specify the name of the special "non-option arguments" property.
	 * The default is {@value #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME}.
	 */
	/**
	 * 指定特殊的"非选项参数"属性的名称。 
	 * 默认值为{@value #DEFAULT_NON_OPTION_ARGS_PROPERTY_NAME}。 
	 * 
	 */
	public void setNonOptionArgsPropertyName(String nonOptionArgsPropertyName) {
		this.nonOptionArgsPropertyName = nonOptionArgsPropertyName;
	}

	/**
	 * This implementation first checks to see if the name specified is the special
	 * {@linkplain #setNonOptionArgsPropertyName(String) "non-option arguments" property},
	 * and if so delegates to the abstract {@link #getNonOptionArgs()} method
	 * checking to see whether it returns an empty collection. Otherwise delegates to and
	 * returns the value of the abstract {@link #containsOption(String)} method.
	 */
	/**
	 * 此实现首先检查指定的名称是否为特殊的{@link  plain #setNonOptionArgsPropertyName（String）"non-option arguments"属性}，如果是，则委派给抽象的{@link  #getNonOptionArgs（）}方法检查是否返回空集合。 
	 * 否则，委托并返回抽象{@link  #containsOption（String）}方法的值。 
	 * 
	 */
	@Override
	public final boolean containsProperty(String name) {
		if (this.nonOptionArgsPropertyName.equals(name)) {
			return !this.getNonOptionArgs().isEmpty();
		}
		return this.containsOption(name);
	}

	/**
	 * This implementation first checks to see if the name specified is the special
	 * {@linkplain #setNonOptionArgsPropertyName(String) "non-option arguments" property},
	 * and if so delegates to the abstract {@link #getNonOptionArgs()} method. If so
	 * and the collection of non-option arguments is empty, this method returns {@code
	 * null}. If not empty, it returns a comma-separated String of all non-option
	 * arguments. Otherwise delegates to and returns the result of the abstract {@link
	 * #getOptionValues(String)} method.
	 */
	/**
	 * 此实现首先检查指定的名称是否为特殊的{@link  plain #setNonOptionArgsPropertyName（String）"non-option arguments"属性}，如果是，则委派给抽象的{@link  #getNonOptionArgs（）}方法。 
	 * 如果是这样，并且非选项参数的集合为空，则此方法返回{@code  null}。 
	 * 如果不为空，则返回所有非选项参数的逗号分隔的字符串。 
	 * 否则，委派并返回抽象{@link  #getOptionValues（String）}方法的结果。 
	 * 
	 */
	@Override
	@Nullable
	public final String getProperty(String name) {
		if (this.nonOptionArgsPropertyName.equals(name)) {
			Collection<String> nonOptionArguments = this.getNonOptionArgs();
			if (nonOptionArguments.isEmpty()) {
				return null;
			}
			else {
				return StringUtils.collectionToCommaDelimitedString(nonOptionArguments);
			}
		}
		Collection<String> optionValues = this.getOptionValues(name);
		if (optionValues == null) {
			return null;
		}
		else {
			return StringUtils.collectionToCommaDelimitedString(optionValues);
		}
	}


	/**
	 * Return whether the set of option arguments parsed from the command line contains
	 * an option with the given name.
	 */
	/**
	 * 返回从命令行解析的选项参数集是否包含具有给定名称的选项。 
	 * 
	 */
	protected abstract boolean containsOption(String name);

	/**
	 * Return the collection of values associated with the command line option having the
	 * given name.
	 * <ul>
	 * <li>if the option is present and has no argument (e.g.: "--foo"), return an empty
	 * collection ({@code []})</li>
	 * <li>if the option is present and has a single value (e.g. "--foo=bar"), return a
	 * collection having one element ({@code ["bar"]})</li>
	 * <li>if the option is present and the underlying command line parsing library
	 * supports multiple arguments (e.g. "--foo=bar --foo=baz"), return a collection
	 * having elements for each value ({@code ["bar", "baz"]})</li>
	 * <li>if the option is not present, return {@code null}</li>
	 * </ul>
	 */
	/**
	 * 返回与具有给定名称的命令行选项关联的值的集合。 
	 *  <ul> <li>如果该选项存在并且没有参数（例如："-foo"），则返回一个空集合（{@code  []}）</ li> <li>如果该选项为如果存在且具有单个值（例如"--foo = bar"），则返回具有一个元素（{@code  ["bar"]}）的集合</ li> <li>如果存在该选项并且基础命令行解析库支持多个参数（例如"--foo = bar --foo = baz"），返回一个包含每个值元素的集合（{@code  ["bar"，"baz"]}））< / li> <li>如果不存在该选项，则返回{@code  null} </ li> </ ul>
	 */
	@Nullable
	protected abstract List<String> getOptionValues(String name);

	/**
	 * Return the collection of non-option arguments parsed from the command line.
	 * Never {@code null}.
	 */
	/**
	 * 返回从命令行解析的非选项参数的集合。 
	 * 永不{@code  null}。 
	 * 
	 */
	protected abstract List<String> getNonOptionArgs();

}
