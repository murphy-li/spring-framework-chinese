/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.env;

import java.util.Map;

/**
 * Configuration interface to be implemented by most if not all {@link Environment} types.
 * Provides facilities for setting active and default profiles and manipulating underlying
 * property sources. Allows clients to set and validate required properties, customize the
 * conversion service and more through the {@link ConfigurablePropertyResolver}
 * superinterface.
 *
 * <h2>Manipulating property sources</h2>
 * <p>Property sources may be removed, reordered, or replaced; and additional
 * property sources may be added using the {@link MutablePropertySources}
 * instance returned from {@link #getPropertySources()}. The following examples
 * are against the {@link StandardEnvironment} implementation of
 * {@code ConfigurableEnvironment}, but are generally applicable to any implementation,
 * though particular default property sources may differ.
 *
 * <h4>Example: adding a new property source with highest search priority</h4>
 * <pre class="code">
 * ConfigurableEnvironment environment = new StandardEnvironment();
 * MutablePropertySources propertySources = environment.getPropertySources();
 * Map&lt;String, String&gt; myMap = new HashMap&lt;&gt;();
 * myMap.put("xyz", "myValue");
 * propertySources.addFirst(new MapPropertySource("MY_MAP", myMap));
 * </pre>
 *
 * <h4>Example: removing the default system properties property source</h4>
 * <pre class="code">
 * MutablePropertySources propertySources = environment.getPropertySources();
 * propertySources.remove(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME)
 * </pre>
 *
 * <h4>Example: mocking the system environment for testing purposes</h4>
 * <pre class="code">
 * MutablePropertySources propertySources = environment.getPropertySources();
 * MockPropertySource mockEnvVars = new MockPropertySource().withProperty("xyz", "myValue");
 * propertySources.replace(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, mockEnvVars);
 * </pre>
 *
 * When an {@link Environment} is being used by an {@code ApplicationContext}, it is
 * important that any such {@code PropertySource} manipulations be performed
 * <em>before</em> the context's {@link
 * org.springframework.context.support.AbstractApplicationContext#refresh() refresh()}
 * method is called. This ensures that all property sources are available during the
 * container bootstrap process, including use by {@linkplain
 * org.springframework.context.support.PropertySourcesPlaceholderConfigurer property
 * placeholder configurers}.
 *
 * @author Chris Beams
 * @since 3.1
 * @see StandardEnvironment
 * @see org.springframework.context.ConfigurableApplicationContext#getEnvironment
 */
/**
 * 大多数（如果不是全部）{<@link> Environment}类型都将实现配置接口。 
 * 提供用于设置活动和默认配置文件以及操纵基础属性源的工具。 
 * 允许客户端通过{@link  ConfigurablePropertyResolver}超级接口来设置和验证所需的属性，自定义转换服务等。 
 *  <h2>操纵财产来源</ h2> <p>财产来源可能被删除，重新排序或替换； 
 * 并且可以使用从{@link  #getPropertySources（）}返回的{@link  MutablePropertySources}实例添加其他属性源。 
 * 以下示例与{@code  ConfigurableEnvironment}的{@link  StandardEnvironment}实现相反，但通常适用于任何实现，尽管特定的默认属性来源可能有所不同。 
 *  <h4>示例：添加具有最高搜索优先级的新属性源</ h4> <pre class ="code"> ConfigurableEnvironment environment = new StandardEnvironment（）; MutablePropertySources propertySources = environment.getPropertySources（）; Map <String，String> myMap = new HashMap <>（）; myMap.put（"xyz"，"myValue"）; propertySources.addFirst（new MapPropertySource（"MY_MAP"，myMap））; </ pre> <h4>示例：删除默认的系统属性属性源</ h4> <pre class ="code"> MutablePropertySources propertySources = environment.getPropertySources（）; propertySources.remove（StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME）</ pre> <h4>示例：出于测试目的模拟系统环境</ h4> <pre class ="code"> MutablePropertySources propertySources = environment.getPropertySources（）; MockPropertySource mockEnvVars = new MockPropertySource（）。 
 * withProperty（"xyz"，"myValue"）; propertySources.replace（StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME，mockEnvVars）； 
 *  </ pre>当{@code  ApplicationContext}使用{@link  Environment}时，在<em>之前</ em>执行任何这样的{@code  PropertySource}操作非常重要上下文的{@link  org.springframework.context.support.AbstractApplicationContext＃refresh（）refresh（）}方法被调用。 
 * 这样可以确保在容器引导过程中所有属性源均可用，包括由{@link  plain org.springframework.context.support.PropertySourcesPlaceholderConfigurer属性占位符配置程序}使用。 
 *  @author 克里斯·比姆斯（Chris Beams）@从3.1开始
 * @see  StandardEnvironment 
 * @see  org.springframework.context.ConfigurableApplicationContext＃getEnvironment
 */
public interface ConfigurableEnvironment extends Environment, ConfigurablePropertyResolver {

	/**
	 * Specify the set of profiles active for this {@code Environment}. Profiles are
	 * evaluated during container bootstrap to determine whether bean definitions
	 * should be registered with the container.
	 * <p>Any existing active profiles will be replaced with the given arguments; call
	 * with zero arguments to clear the current set of active profiles. Use
	 * {@link #addActiveProfile} to add a profile while preserving the existing set.
	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only
	 * @see #addActiveProfile
	 * @see #setDefaultProfiles
	 * @see org.springframework.context.annotation.Profile
	 * @see AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME
	 */
	/**
	 * 指定为此{@code 环境}激活的配置文件集。 
	 * 在容器引导期间评估概要文件，以确定是否应在容器中注册bean定义。 
	 *  <p>任何现有的活动配置文件都将替换为给定的参数； 
	 * 使用零参数进行调用以清除当前的活动配置文件集。 
	 * 使用{@link  #addActiveProfile}添加配置文件，同时保留现有设置。 
	 *  
	 * @throws  IllegalArgumentException如果任何配置文件为null，空或仅空白
	 * @see  #addActiveProfile 
	 * @see  #setDefaultProfiles 
	 * @see  org.springframework.context.annotation.Profile 
	 * @see  AbstractEnvironment＃ACTIVE_PROFILES_PROPERTY_NAME
	 */
	void setActiveProfiles(String... profiles);

	/**
	 * Add a profile to the current set of active profiles.
	 * @throws IllegalArgumentException if the profile is null, empty or whitespace-only
	 * @see #setActiveProfiles
	 */
	/**
	 * 将配置文件添加到当前的活动配置文件集中。 
	 *  
	 * @throws  IllegalArgumentException如果配置文件为null，空或仅空白
	 * @see  #setActiveProfiles
	 */
	void addActiveProfile(String profile);

	/**
	 * Specify the set of profiles to be made active by default if no other profiles
	 * are explicitly made active through {@link #setActiveProfiles}.
	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only
	 * @see AbstractEnvironment#DEFAULT_PROFILES_PROPERTY_NAME
	 */
	/**
	 * 如果未通过{@link  #setActiveProfiles}明确使其他配置文件处于活动状态，则指定默认情况下要使其处于活动状态的配置文件集。 
	 *  
	 * @throws  IllegalArgumentException如果任何配置文件为null，为空或仅限于空格
	 * @see  AbstractEnvironment＃DEFAULT_PROFILES_PROPERTY_NAME
	 */
	void setDefaultProfiles(String... profiles);

	/**
	 * Return the {@link PropertySources} for this {@code Environment} in mutable form,
	 * allowing for manipulation of the set of {@link PropertySource} objects that should
	 * be searched when resolving properties against this {@code Environment} object.
	 * The various {@link MutablePropertySources} methods such as
	 * {@link MutablePropertySources#addFirst addFirst},
	 * {@link MutablePropertySources#addLast addLast},
	 * {@link MutablePropertySources#addBefore addBefore} and
	 * {@link MutablePropertySources#addAfter addAfter} allow for fine-grained control
	 * over property source ordering. This is useful, for example, in ensuring that
	 * certain user-defined property sources have search precedence over default property
	 * sources such as the set of system properties or the set of system environment
	 * variables.
	 * @see AbstractEnvironment#customizePropertySources
	 */
	/**
	 * 以可变形式返回此{@code  Environment}的{@link  PropertySources}，以允许处理在针对此{<@code解析属性时应搜索的{{@link> PropertySource}对象集>环境}对象。 
	 * 各种{@link  MutablePropertySources}方法，例如{@link  MutablePropertySources＃addFirst addFirst}，{<@link> MutablePropertySources＃addLast addLast}，{<@link> MutablePropertySources＃addBefore addBefore}和{@link  MutablePropertySources＃addAfter addAfter}允许对属性源顺序进行细粒度控制。 
	 * 例如，这在确保某些用户定义的属性源具有优先于默认属性源（例如系统属性集或系统环境变量集）的搜索优先级时很有用。 
	 *  
	 * @see  AbstractEnvironment＃customizePropertySources
	 */
	MutablePropertySources getPropertySources();

	/**
	 * Return the value of {@link System#getProperties()} if allowed by the current
	 * {@link SecurityManager}, otherwise return a map implementation that will attempt
	 * to access individual keys using calls to {@link System#getProperty(String)}.
	 * <p>Note that most {@code Environment} implementations will include this system
	 * properties map as a default {@link PropertySource} to be searched. Therefore, it is
	 * recommended that this method not be used directly unless bypassing other property
	 * sources is expressly intended.
	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw
	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access
	 * to a property, {@code null} will be returned and an INFO-level log message will be
	 * issued noting the exception.
	 */
	/**
	 * 如果当前{@link  SecurityManager}允许，则返回{@link  System＃getProperties（）}的值，否则返回映射实现，该实现将尝试使用对{@link  System＃的调用来访问各个键getProperty（String）}。 
	 *  <p>请注意，大多数{@code  Environment}实现都将包含此系统属性映射，作为要搜索的默认{@link  PropertySource}。 
	 * 因此，建议不要直接使用此方法，除非明确打算绕过其他属性源。 
	 *  <p>在返回的地图上调用{@link  Map＃get（Object）}永远不会抛出{@link  IllegalAccessException};如果SecurityManager禁止访问属性，则将返回{@code  null}并发出INFO级别的日志消息，指出该异常。 
	 * 
	 */
	Map<String, Object> getSystemProperties();

	/**
	 * Return the value of {@link System#getenv()} if allowed by the current
	 * {@link SecurityManager}, otherwise return a map implementation that will attempt
	 * to access individual keys using calls to {@link System#getenv(String)}.
	 * <p>Note that most {@link Environment} implementations will include this system
	 * environment map as a default {@link PropertySource} to be searched. Therefore, it
	 * is recommended that this method not be used directly unless bypassing other
	 * property sources is expressly intended.
	 * <p>Calls to {@link Map#get(Object)} on the Map returned will never throw
	 * {@link IllegalAccessException}; in cases where the SecurityManager forbids access
	 * to a property, {@code null} will be returned and an INFO-level log message will be
	 * issued noting the exception.
	 */
	/**
	 * 如果当前{@link  SecurityManager}允许，则返回{@link  System＃getenv（）}的值，否则返回映射实现，该实现将尝试使用对{@link  System＃的调用来访问各个键getenv（String）}。 
	 *  <p>请注意，大多数{@link  Environment}实现都将包含此系统环境映射，作为要搜索的默认{@link  PropertySource}。 
	 * 因此，建议不要直接使用此方法，除非明确打算绕过其他属性源。 
	 *  <p>在返回的地图上调用{@link  Map＃get（Object）}永远不会抛出{@link  IllegalAccessException};如果SecurityManager禁止访问属性，则将返回{@code  null}并发出INFO级别的日志消息，指出该异常。 
	 * 
	 */
	Map<String, Object> getSystemEnvironment();

	/**
	 * Append the given parent environment's active profiles, default profiles and
	 * property sources to this (child) environment's respective collections of each.
	 * <p>For any identically-named {@code PropertySource} instance existing in both
	 * parent and child, the child instance is to be preserved and the parent instance
	 * discarded. This has the effect of allowing overriding of property sources by the
	 * child as well as avoiding redundant searches through common property source types,
	 * e.g. system environment and system properties.
	 * <p>Active and default profile names are also filtered for duplicates, to avoid
	 * confusion and redundant storage.
	 * <p>The parent environment remains unmodified in any case. Note that any changes to
	 * the parent environment occurring after the call to {@code merge} will not be
	 * reflected in the child. Therefore, care should be taken to configure parent
	 * property sources and profile information prior to calling {@code merge}.
	 * @param parent the environment to merge with
	 * @since 3.1.2
	 * @see org.springframework.context.support.AbstractApplicationContext#setParent
	 */
	/**
	 * 将给定的父环境的活动配置文件，默认配置文件和属性源追加到此（子）环境各自的集合中。 
	 *  <p>对于在父级和子级中都存在的任何同名{{@code> PropertySource}实例，将保留子级实例，并丢弃父级实例。 
	 * 这样的效果是允许子级覆盖属性源，并避免对常见属性源类型（例如，系统环境和系统属性。 
	 *  <p>活动和默认配置文件名称也将进行过滤，以防重复，以避免混淆和冗余存储。 
	 *  <p>在任何情况下，父环境都保持不变。 
	 * 请注意，在调用{@code  merge}之后对父环境所做的任何更改都不会反映在子项中。 
	 * 因此，在调用{@code  merge}之前，应注意配置父属性源和配置文件信息。 
	 *  
	 * @param 将环境与@since 3.1.2合并。 
	 * 
	 * @see  org.springframework.context.support.AbstractApplicationContext＃setParent
	 */
	void merge(ConfigurableEnvironment parent);

}
