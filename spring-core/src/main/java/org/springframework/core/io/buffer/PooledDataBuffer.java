/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io.buffer;

/**
 * Extension of {@link DataBuffer} that allows for buffer that share
 * a memory pool. Introduces methods for reference counting.
 *
 * @author Arjen Poutsma
 * @since 5.0
 */
/**
 * {@link  DataBuffer}的扩展，允许共享内存池的缓冲区。 
 * 介绍引用计数的方法。 
 *  @author  Arjen Poutsma @从5.0开始
 */
public interface PooledDataBuffer extends DataBuffer {

	/**
	 * Return {@code true} if this buffer is allocated;
	 * {@code false} if it has been deallocated.
	 * @since 5.1
	 */
	/**
	 * 如果分配了此缓冲区，则返回{@code  true}； 
	 * 否则，返回false。 
	 *  {@code  false}（如果已释放）。 
	 *  @5.1起
	 */
	boolean isAllocated();

	/**
	 * Increase the reference count for this buffer by one.
	 * @return this buffer
	 */
	/**
	 * 该缓冲区的引用计数增加一。 
	 *  
	 * @return 此缓冲区
	 */
	PooledDataBuffer retain();

	/**
	 * Decrease the reference count for this buffer by one,
	 * and deallocate it once the count reaches zero.
	 * @return {@code true} if the buffer was deallocated;
	 * {@code false} otherwise
	 */
	/**
	 * 将该缓冲区的引用计数减少1，并在计数达到零时将其重新分配。 
	 *  
	 * @return  {@code  true}，如果缓冲区已释放； 
	 *  {@code  false}否则
	 */
	boolean release();

}
