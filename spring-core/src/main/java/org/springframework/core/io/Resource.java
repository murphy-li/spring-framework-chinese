/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;

import org.springframework.lang.Nullable;

/**
 * Interface for a resource descriptor that abstracts from the actual
 * type of underlying resource, such as a file or class path resource.
 *
 * <p>An InputStream can be opened for every resource if it exists in
 * physical form, but a URL or File handle can just be returned for
 * certain resources. The actual behavior is implementation-specific.
 *
 * @author Juergen Hoeller
 * @since 28.12.2003
 * @see #getInputStream()
 * @see #getURL()
 * @see #getURI()
 * @see #getFile()
 * @see WritableResource
 * @see ContextResource
 * @see UrlResource
 * @see FileUrlResource
 * @see FileSystemResource
 * @see ClassPathResource
 * @see ByteArrayResource
 * @see InputStreamResource
 */
/**
 * 资源描述符的接口，它从基础资源的实际类型中抽象出来，例如文件或类路径资源。 
 *  <p>如果一个输入流以物理形式存在，则可以为每个资源打开一个InputStream，但是仅可以为某些资源返回URL或文件句柄。 
 * 实际行为是特定于实现的。 
 *  @author  Juergen Hoeller @2003年12月28日
 * @see  #getInputStream（）
 * @see  #getURL（）
 * @see  #getURI（）
 * @see  #getFile（）
 * @see  WritableResource <@请参阅> ContextResource <@请参阅> UrlResource <@请参阅> FileUrlResource <@请参阅> FileSystemResource <@请参阅> ClassPathResource <@请参阅> ByteArrayResource <@请参阅> InputStreamResource
 */
public interface Resource extends InputStreamSource {

	/**
	 * Determine whether this resource actually exists in physical form.
	 * <p>This method performs a definitive existence check, whereas the
	 * existence of a {@code Resource} handle only guarantees a valid
	 * descriptor handle.
	 */
	/**
	 * 确定此资源是否实际以物理形式存在。 
	 *  <p>此方法执行确定的存在性检查，而{@code  Resource}句柄的存在仅保证有效的描述符句柄。 
	 * 
	 */
	boolean exists();

	/**
	 * Indicate whether non-empty contents of this resource can be read via
	 * {@link #getInputStream()}.
	 * <p>Will be {@code true} for typical resource descriptors that exist
	 * since it strictly implies {@link #exists()} semantics as of 5.1.
	 * Note that actual content reading may still fail when attempted.
	 * However, a value of {@code false} is a definitive indication
	 * that the resource content cannot be read.
	 * @see #getInputStream()
	 * @see #exists()
	 */
	/**
	 * 指示是否可以通过{@link  #getInputStream（）}读取此资源的非空内容。 
	 * 对于存在的典型资源描述符，<p>将为{@code  true}，因为从5.1开始，它严格隐含了{@link  #exists（）}语义。 
	 * 请注意，尝试进行实际的内容读取仍可能会失败。 
	 * 但是，值{@code  false}是无法读取资源内容的明确指示。 
	 *  
	 * @see  #getInputStream（）
	 * @see  #exists（）
	 */
	default boolean isReadable() {
		return exists();
	}

	/**
	 * Indicate whether this resource represents a handle with an open stream.
	 * If {@code true}, the InputStream cannot be read multiple times,
	 * and must be read and closed to avoid resource leaks.
	 * <p>Will be {@code false} for typical resource descriptors.
	 */
	/**
	 * 指示此资源是否代表具有开放流的句柄。 
	 * 如果{@code  true}，则不能多次读取InputStream，必须对其进行读取和关闭，以避免资源泄漏。 
	 * 对于典型的资源描述符，<p>将为{@code  false}。 
	 * 
	 */
	default boolean isOpen() {
		return false;
	}

	/**
	 * Determine whether this resource represents a file in a file system.
	 * A value of {@code true} strongly suggests (but does not guarantee)
	 * that a {@link #getFile()} call will succeed.
	 * <p>This is conservatively {@code false} by default.
	 * @since 5.0
	 * @see #getFile()
	 */
	/**
	 * 确定此资源是否代表文件系统中的文件。 
	 * 值{@code  true}强烈建议（但不能保证）{@link  #getFile（）}调用将成功。 
	 *  <p>默认情况下，这是保守的{@code  false}。 
	 *  @since 5.0 
	 * @see  #getFile（）
	 */
	default boolean isFile() {
		return false;
	}

	/**
	 * Return a URL handle for this resource.
	 * @throws IOException if the resource cannot be resolved as URL,
	 * i.e. if the resource is not available as descriptor
	 */
	/**
	 * 返回此资源的URL句柄。 
	 *  
	 * @throws  IOException如果资源不能解析为URL，即资源不可用作描述符
	 */
	URL getURL() throws IOException;

	/**
	 * Return a URI handle for this resource.
	 * @throws IOException if the resource cannot be resolved as URI,
	 * i.e. if the resource is not available as descriptor
	 * @since 2.5
	 */
	/**
	 * 返回此资源的URI句柄。 
	 *  
	 * @throws  IOException-如果无法将资源解析为URI，即如果自2.5起该资源不可用作为描述符
	 */
	URI getURI() throws IOException;

	/**
	 * Return a File handle for this resource.
	 * @throws java.io.FileNotFoundException if the resource cannot be resolved as
	 * absolute file path, i.e. if the resource is not available in a file system
	 * @throws IOException in case of general resolution/reading failures
	 * @see #getInputStream()
	 */
	/**
	 * 返回此资源的文件句柄。 
	 *  
	 * @throws  java.io.FileNotFoundException如果无法将资源解析为绝对文件路径，即资源在文件系统中不可用
	 * @throws  IOException（在常规解析/读取失败的情况下）
	 * @see  #getInputStream （）
	 */
	File getFile() throws IOException;

	/**
	 * Return a {@link ReadableByteChannel}.
	 * <p>It is expected that each call creates a <i>fresh</i> channel.
	 * <p>The default implementation returns {@link Channels#newChannel(InputStream)}
	 * with the result of {@link #getInputStream()}.
	 * @return the byte channel for the underlying resource (must not be {@code null})
	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist
	 * @throws IOException if the content channel could not be opened
	 * @since 5.0
	 * @see #getInputStream()
	 */
	/**
	 * 返回一个{@link  ReadableByteChannel}。 
	 *  <p>预计每个呼叫都会创建一个<i>新鲜</ i>频道。 
	 *  <p>默认实现返回{@link  Channels＃newChannel（InputStream）}，结果为{@link  #getInputStream（）}。 
	 *  
	 * @return 基础资源的字节通道（不得为{@code  null}）
	 * @throws 如果基础资源不存在，则为java.io.FileNotFoundException 
	 * @throws  IOException如果内容通道可以自5.0起未打开
	 * @see  #getInputStream（）
	 */
	default ReadableByteChannel readableChannel() throws IOException {
		return Channels.newChannel(getInputStream());
	}

	/**
	 * Determine the content length for this resource.
	 * @throws IOException if the resource cannot be resolved
	 * (in the file system or as some other known physical resource type)
	 */
	/**
	 * 确定此资源的内容长度。 
	 *  
	 * @throws  IOException如果无法解析资源（在文件系统中或作为某种其他已知的物理资源类型）
	 */
	long contentLength() throws IOException;

	/**
	 * Determine the last-modified timestamp for this resource.
	 * @throws IOException if the resource cannot be resolved
	 * (in the file system or as some other known physical resource type)
	 */
	/**
	 * 确定此资源的最后修改的时间戳。 
	 *  
	 * @throws  IOException如果无法解析资源（在文件系统中或作为某种其他已知的物理资源类型）
	 */
	long lastModified() throws IOException;

	/**
	 * Create a resource relative to this resource.
	 * @param relativePath the relative path (relative to this resource)
	 * @return the resource handle for the relative resource
	 * @throws IOException if the relative resource cannot be determined
	 */
	/**
	 * 创建相对于该资源的资源。 
	 *  
	 * @param  relativePath相对路径（相对于此资源）
	 * @return 相对资源的资源句柄
	 * @throws  IOException如果无法确定相对资源
	 */
	Resource createRelative(String relativePath) throws IOException;

	/**
	 * Determine a filename for this resource, i.e. typically the last
	 * part of the path: for example, "myfile.txt".
	 * <p>Returns {@code null} if this type of resource does not
	 * have a filename.
	 */
	/**
	 * 确定此资源的文件名，即通常是路径的最后一部分：例如"myfile.txt"。 
	 *  <p>如果这种类型的资源没有文件名，则返回{@code  null}。 
	 * 
	 */
	@Nullable
	String getFilename();

	/**
	 * Return a description for this resource,
	 * to be used for error output when working with the resource.
	 * <p>Implementations are also encouraged to return this value
	 * from their {@code toString} method.
	 * @see Object#toString()
	 */
	/**
	 * 返回对此资源的描述，以在使用该资源时用于错误输出。 
	 *  <p>还鼓励实现从其{@code  toString}方法返回此值。 
	 *  
	 * @see  Object＃toString（）
	 */
	String getDescription();

}
