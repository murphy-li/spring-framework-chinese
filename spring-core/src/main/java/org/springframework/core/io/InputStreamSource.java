/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io;

import java.io.IOException;
import java.io.InputStream;

/**
 * Simple interface for objects that are sources for an {@link InputStream}.
 *
 * <p>This is the base interface for Spring's more extensive {@link Resource} interface.
 *
 * <p>For single-use streams, {@link InputStreamResource} can be used for any
 * given {@code InputStream}. Spring's {@link ByteArrayResource} or any
 * file-based {@code Resource} implementation can be used as a concrete
 * instance, allowing one to read the underlying content stream multiple times.
 * This makes this interface useful as an abstract content source for mail
 * attachments, for example.
 *
 * @author Juergen Hoeller
 * @since 20.01.2004
 * @see java.io.InputStream
 * @see Resource
 * @see InputStreamResource
 * @see ByteArrayResource
 */
/**
 * 对象的简单接口，这些对象是{@link  InputStream}的源。 
 *  <p>这是Spring更广泛的{@link  Resource}接口的基本接口。 
 *  <p>对于一次性流，{<@link> InputStreamResource}可以用于任何给定的{@code  InputStream}。 
 *  Spring的{@link  ByteArrayResource}或任何基于文件的{@code  Resource}实现都可以用作具体实例，从而允许其多次读取基础内容流。 
 * 例如，这使该接口可用作邮件附件的抽象内容源。 
 *  @author  Juergen Hoeller @2004年2月21日
 * @see  java.io.InputStream 
 * @see 资源
 * @see  InputStreamResource 
 * @see  ByteArrayResource
 */
public interface InputStreamSource {

	/**
	 * Return an {@link InputStream} for the content of an underlying resource.
	 * <p>It is expected that each call creates a <i>fresh</i> stream.
	 * <p>This requirement is particularly important when you consider an API such
	 * as JavaMail, which needs to be able to read the stream multiple times when
	 * creating mail attachments. For such a use case, it is <i>required</i>
	 * that each {@code getInputStream()} call returns a fresh stream.
	 * @return the input stream for the underlying resource (must not be {@code null})
	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist
	 * @throws IOException if the content stream could not be opened
	 */
	/**
	 * 返回{@link  InputStream}作为基础资源的内容。 
	 *  <p>预计每个调用都会创建一个<i>新鲜</ i>流。 
	 *  <p>当您考虑使用JavaMail之类的API时，此要求特别重要，当创建邮件附件时，该API需要能够多次读取流。 
	 * 对于这种用例，<i>要求</ i>要求每个{@code  getInputStream（）}调用都返回一个新鲜的流。 
	 *  
	 * @return 基础资源的输入流（不得为{@code  null}）
	 * @throws 如果基础资源不存在，则为java.io.FileNotFoundException 
	 * @throws  IOException如果内容流可以不开
	 */
	InputStream getInputStream() throws IOException;

}
