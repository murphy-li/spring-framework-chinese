/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.Channels;
import java.nio.channels.WritableByteChannel;

/**
 * Extended interface for a resource that supports writing to it.
 * Provides an {@link #getOutputStream() OutputStream accessor}.
 *
 * @author Juergen Hoeller
 * @since 3.1
 * @see java.io.OutputStream
 */
/**
 * 支持写入资源的扩展接口。 
 * 提供一个{@link  #getOutputStream（）OutputStream访问器}。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@从3.1开始
 * @see  java.io.OutputStream
 */
public interface WritableResource extends Resource {

	/**
	 * Indicate whether the contents of this resource can be written
	 * via {@link #getOutputStream()}.
	 * <p>Will be {@code true} for typical resource descriptors;
	 * note that actual content writing may still fail when attempted.
	 * However, a value of {@code false} is a definitive indication
	 * that the resource content cannot be modified.
	 * @see #getOutputStream()
	 * @see #isReadable()
	 */
	/**
	 * 指示是否可以通过{@link  #getOutputStream（）}编写此资源的内容。 
	 * 对于典型的资源描述符，<p>将为{@code  true}； 
	 * 请注意，尝试进行实际的内容写入仍可能会失败。 
	 * 但是，值{@code  false}是无法修改资源内容的明确指示。 
	 *  
	 * @see  #getOutputStream（）
	 * @see  #isReadable（）
	 */
	default boolean isWritable() {
		return true;
	}

	/**
	 * Return an {@link OutputStream} for the underlying resource,
	 * allowing to (over-)write its content.
	 * @throws IOException if the stream could not be opened
	 * @see #getInputStream()
	 */
	/**
	 * 返回基础资源的{@link  OutputStream}，以允许（覆盖）其内容。 
	 *  
	 * @throws  IOException如果无法打开流
	 * @see  #getInputStream（）
	 */
	OutputStream getOutputStream() throws IOException;

	/**
	 * Return a {@link WritableByteChannel}.
	 * <p>It is expected that each call creates a <i>fresh</i> channel.
	 * <p>The default implementation returns {@link Channels#newChannel(OutputStream)}
	 * with the result of {@link #getOutputStream()}.
	 * @return the byte channel for the underlying resource (must not be {@code null})
	 * @throws java.io.FileNotFoundException if the underlying resource doesn't exist
	 * @throws IOException if the content channel could not be opened
	 * @since 5.0
	 * @see #getOutputStream()
	 */
	/**
	 * 返回一个{@link  WritableByteChannel}。 
	 *  <p>预计每个呼叫都会创建一个<i>新鲜</ i>频道。 
	 *  <p>默认实现返回{@link  Channels＃newChannel（OutputStream）}，结果为{@link  #getOutputStream（）}。 
	 *  
	 * @return 基础资源的字节通道（不得为{@code  null}）
	 * @throws 如果基础资源不存在，则为java.io.FileNotFoundException 
	 * @throws  IOException如果内容通道可以自5.0起未打开
	 * @see  #getOutputStream（）
	 */
	default WritableByteChannel writableChannel() throws IOException {
		return Channels.newChannel(getOutputStream());
	}

}
