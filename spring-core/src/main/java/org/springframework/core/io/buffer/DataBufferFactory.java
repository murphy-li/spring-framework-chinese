/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io.buffer;

import java.nio.ByteBuffer;
import java.util.List;

/**
 * A factory for {@link DataBuffer DataBuffers}, allowing for allocation and
 * wrapping of data buffers.
 *
 * @author Arjen Poutsma
 * @since 5.0
 * @see DataBuffer
 */
/**
 * {@link  DataBuffer DataBuffers}的工厂，允许分配和包装数据缓冲区。 
 *  @author  Arjen Poutsma @从5.0开始
 * @see  DataBuffer
 */
public interface DataBufferFactory {

	/**
	 * Allocate a data buffer of a default initial capacity. Depending on the
	 * underlying implementation and its configuration, this will be heap-based
	 * or direct buffer.
	 * @return the allocated buffer
	 */
	/**
	 * 分配默认初始容量的数据缓冲区。 
	 * 根据基础实现及其配置，这将是基于堆的缓冲区或直接缓冲区。 
	 *  
	 * @return 分配的缓冲区
	 */
	DataBuffer allocateBuffer();

	/**
	 * Allocate a data buffer of the given initial capacity. Depending on the
	 * underlying implementation and its configuration, this will be heap-based
	 * or direct buffer.
	 * @param initialCapacity the initial capacity of the buffer to allocate
	 * @return the allocated buffer
	 */
	/**
	 * 分配给定初始容量的数据缓冲区。 
	 * 根据基础实现及其配置，这将是基于堆的缓冲区或直接缓冲区。 
	 *  
	 * @param  initialCapacity缓冲区分配的初始容量
	 * @return 已分配的缓冲区
	 */
	DataBuffer allocateBuffer(int initialCapacity);

	/**
	 * Wrap the given {@link ByteBuffer} in a {@code DataBuffer}. Unlike
	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory.
	 * @param byteBuffer the NIO byte buffer to wrap
	 * @return the wrapped buffer
	 */
	/**
	 * 将给定的{@link  ByteBuffer}包装在{@code  DataBuffer}中。 
	 * 与{@link  plain #allocateBuffer（int）allocating}不同，包装不使用新的内存。 
	 *  
	 * @param  byteBuffer NIO字节缓冲区要包装
	 * @return 包装的缓冲区
	 */
	DataBuffer wrap(ByteBuffer byteBuffer);

	/**
	 * Wrap the given {@code byte} array in a {@code DataBuffer}. Unlike
 	 * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory.
	 * @param bytes the byte array to wrap
	 * @return the wrapped buffer
	 */
	/**
	 * 将给定的{@code 字节}数组包装在{@code  DataBuffer}中。 
	 * 与{@link  plain #allocateBuffer（int）allocating}不同，包装不使用新的内存。 
	 *  
	 * @param 字节包装的字节数组
	 * @return 包装的缓冲区
	 */
	DataBuffer wrap(byte[] bytes);

	/**
	 * Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together.
	 * Depending on the implementation, the returned buffer may be a single buffer containing all
	 * data of the provided buffers, or it may be a true composite that contains references to the
	 * buffers.
	 * <p>Note that the given data buffers do <strong>not</strong> have to be released, as they are
	 * released as part of the returned composite.
	 * @param dataBuffers the data buffers to be composed
	 * @return a buffer that is composed from the {@code dataBuffers} argument
	 * @since 5.0.3
	 */
	/**
	 * 返回一个新的{@code  DataBuffer}，它由连接在一起的{@code  dataBuffers}元素组成。 
	 * 根据实现的不同，返回的缓冲区可以是包含所提供缓冲区的所有数据的单个缓冲区，也可以是包含对缓冲区的引用的真实组合。 
	 *  <p>请注意，不必<strong>不必</ strong>释放给定的数据缓冲区，因为它们将作为返回的组合的一部分被释放。 
	 *  
	 * @param  dataBuffers将要组成的数据缓冲区
	 * @return 由{@code  dataBuffers}参数@5.0.3起组成的缓冲区
	 */
	DataBuffer join(List<? extends DataBuffer> dataBuffers);

}
