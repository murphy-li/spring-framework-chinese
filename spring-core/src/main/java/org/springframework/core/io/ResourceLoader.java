/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io;

import org.springframework.lang.Nullable;
import org.springframework.util.ResourceUtils;

/**
 * Strategy interface for loading resources (e.. class path or file system
 * resources). An {@link org.springframework.context.ApplicationContext}
 * is required to provide this functionality, plus extended
 * {@link org.springframework.core.io.support.ResourcePatternResolver} support.
 *
 * <p>{@link DefaultResourceLoader} is a standalone implementation that is
 * usable outside an ApplicationContext, also used by {@link ResourceEditor}.
 *
 * <p>Bean properties of type Resource and Resource array can be populated
 * from Strings when running in an ApplicationContext, using the particular
 * context's resource loading strategy.
 *
 * @author Juergen Hoeller
 * @since 10.03.2004
 * @see Resource
 * @see org.springframework.core.io.support.ResourcePatternResolver
 * @see org.springframework.context.ApplicationContext
 * @see org.springframework.context.ResourceLoaderAware
 */
/**
 * 用于加载资源（例如类路径或文件系统资源）的策略界面。 
 * 提供此功能需要使用{@link  org.springframework.context.ApplicationContext}，以及扩展的{@link  org.springframework.core.io.support.ResourcePatternResolver}支持。 
 *  <p> {<@link> DefaultResourceLoader}是一个独立的实现，可以在ApplicationContext之外使用，也由{@link  ResourceEditor}使用。 
 * 当在ApplicationContext中运行时，可以使用特定上下文的资源加载策略从Strings填充Resource和Resource array类型的<p> Bean属性。 
 *  @author  Juergen Hoeller @2004年10月10日以来
 * @see 资源
 * @see  org.springframework.core.io.support.ResourcePatternResolver 
 * @see  org.springframework.context.ApplicationContext 
 * @see  org.springframework。 
 *  context.ResourceLoaderAware
 */
public interface ResourceLoader {

	/** Pseudo URL prefix for loading from the class path: "classpath:". */
	/**
	 * 从类路径"classpath："加载的伪URL前缀。 
	 * 
	 */
	String CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;


	/**
	 * Return a Resource handle for the specified resource location.
	 * <p>The handle should always be a reusable resource descriptor,
	 * allowing for multiple {@link Resource#getInputStream()} calls.
	 * <p><ul>
	 * <li>Must support fully qualified URLs, e.g. "file:C:/test.dat".
	 * <li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat".
	 * <li>Should support relative file paths, e.g. "WEB-INF/test.dat".
	 * (This will be implementation-specific, typically provided by an
	 * ApplicationContext implementation.)
	 * </ul>
	 * <p>Note that a Resource handle does not imply an existing resource;
	 * you need to invoke {@link Resource#exists} to check for existence.
	 * @param location the resource location
	 * @return a corresponding Resource handle (never {@code null})
	 * @see #CLASSPATH_URL_PREFIX
	 * @see Resource#exists()
	 * @see Resource#getInputStream()
	 */
	/**
	 * 返回指定资源位置的资源句柄。 
	 *  <p>句柄应该始终是可重用的资源描述符，允许多次{@link  Resource＃getInputStream（）}调用。 
	 *  <p> <ul> <li>必须支持完全限定的网址，例如"文件：C：/test.dat"。 
	 *  <li>必须支持classpath伪URL，例如"classpath：test.dat"。 
	 *  <li>应支持相对文件路径，例如"WEB-INF / test.dat"。 
	 *  （这将是特定于实现的，通常是由ApplicationContext实现提供的。 
	 * ）</ ul> <p>请注意，资源句柄并不意味着现有资源； 
	 * 您需要调用{@link  Resource＃exists}来检查是否存在。 
	 *  
	 * @param 位置资源位置
	 * @return 相应的资源句柄（从不{@code  null}）
	 * @see  #CLASSPATH_URL_PREFIX 
	 * @see  Resource＃exists（）
	 * @see  Resource＃getInputStream（）
	 */
	Resource getResource(String location);

	/**
	 * Expose the ClassLoader used by this ResourceLoader.
	 * <p>Clients which need to access the ClassLoader directly can do so
	 * in a uniform manner with the ResourceLoader, rather than relying
	 * on the thread context ClassLoader.
	 * @return the ClassLoader
	 * (only {@code null} if even the system ClassLoader isn't accessible)
	 * @see org.springframework.util.ClassUtils#getDefaultClassLoader()
	 * @see org.springframework.util.ClassUtils#forName(String, ClassLoader)
	 */
	/**
	 * 公开此ResourceLoader使用的ClassLoader。 
	 *  <p>需要直接访问ClassLoader的客户端可以使用ResourceLoader以统一的方式进行操作，而不是依赖于线程上下文ClassLoader。 
	 *  
	 * @return  ClassLoader（如果甚至无法访问系统ClassLoader，也只能是{@code  null}）。 
	 * @
	 * @see> org.springframework.util.ClassUtils＃getDefaultClassLoader（） ClassUtils＃forName（String，ClassLoader）
	 */
	@Nullable
	ClassLoader getClassLoader();

}
