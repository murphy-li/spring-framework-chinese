/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.io;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ResourceUtils;
import org.springframework.util.StringUtils;

/**
 * {@link Resource} implementation for {@code java.net.URL} locators.
 * Supports resolution as a {@code URL} and also as a {@code File} in
 * case of the {@code "file:"} protocol.
 *
 * @author Juergen Hoeller
 * @since 28.12.2003
 * @see java.net.URL
 */
/**
 * {@code  java.net.URL}定位符的{@link  Resource}实现。 
 * 在{@code "file："}协议的情况下，支持作为{@code  URL}的解析，也支持作为{@code  File}的解析。 
 *  @author  Juergen Hoeller @2003年12月28日起
 * @see  java.net.URL
 */
public class UrlResource extends AbstractFileResolvingResource {

	/**
	 * Original URI, if available; used for URI and File access.
	 */
	/**
	 * 原始URI（如果有）； 
	 * 用于URI和文件访问。 
	 * 
	 */
	@Nullable
	private final URI uri;

	/**
	 * Original URL, used for actual access.
	 */
	/**
	 * 原始URL，用于实际访问。 
	 * 
	 */
	private final URL url;

	/**
	 * Cleaned URL (with normalized path), used for comparisons.
	 */
	/**
	 * 清除的URL（具有标准化路径），用于比较。 
	 * 
	 */
	private final URL cleanedUrl;


	/**
	 * Create a new {@code UrlResource} based on the given URI object.
	 * @param uri a URI
	 * @throws MalformedURLException if the given URL path is not valid
	 * @since 2.5
	 */
	/**
	 * 根据给定的URI对象创建一个新的{@code  UrlResource}。 
	 *  
	 * @param  uri a URI 
	 * @throws 如果给定的URL路径无效，则为MalformedURLException @since 2.5
	 */
	public UrlResource(URI uri) throws MalformedURLException {
		Assert.notNull(uri, "URI must not be null");
		this.uri = uri;
		this.url = uri.toURL();
		this.cleanedUrl = getCleanedUrl(this.url, uri.toString());
	}

	/**
	 * Create a new {@code UrlResource} based on the given URL object.
	 * @param url a URL
	 */
	/**
	 * 根据给定的URL对象创建一个新的{@code  UrlResource}。 
	 *  
	 * @param  URL URL
	 */
	public UrlResource(URL url) {
		Assert.notNull(url, "URL must not be null");
		this.url = url;
		this.cleanedUrl = getCleanedUrl(this.url, url.toString());
		this.uri = null;
	}

	/**
	 * Create a new {@code UrlResource} based on a URL path.
	 * <p>Note: The given path needs to be pre-encoded if necessary.
	 * @param path a URL path
	 * @throws MalformedURLException if the given URL path is not valid
	 * @see java.net.URL#URL(String)
	 */
	/**
	 * 根据URL路径创建一个新的{@code  UrlResource}。 
	 *  <p>注意：给定的路径需要在必要时进行预编码。 
	 *  
	 * @param 路径URL路径
	 * @throws 如果给定的URL路径无效，则为MalformedURLException 
	 * @see  java.net.URL＃URL（String）
	 */
	public UrlResource(String path) throws MalformedURLException {
		Assert.notNull(path, "Path must not be null");
		this.uri = null;
		this.url = new URL(path);
		this.cleanedUrl = getCleanedUrl(this.url, path);
	}

	/**
	 * Create a new {@code UrlResource} based on a URI specification.
	 * <p>The given parts will automatically get encoded if necessary.
	 * @param protocol the URL protocol to use (e.g. "jar" or "file" - without colon);
	 * also known as "scheme"
	 * @param location the location (e.g. the file path within that protocol);
	 * also known as "scheme-specific part"
	 * @throws MalformedURLException if the given URL specification is not valid
	 * @see java.net.URI#URI(String, String, String)
	 */
	/**
	 * 根据URI规范创建一个新的{@code  UrlResource}。 
	 *  <p>如有必要，给定的部分将自动进行编码。 
	 *  
	 * @param 协议要使用的URL协议（例如，"jar"或"file"-不带冒号）； 
	 * 也称为"方案"
	 * @param  location位置（例如该协议中的文件路径）； 
	 * 也称为"特定于方案的部分"
	 * @throws  MalformedURLException如果给定的URL规范无效
	 * @see  java.net.URI＃URI（String，String，String）
	 */
	public UrlResource(String protocol, String location) throws MalformedURLException  {
		this(protocol, location, null);
	}

	/**
	 * Create a new {@code UrlResource} based on a URI specification.
	 * <p>The given parts will automatically get encoded if necessary.
	 * @param protocol the URL protocol to use (e.g. "jar" or "file" - without colon);
	 * also known as "scheme"
	 * @param location the location (e.g. the file path within that protocol);
	 * also known as "scheme-specific part"
	 * @param fragment the fragment within that location (e.g. anchor on an HTML page,
	 * as following after a "#" separator)
	 * @throws MalformedURLException if the given URL specification is not valid
	 * @see java.net.URI#URI(String, String, String)
	 */
	/**
	 * 根据URI规范创建一个新的{@code  UrlResource}。 
	 *  <p>如有必要，给定的部分将自动进行编码。 
	 *  
	 * @param 协议要使用的URL协议（例如，"jar"或"file"-不带冒号）； 
	 * 也称为"方案"
	 * @param  location位置（例如该协议中的文件路径）； 
	 * 也称为"特定于方案的部分"
	 * @param 片段该位置内的片段（例如，在HTML页面上的锚点，如"＃"分隔符之后的内容）
	 * @throws 如果给定的URL规范无效，则为MalformedURLException 
	 * @see  java.net.URI＃URI（字符串，字符串，字符串）
	 */
	public UrlResource(String protocol, String location, @Nullable String fragment) throws MalformedURLException  {
		try {
			this.uri = new URI(protocol, location, fragment);
			this.url = this.uri.toURL();
			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString());
		}
		catch (URISyntaxException ex) {
			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage());
			exToThrow.initCause(ex);
			throw exToThrow;
		}
	}


	/**
	 * Determine a cleaned URL for the given original URL.
	 * @param originalUrl the original URL
	 * @param originalPath the original URL path
	 * @return the cleaned URL (possibly the original URL as-is)
	 * @see org.springframework.util.StringUtils#cleanPath
	 */
	/**
	 * 确定给定原始URL的清理URL。 
	 *  
	 * @param  originalUrl原始URL 
	 * @param  originalPath原始URL路径
	 * @return 清理过的URL（可能是原始URL原样）
	 * @see  org.springframework.util.StringUtils＃cleanPath
	 */
	private URL getCleanedUrl(URL originalUrl, String originalPath) {
		String cleanedPath = StringUtils.cleanPath(originalPath);
		if (!cleanedPath.equals(originalPath)) {
			try {
				return new URL(cleanedPath);
			}
			catch (MalformedURLException ex) {
				// Cleaned URL path cannot be converted to URL -> take original URL.
			}
		}
		return originalUrl;
	}

	/**
	 * This implementation opens an InputStream for the given URL.
	 * <p>It sets the {@code useCaches} flag to {@code false},
	 * mainly to avoid jar file locking on Windows.
	 * @see java.net.URL#openConnection()
	 * @see java.net.URLConnection#setUseCaches(boolean)
	 * @see java.net.URLConnection#getInputStream()
	 */
	/**
	 * 此实现打开给定URL的InputStream。 
	 *  <p>它将{@code  useCaches}标志设置为{@code  false}，主要是为了避免jar文件在Windows上锁定。 
	 *  
	 * @see  java.net.URL＃openConnection（）
	 * @see  java.net.URLConnection＃setUseCaches（boolean）
	 * @see  java.net.URLConnection＃getInputStream（）
	 */
	@Override
	public InputStream getInputStream() throws IOException {
		URLConnection con = this.url.openConnection();
		ResourceUtils.useCachesIfNecessary(con);
		try {
			return con.getInputStream();
		}
		catch (IOException ex) {
			// Close the HTTP connection (if applicable).
			if (con instanceof HttpURLConnection) {
				((HttpURLConnection) con).disconnect();
			}
			throw ex;
		}
	}

	/**
	 * This implementation returns the underlying URL reference.
	 */
	/**
	 * 此实现返回基础URL参考。 
	 * 
	 */
	@Override
	public URL getURL() {
		return this.url;
	}

	/**
	 * This implementation returns the underlying URI directly,
	 * if possible.
	 */
	/**
	 * 如果可能，此实现将直接返回基础URI。 
	 * 
	 */
	@Override
	public URI getURI() throws IOException {
		if (this.uri != null) {
			return this.uri;
		}
		else {
			return super.getURI();
		}
	}

	@Override
	public boolean isFile() {
		if (this.uri != null) {
			return super.isFile(this.uri);
		}
		else {
			return super.isFile();
		}
	}

	/**
	 * This implementation returns a File reference for the underlying URL/URI,
	 * provided that it refers to a file in the file system.
	 * @see org.springframework.util.ResourceUtils#getFile(java.net.URL, String)
	 */
	/**
	 * 如果该实现引用文件系统中的文件，则该实现返回针对底层URL / URI的File引用。 
	 *  
	 * @see  org.springframework.util.ResourceUtils＃getFile（java.net.URL，String）
	 */
	@Override
	public File getFile() throws IOException {
		if (this.uri != null) {
			return super.getFile(this.uri);
		}
		else {
			return super.getFile();
		}
	}

	/**
	 * This implementation creates a {@code UrlResource}, delegating to
	 * {@link #createRelativeURL(String)} for adapting the relative path.
	 * @see #createRelativeURL(String)
	 */
	/**
	 * 此实现创建一个{@code  UrlResource}，委托给{@link  #createRelativeURL（String）}，以适应相对路径。 
	 *  
	 * @see  #createRelativeURL（String）
	 */
	@Override
	public Resource createRelative(String relativePath) throws MalformedURLException {
		return new UrlResource(createRelativeURL(relativePath));
	}

	/**
	 * This delegate creates a {@code java.net.URL}, applying the given path
	 * relative to the path of the underlying URL of this resource descriptor.
	 * A leading slash will get dropped; a "#" symbol will get encoded.
	 * @since 5.2
	 * @see #createRelative(String)
	 * @see java.net.URL#URL(java.net.URL, String)
	 */
	/**
	 * 该委托创建一个{@code  java.net.URL}，将给定路径应用于此资源描述符的基础URL的路径。 
	 * 斜杠将被删除； 
	 *  "＃"符号将被编码。 
	 *  @since 5.2 
	 * @see  #createRelative（String）
	 * @see  java.net.URL＃URL（java.net.URL，String）
	 */
	protected URL createRelativeURL(String relativePath) throws MalformedURLException {
		if (relativePath.startsWith("/")) {
			relativePath = relativePath.substring(1);
		}
		// # can appear in filenames, java.net.URL should not treat it as a fragment
		relativePath = StringUtils.replace(relativePath, "#", "%23");
		// Use the URL constructor for applying the relative path as a URL spec
		return new URL(this.url, relativePath);
	}

	/**
	 * This implementation returns the name of the file that this URL refers to.
	 * @see java.net.URL#getPath()
	 */
	/**
	 * 此实现返回此URL引用的文件的名称。 
	 *  
	 * @see  java.net.URL＃getPath（）
	 */
	@Override
	public String getFilename() {
		return StringUtils.getFilename(this.cleanedUrl.getPath());
	}

	/**
	 * This implementation returns a description that includes the URL.
	 */
	/**
	 * 此实现返回包含URL的描述。 
	 * 
	 */
	@Override
	public String getDescription() {
		return "URL [" + this.url + "]";
	}


	/**
	 * This implementation compares the underlying URL references.
	 */
	/**
	 * 此实现比较底层URL引用。 
	 * 
	 */
	@Override
	public boolean equals(@Nullable Object other) {
		return (this == other || (other instanceof UrlResource &&
				this.cleanedUrl.equals(((UrlResource) other).cleanedUrl)));
	}

	/**
	 * This implementation returns the hash code of the underlying URL reference.
	 */
	/**
	 * 此实现返回基础URL引用的哈希码。 
	 * 
	 */
	@Override
	public int hashCode() {
		return this.cleanedUrl.hashCode();
	}

}
