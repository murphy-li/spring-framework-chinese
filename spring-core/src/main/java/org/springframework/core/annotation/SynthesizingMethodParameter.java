/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Executable;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;

import org.springframework.core.MethodParameter;

/**
 * A {@link MethodParameter} variant which synthesizes annotations that
 * declare attribute aliases via {@link AliasFor @AliasFor}.
 *
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 4.2
 * @see AnnotationUtils#synthesizeAnnotation
 * @see AnnotationUtils#synthesizeAnnotationArray
 */
/**
 * 一个{@link  MethodParameter}变体，用于合成通过{@link  AliasFor @AliasFor}声明属性别名的注释。 
 *  @author  Juergen Hoeller @author  Sam Brannen @4.2起
 * @see  AnnotationUtils＃synthesizeAnnotation 
 * @see  AnnotationUtils＃synthesizeAnnotationArray
 */
public class SynthesizingMethodParameter extends MethodParameter {

	/**
	 * Create a new {@code SynthesizingMethodParameter} for the given method,
	 * with nesting level 1.
	 * @param method the Method to specify a parameter for
	 * @param parameterIndex the index of the parameter: -1 for the method
	 * return type; 0 for the first method parameter; 1 for the second method
	 * parameter, etc.
	 */
	/**
	 * 为给定方法创建一个新的{@code  SynthesizingMethodParameter}，嵌套级别为1。 
	 * 
	 * @param 方法为
	 * @param 参数指定参数的方法parameterIndex参数的索引：-1用于方法返回类型;第一个方法参数为0； 
	 * 第二个方法参数为1，依此类推。 
	 * 
	 */
	public SynthesizingMethodParameter(Method method, int parameterIndex) {
		super(method, parameterIndex);
	}

	/**
	 * Create a new {@code SynthesizingMethodParameter} for the given method.
	 * @param method the Method to specify a parameter for
	 * @param parameterIndex the index of the parameter: -1 for the method
	 * return type; 0 for the first method parameter; 1 for the second method
	 * parameter, etc.
	 * @param nestingLevel the nesting level of the target type
	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the
	 * nested List, whereas 2 would indicate the element of the nested List)
	 */
	/**
	 * 为给定方法创建一个新的{@code  SynthesizingMethodParameter}。 
	 *  
	 * @param 方法为
	 * @param 参数指定参数的方法parameterIndex参数的索引：-1为方法返回类型； 
	 * 第一个方法参数为0； 
	 *  1，表示第二个方法参数，以此类推。 
	 * 
	 * @param  nestingLevel目标类型的嵌套级别（通常为1； 
	 * 例如，在列表列表的情况下，1表示嵌套的List，而2表示嵌套的元素清单）
	 */
	public SynthesizingMethodParameter(Method method, int parameterIndex, int nestingLevel) {
		super(method, parameterIndex, nestingLevel);
	}

	/**
	 * Create a new {@code SynthesizingMethodParameter} for the given constructor,
	 * with nesting level 1.
	 * @param constructor the Constructor to specify a parameter for
	 * @param parameterIndex the index of the parameter
	 */
	/**
	 * 为具有嵌套级别1的给定构造函数创建一个新的{@code  SynthesizingMethodParameter}。 
	 * 
	 * @param 构造函数构造函数为
	 * @param  parameterIndex指定一个参数
	 */
	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex) {
		super(constructor, parameterIndex);
	}

	/**
	 * Create a new {@code SynthesizingMethodParameter} for the given constructor.
	 * @param constructor the Constructor to specify a parameter for
	 * @param parameterIndex the index of the parameter
	 * @param nestingLevel the nesting level of the target type
	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the
	 * nested List, whereas 2 would indicate the element of the nested List)
	 */
	/**
	 * 为给定的构造函数创建一个新的{@code  SynthesizingMethodParameter}。 
	 *  
	 * @param 构造函数构造函数，用于为
	 * @param  parameterIndex指定参数
	 * @param 的索引nestingLevel目标类型的嵌套级别（通常为1； 
	 * 例如，如果是List of List，则1表示）嵌套列表，而2表示嵌套列表的元素）
	 */
	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex, int nestingLevel) {
		super(constructor, parameterIndex, nestingLevel);
	}

	/**
	 * Copy constructor, resulting in an independent {@code SynthesizingMethodParameter}
	 * based on the same metadata and cache state that the original object was in.
	 * @param original the original SynthesizingMethodParameter object to copy from
	 */
	/**
	 * 复制构造函数，根据与原始对象所处的元数据和缓存状态相同的结果，产生独立的{@code  SynthesizingMethodParameter}。 
	 * 
	 * @param 原始要复制的原始SynthesizingMethodParameter对象
	 */
	protected SynthesizingMethodParameter(SynthesizingMethodParameter original) {
		super(original);
	}


	@Override
	protected <A extends Annotation> A adaptAnnotation(A annotation) {
		return AnnotationUtils.synthesizeAnnotation(annotation, getAnnotatedElement());
	}

	@Override
	protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {
		return AnnotationUtils.synthesizeAnnotationArray(annotations, getAnnotatedElement());
	}

	@Override
	public SynthesizingMethodParameter clone() {
		return new SynthesizingMethodParameter(this);
	}


	/**
	 * Create a new SynthesizingMethodParameter for the given method or constructor.
	 * <p>This is a convenience factory method for scenarios where a
	 * Method or Constructor reference is treated in a generic fashion.
	 * @param executable the Method or Constructor to specify a parameter for
	 * @param parameterIndex the index of the parameter
	 * @return the corresponding SynthesizingMethodParameter instance
	 * @since 5.0
	 */
	/**
	 * 为给定的方法或构造函数创建一个新的SynthesizingMethodParameter。 
	 *  <p>这是一种便利工厂方法，适用于以通用方式处理"方法"或"构造函数"引用的情况。 
	 *  
	 * @param 可执行方法或构造方法，以为
	 * @param  parameterIndex指定参数。 
	 * 参数
	 * @return 的索引，相应的SynthesizingMethodParameter实例，自5.0起
	 */
	public static SynthesizingMethodParameter forExecutable(Executable executable, int parameterIndex) {
		if (executable instanceof Method) {
			return new SynthesizingMethodParameter((Method) executable, parameterIndex);
		}
		else if (executable instanceof Constructor) {
			return new SynthesizingMethodParameter((Constructor<?>) executable, parameterIndex);
		}
		else {
			throw new IllegalArgumentException("Not a Method/Constructor: " + executable);
		}
	}

	/**
	 * Create a new SynthesizingMethodParameter for the given parameter descriptor.
	 * <p>This is a convenience factory method for scenarios where a
	 * Java 8 {@link Parameter} descriptor is already available.
	 * @param parameter the parameter descriptor
	 * @return the corresponding SynthesizingMethodParameter instance
	 * @since 5.0
	 */
	/**
	 * 为给定的参数描述符创建一个新的SynthesizingMethodParameter。 
	 *  <p>这是一种便利工厂方法，用于Java 8 {@link 参数}描述符已可用的情况。 
	 *  
	 * @param 参数，参数描述符
	 * @return ，对应的SynthesizingMethodParameter实例@5.0
	 */
	public static SynthesizingMethodParameter forParameter(Parameter parameter) {
		return forExecutable(parameter.getDeclaringExecutable(), findParameterIndex(parameter));
	}

}
