/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.annotation;

import java.lang.annotation.Annotation;

import org.springframework.lang.Nullable;

/**
 * Callback interface used to process annotations.
 *
 * @param <C> the context type
 * @param <R> the result type
 * @author Phillip Webb
 * @since 5.2
 * @see AnnotationsScanner
 * @see TypeMappedAnnotations
 */
/**
 * 用于处理注释的回调接口。 
 *  
 * @param  <C>上下文类型
 * @param  <R>结果类型@author  Phillip Webb @since 5.2 
 * @see  AnnotationsScanner 
 * @see  TypeMappedAnnotations
 */
@FunctionalInterface
interface AnnotationsProcessor<C, R> {

	/**
	 * Called when an aggregate is about to be processed. This method may return
	 * a {@code non-null} result to short-circuit any further processing.
	 * @param context context information relevant to the processor
	 * @param aggregateIndex the aggregate index about to be processed
	 * @return a {@code non-null} result if no further processing is required
	 */
	/**
	 * 在将要处理聚合时调用。 
	 * 此方法可能返回{@code  non-null}结果以使任何进一步的处理短路。 
	 * 与处理器有关的
	 * @param 上下文上下文信息
	 * @param  aggregateIndex要处理的聚集索引
	 * @return  {@code 非null}结果（如果不需要进一步处理）
	 */
	@Nullable
	default R doWithAggregate(C context, int aggregateIndex) {
		return null;
	}

	/**
	 * Called when an array of annotations can be processed. This method may
	 * return a {@code non-null} result to short-circuit any further processing.
	 * @param context context information relevant to the processor
	 * @param aggregateIndex the aggregate index of the provided annotations
	 * @param source the original source of the annotations, if known
	 * @param annotations the annotations to process (this array may contain
	 * {@code null} elements)
	 * @return a {@code non-null} result if no further processing is required
	 */
	/**
	 * 在可以处理注释数组时调用。 
	 * 此方法可能返回{@code  non-null}结果以使任何进一步的处理短路。 
	 * 与处理器相关的
	 * @param 上下文上下文信息
	 * @param  aggregateIndex提供的注释的聚集索引
	 * @param 源注释的原始来源，如果已知要处理的注释
	 * @param 注释（此数组可以如果不需要进一步处理，则包含{@code  null}个元素）
	 * @return 一个{@code  non-null}结果
	 */
	@Nullable
	R doWithAnnotations(C context, int aggregateIndex, @Nullable Object source, Annotation[] annotations);

	/**
	 * Get the final result to be returned. By default this method returns
	 * the last process result.
	 * @param result the last early exit result, or {@code null} if none
	 * @return the final result to be returned to the caller
	 */
	/**
	 * 获取要返回的最终结果。 
	 * 默认情况下，此方法返回最后的处理结果。 
	 *  
	 * @param 结果最后的提前退出结果； 
	 * 如果没有，则返回{@code  null} 
	 * @return 返回给调用者的最终结果
	 */
	@Nullable
	default R finish(@Nullable R result) {
		return result;
	}

}
