/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.style;

import org.springframework.lang.Nullable;

/**
 * A strategy interface for pretty-printing {@code toString()} methods.
 * Encapsulates the print algorithms; some other object such as a builder
 * should provide the workflow.
 *
 * @author Keith Donald
 * @since 1.2.2
 */
/**
 * 用于漂亮打印{@code  toString（）}方法的策略接口。 
 * 封装打印算法； 
 * 其他一些对象（例如构建器）应提供工作流程。 
 *  @author 基思·唐纳德@1.2.2起
 */
public interface ToStringStyler {

	/**
	 * Style a {@code toString()}'ed object before its fields are styled.
	 * @param buffer the buffer to print to
	 * @param obj the object to style
	 */
	/**
	 * 在设置其字段的样式之前，先对{@code  toString（）}的对象进行样式设置。 
	 *  
	 * @param 缓冲区缓冲区以打印到
	 * @param  obj要样式的对象
	 */
	void styleStart(StringBuilder buffer, Object obj);

	/**
	 * Style a {@code toString()}'ed object after it's fields are styled.
	 * @param buffer the buffer to print to
	 * @param obj the object to style
	 */
	/**
	 * 在对字段进行样式设置后，对{@code  toString（）}的对象进行样式设置。 
	 *  
	 * @param 缓冲区缓冲区以打印到
	 * @param  obj要样式的对象
	 */
	void styleEnd(StringBuilder buffer, Object obj);

	/**
	 * Style a field value as a string.
	 * @param buffer the buffer to print to
	 * @param fieldName the he name of the field
	 * @param value the field value
	 */
	/**
	 * 将字段值设置为字符串样式。 
	 *  
	 * @param 缓冲区缓冲区以打印到
	 * @param  fieldName字段名称
	 * @param 值字段值
	 */
	void styleField(StringBuilder buffer, String fieldName, @Nullable Object value);

	/**
	 * Style the given value.
	 * @param buffer the buffer to print to
	 * @param value the field value
	 */
	/**
	 * 设置给定值的样式。 
	 *  
	 * @param 缓冲区将缓冲区打印为
	 * @param 值的字段值
	 */
	void styleValue(StringBuilder buffer, Object value);

	/**
	 * Style the field separator.
	 * @param buffer buffer to print to
	 */
	/**
	 * 设置字段分隔符的样式。 
	 *  
	 * @param 缓冲区打印缓冲区
	 */
	void styleFieldSeparator(StringBuilder buffer);

}
