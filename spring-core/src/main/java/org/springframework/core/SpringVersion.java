/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core;

import org.springframework.lang.Nullable;

/**
 * Class that exposes the Spring version. Fetches the
 * "Implementation-Version" manifest attribute from the jar file.
 *
 * <p>Note that some ClassLoaders do not expose the package metadata,
 * hence this class might not be able to determine the Spring version
 * in all environments. Consider using a reflection-based check instead &mdash;
 * for example, checking for the presence of a specific Spring 5.2
 * method that you intend to call.
 *
 * @author Juergen Hoeller
 * @since 1.1
 */
/**
 * 公开Spring版本的类。 
 * 从jar文件中获取"实现版本"清单属性。 
 *  <p>请注意，某些ClassLoader不会公开包元数据，因此此类可能无法在所有环境中确定Spring版本。 
 * 考虑改用基于反射的检查-例如，检查要调用的特定Spring 5.2方法的存在。 
 *  @author  Juergen Hoeller @始于1.1
 */
public final class SpringVersion {

	private SpringVersion() {
	}


	/**
	 * Return the full version string of the present Spring codebase,
	 * or {@code null} if it cannot be determined.
	 * @see Package#getImplementationVersion()
	 */
	/**
	 * 返回当前Spring代码库的完整版本字符串，如果无法确定，则返回{@code  null}。 
	 *  
	 * @see  Package＃getImplementationVersion（）
	 */
	@Nullable
	public static String getVersion() {
		Package pkg = SpringVersion.class.getPackage();
		return (pkg != null ? pkg.getImplementationVersion() : null);
	}

}
