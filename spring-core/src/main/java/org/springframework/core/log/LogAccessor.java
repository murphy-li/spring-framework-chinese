/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.log;

import java.util.function.Supplier;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * A convenient accessor for Commons Logging, providing not only
 * {@code CharSequence} based log methods but also {@code Supplier}
 * based variants for use with Java 8 lambda expressions.
 *
 * @author Juergen Hoeller
 * @since 5.2
 */
/**
 * Commons Logging的便捷访问器，不仅提供基于{@code  CharSequence}的日志方法，而且还提供了与Java 8 lambda表达式一起使用的基于{@code  Supplier}的变体。 
 *  @author  Juergen Hoeller @从5.2开始
 */
public class LogAccessor {

	private final Log log;


	/**
	 * Create a new accessor for the given Commons Log.
	 * @see LogFactory#getLog(Class)
	 * @see LogFactory#getLog(String)
	 */
	/**
	 * 为给定的Commons Log创建一个新的访问器。 
	 *  
	 * @see  LogFactory＃getLog（类）
	 * @see  LogFactory＃getLog（字符串）
	 */
	public LogAccessor(Log log) {
		this.log = log;
	}

	/**
	 * Create a new accessor for the specified Commons Log category.
	 * @see LogFactory#getLog(Class)
	 */
	/**
	 * 为指定的Commons Log类别创建一个新的访问器。 
	 *  
	 * @see  LogFactory＃getLog（Class）
	 */
	public LogAccessor(Class<?> logCategory) {
		this.log = LogFactory.getLog(logCategory);
	}

	/**
	 * Create a new accessor for the specified Commons Log category.
	 * @see LogFactory#getLog(String)
	 */
	/**
	 * 为指定的Commons Log类别创建一个新的访问器。 
	 *  
	 * @see  LogFactory＃getLog（String）
	 */
	public LogAccessor(String logCategory) {
		this.log = LogFactory.getLog(logCategory);
	}


	/**
	 * Return the target Commons Log.
	 */
	/**
	 * 返回目标公共日志。 
	 * 
	 */
	public final Log getLog() {
		return this.log;
	}


	// Log level checks

	/**
	 * Is fatal logging currently enabled?
	 */
	/**
	 * 当前是否启用了致命日志记录？
	 */
	public boolean isFatalEnabled() {
		return this.log.isFatalEnabled();
	}

	/**
	 * Is error logging currently enabled?
	 */
	/**
	 * 当前是否启用错误日志记录？
	 */
	public boolean isErrorEnabled() {
		return this.log.isErrorEnabled();
	}

	/**
	 * Is warn logging currently enabled?
	 */
	/**
	 * 当前是否启用警告日志记录？
	 */
	public boolean isWarnEnabled() {
		return this.log.isWarnEnabled();
	}

	/**
	 * Is info logging currently enabled?
	 */
	/**
	 * 当前是否启用了信息记录？
	 */
	public boolean isInfoEnabled() {
		return this.log.isInfoEnabled();
	}

	/**
	 * Is debug logging currently enabled?
	 */
	/**
	 * 当前是否启用了调试日志记录？
	 */
	public boolean isDebugEnabled() {
		return this.log.isDebugEnabled();
	}

	/**
	 * Is trace logging currently enabled?
	 */
	/**
	 * 当前是否启用了跟踪日志记录？
	 */
	public boolean isTraceEnabled() {
		return this.log.isTraceEnabled();
	}


	// Plain log methods

	/**
	 * Log a message with fatal log level.
	 * @param message the message to log
	 */
	/**
	 * 使用致命日志级别记录消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void fatal(CharSequence message) {
		this.log.fatal(message);
	}

	/**
	 * Log an error with fatal log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用致命日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void fatal(Throwable cause, CharSequence message) {
		this.log.fatal(message, cause);
	}

	/**
	 * Log a message with error log level.
	 * @param message the message to log
	 */
	/**
	 * 用错误日志级别记录一条消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void error(CharSequence message) {
		this.log.error(message);
	}

	/**
	 * Log an error with error log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用错误日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void error(Throwable cause, CharSequence message) {
		this.log.error(message, cause);
	}

	/**
	 * Log a message with warn log level.
	 * @param message the message to log
	 */
	/**
	 * 使用警告日志级别记录消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void warn(CharSequence message) {
		this.log.warn(message);
	}

	/**
	 * Log an error with warn log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用警告日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void warn(Throwable cause, CharSequence message) {
		this.log.warn(message, cause);
	}

	/**
	 * Log a message with info log level.
	 * @param message the message to log
	 */
	/**
	 * 使用信息日志级别记录消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void info(CharSequence message) {
		this.log.info(message);
	}

	/**
	 * Log an error with info log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用信息日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void info(Throwable cause, CharSequence message) {
		this.log.info(message, cause);
	}

	/**
	 * Log a message with debug log level.
	 * @param message the message to log
	 */
	/**
	 * 使用调试日志级别记录消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void debug(CharSequence message) {
		this.log.debug(message);
	}

	/**
	 * Log an error with debug log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用调试日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void debug(Throwable cause, CharSequence message) {
		this.log.debug(message, cause);
	}

	/**
	 * Log a message with trace log level.
	 * @param message the message to log
	 */
	/**
	 * 使用跟踪日志级别记录消息。 
	 *  
	 * @param 消息要记录的消息
	 */
	public void trace(CharSequence message) {
		this.log.trace(message);
	}

	/**
	 * Log an error with trace log level.
	 * @param cause the exception to log
	 * @param message the message to log
	 */
	/**
	 * 使用跟踪日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param 消息记录消息
	 */
	public void trace(Throwable cause, CharSequence message) {
		this.log.trace(message, cause);
	}


	// Supplier-based log methods

	/**
	 * Log a message with fatal log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用致命日志级别记录消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void fatal(Supplier<? extends CharSequence> messageSupplier) {
		this.log.fatal(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with fatal log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用致命日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void fatal(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.fatal(LogMessage.of(messageSupplier), cause);
	}

	/**
	 * Log a message with error log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 用错误日志级别记录一条消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void error(Supplier<? extends CharSequence> messageSupplier) {
		this.log.error(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with error log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用错误日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void error(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.error(LogMessage.of(messageSupplier), cause);
	}

	/**
	 * Log a message with warn log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用警告日志级别记录消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void warn(Supplier<? extends CharSequence> messageSupplier) {
		this.log.warn(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with warn log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用警告日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void warn(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.warn(LogMessage.of(messageSupplier), cause);
	}

	/**
	 * Log a message with info log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用信息日志级别记录消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void info(Supplier<? extends CharSequence> messageSupplier) {
		this.log.info(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with info log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用信息日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void info(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.info(LogMessage.of(messageSupplier), cause);
	}

	/**
	 * Log a message with debug log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用调试日志级别记录消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void debug(Supplier<? extends CharSequence> messageSupplier) {
		this.log.debug(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with debug log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用调试日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void debug(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.debug(LogMessage.of(messageSupplier), cause);
	}

	/**
	 * Log a message with trace log level.
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用跟踪日志级别记录消息。 
	 *  
	 * @param  message向消息的懒惰供应商提供消息
	 */
	public void trace(Supplier<? extends CharSequence> messageSupplier) {
		this.log.trace(LogMessage.of(messageSupplier));
	}

	/**
	 * Log an error with trace log level.
	 * @param cause the exception to log
	 * @param messageSupplier a lazy supplier for the message to log
	 */
	/**
	 * 使用跟踪日志级别记录错误。 
	 *  
	 * @param 导致异常记录
	 * @param  message为消息懒惰的供应商提供消息
	 */
	public void trace(Throwable cause, Supplier<? extends CharSequence> messageSupplier) {
		this.log.trace(LogMessage.of(messageSupplier), cause);
	}

}
