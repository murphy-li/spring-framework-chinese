/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.log;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Factory for common {@link Log} delegates with Spring's logging conventions.
 *
 * <p>Mainly for internal use within the framework with Apache Commons Logging,
 * typically in the form of the {@code spring-jcl} bridge but also compatible
 * with other Commons Logging bridges.
 *
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @since 5.1
 * @see org.apache.commons.logging.LogFactory
 */
/**
 * 使用Spring的日志记录约定的常见{@link  Log}委托的工厂。 
 *  <p>主要供Apache Commons Logging用在框架内部，通常以{@code  spring-jcl}桥的形式使用，但也与其他Commons Logging桥兼容。 
 *  @author  Rossen Stoyanchev @author  Juergen Hoeller @自5.1起
 * @see  org.apache.commons.logging.LogFactory
 */
public final class LogDelegateFactory {

	private LogDelegateFactory() {
	}


	/**
	 * Create a composite logger that delegates to a primary or falls back on a
	 * secondary logger if logging for the primary logger is not enabled.
	 * <p>This may be used for fallback logging from lower-level packages that
	 * logically should log together with some higher-level package but the two
	 * don't happen to share a suitable parent package (e.g. logging for the web
	 * and lower-level http and codec packages). For such cases the primary
	 * (class-based) logger can be wrapped with a shared fallback logger.
	 * @param primaryLogger primary logger to try first
	 * @param secondaryLogger secondary logger
	 * @param tertiaryLoggers optional vararg of further fallback loggers
	 * @return the resulting composite logger for the related categories
	 */
	/**
	 * 如果未启用主记录器的日志记录，则创建一个委托给主记录器或回退到辅助记录器的复合记录器。 
	 *  <p>这可用于从较低级别的软件包进行回退日志记录，这些日志在逻辑上应与一些较高级别的软件包一起记录，但两者不会共享适当的父软件包（例如，Web和较低级别的http的日志记录）和编解码器软件包）。 
	 * 在这种情况下，可以将主（基于类）记录器与共享的备用记录器一起包装。 
	 *  
	 * @param  primaryLogger主记录器首先尝试
	 * @param  secondaryLogger次要记录器
	 * @param  tertiaryLoggers其他后备记录器的可选vararg 
	 * @return 相关类别的结果复合记录器
	 */
	public static Log getCompositeLog(Log primaryLogger, Log secondaryLogger, Log... tertiaryLoggers) {
		List<Log> loggers = new ArrayList<>(2 + tertiaryLoggers.length);
		loggers.add(primaryLogger);
		loggers.add(secondaryLogger);
		Collections.addAll(loggers, tertiaryLoggers);
		return new CompositeLog(loggers);
	}

	/**
	 * Create a "hidden" logger whose name is intentionally prefixed with "_"
	 * because its output is either too verbose or otherwise deemed as optional
	 * or unnecessary to see at any log level by default under the normal package
	 * based log hierarchy.
	 * @param clazz the class for which to create a logger
	 * @return a logger for the hidden category ("_" + fully-qualified class name)
	 */
	/**
	 * 创建一个"隐藏"记录器，其名称特意以"_"为前缀，因为默认情况下，在基于常规软件包的日志层次结构下，其输出要么太冗长，要么被视为可选的或不必要的，以至于无法在任何日志级别查看。 
	 *  
	 * @param 帮忙为其创建记录器的类
	 * @return 隐藏类别的记录器（"_"+完全限定的类名）
	 */
	public static Log getHiddenLog(Class<?> clazz) {
		return LogFactory.getLog("_" + clazz.getName());
	}

}
