/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core;

/**
 * Interface to be implemented by decorating proxies, in particular Spring AOP
 * proxies but potentially also custom proxies with decorator semantics.
 *
 * <p>Note that this interface should just be implemented if the decorated class
 * is not within the hierarchy of the proxy class to begin with. In particular,
 * a "target-class" proxy such as a Spring AOP CGLIB proxy should not implement
 * it since any lookup on the target class can simply be performed on the proxy
 * class there anyway.
 *
 * <p>Defined in the core module in order to allow
 * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator}
 * (and potential other candidates without spring-aop dependencies) to use it
 * for introspection purposes, in particular annotation lookups.
 *
 * @author Juergen Hoeller
 * @since 4.3
 */
/**
 * 通过装饰代理（尤其是Spring AOP代理）实现的接口，但也可能具有装饰器语义的自定义代理。 
 *  <p>请注意，如果装饰的类不在代理类的层次结构之内，则应仅实现此接口。 
 * 特别是，诸如Spring AOP CGLIB代理之类的"目标类"代理不应该实现它，因为无论如何都可以在该代理类上简单地对目标类进行任何查找。 
 *  <p>在核心模块中定义，以便允许{@link  org.springframework.core.annotation.AnnotationAwareOrderComparator}（以及潜在的没有spring-aop依赖关系的其他候选项）将其用于自省，尤其是注释查找。 
 *  @author  Juergen Hoeller @从4.3开始
 */
public interface DecoratingProxy {

	/**
	 * Return the (ultimate) decorated class behind this proxy.
	 * <p>In case of an AOP proxy, this will be the ultimate target class,
	 * not just the immediate target (in case of multiple nested proxies).
	 * @return the decorated class (never {@code null})
	 */
	/**
	 * 返回此代理后面的（最终）修饰类。 
	 *  <p>对于AOP代理，这将是最终目标类，而不仅仅是直接目标（在多个嵌套代理的情况下）。 
	 *  
	 * @return 装饰的类（绝不{<@@code> null}）
	 */
	Class<?> getDecoratedClass();

}
