/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core;

/**
 * {@code Ordered} is an interface that can be implemented by objects that
 * should be <em>orderable</em>, for example in a {@code Collection}.
 *
 * <p>The actual {@link #getOrder() order} can be interpreted as prioritization,
 * with the first object (with the lowest order value) having the highest
 * priority.
 *
 * <p>Note that there is also a <em>priority</em> marker for this interface:
 * {@link PriorityOrdered}. Consult the Javadoc for {@code PriorityOrdered} for
 * details on how {@code PriorityOrdered} objects are ordered relative to
 * <em>plain</em> {@link Ordered} objects.
 *
 * <p>Consult the Javadoc for {@link OrderComparator} for details on the
 * sort semantics for non-ordered objects.
 *
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 07.04.2003
 * @see PriorityOrdered
 * @see OrderComparator
 * @see org.springframework.core.annotation.Order
 * @see org.springframework.core.annotation.AnnotationAwareOrderComparator
 */
/**
 * {@code  Ordered}是一个接口，可以由应该<em> orderable </ em>的对象实现，例如，在{@code  Collection}中。 
 *  <p>实际的{@link  #getOrder（）顺序}可以解释为优先级，第一个对象（具有最小的顺序值）具有最高优先级。 
 *  <p>请注意，此接口还有一个<em> priority </ em>标记：{<@link> PriorityOrdered}。 
 * 有关{@code  PriorityOrdered}对象如何相对于<em> plain </ em> {@link  Ordered}对象排序的{@code  PriorityOrdered}对象的详细信息，请查阅Javadoc。 
 *  <p>请咨询{@link  OrderComparator}的Javadoc，以获取有关非排序对象的排序语义的详细信息。 
 *  @author  Juergen Hoeller @author  Sam Brannen @自07.04.2003 
 * @see  PriorityOrdered 
 * @see  OrderComparator 
 * @see  org.springframework.core.annotation.Order 
 * @see  org.springframework.core。 
 * 注解.AnnotationAwareOrderComparator
 */
public interface Ordered {

	/**
	 * Useful constant for the highest precedence value.
	 * @see java.lang.Integer#MIN_VALUE
	 */
	/**
	 * 最高优先级值的有用常数。 
	 *  
	 * @see  java.lang.Integer＃MIN_VALUE
	 */
	int HIGHEST_PRECEDENCE = Integer.MIN_VALUE;

	/**
	 * Useful constant for the lowest precedence value.
	 * @see java.lang.Integer#MAX_VALUE
	 */
	/**
	 * 最低优先级值的有用常数。 
	 *  
	 * @see  java.lang.Integer＃MAX_VALUE
	 */
	int LOWEST_PRECEDENCE = Integer.MAX_VALUE;


	/**
	 * Get the order value of this object.
	 * <p>Higher values are interpreted as lower priority. As a consequence,
	 * the object with the lowest value has the highest priority (somewhat
	 * analogous to Servlet {@code load-on-startup} values).
	 * <p>Same order values will result in arbitrary sort positions for the
	 * affected objects.
	 * @return the order value
	 * @see #HIGHEST_PRECEDENCE
	 * @see #LOWEST_PRECEDENCE
	 */
	/**
	 * 获取此对象的订单值。 
	 *  <p>较高的值将被解释为较低的优先级。 
	 * 结果，具有最低值的对象具有最高优先级（有点类似于Servlet {@code  load-on-startup}值）。 
	 *  <p>相同的顺序值将对受影响的对象产生任意的排序位置。 
	 *  <@返回>订单值
	 * @see  #HIGHEST_PRECEDENCE 
	 * @see  #LOWEST_PRECEDENCE
	 */
	int getOrder();

}
