/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core;

/**
 * Extension of the {@link Ordered} interface, expressing a <em>priority</em>
 * ordering: {@code PriorityOrdered} objects are always applied before
 * <em>plain</em> {@link Ordered} objects regardless of their order values.
 *
 * <p>When sorting a set of {@code Ordered} objects, {@code PriorityOrdered}
 * objects and <em>plain</em> {@code Ordered} objects are effectively treated as
 * two separate subsets, with the set of {@code PriorityOrdered} objects preceding
 * the set of <em>plain</em> {@code Ordered} objects and with relative
 * ordering applied within those subsets.
 *
 * <p>This is primarily a special-purpose interface, used within the framework
 * itself for objects where it is particularly important to recognize
 * <em>prioritized</em> objects first, potentially without even obtaining the
 * remaining objects. A typical example: prioritized post-processors in a Spring
 * {@link org.springframework.context.ApplicationContext}.
 *
 * <p>Note: {@code PriorityOrdered} post-processor beans are initialized in
 * a special phase, ahead of other post-processor beans. This subtly
 * affects their autowiring behavior: they will only be autowired against
 * beans which do not require eager initialization for type matching.
 *
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 2.5
 * @see org.springframework.beans.factory.config.PropertyOverrideConfigurer
 * @see org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
 */
/**
 * {@link  Ordered}接口的扩展，表示<em> priority </ em>排序：{@code  PriorityOrdered}对象始终在<em> plain </ em> {@link  Ordered之前应用}对象，无论其顺序值如何。 
 *  <p>在对一组{@code  Ordered}对象进行排序时，{<@code> PriorityOrdered}对象和<em> plain </ em> {@code  Ordered}对象被有效地视为两个单独的子集，在一组<em> plain </ em> {@code  Ordered}对象之前的一组{@code  PriorityOrdered}对象，并在这些子集中应用相对排序。 
 *  <p>这主要是一个专用接口，用于对象本身的框架内，在该对象中，首先识别<em>已优先处理的</ em>对象特别重要，甚至可能不获取其余对象。 
 * 一个典型的示例：在Spring {@link  org.springframework.context.ApplicationContext}中对后处理器进行优先级排序。 
 *  <p>注意：{@code  PriorityOrdered}后处理器Bean在特殊阶段中被初始化，先于其他后处理器Bean。 
 * 这巧妙地影响了它们的自动装配行为：它们将仅针对不需要为类型匹配而急切初始化的bean自动装配。 
 *  @author  Juergen Hoeller @author  Sam Brannen @since 2.5起
 * @see  org.springframework.beans.factory.config.PropertyOverrideConfigurer 
 * @see  org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
 */
public interface PriorityOrdered extends Ordered {
}
