/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core;

import org.springframework.lang.Nullable;

/**
 * Handy class for wrapping checked {@code Exceptions} with a root cause.
 *
 * <p>This class is {@code abstract} to force the programmer to extend
 * the class. {@code getMessage} will include nested exception
 * information; {@code printStackTrace} and other like methods will
 * delegate to the wrapped exception, if any.
 *
 * <p>The similarity between this class and the {@link NestedRuntimeException}
 * class is unavoidable, as Java forces these two classes to have different
 * superclasses (ah, the inflexibility of concrete inheritance!).
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see #getMessage
 * @see #printStackTrace
 * @see NestedRuntimeException
 */
/**
 * 方便的类，用于包装已检查的{@code 异常}有根本原因。 
 *  <p>此类是{@code  abstract}，用于强制程序员扩展该类。 
 *  {@code  getMessage}将包含嵌套的异常信息； 
 *  {@code  printStackTrace}和其他类似方法将委托给包装的异常（如果有）。 
 *  <p>该类与{@link  NestedRuntimeException}类之间的相似性是不可避免的，因为Java强制这两个类具有不同的超类（啊，具体继承的灵活性！ 
 * ）。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  #getMessage 
 * @see  #printStackTrace 
 * @see  NestedRuntimeException
 */
public abstract class NestedCheckedException extends Exception {

	/** Use serialVersionUID from Spring 1.2 for interoperability. */
	/**
	 * 使用Spring 1.2中的serialVersionUID来实现互操作性。 
	 * 
	 */
	private static final long serialVersionUID = 7100714597678207546L;

	static {
		// Eagerly load the NestedExceptionUtils class to avoid classloader deadlock
		// issues on OSGi when calling getMessage(). Reported by Don Brown; SPR-5607.
		NestedExceptionUtils.class.getName();
	}


	/**
	 * Construct a {@code NestedCheckedException} with the specified detail message.
	 * @param msg the detail message
	 */
	/**
	 * 使用指定的详细消息构造一个{@code  NestedCheckedException}。 
	 *  
	 * @param  msg详细信息
	 */
	public NestedCheckedException(String msg) {
		super(msg);
	}

	/**
	 * Construct a {@code NestedCheckedException} with the specified detail message
	 * and nested exception.
	 * @param msg the detail message
	 * @param cause the nested exception
	 */
	/**
	 * 使用指定的详细信息和嵌套异常构造一个{@code  NestedCheckedException}。 
	 *  
	 * @param  msg详细消息
	 * @param 导致嵌套异常
	 */
	public NestedCheckedException(@Nullable String msg, @Nullable Throwable cause) {
		super(msg, cause);
	}


	/**
	 * Return the detail message, including the message from the nested exception
	 * if there is one.
	 */
	/**
	 * 返回详细消息，包括嵌套异常中的消息（如果有）。 
	 * 
	 */
	@Override
	@Nullable
	public String getMessage() {
		return NestedExceptionUtils.buildMessage(super.getMessage(), getCause());
	}


	/**
	 * Retrieve the innermost cause of this exception, if any.
	 * @return the innermost exception, or {@code null} if none
	 */
	/**
	 * 检索此异常的最深层原因（如果有）。 
	 *  
	 * @return 最内层的异常，如果没有则为{@code  null}
	 */
	@Nullable
	public Throwable getRootCause() {
		return NestedExceptionUtils.getRootCause(this);
	}

	/**
	 * Retrieve the most specific cause of this exception, that is,
	 * either the innermost cause (root cause) or this exception itself.
	 * <p>Differs from {@link #getRootCause()} in that it falls back
	 * to the present exception if there is no root cause.
	 * @return the most specific cause (never {@code null})
	 * @since 2.0.3
	 */
	/**
	 * 检索此异常的最具体原因，即最内部的原因（根本原因）或此异常本身。 
	 *  <p>与{@link  #getRootCause（）}的不同之处在于，如果没有根本原因，它将回退到当前异常。 
	 *  
	 * @return 最具体的原因（从未{<@@code> null}）@2.0.3起
	 */
	public Throwable getMostSpecificCause() {
		Throwable rootCause = getRootCause();
		return (rootCause != null ? rootCause : this);
	}

	/**
	 * Check whether this exception contains an exception of the given type:
	 * either it is of the given class itself or it contains a nested cause
	 * of the given type.
	 * @param exType the exception type to look for
	 * @return whether there is a nested exception of the specified type
	 */
	/**
	 * 检查此异常是否包含给定类型的异常：它是给定类本身，还是包含给定类型的嵌套原因。 
	 *  
	 * @param  exType异常类型以查找
	 * @return 是否存在指定类型的嵌套异常
	 */
	public boolean contains(@Nullable Class<?> exType) {
		if (exType == null) {
			return false;
		}
		if (exType.isInstance(this)) {
			return true;
		}
		Throwable cause = getCause();
		if (cause == this) {
			return false;
		}
		if (cause instanceof NestedCheckedException) {
			return ((NestedCheckedException) cause).contains(exType);
		}
		else {
			while (cause != null) {
				if (exType.isInstance(cause)) {
					return true;
				}
				if (cause.getCause() == cause) {
					break;
				}
				cause = cause.getCause();
			}
			return false;
		}
	}

}
