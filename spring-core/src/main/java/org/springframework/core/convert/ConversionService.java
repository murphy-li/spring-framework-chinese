/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.convert;

import org.springframework.lang.Nullable;

/**
 * A service interface for type conversion. This is the entry point into the convert system.
 * Call {@link #convert(Object, Class)} to perform a thread-safe type conversion using this system.
 *
 * @author Keith Donald
 * @author Phillip Webb
 * @since 3.0
 */
/**
 * 用于类型转换的服务接口。 
 * 这是转换系统的入口。 
 * 调用{@link  #convert（Object，Class）}使用此系统执行线程安全的类型转换。 
 *  @author 基思·唐纳德@author 菲利普·韦伯@since 3.0
 */
public interface ConversionService {

	/**
	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.
	 * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable
	 * of converting an instance of {@code sourceType} to {@code targetType}.
	 * <p>Special note on collections, arrays, and maps types:
	 * For conversion between collection, array, and map types, this method will return {@code true}
	 * even though a convert invocation may still generate a {@link ConversionException} if the
	 * underlying elements are not convertible. Callers are expected to handle this exceptional case
	 * when working with collections and maps.
	 * @param sourceType the source type to convert from (may be {@code null} if source is {@code null})
	 * @param targetType the target type to convert to (required)
	 * @return {@code true} if a conversion can be performed, {@code false} if not
	 * @throws IllegalArgumentException if {@code targetType} is {@code null}
	 */
	/**
	 * 如果{@code  sourceType}的对象可以转换为{@code  targetType}，则返回{@code  true}。 
	 *  <p>如果此方法返回{@code  true}，则表示{@link  #convert（Object，Class）}能够将{@code  sourceType}的实例转换为{@code  targetType}。 
	 *  <p>关于集合，数组和映射类型的特别说明：对于集合，数组和映射类型之间的转换，即使转换调用可能仍会生成{@link ，此方法仍将返回{@code  true}如果基础元素不可转换。 
	 * 调用者在处理集合和地图时应处理这种特殊情况。 
	 *  
	 * @param  sourceType要转换的源类型（如果source为{@code  null}，则可以为{@code  null}）
	 * @param  targetType要转换为的目标类型（必需）
	 * @return 如果可以执行转换，则为{@code  true}； 
	 * 如果不能，则为{@code  false}； 
	 * 如果{@code  targetType}为{@code  null}，则为
	 * @throws  IllegalArgumentException
	 */
	boolean canConvert(@Nullable Class<?> sourceType, Class<?> targetType);

	/**
	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}.
	 * The TypeDescriptors provide additional context about the source and target locations
	 * where conversion would occur, often object fields or property locations.
	 * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}
	 * is capable of converting an instance of {@code sourceType} to {@code targetType}.
	 * <p>Special note on collections, arrays, and maps types:
	 * For conversion between collection, array, and map types, this method will return {@code true}
	 * even though a convert invocation may still generate a {@link ConversionException} if the
	 * underlying elements are not convertible. Callers are expected to handle this exceptional case
	 * when working with collections and maps.
	 * @param sourceType context about the source type to convert from
	 * (may be {@code null} if source is {@code null})
	 * @param targetType context about the target type to convert to (required)
	 * @return {@code true} if a conversion can be performed between the source and target types,
	 * {@code false} if not
	 * @throws IllegalArgumentException if {@code targetType} is {@code null}
	 */
	/**
	 * 如果{@code  sourceType}的对象可以转换为{@code  targetType}，则返回{@code  true}。 
	 *  TypeDescriptor提供有关发生转换的源位置和目标位置（通常是对象字段或属性位置）的其他上下文。 
	 *  <p>如果此方法返回{@code  true}，则意味着{@link  #convert（Object，TypeDescriptor，TypeDescriptor）}能够将{@code  sourceType}的实例转换为{<@代码> targetType}。 
	 *  <p>关于集合，数组和映射类型的特别说明：对于集合，数组和映射类型之间的转换，即使转换调用可能仍会生成{@link ，此方法仍将返回{@code  true}如果基础元素不可转换。 
	 * 调用者在处理集合和地图时应处理这种特殊情况。 
	 *  
	 * @param 关于要转换的源类型的sourceType上下文（如果source是{@code  null}，则可以是{<@@code> null}）
	 * @param 关于要转换的目标类型的targetType上下文（必需） 
	 * @return  {@code  true}（如果可以在源类型和目标类型之间执行转换），{<@code> false}（如果不能）
	 * @throws  IllegalArgumentException如果{@code  targetType}为{<@代码> null}
	 */
	boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType);

	/**
	 * Convert the given {@code source} to the specified {@code targetType}.
	 * @param source the source object to convert (may be {@code null})
	 * @param targetType the target type to convert to (required)
	 * @return the converted object, an instance of targetType
	 * @throws ConversionException if a conversion exception occurred
	 * @throws IllegalArgumentException if targetType is {@code null}
	 */
	/**
	 * 将给定的{@code 源}转换为指定的{@code  targetType}。 
	 *  
	 * @param 源要转换的源对象（可以为{@code  null}）
	 * @param  targetType要转换为（必需）的目标类型
	 * @return 转换后的对象，targetType的实例<
	 * @throws > ConversionException如果发生转换异常
	 * @throws  IllegalArgumentException如果targetType为{@code  null}
	 */
	@Nullable
	<T> T convert(@Nullable Object source, Class<T> targetType);

	/**
	 * Convert the given {@code source} to the specified {@code targetType}.
	 * The TypeDescriptors provide additional context about the source and target locations
	 * where conversion will occur, often object fields or property locations.
	 * @param source the source object to convert (may be {@code null})
	 * @param sourceType context about the source type to convert from
	 * (may be {@code null} if source is {@code null})
	 * @param targetType context about the target type to convert to (required)
	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}
	 * @throws ConversionException if a conversion exception occurred
	 * @throws IllegalArgumentException if targetType is {@code null},
	 * or {@code sourceType} is {@code null} but source is not {@code null}
	 */
	/**
	 * 将给定的{@code 源}转换为指定的{@code  targetType}。 
	 *  TypeDescriptor提供有关发生转换的源位置和目标位置（通常是对象字段或属性位置）的其他上下文。 
	 *  
	 * @param  source要转换的源对象（可以为{@code  null}）
	 * @param  sourceType关于要转换的源类型的上下文（可以为{@code  null}（如果source为{<@代码> null}）
	 * @param 要转换为目标类型的目标类型上下文（必需）
	 * @return 转换后的对象，{<@link> TypeDescriptor＃getObjectType（）targetType} 
	 * @throws  ConversionException的实例如果targetType为{@code  null}或{@code  sourceType}为{@code  null}但源不是{@code  null}，则发生转换异常
	 * @throws  IllegalArgumentException
	 */
	@Nullable
	Object convert(@Nullable Object source, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType);

}
