/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.convert.converter;

/**
 * For registering converters with a type conversion system.
 *
 * @author Keith Donald
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 用于在类型转换系统中注册转换器。 
 *  @author 基思·唐纳德@author  Juergen Hoeller @从3.0开始
 */
public interface ConverterRegistry {

	/**
	 * Add a plain converter to this registry.
	 * The convertible source/target type pair is derived from the Converter's parameterized types.
	 * @throws IllegalArgumentException if the parameterized types could not be resolved
	 */
	/**
	 * 将纯转换器添加到此注册表。 
	 * 可转换源/目标类型对是从Converter的参数化类型派生的。 
	 *  
	 * @throws  IllegalArgumentException如果无法解析参数化类型
	 */
	void addConverter(Converter<?, ?> converter);

	/**
	 * Add a plain converter to this registry.
	 * The convertible source/target type pair is specified explicitly.
	 * <p>Allows for a Converter to be reused for multiple distinct pairs without
	 * having to create a Converter class for each pair.
	 * @since 3.1
	 */
	/**
	 * 将纯转换器添加到此注册表。 
	 * 可转换源/目标类型对已明确指定。 
	 *  <p>允许将Converter重复用于多个不同的对，而不必为每个对创建Converter类。 
	 *  @3.1起
	 */
	<S, T> void addConverter(Class<S> sourceType, Class<T> targetType, Converter<? super S, ? extends T> converter);

	/**
	 * Add a generic converter to this registry.
	 */
	/**
	 * 将通用转换器添加到此注册表。 
	 * 
	 */
	void addConverter(GenericConverter converter);

	/**
	 * Add a ranged converter factory to this registry.
	 * The convertible source/target type pair is derived from the ConverterFactory's parameterized types.
	 * @throws IllegalArgumentException if the parameterized types could not be resolved
	 */
	/**
	 * 将远程转换器工厂添加到此注册表。 
	 * 可转换源/目标类型对是从ConverterFactory的参数化类型派生的。 
	 *  
	 * @throws  IllegalArgumentException如果无法解析参数化类型
	 */
	void addConverterFactory(ConverterFactory<?, ?> factory);

	/**
	 * Remove any converters from {@code sourceType} to {@code targetType}.
	 * @param sourceType the source type
	 * @param targetType the target type
	 */
	/**
	 * 从{@code  sourceType}到{@code  targetType}删除所有转换器。 
	 *  
	 * @param  sourceType源类型
	 * @param  targetType目标类型
	 */
	void removeConvertible(Class<?> sourceType, Class<?> targetType);

}
