/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.testfixture.io.buffer;

import org.junit.jupiter.api.AfterEach;

import org.springframework.core.io.buffer.DataBufferFactory;

/**
 * Abstract base class for unit tests that allocate data buffers via a {@link DataBufferFactory}.
 * After each unit test, this base class checks whether all created buffers have been released,
 * throwing an {@link AssertionError} if not.
 *
 * @author Arjen Poutsma
 * @since 5.1.3
 * @see LeakAwareDataBufferFactory
 */
/**
 * 单元测试的抽象基类，该类通过{@link  DataBufferFactory}分配数据缓冲区。 
 * 每次单元测试后，此基类都会检查是否已释放所有创建的缓冲区，如果没有，则抛出{@link  AssertionError}。 
 *  @author  Arjen Poutsma @从5.1.3起
 * @see  LeakAwareDataBufferFactory
 */
public abstract class AbstractLeakCheckingTests {

	/**
	 * The data buffer factory.
	 */
	/**
	 * 数据缓冲区工厂。 
	 * 
	 */
	protected final LeakAwareDataBufferFactory bufferFactory = new LeakAwareDataBufferFactory();

	/**
	 * Checks whether any of the data buffers created by {@link #bufferFactory} have not been
	 * released, throwing an assertion error if so.
	 */
	/**
	 * 检查是否没有释放由{@link  #bufferFactory}创建的任何数据缓冲区，如果存在则抛出断言错误。 
	 * 
	 */
	@AfterEach
	final void checkForLeaks() {
		this.bufferFactory.checkForLeaks();
	}

}
