/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.testfixture;

import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;

import org.springframework.util.StringUtils;

import static java.lang.String.format;

/**
 * A test group used to limit when certain tests are run.
 *
 * @see EnabledForTestGroups @EnabledForTestGroups
 * @author Phillip Webb
 * @author Chris Beams
 * @author Sam Brannen
 */
/**
 * 一个测试组，用于限制某些测试的运行时间。 
 *  
 * @see  EnabledForTestGroups @EnabledForTestGroups @author 菲利普·韦伯（Phillip Webb）@author 克里斯·比姆斯（Chris Beams）@author  Sam Brannen
 */
public enum TestGroup {

	/**
	 * Tests that take a considerable amount of time to run. Any test lasting longer than
	 * 500ms should be considered a candidate in order to avoid making the overall test
	 * suite too slow to run during the normal development cycle.
	 */
	/**
	 * 测试需要花费大量时间才能运行。 
	 * 任何持续时间超过500ms的测试都应视为候选对象，以免使整个测试套件在正常的开发周期中运行太慢。 
	 * 
	 */
	LONG_RUNNING,

	/**
	 * Performance-related tests that may fail unpredictably based on CPU profile and load.
	 * Any test using {@link Thread#sleep}, {@link Object#wait}, Spring's
	 * {@code StopWatch}, etc. should be considered a candidate as their successful
	 * execution is likely to be based on events occurring within a given time window.
	 */
	/**
	 * 与性能相关的测试可能会根据CPU配置文件和负载而意外失败。 
	 * 使用{@link  Thread＃sleep}，{<@link> Object＃wait}，Spring的{@code  StopWatch}等进行的任何测试均应视为候选，因为它们的成功执行可能基于事件在给定的时间范围内发生。 
	 * 
	 */
	PERFORMANCE;


	/**
	 * Determine if this {@link TestGroup} is active.
	 * @since 5.2
	 */
	/**
	 * 确定此{@link  TestGroup}是否处于活动状态。 
	 *  @5.2起
	 */
	public boolean isActive() {
		return loadTestGroups().contains(this);
	}


	private static final String TEST_GROUPS_SYSTEM_PROPERTY = "testGroups";

	/**
	 * Load test groups dynamically instead of during static initialization in
	 * order to avoid a {@link NoClassDefFoundError} being thrown while attempting
	 * to load collaborator classes.
	 */
	/**
	 * 动态加载测试组，而不是在静态初始化期间加载，以避免在尝试加载协作器类时抛出{@link  NoClassDefFoundError}。 
	 * 
	 */
	static Set<TestGroup> loadTestGroups() {
		try {
			return TestGroup.parse(System.getProperty(TEST_GROUPS_SYSTEM_PROPERTY));
		}
		catch (Exception ex) {
			throw new IllegalStateException("Failed to parse '" + TEST_GROUPS_SYSTEM_PROPERTY +
					"' system property: " + ex.getMessage(), ex);
		}
	}

	/**
	 * Parse the specified comma separated string of groups.
	 * @param value the comma separated string of groups
	 * @return a set of groups
	 * @throws IllegalArgumentException if any specified group name is not a
	 * valid {@link TestGroup}
	 */
	/**
	 * 解析指定的逗号分隔的组字符串。 
	 *  
	 * @param 值，用逗号分隔的组字符串
	 * @return 一组组
	 * @throws  IllegalArgumentException，如果任何指定的组名不是有效的{@link  TestGroup}
	 */
	static Set<TestGroup> parse(String value) throws IllegalArgumentException {
		if (!StringUtils.hasText(value)) {
			return Collections.emptySet();
		}
		String originalValue = value;
		value = value.trim();
		if ("ALL".equalsIgnoreCase(value)) {
			return EnumSet.allOf(TestGroup.class);
		}
		if (value.toUpperCase().startsWith("ALL-")) {
			Set<TestGroup> groups = EnumSet.allOf(TestGroup.class);
			groups.removeAll(parseGroups(originalValue, value.substring(4)));
			return groups;
		}
		return parseGroups(originalValue, value);
	}

	private static Set<TestGroup> parseGroups(String originalValue, String value) throws IllegalArgumentException {
		Set<TestGroup> groups = new HashSet<>();
		for (String group : value.split(",")) {
			try {
				groups.add(valueOf(group.trim().toUpperCase()));
			}
			catch (IllegalArgumentException ex) {
				throw new IllegalArgumentException(format(
						"Unable to find test group '%s' when parsing testGroups value: '%s'. " +
						"Available groups include: [%s]", group.trim(), originalValue,
						StringUtils.arrayToCommaDelimitedString(TestGroup.values())));
			}
		}
		return groups;
	}

}
