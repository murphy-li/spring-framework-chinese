/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.core.testfixture.env;

import java.util.Properties;

import org.springframework.core.env.PropertiesPropertySource;
import org.springframework.core.env.PropertySource;

/**
 * Simple {@link PropertySource} implementation for use in testing. Accepts
 * a user-provided {@link Properties} object, or if omitted during construction,
 * the implementation will initialize its own.
 *
 * The {@link #setProperty} and {@link #withProperty} methods are exposed for
 * convenience, for example:
 * <pre>
 * {@code
 *   PropertySource<?> source = new MockPropertySource().withProperty("foo", "bar");
 * }
 * </pre>
 *
 * @author Chris Beams
 * @since 3.1
 * @see org.springframework.mock.env.MockEnvironment
 */
/**
 * 用于测试的简单{@link  PropertySource}实现。 
 * 接受用户提供的{@link  Properties}对象，或者如果在构造过程中省略了该对象，则实现将初始化其自己的对象。 
 * 为了方便起见，公开了{@link  #setProperty}和{@link  #withProperty}方法，例如：<pre> {@code  PropertySource <？> source = new MockPropertySource（）。 
 * withProperty（"foo "，"bar"）; } </ pre> @author  Chris Beams @since 3.1 
 * @see  org.springframework.mock.env.MockEnvironment
 */
public class MockPropertySource extends PropertiesPropertySource {

	/**
	 * {@value} is the default name for {@link MockPropertySource} instances not
	 * otherwise given an explicit name.
	 * @see #MockPropertySource()
	 * @see #MockPropertySource(String)
	 */
	/**
	 * {@value}是{@link  MockPropertySource}实例的默认名称，否则未指定显式名称。 
	 *  
	 * @see  #MockPropertySource（）
	 * @see  #MockPropertySource（字符串）
	 */
	public static final String MOCK_PROPERTIES_PROPERTY_SOURCE_NAME = "mockProperties";


	/**
	 * Create a new {@code MockPropertySource} named {@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME}
	 * that will maintain its own internal {@link Properties} instance.
	 */
	/**
	 * 创建一个名为{@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME}的新{@code  MockPropertySource}，它将维护自己的内部{@link  Properties}实例。 
	 * 
	 */
	public MockPropertySource() {
		this(new Properties());
	}

	/**
	 * Create a new {@code MockPropertySource} with the given name that will
	 * maintain its own internal {@link Properties} instance.
	 * @param name the {@linkplain #getName() name} of the property source
	 */
	/**
	 * 使用给定名称创建一个新的{@code  MockPropertySource}，该名称将维护其自己的内部{@link  Properties}实例。 
	 *  
	 * @param 命名属性源的{@link  plain #getName（）name}
	 */
	public MockPropertySource(String name) {
		this(name, new Properties());
	}

	/**
	 * Create a new {@code MockPropertySource} named {@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME}
	 * and backed by the given {@link Properties} object.
	 * @param properties the properties to use
	 */
	/**
	 * 创建一个名为{@value #MOCK_PROPERTIES_PROPERTY_SOURCE_NAME}的新{@code  MockPropertySource}，并以给定的{@link  Properties}对象作为后盾。 
	 *  
	 * @param 属性要使用的属性
	 */
	public MockPropertySource(Properties properties) {
		this(MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, properties);
	}

	/**
	 * Create a new {@code MockPropertySource} with the given name and backed by the given
	 * {@link Properties} object
	 * @param name the {@linkplain #getName() name} of the property source
	 * @param properties the properties to use
	 */
	/**
	 * 用给定的名称创建一个新的{@code  MockPropertySource}，并以给定的{@link  Properties}对象
	 * @param 为名称，属性源的{@link  plain #getName（）name} 
	 * @param 属性要使用的属性
	 */
	public MockPropertySource(String name, Properties properties) {
		super(name, properties);
	}


	/**
	 * Set the given property on the underlying {@link Properties} object.
	 */
	/**
	 * 在基础{@link  Properties}对象上设置给定的属性。 
	 * 
	 */
	public void setProperty(String name, Object value) {
		this.source.put(name, value);
	}

	/**
	 * Convenient synonym for {@link #setProperty} that returns the current instance.
	 * Useful for method chaining and fluent-style use.
	 * @return this {@link MockPropertySource} instance
	 */
	/**
	 * {@link  #setProperty}的方便同义词，用于返回当前实例。 
	 * 可用于方法链接和流利的样式使用。 
	 *  
	 * @return 此{@link  MockPropertySource}实例
	 */
	public MockPropertySource withProperty(String name, Object value) {
		this.setProperty(name, value);
		return this;
	}

}
