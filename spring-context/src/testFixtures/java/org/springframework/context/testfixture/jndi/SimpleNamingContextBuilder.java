/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.testfixture.jndi;

import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.NamingException;
import javax.naming.spi.InitialContextFactory;
import javax.naming.spi.InitialContextFactoryBuilder;
import javax.naming.spi.NamingManager;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;

/**
 * Copy of the standard {@link org.springframework.mock.jndi.SimpleNamingContextBuilder}
 * for testing purposes.
 *
 * <p>Simple implementation of a JNDI naming context builder.
 *
 * <p>Mainly targeted at test environments, where each test case can
 * configure JNDI appropriately, so that {@code new InitialContext()}
 * will expose the required objects. Also usable for standalone applications,
 * e.g. for binding a JDBC DataSource to a well-known JNDI location, to be
 * able to use traditional Java EE data access code outside of a Java EE
 * container.
 *
 * <p>There are various choices for DataSource implementations:
 * <ul>
 * <li>{@code SingleConnectionDataSource} (using the same Connection for all getConnection calls)
 * <li>{@code DriverManagerDataSource} (creating a new Connection on each getConnection call)
 * <li>Apache's Commons DBCP offers {@code org.apache.commons.dbcp.BasicDataSource} (a real pool)
 * </ul>
 *
 * <p>Typical usage in bootstrap code:
 *
 * <pre class="code">
 * SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder();
 * DataSource ds = new DriverManagerDataSource(...);
 * builder.bind("java:comp/env/jdbc/myds", ds);
 * builder.activate();</pre>
 *
 * Note that it's impossible to activate multiple builders within the same JVM,
 * due to JNDI restrictions. Thus to configure a fresh builder repeatedly, use
 * the following code to get a reference to either an already activated builder
 * or a newly activated one:
 *
 * <pre class="code">
 * SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder();
 * DataSource ds = new DriverManagerDataSource(...);
 * builder.bind("java:comp/env/jdbc/myds", ds);</pre>
 *
 * Note that you <i>should not</i> call {@code activate()} on a builder from
 * this factory method, as there will already be an activated one in any case.
 *
 * <p>An instance of this class is only necessary at setup time.
 * An application does not need to keep a reference to it after activation.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @see #emptyActivatedContextBuilder()
 * @see #bind(String, Object)
 * @see #activate()
 * @see SimpleNamingContext
 * @see org.springframework.jdbc.datasource.SingleConnectionDataSource
 * @see org.springframework.jdbc.datasource.DriverManagerDataSource
 */
/**
 * 用于测试目的的标准{@link  org.springframework.mock.jndi.SimpleNamingContextBuilder}的副本。 
 *  <p> JNDI命名上下文构建器的简单实现。 
 *  <p>主要针对测试环境，在该环境中每个测试用例都可以适当地配置JNDI，以便{@code  new InitialContext（）}将公开所需的对象。 
 * 也可用于独立应用程序，例如用于将JDBC数据源绑定到众所周知的JNDI位置，以便能够在Java EE容器外部使用传统的Java EE数据访问代码。 
 *  <p> DataSource实现有多种选择：<ul> <li> {<@code> SingleConnectionDataSource}（对所有getConnection调用使用相同的Connection）<li> {<@code>] DriverManagerDataSource}（在上创建新的Connection每次getConnection调用）<li> Apache的Commons DBCP提供{@code  org.apache.commons.dbcp.BasicDataSource}（一个真实的池）</ ul> <p>引导程序代码中的典型用法：<pre class ="code "> SimpleNamingContextBuilder builder = new SimpleNamingContextBuilder（）;数据源ds =新的DriverManagerDataSource（...）; builder.bind（"java：comp / env / jdbc / myds"，ds）; builder.activate（）; </ pre>注意，由于JNDI限制，无法在同一JVM中激活多个构建器。 
 * 因此，要重复配置新的构建器，请使用以下代码获取对已激活的构建器或新激活的构建器的引用：<pre class ="code"> SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder（）;。 
 * 数据源ds =新的DriverManagerDataSource（...）; builder.bind（"java：comp / env / jdbc / myds"，ds）; </ pre>请注意，您<i>不应该</ i>从此在构建器上调用{@code  activate（）}工厂方法，因为无论如何都会有一个已激活的方法。 
 *  <p>仅在设置时才需要此类的实例。 
 * 激活后，应用程序无需保留对其的引用。 
 *  @author  Juergen Hoeller @author  Rod Johnson 
 * @see  #emptyActivatedContextBuilder（）
 * @see  #bind（String，Object）
 * @see  #activate（）
 * @see  SimpleNamingContext 
 * @see  org。 
 *  springframework.jdbc.datasource.SingleConnectionDataSource 
 * @see  org.springframework.jdbc.datasource.DriverManagerDataSource
 */
public class SimpleNamingContextBuilder implements InitialContextFactoryBuilder {

	/** An instance of this class bound to JNDI. */
	/**
	 * 绑定到JNDI的此类的实例。 
	 * 
	 */
	@Nullable
	private static volatile SimpleNamingContextBuilder activated;

	private static boolean initialized = false;

	private static final Object initializationLock = new Object();


	/**
	 * Checks if a SimpleNamingContextBuilder is active.
	 * @return the current SimpleNamingContextBuilder instance,
	 * or {@code null} if none
	 */
	/**
	 * 检查SimpleNamingContextBuilder是否处于活动状态。 
	 *  
	 * @return 当前的SimpleNamingContextBuilder实例； 
	 * 如果没有，则为{@code  null}
	 */
	@Nullable
	public static SimpleNamingContextBuilder getCurrentContextBuilder() {
		return activated;
	}

	/**
	 * If no SimpleNamingContextBuilder is already configuring JNDI,
	 * create and activate one. Otherwise take the existing activated
	 * SimpleNamingContextBuilder, clear it and return it.
	 * <p>This is mainly intended for test suites that want to
	 * reinitialize JNDI bindings from scratch repeatedly.
	 * @return an empty SimpleNamingContextBuilder that can be used
	 * to control JNDI bindings
	 */
	/**
	 * 如果尚无SimpleNamingContextBuilder正在配置JNDI，请创建并激活一个。 
	 * 否则，请使用现有的已激活SimpleNamingContextBuilder，将其清除并返回。 
	 *  <p>这主要用于想要从头开始反复重新初始化JNDI绑定的测试套件。 
	 *  
	 * @return 一个空的SimpleNamingContextBuilder，可用于控制JNDI绑定
	 */
	public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {
		SimpleNamingContextBuilder builder = activated;
		if (builder != null) {
			// Clear already activated context builder.
			builder.clear();
		}
		else {
			// Create and activate new context builder.
			builder = new SimpleNamingContextBuilder();
			// The activate() call will cause an assignment to the activated variable.
			builder.activate();
		}
		return builder;
	}


	private final Log logger = LogFactory.getLog(getClass());

	private final Hashtable<String,Object> boundObjects = new Hashtable<>();


	/**
	 * Register the context builder by registering it with the JNDI NamingManager.
	 * Note that once this has been done, {@code new InitialContext()} will always
	 * return a context from this factory. Use the {@code emptyActivatedContextBuilder()}
	 * static method to get an empty context (for example, in test methods).
	 * @throws IllegalStateException if there's already a naming context builder
	 * registered with the JNDI NamingManager
	 */
	/**
	 * 通过在JNDI NamingManager中注册上下文构建器来注册它。 
	 * 请注意，完成此操作后，{<@code> new InitialContext（）}将始终从该工厂返回上下文。 
	 * 使用{@code  emptyActivatedContextBuilder（）}静态方法来获取空上下文（例如，在测试方法中）。 
	 *  
	 * @throws  IllegalStateException如果已经在JNDI NamingManager中注册了命名上下文构建器
	 */
	public void activate() throws IllegalStateException, NamingException {
		logger.info("Activating simple JNDI environment");
		synchronized (initializationLock) {
			if (!initialized) {
				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),
							"Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " +
							"Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " +
							"with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.");
				NamingManager.setInitialContextFactoryBuilder(this);
				initialized = true;
			}
		}
		activated = this;
	}

	/**
	 * Temporarily deactivate this context builder. It will remain registered with
	 * the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory
	 * (if configured) instead of exposing its own bound objects.
	 * <p>Call {@code activate()} again in order to expose this context builder's own
	 * bound objects again. Such activate/deactivate sequences can be applied any number
	 * of times (e.g. within a larger integration test suite running in the same VM).
	 * @see #activate()
	 */
	/**
	 * 暂时停用此上下文生成器。 
	 * 它将保留在JNDI NamingManager中注册，但将委派给标准JNDI InitialContextFactory（如果已配置），而不是公开其自己的绑定对象。 
	 *  <p>再次调用{@code  activate（）}，以便再次公开此上下文生成器自己的绑定对象。 
	 * 这种激活/停用序列可以被应用任意次（例如，在同一VM中运行的较大的集成测试套件中）。 
	 *  
	 * @see  #activate（）
	 */
	public void deactivate() {
		logger.info("Deactivating simple JNDI environment");
		activated = null;
	}

	/**
	 * Clear all bindings in this context builder, while keeping it active.
	 */
	/**
	 * 清除此上下文生成器中的所有绑定，同时使其保持活动状态。 
	 * 
	 */
	public void clear() {
		this.boundObjects.clear();
	}

	/**
	 * Bind the given object under the given name, for all naming contexts
	 * that this context builder will generate.
	 * @param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")
	 * @param obj the object to bind (e.g. a DataSource implementation)
	 */
	/**
	 * 对于此上下文生成器将生成的所有命名上下文，将给定对象绑定到给定名称下。 
	 *  
	 * @param 命名对象的JNDI名称（例如"java：comp / env / jdbc / myds"）
	 * @param  obj要绑定的对象（例如DataSource实现）
	 */
	public void bind(String name, Object obj) {
		if (logger.isInfoEnabled()) {
			logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]");
		}
		this.boundObjects.put(name, obj);
	}


	/**
	 * Simple InitialContextFactoryBuilder implementation,
	 * creating a new SimpleNamingContext instance.
	 * @see SimpleNamingContext
	 */
	/**
	 * Simple InitialContextFactoryBuilder实现，创建一个新的SimpleNamingContext实例。 
	 *  
	 * @see  SimpleNamingContext
	 */
	@Override
	@SuppressWarnings("unchecked")
	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {
		if (activated == null && environment != null) {
			Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY);
			if (icf != null) {
				Class<?> icfClass;
				if (icf instanceof Class) {
					icfClass = (Class<?>) icf;
				}
				else if (icf instanceof String) {
					icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader());
				}
				else {
					throw new IllegalArgumentException("Invalid value type for environment key [" +
							Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName());
				}
				if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {
					throw new IllegalArgumentException(
							"Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf);
				}
				try {
					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance();
				}
				catch (Throwable ex) {
					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex);
				}
			}
		}

		// Default case...
		return env -> new SimpleNamingContext("", this.boundObjects, (Hashtable<String, Object>) env);
	}

}
