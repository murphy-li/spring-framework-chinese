/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.testfixture.cache.beans;

/**
 * Basic service interface for caching tests.
 *
 * @author Costin Leau
 * @author Phillip Webb
 * @author Stephane Nicoll
 */
/**
 * 缓存测试的基本服务接口。 
 *  @author  Costin Leau @author 菲利普·韦伯（Phillip Webb）@author  Stephane Nicoll
 */
public interface CacheableService<T> {

	T cache(Object arg1);

	T cacheNull(Object arg1);

	T cacheSync(Object arg1);

	T cacheSyncNull(Object arg1);

	void evict(Object arg1, Object arg2);

	void evictWithException(Object arg1);

	void evictEarly(Object arg1);

	void evictAll(Object arg1);

	void evictAllEarly(Object arg1);

	T conditional(int field);

	T conditionalSync(int field);

	T unless(int arg);

	T key(Object arg1, Object arg2);

	T varArgsKey(Object... args);

	T name(Object arg1);

	T nullValue(Object arg1);

	T update(Object arg1);

	T conditionalUpdate(Object arg2);

	Number nullInvocations();

	T rootVars(Object arg1);

	T customKeyGenerator(Object arg1);

	T unknownCustomKeyGenerator(Object arg1);

	T customCacheManager(Object arg1);

	T unknownCustomCacheManager(Object arg1);

	T throwChecked(Object arg1) throws Exception;

	T throwUnchecked(Object arg1);

	T throwCheckedSync(Object arg1) throws Exception;

	T throwUncheckedSync(Object arg1);

	T multiCache(Object arg1);

	T multiEvict(Object arg1);

	T multiCacheAndEvict(Object arg1);

	T multiConditionalCacheAndEvict(Object arg1);

	T multiUpdate(Object arg1);

	TestEntity putRefersToResult(TestEntity arg1);

}
