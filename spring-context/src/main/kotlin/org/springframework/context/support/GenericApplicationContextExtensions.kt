/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.support

import org.springframework.beans.factory.config.BeanDefinitionCustomizer
import org.springframework.context.ApplicationContext
import java.util.function.Supplier

/**
 * Extension for [GenericApplicationContext.registerBean] providing a
 * `registerBean<Foo>()` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [GenericApplicationContext.registerBean]的扩展，提供`registerBean <Foo>（）`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> GenericApplicationContext.registerBean(vararg customizers: BeanDefinitionCustomizer) {
	registerBean(T::class.java, *customizers)
}

/**
 * Extension for [GenericApplicationContext.registerBean] providing a
 * `registerBean<Foo>("foo")` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [GenericApplicationContext.registerBean]的扩展，提供`registerBean <Foo>（"foo"）`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> GenericApplicationContext.registerBean(beanName: String,
		vararg customizers: BeanDefinitionCustomizer) {
	registerBean(beanName, T::class.java, *customizers)
}

/**
 * Extension for [GenericApplicationContext.registerBean] providing a `registerBean { Foo() }` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [GenericApplicationContext.registerBean]的扩展，提供一个`registerBean {Foo（）}`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> GenericApplicationContext.registerBean(
		vararg customizers: BeanDefinitionCustomizer, crossinline function: (ApplicationContext) -> T) {
	registerBean(T::class.java, Supplier { function.invoke(this) }, *customizers)
}

/**
 * Extension for [GenericApplicationContext.registerBean] providing a
 * `registerBean("foo") { Foo() }` variant.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [GenericApplicationContext.registerBean]的扩展，提供了一个`registerBean（"foo"）{Foo（）}`变体。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
inline fun <reified T : Any> GenericApplicationContext.registerBean(name: String,
		vararg customizers: BeanDefinitionCustomizer, crossinline function: (ApplicationContext) -> T) {
	registerBean(name, T::class.java, Supplier { function.invoke(this) }, *customizers)
}

/**
 * Extension for [GenericApplicationContext] allowing `GenericApplicationContext { ... }`
 * style initialization.
 *
 * @author Sebastien Deleuze
 * @since 5.0
 */
/**
 * [GenericApplicationContext]的扩展允许`GenericApplicationContext {...}`样式的初始化。 
 *  @author 塞巴斯蒂安·德勒兹@5.0起
 */
@Deprecated("Use regular apply method instead.", replaceWith = ReplaceWith("GenericApplicationContext().apply(configure)"))
fun GenericApplicationContext(configure: GenericApplicationContext.() -> Unit) =
		GenericApplicationContext().apply(configure)

