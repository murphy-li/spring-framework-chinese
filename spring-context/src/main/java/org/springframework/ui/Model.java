/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.ui;

import java.util.Collection;
import java.util.Map;

import org.springframework.lang.Nullable;

/**
 * Java-5-specific interface that defines a holder for model attributes.
 * Primarily designed for adding attributes to the model.
 * Allows for accessing the overall model as a {@code java.util.Map}.
 *
 * @author Juergen Hoeller
 * @since 2.5.1
 */
/**
 * 特定于Java-5的接口，用于定义模型属性的所有者。 
 * 主要设计用于向模型添加属性。 
 * 允许以{@code  java.util.Map}的形式访问整体模型。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@2.5.1起
 */
public interface Model {

	/**
	 * Add the supplied attribute under the supplied name.
	 * @param attributeName the name of the model attribute (never {@code null})
	 * @param attributeValue the model attribute value (can be {@code null})
	 */
	/**
	 * 在提供的名称下添加提供的属性。 
	 *  
	 * @param  attributeName模型属性的名称（从不{<@@code> null}）
	 * @param  attributeValue模型属性的值（可以为{@code  null}）
	 */
	Model addAttribute(String attributeName, @Nullable Object attributeValue);

	/**
	 * Add the supplied attribute to this {@code Map} using a
	 * {@link org.springframework.core.Conventions#getVariableName generated name}.
	 * <p><i>Note: Empty {@link java.util.Collection Collections} are not added to
	 * the model when using this method because we cannot correctly determine
	 * the true convention name. View code should check for {@code null} rather
	 * than for empty collections as is already done by JSTL tags.</i>
	 * @param attributeValue the model attribute value (never {@code null})
	 */
	/**
	 * 使用{@link  org.springframework.core.Conventions＃getVariableName生成的名称}将提供的属性添加到此{@code  Map}。 
	 *  <p> <i>注意：使用此方法时，不会将空{@link  java.util.Collection Collections}添加到模型中，因为我们无法正确确定真实的约定名称。 
	 * 查看代码应检查{@code  null}，而不是JSTL标记已完成的空集合。 
	 * </ i> 
	 * @param  attributeValue模型属性值（切勿{@code  null}）
	 */
	Model addAttribute(Object attributeValue);

	/**
	 * Copy all attributes in the supplied {@code Collection} into this
	 * {@code Map}, using attribute name generation for each element.
	 * @see #addAttribute(Object)
	 */
	/**
	 * 使用每个元素的属性名称生成，将提供的{@code 集合}中的所有属性复制到此{@code  Map}中。 
	 *  
	 * @see  #addAttribute（对象）
	 */
	Model addAllAttributes(Collection<?> attributeValues);

	/**
	 * Copy all attributes in the supplied {@code Map} into this {@code Map}.
	 * @see #addAttribute(String, Object)
	 */
	/**
	 * 将提供的{@code 映射}中的所有属性复制到此{@code 映射}中。 
	 *  
	 * @see  #addAttribute（字符串，对象）
	 */
	Model addAllAttributes(Map<String, ?> attributes);

	/**
	 * Copy all attributes in the supplied {@code Map} into this {@code Map},
	 * with existing objects of the same name taking precedence (i.e. not getting
	 * replaced).
	 */
	/**
	 * 将提供的{@code 映射}中的所有属性复制到此{@code 映射}中，同名的现有对象优先（即不被替换）。 
	 * 
	 */
	Model mergeAttributes(Map<String, ?> attributes);

	/**
	 * Does this model contain an attribute of the given name?
	 * @param attributeName the name of the model attribute (never {@code null})
	 * @return whether this model contains a corresponding attribute
	 */
	/**
	 * 此模型是否包含给定名称的属性？ 
	 * @param  attributeName模型属性的名称（不要{<@@code> null}）
	 * @return 此模型是否包含相应的属性
	 */
	boolean containsAttribute(String attributeName);

	/**
	 * Return the attribute value for the given name, if any.
	 * @param attributeName the name of the model attribute (never {@code null})
	 * @return the corresponding attribute value, or {@code null} if none
	 * @since 5.2
	 */
	/**
	 * 返回给定名称的属性值（如果有）。 
	 *  
	 * @param  attributeName模型属性的名称（不要{@code  null}）
	 * @return 相应的属性值； 
	 * 如果没有，则{@code  null} @5.2起
	 */
	@Nullable
	Object getAttribute(String attributeName);

	/**
	 * Return the current set of model attributes as a Map.
	 */
	/**
	 * 将当前模型属性集作为Map返回。 
	 * 
	 */
	Map<String, Object> asMap();

}
