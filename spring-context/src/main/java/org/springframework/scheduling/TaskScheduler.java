/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.ScheduledFuture;

import org.springframework.lang.Nullable;

/**
 * Task scheduler interface that abstracts the scheduling of
 * {@link Runnable Runnables} based on different kinds of triggers.
 *
 * <p>This interface is separate from {@link SchedulingTaskExecutor} since it
 * usually represents for a different kind of backend, i.e. a thread pool with
 * different characteristics and capabilities. Implementations may implement
 * both interfaces if they can handle both kinds of execution characteristics.
 *
 * <p>The 'default' implementation is
 * {@link org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler},
 * wrapping a native {@link java.util.concurrent.ScheduledExecutorService}
 * and adding extended trigger capabilities.
 *
 * <p>This interface is roughly equivalent to a JSR-236
 * {@code ManagedScheduledExecutorService} as supported in Java EE 7
 * environments but aligned with Spring's {@code TaskExecutor} model.
 *
 * @author Juergen Hoeller
 * @since 3.0
 * @see org.springframework.core.task.TaskExecutor
 * @see java.util.concurrent.ScheduledExecutorService
 * @see org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler
 */
/**
 * 任务计划程序接口，根据不同类型的触发器来抽象{@link  Runnable Runnables}的计划。 
 *  <p>此接口与{@link  SchedulingTaskExecutor}分开，因为它通常表示不同类型的后端，即具有不同特征和功能的线程池。 
 * 如果实现可以处理两种执行特征，则实现可以实现两个接口。 
 *  <p>"默认"实现是{@link  org.springframework.scheduling.concurrent.ThreadPoolTask​​Scheduler}，包装了原生{@link  java.util.concurrent.ScheduledExecutorService}并添加了扩展的触发功能。 
 *  <p>此接口与Java EE 7环境中支持的JSR-236 {@code  ManagedScheduledExecutorService}大致等效，但与Spring的{@code  TaskExecutor}模型保持一致。 
 *  @author  Juergen Hoeller @since 3.0 
 * @see  org.springframework.core.task.TaskExecutor 
 * @see  java.util.concurrent.ScheduledExecutorService 
 * @see  org.springframework.scheduling.concurrent.ThreadPoolTask​​Scheduler
 */
public interface TaskScheduler {

	/**
	 * Schedule the given {@link Runnable}, invoking it whenever the trigger
	 * indicates a next execution time.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param trigger an implementation of the {@link Trigger} interface,
	 * e.g. a {@link org.springframework.scheduling.support.CronTrigger} object
	 * wrapping a cron expression
	 * @return a {@link ScheduledFuture} representing pending completion of the task,
	 * or {@code null} if the given Trigger object never fires (i.e. returns
	 * {@code null} from {@link Trigger#nextExecutionTime})
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @see org.springframework.scheduling.support.CronTrigger
	 */
	/**
	 * 安排给定的{@link  Runnable}，并在触发器指示下一次执行时间时调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时运行Runnable来执行
	 * @param 触发{@link  Trigger}接口的实现，例如一个{@link  org.springframework.scheduling.support.CronTrigger}对象，它包装一个cron表达式
	 * @return 一个{@link  ScheduledFuture}表示任务即将完成，如果返回<{@code> null}，则给定的触发器对象永远不会触发（即从{@link  Trigger＃nextExecutionTime}返回{@code  null}）
	 * @throws  org.springframework.core.task.TaskRejectedException如果给定的任务由于内部原因而未被接受（例如池超载处理策略或正在进行的池关闭）
	 * @see  org.springframework.scheduling.support.CronTrigger
	 */
	@Nullable
	ScheduledFuture<?> schedule(Runnable task, Trigger trigger);

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @since 5.0
	 * @see #schedule(Runnable, Date)
	 */
	/**
	 * 安排给定的{@link  Runnable}，并在指定的执行时间调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime任务所需的执行时间（如果过去，则将立即执行任务，即尽快执行）
	 * @return  {{@link> ScheduledFuture}，表示任务
	 * @throws  org.springframework.core.task.TaskRejectedException的待完成，如果由于内部原因（例如，池超载处理策略或正在进行的池关闭）未接受给定任务）@从5.0开始
	 * @see  #schedule（Runnable，Date）
	 */
	default ScheduledFuture<?> schedule(Runnable task, Instant startTime) {
		return schedule(task, Date.from(startTime));
	}

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 */
	/**
	 * 安排给定的{@link  Runnable}，并在指定的执行时间调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime任务所需的执行时间（如果过去，则将立即执行任务，即尽快执行）
	 * @return  {{@link> ScheduledFuture}，表示任务
	 * @throws  org.springframework.core.task.TaskRejectedException的待完成，如果由于内部原因（例如，池超载处理策略或正在进行的池关闭）未接受给定任务）
	 */
	ScheduledFuture<?> schedule(Runnable task, Date startTime);

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time
	 * and subsequently with the given period.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired first execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @param period the interval between successive executions of the task
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @since 5.0
	 * @see #scheduleAtFixedRate(Runnable, Date, long)
	 */
	/**
	 * 安排给定的{@link  Runnable}，在指定的执行时间并随后以给定的时间调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime所需的任务首次执行时间（如果过去，则将立即执行该任务，即尽快执行该任务）<
	 * @param >间隔任务连续执行之间的间隔
	 * @return 表示任务即将完成的{@link  ScheduledFuture} 
	 * @throws  org.springframework.core.task.TaskRejectedException，如果内部不接受给定的任务原因（例如，池过载处理策略或正在进行的池关闭）@since 5.0 
	 * @see  #scheduleAtFixedRate（Runnable，Date，long）
	 */
	default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period) {
		return scheduleAtFixedRate(task, Date.from(startTime), period.toMillis());
	}

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time
	 * and subsequently with the given period.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired first execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @param period the interval between successive executions of the task (in milliseconds)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 */
	/**
	 * 安排给定的{@link  Runnable}，在指定的执行时间并随后以给定的时间调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime所需的任务首次执行时间（如果过去，则将立即执行该任务，即尽快执行该任务）<
	 * @param >间隔任务连续执行之间的间隔（以毫秒为单位）
	 * @return 代表任务即将完成的{@link  ScheduledFuture} 
	 * @throws  org.springframework.core.task.TaskRejectedException（如果给定任务是由于内部原因（例如，池超载处理策略或正在进行的池关闭）而未被接受
	 */
	ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period);

	/**
	 * Schedule the given {@link Runnable}, starting as soon as possible and
	 * invoking it with the given period.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param period the interval between successive executions of the task
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @since 5.0
	 * @see #scheduleAtFixedRate(Runnable, long)
	 */
	/**
	 * 安排给定的{@link  Runnable}，尽快开始并在给定的时间段内调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发
	 * @param 周期时执行的Runnable任务，在任务连续执行两次之间的间隔
	 * @return  {@link  ScheduledFuture}表示任务
	 * @throws  org待完成。 
	 *  springframework.core.task.TaskRejectedException如果由于内部原因（例如，池超载处理策略或正在进行的池关闭）未接受给定任务，则自5.0起@
	 * @see> #scheduleAtFixedRate（Runnable，long）
	 */
	default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period) {
		return scheduleAtFixedRate(task, period.toMillis());
	}

	/**
	 * Schedule the given {@link Runnable}, starting as soon as possible and
	 * invoking it with the given period.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param period the interval between successive executions of the task (in milliseconds)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 */
	/**
	 * 安排给定的{@link  Runnable}，尽快开始并在给定的时间段内调用它。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发
	 * @param 周期时执行的Runnable任务，任务连续执行之间的间隔（以毫秒为单位）
	 * @return 表示任务即将完成的{@link  ScheduledFuture} <@如果出于内部原因（例如，池超载处理策略或正在进行的池关闭）未接受给定的任务，则抛出> org.springframework.core.task.TaskRejectedException
	 */
	ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period);

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time
	 * and subsequently with the given delay between the completion of one execution
	 * and the start of the next.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired first execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @param delay the delay between the completion of one execution and the start of the next
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @since 5.0
	 * @see #scheduleWithFixedDelay(Runnable, Date, long)
	 */
	/**
	 * 安排给定的{@link  Runnable}，在指定的执行时间调用它，然后在完成一次执行与开始执行下一个给定的延迟之间进行调用。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime所需的任务首次执行时间（如果过去，则将立即执行该任务，即尽快执行该任务）<
	 * @param >延迟一个执行的完成与下一个执行的开始之间的延迟
	 * @return 一个表示任务待完成的{@link  ScheduledFuture} 
	 * @throws  org.springframework.core.task.TaskRejectedException（如果已给定）由于内部原因（例如，池超载处理策略或正在进行的池关闭），任务未被接受@自5.0起
	 * @see  #scheduleWithFixedDelay（Runnable，Date，long）
	 */
	default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay) {
		return scheduleWithFixedDelay(task, Date.from(startTime), delay.toMillis());
	}

	/**
	 * Schedule the given {@link Runnable}, invoking it at the specified execution time
	 * and subsequently with the given delay between the completion of one execution
	 * and the start of the next.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param startTime the desired first execution time for the task
	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)
	 * @param delay the delay between the completion of one execution and the start of the next
	 * (in milliseconds)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 */
	/**
	 * 安排给定的{@link  Runnable}，在指定的执行时间调用它，然后在完成一次执行与开始执行下一个给定的延迟之间进行调用。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param  startTime所需的任务首次执行时间（如果过去，则将立即执行该任务，即尽快执行该任务）<
	 * @param >延迟一个执行的完成与下一个执行的开始之间的延迟（以毫秒为单位）
	 * @return 一个{@link  ScheduledFuture}，代表任务
	 * @throws  org.springframework.core.task的待完成。 
	 *  TaskRejectedException如果给定任务由于内部原因（例如，池超载处理策略或正在进行的池关闭）而未被接受
	 */
	ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay);

	/**
	 * Schedule the given {@link Runnable}, starting as soon as possible and invoking it with
	 * the given delay between the completion of one execution and the start of the next.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param delay the delay between the completion of one execution and the start of the next
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 * @since 5.0
	 * @see #scheduleWithFixedDelay(Runnable, long)
	 */
	/**
	 * 安排给定的{@link  Runnable}，尽快开始，并在完成一次执行与开始执行下一个给定的延迟之间进行调用。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行的Runnable任务
	 * @param 延迟一次执行的完成与下一次开始的延迟之间的延迟
	 * @return  {@link  ScheduledFuture}表示任务即将完成
	 * @throws  org.springframework.core.task.TaskRejectedException如果由于内部原因（例如，池超载处理策略或正在进行的池关闭）未接受给定任务，则从5.0起@
	 * @see> #scheduleWithFixedDelay（Runnable，long ）
	 */
	default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay) {
		return scheduleWithFixedDelay(task, delay.toMillis());
	}

	/**
	 * Schedule the given {@link Runnable}, starting as soon as possible and invoking it with
	 * the given delay between the completion of one execution and the start of the next.
	 * <p>Execution will end once the scheduler shuts down or the returned
	 * {@link ScheduledFuture} gets cancelled.
	 * @param task the Runnable to execute whenever the trigger fires
	 * @param delay the delay between the completion of one execution and the start of the next
	 * (in milliseconds)
	 * @return a {@link ScheduledFuture} representing pending completion of the task
	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted
	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)
	 */
	/**
	 * 安排给定的{@link  Runnable}，尽快开始，并在完成一次执行与开始执行下一个给定的延迟之间进行调用。 
	 *  <p>一旦调度程序关闭或返回的{@link  ScheduledFuture}被取消，执行将结束。 
	 *  
	 * @param 任务每当触发器触发时执行Runnable任务
	 * @param 延迟一次执行完成与下一次执行之间的延迟（以毫秒为单位）
	 * @return 表示待处理的{@link  ScheduledFuture}完成任务
	 * @throws  org.springframework.core.task.TaskRejectedException，如果由于内部原因（例如，池超载处理策略或正在进行的池关闭）不接受给定的任务
	 */
	ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay);

}
