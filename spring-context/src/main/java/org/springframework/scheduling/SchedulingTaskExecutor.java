/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling;

import org.springframework.core.task.AsyncTaskExecutor;

/**
 * A {@link org.springframework.core.task.TaskExecutor} extension exposing
 * scheduling characteristics that are relevant to potential task submitters.
 *
 * <p>Scheduling clients are encouraged to submit
 * {@link Runnable Runnables} that match the exposed preferences
 * of the {@code TaskExecutor} implementation in use.
 *
 * <p>Note: {@link SchedulingTaskExecutor} implementations are encouraged to also
 * implement the {@link org.springframework.core.task.AsyncListenableTaskExecutor}
 * interface. This is not required due to the dependency on Spring 4.0's new
 * {@link org.springframework.util.concurrent.ListenableFuture} interface,
 * which would make it impossible for third-party executor implementations
 * to remain compatible with both Spring 4.0 and Spring 3.x.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see SchedulingAwareRunnable
 * @see org.springframework.core.task.TaskExecutor
 * @see org.springframework.scheduling.commonj.WorkManagerTaskExecutor
 */
/**
 * 一个{@link  org.springframework.core.task.TaskExecutor}扩展，公开了与潜在任务提交者相关的调度特性。 
 * 鼓励<p>计划客户端提交与正在使用的{@code  TaskExecutor}实现的公开偏好匹配的{@link  Runnable Runnables}。 
 *  <p>注意：鼓励{@link  SchedulingTaskExecutor}实现也实现{@link  org.springframework.core.task.AsyncListenableTaskExecutor}接口。 
 * 由于依赖于Spring 4.0的新{@link  org.springframework.util.concurrent.ListenableFuture}接口，因此不需要这样做，这将使第三方执行程序实现无法与Spring 4.0和Spring3.x。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  SchedulingAwareRunnable 
 * @see  org.springframework.core.task.TaskExecutor 
 * @see  org.springframework.scheduling.commonj.WorkManagerTaskExecutor
 */
public interface SchedulingTaskExecutor extends AsyncTaskExecutor {

	/**
	 * Does this {@code TaskExecutor} prefer short-lived tasks over long-lived tasks?
	 * <p>A {@code SchedulingTaskExecutor} implementation can indicate whether it
	 * prefers submitted tasks to perform as little work as they can within a single
	 * task execution. For example, submitted tasks might break a repeated loop into
	 * individual subtasks which submit a follow-up task afterwards (if feasible).
	 * <p>This should be considered a hint. Of course {@code TaskExecutor} clients
	 * are free to ignore this flag and hence the {@code SchedulingTaskExecutor}
	 * interface overall. However, thread pools will usually indicated a preference
	 * for short-lived tasks, allowing for more fine-grained scheduling.
	 * @return {@code true} if this executor prefers short-lived tasks (the default),
	 * {@code false} otherwise (for treatment like a regular {@code TaskExecutor})
	 */
	/**
	 * 与长期任务相比，此{@code  TaskExecutor}是否更喜欢短期任务？ <p> {<@code> SchedulingTaskExecutor}实现可以指示它是否更喜欢提交的任务在单个任务执行中执行尽可能少的工作。 
	 * 例如，提交的任务可能会将重复的循环分成单个子任务，然后再提交后续任务（如果可行）。 
	 *  <p>这应视为提示。 
	 * 当然，{<@code> TaskExecutor}客户端可以随意忽略此标志，因此总体上可以使用{@code  SchedulingTaskExecutor}接口。 
	 * 但是，线程池通常会指示对短期任务的偏好，从而允许更细粒度的调度。 
	 *  
	 * @return  {@code  true}（如果该执行程序更喜欢短期任务（默认），否则为{@code  false}（用于常规{@code  TaskExecutor}的处理）
	 */
	default boolean prefersShortLivedTasks() {
		return true;
	}

}
