/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.scheduling.config.ScheduledTaskRegistrar;

/**
 * Annotation that marks a method to be scheduled. Exactly one of the
 * {@link #cron}, {@link #fixedDelay}, or {@link #fixedRate} attributes must be
 * specified.
 *
 * <p>The annotated method must expect no arguments. It will typically have
 * a {@code void} return type; if not, the returned value will be ignored
 * when called through the scheduler.
 *
 * <p>Processing of {@code @Scheduled} annotations is performed by
 * registering a {@link ScheduledAnnotationBeanPostProcessor}. This can be
 * done manually or, more conveniently, through the {@code <task:annotation-driven/>}
 * element or @{@link EnableScheduling} annotation.
 *
 * <p>This annotation may be used as a <em>meta-annotation</em> to create custom
 * <em>composed annotations</em> with attribute overrides.
 *
 * @author Mark Fisher
 * @author Juergen Hoeller
 * @author Dave Syer
 * @author Chris Beams
 * @since 3.0
 * @see EnableScheduling
 * @see ScheduledAnnotationBeanPostProcessor
 * @see Schedules
 */
/**
 * 标记要调度的方法的注释。 
 * 必须指定{@link  #cron}，{<@link> #fixedDelay}或{@link  #fixedRate}属性之一。 
 *  <p>带注释的方法必须不包含任何参数。 
 * 它通常具有{@code  void}返回类型； 
 * 如果不是，则通过调度程序调用时，返回值将被忽略。 
 *  <p>通过注册{@link  ScheduledAnnotationBeanPostProcessor}来执行{@code  @Scheduled}注解的处理。 
 * 这可以手动完成，也可以通过{@code  <task：annotation-driven />}元素或@{<@link> EnableScheduling}注释更方便地完成。 
 *  <p>此注释可用作<em>元注释</ em>，以创建具有属性覆盖的自定义<em>组成的注释</ em>。 
 *  @author  Mark Fisher @author  Juergen Hoeller @author  Dave Syer @author  Chris Beams @since 3.0起
 * @see  EnableScheduling 
 * @see  ScheduledAnnotationBeanPostProcessor 
 * @see  Schedules
 */
@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Repeatable(Schedules.class)
public @interface Scheduled {

	/**
	 * A special cron expression value that indicates a disabled trigger: {@value}.
	 * <p>This is primarily meant for use with <code>${...}</code> placeholders,
	 * allowing for external disabling of corresponding scheduled methods.
	 * @since 5.1
	 * @see ScheduledTaskRegistrar#CRON_DISABLED
	 */
	/**
	 * 特殊的cron表达式值，表示已禁用触发器：{@value}。 
	 *  <p>这主要是与<code> $ {...} </ code>占位符一起使用，允许在外部禁用相应的调度方法。 
	 *  @始于5.1 
	 * @see  ScheduledTaskRegistrar＃CRON_DISABLED
	 */
	String CRON_DISABLED = ScheduledTaskRegistrar.CRON_DISABLED;


	/**
	 * A cron-like expression, extending the usual UN*X definition to include triggers
	 * on the second, minute, hour, day of month, month, and day of week.
	 * <p>For example, {@code "0 * * * * MON-FRI"} means once per minute on weekdays
	 * (at the top of the minute - the 0th second).
	 * <p>The fields read from left to right are interpreted as follows.
	 * <ul>
	 * <li>second</li>
	 * <li>minute</li>
	 * <li>hour</li>
	 * <li>day of month</li>
	 * <li>month</li>
	 * <li>day of week</li>
	 * </ul>
	 * <p>The special value {@link #CRON_DISABLED "-"} indicates a disabled cron
	 * trigger, primarily meant for externally specified values resolved by a
	 * <code>${...}</code> placeholder.
	 * @return an expression that can be parsed to a cron schedule
	 * @see org.springframework.scheduling.support.CronSequenceGenerator
	 */
	/**
	 * 一种类似于cron的表达式，扩展了通常的UN X定义，使其包括第二，分钟，小时，每月的某天，每月的某天以及一周中的某天的触发器。 
	 *  <p>例如，{<@code>"0 MON-FRI"}表示工作日每分钟一次（在分钟的顶部-第0秒）。 
	 *  <p>从左到右读取的字段解释如下。 
	 *  <ul> <li>秒</ li> <li>分钟</ li> <li>小时</ li> <li>一个月的天</ li> <li>一个月</ li> <li>周</ li> </ ul> <p>特殊值{@link  #CRON_DISABLED"-"}表示已禁用cron触发器，主要用于由<code> $ {... </ code>占位符。 
	 *  
	 * @return 可以解析为cron计划的表达式
	 * @see  org.springframework.scheduling.support.CronSequenceGenerator
	 */
	String cron() default "";

	/**
	 * A time zone for which the cron expression will be resolved. By default, this
	 * attribute is the empty String (i.e. the server's local time zone will be used).
	 * @return a zone id accepted by {@link java.util.TimeZone#getTimeZone(String)},
	 * or an empty String to indicate the server's default time zone
	 * @since 4.0
	 * @see org.springframework.scheduling.support.CronTrigger#CronTrigger(String, java.util.TimeZone)
	 * @see java.util.TimeZone
	 */
	/**
	 * 将解决cron表达式的时区。 
	 * 默认情况下，此属性为空字符串（即将使用服务器的本地时区）。 
	 *  
	 * @return  {@link  java.util.TimeZone＃getTimeZone（String）}接受的区域ID，或者为空字符串以指示服务器的默认时区（从4.0开始）。 
	 * 
	 * @see  org.springframework.scheduling。 
	 *  support.CronTrigger＃CronTrigger（String，java.util.TimeZone）
	 * @see  java.util.TimeZone
	 */
	String zone() default "";

	/**
	 * Execute the annotated method with a fixed period in milliseconds between the
	 * end of the last invocation and the start of the next.
	 * @return the delay in milliseconds
	 */
	/**
	 * 在上次调用的结束与下一次调用的开始之间以固定的毫秒数为周期执行带注释的方法。 
	 *  
	 * @return 延迟（以毫秒为单位）
	 */
	long fixedDelay() default -1;

	/**
	 * Execute the annotated method with a fixed period in milliseconds between the
	 * end of the last invocation and the start of the next.
	 * @return the delay in milliseconds as a String value, e.g. a placeholder
	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value
	 * @since 3.2.2
	 */
	/**
	 * 在上次调用的结束与下一次调用的开始之间以固定的毫秒数为周期执行带注释的方法。 
	 *  
	 * @return 延迟（以毫秒为单位）作为字符串值，例如从3.2.2开始的占位符或{@link  java.time.Duration＃parse java.time.Duration}兼容值
	 */
	String fixedDelayString() default "";

	/**
	 * Execute the annotated method with a fixed period in milliseconds between
	 * invocations.
	 * @return the period in milliseconds
	 */
	/**
	 * 两次调用之间以固定的时间段（以毫秒为单位）执行带注释的方法。 
	 *  
	 * @return 周期（以毫秒为单位）
	 */
	long fixedRate() default -1;

	/**
	 * Execute the annotated method with a fixed period in milliseconds between
	 * invocations.
	 * @return the period in milliseconds as a String value, e.g. a placeholder
	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value
	 * @since 3.2.2
	 */
	/**
	 * 两次调用之间以固定的时间段（以毫秒为单位）执行带注释的方法。 
	 *  
	 * @return 以毫秒为单位的时间段，作为字符串值，例如从3.2.2开始的占位符或{@link  java.time.Duration＃parse java.time.Duration}兼容值
	 */
	String fixedRateString() default "";

	/**
	 * Number of milliseconds to delay before the first execution of a
	 * {@link #fixedRate} or {@link #fixedDelay} task.
	 * @return the initial delay in milliseconds
	 * @since 3.2
	 */
	/**
	 * 第一次执行{@link  #fixedRate}或{@link  #fixedDelay}任务之前要延迟的毫秒数。 
	 *  
	 * @return 自3.2起的初始延迟（以毫秒为单位）
	 */
	long initialDelay() default -1;

	/**
	 * Number of milliseconds to delay before the first execution of a
	 * {@link #fixedRate} or {@link #fixedDelay} task.
	 * @return the initial delay in milliseconds as a String value, e.g. a placeholder
	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value
	 * @since 3.2.2
	 */
	/**
	 * 第一次执行{@link  #fixedRate}或{@link  #fixedDelay}任务之前要延迟的毫秒数。 
	 *  
	 * @return 初始延迟（以毫秒为单位）作为字符串值，例如从3.2.2开始的占位符或{@link  java.time.Duration＃parse java.time.Duration}兼容值
	 */
	String initialDelayString() default "";

}
