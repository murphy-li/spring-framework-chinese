/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.concurrent.Executor;

import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;

/**
 * Enables Spring's scheduled task execution capability, similar to
 * functionality found in Spring's {@code <task:*>} XML namespace. To be used
 * on @{@link Configuration} classes as follows:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * public class AppConfig {
 *
 *     // various &#064;Bean definitions
 * }</pre>
 *
 * This enables detection of @{@link Scheduled} annotations on any Spring-managed
 * bean in the container. For example, given a class {@code MyTask}
 *
 * <pre class="code">
 * package com.myco.tasks;
 *
 * public class MyTask {
 *
 *     &#064;Scheduled(fixedRate=1000)
 *     public void work() {
 *         // task execution logic
 *     }
 * }</pre>
 *
 * the following configuration would ensure that {@code MyTask.work()} is called
 * once every 1000 ms:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * public class AppConfig {
 *
 *     &#064;Bean
 *     public MyTask task() {
 *         return new MyTask();
 *     }
 * }</pre>
 *
 * Alternatively, if {@code MyTask} were annotated with {@code @Component}, the
 * following configuration would ensure that its {@code @Scheduled} method is
 * invoked at the desired interval:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * &#064;ComponentScan(basePackages="com.myco.tasks")
 * public class AppConfig {
 * }</pre>
 *
 * Methods annotated with {@code @Scheduled} may even be declared directly within
 * {@code @Configuration} classes:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * public class AppConfig {
 *
 *     &#064;Scheduled(fixedRate=1000)
 *     public void work() {
 *         // task execution logic
 *     }
 * }</pre>
 *
 * <p>By default, will be searching for an associated scheduler definition: either
 * a unique {@link org.springframework.scheduling.TaskScheduler} bean in the context,
 * or a {@code TaskScheduler} bean named "taskScheduler" otherwise; the same lookup
 * will also be performed for a {@link java.util.concurrent.ScheduledExecutorService}
 * bean. If neither of the two is resolvable, a local single-threaded default
 * scheduler will be created and used within the registrar.
 *
 * <p>When more control is desired, a {@code @Configuration} class may implement
 * {@link SchedulingConfigurer}. This allows access to the underlying
 * {@link ScheduledTaskRegistrar} instance. For example, the following example
 * demonstrates how to customize the {@link Executor} used to execute scheduled
 * tasks:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * public class AppConfig implements SchedulingConfigurer {
 *
 *     &#064;Override
 *     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
 *         taskRegistrar.setScheduler(taskExecutor());
 *     }
 *
 *     &#064;Bean(destroyMethod="shutdown")
 *     public Executor taskExecutor() {
 *         return Executors.newScheduledThreadPool(100);
 *     }
 * }</pre>
 *
 * <p>Note in the example above the use of {@code @Bean(destroyMethod="shutdown")}.
 * This ensures that the task executor is properly shut down when the Spring
 * application context itself is closed.
 *
 * <p>Implementing {@code SchedulingConfigurer} also allows for fine-grained
 * control over task registration via the {@code ScheduledTaskRegistrar}.
 * For example, the following configures the execution of a particular bean
 * method per a custom {@code Trigger} implementation:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableScheduling
 * public class AppConfig implements SchedulingConfigurer {
 *
 *     &#064;Override
 *     public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
 *         taskRegistrar.setScheduler(taskScheduler());
 *         taskRegistrar.addTriggerTask(
 *             new Runnable() {
 *                 public void run() {
 *                     myTask().work();
 *                 }
 *             },
 *             new CustomTrigger()
 *         );
 *     }
 *
 *     &#064;Bean(destroyMethod="shutdown")
 *     public Executor taskScheduler() {
 *         return Executors.newScheduledThreadPool(42);
 *     }
 *
 *     &#064;Bean
 *     public MyTask myTask() {
 *         return new MyTask();
 *     }
 * }</pre>
 *
 * <p>For reference, the example above can be compared to the following Spring XML
 * configuration:
 *
 * <pre class="code">
 * &lt;beans>
 *
 *     &lt;task:annotation-driven scheduler="taskScheduler"/&gt;
 *
 *     &lt;task:scheduler id="taskScheduler" pool-size="42"/&gt;
 *
 *     &lt;task:scheduled-tasks scheduler="taskScheduler"&gt;
 *         &lt;task:scheduled ref="myTask" method="work" fixed-rate="1000"/&gt;
 *     &lt;/task:scheduled-tasks&gt;
 *
 *     &lt;bean id="myTask" class="com.foo.MyTask"/&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * The examples are equivalent save that in XML a <em>fixed-rate</em> period is used
 * instead of a custom <em>{@code Trigger}</em> implementation; this is because the
 * {@code task:} namespace {@code scheduled} cannot easily expose such support. This is
 * but one demonstration how the code-based approach allows for maximum configurability
 * through direct access to actual componentry.<p>
 *
 * <b>Note: {@code @EnableScheduling} applies to its local application context only,
 * allowing for selective scheduling of beans at different levels.</b> Please redeclare
 * {@code @EnableScheduling} in each individual context, e.g. the common root web
 * application context and any separate {@code DispatcherServlet} application contexts,
 * if you need to apply its behavior at multiple levels.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @see Scheduled
 * @see SchedulingConfiguration
 * @see SchedulingConfigurer
 * @see ScheduledTaskRegistrar
 * @see Trigger
 * @see ScheduledAnnotationBeanPostProcessor
 */
/**
 * 启用S​​pring的计划任务执行功能，类似于Spring的{<< @code >> <task：>} XML名称空间中的功能。 
 * 可以在@{<< @link >> Configuration}类上使用，如下所示：<pre class ="code"> @Configuration @EnableScheduling公共类AppConfig {//各种@Bean定义} </ pre>这样就可以检测到@容器中任何受Spring管理的bean上的{<< @link >> Scheduled}注解。 
 * 例如，给定类{<< @code >> MyTask} <pre class ="code">包com.myco.tasks;公共类MyTask {@Scheduled（fixedRate = 1000）public void work（）{//任务执行逻辑}} </ pre>以下配置将确保{<< @code >> MyTask.work（）}被调用一次每1000毫秒：<pre class ="code"> @Configuration @EnableScheduling公共类AppConfig {@Bean public MyTask task（）{return new MyTask（）; }} </ pre>或者，如果{{<< @code >> MyTask}用{<< @code >> @Component}注释，则以下配置将确保其{<< @code >> @Scheduled}方法以所需的间隔调用：<pre class ="code"> @Configuration @EnableScheduling @ComponentScan（basePackages ="com.myco.tasks"）公共类AppConfig {} </ pre>用{<< @code>注释的方法> @Scheduled}甚至可以在{<< @code >> @Configuration}类中直接声明：<pre class ="code"> @Configuration @EnableScheduling公共类AppConfig {@Scheduled（fixedRate = 1000）public void work（） {//任务执行逻辑}} </ pre> <p>默认情况下，将搜索关联的调度程序定义：在上下文中为唯一的{<< @link >> org.springframework.scheduling.TaskScheduler} bean，否则，将一个{<< @code >> TaskScheduler} bean命名为"taskScheduler"。 
 * 对于{<< @link >> java.util.concurrent.ScheduledExecutorService} bean，也将执行相同的查找。 
 * 如果二者都不可解决，则将在注册服务商中创建并使用本地单线程默认调度程序。 
 *  <p>如果需要更多控制，则{<< @code >> @Configuration}类可以实现{<< @link >> SchedulingConfigurer}。 
 * 这允许访问基础的{<< @link >> ScheduledTaskRegistrar}实例。 
 * 例如，以下示例演示如何自定义用于执行计划任务的{<< @link >> Executor}：<pre class ="code"> @Configuration @EnableScheduling公共类AppConfig实现SchedulingConfigurer {@Override public void configureTasks（ ScheduledTaskRegistrar taskRegistrar）{taskRegistrar.setScheduler（taskExecutor（））; } @Bean（destroyMethod ="shutdown"）公共执行器taskExecutor（）{return Executors.newScheduledThreadPool（100）; }} </ pre> <p>在上面的示例中请注意使用{<< @code >> @Bean（destroyMethod ="shutdown"）}。 
 * 这样可以确保在Spring应用程序上下文本身关闭时正确关闭任务执行程序。 
 *  <p>实施{<< @code >> SchedulingConfigurer}还可通过{<< @code >> ScheduledTaskRegistrar}对任务注册进行细粒度控制。 
 * 例如，以下代码根据自定义{<< @code >>触发器}实现来配置特定bean方法的执行：<pre class ="code"> @Configuration @EnableScheduling公共类AppConfig实现SchedulingConfigurer {@Override public void configureTasks （ScheduledTaskRegistrar taskRegistrar）{taskRegistrar.setScheduler（taskScheduler（））; taskRegistrar.addTriggerTask（new Runnable（）{public void run（）{myTask（）。 
 * work（）;}}，new CustomTrigger（））; } @Bean（destroyMethod ="shutdown"）公共执行器taskScheduler（）{return Executors.newScheduledThreadPool（42）; } @Bean public MyTask myTask（）{return new MyTask（）; }} </ pre> <p>作为参考，可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <task：annotation-driven scheduler ="taskScheduler"/> < task：scheduler id ="taskScheduler"pool-size ="42"/> <task：scheduled-tasks scheduler ="taskScheduler"> <task：scheduled ref ="myTask"method ="work"fixed-rate ="1000"/> </ task：scheduled-tasks> <bean id ="myTask"class ="com.foo.MyTask"/> </ beans> </ pre>这些示例等效，但在XML中为<em> fixed-使用rate </ em>周期代替自定义的<em> {<< @@code >>触发器} </ em>实现； 
 * 这是因为{<<< @code >>任务：}名称空间{Scheduled Scheduled}无法轻易提供这种支持。 
 * 这只是一个演示，它展示了基于代码的方法如何通过直接访问实际组件来实现最大的可配置性。 
 * <p> <b>注意：{<< @code >> @EnableScheduling}仅适用于其本地应用程序上下文，允许</ b>请在每个单独的上下文中重新声明{<< @code >> @EnableScheduling}，例如公共根Web应用程序上下文以及任何单独的{<< @code >> DispatcherServlet}应用程序上下文（如果需要在多个级别上应用其行为）
 */
/**
 * << @author >>克里斯·比姆斯（Chris Beams）<< @author >> Juergen Hoeller @始于3.1 << 
 * @see >> Scheduled << 
 * @see >> SchedulingConfiguration << 
 * @see >> SchedulingConfigurer << 
 * @see >> ScheduledTaskRegistrar << @请参阅>>触发器<< @请参阅>> ScheduledAnnotationBeanPostProcessor
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Import(SchedulingConfiguration.class)
@Documented
public @interface EnableScheduling {

}
