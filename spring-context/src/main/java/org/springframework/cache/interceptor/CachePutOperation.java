/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.interceptor;

import org.springframework.lang.Nullable;

/**
 * Class describing a cache 'put' operation.
 *
 * @author Costin Leau
 * @author Phillip Webb
 * @author Marcin Kamionowski
 * @since 3.1
 */
/**
 * 描述高速缓存"放置"操作的类。 
 *  @author  Costin Leau @author  Phillip Webb @author  Marcin Kamionowski @始于3.1
 */
public class CachePutOperation extends CacheOperation {

	@Nullable
	private final String unless;


	/**
	 * Create a new {@link CachePutOperation} instance from the given builder.
	 * @since 4.3
	 */
	/**
	 * 从给定的构建器创建一个新的{@link  CachePutOperation}实例。 
	 *  @4.3起
	 */
	public CachePutOperation(CachePutOperation.Builder b) {
		super(b);
		this.unless = b.unless;
	}


	@Nullable
	public String getUnless() {
		return this.unless;
	}


	/**
	 * A builder that can be used to create a {@link CachePutOperation}.
	 * @since 4.3
	 */
	/**
	 * 可用于创建{@link  CachePutOperation}的构建器。 
	 *  @4.3起
	 */
	public static class Builder extends CacheOperation.Builder {

		@Nullable
		private String unless;

		public void setUnless(String unless) {
			this.unless = unless;
		}

		@Override
		protected StringBuilder getOperationDescription() {
			StringBuilder sb = super.getOperationDescription();
			sb.append(" | unless='");
			sb.append(this.unless);
			sb.append("'");
			return sb;
		}

		@Override
		public CachePutOperation build() {
			return new CachePutOperation(this);
		}
	}

}
