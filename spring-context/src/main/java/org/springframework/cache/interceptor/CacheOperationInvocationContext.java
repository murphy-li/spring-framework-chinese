/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.interceptor;

import java.lang.reflect.Method;

/**
 * Representation of the context of the invocation of a cache operation.
 *
 * <p>The cache operation is static and independent of a particular invocation;
 * this interface gathers the operation and a particular invocation.
 *
 * @author Stephane Nicoll
 * @since 4.1
 * @param <O> the operation type
 */
/**
 * 表示缓存操作的调用上下文。 
 *  <p>缓存操作是静态的，并且与特定的调用无关； 
 * 该接口收集操作和特定的调用。 
 *  @author  Stephane Nicoll @4.1起
 * @param  <O>操作类型
 */
public interface CacheOperationInvocationContext<O extends BasicOperation> {

	/**
	 * Return the cache operation.
	 */
	/**
	 * 返回缓存操作。 
	 * 
	 */
	O getOperation();

	/**
	 * Return the target instance on which the method was invoked.
	 */
	/**
	 * 返回在其上调用该方法的目标实例。 
	 * 
	 */
	Object getTarget();

	/**
	 * Return the method which was invoked.
	 */
	/**
	 * 返回被调用的方法。 
	 * 
	 */
	Method getMethod();

	/**
	 * Return the argument list used to invoke the method.
	 */
	/**
	 * 返回用于调用该方法的参数列表。 
	 * 
	 */
	Object[] getArgs();

}
