/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache;

import java.util.concurrent.Callable;

import org.springframework.lang.Nullable;

/**
 * Interface that defines common cache operations.
 *
 * <b>Note:</b> Due to the generic use of caching, it is recommended that
 * implementations allow storage of <tt>null</tt> values (for example to
 * cache methods that return {@code null}).
 *
 * @author Costin Leau
 * @author Juergen Hoeller
 * @author Stephane Nicoll
 * @since 3.1
 */
/**
 * 定义通用缓存操作的接口。 
 *  <b>注意：</ b>由于缓存的一般用法，建议实现允许存储<tt> null </ tt>值（例如，存储返回{@code  null}的方法） 。 
 *  @author  Costin Leau @author 于尔根·霍勒（Juergen Hoeller）@author  Stephane Nicoll @since 3.1
 */
public interface Cache {

	/**
	 * Return the cache name.
	 */
	/**
	 * 返回缓存名称。 
	 * 
	 */
	String getName();

	/**
	 * Return the underlying native cache provider.
	 */
	/**
	 * 返回基础本机缓存提供程序。 
	 * 
	 */
	Object getNativeCache();

	/**
	 * Return the value to which this cache maps the specified key.
	 * <p>Returns {@code null} if the cache contains no mapping for this key;
	 * otherwise, the cached value (which may be {@code null} itself) will
	 * be returned in a {@link ValueWrapper}.
	 * @param key the key whose associated value is to be returned
	 * @return the value to which this cache maps the specified key,
	 * contained within a {@link ValueWrapper} which may also hold
	 * a cached {@code null} value. A straight {@code null} being
	 * returned means that the cache contains no mapping for this key.
	 * @see #get(Object, Class)
	 * @see #get(Object, Callable)
	 */
	/**
	 * 返回此缓存将指定键映射到的值。 
	 *  <p>如果缓存不包含此键的映射，则返回{@code  null}； 
	 * 否则，缓存的值（本身可能为{@code  null}）将在{@link  ValueWrapper}中返回。 
	 *  
	 * @param 键要返回其关联值的键
	 * @return 此缓存将指定键映射到的值，包含在{@link  ValueWrapper}中，该键也可能包含缓存的{@code  null}值。 
	 * 直接返回{@code  null}表示缓存不包含此键的映射。 
	 *  
	 * @see  #get（对象，类）
	 * @see  #get（对象，可调用）
	 */
	@Nullable
	ValueWrapper get(Object key);

	/**
	 * Return the value to which this cache maps the specified key,
	 * generically specifying a type that return value will be cast to.
	 * <p>Note: This variant of {@code get} does not allow for differentiating
	 * between a cached {@code null} value and no cache entry found at all.
	 * Use the standard {@link #get(Object)} variant for that purpose instead.
	 * @param key the key whose associated value is to be returned
	 * @param type the required type of the returned value (may be
	 * {@code null} to bypass a type check; in case of a {@code null}
	 * value found in the cache, the specified type is irrelevant)
	 * @return the value to which this cache maps the specified key
	 * (which may be {@code null} itself), or also {@code null} if
	 * the cache contains no mapping for this key
	 * @throws IllegalStateException if a cache entry has been found
	 * but failed to match the specified type
	 * @since 4.0
	 * @see #get(Object)
	 */
	/**
	 * 返回此缓存将指定键映射到的值，通常指定返回值将强制转换为的类型。 
	 *  <p>注意：{@code  get}的此变体不允许区分缓存的{@code  null}值和根本找不到缓存项。 
	 * 为此，请使用标准的{@link  #get（Object）}变体。 
	 *  
	 * @param 键要返回其关联值的键
	 * @param 键入返回值的必需类型（可以为{@code  null}以绕过类型检查； 
	 * 如果是{<@code > null}值在缓存中找到，与指定的类型无关。 
	 * 
	 * @return 该缓存将指定键映射到的值（本身可能是{@code  null}），也可能是{@code  null}，如果高速缓存不包含此键的映射
	 * @throws  IllegalStateException如果找到了高速缓存条目但未能与指定的类型匹配，则自@4.0起@
	 * @see> #get（Object）
	 */
	@Nullable
	<T> T get(Object key, @Nullable Class<T> type);

	/**
	 * Return the value to which this cache maps the specified key, obtaining
	 * that value from {@code valueLoader} if necessary. This method provides
	 * a simple substitute for the conventional "if cached, return; otherwise
	 * create, cache and return" pattern.
	 * <p>If possible, implementations should ensure that the loading operation
	 * is synchronized so that the specified {@code valueLoader} is only called
	 * once in case of concurrent access on the same key.
	 * <p>If the {@code valueLoader} throws an exception, it is wrapped in
	 * a {@link ValueRetrievalException}
	 * @param key the key whose associated value is to be returned
	 * @return the value to which this cache maps the specified key
	 * @throws ValueRetrievalException if the {@code valueLoader} throws an exception
	 * @since 4.3
	 * @see #get(Object)
	 */
	/**
	 * 返回此缓存将指定键映射到的值，并在必要时从{@code  valueLoader}获取该值。 
	 * 此方法为常规的"如果已缓存，则返回； 
	 * 否则创建，缓存并返回"模式提供了简单的替代方法。 
	 *  <p>如果可能，实现应确保加载操作是同步的，以便在同时访问同一键的情况下，仅调用一次指定的{@code  valueLoader}。 
	 *  <p>如果{@code  valueLoader}引发异常，它将包装在{@link  ValueRetrievalException} 
	 * @param 密钥中，该密钥的关联值将被返回
	 * @return 如果{@code  valueLoader}引发异常，则此缓存将映射指定的键
	 * @throws  ValueRetrievalException @自4.3起
	 * @see  #get（Object）
	 */
	@Nullable
	<T> T get(Object key, Callable<T> valueLoader);

	/**
	 * Associate the specified value with the specified key in this cache.
	 * <p>If the cache previously contained a mapping for this key, the old
	 * value is replaced by the specified value.
	 * <p>Actual registration may be performed in an asynchronous or deferred
	 * fashion, with subsequent lookups possibly not seeing the entry yet.
	 * This may for example be the case with transactional cache decorators.
	 * Use {@link #putIfAbsent} for guaranteed immediate registration.
	 * @param key the key with which the specified value is to be associated
	 * @param value the value to be associated with the specified key
	 * @see #putIfAbsent(Object, Object)
	 */
	/**
	 * 将指定的值与该缓存中的指定键相关联。 
	 *  <p>如果高速缓存先前包含此键的映射，则旧值将由指定值替换。 
	 *  <p>可以以异步或延迟的方式执行实际注册，随后的查找可能仍未看到该条目。 
	 * 例如，事务性高速缓存装饰器可能就是这种情况。 
	 * 使用{@link  #putIfAbsent}保证立即注册。 
	 *  
	 * @param 键与指定值关联的键
	 * @param 值与指定键关联的值
	 * @see  #putIfAbsent（Object，Object）
	 */
	void put(Object key, @Nullable Object value);

	/**
	 * Atomically associate the specified value with the specified key in this cache
	 * if it is not set already.
	 * <p>This is equivalent to:
	 * <pre><code>
	 * ValueWrapper existingValue = cache.get(key);
	 * if (existingValue == null) {
	 *     cache.put(key, value);
	 * }
	 * return existingValue;
	 * </code></pre>
	 * except that the action is performed atomically. While all out-of-the-box
	 * {@link CacheManager} implementations are able to perform the put atomically,
	 * the operation may also be implemented in two steps, e.g. with a check for
	 * presence and a subsequent put, in a non-atomic way. Check the documentation
	 * of the native cache implementation that you are using for more details.
	 * <p>The default implementation delegates to {@link #get(Object)} and
	 * {@link #put(Object, Object)} along the lines of the code snippet above.
	 * @param key the key with which the specified value is to be associated
	 * @param value the value to be associated with the specified key
	 * @return the value to which this cache maps the specified key (which may be
	 * {@code null} itself), or also {@code null} if the cache did not contain any
	 * mapping for that key prior to this call. Returning {@code null} is therefore
	 * an indicator that the given {@code value} has been associated with the key.
	 * @since 4.1
	 * @see #put(Object, Object)
	 */
	/**
	 * 如果尚未将指定值与该高速缓存中的指定键原子关联，则该值尚未设置。 
	 *  <p>这等效于：<pre> <code> ValueWrapper existingValue = cache.get（key）;如果（existingValue == null）{cache.put（key，value）;返回现存值； 
	 *  </ code> </ pre>，只是该操作是原子执行的。 
	 * 尽管所有开箱即用的{@link  CacheManager}实现都可以自动执行放置操作，但该操作也可以分两个步骤实现，例如以非原子方式检查存在性并随后放置。 
	 * 有关更多详细信息，请查看所使用的本机缓存实现的文档。 
	 *  <p>默认实现按照上面的代码片段委托给{@link  #get（Object）}和{@link  #put（Object，Object）}。 
	 *  
	 * @param 键要与指定值关联的键
	 * @param 值要与指定键关联的值
	 * @return 此缓存将指定键映射到的值（可以是{@code  null}本身），或者如果缓存在此调用之前不包含该键的任何映射，则还包含{@code  null}。 
	 * 因此，返回{@code  null}表示给定的{@code  value}已与键相关联。 
	 *  @since 4.1 
	 * @see  #put（对象，对象）
	 */
	@Nullable
	default ValueWrapper putIfAbsent(Object key, @Nullable Object value) {
		ValueWrapper existingValue = get(key);
		if (existingValue == null) {
			put(key, value);
		}
		return existingValue;
	}

	/**
	 * Evict the mapping for this key from this cache if it is present.
	 * <p>Actual eviction may be performed in an asynchronous or deferred
	 * fashion, with subsequent lookups possibly still seeing the entry.
	 * This may for example be the case with transactional cache decorators.
	 * Use {@link #evictIfPresent} for guaranteed immediate removal.
	 * @param key the key whose mapping is to be removed from the cache
	 * @see #evictIfPresent(Object)
	 */
	/**
	 * 如果存在，请从此缓存中退出此键的映射。 
	 *  <p>可以以异步或延迟的方式执行实际驱逐，随后的查找可能仍会看到该条目。 
	 * 例如，事务性高速缓存装饰器可能就是这种情况。 
	 * 使用{@link  #evictIfPresent}确保立即删除。 
	 *  
	 * @param 键要从缓存中删除其映射的键
	 * @see  #evictIfPresent（Object）
	 */
	void evict(Object key);

	/**
	 * Evict the mapping for this key from this cache if it is present,
	 * expecting the key to be immediately invisible for subsequent lookups.
	 * <p>The default implementation delegates to {@link #evict(Object)},
	 * returning {@code false} for not-determined prior presence of the key.
	 * Cache providers and in particular cache decorators are encouraged
	 * to perform immediate eviction if possible (e.g. in case of generally
	 * deferred cache operations within a transaction) and to reliably
	 * determine prior presence of the given key.
	 * @param key the key whose mapping is to be removed from the cache
	 * @return {@code true} if the cache was known to have a mapping for
	 * this key before, {@code false} if it did not (or if prior presence
	 * could not be determined)
	 * @since 5.2
	 * @see #evict(Object)
	 */
	/**
	 * 如果存在此密钥，则从此缓存中退出该映射，以期望该密钥在随后的查找中立即不可见。 
	 *  <p>默认实现将委托委托给{@link  #evict（Object）}，对于尚未确定的密钥在先存在，返回{@code  false}。 
	 * 鼓励高速缓存提供者，尤其是高速缓存装饰器，如果可能的话（例如，在事务中通常延迟的高速缓存操作的情况下）执行立即驱逐，并可靠地确定给定密钥的先前存在。 
	 *  
	 * @param 键，要从高速缓存中删除其映射的键
	 * @return  {@code  true}，如果以前知道高速缓存对此键具有映射，则{@code  false}自5.2 
	 * @see  #evict（Object）起（或者如果无法确定是否在先）
	 */
	default boolean evictIfPresent(Object key) {
		evict(key);
		return false;
	}

	/**
	 * Clear the cache through removing all mappings.
	 * <p>Actual clearing may be performed in an asynchronous or deferred
	 * fashion, with subsequent lookups possibly still seeing the entries.
	 * This may for example be the case with transactional cache decorators.
	 * Use {@link #invalidate()} for guaranteed immediate removal of entries.
	 * @see #invalidate()
	 */
	/**
	 * 通过删除所有映射来清除缓存。 
	 *  <p>可以以异步或延迟的方式执行实际清除，随后的查找可能仍会看到条目。 
	 * 例如，事务性高速缓存装饰器可能就是这种情况。 
	 * 使用{@link  #invalidate（）}可以保证立即删除条目。 
	 *  
	 * @see  #invalidate（）
	 */
	void clear();

	/**
	 * Invalidate the cache through removing all mappings, expecting all
	 * entries to be immediately invisible for subsequent lookups.
	 * @return {@code true} if the cache was known to have mappings before,
	 * {@code false} if it did not (or if prior presence of entries could
	 * not be determined)
	 * @since 5.2
	 * @see #clear()
	 */
	/**
	 * 通过删除所有映射来使缓存无效，并期望所有条目对于随后的查找立即不可见。 
	 *  
	 * @return  {@code  true}，如果已知缓存之前具有映射，则{@code  false}，如果没有（或者如果无法确定条目的先前存在），则从5.2开始@> #clear（）
	 */
	default boolean invalidate() {
		clear();
		return false;
	}


	/**
	 * A (wrapper) object representing a cache value.
	 */
	/**
	 * 代表缓存值的（包装）对象。 
	 * 
	 */
	@FunctionalInterface
	interface ValueWrapper {

		/**
		 * Return the actual value in the cache.
		 */
		/**
		 * 返回缓存中的实际值。 
		 * 
		 */
		@Nullable
		Object get();
	}


	/**
	 * Wrapper exception to be thrown from {@link #get(Object, Callable)}
	 * in case of the value loader callback failing with an exception.
	 * @since 4.3
	 */
	/**
	 * 如果值加载程序回调因异常而失败，则从{@link  #get（Object，Callable）}引发包装器异常。 
	 *  @4.3起
	 */
	@SuppressWarnings("serial")
	class ValueRetrievalException extends RuntimeException {

		@Nullable
		private final Object key;

		public ValueRetrievalException(@Nullable Object key, Callable<?> loader, Throwable ex) {
			super(String.format("Value for key '%s' could not be loaded using '%s'", key, loader), ex);
			this.key = key;
		}

		@Nullable
		public Object getKey() {
			return this.key;
		}
	}

}
