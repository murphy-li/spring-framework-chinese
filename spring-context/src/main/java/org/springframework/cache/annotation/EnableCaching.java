/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.annotation.AdviceMode;
import org.springframework.context.annotation.Import;
import org.springframework.core.Ordered;

/**
 * Enables Spring's annotation-driven cache management capability, similar to the
 * support found in Spring's {@code <cache:*>} XML namespace. To be used together
 * with @{@link org.springframework.context.annotation.Configuration Configuration}
 * classes as follows:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableCaching
 * public class AppConfig {
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         // configure and return a class having &#064;Cacheable methods
 *         return new MyService();
 *     }
 *
 *     &#064;Bean
 *     public CacheManager cacheManager() {
 *         // configure and return an implementation of Spring's CacheManager SPI
 *         SimpleCacheManager cacheManager = new SimpleCacheManager();
 *         cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache("default")));
 *         return cacheManager;
 *     }
 * }</pre>
 *
 * <p>For reference, the example above can be compared to the following Spring XML
 * configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;cache:annotation-driven/&gt;
 *
 *     &lt;bean id="myService" class="com.foo.MyService"/&gt;
 *
 *     &lt;bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager"&gt;
 *         &lt;property name="caches"&gt;
 *             &lt;set&gt;
 *                 &lt;bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"&gt;
 *                     &lt;property name="name" value="default"/&gt;
 *                 &lt;/bean&gt;
 *             &lt;/set&gt;
 *         &lt;/property&gt;
 *     &lt;/bean&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * In both of the scenarios above, {@code @EnableCaching} and {@code
 * <cache:annotation-driven/>} are responsible for registering the necessary Spring
 * components that power annotation-driven cache management, such as the
 * {@link org.springframework.cache.interceptor.CacheInterceptor CacheInterceptor} and the
 * proxy- or AspectJ-based advice that weaves the interceptor into the call stack when
 * {@link org.springframework.cache.annotation.Cacheable @Cacheable} methods are invoked.
 *
 * <p>If the JSR-107 API and Spring's JCache implementation are present, the necessary
 * components to manage standard cache annotations are also registered. This creates the
 * proxy- or AspectJ-based advice that weaves the interceptor into the call stack when
 * methods annotated with {@code CacheResult}, {@code CachePut}, {@code CacheRemove} or
 * {@code CacheRemoveAll} are invoked.
 *
 * <p><strong>A bean of type {@link org.springframework.cache.CacheManager CacheManager}
 * must be registered</strong>, as there is no reasonable default that the framework can
 * use as a convention. And whereas the {@code <cache:annotation-driven>} element assumes
 * a bean <em>named</em> "cacheManager", {@code @EnableCaching} searches for a cache
 * manager bean <em>by type</em>. Therefore, naming of the cache manager bean method is
 * not significant.
 *
 * <p>For those that wish to establish a more direct relationship between
 * {@code @EnableCaching} and the exact cache manager bean to be used,
 * the {@link CachingConfigurer} callback interface may be implemented.
 * Notice the {@code @Override}-annotated methods below:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableCaching
 * public class AppConfig extends CachingConfigurerSupport {
 *
 *     &#064;Bean
 *     public MyService myService() {
 *         // configure and return a class having &#064;Cacheable methods
 *         return new MyService();
 *     }
 *
 *     &#064;Bean
 *     &#064;Override
 *     public CacheManager cacheManager() {
 *         // configure and return an implementation of Spring's CacheManager SPI
 *         SimpleCacheManager cacheManager = new SimpleCacheManager();
 *         cacheManager.setCaches(Arrays.asList(new ConcurrentMapCache("default")));
 *         return cacheManager;
 *     }
 *
 *     &#064;Bean
 *     &#064;Override
 *     public KeyGenerator keyGenerator() {
 *         // configure and return an implementation of Spring's KeyGenerator SPI
 *         return new MyKeyGenerator();
 *     }
 * }</pre>
 *
 * This approach may be desirable simply because it is more explicit, or it may be
 * necessary in order to distinguish between two {@code CacheManager} beans present in the
 * same container.
 *
 * <p>Notice also the {@code keyGenerator} method in the example above. This allows for
 * customizing the strategy for cache key generation, per Spring's {@link
 * org.springframework.cache.interceptor.KeyGenerator KeyGenerator} SPI. Normally,
 * {@code @EnableCaching} will configure Spring's
 * {@link org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}
 * for this purpose, but when implementing {@code CachingConfigurer}, a key generator
 * must be provided explicitly. Return {@code null} or {@code new SimpleKeyGenerator()}
 * from this method if no customization is necessary.
 *
 * <p>{@link CachingConfigurer} offers additional customization options: it is recommended
 * to extend from {@link org.springframework.cache.annotation.CachingConfigurerSupport
 * CachingConfigurerSupport} that provides a default implementation for all methods which
 * can be useful if you do not need to customize everything. See {@link CachingConfigurer}
 * Javadoc for further details.
 *
 * <p>The {@link #mode} attribute controls how advice is applied: If the mode is
 * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior
 * of the proxying. Please note that proxy mode allows for interception of calls through
 * the proxy only; local calls within the same class cannot get intercepted that way.
 *
 * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the
 * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in
 * this case the {@code spring-aspects} module JAR must be present on the classpath, with
 * compile-time weaving or load-time weaving applying the aspect to the affected classes.
 * There is no proxy involved in such a scenario; local calls will be intercepted as well.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @see CachingConfigurer
 * @see CachingConfigurationSelector
 * @see ProxyCachingConfiguration
 * @see org.springframework.cache.aspectj.AspectJCachingConfiguration
 */
/**
 * 启用S​​pring的注释驱动的缓存管理功能，类似于Spring的{<< @code >> <cache：>} XML名称空间中的支持。 
 * 可以与@{<< @link >> org.springframework.context.annotation.Configuration配置}类一起使用，如下所示：<pre class ="code"> @Configuration @EnableCaching公共类AppConfig {@Bean public MyService myService（ } {//配置并返回具有@Cacheable方法的类，返回new MyService（）; } @Bean public CacheManager cacheManager（）{//配置并返回Spring的CacheManager的实现SPI SimpleCacheManager cacheManager = new SimpleCacheManager（）; cacheManager.setCaches（Arrays.asList（new ConcurrentMapCache（"default"））））;返回cacheManager; }} </ pre> <p>作为参考，可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <cache：annotation-driven /> <bean id ="myService "class ="com.foo.MyService"/> <bean id ="cacheManager"class ="org.springframework.cache.support.SimpleCacheManager"> <property name ="caches"> <set> <bean class ="org .springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"> <property name ="name"value ="default"/> </ bean> </ set> </ property> </ bean> </ beans> </ pre>在上述方案中，{<< @code >> @EnableCaching}和{<< @code >> <cache：annotation-driven />}负责注册必要的Spring组件，这些组件可为注释驱动的缓存管理提供支持，例如{<< @link >> org.springframework.cache.interceptor.CacheInterceptor CacheInterceptor}和基于代理或基于AspectJ的建议，它们在{<< @link >> org.springframework.cache时将拦截器编织到调用堆栈中。 
 * 注解。 
 * 调用Cacheable @Cacheable}方法。 
 *  <p>如果存在JSR-107 API和Spring的JCache实现，则还将注册用于管理标准缓存注释的必要组件。 
 * 这会创建基于代理或基于AspectJ的建议，当使用{<< @code >> CacheResult}，{<< @code >> CachePut}，{<< @code >> CacheRemove注释方法时，将拦截器编织到调用堆栈中}或{<< @code >> CacheRemoveAll}被调用。 
 *  <p> <strong>必须注册类型为{<< @link >> org.springframework.cache.CacheManager CacheManager}的bean </ strong>，因为没有合理的默认值可以将该框架用作约定。 
 * 尽管{<< @code >> <cache：annotation-driven>}元素假定一个名为<em> </ em>的bean"cacheManager"，但{<< @code >> @EnableCaching}搜索一个缓存管理器bean <em>按类型</ em>。 
 * 因此，缓存管理器bean方法的命名并不重要。 
 *  <p>对于那些希望在{<< @code >> @EnableCaching}和要使用的确切缓存管理器bean之间建立更直接关系的用户，可以实现{<< @link >> CachingConfigurer}回调接口。 
 * 请注意下面的{<< @code >> @Override}注释方法：<pre class ="code"> @Configuration @EnableCaching公共类AppConfig扩展了CachingConfigurerSupport {@Bean public MyService myService（）{//配置并返回一个类使用@Cacheable方法返回新的MyService（）; } @Bean @Override public CacheManager cacheManager（）{//配置并返回Spring的CacheManager的实现SPI SimpleCacheManager cacheManager = new SimpleCacheManager（）; cacheManager.setCaches（Arrays.asList（new ConcurrentMapCache（"default"））））;返回cacheManager; } @Bean @Override public KeyGenerator keyGenerator（）{//配置并返回Spring的KeyGenerator的实现SPI return new MyKeyGenerator（）; }} </ pre>这种方法可能是简单的，因为它更加明确，可能是合乎需要的，或者可能是有必要的，以便区分同一容器中存在的两个{<< @code >> CacheManager} bean。 
 *  <p>还要注意上面示例中的{<< @code >> keyGenerator}方法。 
 * 这允许根据Spring的{<< @link >> org.springframework.cache.interceptor.KeyGenerator KeyGenerator} SPI自定义缓存密钥生成策略。 
 * 通常，{<< @@code >> @EnableCaching}将为此配置Spring的{<< @link >> org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}，但是在实现{<< @code >> CachingConfigurer}时，必须明确提供密钥生成器。 
 * 如果不需要自定义，则从此方法返回{<< @code >> null}或{<< @code >> new SimpleKeyGenerator（）}。 
 *  <p> {<< @link >> CachingConfigurer}提供了其他自定义选项：建议从{<< @link >> org.springframework.cache.annotation.CachingConfigurerSupport CachingConfigurerSupport}扩展，该方法为所有方法提供了默认实现如果您不需要自定义所有内容，则可能会很有用。 
 * 有关更多详细信息，请参见{<< @link >> CachingConfigurer} Javadoc。 
 *  <p> {<< @link >> #mode}属性控制如何应用建议：如果模式为{<< @link >> AdviceMode＃PROXY}（默认设置），则其他属性控制建议的行为。 
 * 代理
 */
/**
 * 请注意，代理模式仅允许通过代理拦截呼叫； 
 * 同一类中的本地调用无法以这种方式被拦截。 
 *  <p>请注意，如果将{<< @link >> plain #mode}设置为{<< @link >> AdviceMode＃ASPECTJ}，则{<< @link >> #proxyTargetClass}属性的值将被忽略。 
 * 还要注意，在这种情况下，{<< @code >> spring-aspects}模块JAR必须存在于类路径中，并通过编译时编织或加载时编织将方面应用于受影响的类。 
 * 在这种情况下不涉及任何代理； 
 * 本地电话也会被拦截。 
 *  << @author >>克里斯·比姆斯（Chris Beams）<< @author >> Juergen Hoeller @始于3.1 << 
 * @see >> CachingConfigurer << 
 * @see >> CachingConfigurationSelector << 
 * @see >> ProxyCachingConfiguration << 
 * @see >> org.springframework。 
 *  cache.aspectj.AspectJCachingConfiguration
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(CachingConfigurationSelector.class)
public @interface EnableCaching {

	/**
	 * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed
	 * to standard Java interface-based proxies. The default is {@code false}. <strong>
	 * Applicable only if {@link #mode()} is set to {@link AdviceMode#PROXY}</strong>.
	 * <p>Note that setting this attribute to {@code true} will affect <em>all</em>
	 * Spring-managed beans requiring proxying, not just those marked with {@code @Cacheable}.
	 * For example, other beans marked with Spring's {@code @Transactional} annotation will
	 * be upgraded to subclass proxying at the same time. This approach has no negative
	 * impact in practice unless one is explicitly expecting one type of proxy vs another,
	 * e.g. in tests.
	 */
	/**
	 * 指示与基于标准Java接口的代理相反，是否要创建基于子类（CGLIB）的代理。 
	 * 默认值为{@code  false}。 
	 *  <strong>仅在{@link  #mode（）}设置为{@link  AdviceMode＃PROXY} </ strong>时适用。 
	 *  <p>请注意，将此属性设置为{@code  true}将影响<em>所有</ em>需要代理的Spring管理的bean，而不仅仅是标记为{@code  @Cacheable}的bean。 
	 * 例如，其他标有Spring的{@code  @Transactional}注释的bean将同时升级为子类代理。 
	 * 这种方法在实践中不会产生负面影响，除非一个人明确地期望一种代理相对于另一种，例如。 
	 * 在测试中。 
	 * 
	 */
	boolean proxyTargetClass() default false;

	/**
	 * Indicate how caching advice should be applied.
	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>
	 * Please note that proxy mode allows for interception of calls through the proxy
	 * only. Local calls within the same class cannot get intercepted that way;
	 * a caching annotation on such a method within a local call will be ignored
	 * since Spring's interceptor does not even kick in for such a runtime scenario.
	 * For a more advanced mode of interception, consider switching this to
	 * {@link AdviceMode#ASPECTJ}.
	 */
	/**
	 * 指示应如何应用缓存建议。 
	 *  <p> <b>默认值为{@link  AdviceMode＃PROXY}。 
	 * </ b>请注意，代理模式仅允许通过代理拦截呼叫。 
	 * 同一类中的本地调用不能以这种方式被拦截； 
	 * 在本地调用中，此类方法上的缓存注释将被忽略，因为Spring的拦截器甚至不会在这种运行时场景中起作用。 
	 * 有关更高级的拦截模式，请考虑将其切换为{@link  AdviceMode＃ASPECTJ}。 
	 * 
	 */
	AdviceMode mode() default AdviceMode.PROXY;

	/**
	 * Indicate the ordering of the execution of the caching advisor
	 * when multiple advices are applied at a specific joinpoint.
	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE}.
	 */
	/**
	 * 指示在特定联接点上应用多个建议时，高速缓存顾问程序的执行顺序。 
	 *  <p>默认值为{@link  Ordered＃LOWEST_PRECEDENCE}。 
	 * 
	 */
	int order() default Ordered.LOWEST_PRECEDENCE;

}
