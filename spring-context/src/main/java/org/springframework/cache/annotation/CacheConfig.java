/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * {@code @CacheConfig} provides a mechanism for sharing common cache-related
 * settings at the class level.
 *
 * <p>When this annotation is present on a given class, it provides a set
 * of default settings for any cache operation defined in that class.
 *
 * @author Stephane Nicoll
 * @author Sam Brannen
 * @since 4.1
 */
/**
 * {@code  @CacheConfig}提供了一种在类级别共享常见的与缓存相关的设置的机制。 
 *  <p>当给定类上存在此注解时，它将为该类中定义的任何缓存操作提供一组默认设置。 
 *  @author  Stephane Nicoll @author  Sam Brannen @始于4.1
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface CacheConfig {

	/**
	 * Names of the default caches to consider for caching operations defined
	 * in the annotated class.
	 * <p>If none is set at the operation level, these are used instead of the default.
	 * <p>May be used to determine the target cache (or caches), matching the
	 * qualifier value or the bean names of a specific bean definition.
	 */
	/**
	 * 要为带注释的类中定义的缓存操作考虑的默认缓存的名称。 
	 *  <p>如果在操作级别未设置任何值，则将使用这些值而不是默认值。 
	 *  <p>可用于确定目标高速缓存（一个或多个高速缓存），与限定符值或特定bean定义的bean名称匹配。 
	 * 
	 */
	String[] cacheNames() default {};

	/**
	 * The bean name of the default {@link org.springframework.cache.interceptor.KeyGenerator} to
	 * use for the class.
	 * <p>If none is set at the operation level, this one is used instead of the default.
	 * <p>The key generator is mutually exclusive with the use of a custom key. When such key is
	 * defined for the operation, the value of this key generator is ignored.
	 */
	/**
	 * 用于该类的默认{@link  org.springframework.cache.interceptor.KeyGenerator}的bean名称。 
	 *  <p>如果在操作级别未设置任何值，则使用该值代替默认值。 
	 *  <p>密钥生成器与自定义密钥互斥。 
	 * 当为操作定义了此类键时，将忽略此键生成器的值。 
	 * 
	 */
	String keyGenerator() default "";

	/**
	 * The bean name of the custom {@link org.springframework.cache.CacheManager} to use to
	 * create a default {@link org.springframework.cache.interceptor.CacheResolver} if none
	 * is set already.
	 * <p>If no resolver and no cache manager are set at the operation level, and no cache
	 * resolver is set via {@link #cacheResolver}, this one is used instead of the default.
	 * @see org.springframework.cache.interceptor.SimpleCacheResolver
	 */
	/**
	 * 自定义{@link  org.springframework.cache.CacheManager}的Bean名称，用于创建默认的{@link  org.springframework.cache.interceptor.CacheResolver}（如果尚未设置）。 
	 *  <p>如果在操作级别未设置解析器和缓存管理器，并且未通过{@link  #cacheResolver}设置缓存解析器，则使用该解析器而不是默认值。 
	 *  
	 * @see  org.springframework.cache.interceptor.SimpleCacheResolver
	 */
	String cacheManager() default "";

	/**
	 * The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.
	 * <p>If no resolver and no cache manager are set at the operation level, this one is used
	 * instead of the default.
	 */
	/**
	 * 要使用的定制{@link  org.springframework.cache.interceptor.CacheResolver}的bean名称。 
	 *  <p>如果在操作级别未设置解析器和缓存管理器，则使用该解析器而不是默认值。 
	 * 
	 */
	String cacheResolver() default "";

}
