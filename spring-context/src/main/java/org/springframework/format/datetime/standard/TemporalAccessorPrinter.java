/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format.datetime.standard;

import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.Locale;

import org.springframework.format.Printer;

/**
 * {@link Printer} implementation for a JSR-310 {@link java.time.temporal.TemporalAccessor},
 * using a {@link java.time.format.DateTimeFormatter}) (the contextual one, if available).
 *
 * @author Juergen Hoeller
 * @since 4.0
 * @see DateTimeContextHolder#getFormatter
 * @see java.time.format.DateTimeFormatter#format(java.time.temporal.TemporalAccessor)
 */
/**
 * 适用于JSR-310 {@link  java.time.temporal.TemporalAccessor}的{@link 打印机}实现，使用{@link  java.time.format.DateTimeFormatter}）（上下文相关，如果有的话） ）。 
 *  @author  Juergen Hoeller @始于4.0 
 * @see  DateTimeContextHolder＃getFormatter 
 * @see  java.time.format.DateTimeFormatter＃format（java.time.temporal.TemporalAccessor）
 */
public final class TemporalAccessorPrinter implements Printer<TemporalAccessor> {

	private final DateTimeFormatter formatter;


	/**
	 * Create a new TemporalAccessorPrinter.
	 * @param formatter the base DateTimeFormatter instance
	 */
	/**
	 * 创建一个新的TemporalAccessorPrinter。 
	 *  
	 * @param 格式化基本DateTimeFormatter实例
	 */
	public TemporalAccessorPrinter(DateTimeFormatter formatter) {
		this.formatter = formatter;
	}


	@Override
	public String print(TemporalAccessor partial, Locale locale) {
		return DateTimeContextHolder.getFormatter(this.formatter, locale).format(partial);
	}

}
