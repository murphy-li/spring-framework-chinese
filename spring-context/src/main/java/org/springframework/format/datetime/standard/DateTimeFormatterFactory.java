/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format.datetime.standard;

import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.format.ResolverStyle;
import java.util.TimeZone;

import org.springframework.format.annotation.DateTimeFormat.ISO;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

/**
 * Factory that creates a JSR-310 {@link java.time.format.DateTimeFormatter}.
 *
 * <p>Formatters will be created using the defined {@link #setPattern pattern},
 * {@link #setIso ISO}, and <code>xxxStyle</code> methods (considered in that order).
 *
 * @author Juergen Hoeller
 * @author Phillip Webb
 * @since 4.0
 * @see #createDateTimeFormatter()
 * @see #createDateTimeFormatter(DateTimeFormatter)
 * @see #setPattern
 * @see #setIso
 * @see #setDateStyle
 * @see #setTimeStyle
 * @see #setDateTimeStyle
 * @see DateTimeFormatterFactoryBean
 */
/**
 * 创建JSR-310 {@link  java.time.format.DateTimeFormatter}的工厂。 
 *  <p>格式化程序将使用定义的{@link  #setPattern模式}，{<@link> #setIso ISO}和<code> xxxStyle </ code>方法（按顺序考虑）创建。 
 *  @author 尤尔根·霍勒（Juergen Hoeller）@author 菲利普·韦伯（Phillip Webb）@始于4.0 
 * @see  #createDateTimeFormatter（） 
 * @see  #setTimeStyle 
 * @see  #setDateTimeStyle 
 * @see  DateTimeFormatterFactoryBean
 */
public class DateTimeFormatterFactory {

	@Nullable
	private String pattern;

	@Nullable
	private ISO iso;

	@Nullable
	private FormatStyle dateStyle;

	@Nullable
	private FormatStyle timeStyle;

	@Nullable
	private TimeZone timeZone;


	/**
	 * Create a new {@code DateTimeFormatterFactory} instance.
	 */
	/**
	 * 创建一个新的{@code  DateTimeFormatterFactory}实例。 
	 * 
	 */
	public DateTimeFormatterFactory() {
	}

	/**
	 * Create a new {@code DateTimeFormatterFactory} instance.
	 * @param pattern the pattern to use to format date values
	 */
	/**
	 * 创建一个新的{@code  DateTimeFormatterFactory}实例。 
	 *  
	 * @param 模式化用于格式化日期值的模式
	 */
	public DateTimeFormatterFactory(String pattern) {
		this.pattern = pattern;
	}


	/**
	 * Set the pattern to use to format date values.
	 * @param pattern the format pattern
	 */
	/**
	 * 设置用于格式化日期值的模式。 
	 *  
	 * @param 模式化格式模式
	 */
	public void setPattern(String pattern) {
		this.pattern = pattern;
	}

	/**
	 * Set the ISO format used to format date values.
	 * @param iso the ISO format
	 */
	/**
	 * 设置用于格式化日期值的ISO格式。 
	 *  
	 * @param  iso ISO格式
	 */
	public void setIso(ISO iso) {
		this.iso = iso;
	}

	/**
	 * Set the style to use for date types.
	 */
	/**
	 * 设置用于日期类型的样式。 
	 * 
	 */
	public void setDateStyle(FormatStyle dateStyle) {
		this.dateStyle = dateStyle;
	}

	/**
	 * Set the style to use for time types.
	 */
	/**
	 * 设置用于时间类型的样式。 
	 * 
	 */
	public void setTimeStyle(FormatStyle timeStyle) {
		this.timeStyle = timeStyle;
	}

	/**
	 * Set the style to use for date and time types.
	 */
	/**
	 * 设置用于日期和时间类型的样式。 
	 * 
	 */
	public void setDateTimeStyle(FormatStyle dateTimeStyle) {
		this.dateStyle = dateTimeStyle;
		this.timeStyle = dateTimeStyle;
	}

	/**
	 * Set the two characters to use to format date values, in Joda-Time style.
	 * <p>The first character is used for the date style; the second is for
	 * the time style. Supported characters are:
	 * <ul>
	 * <li>'S' = Small</li>
	 * <li>'M' = Medium</li>
	 * <li>'L' = Long</li>
	 * <li>'F' = Full</li>
	 * <li>'-' = Omitted</li>
	 * </ul>
	 * <p>This method mimics the styles supported by Joda-Time. Note that
	 * JSR-310 natively favors {@link java.time.format.FormatStyle} as used for
	 * {@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}.
	 * @param style two characters from the set {"S", "M", "L", "F", "-"}
	 */
	/**
	 * 设置两个字符以用Joda-Time样式格式化日期值。 
	 *  <p>第一个字符用于日期样式； 
	 * 第二个是时间风格。 
	 * 支持的字符为：<ul> <li>'S'=小</ li> <li>'M'=中</ li> <li>'L'=长</ li> <li>'F'= Full </ li> <li>'-'=省略</ li> </ ul> <p>此方法模仿Joda-Time支持的样式。 
	 * 请注意，JSR-310固有地倾向于将{@link  java.time.format.FormatStyle}用于{@link  #setDateStyle}，{<@link> #setTimeStyle}和{@link  #setDateTimeStyle}。 
	 *  
	 * @param 设置{{S"，"M"，"L"，"F"，"-"}中两个字符的样式
	 */
	public void setStylePattern(String style) {
		Assert.isTrue(style.length() == 2, "Style pattern must consist of two characters");
		this.dateStyle = convertStyleCharacter(style.charAt(0));
		this.timeStyle = convertStyleCharacter(style.charAt(1));
	}

	@Nullable
	private FormatStyle convertStyleCharacter(char c) {
		switch (c) {
			case 'S': return FormatStyle.SHORT;
			case 'M': return FormatStyle.MEDIUM;
			case 'L': return FormatStyle.LONG;
			case 'F': return FormatStyle.FULL;
			case '-': return null;
			default: throw new IllegalArgumentException("Invalid style character '" + c + "'");
		}
	}

	/**
	 * Set the {@code TimeZone} to normalize the date values into, if any.
	 * @param timeZone the time zone
	 */
	/**
	 * 设置{@code  TimeZone}以将日期值归一化（如果有）。 
	 *  
	 * @param  timeZone时区
	 */
	public void setTimeZone(TimeZone timeZone) {
		this.timeZone = timeZone;
	}


	/**
	 * Create a new {@code DateTimeFormatter} using this factory.
	 * <p>If no specific pattern or style has been defined,
	 * {@link FormatStyle#MEDIUM medium date time format} will be used.
	 * @return a new date time formatter
	 * @see #createDateTimeFormatter(DateTimeFormatter)
	 */
	/**
	 * 使用此工厂创建一个新的{@code  DateTimeFormatter}。 
	 *  <p>如果未定义特定的样式或样式，将使用{@link  FormatStyle＃MEDIUM中日期时间格式}。 
	 *  
	 * @return 一个新的日期时间格式化程序
	 * @see  #createDateTimeFormatter（DateTimeFormatter）
	 */
	public DateTimeFormatter createDateTimeFormatter() {
		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));
	}

	/**
	 * Create a new {@code DateTimeFormatter} using this factory.
	 * <p>If no specific pattern or style has been defined,
	 * the supplied {@code fallbackFormatter} will be used.
	 * @param fallbackFormatter the fall-back formatter to use
	 * when no specific factory properties have been set
	 * @return a new date time formatter
	 */
	/**
	 * 使用此工厂创建一个新的{@code  DateTimeFormatter}。 
	 *  <p>如果未定义特定的样式或样式，将使用提供的{@code  fallbackFormatter}。 
	 *  
	 * @param  fallbackFormatter在未设置特定工厂属性时使用的后备格式化程序
	 * @return 新的日期时间格式化程序
	 */
	public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {
		DateTimeFormatter dateTimeFormatter = null;
		if (StringUtils.hasLength(this.pattern)) {
			// Using strict parsing to align with Joda-Time and standard DateFormat behavior:
			// otherwise, an overflow like e.g. Feb 29 for a non-leap-year wouldn't get rejected.
			// However, with strict parsing, a year digit needs to be specified as 'u'...
			String patternToUse = StringUtils.replace(this.pattern, "yy", "uu");
			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT);
		}
		else if (this.iso != null && this.iso != ISO.NONE) {
			switch (this.iso) {
				case DATE:
					dateTimeFormatter = DateTimeFormatter.ISO_DATE;
					break;
				case TIME:
					dateTimeFormatter = DateTimeFormatter.ISO_TIME;
					break;
				case DATE_TIME:
					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME;
					break;
				default:
					throw new IllegalStateException("Unsupported ISO format: " + this.iso);
			}
		}
		else if (this.dateStyle != null && this.timeStyle != null) {
			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle);
		}
		else if (this.dateStyle != null) {
			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle);
		}
		else if (this.timeStyle != null) {
			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle);
		}

		if (dateTimeFormatter != null && this.timeZone != null) {
			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId());
		}
		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter);
	}

}
