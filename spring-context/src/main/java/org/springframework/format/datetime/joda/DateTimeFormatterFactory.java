/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format.datetime.joda;

import java.util.TimeZone;

import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;

import org.springframework.format.annotation.DateTimeFormat.ISO;
import org.springframework.lang.Nullable;
import org.springframework.util.StringUtils;

/**
 * Factory that creates a Joda-Time {@link DateTimeFormatter}.
 *
 * <p>Formatters will be created using the defined {@link #setPattern pattern},
 * {@link #setIso ISO}, and {@link #setStyle style} methods (considered in that order).
 *
 * @author Phillip Webb
 * @author Sam Brannen
 * @since 3.2
 * @see #createDateTimeFormatter()
 * @see #createDateTimeFormatter(DateTimeFormatter)
 * @see #setPattern
 * @see #setStyle
 * @see #setIso
 * @see DateTimeFormatterFactoryBean
 */
/**
 * 创建Joda-Time {@link  DateTimeFormatter}的工厂。 
 *  <p>格式化程序将使用定义的{@link  #setPattern模式}，{<@link> #setIso ISO}和{@link  #setStyle style}方法（按顺序考虑）创建。 
 *  @author  Phillip Webb @author  Sam Brannen @since 3.2起
 * @see  #createDateTimeFormatter（）
 * @see  #createDateTimeFormatter（DateTimeFormatter）
 * @see  #setPattern 
 * @see  #setStyle 
 * @see  #setIso 
 * @see  DateTimeFormatterFactoryBean
 */
public class DateTimeFormatterFactory {

	@Nullable
	private String pattern;

	@Nullable
	private ISO iso;

	@Nullable
	private String style;

	@Nullable
	private TimeZone timeZone;


	/**
	 * Create a new {@code DateTimeFormatterFactory} instance.
	 */
	/**
	 * 创建一个新的{@code  DateTimeFormatterFactory}实例。 
	 * 
	 */
	public DateTimeFormatterFactory() {
	}

	/**
	 * Create a new {@code DateTimeFormatterFactory} instance.
	 * @param pattern the pattern to use to format date values
	 */
	/**
	 * 创建一个新的{@code  DateTimeFormatterFactory}实例。 
	 *  
	 * @param 模式化用于格式化日期值的模式
	 */
	public DateTimeFormatterFactory(String pattern) {
		this.pattern = pattern;
	}


	/**
	 * Set the pattern to use to format date values.
	 * @param pattern the format pattern
	 */
	/**
	 * 设置用于格式化日期值的模式。 
	 *  
	 * @param 模式化格式模式
	 */
	public void setPattern(String pattern) {
		this.pattern = pattern;
	}

	/**
	 * Set the ISO format used to format date values.
	 * @param iso the ISO format
	 */
	/**
	 * 设置用于格式化日期值的ISO格式。 
	 *  
	 * @param  iso ISO格式
	 */
	public void setIso(ISO iso) {
		this.iso = iso;
	}

	/**
	 * Set the two characters to use to format date values, in Joda-Time style.
	 * <p>The first character is used for the date style; the second is for
	 * the time style. Supported characters are:
	 * <ul>
	 * <li>'S' = Small</li>
	 * <li>'M' = Medium</li>
	 * <li>'L' = Long</li>
	 * <li>'F' = Full</li>
	 * <li>'-' = Omitted</li>
	 * </ul>
	 * @param style two characters from the set {"S", "M", "L", "F", "-"}
	 */
	/**
	 * 设置两个字符以用Joda-Time样式格式化日期值。 
	 *  <p>第一个字符用于日期样式； 
	 * 第二个是时间风格。 
	 * 支持的字符为：<ul> <li>'S'=小</ li> <li>'M'=中</ li> <li>'L'=长</ li> <li>'F'=完整</ li> <li>'-'=省略</ li> </ ul> 
	 * @param 从{{S"，"M"，"L"，"F"，"- "}
	 */
	public void setStyle(String style) {
		this.style = style;
	}

	/**
	 * Set the {@code TimeZone} to normalize the date values into, if any.
	 * @param timeZone the time zone
	 */
	/**
	 * 设置{@code  TimeZone}以将日期值归一化（如果有）。 
	 *  
	 * @param  timeZone时区
	 */
	public void setTimeZone(TimeZone timeZone) {
		this.timeZone = timeZone;
	}


	/**
	 * Create a new {@code DateTimeFormatter} using this factory.
	 * <p>If no specific pattern or style has been defined,
	 * {@link DateTimeFormat#mediumDateTime() medium date time format} will be used.
	 * @return a new date time formatter
	 * @see #createDateTimeFormatter(DateTimeFormatter)
	 */
	/**
	 * 使用此工厂创建一个新的{@code  DateTimeFormatter}。 
	 *  <p>如果未定义任何特定的样式或样式，将使用{@link  DateTimeFormat＃mediumDateTime（）中等日期时间格式}。 
	 *  
	 * @return 一个新的日期时间格式化程序
	 * @see  #createDateTimeFormatter（DateTimeFormatter）
	 */
	public DateTimeFormatter createDateTimeFormatter() {
		return createDateTimeFormatter(DateTimeFormat.mediumDateTime());
	}

	/**
	 * Create a new {@code DateTimeFormatter} using this factory.
	 * <p>If no specific pattern or style has been defined,
	 * the supplied {@code fallbackFormatter} will be used.
	 * @param fallbackFormatter the fall-back formatter to use
	 * when no specific factory properties have been set
	 * @return a new date time formatter
	 */
	/**
	 * 使用此工厂创建一个新的{@code  DateTimeFormatter}。 
	 *  <p>如果未定义特定的样式或样式，将使用提供的{@code  fallbackFormatter}。 
	 *  
	 * @param  fallbackFormatter在未设置特定工厂属性时使用的后备格式化程序
	 * @return 新的日期时间格式化程序
	 */
	public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {
		DateTimeFormatter dateTimeFormatter = null;
		if (StringUtils.hasLength(this.pattern)) {
			dateTimeFormatter = DateTimeFormat.forPattern(this.pattern);
		}
		else if (this.iso != null && this.iso != ISO.NONE) {
			switch (this.iso) {
				case DATE:
					dateTimeFormatter = ISODateTimeFormat.date();
					break;
				case TIME:
					dateTimeFormatter = ISODateTimeFormat.time();
					break;
				case DATE_TIME:
					dateTimeFormatter = ISODateTimeFormat.dateTime();
					break;
				default:
					throw new IllegalStateException("Unsupported ISO format: " + this.iso);
			}
		}
		else if (StringUtils.hasLength(this.style)) {
			dateTimeFormatter = DateTimeFormat.forStyle(this.style);
		}

		if (dateTimeFormatter != null && this.timeZone != null) {
			dateTimeFormatter = dateTimeFormatter.withZone(DateTimeZone.forTimeZone(this.timeZone));
		}
		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter);
	}

}
