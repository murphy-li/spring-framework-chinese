/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format;

import java.lang.annotation.Annotation;
import java.util.Set;

/**
 * A factory that creates formatters to format values of fields annotated with a particular
 * {@link Annotation}.
 *
 * <p>For example, a {@code DateTimeFormatAnnotationFormatterFactory} might create a formatter
 * that formats {@code Date} values set on fields annotated with {@code @DateTimeFormat}.
 *
 * @author Keith Donald
 * @since 3.0
 * @param <A> the annotation type that should trigger formatting
 */
/**
 * 一个工厂，该工厂创建格式化程序以格式化以特定{@link 注释}注释的字段的值。 
 *  <p>例如，一个{@code  DateTimeFormatAnnotationFormatterFactory}可能会创建一个格式化程序，该格式化程序格式化在以{@code  @DateTimeFormat}注释的字段上设置的{@code  Date}值。 
 *  @author  Keith Donald @since 3.0 
 * @param  <A>应该触发格式设置的注释类型
 */
public interface AnnotationFormatterFactory<A extends Annotation> {

	/**
	 * The types of fields that may be annotated with the &lt;A&gt; annotation.
	 */
	/**
	 * 可以用<A>注释注释的字段类型。 
	 * 
	 */
	Set<Class<?>> getFieldTypes();

	/**
	 * Get the Printer to print the value of a field of {@code fieldType} annotated with
	 * {@code annotation}.
	 * <p>If the type T the printer accepts is not assignable to {@code fieldType}, a
	 * coercion from {@code fieldType} to T will be attempted before the Printer is invoked.
	 * @param annotation the annotation instance
	 * @param fieldType the type of field that was annotated
	 * @return the printer
	 */
	/**
	 * 获取打印机以打印带有{@code 注解}注解的{@code  fieldType}字段的值。 
	 *  <p>如果无法将打印机接受的T类型分配给{@code  fieldType}，则在调用打印机之前将尝试从{@code  fieldType}强制转换为T。 
	 *  
	 * @param 注释注释实例
	 * @param 字段键入被注释的字段的类型
	 * @return 打印机
	 */
	Printer<?> getPrinter(A annotation, Class<?> fieldType);

	/**
	 * Get the Parser to parse a submitted value for a field of {@code fieldType}
	 * annotated with {@code annotation}.
	 * <p>If the object the parser returns is not assignable to {@code fieldType},
	 * a coercion to {@code fieldType} will be attempted before the field is set.
	 * @param annotation the annotation instance
	 * @param fieldType the type of field that was annotated
	 * @return the parser
	 */
	/**
	 * 获取解析器以解析由{@code 注解}注解的{@code  fieldType}字段的提交值。 
	 *  <p>如果解析器返回的对象不可分配给{@code  fieldType}，则在设置字段之前将尝试强制转换为{@code  fieldType}。 
	 *  
	 * @param 注释注释实例
	 * @param  fieldType被注释的字段的类型
	 * @return 解析器
	 */
	Parser<?> getParser(A annotation, Class<?> fieldType);

}
