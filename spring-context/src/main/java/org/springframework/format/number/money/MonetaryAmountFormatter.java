/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format.number.money;

import java.util.Locale;

import javax.money.MonetaryAmount;
import javax.money.format.MonetaryAmountFormat;
import javax.money.format.MonetaryFormats;

import org.springframework.format.Formatter;
import org.springframework.lang.Nullable;

/**
 * Formatter for JSR-354 {@link javax.money.MonetaryAmount} values,
 * delegating to {@link javax.money.format.MonetaryAmountFormat#format}
 * and {@link javax.money.format.MonetaryAmountFormat#parse}.
 *
 * @author Juergen Hoeller
 * @since 4.2
 * @see #getMonetaryAmountFormat
 */
/**
 * JSR-354 {@link  javax.money.MonetaryAmount}值的格式化程序，委托给{@link  javax.money.format.MonetaryAmountFormat＃format}和{@link  javax.money.format.MonetaryAmountFormat＃parse }。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@从4.2开始
 * @see  #getMonetaryAmountFormat
 */
public class MonetaryAmountFormatter implements Formatter<MonetaryAmount> {

	@Nullable
	private String formatName;


	/**
	 * Create a locale-driven MonetaryAmountFormatter.
	 */
	/**
	 * 创建一个语言环境驱动的MonetaryAmountFormatter。 
	 * 
	 */
	public MonetaryAmountFormatter() {
	}

	/**
	 * Create a new MonetaryAmountFormatter for the given format name.
	 * @param formatName the format name, to be resolved by the JSR-354
	 * provider at runtime
	 */
	/**
	 * 为给定的格式名称创建一个新的MonetaryAmountFormatter。 
	 *  
	 * @param  formatName格式名称，由JSR-354提供程序在运行时解析
	 */
	public MonetaryAmountFormatter(String formatName) {
		this.formatName = formatName;
	}


	/**
	 * Specify the format name, to be resolved by the JSR-354 provider
	 * at runtime.
	 * <p>Default is none, obtaining a {@link MonetaryAmountFormat}
	 * based on the current locale.
	 */
	/**
	 * 指定格式名称，由JSR-354提供程序在运行时解析。 
	 *  <p>默认为none，根据当前语言环境获取{@link  MonetaryAmountFormat}。 
	 * 
	 */
	public void setFormatName(String formatName) {
		this.formatName = formatName;
	}


	@Override
	public String print(MonetaryAmount object, Locale locale) {
		return getMonetaryAmountFormat(locale).format(object);
	}

	@Override
	public MonetaryAmount parse(String text, Locale locale) {
		return getMonetaryAmountFormat(locale).parse(text);
	}


	/**
	 * Obtain a MonetaryAmountFormat for the given locale.
	 * <p>The default implementation simply calls
	 * {@link javax.money.format.MonetaryFormats#getAmountFormat}
	 * with either the configured format name or the given locale.
	 * @param locale the current locale
	 * @return the MonetaryAmountFormat (never {@code null})
	 * @see #setFormatName
	 */
	/**
	 * 获取给定语言环境的MonetaryAmountFormat。 
	 *  <p>默认实现只是使用配置的格式名称或给定的语言环境调用{@link  javax.money.format.MonetaryFormats＃getAmountFormat}。 
	 *  
	 * @param 语言环境当前语言环境
	 * @return  MonetaryAmountFormat（从不{@code  null}）
	 * @see  #setFormatName
	 */
	protected MonetaryAmountFormat getMonetaryAmountFormat(Locale locale) {
		if (this.formatName != null) {
			return MonetaryFormats.getAmountFormat(this.formatName);
		}
		else {
			return MonetaryFormats.getAmountFormat(locale);
		}
	}

}
