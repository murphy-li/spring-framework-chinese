/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.format;

import java.lang.annotation.Annotation;

import org.springframework.core.convert.converter.ConverterRegistry;

/**
 * A registry of field formatting logic.
 *
 * @author Keith Donald
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 字段格式逻辑注册表。 
 *  @author 基思·唐纳德@author  Juergen Hoeller @从3.0开始
 */
public interface FormatterRegistry extends ConverterRegistry {

	/**
	 * Adds a Printer to print fields of a specific type.
	 * The field type is implied by the parameterized Printer instance.
	 * @param printer the printer to add
	 * @since 5.2
	 * @see #addFormatter(Formatter)
	 */
	/**
	 * 添加打印机以打印特定类型的字段。 
	 * 参数化的Printer实例隐含了字段类型。 
	 *  
	 * @param 打印机打印机添加@since 5.2起
	 * @see  #addFormatter（Formatter）
	 */
	void addPrinter(Printer<?> printer);

	/**
	 * Adds a Parser to parse fields of a specific type.
	 * The field type is implied by the parameterized Parser instance.
	 * @param parser the parser to add
	 * @since 5.2
	 * @see #addFormatter(Formatter)
	 */
	/**
	 * 添加解析器以解析特定类型的字段。 
	 * 参数化的解析器实例隐含了字段类型。 
	 *  
	 * @param 解析器解析器添加@since 5.2 
	 * @see  #addFormatter（Formatter）
	 */
	void addParser(Parser<?> parser);

	/**
	 * Adds a Formatter to format fields of a specific type.
	 * The field type is implied by the parameterized Formatter instance.
	 * @param formatter the formatter to add
	 * @since 3.1
	 * @see #addFormatterForFieldType(Class, Formatter)
	 */
	/**
	 * 添加格式化程序以格式化特定类型的字段。 
	 * 参数化的Formatter实例隐含字段类型。 
	 *  
	 * @param 格式化程序要添加@since 3.1的格式化程序
	 * @see  #addFormatterForFieldType（Class，Formatter）
	 */
	void addFormatter(Formatter<?> formatter);

	/**
	 * Adds a Formatter to format fields of the given type.
	 * <p>On print, if the Formatter's type T is declared and {@code fieldType} is not assignable to T,
	 * a coercion to T will be attempted before delegating to {@code formatter} to print a field value.
	 * On parse, if the parsed object returned by {@code formatter} is not assignable to the runtime field type,
	 * a coercion to the field type will be attempted before returning the parsed field value.
	 * @param fieldType the field type to format
	 * @param formatter the formatter to add
	 */
	/**
	 * 添加格式化程序以格式化给定类型的字段。 
	 *  <p>在打印时，如果声明了格式化程序的类型T，并且{@code  fieldType}无法分配给T，则在委派给{@code  formatter}来打印字段值之前，将尝试强制转换为T。 
	 * 解析时，如果无法将{@code  formatter}返回的解析对象分配给运行时字段类型，则在返回解析的字段值之前将尝试强制转换为字段类型。 
	 *  
	 * @param 字段键入要格式化的字段类型
	 * @param 格式化程序要添加的格式化程序
	 */
	void addFormatterForFieldType(Class<?> fieldType, Formatter<?> formatter);

	/**
	 * Adds a Printer/Parser pair to format fields of a specific type.
	 * The formatter will delegate to the specified {@code printer} for printing
	 * and the specified {@code parser} for parsing.
	 * <p>On print, if the Printer's type T is declared and {@code fieldType} is not assignable to T,
	 * a coercion to T will be attempted before delegating to {@code printer} to print a field value.
	 * On parse, if the object returned by the Parser is not assignable to the runtime field type,
	 * a coercion to the field type will be attempted before returning the parsed field value.
	 * @param fieldType the field type to format
	 * @param printer the printing part of the formatter
	 * @param parser the parsing part of the formatter
	 */
	/**
	 * 添加打印机/解析器对以格式化特定类型的字段。 
	 * 格式化程序将委托给指定的{@code 打印机}进行打印，并委托给指定的{@code 解析器}进行解析。 
	 *  <p>在打印时，如果声明了打印机的类型T，并且{@code  fieldType}无法分配给T，则在委派给{@code  printer}来打印字段值之前，将尝试强制T。 
	 * 在解析时，如果解析器返回的对象不可分配给运行时字段类型，则在返回解析的字段值之前，将尝试强制转换为字段类型。 
	 *  
	 * @param 字段键入要格式化的字段类型
	 * @param 打印机格式化程序的打印部分
	 * @param 解析器格式化程序的解析部分
	 */
	void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);

	/**
	 * Adds a Formatter to format fields annotated with a specific format annotation.
	 * @param annotationFormatterFactory the annotation formatter factory to add
	 */
	/**
	 * 添加格式化程序以格式化带有特定格式注释的字段。 
	 *  
	 * @param 注解格式器工厂要添加的注解格式器工厂
	 */
	void addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory);

}
