/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scripting;

import java.io.IOException;

import org.springframework.lang.Nullable;

/**
 * Script definition interface, encapsulating the configuration
 * of a specific script as well as a factory method for
 * creating the actual scripted Java {@code Object}.
 *
 * @author Juergen Hoeller
 * @author Rob Harrop
 * @since 2.0
 * @see #getScriptSourceLocator
 * @see #getScriptedObject
 */
/**
 * 脚本定义接口，封装了特定脚本的配置以及用于创建实际的脚本化Java {@code  Object}的工厂方法。 
 *  @author  Juergen Hoeller @author  Rob Harrop @since 2.0起
 * @see  #getScriptSourceLocator 
 * @see  #getScriptedObject
 */
public interface ScriptFactory {

	/**
	 * Return a locator that points to the source of the script.
	 * Interpreted by the post-processor that actually creates the script.
	 * <p>Typical supported locators are Spring resource locations
	 * (such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")
	 * and inline scripts ("inline:myScriptText...").
	 * @return the script source locator
	 * @see org.springframework.scripting.support.ScriptFactoryPostProcessor#convertToScriptSource
	 * @see org.springframework.core.io.ResourceLoader
	 */
	/**
	 * 返回一个指向脚本源的定位器。 
	 * 由实际创建脚本的后处理器解释。 
	 *  <p>典型支持的定位器是Spring资源位置（例如"file：C：/myScript.bsh"或"classpath：myPackage / myScript.bsh"）和内联脚本（"inline：myScriptText ..."）。 
	 *  
	 * @return 脚本源定位符
	 * @see  org.springframework.scripting.support.ScriptFactoryPostProcessor＃convertToScriptSource 
	 * @see  org.springframework.core.io.ResourceLoader
	 */
	String getScriptSourceLocator();

	/**
	 * Return the business interfaces that the script is supposed to implement.
	 * <p>Can return {@code null} if the script itself determines
	 * its Java interfaces (such as in the case of Groovy).
	 * @return the interfaces for the script
	 */
	/**
	 * 返回脚本应该实现的业务接口。 
	 * 如果脚本本身确定其Java接口（例如Groovy），则<p>可以返回{@code  null}。 
	 *  
	 * @return 脚本的接口
	 */
	@Nullable
	Class<?>[] getScriptInterfaces();

	/**
	 * Return whether the script requires a config interface to be
	 * generated for it. This is typically the case for scripts that
	 * do not determine Java signatures themselves, with no appropriate
	 * config interface specified in {@code getScriptInterfaces()}.
	 * @return whether the script requires a generated config interface
	 * @see #getScriptInterfaces()
	 */
	/**
	 * 返回脚本是否需要为其生成配置接口。 
	 * 对于本身不能确定Java签名的脚本，在{@code  getScriptInterfaces（）}中未指定适当的配置接口的脚本中，通常是这种情况。 
	 *  
	 * @return 脚本是否需要生成的配置接口
	 * @see  #getScriptInterfaces（）
	 */
	boolean requiresConfigInterface();

	/**
	 * Factory method for creating the scripted Java object.
	 * <p>Implementations are encouraged to cache script metadata such as
	 * a generated script class. Note that this method may be invoked
	 * concurrently and must be implemented in a thread-safe fashion.
	 * @param scriptSource the actual ScriptSource to retrieve
	 * the script source text from (never {@code null})
	 * @param actualInterfaces the actual interfaces to expose,
	 * including script interfaces as well as a generated config interface
	 * (if applicable; may be {@code null})
	 * @return the scripted Java object
	 * @throws IOException if script retrieval failed
	 * @throws ScriptCompilationException if script compilation failed
	 */
	/**
	 * 用于创建脚本化Java对象的工厂方法。 
	 *  <p>鼓励实施方式缓存脚本元数据，例如生成的脚本类。 
	 * 请注意，此方法可以同时调用，并且必须以线程安全的方式实现。 
	 *  
	 * @param  scriptSource实际的ScriptSource用来从中获取脚本源文本（从不{@code  null}）
	 * @param  actualInterfaces公开的实际接口，包括脚本接口以及生成的配置接口（如果适用； 
	 * 可能为{@code  null}）
	 * @return 脚本化Java对象
	 * @throws  IOException如果脚本检索失败
	 * @throws  ScriptCompilationException如果脚本编译失败
	 */
	@Nullable
	Object getScriptedObject(ScriptSource scriptSource, @Nullable Class<?>... actualInterfaces)
			throws IOException, ScriptCompilationException;

	/**
	 * Determine the type of the scripted Java object.
	 * <p>Implementations are encouraged to cache script metadata such as
	 * a generated script class. Note that this method may be invoked
	 * concurrently and must be implemented in a thread-safe fashion.
	 * @param scriptSource the actual ScriptSource to retrieve
	 * the script source text from (never {@code null})
	 * @return the type of the scripted Java object, or {@code null}
	 * if none could be determined
	 * @throws IOException if script retrieval failed
	 * @throws ScriptCompilationException if script compilation failed
	 * @since 2.0.3
	 */
	/**
	 * 确定脚本化Java对象的类型。 
	 *  <p>鼓励实施方式缓存脚本元数据，例如生成的脚本类。 
	 * 请注意，此方法可以同时调用，并且必须以线程安全的方式实现。 
	 *  
	 * @param  scriptSource实际的ScriptSource，用于从（从未{@code  null}）中检索脚本源文本。 
	 * <
	 * @return>脚本化Java对象的类型； 
	 * 如果无法确定，则为{@code  null} 
	 * @throws  IOException如果脚本检索失败
	 * @throws  ScriptCompilationException如果脚本编译失败@since 2.0.3
	 */
	@Nullable
	Class<?> getScriptedObjectType(ScriptSource scriptSource)
			throws IOException, ScriptCompilationException;

	/**
	 * Determine whether a refresh is required (e.g. through
	 * ScriptSource's {@code isModified()} method).
	 * @param scriptSource the actual ScriptSource to retrieve
	 * the script source text from (never {@code null})
	 * @return whether a fresh {@link #getScriptedObject} call is required
	 * @since 2.5.2
	 * @see ScriptSource#isModified()
	 */
	/**
	 * 确定是否需要刷新（例如，通过ScriptSource的{@code  isModified（）}方法）。 
	 *  
	 * @param  scriptSource实际的ScriptSource，用于从中检索脚本源文本（从未{@code  null}）
	 * @return 是否需要重新调用{@link  #getScriptedObject} @@2.5.2起<请参阅> ScriptSource＃isModified（）
	 */
	boolean requiresScriptedObjectRefresh(ScriptSource scriptSource);

}
