/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scripting.support;

import org.springframework.lang.Nullable;
import org.springframework.scripting.ScriptSource;
import org.springframework.util.Assert;

/**
 * Static implementation of the
 * {@link org.springframework.scripting.ScriptSource} interface,
 * encapsulating a given String that contains the script source text.
 * Supports programmatic updates of the script String.
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * {@link  org.springframework.scripting.ScriptSource}接口的静态实现，封装了包含脚本源文本的给定String。 
 * 支持脚本字符串的编程更新。 
 *  @author 罗布·哈罗普（Rob Harrop）@author  Juergen Hoeller @始于2.0
 */
public class StaticScriptSource implements ScriptSource {

	private String script = "";

	private boolean modified;

	@Nullable
	private String className;


	/**
	 * Create a new StaticScriptSource for the given script.
	 * @param script the script String
	 */
	/**
	 * 为给定脚本创建一个新的StaticScriptSource。 
	 *  
	 * @param 脚本脚本字符串
	 */
	public StaticScriptSource(String script) {
		setScript(script);
	}

	/**
	 * Create a new StaticScriptSource for the given script.
	 * @param script the script String
	 * @param className the suggested class name for the script
	 * (may be {@code null})
	 */
	/**
	 * 为给定脚本创建一个新的StaticScriptSource。 
	 *  
	 * @param 脚本脚本字符串
	 * @param  className脚本的建议类名称（可以为{@code  null}）
	 */
	public StaticScriptSource(String script, @Nullable String className) {
		setScript(script);
		this.className = className;
	}

	/**
	 * Set a fresh script String, overriding the previous script.
	 * @param script the script String
	 */
	/**
	 * 设置一个新的脚本字符串，覆盖先前的脚本。 
	 *  
	 * @param 脚本脚本字符串
	 */
	public synchronized void setScript(String script) {
		Assert.hasText(script, "Script must not be empty");
		this.modified = !script.equals(this.script);
		this.script = script;
	}


	@Override
	public synchronized String getScriptAsString() {
		this.modified = false;
		return this.script;
	}

	@Override
	public synchronized boolean isModified() {
		return this.modified;
	}

	@Override
	@Nullable
	public String suggestedClassName() {
		return this.className;
	}


	@Override
	public String toString() {
		return "static script" + (this.className != null ? " [" + this.className + "]" : "");
	}

}
