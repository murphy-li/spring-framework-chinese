/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scripting.support;

import java.io.IOException;
import java.io.Reader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.core.io.Resource;
import org.springframework.core.io.support.EncodedResource;
import org.springframework.lang.Nullable;
import org.springframework.scripting.ScriptSource;
import org.springframework.util.Assert;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.StringUtils;

/**
 * {@link org.springframework.scripting.ScriptSource} implementation
 * based on Spring's {@link org.springframework.core.io.Resource}
 * abstraction. Loads the script text from the underlying Resource's
 * {@link org.springframework.core.io.Resource#getFile() File} or
 * {@link org.springframework.core.io.Resource#getInputStream() InputStream},
 * and tracks the last-modified timestamp of the file (if possible).
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 2.0
 * @see org.springframework.core.io.Resource#getInputStream()
 * @see org.springframework.core.io.Resource#getFile()
 * @see org.springframework.core.io.ResourceLoader
 */
/**
 * 基于Spring的{@link  org.springframework.core.io.Resource}抽象的{@link  org.springframework.scripting.ScriptSource}实现。 
 * 从基础资源的{@link  org.springframework.core.io.Resource＃getFile（）File}或{@link  org.springframework.core.io.Resource＃getInputStream（）InputStream}加载脚本文本，并跟踪文件的最后修改时间戳（如果可能）。 
 *  @author  Rob Harrop @author  Juergen Hoeller @since 2.0起
 * @see  org.springframework.core.io.Resource＃getInputStream（）
 * @see  org.springframework.core.io.Resource＃getFile（）
 * @see  org.springframework.core.io.ResourceLoader
 */
public class ResourceScriptSource implements ScriptSource {

	/** Logger available to subclasses. */
	/**
	 * 记录器可用于子类。 
	 * 
	 */
	protected final Log logger = LogFactory.getLog(getClass());

	private EncodedResource resource;

	private long lastModified = -1;

	private final Object lastModifiedMonitor = new Object();


	/**
	 * Create a new ResourceScriptSource for the given resource.
	 * @param resource the EncodedResource to load the script from
	 */
	/**
	 * 为给定资源创建一个新的ResourceScriptSource。 
	 *  
	 * @param 资源EncodedResource以从中加载脚本
	 */
	public ResourceScriptSource(EncodedResource resource) {
		Assert.notNull(resource, "Resource must not be null");
		this.resource = resource;
	}

	/**
	 * Create a new ResourceScriptSource for the given resource.
	 * @param resource the Resource to load the script from (using UTF-8 encoding)
	 */
	/**
	 * 为给定资源创建一个新的ResourceScriptSource。 
	 *  
	 * @param  resource资源（从脚本加载资源）（使用UTF-8编码）
	 */
	public ResourceScriptSource(Resource resource) {
		Assert.notNull(resource, "Resource must not be null");
		this.resource = new EncodedResource(resource, "UTF-8");
	}


	/**
	 * Return the {@link org.springframework.core.io.Resource} to load the
	 * script from.
	 */
	/**
	 * 返回{@link  org.springframework.core.io.Resource}以从中加载脚本。 
	 * 
	 */
	public final Resource getResource() {
		return this.resource.getResource();
	}

	/**
	 * Set the encoding used for reading the script resource.
	 * <p>The default value for regular Resources is "UTF-8".
	 * A {@code null} value implies the platform default.
	 */
	/**
	 * 设置用于读取脚本资源的编码。 
	 *  <p>常规资源的默认值为"UTF-8"。 
	 *  {@code  null}值表示平台默认值。 
	 * 
	 */
	public void setEncoding(@Nullable String encoding) {
		this.resource = new EncodedResource(this.resource.getResource(), encoding);
	}


	@Override
	public String getScriptAsString() throws IOException {
		synchronized (this.lastModifiedMonitor) {
			this.lastModified = retrieveLastModifiedTime();
		}
		Reader reader = this.resource.getReader();
		return FileCopyUtils.copyToString(reader);
	}

	@Override
	public boolean isModified() {
		synchronized (this.lastModifiedMonitor) {
			return (this.lastModified < 0 || retrieveLastModifiedTime() > this.lastModified);
		}
	}

	/**
	 * Retrieve the current last-modified timestamp of the underlying resource.
	 * @return the current timestamp, or 0 if not determinable
	 */
	/**
	 * 检索基础资源的当前最后修改的时间戳。 
	 *  
	 * @return 当前时间戳，如果不确定则为0
	 */
	protected long retrieveLastModifiedTime() {
		try {
			return getResource().lastModified();
		}
		catch (IOException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug(getResource() + " could not be resolved in the file system - " +
						"current timestamp not available for script modification check", ex);
			}
			return 0;
		}
	}

	@Override
	@Nullable
	public String suggestedClassName() {
		String filename = getResource().getFilename();
		return (filename != null ? StringUtils.stripFilenameExtension(filename) : null);
	}

	@Override
	public String toString() {
		return this.resource.toString();
	}

}
