/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Indicates that a bean should be given preference when multiple candidates
 * are qualified to autowire a single-valued dependency. If exactly one
 * 'primary' bean exists among the candidates, it will be the autowired value.
 *
 * <p>This annotation is semantically equivalent to the {@code <bean>} element's
 * {@code primary} attribute in Spring XML.
 *
 * <p>May be used on any class directly or indirectly annotated with
 * {@code @Component} or on methods annotated with @{@link Bean}.
 *
 * <h2>Example</h2>
 * <pre class="code">
 * &#064;Component
 * public class FooService {
 *
 *     private FooRepository fooRepository;
 *
 *     &#064;Autowired
 *     public FooService(FooRepository fooRepository) {
 *         this.fooRepository = fooRepository;
 *     }
 * }
 *
 * &#064;Component
 * public class JdbcFooRepository extends FooRepository {
 *
 *     public JdbcFooRepository(DataSource dataSource) {
 *         // ...
 *     }
 * }
 *
 * &#064;Primary
 * &#064;Component
 * public class HibernateFooRepository extends FooRepository {
 *
 *     public HibernateFooRepository(SessionFactory sessionFactory) {
 *         // ...
 *     }
 * }
 * </pre>
 *
 * <p>Because {@code HibernateFooRepository} is marked with {@code @Primary},
 * it will be injected preferentially over the jdbc-based variant assuming both
 * are present as beans within the same Spring application context, which is
 * often the case when component-scanning is applied liberally.
 *
 * <p>Note that using {@code @Primary} at the class level has no effect unless
 * component-scanning is being used. If a {@code @Primary}-annotated class is
 * declared via XML, {@code @Primary} annotation metadata is ignored, and
 * {@code <bean primary="true|false"/>} is respected instead.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.0
 * @see Lazy
 * @see Bean
 * @see ComponentScan
 * @see org.springframework.stereotype.Component
 */
/**
 * 指示当多个候选者有资格自动装配单值依赖项时，应优先考虑Bean。 
 * 如果候选对象中仅存在一个"主"bean，它将是自动装配的值。 
 *  <p>此注释在语义上等效于Spring XML中的{@code  <bean>}元素的{@code  primary}属性。 
 *  <p>可用于直接或间接用{@code  @Component}注释的任何类，或用@{<@link> Bean}注释的方法。 
 *  <h2>示例</ h2> <pre class ="code"> @Component公共类FooService {私有FooRepository fooRepository; @Autowired公共FooService（FooRepository fooRepository）{this.fooRepository = fooRepository; }} @Component公共类JdbcFooRepository扩展了FooRepository {public JdbcFooRepository（DataSource dataSource）{// ...}} @Primary @Component公共类HibernateFooRepository扩展了FooRepository {public HibernateFooRepository（SessionFactory sessionFactory）{// ...}}} </ pre> <p>由于{@code  HibernateFooRepository}被标记为{@code  @Primary}，因此假设它们都在同一Spring应用程序上下文中以bean的形式存在，它将优先于基于jdbc的变量注入。 
 * 通常在自由应用组件扫描的情况下。 
 *  <p>请注意，除非正在使用组件扫描，否则在类级别使用{@code  @Primary}无效。 
 * 如果通过XML声明了{@code  @Primary}注释的类，则将忽略{@code  @Primary}注释元数据，并且将{{@@code> <bean primary ="true | false"/>}推崇。 
 *  @author 克里斯·比姆斯（Chris Beams）@author 于尔根·霍勒（Juergen Hoeller）@从3.0开始
 * @see 懒惰
 * @see  Bean 
 * @see  ComponentScan 
 * @see  org.springframework.stereotype.Component
 */
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Primary {

}
