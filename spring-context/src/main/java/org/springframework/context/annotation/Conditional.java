/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Indicates that a component is only eligible for registration when all
 * {@linkplain #value specified conditions} match.
 *
 * <p>A <em>condition</em> is any state that can be determined programmatically
 * before the bean definition is due to be registered (see {@link Condition} for details).
 *
 * <p>The {@code @Conditional} annotation may be used in any of the following ways:
 * <ul>
 * <li>as a type-level annotation on any class directly or indirectly annotated with
 * {@code @Component}, including {@link Configuration @Configuration} classes</li>
 * <li>as a meta-annotation, for the purpose of composing custom stereotype
 * annotations</li>
 * <li>as a method-level annotation on any {@link Bean @Bean} method</li>
 * </ul>
 *
 * <p>If a {@code @Configuration} class is marked with {@code @Conditional},
 * all of the {@code @Bean} methods, {@link Import @Import} annotations, and
 * {@link ComponentScan @ComponentScan} annotations associated with that
 * class will be subject to the conditions.
 *
 * <p><strong>NOTE</strong>: Inheritance of {@code @Conditional} annotations
 * is not supported; any conditions from superclasses or from overridden
 * methods will not be considered. In order to enforce these semantics,
 * {@code @Conditional} itself is not declared as
 * {@link java.lang.annotation.Inherited @Inherited}; furthermore, any
 * custom <em>composed annotation</em> that is meta-annotated with
 * {@code @Conditional} must not be declared as {@code @Inherited}.
 *
 * @author Phillip Webb
 * @author Sam Brannen
 * @since 4.0
 * @see Condition
 */
/**
 * 指示仅当所有{@link 普通#value指定条件}都匹配时，组件才有资格注册。 
 *  <p> <em>条件</ em>是可以在要注册bean定义之前以编程方式确定的任何状态（有关详细信息，请参见{@link  Condition}）。 
 *  <p> {<@code> @Conditional}注解可以通过以下任何一种方式使用：<ul> <li>作为任何类的类型级别的注解，直接或间接用{@code  @Component注解}，其中包括{@link  Configuration @Configuration}类</ li> <li>作为元注释，目的是在任何{上将自定义构造型注释添加为</ li> <li>作为方法级注释@link  Bean @Bean}方法</ li> </ ul> <p>如果将{@code  @Configuration}类标记为{@code  @Conditional}，则所有{<@code与该类关联的> @Bean}方法，{<@link>导入@Import}注解和{@link  ComponentScan @ComponentScan}注解将受条件限制。 
 *  <p> <strong>注意</ strong>：不支持{@code  @Conditional}注解的继承； 
 * 父类或重写方法中的任何条件都不会考虑。 
 * 为了实施这些语义，{<@code> @Conditional}本身未声明为{@link  java.lang.annotation.Inherited @Inherited}； 
 * 此外，任何用{@code  @Conditional}进行元注释的自定义<em>组成的注释</ em>都不得声明为{@code  @Inherited}。 
 *  @author  Phillip Webb @author  Sam Brannen @从4.0开始
 * @see 条件
 */
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Conditional {

	/**
	 * All {@link Condition Conditions} that must {@linkplain Condition#matches match}
	 * in order for the component to be registered.
	 */
	/**
	 * 为了注册组件，必须{@link 普通条件#matches匹配}的所有{@link 条件条件}。 
	 * 
	 */
	Class<? extends Condition>[] value();

}
