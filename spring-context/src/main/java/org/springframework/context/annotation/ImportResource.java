/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.beans.factory.support.BeanDefinitionReader;
import org.springframework.core.annotation.AliasFor;

/**
 * Indicates one or more resources containing bean definitions to import.
 *
 * <p>Like {@link Import @Import}, this annotation provides functionality similar to
 * the {@code <import/>} element in Spring XML. It is typically used when designing
 * {@link Configuration @Configuration} classes to be bootstrapped by an
 * {@link AnnotationConfigApplicationContext}, but where some XML functionality such
 * as namespaces is still necessary.
 *
 * <p>By default, arguments to the {@link #value} attribute will be processed using a
 * {@link org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader GroovyBeanDefinitionReader}
 * if ending in {@code ".groovy"}; otherwise, an
 * {@link org.springframework.beans.factory.xml.XmlBeanDefinitionReader XmlBeanDefinitionReader}
 * will be used to parse Spring {@code <beans/>} XML files. Optionally, the {@link #reader}
 * attribute may be declared, allowing the user to choose a custom {@link BeanDefinitionReader}
 * implementation.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 3.0
 * @see Configuration
 * @see Import
 */
/**
 * 指示一个或多个包含要导入的Bean定义的资源。 
 *  <p>类似于{@link  Import @Import}，此注释提供的功能类似于Spring XML中的{@code  <import />}元素。 
 * 通常在设计{@link  AnnotationConfigApplicationContext}引导的{@link  Configuration @Configuration}类时使用它，但是在某些XML功能（例如名称空间）仍然需要的情况下。 
 *  <p>默认情况下，如果{{@link> #value}属性以{@code 结尾， .groovy"};否则，将使用{@link  org.springframework.beans.factory.xml.XmlBeanDefinitionReader XmlBeanDefinitionReader}解析Spring {@code  <beans />} XML文件。 
 *  （可选）可以声明{@link  #reader}属性，从而允许用户选择自定义的{@link  BeanDefinitionReader}实现。 
 *  @author  Chris Beams @author  Juergen Hoeller @author  Sam Brannen @since 3.0 
 * @see 配置
 * @see 导入
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Documented
public @interface ImportResource {

	/**
	 * Alias for {@link #locations}.
	 * @see #locations
	 * @see #reader
	 */
	/**
	 * {@link  #locations}的别名。 
	 *  
	 * @see  #locations 
	 * @see  #reader
	 */
	@AliasFor("locations")
	String[] value() default {};

	/**
	 * Resource locations from which to import.
	 * <p>Supports resource-loading prefixes such as {@code classpath:},
	 * {@code file:}, etc.
	 * <p>Consult the Javadoc for {@link #reader} for details on how resources
	 * will be processed.
	 * @since 4.2
	 * @see #value
	 * @see #reader
	 */
	/**
	 * 从中导入的资源位置。 
	 *  <p>支持资源加载前缀，例如{@code  classpath：}，{<@code> file：}等。 
	 * <p>有关{{@@link> #reader}的Javadoc，请参见Javadoc。 
	 * 将被处理。 
	 *  @since 4.2 
	 * @see  #value 
	 * @see  #reader
	 */
	@AliasFor("value")
	String[] locations() default {};

	/**
	 * {@link BeanDefinitionReader} implementation to use when processing
	 * resources specified via the {@link #value} attribute.
	 * <p>By default, the reader will be adapted to the resource path specified:
	 * {@code ".groovy"} files will be processed with a
	 * {@link org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader GroovyBeanDefinitionReader};
	 * whereas, all other resources will be processed with an
	 * {@link org.springframework.beans.factory.xml.XmlBeanDefinitionReader XmlBeanDefinitionReader}.
	 * @see #value
	 */
	/**
	 * 在处理通过{@link  #value}属性指定的资源时使用的{@link  BeanDefinitionReader}实现。 
	 *  <p>默认情况下，读取器将适应于指定的资源路径：{@code ".groovy"}文件将使用{@link  org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader GroovyBeanDefinitionReader处理};相反，所有其他资源将使用{@link  org.springframework.beans.factory.xml.XmlBeanDefinitionReader XmlBeanDefinitionReader}处理。 
	 *  
	 * @see ＃值
	 */
	Class<? extends BeanDefinitionReader> reader() default BeanDefinitionReader.class;

}
