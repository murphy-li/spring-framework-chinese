/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.core.type.AnnotatedTypeMetadata;

/**
 * A single {@code condition} that must be {@linkplain #matches matched} in order
 * for a component to be registered.
 *
 * <p>Conditions are checked immediately before the bean-definition is due to be
 * registered and are free to veto registration based on any criteria that can
 * be determined at that point.
 *
 * <p>Conditions must follow the same restrictions as {@link BeanFactoryPostProcessor}
 * and take care to never interact with bean instances. For more fine-grained control
 * of conditions that interact with {@code @Configuration} beans consider the
 * {@link ConfigurationCondition} interface.
 *
 * @author Phillip Webb
 * @since 4.0
 * @see ConfigurationCondition
 * @see Conditional
 * @see ConditionContext
 */
/**
 * 单个{@code 条件}必须为{@link  plain #matches匹配}才能注册组件。 
 *  <p>在将要注册Bean定义之前立即检查条件，并且可以根据此时可以确定的任何标准自由否决注册。 
 *  <p>条件必须遵循与{@link  BeanFactoryPostProcessor}相同的限制，并注意不要与bean实例进行交互。 
 * 要更精细地控制与{@code  @Configuration} bean交互的条件，请考虑{@link  ConfigurationCondition}接口。 
 *  @author  Phillip Webb @从4.0开始
 * @see  ConfigurationCondition 
 * @see 有条件的
 * @see  ConditionContext
 */
@FunctionalInterface
public interface Condition {

	/**
	 * Determine if the condition matches.
	 * @param context the condition context
	 * @param metadata metadata of the {@link org.springframework.core.type.AnnotationMetadata class}
	 * or {@link org.springframework.core.type.MethodMetadata method} being checked
	 * @return {@code true} if the condition matches and the component can be registered,
	 * or {@code false} to veto the annotated component's registration
	 */
	/**
	 * 确定条件是否匹配。 
	 *  
	 * @param 上下文{{@link> org.springframework.core.type.AnnotationMetadata类}或{@link  org.springframework.core.type.MethodMetadata方法}的条件上下文
	 * @param 元数据元数据如果条件匹配且可以注册该组件，则检查
	 * @return  {@code  true}，或检查{@@code> false}以否决带注释的组件的注册
	 */
	boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata);

}
