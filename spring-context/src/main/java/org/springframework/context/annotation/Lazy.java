/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Indicates whether a bean is to be lazily initialized.
 *
 * <p>May be used on any class directly or indirectly annotated with {@link
 * org.springframework.stereotype.Component @Component} or on methods annotated with
 * {@link Bean @Bean}.
 *
 * <p>If this annotation is not present on a {@code @Component} or {@code @Bean} definition,
 * eager initialization will occur. If present and set to {@code true}, the {@code @Bean} or
 * {@code @Component} will not be initialized until referenced by another bean or explicitly
 * retrieved from the enclosing {@link org.springframework.beans.factory.BeanFactory
 * BeanFactory}. If present and set to {@code false}, the bean will be instantiated on
 * startup by bean factories that perform eager initialization of singletons.
 *
 * <p>If Lazy is present on a {@link Configuration @Configuration} class, this
 * indicates that all {@code @Bean} methods within that {@code @Configuration}
 * should be lazily initialized. If {@code @Lazy} is present and false on a {@code @Bean}
 * method within a {@code @Lazy}-annotated {@code @Configuration} class, this indicates
 * overriding the 'default lazy' behavior and that the bean should be eagerly initialized.
 *
 * <p>In addition to its role for component initialization, this annotation may also be placed
 * on injection points marked with {@link org.springframework.beans.factory.annotation.Autowired}
 * or {@link javax.inject.Inject}: In that context, it leads to the creation of a
 * lazy-resolution proxy for all affected dependencies, as an alternative to using
 * {@link org.springframework.beans.factory.ObjectFactory} or {@link javax.inject.Provider}.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.0
 * @see Primary
 * @see Bean
 * @see Configuration
 * @see org.springframework.stereotype.Component
 */
/**
 * 指示是否要延迟初始化bean。 
 *  <p>可用于直接或间接用{@link  org.springframework.stereotype.Component @Component}注释的任何类，或用{@link  Bean @Bean}注释的方法。 
 *  <p>如果在{@code  @Component}或{@code  @Bean}定义中不存在此注释，则会进行急切的初始化。 
 * 如果存在并且设置为{@code  true}，则{@code  @Bean}或{@code  @Component}不会被初始化，直到被另一个bean引用或从封闭的{<@link > org.springframework.beans.factory.BeanFactory BeanFactory}。 
 * 如果存在并设置为{@code  false}，则将在执行启动单例初始化的bean工厂时实例化bean。 
 *  <p>如果{@link  Configuration @Configuration}类上存在Lazy，则表明该{@code  @Configuration}中的所有{@code  @Bean}方法都应进行延迟初始化。 
 * 如果{@code  @Lazy}存在并且在{@code  @Lazy}注释的{@code  @Configuration}类中的{@code  @Bean}方法上为false，则表示覆盖了"默认懒惰"行为，并且应热切初始化bean。 
 *  <p>除了其在组件初始化中的作用外，还可以将该注释放置在标有{@link  org.springframework.beans.factory.annotation.Autowired}或{@link  javax.inject的）注入点上。 
 *  Inject}：在这种情况下，它为所有受影响的依赖项创建了一个惰性解析代理，以替代使用{@link  org.springframework.beans.factory.ObjectFactory}或{@link  javax .inject.Provider}。 
 *  @author  Chris Beams @author  Juergen Hoeller @since 3.0起
 * @see 主要
 * @see  Bean 
 * @see 配置
 * @see  org.springframework.stereotype.Component
 */
@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Lazy {

	/**
	 * Whether lazy initialization should occur.
	 */
	/**
	 * 是否应该进行延迟初始化。 
	 * 
	 */
	boolean value() default true;

}
