/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;
import org.springframework.beans.factory.support.BeanNameGenerator;
import org.springframework.core.type.AnnotationMetadata;

/**
 * Interface to be implemented by types that register additional bean definitions when
 * processing @{@link Configuration} classes. Useful when operating at the bean definition
 * level (as opposed to {@code @Bean} method/instance level) is desired or necessary.
 *
 * <p>Along with {@code @Configuration} and {@link ImportSelector}, classes of this type
 * may be provided to the @{@link Import} annotation (or may also be returned from an
 * {@code ImportSelector}).
 *
 * <p>An {@link ImportBeanDefinitionRegistrar} may implement any of the following
 * {@link org.springframework.beans.factory.Aware Aware} interfaces, and their respective
 * methods will be called prior to {@link #registerBeanDefinitions}:
 * <ul>
 * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>
 * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}
 * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}
 * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}
 * </ul>
 *
 * <p>Alternatively, the class may provide a single constructor with one or more of
 * the following supported parameter types:
 * <ul>
 * <li>{@link org.springframework.core.env.Environment Environment}</li>
 * <li>{@link org.springframework.beans.factory.BeanFactory BeanFactory}</li>
 * <li>{@link java.lang.ClassLoader ClassLoader}</li>
 * <li>{@link org.springframework.core.io.ResourceLoader ResourceLoader}</li>
 * </ul>
 *
 * <p>See implementations and associated unit tests for usage examples.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @see Import
 * @see ImportSelector
 * @see Configuration
 */
/**
 * 由在处理@{<@link> Configuration}类时注册其他bean定义的类型的类型实现的接口。 
 * 在bean定义级别（与{@code  @Bean}方法/实例级别相反）进行操作时很有用或有必要。 
 *  <p>连同{@code  @Configuration}和{@link  ImportSelector}一起，此类类型的类可以提供给@{<@link> Import}注解（也可以从{@code  ImportSelector}）。 
 *  <p> {<@link> ImportBeanDefinitionRegistrar}可以实现以下任何{@link  org.springframework.beans.factory.Aware Aware}接口，它们各自的方法将在{@link ＃ registerBeanDefinitions}：<ul> <li> {<@link> org.springframework.context.EnvironmentAware EnvironmentAware} </ li> <li> {<@link> org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware} <li> { @link  org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware} <li> {<@link> org.springframework.context.ResourceLoaderAware ResourceLoaderAware} </ ul> <p>或者，该类可以为单个构造函数提供一个或以下受支持的参数类型中的更多者：<ul> <li> {<@link> org.springframework.core.env.Environment Environment} </ li> <li> {<@link> org.springframework.beans.factory .BeanFactory BeanFactory} </ li> <li> {<@link> java.lang.ClassLoader ClassLoader} </ li> <li> {<@link> org.springframework.core.io.ResourceLoader ResourceLoader} </ li> </ ul> <p >请参阅实现和相关的单元测试以获取用法示例。 
 *  @author  Chris Beams @author  Juergen Hoeller @since 3.1起
 * @see 导入
 * @see  ImportSelector 
 * @see 配置
 */
public interface ImportBeanDefinitionRegistrar {

	/**
	 * Register bean definitions as necessary based on the given annotation metadata of
	 * the importing {@code @Configuration} class.
	 * <p>Note that {@link BeanDefinitionRegistryPostProcessor} types may <em>not</em> be
	 * registered here, due to lifecycle constraints related to {@code @Configuration}
	 * class processing.
	 * <p>The default implementation delegates to
	 * {@link #registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)}.
	 * @param importingClassMetadata annotation metadata of the importing class
	 * @param registry current bean definition registry
	 * @param importBeanNameGenerator the bean name generator strategy for imported beans:
	 * {@link ConfigurationClassPostProcessor#IMPORT_BEAN_NAME_GENERATOR} by default, or a
	 * user-provided one if {@link ConfigurationClassPostProcessor#setBeanNameGenerator}
	 * has been set. In the latter case, the passed-in strategy will be the same used for
	 * component scanning in the containing application context (otherwise, the default
	 * component-scan naming strategy is {@link AnnotationBeanNameGenerator#INSTANCE}).
	 * @since 5.2
	 * @see ConfigurationClassPostProcessor#IMPORT_BEAN_NAME_GENERATOR
	 * @see ConfigurationClassPostProcessor#setBeanNameGenerator
	 */
	/**
	 * 根据导入的{@code  @Configuration}类的给定注释元数据，根据需要注册Bean定义。 
	 *  <p>请注意，由于与{@code  @Configuration}类处理相关的生命周期限制，{<@link> BeanDefinitionRegistryPostProcessor}类型可能不会在此处注册。 
	 *  <p>默认实现委托给{@link  #registerBeanDefinitions（AnnotationMetadata，BeanDefinitionRegistry）}。 
	 *  
	 * @param  importingClassMetadata导入类的元数据注释
	 * @param 注册表当前bean定义注册表
	 * @param  importBeanNameGenerator导入bean的bean名称生成策略：默认情况下为{@link  ConfigurationClassPostProcessor＃IMPORT_BEAN_NAME_GENERATOR}，或者用户-如果设置了{@link  ConfigurationClassPostProcessor＃setBeanNameGenerator}，则提供一个。 
	 * 在后一种情况下，传入的策略将与包含应用程序上下文中的组件扫描使用相同的策略（否则，默认的组件扫描命名策略为{@link  AnnotationBeanNameGenerator＃INSTANCE}）。 
	 *  @since 5.2 
	 * @see  ConfigurationClassPostProcessor＃IMPORT_BEAN_NAME_GENERATOR 
	 * @see  ConfigurationClassPostProcessor＃setBeanNameGenerator
	 */
	default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,
			BeanNameGenerator importBeanNameGenerator) {

		registerBeanDefinitions(importingClassMetadata, registry);
	}

	/**
	 * Register bean definitions as necessary based on the given annotation metadata of
	 * the importing {@code @Configuration} class.
	 * <p>Note that {@link BeanDefinitionRegistryPostProcessor} types may <em>not</em> be
	 * registered here, due to lifecycle constraints related to {@code @Configuration}
	 * class processing.
	 * <p>The default implementation is empty.
	 * @param importingClassMetadata annotation metadata of the importing class
	 * @param registry current bean definition registry
	 */
	/**
	 * 根据导入的{@code  @Configuration}类的给定注释元数据，根据需要注册Bean定义。 
	 *  <p>请注意，由于与{@code  @Configuration}类处理相关的生命周期限制，{<@link> BeanDefinitionRegistryPostProcessor}类型可能不会在此处注册。 
	 *  <p>默认实现为空。 
	 *  
	 * @param  importingClassMetadata导入类的注释元数据
	 * @param 注册表当前bean定义注册表
	 */
	default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
	}

}
