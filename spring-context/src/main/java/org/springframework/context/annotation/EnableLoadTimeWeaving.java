/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.weaving.DefaultContextLoadTimeWeaver;
import org.springframework.instrument.classloading.LoadTimeWeaver;

/**
 * Activates a Spring {@link LoadTimeWeaver} for this application context, available as
 * a bean with the name "loadTimeWeaver", similar to the {@code <context:load-time-weaver>}
 * element in Spring XML.
 *
 * <p>To be used on @{@link org.springframework.context.annotation.Configuration Configuration} classes;
 * the simplest possible example of which follows:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableLoadTimeWeaving
 * public class AppConfig {
 *
 *     // application-specific &#064;Bean definitions ...
 * }</pre>
 *
 * The example above is equivalent to the following Spring XML configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;context:load-time-weaver/&gt;
 *
 *     &lt;!-- application-specific &lt;bean&gt; definitions --&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * <h2>The {@code LoadTimeWeaverAware} interface</h2>
 * Any bean that implements the {@link
 * org.springframework.context.weaving.LoadTimeWeaverAware LoadTimeWeaverAware} interface
 * will then receive the {@code LoadTimeWeaver} reference automatically; for example,
 * Spring's JPA bootstrap support.
 *
 * <h2>Customizing the {@code LoadTimeWeaver}</h2>
 * The default weaver is determined automatically: see {@link DefaultContextLoadTimeWeaver}.
 *
 * <p>To customize the weaver used, the {@code @Configuration} class annotated with
 * {@code @EnableLoadTimeWeaving} may also implement the {@link LoadTimeWeavingConfigurer}
 * interface and return a custom {@code LoadTimeWeaver} instance through the
 * {@code #getLoadTimeWeaver} method:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableLoadTimeWeaving
 * public class AppConfig implements LoadTimeWeavingConfigurer {
 *
 *     &#064;Override
 *     public LoadTimeWeaver getLoadTimeWeaver() {
 *         MyLoadTimeWeaver ltw = new MyLoadTimeWeaver();
 *         ltw.addClassTransformer(myClassFileTransformer);
 *         // ...
 *         return ltw;
 *     }
 * }</pre>
 *
 * <p>The example above can be compared to the following Spring XML configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;context:load-time-weaver weaverClass="com.acme.MyLoadTimeWeaver"/&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * <p>The code example differs from the XML example in that it actually instantiates the
 * {@code MyLoadTimeWeaver} type, meaning that it can also configure the instance, e.g.
 * calling the {@code #addClassTransformer} method. This demonstrates how the code-based
 * configuration approach is more flexible through direct programmatic access.
 *
 * <h2>Enabling AspectJ-based weaving</h2>
 * AspectJ load-time weaving may be enabled with the {@link #aspectjWeaving()}
 * attribute, which will cause the {@linkplain
 * org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter AspectJ class transformer} to
 * be registered through {@link LoadTimeWeaver#addTransformer}. AspectJ weaving will be
 * activated by default if a "META-INF/aop.xml" resource is present on the classpath.
 * Example:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableLoadTimeWeaving(aspectjWeaving=ENABLED)
 * public class AppConfig {
 * }</pre>
 *
 * <p>The example above can be compared to the following Spring XML configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;context:load-time-weaver aspectj-weaving="on"/&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * <p>The two examples are equivalent with one significant exception: in the XML case,
 * the functionality of {@code <context:spring-configured>} is implicitly enabled when
 * {@code aspectj-weaving} is "on".  This does not occur when using
 * {@code @EnableLoadTimeWeaving(aspectjWeaving=ENABLED)}. Instead you must explicitly add
 * {@code @EnableSpringConfigured} (included in the {@code spring-aspects} module)
 *
 * @author Chris Beams
 * @since 3.1
 * @see LoadTimeWeaver
 * @see DefaultContextLoadTimeWeaver
 * @see org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter
 */
/**
 * 为此应用程序上下文激活一个Spring {@link  LoadTimeWeaver}，可以以名为"loadTimeWeaver"的bean的形式来使用，类似于Spring XML中的{@code  <context：load-time-weaver>}元素。 
 *  <p>将在@{<@link> org.springframework.context.annotation.Configuration Configuration}类上使用； 
 * 最简单的示例如下：<pre class ="code"> @Configuration @EnableLoadTimeWeaving公共类AppConfig {//特定于应用程序的@Bean定义...} </ pre>上面的示例等效于以下Spring XML配置：<pre class ="code"> <beans> <context：load-time-weaver /> <！ 
 * -特定于应用程序的<bean>定义-> </ beans> </ pre> <h2> @code  LoadTimeWeaverAware}接口</ h2>任何实现{@link  org.springframework.context.weaving.LoadTimeWeaverAware LoadTimeWeaverAware}接口的bean都将自动收到{@code  LoadTimeWeaver}参考； 
 * 例如，Spring的JPA引导支持。 
 *  <h2>自定义{@code  LoadTimeWeaver} </ h2>默认编织器是自动确定的：请参见{@link  DefaultContextLoadTimeWeaver}。 
 *  <p>要自定义使用的编织器，用{@code  @EnableLoadTimeWeaving}注释的{@code  @Configuration}类还可以实现{@link  LoadTimeWeavingConfigurer}接口并返回自定义的{@code 通过{@code  #getLoadTimeWeaver}方法的LoadTimeWeaver}实例：<pre class ="code"> @Configuration @EnableLoadTimeWeaving公共类AppConfig实现LoadTimeWeavingConfigurer {@Override public LoadTimeWeaver getLoadTimeWeaver（）{MyLoadTimeWeaver ltw = new MyLoadTimeWeaver（）; ltw.addClassTransformer（myClassFileTransformer）; // ...返回ltw; }} </ pre> <p>可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <context：load-time-weaver weaverClass ="com.acme.MyLoadTimeWeaver"/> </ beans> </ pre> <p>该代码示例与XML示例的不同之处在于，它实际上实例化了{@code  MyLoadTimeWeaver}类型，这意味着它还可以配置实例，例如调用{@code  #addClassTransformer}方法。 
 * 这说明了基于代码的配置方法如何通过直接编程访问更加灵活。 
 *  <h2>启用基于AspectJ的编织</ h2>可以使用{@link  #aspectjWeaving（）}属性启用AspectJ加载时编织，这将导致{@link  plain org.aspectj.weaver。 
 *  loadtime.ClassPreProcessorAgentAdapter AspectJ类转换器}可以通过{@link  LoadTimeWeaver＃addTransformer}注册。 
 * 如果类路径中存在"META-INF / aop.xml"资源，则默认情况下将激活AspectJ编织。 
 * 示例：<pre class ="code"> @Configuration @EnableLoadTimeWeaving（aspectjWeaving = ENABLED）公共类AppConfig {} </ pre> <p>以上示例可以与以下Spring XML配置进行比较：<pre class ="code "> <beans> <context：load-time-weaver Aspectj-weaving ="on"/> </ beans> </ pre> <p>两个示例等效，但有一个重大例外：在XML情况下，功能当{@code  Aspectj-weaving}处于"on"状态时，{@code  <context：spring-configured>}中的隐式启用。 
 * 使用{@code  @EnableLoadTimeWeaving（aspectjWeaving = ENABLED）}时不会发生这种情况。 
 * 相反，您必须显式添加{@code  @EnableSpringConfigured}（包含在{@code  spring-aspects}模块中）@author  Chris Beams @since 3.1 
 * @see  LoadTimeWeaver 
 * @see  DefaultContextLoadTimeWeaver <
 * @see > org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(LoadTimeWeavingConfiguration.class)
public @interface EnableLoadTimeWeaving {

	/**
	 * Whether AspectJ weaving should be enabled.
	 */
	/**
	 * 是否应启用AspectJ编织。 
	 * 
	 */
	AspectJWeaving aspectjWeaving() default AspectJWeaving.AUTODETECT;


	/**
	 * AspectJ weaving enablement options.
	 */
	/**
	 * AspectJ编织启用选项。 
	 * 
	 */
	enum AspectJWeaving {

		/**
		 * Switches on Spring-based AspectJ load-time weaving.
		 */
		/**
		 * 启用基于Spring的AspectJ加载时编织。 
		 * 
		 */
		ENABLED,

		/**
		 * Switches off Spring-based AspectJ load-time weaving (even if a
		 * "META-INF/aop.xml" resource is present on the classpath).
		 */
		/**
		 * 关闭基于Spring的AspectJ加载时编织（即使类路径中存在"META-INF / aop.xml"资源）。 
		 * 
		 */
		DISABLED,

		/**
		 * Switches on AspectJ load-time weaving if a "META-INF/aop.xml" resource
		 * is present in the classpath. If there is no such resource, then AspectJ
		 * load-time weaving will be switched off.
		 */
		/**
		 * 如果类路径中存在"META-INF / aop.xml"资源，则打开AspectJ加载时编织。 
		 * 如果没有此类资源，则将关闭AspectJ的加载时编织。 
		 * 
		 */
		AUTODETECT;
	}

}
