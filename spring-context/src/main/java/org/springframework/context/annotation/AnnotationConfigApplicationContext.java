/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.annotation;

import java.util.function.Supplier;

import org.springframework.beans.factory.config.BeanDefinitionCustomizer;
import org.springframework.beans.factory.support.BeanNameGenerator;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import printer.DebugPrinter;

/**
 * Standalone application context, accepting <em>component classes</em> as input &mdash;
 * in particular {@link Configuration @Configuration}-annotated classes, but also plain
 * {@link org.springframework.stereotype.Component @Component} types and JSR-330 compliant
 * classes using {@code javax.inject} annotations.
 *
 * <p>Allows for registering classes one by one using {@link #register(Class...)}
 * as well as for classpath scanning using {@link #scan(String...)}.
 *
 * <p>In case of multiple {@code @Configuration} classes, {@link Bean @Bean} methods
 * defined in later classes will override those defined in earlier classes. This can
 * be leveraged to deliberately override certain bean definitions via an extra
 * {@code @Configuration} class.
 *
 * <p>See {@link Configuration @Configuration}'s javadoc for usage examples.
 *
 * @author Juergen Hoeller
 * @author Chris Beams
 * @since 3.0
 * @see #register
 * @see #scan
 * @see AnnotatedBeanDefinitionReader
 * @see ClassPathBeanDefinitionScanner
 * @see org.springframework.context.support.GenericXmlApplicationContext
 */
/**
 * 独立的应用程序上下文，接受<em>组件类</ em>作为输入-特别是{@link  Configuration @Configuration}注释的类，但也可以是普通的{@link  org.springframework.stereotype.Component @Component}类型和使用{@code  javax.inject}注解的JSR-330兼容类。 
 *  <p>允许使用{@link  #register（Class ...）}逐一注册类，以及使用{@link  #scan（String ...）}进行类路径扫描。 
 *  <p>如果有多个{@code  @Configuration}类，则以后的类中定义的{@link  Bean @Bean}方法将覆盖早期的类中定义的方法。 
 * 通过额外的{@code  @Configuration}类，可以利用它来故意覆盖某些Bean定义。 
 *  <p>有关使用示例，请参见{@link 配置@配置}的javadoc。 
 *  @author  Juergen Hoeller @author  Chris Beams @since 3.0起
 * @see  #register 
 * @see  #scan 
 * @see  AnnotatedBeanDefinitionReader 
 * @see  ClassPathBeanDefinitionScanner 
 * @see  org.springframework.context.support.GenericXmlApplicationContext
 */
public class AnnotationConfigApplicationContext extends GenericApplicationContext implements AnnotationConfigRegistry {

	private final AnnotatedBeanDefinitionReader reader;

	private final ClassPathBeanDefinitionScanner scanner;


	/**
	 * Create a new AnnotationConfigApplicationContext that needs to be populated
	 * through {@link #register} calls and then manually {@linkplain #refresh refreshed}.
	 */
	/**
	 * 创建一个新的AnnotationConfigApplicationContext，它需要通过{@link  #register}调用来填充，然后手动{@link  plain #refresh refreshed}。 
	 * 
	 */
	public AnnotationConfigApplicationContext() {
		super();
		DebugPrinter.log("设置reader和scanner，前面super调用父类构造");
		this.reader = new AnnotatedBeanDefinitionReader(this);
		this.scanner = new ClassPathBeanDefinitionScanner(this);
	}

	/**
	 * Create a new AnnotationConfigApplicationContext with the given DefaultListableBeanFactory.
	 * @param beanFactory the DefaultListableBeanFactory instance to use for this context
	 */
	/**
	 * 使用给定的DefaultListableBeanFactory创建一个新的AnnotationConfigApplicationContext。 
	 *  
	 * @param  beanFactory用于此上下文的DefaultListableBeanFactory实例
	 */
	public AnnotationConfigApplicationContext(DefaultListableBeanFactory beanFactory) {
		super(beanFactory);
		this.reader = new AnnotatedBeanDefinitionReader(this);
		this.scanner = new ClassPathBeanDefinitionScanner(this);
	}

	/**
	 * Create a new AnnotationConfigApplicationContext, deriving bean definitions
	 * from the given component classes and automatically refreshing the context.
	 * @param componentClasses one or more component classes &mdash; for example,
	 * {@link Configuration @Configuration} classes
	 */
	/**
	 * 创建一个新的AnnotationConfigApplicationContext，从给定的组件类派生bean定义并自动刷新上下文。 
	 *  
	 * @param componentClasses 一个或多个组件类-例如，{@link  Configuration @Configuration}类
	 */
	public AnnotationConfigApplicationContext(Class<?>... componentClasses) {
		this();
		DebugPrinter.log("注册传入的@Configuration对应的clazz");
		// register(AppConfig.class); this.BeanDefinitionMap.put(beanName, beanDefinition);
		register(componentClasses);
		DebugPrinter.log("刷新容器");
		refresh();
	}

	/**
	 * Create a new AnnotationConfigApplicationContext, scanning for components
	 * in the given packages, registering bean definitions for those components,
	 * and automatically refreshing the context.
	 * @param basePackages the packages to scan for component classes
	 */
	/**
	 * 创建一个新的AnnotationConfigApplicationContext，扫描给定包中的组件，为这些组件注册bean定义，并自动刷新上下文。 
	 *  
	 * @param basePackages 软件包以扫描组件类
	 */
	public AnnotationConfigApplicationContext(String... basePackages) {
		this();
		scan(basePackages);
		refresh();
	}


	/**
	 * Propagate the given custom {@code Environment} to the underlying
	 * {@link AnnotatedBeanDefinitionReader} and {@link ClassPathBeanDefinitionScanner}.
	 */
	/**
	 * 将给定的自定义{@code  Environment}传播到基础的{@link  AnnotatedBeanDefinitionReader}和{@link  ClassPathBeanDefinitionScanner}。 
	 * 
	 */
	@Override
	public void setEnvironment(ConfigurableEnvironment environment) {
		super.setEnvironment(environment);
		this.reader.setEnvironment(environment);
		this.scanner.setEnvironment(environment);
	}

	/**
	 * Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}
	 * and/or {@link ClassPathBeanDefinitionScanner}, if any.
	 * <p>Default is {@link AnnotationBeanNameGenerator}.
	 * <p>Any call to this method must occur prior to calls to {@link #register(Class...)}
	 * and/or {@link #scan(String...)}.
	 * @see AnnotatedBeanDefinitionReader#setBeanNameGenerator
	 * @see ClassPathBeanDefinitionScanner#setBeanNameGenerator
	 * @see AnnotationBeanNameGenerator
	 * @see FullyQualifiedAnnotationBeanNameGenerator
	 */
	/**
	 * 提供一个自定义的{@link  BeanNameGenerator}，以与{@link  AnnotatedBeanDefinitionReader}和/或{@link  ClassPathBeanDefinitionScanner}（如果有）一起使用。 
	 *  <p>默认值为{@link  AnnotationBeanNameGenerator}。 
	 *  <p>对此方法的任何调用必须在调用{@link  #register（Class ...）}和/或{@link  #scan（String ...）}之前进行。 
	 *  
	 * @see  AnnotatedBeanDefinitionReader＃setBeanNameGenerator 
	 * @see  ClassPathBeanDefinitionScanner＃setBeanNameGenerator 
	 * @see  AnnotationBeanNameGenerator 
	 * @see  FullyQualifiedAnnotationBeanNameGenerator
	 */
	public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {
		this.reader.setBeanNameGenerator(beanNameGenerator);
		this.scanner.setBeanNameGenerator(beanNameGenerator);
		getBeanFactory().registerSingleton(
				AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);
	}

	/**
	 * Set the {@link ScopeMetadataResolver} to use for registered component classes.
	 * <p>The default is an {@link AnnotationScopeMetadataResolver}.
	 * <p>Any call to this method must occur prior to calls to {@link #register(Class...)}
	 * and/or {@link #scan(String...)}.
	 */
	/**
	 * 设置{@link  ScopeMetadataResolver}用于已注册的组件类。 
	 *  <p>默认值为{@link  AnnotationScopeMetadataResolver}。 
	 *  <p>对此方法的任何调用必须在调用{@link  #register（Class ...）}和/或{@link  #scan（String ...）}之前进行。 
	 * 
	 */
	public void setScopeMetadataResolver(ScopeMetadataResolver scopeMetadataResolver) {
		this.reader.setScopeMetadataResolver(scopeMetadataResolver);
		this.scanner.setScopeMetadataResolver(scopeMetadataResolver);
	}


	//---------------------------------------------------------------------
	// Implementation of AnnotationConfigRegistry
	//---------------------------------------------------------------------

	/**
	 * Register one or more component classes to be processed.
	 * <p>Note that {@link #refresh()} must be called in order for the context
	 * to fully process the new classes.
	 * @param componentClasses one or more component classes &mdash; for example,
	 * {@link Configuration @Configuration} classes
	 * @see #scan(String...)
	 * @see #refresh()
	 */
	/**
	 * 注册一个或多个要处理的组件类。 
	 *  <p>请注意，必须调用{@link  #refresh（）}才能使上下文完全处理新类。 
	 *  
	 * @param  componentClasss一个或多个组件类-例如，{@link  Configuration @Configuration}类
	 * @see  #scan（String ...）
	 * @see  #refresh（）
	 */
	@Override
	public void register(Class<?>... componentClasses) {
		DebugPrinter.log("调用reader注册");
		Assert.notEmpty(componentClasses, "At least one component class must be specified");
		this.reader.register(componentClasses);
	}

	/**
	 * Perform a scan within the specified base packages.
	 * <p>Note that {@link #refresh()} must be called in order for the context
	 * to fully process the new classes.
	 * @param basePackages the packages to scan for component classes
	 * @see #register(Class...)
	 * @see #refresh()
	 */
	/**
	 * 在指定的基本程序包中执行扫描。 
	 *  <p>请注意，必须调用{@link  #refresh（）}才能使上下文完全处理新类。 
	 *  
	 * @param  base打包软件包以扫描组件类
	 * @see  #register（Class ...）
	 * @see  #refresh（）
	 */
	@Override
	public void scan(String... basePackages) {
		Assert.notEmpty(basePackages, "At least one base package must be specified");
		this.scanner.scan(basePackages);
	}


	//---------------------------------------------------------------------
	// Adapt superclass registerBean calls to AnnotatedBeanDefinitionReader
	//---------------------------------------------------------------------

	@Override
	public <T> void registerBean(@Nullable String beanName, Class<T> beanClass,
			@Nullable Supplier<T> supplier, BeanDefinitionCustomizer... customizers) {

		this.reader.registerBean(beanClass, beanName, supplier, customizers);
	}

}
