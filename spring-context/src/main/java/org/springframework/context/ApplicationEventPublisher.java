/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

/**
 * Interface that encapsulates event publication functionality.
 *
 * <p>Serves as a super-interface for {@link ApplicationContext}.
 *
 * @author Juergen Hoeller
 * @author Stephane Nicoll
 * @since 1.1.1
 * @see ApplicationContext
 * @see ApplicationEventPublisherAware
 * @see org.springframework.context.ApplicationEvent
 * @see org.springframework.context.event.ApplicationEventMulticaster
 * @see org.springframework.context.event.EventPublicationInterceptor
 */
/**
 * 封装事件发布功能的接口。 
 *  <p>用作{@link  ApplicationContext}的超级接口。 
 *  @author  Juergen Hoeller @author  Stephane Nicoll @1.1.1。 
 * 开始
 * @see  ApplicationContext 
 * @see  ApplicationEventPublisherAware 
 * @see  org.springframework.context.ApplicationEvent 
 * @see  org.springframework.context.event。 
 *  ApplicationEventMulticaster 
 * @see  org.springframework.context.event.EventPublicationInterceptor
 */
@FunctionalInterface
public interface ApplicationEventPublisher {

	/**
	 * Notify all <strong>matching</strong> listeners registered with this
	 * application of an application event. Events may be framework events
	 * (such as ContextRefreshedEvent) or application-specific events.
	 * <p>Such an event publication step is effectively a hand-off to the
	 * multicaster and does not imply synchronous/asynchronous execution
	 * or even immediate execution at all. Event listeners are encouraged
	 * to be as efficient as possible, individually using asynchronous
	 * execution for longer-running and potentially blocking operations.
	 * @param event the event to publish
	 * @see #publishEvent(Object)
	 * @see org.springframework.context.event.ContextRefreshedEvent
	 * @see org.springframework.context.event.ContextClosedEvent
	 */
	/**
	 * 将应用程序事件通知此应用程序注册的所有<strong>匹配</ strong>侦听器。 
	 * 事件可以是框架事件（例如ContextRefreshedEvent）或特定于应用程序的事件。 
	 *  <p>这样的事件发布步骤实际上是切换到多播器，并不意味着完全同步/异步执行或什至立即执行。 
	 * 鼓励事件侦听器尽可能地高效，并单独使用异步执行来运行更长的时间并可能阻塞操作。 
	 *  
	 * @param 事件要发布的事件
	 * @see  #publishEvent（Object）
	 * @see  org.springframework.context.event.ContextRefreshedEvent 
	 * @see  org.springframework.context.event.ContextClosedEvent
	 */
	default void publishEvent(ApplicationEvent event) {
		publishEvent((Object) event);
	}

	/**
	 * Notify all <strong>matching</strong> listeners registered with this
	 * application of an event.
	 * <p>If the specified {@code event} is not an {@link ApplicationEvent},
	 * it is wrapped in a {@link PayloadApplicationEvent}.
	 * <p>Such an event publication step is effectively a hand-off to the
	 * multicaster and does not imply synchronous/asynchronous execution
	 * or even immediate execution at all. Event listeners are encouraged
	 * to be as efficient as possible, individually using asynchronous
	 * execution for longer-running and potentially blocking operations.
	 * @param event the event to publish
	 * @since 4.2
	 * @see #publishEvent(ApplicationEvent)
	 * @see PayloadApplicationEvent
	 */
	/**
	 * 通知所有与此应用程序注册的<strong>匹配</ strong>侦听器。 
	 *  <p>如果指定的{@code 事件}不是{@link  ApplicationEvent}，则将其包装在{@link  PayloadApplicationEvent}中。 
	 *  <p>这样的事件发布步骤实际上是切换到多播器，并不意味着完全同步/异步执行或什至立即执行。 
	 * 鼓励事件侦听器尽可能地高效，并单独使用异步执行来运行更长的时间并可能阻塞操作。 
	 *  
	 * @param 事件自@4.2起发布的事件
	 * @see  #publishEvent（ApplicationEvent）
	 * @see  PayloadApplicationEvent
	 */
	void publishEvent(Object event);

}
