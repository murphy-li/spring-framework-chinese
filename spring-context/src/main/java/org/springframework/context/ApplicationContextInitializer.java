/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

/**
 * Callback interface for initializing a Spring {@link ConfigurableApplicationContext}
 * prior to being {@linkplain ConfigurableApplicationContext#refresh() refreshed}.
 *
 * <p>Typically used within web applications that require some programmatic initialization
 * of the application context. For example, registering property sources or activating
 * profiles against the {@linkplain ConfigurableApplicationContext#getEnvironment()
 * context's environment}. See {@code ContextLoader} and {@code FrameworkServlet} support
 * for declaring a "contextInitializerClasses" context-param and init-param, respectively.
 *
 * <p>{@code ApplicationContextInitializer} processors are encouraged to detect
 * whether Spring's {@link org.springframework.core.Ordered Ordered} interface has been
 * implemented or if the @{@link org.springframework.core.annotation.Order Order}
 * annotation is present and to sort instances accordingly if so prior to invocation.
 *
 * @author Chris Beams
 * @since 3.1
 * @param <C> the application context type
 * @see org.springframework.web.context.ContextLoader#customizeContext
 * @see org.springframework.web.context.ContextLoader#CONTEXT_INITIALIZER_CLASSES_PARAM
 * @see org.springframework.web.servlet.FrameworkServlet#setContextInitializerClasses
 * @see org.springframework.web.servlet.FrameworkServlet#applyInitializers
 */
/**
 * 用于在刷新{@link  plain ConfigurableApplicationContext＃refresh（）}之前初始化Spring {@link  ConfigurableApplicationContext}的回调接口。 
 *  <p>通常在需要对应用程序上下文进行一些编程初始化的Web应用程序中使用。 
 * 例如，针对{@link  plain ConfigurableApplicationContext＃getEnvironment（）上下文环境）注册属性源或激活配置文件。 
 * 请参见{@code  ContextLoader}和{@code  FrameworkServlet}支持，分别声明"contextInitializerClasses"上下文参数和初始化参数。 
 * 鼓励<p> {<@code> ApplicationContextInitializer}处理器检测是否已实现Spring的{@link  org.springframework.core.Ordered Ordered}接口或@{<@link> org.springframework.core。 
 * 注解存在。 
 * 如果存在注解，则在调用之前对注解进行相应的排序。 
 *  @author  Chris Beams @since 3.1 
 * @param  <C>应用程序上下文类型
 * @see  org.springframework.web.context.ContextLoader＃customizeContext 
 * @see  org.springframework.web.context.ContextLoader＃CONTEXT_INITIALIZER_CLASSES_PARAM 
 * @see  org.springframework.web.servlet.FrameworkServlet＃setContextInitializerClasses 
 * @see  org.springframework.web.servlet.FrameworkServlet＃applyInitializers
 */
public interface ApplicationContextInitializer<C extends ConfigurableApplicationContext> {

	/**
	 * Initialize the given application context.
	 * @param applicationContext the application to configure
	 */
	/**
	 * 初始化给定的应用程序上下文。 
	 *  
	 * @param  applicationContext要配置的应用程序
	 */
	void initialize(C applicationContext);

}
