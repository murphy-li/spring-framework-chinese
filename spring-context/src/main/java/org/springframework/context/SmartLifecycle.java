/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

/**
 * An extension of the {@link Lifecycle} interface for those objects that require
 * to be started upon {@code ApplicationContext} refresh and/or shutdown in a
 * particular order.
 *
 * <p>The {@link #isAutoStartup()} return value indicates whether this object should
 * be started at the time of a context refresh. The callback-accepting
 * {@link #stop(Runnable)} method is useful for objects that have an asynchronous
 * shutdown process. Any implementation of this interface <i>must</i> invoke the
 * callback's {@code run()} method upon shutdown completion to avoid unnecessary
 * delays in the overall {@code ApplicationContext} shutdown.
 *
 * <p>This interface extends {@link Phased}, and the {@link #getPhase()} method's
 * return value indicates the phase within which this {@code Lifecycle} component
 * should be started and stopped. The startup process begins with the <i>lowest</i>
 * phase value and ends with the <i>highest</i> phase value ({@code Integer.MIN_VALUE}
 * is the lowest possible, and {@code Integer.MAX_VALUE} is the highest possible).
 * The shutdown process will apply the reverse order. Any components with the
 * same value will be arbitrarily ordered within the same phase.
 *
 * <p>Example: if component B depends on component A having already started,
 * then component A should have a lower phase value than component B. During
 * the shutdown process, component B would be stopped before component A.
 *
 * <p>Any explicit "depends-on" relationship will take precedence over the phase
 * order such that the dependent bean always starts after its dependency and
 * always stops before its dependency.
 *
 * <p>Any {@code Lifecycle} components within the context that do not also
 * implement {@code SmartLifecycle} will be treated as if they have a phase
 * value of {@code 0}. This allows a {@code SmartLifecycle} component to start
 * before those {@code Lifecycle} components if the {@code SmartLifecycle}
 * component has a negative phase value, or the {@code SmartLifecycle} component
 * may start after those {@code Lifecycle} components if the {@code SmartLifecycle}
 * component has a positive phase value.
 *
 * <p>Note that, due to the auto-startup support in {@code SmartLifecycle}, a
 * {@code SmartLifecycle} bean instance will usually get initialized on startup
 * of the application context in any case. As a consequence, the bean definition
 * lazy-init flag has very limited actual effect on {@code SmartLifecycle} beans.
 *
 * @author Mark Fisher
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 3.0
 * @see LifecycleProcessor
 * @see ConfigurableApplicationContext
 */
/**
 * {@link 生命周期}接口的扩展，用于需要在{@code  ApplicationContext}刷新和/或关闭时按特定顺序启动的那些对象。 
 *  <p> {<@link> #isAutoStartup（）}返回值指示是否应在上下文刷新时启动此对象。 
 * 接受回调的{@link  #stop（Runnable）}方法对于具有异步关闭过程的对象很有用。 
 * 该接口的任何实现<i> </ i>必须在关闭完成时调用回调的{@code  run（）}方法，以避免在整个{@code  ApplicationContext}关闭中不必要的延迟。 
 *  <p>此接口扩展了{@link  Phased}，并且{@link  #getPhase（）}方法的返回值指示此{@code  Lifecycle}组件应在其中启动和停止的阶段。 
 * 启动过程以<i>最低</ i>相位值开始，以<i>最高</ i>相位值结束（{@code  Integer.MIN_VALUE}是最低的，而{<@code > Integer.MAX_VALUE}是最高值）。 
 * 关闭过程将应用相反的顺序。 
 * 具有相同值的任何组件将在同一阶段内任意订购。 
 *  <p>示例：如果组件B依赖于已经启动的组件A，则组件A的相位值应低于组件B。 
 * 在关机过程中，组件B将在组件A之前停止。 
 *  "-on"关系将优先于阶段顺序，以便从属bean始终在其依赖之后开始，并始终在其依赖之前停止。 
 *  <p>上下文中任何还没有实现{@code  SmartLifecycle}的{@code  Lifecycle}组件都将被视为相位值为{@code  0}。 
 * 如果{@code  SmartLifecycle}组件的相位值为负，则允许{@code  SmartLifecycle}组件在这些{@code  Lifecycle}组件之前启动，或者{@code  SmartLifecycle}组件可能如果{@code  SmartLifecycle}组件具有正相位值，则在这些{@code  Lifecycle}组件之后开始。 
 *  <p>请注意，由于{@code  SmartLifecycle}中的自动启动支持，无论如何，通常会在应用程序上下文启动时初始化{@code  SmartLifecycle} bean实例。 
 * 结果，bean定义lazy-init标志对{@code  SmartLifecycle} bean的实际影响非常有限。 
 *  @author  Mark Fisher @author  Juergen Hoeller @author  Sam Brannen @since 3.0 
 * @see  LifecycleProcessor 
 * @see  ConfigurableApplicationContext
 */
public interface SmartLifecycle extends Lifecycle, Phased {

	/**
	 * The default phase for {@code SmartLifecycle}: {@code Integer.MAX_VALUE}.
	 * <p>This is different from the common phase {@code 0} associated with regular
	 * {@link Lifecycle} implementations, putting the typically auto-started
	 * {@code SmartLifecycle} beans into a later startup phase and an earlier
	 * shutdown phase.
	 * @since 5.1
	 * @see #getPhase()
	 * @see org.springframework.context.support.DefaultLifecycleProcessor#getPhase(Lifecycle)
	 */
	/**
	 * {@code  SmartLifecycle}的默认阶段：{@code  Integer.MAX_VALUE}。 
	 *  <p>这不同于与常规{@link  Lifecycle}实现相关联的公共阶段{@code  0}，它将通常自动启动的{@code  SmartLifecycle} bean放入稍后的启动阶段，并且较早的关机阶段。 
	 *  @since 5.1 
	 * @see  #getPhase（）
	 * @see  org.springframework.context.support.DefaultLifecycleProcessor＃getPhase（生命周期）
	 */
	int DEFAULT_PHASE = Integer.MAX_VALUE;


	/**
	 * Returns {@code true} if this {@code Lifecycle} component should get
	 * started automatically by the container at the time that the containing
	 * {@link ApplicationContext} gets refreshed.
	 * <p>A value of {@code false} indicates that the component is intended to
	 * be started through an explicit {@link #start()} call instead, analogous
	 * to a plain {@link Lifecycle} implementation.
	 * <p>The default implementation returns {@code true}.
	 * @see #start()
	 * @see #getPhase()
	 * @see LifecycleProcessor#onRefresh()
	 * @see ConfigurableApplicationContext#refresh()
	 */
	/**
	 * 如果此{@code  Lifecycle}组件在刷新包含的{@link  ApplicationContext}时由容器自动启动，则返回{@code  Lifecycle}。 
	 *  <p>值为{@code  false}表示该组件旨在通过显式{@link  #start（）}调用来启动，类似于普通的{@link  Lifecycle}实现。 
	 *  <p>默认实现返回{@code  true}。 
	 *  
	 * @see  #start（）
	 * @see  #getPhase（）
	 * @see  LifecycleProcessor＃onRefresh（）
	 * @see  ConfigurableApplicationContext＃refresh（）
	 */
	default boolean isAutoStartup() {
		return true;
	}

	/**
	 * Indicates that a Lifecycle component must stop if it is currently running.
	 * <p>The provided callback is used by the {@link LifecycleProcessor} to support
	 * an ordered, and potentially concurrent, shutdown of all components having a
	 * common shutdown order value. The callback <b>must</b> be executed after
	 * the {@code SmartLifecycle} component does indeed stop.
	 * <p>The {@link LifecycleProcessor} will call <i>only</i> this variant of the
	 * {@code stop} method; i.e. {@link Lifecycle#stop()} will not be called for
	 * {@code SmartLifecycle} implementations unless explicitly delegated to within
	 * the implementation of this method.
	 * <p>The default implementation delegates to {@link #stop()} and immediately
	 * triggers the given callback in the calling thread. Note that there is no
	 * synchronization between the two, so custom implementations may at least
	 * want to put the same steps within their common lifecycle monitor (if any).
	 * @see #stop()
	 * @see #getPhase()
	 */
	/**
	 * 指示生命周期组件如果正在运行，则必须停止。 
	 *  <p> {<@link> LifecycleProcessor}使用所提供的回调来支持具有共同关闭顺序值的所有组件的有序且潜在地并发关闭。 
	 *  {@code  SmartLifecycle}组件确实停止后，必须执行回调<b> </ b>。 
	 *  <p> {<@link> LifecycleProcessor}将仅调用<i> </ i>这种{@code  stop}方法的变体； 
	 * 即{@link  Lifecycle＃stop（）}不会在{@code  SmartLifecycle}实现中被调用，除非在此方法的实现中明确委托给它。 
	 *  <p>默认实现委托给{@link  #stop（）}并立即在调用线程中触发给定的回调。 
	 * 请注意，两者之间没有同步，因此自定义实现可能至少希望将相同的步骤放入其公共生命周期监视器（如果有）中。 
	 *  
	 * @see  #stop（）
	 * @see  #getPhase（）
	 */
	default void stop(Runnable callback) {
		stop();
		callback.run();
	}

	/**
	 * Return the phase that this lifecycle object is supposed to run in.
	 * <p>The default implementation returns {@link #DEFAULT_PHASE} in order to
	 * let {@code stop()} callbacks execute after regular {@code Lifecycle}
	 * implementations.
	 * @see #isAutoStartup()
	 * @see #start()
	 * @see #stop(Runnable)
	 * @see org.springframework.context.support.DefaultLifecycleProcessor#getPhase(Lifecycle)
	 */
	/**
	 * 返回此生命周期对象应该在其中运行的阶段。 
	 * <p>默认实现返回{@link  #DEFAULT_PHASE}，以便让{@code  stop（）}回调在常规{@code 之后执行生命周期}实现。 
	 *  
	 * @see  #isAutoStartup（）
	 * @see  #start（）
	 * @see  #stop（Runnable）
	 * @see  org.springframework.context.support.DefaultLifecycleProcessor＃getPhase（生命周期）
	 */
	@Override
	default int getPhase() {
		return DEFAULT_PHASE;
	}

}
