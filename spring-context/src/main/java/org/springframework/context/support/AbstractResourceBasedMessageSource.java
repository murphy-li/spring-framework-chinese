/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2020的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.support;

import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;

import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.ObjectUtils;

/**
 * Abstract base class for {@code MessageSource} implementations based on
 * resource bundle conventions, such as {@link ResourceBundleMessageSource}
 * and {@link ReloadableResourceBundleMessageSource}. Provides common
 * configuration methods and corresponding semantic definitions.
 *
 * @author Juergen Hoeller
 * @since 4.3
 * @see ResourceBundleMessageSource
 * @see ReloadableResourceBundleMessageSource
 */
/**
 * 基于资源束约定的{@code  MessageSource}实现的抽象基类，例如{@link  ResourceBundleMessageSource}和{@link  ReloadableResourceBundleMessageSource}。 
 * 提供常见的配置方法和相应的语义定义。 
 *  @author  Juergen Hoeller @自4.3起
 * @see  ResourceBundleMessageSource 
 * @see  ReloadableResourceBundleMessageSource
 */
public abstract class AbstractResourceBasedMessageSource extends AbstractMessageSource {

	private final Set<String> basenameSet = new LinkedHashSet<>(4);

	@Nullable
	private String defaultEncoding;

	private boolean fallbackToSystemLocale = true;

	@Nullable
	private Locale defaultLocale;

	private long cacheMillis = -1;


	/**
	 * Set a single basename, following the basic ResourceBundle convention
	 * of not specifying file extension or language codes. The resource location
	 * format is up to the specific {@code MessageSource} implementation.
	 * <p>Regular and XMl properties files are supported: e.g. "messages" will find
	 * a "messages.properties", "messages_en.properties" etc arrangement as well
	 * as "messages.xml", "messages_en.xml" etc.
	 * @param basename the single basename
	 * @see #setBasenames
	 * @see org.springframework.core.io.ResourceEditor
	 * @see java.util.ResourceBundle
	 */
	/**
	 * 遵循不指定文件扩展名或语言代码的基本ResourceBundle约定，设置一个基本名称。 
	 * 资源位置格式取决于特定的{@code  MessageSource}实现。 
	 *  <p>支持常规和XMl属性文件：例如"messages"将找到"messages.properties"，"messages_en.properties"等排列以及"messages.xml"，"messages_en.xml"等。 
	 * 
	 * @param  basename单个basename 
	 * @see  #setBasenames 
	 * @see  org.springframework.core.io.ResourceEditor 
	 * @see  java.util.ResourceBundle
	 */
	public void setBasename(String basename) {
		setBasenames(basename);
	}

	/**
	 * Set an array of basenames, each following the basic ResourceBundle convention
	 * of not specifying file extension or language codes. The resource location
	 * format is up to the specific {@code MessageSource} implementation.
	 * <p>Regular and XMl properties files are supported: e.g. "messages" will find
	 * a "messages.properties", "messages_en.properties" etc arrangement as well
	 * as "messages.xml", "messages_en.xml" etc.
	 * <p>The associated resource bundles will be checked sequentially when resolving
	 * a message code. Note that message definitions in a <i>previous</i> resource
	 * bundle will override ones in a later bundle, due to the sequential lookup.
	 * <p>Note: In contrast to {@link #addBasenames}, this replaces existing entries
	 * with the given names and can therefore also be used to reset the configuration.
	 * @param basenames an array of basenames
	 * @see #setBasename
	 * @see java.util.ResourceBundle
	 */
	/**
	 * 设置一个基本名称数组，每个基本名称遵循不指定文件扩展名或语言代码的基本ResourceBundle约定。 
	 * 资源位置格式取决于特定的{@code  MessageSource}实现。 
	 *  <p>支持常规和XMl属性文件：例如"messages"将找到"messages.properties"，"messages_en.properties"等排列以及"messages.xml"，"messages_en.xml"等。 
	 * <p>在解析消息时，将顺序检查关联的资源包码。 
	 * 请注意，由于顺序查找，<i>上一个</ i>资源束中的消息定义将覆盖后一个束中的消息定义。 
	 *  <p>注意：与{@link  #addBasenames}相比，它用给定名称替换现有条目，因此也可以用来重置配置。 
	 *  
	 * @param  basenames一个基本名称数组
	 * @see  #setBasename 
	 * @see  java.util.ResourceBundle
	 */
	public void setBasenames(String... basenames) {
		this.basenameSet.clear();
		addBasenames(basenames);
	}

	/**
	 * Add the specified basenames to the existing basename configuration.
	 * <p>Note: If a given basename already exists, the position of its entry
	 * will remain as in the original set. New entries will be added at the
	 * end of the list, to be searched after existing basenames.
	 * @since 4.3
	 * @see #setBasenames
	 * @see java.util.ResourceBundle
	 */
	/**
	 * 将指定的基本名称添加到现有的基本名称配置中。 
	 *  <p>注意：如果给定的基名已经存在，则其条目的位置将保持原始集中的名称。 
	 * 新条目将添加到列表的末尾，以便在现有基本名之后进行搜索。 
	 *  @since 4.3 
	 * @see  #setBasenames 
	 * @see  java.util.ResourceBundle
	 */
	public void addBasenames(String... basenames) {
		if (!ObjectUtils.isEmpty(basenames)) {
			for (String basename : basenames) {
				Assert.hasText(basename, "Basename must not be empty");
				this.basenameSet.add(basename.trim());
			}
		}
	}

	/**
	 * Return this {@code MessageSource}'s basename set, containing entries
	 * in the order of registration.
	 * <p>Calling code may introspect this set as well as add or remove entries.
	 * @since 4.3
	 * @see #addBasenames
	 */
	/**
	 * 返回此{@code  MessageSource}的基本名称集，其中包含注册顺序的条目。 
	 *  <p>调用代码可能会对此集合进行内部检查以及添加或删除条目。 
	 *  @since 4.3 
	 * @see  #addBasenames
	 */
	public Set<String> getBasenameSet() {
		return this.basenameSet;
	}

	/**
	 * Set the default charset to use for parsing properties files.
	 * Used if no file-specific charset is specified for a file.
	 * <p>The effective default is the {@code java.util.Properties}
	 * default encoding: ISO-8859-1. A {@code null} value indicates
	 * the platform default encoding.
	 * <p>Only applies to classic properties files, not to XML files.
	 * @param defaultEncoding the default charset
	 */
	/**
	 * 设置用于分析属性文件的默认字符集。 
	 * 如果未为文件指定特定于文件的字符集，则使用此方法。 
	 *  <p>有效的默认值为{@code  java.util.Properties}的默认编码：ISO-8859-1。 
	 *  {@code  null}值表示平台默认编码。 
	 *  <p>仅适用于经典属性文件，不适用于XML文件。 
	 *  
	 * @param  default编码默认字符集
	 */
	public void setDefaultEncoding(@Nullable String defaultEncoding) {
		this.defaultEncoding = defaultEncoding;
	}

	/**
	 * Return the default charset to use for parsing properties files, if any.
	 * @since 4.3
	 */
	/**
	 * 返回用于分析属性文件的默认字符集（如果有）。 
	 *  @4.3起
	 */
	@Nullable
	protected String getDefaultEncoding() {
		return this.defaultEncoding;
	}

	/**
	 * Set whether to fall back to the system Locale if no files for a specific
	 * Locale have been found. Default is "true"; if this is turned off, the only
	 * fallback will be the default file (e.g. "messages.properties" for
	 * basename "messages").
	 * <p>Falling back to the system Locale is the default behavior of
	 * {@code java.util.ResourceBundle}. However, this is often not desirable
	 * in an application server environment, where the system Locale is not relevant
	 * to the application at all: set this flag to "false" in such a scenario.
	 * @see #setDefaultLocale
	 */
	/**
	 * 设置是否在没有找到特定语言环境的文件的情况下是否回退到系统语言环境。 
	 * 默认值为"true"； 
	 * 如果将其关闭，则唯一的后援将是默认文件（例如，基本名称"messages"的"messages.properties"）。 
	 *  <p>回退到系统区域设置是{@code  java.util.ResourceBundle}的默认行为。 
	 * 但是，这在系统区域设置与应用程序根本不相关的应用程序服务器环境中通常是不希望的：在这种情况下，将此标志设置为"false"。 
	 *  
	 * @see  #setDefaultLocale
	 */
	public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {
		this.fallbackToSystemLocale = fallbackToSystemLocale;
	}

	/**
	 * Return whether to fall back to the system Locale if no files for a specific
	 * Locale have been found.
	 * @since 4.3
	 * @deprecated as of 5.2.2, in favor of {@link #getDefaultLocale()}
	 */
	/**
	 * 如果未找到特定语言环境的文件，则返回是否回退到系统语言环境。 
	 *  @since 4.3 @5.2.2起已弃用，建议使用{@link  #getDefaultLocale（）}
	 */
	@Deprecated
	protected boolean isFallbackToSystemLocale() {
		return this.fallbackToSystemLocale;
	}

	/**
	 * Specify a default Locale to fall back to, as an alternative to falling back
	 * to the system Locale.
	 * <p>Default is to fall back to the system Locale. You may override this with
	 * a locally specified default Locale here, or enforce no fallback locale at all
	 * through disabling {@link #setFallbackToSystemLocale "fallbackToSystemLocale"}.
	 * @since 5.2.2
	 * @see #setFallbackToSystemLocale
	 * @see #getDefaultLocale()
	 */
	/**
	 * 指定默认的语言环境作为回退到系统语言环境的替代方法。 
	 *  <p>默认为回退到系统区域设置。 
	 * 您可以在此处使用本地指定的默认区域设置来覆盖此设置，也可以通过禁用{@link  #setFallbackToSystemLocale"fallbackToSystemLocale"}来完全不执行任何回退区域设置。 
	 *  @since 5.2.2 
	 * @see  #setFallbackToSystemLocale 
	 * @see  #getDefaultLocale（）
	 */
	public void setDefaultLocale(@Nullable Locale defaultLocale) {
		this.defaultLocale = defaultLocale;
	}

	/**
	 * Determine a default Locale to fall back to: either a locally specified default
	 * Locale or the system Locale, or {@code null} for no fallback locale at all.
	 * @since 5.2.2
	 * @see #setDefaultLocale
	 * @see #setFallbackToSystemLocale
	 * @see Locale#getDefault()
	 */
	/**
	 * 确定要回退到的默认语言环境：本地指定的默认语言环境或系统语言环境，或者完全不使用回退语言环境的{@code  null}。 
	 *  @since 5.2.2 
	 * @see  #setDefaultLocale 
	 * @see  #setFallbackToSystemLocale 
	 * @see 语言环境#getDefault（）
	 */
	@Nullable
	protected Locale getDefaultLocale() {
		if (this.defaultLocale != null) {
			return this.defaultLocale;
		}
		if (this.fallbackToSystemLocale) {
			return Locale.getDefault();
		}
		return null;
	}

	/**
	 * Set the number of seconds to cache loaded properties files.
	 * <ul>
	 * <li>Default is "-1", indicating to cache forever (matching the default behavior
	 * of {@code java.util.ResourceBundle}). Note that this constant follows Spring
	 * conventions, not {@link java.util.ResourceBundle.Control#getTimeToLive}.
	 * <li>A positive number will cache loaded properties files for the given
	 * number of seconds. This is essentially the interval between refresh checks.
	 * Note that a refresh attempt will first check the last-modified timestamp
	 * of the file before actually reloading it; so if files don't change, this
	 * interval can be set rather low, as refresh attempts will not actually reload.
	 * <li>A value of "0" will check the last-modified timestamp of the file on
	 * every message access. <b>Do not use this in a production environment!</b>
	 * </ul>
	 * <p><b>Note that depending on your ClassLoader, expiration might not work reliably
	 * since the ClassLoader may hold on to a cached version of the bundle file.</b>
	 * Prefer {@link ReloadableResourceBundleMessageSource} over
	 * {@link ResourceBundleMessageSource} in such a scenario, in combination with
	 * a non-classpath location.
	 */
	/**
	 * 设置缓存加载的属性文件的秒数。 
	 *  <ul> <li>默认值为"-1"，表示要永久缓存（与{@code  java.util.ResourceBundle}的默认行为匹配）。 
	 * 请注意，此常量遵循Spring约定，而不是{@link  java.util.ResourceBundle.Control＃getTimeToLive}。 
	 *  <li>正数将在给定的秒数内缓存加载的属性文件。 
	 * 这实际上是刷新检查之间的间隔。 
	 * 请注意，刷新尝试将首先检查文件的最后修改时间戳，然后再实际重新加载它。 
	 * 因此，如果文件没有更改，则可以将此间隔设置得较低，因为刷新尝试实际上不会重新加载。 
	 *  <li>值"0"将检查每次消息访问时文件的最后修改的时间戳。 
	 *  <b>请勿在生产环境中使用此功能！ 
	 * </ b> </ ul> <p> <b>请注意，根据ClassLoader的不同，过期可能无法可靠地起作用，因为ClassLoader可能会保留其缓存版本。 
	 *  </ b>在这种情况下，结合非类路径位置，优先使用{@link  ReloadableResourceBundleMessageSource}优于{@link  ResourceBundleMessageSource}。 
	 * 
	 */
	public void setCacheSeconds(int cacheSeconds) {
		this.cacheMillis = (cacheSeconds * 1000);
	}

	/**
	 * Set the number of milliseconds to cache loaded properties files.
	 * Note that it is common to set seconds instead: {@link #setCacheSeconds}.
	 * <ul>
	 * <li>Default is "-1", indicating to cache forever (matching the default behavior
	 * of {@code java.util.ResourceBundle}). Note that this constant follows Spring
	 * conventions, not {@link java.util.ResourceBundle.Control#getTimeToLive}.
	 * <li>A positive number will cache loaded properties files for the given
	 * number of milliseconds. This is essentially the interval between refresh checks.
	 * Note that a refresh attempt will first check the last-modified timestamp
	 * of the file before actually reloading it; so if files don't change, this
	 * interval can be set rather low, as refresh attempts will not actually reload.
	 * <li>A value of "0" will check the last-modified timestamp of the file on
	 * every message access. <b>Do not use this in a production environment!</b>
	 * </ul>
	 * @since 4.3
	 * @see #setCacheSeconds
	 */
	/**
	 * 设置毫秒数以缓存加载的属性文件。 
	 * 请注意，通常以秒为单位设置：{@link  #setCacheSeconds}。 
	 *  <ul> <li>默认值为"-1"，表示要永久缓存（与{@code  java.util.ResourceBundle}的默认行为匹配）。 
	 * 请注意，此常量遵循Spring约定，而不是{@link  java.util.ResourceBundle.Control＃getTimeToLive}。 
	 *  <li>正数将在给定的毫秒数内缓存加载的属性文件。 
	 * 这实际上是刷新检查之间的间隔。 
	 * 请注意，刷新尝试将首先检查文件的最后修改时间戳，然后再实际重新加载它。 
	 * 因此，如果文件没有更改，则可以将此间隔设置得较低，因为刷新尝试实际上不会重新加载。 
	 *  <li>值"0"将检查每次消息访问时文件的最后修改的时间戳。 
	 *  <b>请勿在生产环境中使用它！ 
	 * </ b> </ ul> @从4.3开始
	 * @see  #setCacheSeconds
	 */
	public void setCacheMillis(long cacheMillis) {
		this.cacheMillis = cacheMillis;
	}

	/**
	 * Return the number of milliseconds to cache loaded properties files.
	 * @since 4.3
	 */
	/**
	 * 返回缓存加载的属性文件的毫秒数。 
	 *  @4.3起
	 */
	protected long getCacheMillis() {
		return this.cacheMillis;
	}

}
