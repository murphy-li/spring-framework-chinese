/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.support;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.lang.Nullable;

/**
 * Standalone XML application context, taking the context definition files
 * from the file system or from URLs, interpreting plain paths as relative
 * file system locations (e.g. "mydir/myfile.txt"). Useful for test harnesses
 * as well as for standalone environments.
 *
 * <p><b>NOTE:</b> Plain paths will always be interpreted as relative
 * to the current VM working directory, even if they start with a slash.
 * (This is consistent with the semantics in a Servlet container.)
 * <b>Use an explicit "file:" prefix to enforce an absolute file path.</b>
 *
 * <p>The config location defaults can be overridden via {@link #getConfigLocations},
 * Config locations can either denote concrete files like "/myfiles/context.xml"
 * or Ant-style patterns like "/myfiles/*-context.xml" (see the
 * {@link org.springframework.util.AntPathMatcher} javadoc for pattern details).
 *
 * <p>Note: In case of multiple config locations, later bean definitions will
 * override ones defined in earlier loaded files. This can be leveraged to
 * deliberately override certain bean definitions via an extra XML file.
 *
 * <p><b>This is a simple, one-stop shop convenience ApplicationContext.
 * Consider using the {@link GenericApplicationContext} class in combination
 * with an {@link org.springframework.beans.factory.xml.XmlBeanDefinitionReader}
 * for more flexible context setup.</b>
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see #getResource
 * @see #getResourceByPath
 * @see GenericApplicationContext
 */
/**
 * 独立XML应用程序上下文，从文件系统或URL中获取上下文定义文件，将纯路径解释为相对文件系统位置（例如"mydir / myfile.txt"）。 
 * 对于测试工具以及独立环境很有用。 
 *  <p> <b>注意：</ b>即使纯路径以斜杠开头，也始终将其解释为相对于当前VM工作目录的相对路径。 
 *  （这与Servlet容器中的语义一致。 
 * ）<b>使用显式的"file："前缀来强制执行绝对文件路径。 
 * </ b> <p>可通过{<@link覆盖默认配置位置> #getConfigLocations}，配置位置可以表示具体文件，例如"/myfiles/context.xml"，也可以表示Ant样式的模式，例如"/ myfiles -context.xml"（请参阅​​{@link  org.springframework.util.AntPathMatcher } javadoc以获取模式详细信息）。 
 *  <p>注意：如果有多个配置位置，则较新的Bean定义将覆盖较早加载的文件中定义的定义。 
 * 可以利用它来通过一个额外的XML文件有意覆盖某些bean定义。 
 *  <p> <b>这是一个简单的一站式商店便捷ApplicationContext。 
 * 考虑将{@link  GenericApplicationContext}类与{@link  org.springframework.beans.factory.xml.XmlBeanDefinitionReader}结合使用，以实现更灵活的上下文设置。 
 * </ b> @author  Rod Johnson <@作者> Juergen Hoeller 
 * @see  #getResource 
 * @see  #getResourceByPath 
 * @see  GenericApplicationContext
 */
public class FileSystemXmlApplicationContext extends AbstractXmlApplicationContext {

	/**
	 * Create a new FileSystemXmlApplicationContext for bean-style configuration.
	 * @see #setConfigLocation
	 * @see #setConfigLocations
	 * @see #afterPropertiesSet()
	 */
	/**
	 * 为bean样式的配置创建一个新的FileSystemXmlApplicationContext。 
	 *  
	 * @see  #setConfigLocation 
	 * @see  #setConfigLocations 
	 * @see  #afterPropertiesSet（）
	 */
	public FileSystemXmlApplicationContext() {
	}

	/**
	 * Create a new FileSystemXmlApplicationContext for bean-style configuration.
	 * @param parent the parent context
	 * @see #setConfigLocation
	 * @see #setConfigLocations
	 * @see #afterPropertiesSet()
	 */
	/**
	 * 为bean样式的配置创建一个新的FileSystemXmlApplicationContext。 
	 *  
	 * @param 父级父级上下文
	 * @see  #setConfigLocation 
	 * @see  #setConfigLocations 
	 * @see  #afterPropertiesSet（）
	 */
	public FileSystemXmlApplicationContext(ApplicationContext parent) {
		super(parent);
	}

	/**
	 * Create a new FileSystemXmlApplicationContext, loading the definitions
	 * from the given XML file and automatically refreshing the context.
	 * @param configLocation file path
	 * @throws BeansException if context creation failed
	 */
	/**
	 * 创建一个新的FileSystemXmlApplicationContext，从给定的XML文件中加载定义，并自动刷新上下文。 
	 *  
	 * @param  configLocation文件路径
	 * @throws  BeansException如果上下文创建失败
	 */
	public FileSystemXmlApplicationContext(String configLocation) throws BeansException {
		this(new String[] {configLocation}, true, null);
	}

	/**
	 * Create a new FileSystemXmlApplicationContext, loading the definitions
	 * from the given XML files and automatically refreshing the context.
	 * @param configLocations array of file paths
	 * @throws BeansException if context creation failed
	 */
	/**
	 * 创建一个新的FileSystemXmlApplicationContext，从给定的XML文件中加载定义，并自动刷新上下文。 
	 *  
	 * @param 文件路径的configLocations数组
	 * @throws  BeansException如果上下文创建失败
	 */
	public FileSystemXmlApplicationContext(String... configLocations) throws BeansException {
		this(configLocations, true, null);
	}

	/**
	 * Create a new FileSystemXmlApplicationContext with the given parent,
	 * loading the definitions from the given XML files and automatically
	 * refreshing the context.
	 * @param configLocations array of file paths
	 * @param parent the parent context
	 * @throws BeansException if context creation failed
	 */
	/**
	 * 使用给定的父级创建一个新的FileSystemXmlApplicationContext，从给定的XML文件中加载定义，并自动刷新上下文。 
	 *  
	 * @param 文件路径的configLocations数组
	 * @param 父级父级上下文
	 * @throws  BeansException如果上下文创建失败
	 */
	public FileSystemXmlApplicationContext(String[] configLocations, ApplicationContext parent) throws BeansException {
		this(configLocations, true, parent);
	}

	/**
	 * Create a new FileSystemXmlApplicationContext, loading the definitions
	 * from the given XML files.
	 * @param configLocations array of file paths
	 * @param refresh whether to automatically refresh the context,
	 * loading all bean definitions and creating all singletons.
	 * Alternatively, call refresh manually after further configuring the context.
	 * @throws BeansException if context creation failed
	 * @see #refresh()
	 */
	/**
	 * 创建一个新的FileSystemXmlApplicationContext，从给定的XML文件中加载定义。 
	 *  
	 * @param 文件路径的configLocations数组
	 * @param 刷新是否自动刷新上下文，加载所有bean定义并创建所有单例。 
	 * 或者，在进一步配置上下文之后，手动调用刷新。 
	 *  
	 * @throws  BeansException如果上下文创建失败
	 * @see  #refresh（）
	 */
	public FileSystemXmlApplicationContext(String[] configLocations, boolean refresh) throws BeansException {
		this(configLocations, refresh, null);
	}

	/**
	 * Create a new FileSystemXmlApplicationContext with the given parent,
	 * loading the definitions from the given XML files.
	 * @param configLocations array of file paths
	 * @param refresh whether to automatically refresh the context,
	 * loading all bean definitions and creating all singletons.
	 * Alternatively, call refresh manually after further configuring the context.
	 * @param parent the parent context
	 * @throws BeansException if context creation failed
	 * @see #refresh()
	 */
	/**
	 * 使用给定的父级创建一个新的FileSystemXmlApplicationContext，从给定的XML文件中加载定义。 
	 *  
	 * @param 文件路径的configLocations数组
	 * @param 刷新是否自动刷新上下文，加载所有bean定义并创建所有单例。 
	 * 或者，在进一步配置上下文之后，手动调用刷新。 
	 *  
	 * @param 父级父级上下文
	 * @throws 如果上下文创建失败，则BeansException 
	 * @see  #refresh（）
	 */
	public FileSystemXmlApplicationContext(
			String[] configLocations, boolean refresh, @Nullable ApplicationContext parent)
			throws BeansException {

		super(parent);
		setConfigLocations(configLocations);
		if (refresh) {
			refresh();
		}
	}


	/**
	 * Resolve resource paths as file system paths.
	 * <p>Note: Even if a given path starts with a slash, it will get
	 * interpreted as relative to the current VM working directory.
	 * This is consistent with the semantics in a Servlet container.
	 * @param path path to the resource
	 * @return the Resource handle
	 * @see org.springframework.web.context.support.XmlWebApplicationContext#getResourceByPath
	 */
	/**
	 * 将资源路径解析为文件系统路径。 
	 *  <p>注意：即使给定路径以斜杠开头，也将被解释为相对于当前VM工作目录的相对路径。 
	 * 这与Servlet容器中的语义一致。 
	 *  
	 * @param 路径资源的路径
	 * @return 资源句柄
	 * @see  org.springframework.web.context.support.XmlWebApplicationContext＃getResourceByPath
	 */
	@Override
	protected Resource getResourceByPath(String path) {
		if (path.startsWith("/")) {
			path = path.substring(1);
		}
		return new FileSystemResource(path);
	}

}
