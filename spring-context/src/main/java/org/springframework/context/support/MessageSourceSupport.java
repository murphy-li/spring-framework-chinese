/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.support;

import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.lang.Nullable;
import org.springframework.util.ObjectUtils;

/**
 * Base class for message source implementations, providing support infrastructure
 * such as {@link java.text.MessageFormat} handling but not implementing concrete
 * methods defined in the {@link org.springframework.context.MessageSource}.
 *
 * <p>{@link AbstractMessageSource} derives from this class, providing concrete
 * {@code getMessage} implementations that delegate to a central template
 * method for message code resolution.
 *
 * @author Juergen Hoeller
 * @since 2.5.5
 */
/**
 * 消息源实现的基类，提供诸如{@link  java.text.MessageFormat}处理之类的支持基础结构，但不实现{@link  org.springframework.context.MessageSource}中定义的具体方法。 
 *  <p> {<@link> AbstractMessageSource}派生自此类，提供了具体的{@code  getMessage}实现，这些实现委派给用于消息代码解析的中央模板方法。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@2.5.5起
 */
public abstract class MessageSourceSupport {

	private static final MessageFormat INVALID_MESSAGE_FORMAT = new MessageFormat("");

	/** Logger available to subclasses. */
	/**
	 * 记录器可用于子类。 
	 * 
	 */
	protected final Log logger = LogFactory.getLog(getClass());

	private boolean alwaysUseMessageFormat = false;

	/**
	 * Cache to hold already generated MessageFormats per message.
	 * Used for passed-in default messages. MessageFormats for resolved
	 * codes are cached on a specific basis in subclasses.
	 */
	/**
	 * 缓存以保存每条消息已生成的MessageFormat。 
	 * 用于传入的默认消息。 
	 * 解析代码的MessageFormats在特定的基础上缓存在子类中。 
	 * 
	 */
	private final Map<String, Map<Locale, MessageFormat>> messageFormatsPerMessage = new HashMap<>();


	/**
	 * Set whether to always apply the {@code MessageFormat} rules,
	 * parsing even messages without arguments.
	 * <p>Default is "false": Messages without arguments are by default
	 * returned as-is, without parsing them through MessageFormat.
	 * Set this to "true" to enforce MessageFormat for all messages,
	 * expecting all message texts to be written with MessageFormat escaping.
	 * <p>For example, MessageFormat expects a single quote to be escaped
	 * as "''". If your message texts are all written with such escaping,
	 * even when not defining argument placeholders, you need to set this
	 * flag to "true". Else, only message texts with actual arguments
	 * are supposed to be written with MessageFormat escaping.
	 * @see java.text.MessageFormat
	 */
	/**
	 * 设置是否始终应用{@code  MessageFormat}规则，甚至分析不带参数的消息。 
	 *  <p>默认值为"false"：不带参数的消息默认情况下按原样返回，而不通过MessageFormat对其进行解析。 
	 * 将此设置为"true"可对所有消息强制使用MessageFormat，并期望所有消息文本都以MessageFormat进行转义。 
	 *  <p>例如，MessageFormat希望将单引号转义为"''"。 
	 * 如果您的消息文本都是用这种转义符编写的，即使未定义参数占位符，也需要将此标志设置为"true"。 
	 * 否则，只有带有实际参数的消息文本才应该使用MessageFormat转义来编写。 
	 *  
	 * @see  java.text.MessageFormat
	 */
	public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {
		this.alwaysUseMessageFormat = alwaysUseMessageFormat;
	}

	/**
	 * Return whether to always apply the MessageFormat rules, parsing even
	 * messages without arguments.
	 */
	/**
	 * 返回是否始终应用MessageFormat规则，甚至解析不带参数的消息。 
	 * 
	 */
	protected boolean isAlwaysUseMessageFormat() {
		return this.alwaysUseMessageFormat;
	}


	/**
	 * Render the given default message String. The default message is
	 * passed in as specified by the caller and can be rendered into
	 * a fully formatted default message shown to the user.
	 * <p>The default implementation passes the String to {@code formatMessage},
	 * resolving any argument placeholders found in them. Subclasses may override
	 * this method to plug in custom processing of default messages.
	 * @param defaultMessage the passed-in default message String
	 * @param args array of arguments that will be filled in for params within
	 * the message, or {@code null} if none.
	 * @param locale the Locale used for formatting
	 * @return the rendered default message (with resolved arguments)
	 * @see #formatMessage(String, Object[], java.util.Locale)
	 */
	/**
	 * 呈现给定的默认消息String。 
	 * 默认消息按照调用方的指定传递，并且可以呈现为完整格式的默认消息，显示给用户。 
	 *  <p>默认实现将字符串传递给{@code  formatMessage}，以解析在其中找到的所有参数占位符。 
	 * 子类可以重写此方法以插入对默认消息的自定义处理。 
	 *  
	 * @param  defaultMessage传入的默认消息String 
	 * @param  args参数数组，将为消息内的参数填充； 
	 * 如果没有，则为{@code  null}。 
	 *  
	 * @param 语言环境用于格式化
	 * @return 呈现的默认消息（具有解析的参数）的语言环境
	 * @see  #formatMessage（String，Object []，java.util.Locale）
	 */
	protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale) {
		return formatMessage(defaultMessage, args, locale);
	}

	/**
	 * Format the given message String, using cached MessageFormats.
	 * By default invoked for passed-in default messages, to resolve
	 * any argument placeholders found in them.
	 * @param msg the message to format
	 * @param args array of arguments that will be filled in for params within
	 * the message, or {@code null} if none
	 * @param locale the Locale used for formatting
	 * @return the formatted message (with resolved arguments)
	 */
	/**
	 * 使用缓存的MessageFormats格式化给定的消息字符串。 
	 * 默认情况下，对传入的默认消息进行调用，以解析在其中找到的所有参数占位符。 
	 *  
	 * @param  msg消息以格式化
	 * @param 参数的args数组，将为消息中的参数填充参数，如果没有，则为{@code  null} 
	 * @param  locale用于格式化<@的语言环境返回>格式化的消息（带有已解析的参数）
	 */
	protected String formatMessage(String msg, @Nullable Object[] args, Locale locale) {
		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {
			return msg;
		}
		MessageFormat messageFormat = null;
		synchronized (this.messageFormatsPerMessage) {
			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg);
			if (messageFormatsPerLocale != null) {
				messageFormat = messageFormatsPerLocale.get(locale);
			}
			else {
				messageFormatsPerLocale = new HashMap<>();
				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale);
			}
			if (messageFormat == null) {
				try {
					messageFormat = createMessageFormat(msg, locale);
				}
				catch (IllegalArgumentException ex) {
					// Invalid message format - probably not intended for formatting,
					// rather using a message structure with no arguments involved...
					if (isAlwaysUseMessageFormat()) {
						throw ex;
					}
					// Silently proceed with raw message if format not enforced...
					messageFormat = INVALID_MESSAGE_FORMAT;
				}
				messageFormatsPerLocale.put(locale, messageFormat);
			}
		}
		if (messageFormat == INVALID_MESSAGE_FORMAT) {
			return msg;
		}
		synchronized (messageFormat) {
			return messageFormat.format(resolveArguments(args, locale));
		}
	}

	/**
	 * Create a MessageFormat for the given message and Locale.
	 * @param msg the message to create a MessageFormat for
	 * @param locale the Locale to create a MessageFormat for
	 * @return the MessageFormat instance
	 */
	/**
	 * 为给定的消息和语言环境创建一个MessageFormat。 
	 *  
	 * @param  msg消息，用于为
	 * @param 语言环境创建MessageFormat语言环境，以为
	 * @return  MessageFormat实例创建消息格式
	 */
	protected MessageFormat createMessageFormat(String msg, Locale locale) {
		return new MessageFormat(msg, locale);
	}

	/**
	 * Template method for resolving argument objects.
	 * <p>The default implementation simply returns the given argument array as-is.
	 * Can be overridden in subclasses in order to resolve special argument types.
	 * @param args the original argument array
	 * @param locale the Locale to resolve against
	 * @return the resolved argument array
	 */
	/**
	 * 用于解析自变量对象的模板方法。 
	 *  <p>默认实现只是按原样返回给定的参数数组。 
	 * 可以在子类中重写以解决特殊的参数类型。 
	 *  
	 * @param  args原始参数数组
	 * @param  locale针对
	 * @return 已解析参数数组解析的语言环境
	 */
	protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {
		return (args != null ? args : new Object[0]);
	}

}
