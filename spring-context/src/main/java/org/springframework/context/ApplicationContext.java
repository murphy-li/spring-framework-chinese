/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

import org.springframework.beans.factory.HierarchicalBeanFactory;
import org.springframework.beans.factory.ListableBeanFactory;
import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
import org.springframework.core.env.EnvironmentCapable;
import org.springframework.core.io.support.ResourcePatternResolver;
import org.springframework.lang.Nullable;

/**
 * Central interface to provide configuration for an application.
 * This is read-only while the application is running, but may be
 * reloaded if the implementation supports this.
 *
 * <p>An ApplicationContext provides:
 * <ul>
 * <li>Bean factory methods for accessing application components.
 * Inherited from {@link org.springframework.beans.factory.ListableBeanFactory}.
 * <li>The ability to load file resources in a generic fashion.
 * Inherited from the {@link org.springframework.core.io.ResourceLoader} interface.
 * <li>The ability to publish events to registered listeners.
 * Inherited from the {@link ApplicationEventPublisher} interface.
 * <li>The ability to resolve messages, supporting internationalization.
 * Inherited from the {@link MessageSource} interface.
 * <li>Inheritance from a parent context. Definitions in a descendant context
 * will always take priority. This means, for example, that a single parent
 * context can be used by an entire web application, while each servlet has
 * its own child context that is independent of that of any other servlet.
 * </ul>
 *
 * <p>In addition to standard {@link org.springframework.beans.factory.BeanFactory}
 * lifecycle capabilities, ApplicationContext implementations detect and invoke
 * {@link ApplicationContextAware} beans as well as {@link ResourceLoaderAware},
 * {@link ApplicationEventPublisherAware} and {@link MessageSourceAware} beans.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see ConfigurableApplicationContext
 * @see org.springframework.beans.factory.BeanFactory
 * @see org.springframework.core.io.ResourceLoader
 */
/**
 * 中央接口，为应用程序提供配置。 
 * 在应用程序运行时，它是只读的，但是如果实现支持，则可以重新加载。 
 *  <p> ApplicationContext提供：<ul> <li>用于访问应用程序组件的Bean工厂方法。 
 * 继承自{@link  org.springframework.beans.factory.ListableBeanFactory}。 
 *  <li>以通用方式加载文件资源的能力。 
 * 继承自{@link  org.springframework.core.io.ResourceLoader}接口。 
 *  <li>将事件发布到注册的侦听器的能力。 
 * 继承自{@link  ApplicationEventPublisher}接口。 
 *  <li>解决消息的能力，支持国际化。 
 * 继承自{@link  MessageSource}接口。 
 *  <li>从父上下文继承。 
 * 在后代上下文中的定义将始终优先。 
 * 例如，这意味着整个Web应用程序都可以使用单个父上下文，而每个servlet都有其自己的子上下文，该子上下文独立于任何其他servlet的子上下文。 
 *  </ ul> <p>除了标准的{@link  org.springframework.beans.factory.BeanFactory}生命周期功能之外，ApplicationContext实现还检测并调用{@link  ApplicationContextAware} bean和{@link  ResourceLoaderAware}，{<@link> ApplicationEventPublisherAware}和{@link  MessageSourceAware} bean。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  ConfigurableApplicationContext 
 * @see  org.springframework.beans.factory.BeanFactory 
 * @see  org.springframework.core.io.ResourceLoader
 */
public interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,
		MessageSource, ApplicationEventPublisher, ResourcePatternResolver {

	/**
	 * Return the unique id of this application context.
	 * @return the unique id of the context, or {@code null} if none
	 */
	/**
	 * 返回此应用程序上下文的唯一ID。 
	 *  
	 * @return 上下文的唯一ID，如果没有，则为{@code  null}
	 */
	@Nullable
	String getId();

	/**
	 * Return a name for the deployed application that this context belongs to.
	 * @return a name for the deployed application, or the empty String by default
	 */
	/**
	 * 返回此上下文所属的已部署应用程序的名称。 
	 *  
	 * @return 部署的应用程序的名称，或者默认为空字符串
	 */
	String getApplicationName();

	/**
	 * Return a friendly name for this context.
	 * @return a display name for this context (never {@code null})
	 */
	/**
	 * 返回此上下文的友好名称。 
	 *  
	 * @return 此上下文的显示名称（切勿{<@@code> null}）
	 */
	String getDisplayName();

	/**
	 * Return the timestamp when this context was first loaded.
	 * @return the timestamp (ms) when this context was first loaded
	 */
	/**
	 * 返回第一次加载此上下文时的时间戳。 
	 *  
	 * @return 首次加载此上下文时的时间戳（毫秒）
	 */
	long getStartupDate();

	/**
	 * Return the parent context, or {@code null} if there is no parent
	 * and this is the root of the context hierarchy.
	 * @return the parent context, or {@code null} if there is no parent
	 */
	/**
	 * 返回父级上下文，如果没有父级，则返回{@code  null}，这是上下文层次结构的根。 
	 *  
	 * @return 父上下文，如果没有父上下文，则为{@code  null}
	 */
	@Nullable
	ApplicationContext getParent();

	/**
	 * Expose AutowireCapableBeanFactory functionality for this context.
	 * <p>This is not typically used by application code, except for the purpose of
	 * initializing bean instances that live outside of the application context,
	 * applying the Spring bean lifecycle (fully or partly) to them.
	 * <p>Alternatively, the internal BeanFactory exposed by the
	 * {@link ConfigurableApplicationContext} interface offers access to the
	 * {@link AutowireCapableBeanFactory} interface too. The present method mainly
	 * serves as a convenient, specific facility on the ApplicationContext interface.
	 * <p><b>NOTE: As of 4.2, this method will consistently throw IllegalStateException
	 * after the application context has been closed.</b> In current Spring Framework
	 * versions, only refreshable application contexts behave that way; as of 4.2,
	 * all application context implementations will be required to comply.
	 * @return the AutowireCapableBeanFactory for this context
	 * @throws IllegalStateException if the context does not support the
	 * {@link AutowireCapableBeanFactory} interface, or does not hold an
	 * autowire-capable bean factory yet (e.g. if {@code refresh()} has
	 * never been called), or if the context has been closed already
	 * @see ConfigurableApplicationContext#refresh()
	 * @see ConfigurableApplicationContext#getBeanFactory()
	 */
	/**
	 * 针对此上下文公开AutowireCapableBeanFactory功能。 
	 *  <p>应用程序代码通常不使用它，除了用于初始化驻留在应用程序上下文之外的bean实例，将Spring bean生命周期（全部或部分）应用于它们之外。 
	 *  <p>或者，通过{@link  ConfigurableApplicationContext}接口公开的内部BeanFactory也提供对{@link  AutowireCapableBeanFactory}接口的访问。 
	 * 本方法主要用作ApplicationContext接口上的一种方便的特定功能。 
	 *  <p> <b>注意：从4.2开始，在关闭应用程序上下文之后，此方法将始终抛出IllegalStateException。 
	 * </ b>在当前的Spring Framework版本中，只有可刷新的应用程序上下文才具有这种行为。 
	 * 从4.2开始，将要求所有应用程序上下文实现都必须遵守。 
	 *  
	 * @return 此上下文的AutowireCapableBeanFactory 
	 * @throws  IllegalStateException如果上下文不支持{@link  AutowireCapableBeanFactory}接口，或者尚不支持具有自动连线能力的bean工厂（例如，如果{@code 刷新（）}从未被调用过），或者上下文已经关闭
	 * @see  ConfigurableApplicationContext＃refresh（）
	 * @see  ConfigurableApplicationContext＃getBeanFactory（）
	 */
	AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException;

}
