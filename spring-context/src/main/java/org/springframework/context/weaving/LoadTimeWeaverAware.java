/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.weaving;

import org.springframework.beans.factory.Aware;
import org.springframework.instrument.classloading.LoadTimeWeaver;

/**
 * Interface to be implemented by any object that wishes to be notified
 * of the application context's default {@link LoadTimeWeaver}.
 *
 * @author Juergen Hoeller
 * @author Chris Beams
 * @since 2.5
 * @see org.springframework.context.ConfigurableApplicationContext#LOAD_TIME_WEAVER_BEAN_NAME
 */
/**
 * 希望由任何希望收到应用程序上下文的默认{@link  LoadTimeWeaver}通知的对象实现的接口。 
 *  @author  Juergen Hoeller @author 克里斯·比姆斯（Chris Beams）自2.5起
 * @see  org.springframework.context.ConfigurableApplicationContext＃LOAD_TIME_WEAVER_BEAN_NAME
 */
public interface LoadTimeWeaverAware extends Aware {

	/**
	 * Set the {@link LoadTimeWeaver} of this object's containing
	 * {@link org.springframework.context.ApplicationContext ApplicationContext}.
	 * <p>Invoked after the population of normal bean properties but before an
	 * initialization callback like
	 * {@link org.springframework.beans.factory.InitializingBean InitializingBean's}
	 * {@link org.springframework.beans.factory.InitializingBean#afterPropertiesSet() afterPropertiesSet()}
	 * or a custom init-method. Invoked after
	 * {@link org.springframework.context.ApplicationContextAware ApplicationContextAware's}
	 * {@link org.springframework.context.ApplicationContextAware#setApplicationContext setApplicationContext(..)}.
	 * <p><b>NOTE:</b> This method will only be called if there actually is a
	 * {@code LoadTimeWeaver} available in the application context. If
	 * there is none, the method will simply not get invoked, assuming that the
	 * implementing object is able to activate its weaving dependency accordingly.
	 * @param loadTimeWeaver the {@code LoadTimeWeaver} instance (never {@code null})
	 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet
	 * @see org.springframework.context.ApplicationContextAware#setApplicationContext
	 */
	/**
	 * 设置此对象包含的{@link  org.springframework.context.ApplicationContext ApplicationContext}的{@link  LoadTimeWeaver}。 
	 *  <p>在填充正常的bean属性之后但在初始化回调（例如{@link  org.springframework.beans.factory.InitializingBean InitializingBean's} {@link  org.springframework.beans.factory.InitializingBean＃afterPropertiesSet（ ）afterPropertiesSet（）}或自定义的初始化方法。 
	 * 在{@link  org.springframework.context.ApplicationContextAware ApplicationContextAware的} {@link  org.springframework.context.ApplicationContextAware＃setApplicationContext setApplicationContext（..）}之后调用。 
	 *  <p> <b>注意：</ b>仅当应用程序上下文中实际有{@code  LoadTimeWeaver}可用时，才会调用此方法。 
	 * 如果不存在，则假设实现对象能够相应地激活其编织依赖性，则该方法将不会被调用。 
	 *  
	 * @param  loadTimeWeaver {@code  LoadTimeWeaver}实例（永不{@code  null}）
	 * @see  org.springframework.beans.factory.InitializingBean＃afterPropertiesSet 
	 * @see  org.springframework.context.ApplicationContextAware #setApplicationContext
	 */
	void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);

}
