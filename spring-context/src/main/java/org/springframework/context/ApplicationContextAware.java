/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.Aware;

/**
 * Interface to be implemented by any object that wishes to be notified
 * of the {@link ApplicationContext} that it runs in.
 *
 * <p>Implementing this interface makes sense for example when an object
 * requires access to a set of collaborating beans. Note that configuration
 * via bean references is preferable to implementing this interface just
 * for bean lookup purposes.
 *
 * <p>This interface can also be implemented if an object needs access to file
 * resources, i.e. wants to call {@code getResource}, wants to publish
 * an application event, or requires access to the MessageSource. However,
 * it is preferable to implement the more specific {@link ResourceLoaderAware},
 * {@link ApplicationEventPublisherAware} or {@link MessageSourceAware} interface
 * in such a specific scenario.
 *
 * <p>Note that file resource dependencies can also be exposed as bean properties
 * of type {@link org.springframework.core.io.Resource}, populated via Strings
 * with automatic type conversion by the bean factory. This removes the need
 * for implementing any callback interface just for the purpose of accessing
 * a specific file resource.
 *
 * <p>{@link org.springframework.context.support.ApplicationObjectSupport} is a
 * convenience base class for application objects, implementing this interface.
 *
 * <p>For a list of all bean lifecycle methods, see the
 * {@link org.springframework.beans.factory.BeanFactory BeanFactory javadocs}.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @author Chris Beams
 * @see ResourceLoaderAware
 * @see ApplicationEventPublisherAware
 * @see MessageSourceAware
 * @see org.springframework.context.support.ApplicationObjectSupport
 * @see org.springframework.beans.factory.BeanFactoryAware
 */
/**
 * 希望由希望在其运行的{@link  ApplicationContext}收到通知的任何对象实现的接口。 
 * <p>例如，当对象需要访问一组协作bean时，实现此接口是有意义的。 
 * 请注意，仅出于bean查找目的，通过bean引用进行配置比实现此接口更可取。 
 *  <p>如果对象需要访问文件资源（例如，要调用{@code  getResource}，要发布应用程序事件或需要访问MessageSource），则也可以实现此接口。 
 * 但是，在这种特定情况下，最好实现更具体的{@link  ResourceLoaderAware}，{<@link> ApplicationEventPublisherAware}或{@link  MessageSourceAware}接口。 
 *  <p>请注意，文件资源依赖项也可以公开为{@link  org.springframework.core.io.Resource}类型的bean属性，该字符串通过由bean工厂进行自动类型转换的String填充。 
 * 这消除了仅出于访问特定文件资源的目的而实现任何回调接口的需要。 
 *  <p> {<@link> org.springframework.context.support.ApplicationObjectSupport}是应用程序对象的便捷基类，实现了此接口。 
 *  <p>有关所有bean生命周期方法的列表，请参见{@link  org.springframework.beans.factory.BeanFactory BeanFactory javadocs}。 
 *  @author  Rod Johnson @author  Juergen Hoeller @author  Chris Beams 
 * @see  ResourceLoaderAware 
 * @see  ApplicationEventPublisherAware 
 * @see  MessageSourceAware 
 * @see  org.springframework.context.support.ApplicationObjectSupport 
 * @see  org.springframework.beans.factory.BeanFactoryAware
 */
public interface ApplicationContextAware extends Aware {

	/**
	 * Set the ApplicationContext that this object runs in.
	 * Normally this call will be used to initialize the object.
	 * <p>Invoked after population of normal bean properties but before an init callback such
	 * as {@link org.springframework.beans.factory.InitializingBean#afterPropertiesSet()}
	 * or a custom init-method. Invoked after {@link ResourceLoaderAware#setResourceLoader},
	 * {@link ApplicationEventPublisherAware#setApplicationEventPublisher} and
	 * {@link MessageSourceAware}, if applicable.
	 * @param applicationContext the ApplicationContext object to be used by this object
	 * @throws ApplicationContextException in case of context initialization errors
	 * @throws BeansException if thrown by application context methods
	 * @see org.springframework.beans.factory.BeanInitializationException
	 */
	/**
	 * 设置该对象在其中运行的ApplicationContext。 
	 * 通常，此调用将用于初始化该对象。 
	 *  <p>在填充正常的bean属性之后但在诸如{@link  org.springframework.beans.factory.InitializingBean＃afterPropertiesSet（）}之类的init回调或自定义init方法之前调用。 
	 * 如果适用，在{@link  ResourceLoaderAware＃setResourceLoader}，{<@link> ApplicationEventPublisherAware＃setApplicationEventPublisher}和{@link  MessageSourceAware}之后调用。 
	 *  
	 * @param  applicationContext在上下文初始化错误的情况下，此对象将使用的ApplicationContext对象
	 * @throws  ApplicationContextException 
	 * @throws 如果由应用程序上下文方法抛出，则为BeansException 
	 * @see  org.springframework.beans.factory.BeanInitializationException
	 */
	void setApplicationContext(ApplicationContext applicationContext) throws BeansException;

}
