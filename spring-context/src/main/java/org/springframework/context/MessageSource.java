/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context;

import java.util.Locale;

import org.springframework.lang.Nullable;

/**
 * Strategy interface for resolving messages, with support for the parameterization
 * and internationalization of such messages.
 *
 * <p>Spring provides two out-of-the-box implementations for production:
 * <ul>
 * <li>{@link org.springframework.context.support.ResourceBundleMessageSource}: built
 * on top of the standard {@link java.util.ResourceBundle}, sharing its limitations.
 * <li>{@link org.springframework.context.support.ReloadableResourceBundleMessageSource}:
 * highly configurable, in particular with respect to reloading message definitions.
 * </ul>
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see org.springframework.context.support.ResourceBundleMessageSource
 * @see org.springframework.context.support.ReloadableResourceBundleMessageSource
 */
/**
 * 用于解析消息的策略接口，并支持此类消息的参数化和国际化。 
 *  <p> Spring为生产提供了两种现成的实现：<ul> <li> {<@link> org.springframework.context.support.ResourceBundleMessageSource}：建立在标准{@link 之上java.util.ResourceBundle}，共享其局限性。 
 *  <li> {<@link> org.springframework.context.support.ReloadableResourceBundleMessageSource}：高度可配置，尤其是在重新加载消息定义方面。 
 *  </ ul> @author  Rod Johnson @author  Juergen Hoeller 
 * @see  org.springframework.context.support.ResourceBundleMessageSource 
 * @see  org.springframework.context.support.ReloadableResourceBundleMessageSource
 */
public interface MessageSource {

	/**
	 * Try to resolve the message. Return default message if no message was found.
	 * @param code the message code to look up, e.g. 'calculator.noRateSet'.
	 * MessageSource users are encouraged to base message names on qualified class
	 * or package names, avoiding potential conflicts and ensuring maximum clarity.
	 * @param args an array of arguments that will be filled in for params within
	 * the message (params look like "{0}", "{1,date}", "{2,time}" within a message),
	 * or {@code null} if none
	 * @param defaultMessage a default message to return if the lookup fails
	 * @param locale the locale in which to do the lookup
	 * @return the resolved message if the lookup was successful, otherwise
	 * the default message passed as a parameter (which may be {@code null})
	 * @see #getMessage(MessageSourceResolvable, Locale)
	 * @see java.text.MessageFormat
	 */
	/**
	 * 尝试解决该消息。 
	 * 如果未找到任何消息，则返回默认消息。 
	 *  
	 * @param 编码要查找的消息代码，例如'calculator.noRateSet'。 
	 * 鼓励MessageSource用户将消息名称基于合格的类或程序包名称，以避免潜在的冲突并确保最大程度的清晰度。 
	 *  
	 * @param  args将为消息中的参数填充的参数数组（消息中的参数看起来像"{0}"，"{1，date}"，"{2，time}"），或{@code  null}如果没有，则
	 * @param  default通知查找失败时返回的默认消息
	 * @param  locale查找成功的语言环境
	 * @return 如果查找成功，则返回已解析的消息，否则作为参数传递的默认消息（可能为{@code  null}）
	 * @see  #getMessage（MessageSourceResolvable，Locale）
	 * @see  java.text.MessageFormat
	 */
	@Nullable
	String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale);

	/**
	 * Try to resolve the message. Treat as an error if the message can't be found.
	 * @param code the message code to look up, e.g. 'calculator.noRateSet'.
	 * MessageSource users are encouraged to base message names on qualified class
	 * or package names, avoiding potential conflicts and ensuring maximum clarity.
	 * @param args an array of arguments that will be filled in for params within
	 * the message (params look like "{0}", "{1,date}", "{2,time}" within a message),
	 * or {@code null} if none
	 * @param locale the locale in which to do the lookup
	 * @return the resolved message (never {@code null})
	 * @throws NoSuchMessageException if no corresponding message was found
	 * @see #getMessage(MessageSourceResolvable, Locale)
	 * @see java.text.MessageFormat
	 */
	/**
	 * 尝试解决该消息。 
	 * 如果找不到消息，则视为错误。 
	 *  
	 * @param 编码要查找的消息代码，例如'calculator.noRateSet'。 
	 * 鼓励MessageSource用户将消息名称基于合格的类或程序包名称，以避免潜在的冲突并确保最大程度的清晰度。 
	 *  
	 * @param  args将为消息中的参数填充的参数数组（消息中的参数看起来像"{0}"，"{1，date}"，"{2，time}"），或{@code  null}（如果没有）
	 * @param 语言环境在其中进行查找的语言环境
	 * @return 所解析的消息（从未{@code  null}）<
	 * @throws> NoSuchMessageException（如果未找到对应的消息） 
	 * @see  #getMessage（MessageSourceResolvable，Locale）
	 * @see  java.text.MessageFormat
	 */
	String getMessage(String code, @Nullable Object[] args, Locale locale) throws NoSuchMessageException;

	/**
	 * Try to resolve the message using all the attributes contained within the
	 * {@code MessageSourceResolvable} argument that was passed in.
	 * <p>NOTE: We must throw a {@code NoSuchMessageException} on this method
	 * since at the time of calling this method we aren't able to determine if the
	 * {@code defaultMessage} property of the resolvable is {@code null} or not.
	 * @param resolvable the value object storing attributes required to resolve a message
	 * (may include a default message)
	 * @param locale the locale in which to do the lookup
	 * @return the resolved message (never {@code null} since even a
	 * {@code MessageSourceResolvable}-provided default message needs to be non-null)
	 * @throws NoSuchMessageException if no corresponding message was found
	 * (and no default message was provided by the {@code MessageSourceResolvable})
	 * @see MessageSourceResolvable#getCodes()
	 * @see MessageSourceResolvable#getArguments()
	 * @see MessageSourceResolvable#getDefaultMessage()
	 * @see java.text.MessageFormat
	 */
	/**
	 * 尝试使用传入的{@code  MessageSourceResolvable}参数中包含的所有属性来解析消息。 
	 * <p>注意：自从调用时，我们必须对此方法抛出{@code  NoSuchMessageException}此方法我们无法确定可解析的{@code  defaultMessage}属性是否为{@code  null}。 
	 *  
	 * @param 可解析的值对象存储解析消息所需的属性（可能包括默认消息）
	 * @param 语言环境在其中进行查找的语言环境
	 * @return 解析的消息（切勿使用{@code  null }，因为甚至{{@code> MessageSourceResolvable}提供的默认消息也必须为非空）
	 * @throws  NoSuchMessageException如果没有找到相应的消息（并且{@code  MessageSourceResolvable}也没有提供默认消息） 
	 * @see  MessageSourceResolvable＃getCodes（）
	 * @see  MessageSourceResolvable＃getArguments（）
	 * @see  MessageSourceResolvable＃getDefaultMessage（）
	 * @see  java.text.MessageFormat
	 */
	String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException;

}
