/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.context.i18n;

import java.util.Locale;
import java.util.TimeZone;

import org.springframework.core.NamedInheritableThreadLocal;
import org.springframework.core.NamedThreadLocal;
import org.springframework.lang.Nullable;

/**
 * Simple holder class that associates a LocaleContext instance
 * with the current thread. The LocaleContext will be inherited
 * by any child threads spawned by the current thread if the
 * {@code inheritable} flag is set to {@code true}.
 *
 * <p>Used as a central holder for the current Locale in Spring,
 * wherever necessary: for example, in MessageSourceAccessor.
 * DispatcherServlet automatically exposes its current Locale here.
 * Other applications can expose theirs too, to make classes like
 * MessageSourceAccessor automatically use that Locale.
 *
 * @author Juergen Hoeller
 * @author Nicholas Williams
 * @since 1.2
 * @see LocaleContext
 * @see org.springframework.context.support.MessageSourceAccessor
 * @see org.springframework.web.servlet.DispatcherServlet
 */
/**
 * 将LocaleContext实例与当前线程关联的简单持有人类。 
 * 如果{@code  Inheritable}标志设置为{@code  true}，则当前线程产生的任何子线程都将继承LocaleContext。 
 *  <p>在必要时用作Spring中当前Locale的中央保持器：例如，在MessageSourceAccessor中。 
 *  DispatcherServlet在此处自动公开其当前的语言环境。 
 * 其他应用程序也可以公开其应用程序，以使诸如MessageSourceAccessor之类的类自动使用该Locale。 
 *  @author  Juergen Hoeller @author 尼古拉斯·威廉姆斯（Nicholas Williams）@since 1.2起@
 * @see> LocaleContext 
 * @see  org.springframework.context.support.MessageSourceAccessor
 */
public final class LocaleContextHolder {

	private static final ThreadLocal<LocaleContext> localeContextHolder =
			new NamedThreadLocal<>("LocaleContext");

	private static final ThreadLocal<LocaleContext> inheritableLocaleContextHolder =
			new NamedInheritableThreadLocal<>("LocaleContext");

	// Shared default locale at the framework level
	@Nullable
	private static Locale defaultLocale;

	// Shared default time zone at the framework level
	@Nullable
	private static TimeZone defaultTimeZone;


	private LocaleContextHolder() {
	}


	/**
	 * Reset the LocaleContext for the current thread.
	 */
	/**
	 * 重置当前线程的LocaleContext。 
	 * 
	 */
	public static void resetLocaleContext() {
		localeContextHolder.remove();
		inheritableLocaleContextHolder.remove();
	}

	/**
	 * Associate the given LocaleContext with the current thread,
	 * <i>not</i> exposing it as inheritable for child threads.
	 * <p>The given LocaleContext may be a {@link TimeZoneAwareLocaleContext},
	 * containing a locale with associated time zone information.
	 * @param localeContext the current LocaleContext,
	 * or {@code null} to reset the thread-bound context
	 * @see SimpleLocaleContext
	 * @see SimpleTimeZoneAwareLocaleContext
	 */
	/**
	 * 将给定的LocaleContext与当前线程相关联，<i>不</ i>将其公开为可继承给子线程。 
	 *  <p>给定的LocaleContext可以是{@link  TimeZoneAwareLocaleContext}，其中包含具有关联的时区信息的语言环境。 
	 *  
	 * @param  localeContext当前LocaleContext，或者使用{@code  null}重置线程绑定上下文
	 * @see  SimpleLocaleContext 
	 * @see  SimpleTimeZoneAwareLocaleContext
	 */
	public static void setLocaleContext(@Nullable LocaleContext localeContext) {
		setLocaleContext(localeContext, false);
	}

	/**
	 * Associate the given LocaleContext with the current thread.
	 * <p>The given LocaleContext may be a {@link TimeZoneAwareLocaleContext},
	 * containing a locale with associated time zone information.
	 * @param localeContext the current LocaleContext,
	 * or {@code null} to reset the thread-bound context
	 * @param inheritable whether to expose the LocaleContext as inheritable
	 * for child threads (using an {@link InheritableThreadLocal})
	 * @see SimpleLocaleContext
	 * @see SimpleTimeZoneAwareLocaleContext
	 */
	/**
	 * 将给定的LocaleContext与当前线程相关联。 
	 *  <p>给定的LocaleContext可以是{@link  TimeZoneAwareLocaleContext}，其中包含具有关联的时区信息的语言环境。 
	 *  
	 * @param  localeContext当前的LocaleContext，或者使用{@code  null}重置线程绑定上下文
	 * @param 可继承，是否将LocaleContext公开为可继承的子线程（使用{@link  InheritableThreadLocal}） 
	 * @see  SimpleLocaleContext 
	 * @see  SimpleTimeZoneAwareLocaleContext
	 */
	public static void setLocaleContext(@Nullable LocaleContext localeContext, boolean inheritable) {
		if (localeContext == null) {
			resetLocaleContext();
		}
		else {
			if (inheritable) {
				inheritableLocaleContextHolder.set(localeContext);
				localeContextHolder.remove();
			}
			else {
				localeContextHolder.set(localeContext);
				inheritableLocaleContextHolder.remove();
			}
		}
	}

	/**
	 * Return the LocaleContext associated with the current thread, if any.
	 * @return the current LocaleContext, or {@code null} if none
	 */
	/**
	 * 返回与当前线程关联的LocaleContext（如果有）。 
	 *  
	 * @return 当前的LocaleContext，如果没有，则{@code  null}
	 */
	@Nullable
	public static LocaleContext getLocaleContext() {
		LocaleContext localeContext = localeContextHolder.get();
		if (localeContext == null) {
			localeContext = inheritableLocaleContextHolder.get();
		}
		return localeContext;
	}

	/**
	 * Associate the given Locale with the current thread,
	 * preserving any TimeZone that may have been set already.
	 * <p>Will implicitly create a LocaleContext for the given Locale,
	 * <i>not</i> exposing it as inheritable for child threads.
	 * @param locale the current Locale, or {@code null} to reset
	 * the locale part of thread-bound context
	 * @see #setTimeZone(TimeZone)
	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale)
	 */
	/**
	 * 将给定的Locale与当前线程相关联，保留任何可能已经设置的TimeZone。 
	 *  <p>将为给定的语言环境隐式创建一个LocaleContext，<i>不</ i>将其公开为可继承的子线程。 
	 *  
	 * @param 设置当前语言环境的语言环境，或使用{@code  null}重置线程绑定上下文的语言环境部分
	 * @see  #setTimeZone（TimeZone）
	 * @see  SimpleLocaleContext＃SimpleLocaleContext（Locale）
	 */
	public static void setLocale(@Nullable Locale locale) {
		setLocale(locale, false);
	}

	/**
	 * Associate the given Locale with the current thread,
	 * preserving any TimeZone that may have been set already.
	 * <p>Will implicitly create a LocaleContext for the given Locale.
	 * @param locale the current Locale, or {@code null} to reset
	 * the locale part of thread-bound context
	 * @param inheritable whether to expose the LocaleContext as inheritable
	 * for child threads (using an {@link InheritableThreadLocal})
	 * @see #setTimeZone(TimeZone, boolean)
	 * @see SimpleLocaleContext#SimpleLocaleContext(Locale)
	 */
	/**
	 * 将给定的Locale与当前线程相关联，保留任何可能已经设置的TimeZone。 
	 *  <p>将为给定的语言环境隐式创建一个LocaleContext。 
	 *  
	 * @param 语言环境为当前语言环境，或者为{@code  null}以重置线程绑定上下文的语言环境部分
	 * @param 是否可继承，是否将LocaleContext公开为可继承给子线程（使用{@link  InheritableThreadLocal}）
	 * @see  #setTimeZone（TimeZone，boolean）
	 * @see  SimpleLocaleContext＃SimpleLocaleContext（Locale）
	 */
	public static void setLocale(@Nullable Locale locale, boolean inheritable) {
		LocaleContext localeContext = getLocaleContext();
		TimeZone timeZone = (localeContext instanceof TimeZoneAwareLocaleContext ?
				((TimeZoneAwareLocaleContext) localeContext).getTimeZone() : null);
		if (timeZone != null) {
			localeContext = new SimpleTimeZoneAwareLocaleContext(locale, timeZone);
		}
		else if (locale != null) {
			localeContext = new SimpleLocaleContext(locale);
		}
		else {
			localeContext = null;
		}
		setLocaleContext(localeContext, inheritable);
	}

	/**
	 * Set a shared default locale at the framework level,
	 * as an alternative to the JVM-wide default locale.
	 * <p><b>NOTE:</b> This can be useful to set an application-level
	 * default locale which differs from the JVM-wide default locale.
	 * However, this requires each such application to operate against
	 * locally deployed Spring Framework jars. Do not deploy Spring
	 * as a shared library at the server level in such a scenario!
	 * @param locale the default locale (or {@code null} for none,
	 * letting lookups fall back to {@link Locale#getDefault()})
	 * @since 4.3.5
	 * @see #getLocale()
	 * @see Locale#getDefault()
	 */
	/**
	 * 在框架级别设置共享的默认语言环境，以替代JVM范围内的默认语言环境。 
	 *  <p> <b>注意：</ b>这对于设置不同于JVM范围的默认语言环境的应用程序级默认语言环境很有用。 
	 * 但是，这要求每个这样的应用程序都可以针对本地部署的Spring Framework jar运行。 
	 * 在这种情况下，请勿在服务器级别将Spring部署为共享库！ 
	 *  
	 * @param 语言环境为默认语言环境（或为{@code  null}（无），让查询回落到{@link  Locale＃getDefault（）}）@4.3.5起
	 * @see  #getLocale（） 
	 * @see  Locale＃getDefault（）
	 */
	public static void setDefaultLocale(@Nullable Locale locale) {
		LocaleContextHolder.defaultLocale = locale;
	}

	/**
	 * Return the Locale associated with the current thread, if any,
	 * or the system default Locale otherwise. This is effectively a
	 * replacement for {@link java.util.Locale#getDefault()},
	 * able to optionally respect a user-level Locale setting.
	 * <p>Note: This method has a fallback to the shared default Locale,
	 * either at the framework level or at the JVM-wide system level.
	 * If you'd like to check for the raw LocaleContext content
	 * (which may indicate no specific locale through {@code null}, use
	 * {@link #getLocaleContext()} and call {@link LocaleContext#getLocale()}
	 * @return the current Locale, or the system default Locale if no
	 * specific Locale has been associated with the current thread
	 * @see #getLocaleContext()
	 * @see LocaleContext#getLocale()
	 * @see #setDefaultLocale(Locale)
	 * @see java.util.Locale#getDefault()
	 */
	/**
	 * 返回与当前线程关联的语言环境（如果有），否则返回系统默认的语言环境。 
	 * 这实际上是{@link  java.util.Locale＃getDefault（）}的替代，可以选择尊重用户级别的Locale设置。 
	 *  <p>注意：在框架级别或在JVM范围的系统级别，此方法都回退到共享的默认Locale。 
	 * 如果您想检查原始LocaleContext内容（可能通过{@code  null}表示没有特定的语言环境，请使用{@link  #getLocaleContext（）}并调用{@link  LocaleContext＃getLocale（ ）} 
	 * @return 当前语言环境，如果没有特定的语言环境与当前线程关联，则为系统默认语言环境
	 * @see  #getLocaleContext（）
	 * @see  LocaleContext＃getLocale（）
	 * @see  #setDefaultLocale（语言环境）
	 * @see  java.util.Locale＃getDefault（）
	 */
	public static Locale getLocale() {
		return getLocale(getLocaleContext());
	}

	/**
	 * Return the Locale associated with the given user context, if any,
	 * or the system default Locale otherwise. This is effectively a
	 * replacement for {@link java.util.Locale#getDefault()},
	 * able to optionally respect a user-level Locale setting.
	 * @param localeContext the user-level locale context to check
	 * @return the current Locale, or the system default Locale if no
	 * specific Locale has been associated with the current thread
	 * @since 5.0
	 * @see #getLocale()
	 * @see LocaleContext#getLocale()
	 * @see #setDefaultLocale(Locale)
	 * @see java.util.Locale#getDefault()
	 */
	/**
	 * 返回与给定用户上下文关联的语言环境（如果有），否则返回系统默认的语言环境。 
	 * 这实际上是{@link  java.util.Locale＃getDefault（）}的替代，可以选择尊重用户级别的Locale设置。 
	 *  
	 * @param  localeContext用户级别的语言环境，以检查
	 * @return 当前语言环境； 
	 * 如果没有特定的语言环境与当前线程相关联，则系统默认语言环境@自5.0起。 
	 * 
	 * @see  #getLocale（）<
	 * @see> LocaleContext＃getLocale（）
	 * @see  #setDefaultLocale（Locale）
	 * @see  java.util.Locale＃getDefault（）
	 */
	public static Locale getLocale(@Nullable LocaleContext localeContext) {
		if (localeContext != null) {
			Locale locale = localeContext.getLocale();
			if (locale != null) {
				return locale;
			}
		}
		return (defaultLocale != null ? defaultLocale : Locale.getDefault());
	}

	/**
	 * Associate the given TimeZone with the current thread,
	 * preserving any Locale that may have been set already.
	 * <p>Will implicitly create a LocaleContext for the given Locale,
	 * <i>not</i> exposing it as inheritable for child threads.
	 * @param timeZone the current TimeZone, or {@code null} to reset
	 * the time zone part of the thread-bound context
	 * @see #setLocale(Locale)
	 * @see SimpleTimeZoneAwareLocaleContext#SimpleTimeZoneAwareLocaleContext(Locale, TimeZone)
	 */
	/**
	 * 将给定的TimeZone与当前线程相关联，保留可能已经设置的任何语言环境。 
	 *  <p>将为给定的语言环境隐式创建一个LocaleContext，<i>不</ i>将其公开为可继承的子线程。 
	 *  
	 * @param  timeZone当前TimeZone，或使用{@code  null}重置线程绑定上下文的时区部分
	 * @see  #setLocale（Locale）
	 * @see  SimpleTimeZoneAwareLocaleContext＃SimpleTimeZoneAwareLocaleContext（Locale，TimeZone）
	 */
	public static void setTimeZone(@Nullable TimeZone timeZone) {
		setTimeZone(timeZone, false);
	}

	/**
	 * Associate the given TimeZone with the current thread,
	 * preserving any Locale that may have been set already.
	 * <p>Will implicitly create a LocaleContext for the given Locale.
	 * @param timeZone the current TimeZone, or {@code null} to reset
	 * the time zone part of the thread-bound context
	 * @param inheritable whether to expose the LocaleContext as inheritable
	 * for child threads (using an {@link InheritableThreadLocal})
	 * @see #setLocale(Locale, boolean)
	 * @see SimpleTimeZoneAwareLocaleContext#SimpleTimeZoneAwareLocaleContext(Locale, TimeZone)
	 */
	/**
	 * 将给定的TimeZone与当前线程相关联，保留可能已经设置的任何语言环境。 
	 *  <p>将为给定的语言环境隐式创建一个LocaleContext。 
	 *  
	 * @param  timeZone当前TimeZone，或者使用{@code  null}重置线程绑定上下文的时区部分
	 * @param 是否可继承，是否将LocaleContext公开为可继承给子线程（使用{<@链接> InheritableThreadLocal}）
	 * @see  #setLocale（Locale，boolean）
	 * @see  SimpleTimeZoneAwareLocaleContext＃SimpleTimeZoneAwareLocaleContext（Locale，TimeZone）
	 */
	public static void setTimeZone(@Nullable TimeZone timeZone, boolean inheritable) {
		LocaleContext localeContext = getLocaleContext();
		Locale locale = (localeContext != null ? localeContext.getLocale() : null);
		if (timeZone != null) {
			localeContext = new SimpleTimeZoneAwareLocaleContext(locale, timeZone);
		}
		else if (locale != null) {
			localeContext = new SimpleLocaleContext(locale);
		}
		else {
			localeContext = null;
		}
		setLocaleContext(localeContext, inheritable);
	}

	/**
	 * Set a shared default time zone at the framework level,
	 * as an alternative to the JVM-wide default time zone.
	 * <p><b>NOTE:</b> This can be useful to set an application-level
	 * default time zone which differs from the JVM-wide default time zone.
	 * However, this requires each such application to operate against
	 * locally deployed Spring Framework jars. Do not deploy Spring
	 * as a shared library at the server level in such a scenario!
	 * @param timeZone the default time zone (or {@code null} for none,
	 * letting lookups fall back to {@link TimeZone#getDefault()})
	 * @since 4.3.5
	 * @see #getTimeZone()
	 * @see TimeZone#getDefault()
	 */
	/**
	 * 在框架级别设置共享的默认时区，以替代JVM范围的默认时区。 
	 *  <p> <b>注意：</ b>这对于设置与JVM范围的默认时区不同的应用程序级默认时区很有用。 
	 * 但是，这要求每个这样的应用程序都可以针对本地部署的Spring Framework jar运行。 
	 * 在这种情况下，请勿在服务器级别将Spring部署为共享库！ 
	 *  
	 * @param  timeZone为默认时区（或为{@code  null}的默认时区，让查找回落到{@link  TimeZone＃getDefault（）}）@自4.3.5 
	 * @see  #getTimeZone（ ）
	 * @see  TimeZone＃getDefault（）
	 */
	public static void setDefaultTimeZone(@Nullable TimeZone timeZone) {
		defaultTimeZone = timeZone;
	}

	/**
	 * Return the TimeZone associated with the current thread, if any,
	 * or the system default TimeZone otherwise. This is effectively a
	 * replacement for {@link java.util.TimeZone#getDefault()},
	 * able to optionally respect a user-level TimeZone setting.
	 * <p>Note: This method has a fallback to the shared default TimeZone,
	 * either at the framework level or at the JVM-wide system level.
	 * If you'd like to check for the raw LocaleContext content
	 * (which may indicate no specific time zone through {@code null}, use
	 * {@link #getLocaleContext()} and call {@link TimeZoneAwareLocaleContext#getTimeZone()}
	 * after downcasting to {@link TimeZoneAwareLocaleContext}.
	 * @return the current TimeZone, or the system default TimeZone if no
	 * specific TimeZone has been associated with the current thread
	 * @see #getLocaleContext()
	 * @see TimeZoneAwareLocaleContext#getTimeZone()
	 * @see #setDefaultTimeZone(TimeZone)
	 * @see java.util.TimeZone#getDefault()
	 */
	/**
	 * 返回与当前线程关联的TimeZone（如果有），否则返回系统默认的TimeZone。 
	 * 这实际上是{@link  java.util.TimeZone＃getDefault（）}的替代，可以选择尊重用户级别的TimeZone设置。 
	 *  <p>注意：在框架级别或在JVM范围的系统级别，此方法都回退到共享的默认TimeZone。 
	 * 如果您想检查原始LocaleContext内容（可能通过{@code  null}指示没有特定的时区，请使用{@link  #getLocaleContext（）}并调用{@link  TimeZoneAwareLocaleContext＃getTimeZone （）}后向下转换为{@link  TimeZoneAwareLocaleContext}。 
	 * 
	 * @return 当前TimeZone，如果当前线程未与特定的TimeZone相关联，则系统默认为TimeZone 
	 * @see  #getLocaleContext（）
	 * @see  TimeZoneAwareLocaleContext＃getTimeZone（）
	 * @see  #setDefaultTimeZone（TimeZone）
	 * @see  java.util.TimeZone＃getDefault（）
	 */
	public static TimeZone getTimeZone() {
		return getTimeZone(getLocaleContext());
	}

	/**
	 * Return the TimeZone associated with the given user context, if any,
	 * or the system default TimeZone otherwise. This is effectively a
	 * replacement for {@link java.util.TimeZone#getDefault()},
	 * able to optionally respect a user-level TimeZone setting.
	 * @param localeContext the user-level locale context to check
	 * @return the current TimeZone, or the system default TimeZone if no
	 * specific TimeZone has been associated with the current thread
	 * @since 5.0
	 * @see #getTimeZone()
	 * @see TimeZoneAwareLocaleContext#getTimeZone()
	 * @see #setDefaultTimeZone(TimeZone)
	 * @see java.util.TimeZone#getDefault()
	 */
	/**
	 * 返回与给定用户上下文关联的TimeZone（如果有），否则返回系统默认的TimeZone。 
	 * 这实际上是{@link  java.util.TimeZone＃getDefault（）}的替代，可以选择尊重用户级别的TimeZone设置。 
	 *  
	 * @param  localeContext用户级别的语言环境，以检查
	 * @return 当前TimeZone，或者如果没有特定的TimeZone与当前线程关联，则系统默认为TimeZone @自5.0起
	 * @see  #getTimeZone（）<
	 * @see> TimeZoneAwareLocaleContext＃getTimeZone（）
	 * @see  #setDefaultTimeZone（TimeZone）
	 * @see  java.util.TimeZone＃getDefault（）
	 */
	public static TimeZone getTimeZone(@Nullable LocaleContext localeContext) {
		if (localeContext instanceof TimeZoneAwareLocaleContext) {
			TimeZone timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();
			if (timeZone != null) {
				return timeZone;
			}
		}
		return (defaultTimeZone != null ? defaultTimeZone : TimeZone.getDefault());
	}

}
