/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.instrument.classloading;

import java.lang.instrument.ClassFileTransformer;

/**
 * Defines the contract for adding one or more
 * {@link ClassFileTransformer ClassFileTransformers} to a {@link ClassLoader}.
 *
 * <p>Implementations may operate on the current context {@code ClassLoader}
 * or expose their own instrumentable {@code ClassLoader}.
 *
 * @author Rod Johnson
 * @author Costin Leau
 * @since 2.0
 * @see java.lang.instrument.ClassFileTransformer
 */
/**
 * 定义将一个或多个{@link  ClassFileTransformer ClassFileTransformers}添加到{@link  ClassLoader}的合同。 
 *  <p>实现可以在当前上下文{@code  ClassLoader}上进行操作，也可以公开其自己的可检测的{@code  ClassLoader}。 
 *  @author 罗德·约翰逊@author  Costin Leau @since 2.0起
 * @see  java.lang.instrument.ClassFileTransformer
 */
public interface LoadTimeWeaver {

	/**
	 * Add a {@code ClassFileTransformer} to be applied by this
	 * {@code LoadTimeWeaver}.
	 * @param transformer the {@code ClassFileTransformer} to add
	 */
	/**
	 * 添加一个{@code  ClassFileTransformer}，以供此{@code  LoadTimeWeaver}应用。 
	 *  
	 * @param 转换{@code  ClassFileTransformer}以添加
	 */
	void addTransformer(ClassFileTransformer transformer);

	/**
	 * Return a {@code ClassLoader} that supports instrumentation
	 * through AspectJ-style load-time weaving based on user-defined
	 * {@link ClassFileTransformer ClassFileTransformers}.
	 * <p>May be the current {@code ClassLoader}, or a {@code ClassLoader}
	 * created by this {@link LoadTimeWeaver} instance.
	 * @return the {@code ClassLoader} which will expose
	 * instrumented classes according to the registered transformers
	 */
	/**
	 * 返回基于用户定义的{@link  ClassFileTransformer ClassFileTransformers}通过AspectJ风格的加载时编织支持检测的{@code  ClassLoader}。 
	 *  <p>可以是当前的{@code  ClassLoader}，也可以是由此{@link  LoadTimeWeaver}实例创建的{@code  ClassLoader}。 
	 *  
	 * @return  {@code  ClassLoader}，它将根据注册的转换器公开检测的类
	 */
	ClassLoader getInstrumentableClassLoader();

	/**
	 * Return a throwaway {@code ClassLoader}, enabling classes to be
	 * loaded and inspected without affecting the parent {@code ClassLoader}.
	 * <p>Should <i>not</i> return the same instance of the {@link ClassLoader}
	 * returned from an invocation of {@link #getInstrumentableClassLoader()}.
	 * @return a temporary throwaway {@code ClassLoader}; should return
	 * a new instance for each call, with no existing state
	 */
	/**
	 * 返回一个废弃的{@code  ClassLoader}，从而可以加载和检查类，而不会影响父类{@code  ClassLoader}。 
	 *  <p>应该<i>不</ i>返回从调用{@link  #getInstrumentableClassLoader（）}返回的{@link  ClassLoader}的相同实例。 
	 *  
	 * @return 临时扔掉的{@code  ClassLoader}； 
	 * 应该为每个调用返回一个新实例，没有任何状态
	 */
	ClassLoader getThrowawayClassLoader();

}
