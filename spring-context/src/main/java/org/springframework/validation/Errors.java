/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.validation;

import java.util.List;

import org.springframework.beans.PropertyAccessor;
import org.springframework.lang.Nullable;

/**
 * Stores and exposes information about data-binding and validation
 * errors for a specific object.
 *
 * <p>Field names can be properties of the target object (e.g. "name"
 * when binding to a customer object), or nested fields in case of
 * subobjects (e.g. "address.street"). Supports subtree navigation
 * via {@link #setNestedPath(String)}: for example, an
 * {@code AddressValidator} validates "address", not being aware
 * that this is a subobject of customer.
 *
 * <p>Note: {@code Errors} objects are single-threaded.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see #setNestedPath
 * @see BindException
 * @see DataBinder
 * @see ValidationUtils
 */
/**
 * 存储并公开有关特定对象的数据绑定和验证错误的信息。 
 *  <p>字段名称可以是目标对象的属性（例如，绑定到客户对象时的"名称"），或者是子对象（例如"address.street"）时的嵌套字段。 
 * 支持通过{@link  #setNestedPath（String）}进行子树导航：例如，一个{@code  AddressValidator}验证"地址"，而不知道这是客户的子对象。 
 *  <p>注意：{@code 错误}对象是单线程的。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  #setNestedPath 
 * @see  BindException 
 * @see  DataBinder 
 * @see  ValidationUtils
 */
public interface Errors {

	/**
	 * The separator between path elements in a nested path,
	 * for example in "customer.name" or "customer.address.street".
	 * <p>"." = same as the
	 * {@link org.springframework.beans.PropertyAccessor#NESTED_PROPERTY_SEPARATOR nested property separator}
	 * in the beans package.
	 */
	/**
	 * 嵌套路径中路径元素之间的分隔符，例如在"customer.name"或"customer.address.street"中。 
	 *  <p>"。 
	 *  =与beans包中的{@link  org.springframework.beans.PropertyAccessor＃NESTED_PROPERTY_SEPARATOR嵌套属性分隔符}相同。 
	 * 
	 */
	String NESTED_PATH_SEPARATOR = PropertyAccessor.NESTED_PROPERTY_SEPARATOR;


	/**
	 * Return the name of the bound root object.
	 */
	/**
	 * 返回绑定的根对象的名称。 
	 * 
	 */
	String getObjectName();

	/**
	 * Allow context to be changed so that standard validators can validate
	 * subtrees. Reject calls prepend the given path to the field names.
	 * <p>For example, an address validator could validate the subobject
	 * "address" of a customer object.
	 * @param nestedPath nested path within this object,
	 * e.g. "address" (defaults to "", {@code null} is also acceptable).
	 * Can end with a dot: both "address" and "address." are valid.
	 */
	/**
	 * 允许更改上下文，以便标准验证器可以验证子树。 
	 * 拒绝调用将给定路径添加到字段名称之前。 
	 *  <p>例如，地址验证器可以验证客户对象的子对象"地址"。 
	 *  
	 * @param  nestedPath此对象内的嵌套路径，例如"地址"（默认为""，{<@code> null}也可接受）。 
	 * 可以以点结尾："地址"和"地址"。 
	 * 是有效的。 
	 * 
	 */
	void setNestedPath(String nestedPath);

	/**
	 * Return the current nested path of this {@link Errors} object.
	 * <p>Returns a nested path with a dot, i.e. "address.", for easy
	 * building of concatenated paths. Default is an empty String.
	 */
	/**
	 * 返回此{@link 错误}对象的当前嵌套路径。 
	 *  <p>返回带有点的嵌套路径，即"地址"，以便于构建连接路径。 
	 * 默认值为空字符串。 
	 * 
	 */
	String getNestedPath();

	/**
	 * Push the given sub path onto the nested path stack.
	 * <p>A {@link #popNestedPath()} call will reset the original
	 * nested path before the corresponding
	 * {@code pushNestedPath(String)} call.
	 * <p>Using the nested path stack allows to set temporary nested paths
	 * for subobjects without having to worry about a temporary path holder.
	 * <p>For example: current path "spouse.", pushNestedPath("child") ->
	 * result path "spouse.child."; popNestedPath() -> "spouse." again.
	 * @param subPath the sub path to push onto the nested path stack
	 * @see #popNestedPath
	 */
	/**
	 * 将给定的子路径推入嵌套路径堆栈。 
	 *  <p>一个{@link  #popNestedPath（）}调用将重置相应的{@code  pushNestedPath（String）}调用之前的原始嵌套路径。 
	 *  <p>使用嵌套路径堆栈可以为子对象设置临时嵌套路径，而不必担心临时路径持有者。 
	 *  <p>例如：当前路径"spouse。 
	 * "，pushNestedPath（"child"）->结果路径"spouse.child"。 
	 *  popNestedPath（）->"配偶"。 
	 * 再次。 
	 *  
	 * @param  subPath子路径以推送到嵌套路径堆栈中。 
	 * 
	 * @see  #popNestedPath
	 */
	void pushNestedPath(String subPath);

	/**
	 * Pop the former nested path from the nested path stack.
	 * @throws IllegalStateException if there is no former nested path on the stack
	 * @see #pushNestedPath
	 */
	/**
	 * 从嵌套路径堆栈中弹出以前的嵌套路径。 
	 *  
	 * @throws 如果堆栈上没有以前的嵌套路径，则为IllegalStateException 
	 * @see  #pushNestedPath
	 */
	void popNestedPath() throws IllegalStateException;

	/**
	 * Register a global error for the entire target object,
	 * using the given error description.
	 * @param errorCode error code, interpretable as a message key
	 */
	/**
	 * 使用给定的错误描述为整个目标对象注册一个全局错误。 
	 *  
	 * @param  errorCode错误代码，可解释为消息键
	 */
	void reject(String errorCode);

	/**
	 * Register a global error for the entire target object,
	 * using the given error description.
	 * @param errorCode error code, interpretable as a message key
	 * @param defaultMessage fallback default message
	 */
	/**
	 * 使用给定的错误描述为整个目标对象注册一个全局错误。 
	 *  
	 * @param  errorCode错误代码，可解释为消息键
	 * @param  defaultMessage后备默认消息
	 */
	void reject(String errorCode, String defaultMessage);

	/**
	 * Register a global error for the entire target object,
	 * using the given error description.
	 * @param errorCode error code, interpretable as a message key
	 * @param errorArgs error arguments, for argument binding via MessageFormat
	 * (can be {@code null})
	 * @param defaultMessage fallback default message
	 */
	/**
	 * 使用给定的错误描述为整个目标对象注册一个全局错误。 
	 *  
	 * @param  errorCode错误代码，可解释为消息键
	 * @param  errorArgs错误参数，用于通过MessageFormat进行参数绑定（可以为{@code  null}）
	 * @param  defaultMessage后备默认消息
	 */
	void reject(String errorCode, @Nullable Object[] errorArgs, @Nullable String defaultMessage);

	/**
	 * Register a field error for the specified field of the current object
	 * (respecting the current nested path, if any), using the given error
	 * description.
	 * <p>The field name may be {@code null} or empty String to indicate
	 * the current object itself rather than a field of it. This may result
	 * in a corresponding field error within the nested object graph or a
	 * global error if the current object is the top object.
	 * @param field the field name (may be {@code null} or empty String)
	 * @param errorCode error code, interpretable as a message key
	 * @see #getNestedPath()
	 */
	/**
	 * 使用给定的错误描述为当前对象的指定字段注册一个字段错误（尊重当前嵌套路径，如果有的话）。 
	 *  <p>字段名称可以是{@code  null}或空字符串，以指示当前对象本身而不是它的字段。 
	 * 如果当前对象是顶部对象，则这可能会导致嵌套对象图中的相应字段错误或全局错误。 
	 *  
	 * @param 字段的字段名称（可以为{@code  null}或为空字符串）
	 * @param  errorCode错误代码，可解释为消息键
	 * @see  #getNestedPath（）
	 */
	void rejectValue(@Nullable String field, String errorCode);

	/**
	 * Register a field error for the specified field of the current object
	 * (respecting the current nested path, if any), using the given error
	 * description.
	 * <p>The field name may be {@code null} or empty String to indicate
	 * the current object itself rather than a field of it. This may result
	 * in a corresponding field error within the nested object graph or a
	 * global error if the current object is the top object.
	 * @param field the field name (may be {@code null} or empty String)
	 * @param errorCode error code, interpretable as a message key
	 * @param defaultMessage fallback default message
	 * @see #getNestedPath()
	 */
	/**
	 * 使用给定的错误描述为当前对象的指定字段注册一个字段错误（尊重当前嵌套路径，如果有的话）。 
	 *  <p>字段名称可以是{@code  null}或空字符串，以指示当前对象本身而不是它的字段。 
	 * 如果当前对象是顶部对象，则这可能会导致嵌套对象图中的相应字段错误或全局错误。 
	 *  
	 * @param 字段的字段名称（可以为{@code  null}或为空字符串）
	 * @param  errorCode错误代码，可解释为消息键
	 * @param  defaultMessage后备默认消息
	 * @see  #getNestedPath（ ）
	 */
	void rejectValue(@Nullable String field, String errorCode, String defaultMessage);

	/**
	 * Register a field error for the specified field of the current object
	 * (respecting the current nested path, if any), using the given error
	 * description.
	 * <p>The field name may be {@code null} or empty String to indicate
	 * the current object itself rather than a field of it. This may result
	 * in a corresponding field error within the nested object graph or a
	 * global error if the current object is the top object.
	 * @param field the field name (may be {@code null} or empty String)
	 * @param errorCode error code, interpretable as a message key
	 * @param errorArgs error arguments, for argument binding via MessageFormat
	 * (can be {@code null})
	 * @param defaultMessage fallback default message
	 * @see #getNestedPath()
	 */
	/**
	 * 使用给定的错误描述为当前对象的指定字段注册一个字段错误（尊重当前嵌套路径，如果有的话）。 
	 *  <p>字段名称可以是{@code  null}或空字符串，以指示当前对象本身而不是它的字段。 
	 * 如果当前对象是顶部对象，则这可能会导致嵌套对象图中的相应字段错误或全局错误。 
	 *  
	 * @param 字段的字段名称（可以是{@code  null}或为空字符串）
	 * @param  errorCode错误代码，可解释为消息键
	 * @param  errorArgs错误参数，用于通过MessageFormat进行参数绑定（可以是{@code  null}）
	 * @param  defaultMessage后备默认消息
	 * @see  #getNestedPath（）
	 */
	void rejectValue(@Nullable String field, String errorCode,
			@Nullable Object[] errorArgs, @Nullable String defaultMessage);

	/**
	 * Add all errors from the given {@code Errors} instance to this
	 * {@code Errors} instance.
	 * <p>This is a convenience method to avoid repeated {@code reject(..)}
	 * calls for merging an {@code Errors} instance into another
	 * {@code Errors} instance.
	 * <p>Note that the passed-in {@code Errors} instance is supposed
	 * to refer to the same target object, or at least contain compatible errors
	 * that apply to the target object of this {@code Errors} instance.
	 * @param errors the {@code Errors} instance to merge in
	 */
	/**
	 * 将所有错误从给定的{@code 错误}实例添加到此{@code 错误}实例。 
	 *  <p>这是避免重复的{@code  Errors}实例合并到另一个{@code  Errors}实例的{@code  reject（..）}调用的一种便捷方法。 
	 *  <p>请注意，传入的{@code 错误}实例应该引用相同的目标对象，或者至少包含适用于此{@code 错误}实例的目标对象的兼容错误。 
	 *  
	 * @param 错误{{@@code> Errors}实例要合并到其中
	 */
	void addAllErrors(Errors errors);

	/**
	 * Return if there were any errors.
	 */
	/**
	 * 如有任何错误，请返回。 
	 * 
	 */
	boolean hasErrors();

	/**
	 * Return the total number of errors.
	 */
	/**
	 * 返回错误总数。 
	 * 
	 */
	int getErrorCount();

	/**
	 * Get all errors, both global and field ones.
	 * @return a list of {@link ObjectError} instances
	 */
	/**
	 * 获取所有错误，包括全局错误和现场错误。 
	 *  
	 * @return  {@link  ObjectError}实例的列表
	 */
	List<ObjectError> getAllErrors();

	/**
	 * Are there any global errors?
	 * @return {@code true} if there are any global errors
	 * @see #hasFieldErrors()
	 */
	/**
	 * 有全局错误吗？ 
	 * @return  {@code  true}，如果有任何全局错误
	 * @see  #hasFieldErrors（）
	 */
	boolean hasGlobalErrors();

	/**
	 * Return the number of global errors.
	 * @return the number of global errors
	 * @see #getFieldErrorCount()
	 */
	/**
	 * 返回全局错误数。 
	 *  
	 * @return 全局错误数
	 * @see  #getFieldErrorCount（）
	 */
	int getGlobalErrorCount();

	/**
	 * Get all global errors.
	 * @return a list of {@link ObjectError} instances
	 */
	/**
	 * 获取所有全局错误。 
	 *  
	 * @return  {@link  ObjectError}实例的列表
	 */
	List<ObjectError> getGlobalErrors();

	/**
	 * Get the <i>first</i> global error, if any.
	 * @return the global error, or {@code null}
	 */
	/**
	 * 获取<i> first </ i>全局错误（如果有）。 
	 *  
	 * @return 全局错误，或{@code  null}
	 */
	@Nullable
	ObjectError getGlobalError();

	/**
	 * Are there any field errors?
	 * @return {@code true} if there are any errors associated with a field
	 * @see #hasGlobalErrors()
	 */
	/**
	 * 是否有任何字段错误？ 
	 * @return  {@code  true}，如果与字段相关的任何错误
	 * @see  #hasGlobalErrors（）
	 */
	boolean hasFieldErrors();

	/**
	 * Return the number of errors associated with a field.
	 * @return the number of errors associated with a field
	 * @see #getGlobalErrorCount()
	 */
	/**
	 * 返回与字段关联的错误数。 
	 *  
	 * @return 与字段关联的错误数
	 * @see  #getGlobalErrorCount（）
	 */
	int getFieldErrorCount();

	/**
	 * Get all errors associated with a field.
	 * @return a List of {@link FieldError} instances
	 */
	/**
	 * 获取与字段相关的所有错误。 
	 *  
	 * @return  {@link  FieldError}实例的列表
	 */
	List<FieldError> getFieldErrors();

	/**
	 * Get the <i>first</i> error associated with a field, if any.
	 * @return the field-specific error, or {@code null}
	 */
	/**
	 * 获取与字段相关的<i> first </ i>错误（如果有）。 
	 *  
	 * @return 特定于字段的错误，或{@code  null}
	 */
	@Nullable
	FieldError getFieldError();

	/**
	 * Are there any errors associated with the given field?
	 * @param field the field name
	 * @return {@code true} if there were any errors associated with the given field
	 */
	/**
	 * 给定字段是否存在任何错误？ 
	 * @param 字段，字段名称为
	 * @return  {@code  true}，如果与给定字段相关联的任何错误
	 */
	boolean hasFieldErrors(String field);

	/**
	 * Return the number of errors associated with the given field.
	 * @param field the field name
	 * @return the number of errors associated with the given field
	 */
	/**
	 * 返回与给定字段关联的错误数。 
	 *  
	 * @param 字段的字段名称
	 * @return 与给定字段关联的错误数
	 */
	int getFieldErrorCount(String field);

	/**
	 * Get all errors associated with the given field.
	 * <p>Implementations should support not only full field names like
	 * "name" but also pattern matches like "na*" or "address.*".
	 * @param field the field name
	 * @return a List of {@link FieldError} instances
	 */
	/**
	 * 获取与给定字段关联的所有错误。 
	 *  <p>实施不仅应支持完整的字段名称（如"名称"），还应支持模式匹配（如"na"或"address。 
	 * "）。 
	 *  
	 * @param 字段的名称为
	 * @return  {@@link> FieldError}实例的列表
	 */
	List<FieldError> getFieldErrors(String field);

	/**
	 * Get the first error associated with the given field, if any.
	 * @param field the field name
	 * @return the field-specific error, or {@code null}
	 */
	/**
	 * 获取与给定字段关联的第一个错误（如果有）。 
	 *  
	 * @param 字段的字段名称
	 * @return 特定于字段的错误，或{@code  null}
	 */
	@Nullable
	FieldError getFieldError(String field);

	/**
	 * Return the current value of the given field, either the current
	 * bean property value or a rejected update from the last binding.
	 * <p>Allows for convenient access to user-specified field values,
	 * even if there were type mismatches.
	 * @param field the field name
	 * @return the current value of the given field
	 */
	/**
	 * 返回给定字段的当前值，或者是当前bean属性值，或者是来自最后一个绑定的拒绝更新。 
	 *  <p>即使类型不匹配，也可以方便地访问用户指定的字段值。 
	 *  
	 * @param 字段的字段名称
	 * @return 给定字段的当前值
	 */
	@Nullable
	Object getFieldValue(String field);

	/**
	 * Return the type of a given field.
	 * <p>Implementations should be able to determine the type even
	 * when the field value is {@code null}, for example from some
	 * associated descriptor.
	 * @param field the field name
	 * @return the type of the field, or {@code null} if not determinable
	 */
	/**
	 * 返回给定字段的类型。 
	 *  <p>即使字段值是{@code  null}，例如从某些关联的描述符中，实现也应该能够确定类型。 
	 *  
	 * @param 字段，字段名称
	 * @return 字段的类型，如果不确定，则为{@code  null}
	 */
	@Nullable
	Class<?> getFieldType(String field);

}
