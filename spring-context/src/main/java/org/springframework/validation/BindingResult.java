/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.validation;

import java.beans.PropertyEditor;
import java.util.Map;

import org.springframework.beans.PropertyEditorRegistry;
import org.springframework.lang.Nullable;

/**
 * General interface that represents binding results. Extends the
 * {@link Errors interface} for error registration capabilities,
 * allowing for a {@link Validator} to be applied, and adds
 * binding-specific analysis and model building.
 *
 * <p>Serves as result holder for a {@link DataBinder}, obtained via
 * the {@link DataBinder#getBindingResult()} method. BindingResult
 * implementations can also be used directly, for example to invoke
 * a {@link Validator} on it (e.g. as part of a unit test).
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see DataBinder
 * @see Errors
 * @see Validator
 * @see BeanPropertyBindingResult
 * @see DirectFieldBindingResult
 * @see MapBindingResult
 */
/**
 * 表示绑定结果的常规接口。 
 * 扩展了{@link 错误接口}的错误注册功能，允许应用{@link 验证程序}，并添加了特定于绑定的分析和模型构建。 
 *  <p>用作通过{@link  DataBinder＃getBindingResult（）}方法获得的{@link  DataBinder}的结果持有者。 
 *  BindingResult实现也可以直接使用，例如，在其上调用{@link  Validator}（例如，作为单元测试的一部分）。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  DataBinder 
 * @see 错误
 * @see 验证器
 * @see  BeanPropertyBindingResult 
 * @see  DirectFieldBindingResult 
 * @see  MapBindingResult
 */
public interface BindingResult extends Errors {

	/**
	 * Prefix for the name of the BindingResult instance in a model,
	 * followed by the object name.
	 */
	/**
	 * 模型中BindingResult实例名称的前缀，后跟对象名称。 
	 * 
	 */
	String MODEL_KEY_PREFIX = BindingResult.class.getName() + ".";


	/**
	 * Return the wrapped target object, which may be a bean, an object with
	 * public fields, a Map - depending on the concrete binding strategy.
	 */
	/**
	 * 返回包装的目标对象，该对象可能是Bean，具有公共字段的对象，一个Map-取决于具体的绑定策略。 
	 * 
	 */
	@Nullable
	Object getTarget();

	/**
	 * Return a model Map for the obtained state, exposing a BindingResult
	 * instance as '{@link #MODEL_KEY_PREFIX MODEL_KEY_PREFIX} + objectName'
	 * and the object itself as 'objectName'.
	 * <p>Note that the Map is constructed every time you're calling this method.
	 * Adding things to the map and then re-calling this method will not work.
	 * <p>The attributes in the model Map returned by this method are usually
	 * included in the {@link org.springframework.web.servlet.ModelAndView}
	 * for a form view that uses Spring's {@code bind} tag in a JSP,
	 * which needs access to the BindingResult instance. Spring's pre-built
	 * form controllers will do this for you when rendering a form view.
	 * When building the ModelAndView instance yourself, you need to include
	 * the attributes from the model Map returned by this method.
	 * @see #getObjectName()
	 * @see #MODEL_KEY_PREFIX
	 * @see org.springframework.web.servlet.ModelAndView
	 * @see org.springframework.web.servlet.tags.BindTag
	 */
	/**
	 * 返回获得状态的模型Map，将BindingResult实例公开为'{@link  #MODEL_KEY_PREFIX MODEL_KEY_PREFIX} + objectName'，并将对象本身公开为'objectName'。 
	 *  <p>请注意，每次调用此方法时都会构造Map。 
	 * 将内容添加到地图，然后重新调用此方法将不起作用。 
	 *  <p>通过此方法返回的模型Map中的属性通常包含在{@link  org.springframework.web.servlet.ModelAndView}中，用于使用Spring的{@code  bind}标记的表单视图。 
	 *  JSP，需要访问BindingResult实例。 
	 *  Spring的预构建表单控制器将在呈现表单视图时为您完成此操作。 
	 * 自己构建ModelAndView实例时，您需要包括此方法返回的模型Map中的属性。 
	 *  
	 * @see  #getObjectName（）
	 * @see  #MODEL_KEY_PREFIX 
	 * @see  org.springframework.web.servlet.ModelAndView 
	 * @see  org.springframework.web.servlet.tags.BindTag
	 */
	Map<String, Object> getModel();

	/**
	 * Extract the raw field value for the given field.
	 * Typically used for comparison purposes.
	 * @param field the field to check
	 * @return the current value of the field in its raw form, or {@code null} if not known
	 */
	/**
	 * 提取给定字段的原始字段值。 
	 * 通常用于比较目的。 
	 *  
	 * @param 字段以原始格式检查
	 * @return 字段的当前值； 
	 * 如果未知，则返回{@code  null}
	 */
	@Nullable
	Object getRawFieldValue(String field);

	/**
	 * Find a custom property editor for the given type and property.
	 * @param field the path of the property (name or nested path), or
	 * {@code null} if looking for an editor for all properties of the given type
	 * @param valueType the type of the property (can be {@code null} if a property
	 * is given but should be specified in any case for consistency checking)
	 * @return the registered editor, or {@code null} if none
	 */
	/**
	 * 查找给定类型和属性的自定义属性编辑器。 
	 *  
	 * @param 字段属性的路径（名称或嵌套路径），如果为给定类型的所有属性寻找编辑器，则为{@code  null} 
	 * @param  valueType属性的类型（可以是{@code  null}（如果已指定属性，但在任何情况下均应指定以进行一致性检查）
	 * @return 已注册的编辑器，或{@code  null}（如果没有）
	 */
	@Nullable
	PropertyEditor findEditor(@Nullable String field, @Nullable Class<?> valueType);

	/**
	 * Return the underlying PropertyEditorRegistry.
	 * @return the PropertyEditorRegistry, or {@code null} if none
	 * available for this BindingResult
	 */
	/**
	 * 返回基础的PropertyEditorRegistry。 
	 *  
	 * @return  PropertyEditorRegistry，如果此BindingResult不可用，则为{@code  null}
	 */
	@Nullable
	PropertyEditorRegistry getPropertyEditorRegistry();

	/**
	 * Resolve the given error code into message codes.
	 * <p>Calls the configured {@link MessageCodesResolver} with appropriate parameters.
	 * @param errorCode the error code to resolve into message codes
	 * @return the resolved message codes
	 */
	/**
	 * 将给定的错误代码解析为消息代码。 
	 *  <p>使用适当的参数调用已配置的{@link  MessageCodesResolver}。 
	 *  
	 * @param  errorCode将错误代码解析为消息代码
	 * @return 已解析的消息代码
	 */
	String[] resolveMessageCodes(String errorCode);

	/**
	 * Resolve the given error code into message codes for the given field.
	 * <p>Calls the configured {@link MessageCodesResolver} with appropriate parameters.
	 * @param errorCode the error code to resolve into message codes
	 * @param field the field to resolve message codes for
	 * @return the resolved message codes
	 */
	/**
	 * 将给定的错误代码解析为给定字段的消息代码。 
	 *  <p>使用适当的参数调用已配置的{@link  MessageCodesResolver}。 
	 *  
	 * @param  errorCode将错误代码解析为消息代码
	 * @param 字段，为
	 * @return 已解析的消息代码解析消息代码
	 */
	String[] resolveMessageCodes(String errorCode, String field);

	/**
	 * Add a custom {@link ObjectError} or {@link FieldError} to the errors list.
	 * <p>Intended to be used by cooperating strategies such as {@link BindingErrorProcessor}.
	 * @see ObjectError
	 * @see FieldError
	 * @see BindingErrorProcessor
	 */
	/**
	 * 将自定义{@link  ObjectError}或{@link  FieldError}添加到错误列表。 
	 *  <p>打算由诸如{@link  BindingErrorProcessor}之类的合作策略使用。 
	 *  
	 * @see  ObjectError 
	 * @see  FieldError 
	 * @see  BindingErrorProcessor
	 */
	void addError(ObjectError error);

	/**
	 * Record the given value for the specified field.
	 * <p>To be used when a target object cannot be constructed, making
	 * the original field values available through {@link #getFieldValue}.
	 * In case of a registered error, the rejected value will be exposed
	 * for each affected field.
	 * @param field the field to record the value for
	 * @param type the type of the field
	 * @param value the original value
	 * @since 5.0.4
	 */
	/**
	 * 记录指定字段的给定值。 
	 *  <p>在无法构造目标对象时使用，通过{@link  #getFieldValue}使原始字段值可用。 
	 * 如果出现注册错误，将为每个受影响的字段显示拒绝值。 
	 *  
	 * @param 字段用于记录
	 * @param 值的字段键入字段的类型
	 * @param 值原始值@始于5.0.4
	 */
	default void recordFieldValue(String field, Class<?> type, @Nullable Object value) {
	}

	/**
	 * Mark the specified disallowed field as suppressed.
	 * <p>The data binder invokes this for each field value that was
	 * detected to target a disallowed field.
	 * @see DataBinder#setAllowedFields
	 */
	/**
	 * 将指定的禁止字段标记为已禁止。 
	 *  <p>数据绑定程序为检测到的以禁止字段为目标的每个字段值调用此方法。 
	 *  
	 * @see  DataBinder＃setAllowedFields
	 */
	default void recordSuppressedField(String field) {
	}

	/**
	 * Return the list of fields that were suppressed during the bind process.
	 * <p>Can be used to determine whether any field values were targeting
	 * disallowed fields.
	 * @see DataBinder#setAllowedFields
	 */
	/**
	 * 返回绑定过程中禁止显示的字段列表。 
	 *  <p>可用于确定是否有任何字段值以禁止的字段为目标。 
	 *  
	 * @see  DataBinder＃setAllowedFields
	 */
	default String[] getSuppressedFields() {
		return new String[0];
	}

}
