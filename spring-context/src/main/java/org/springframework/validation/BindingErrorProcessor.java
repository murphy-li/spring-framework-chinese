/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.validation;

import org.springframework.beans.PropertyAccessException;

/**
 * Strategy for processing {@code DataBinder}'s missing field errors,
 * and for translating a {@code PropertyAccessException} to a
 * {@code FieldError}.
 *
 * <p>The error processor is pluggable so you can treat errors differently
 * if you want to. A default implementation is provided for typical needs.
 *
 * <p>Note: As of Spring 2.0, this interface operates on a given BindingResult,
 * to be compatible with any binding strategy (bean property, direct field access, etc).
 * It can still receive a BindException as argument (since a BindException implements
 * the BindingResult interface as well) but no longer operates on it directly.
 *
 * @author Alef Arendsen
 * @author Juergen Hoeller
 * @since 1.2
 * @see DataBinder#setBindingErrorProcessor
 * @see DefaultBindingErrorProcessor
 * @see BindingResult
 * @see BindException
 */
/**
 * 处理{@code  DataBinder}缺少的字段错误，以及将{@code  PropertyAccessException}转换为{@code  FieldError}的策略。 
 *  <p>错误处理器是可插入的，因此您可以根据需要不同地对待错误。 
 * 针对典型需求提供了默认实现。 
 *  <p>注意：从Spring 2.0开始，此接口在给定的BindingResult上运行，以与任何绑定策略（bean属性，直接字段访问等）兼容。 
 * 它仍然可以接收BindException作为参数（因为BindException也实现BindingResult接口），但是不再直接对其进行操作。 
 *  @author  Alef Arendsen @author  Juergen Hoeller @始于1.2 
 * @see  DataBinder＃setBindingErrorProcessor 
 * @see  DefaultBindingErrorProcessor 
 * @see  BindingResult 
 * @see  BindException
 */
public interface BindingErrorProcessor {

	/**
	 * Apply the missing field error to the given BindException.
	 * <p>Usually, a field error is created for a missing required field.
	 * @param missingField the field that was missing during binding
	 * @param bindingResult the errors object to add the error(s) to.
	 * You can add more than just one error or maybe even ignore it.
	 * The {@code BindingResult} object features convenience utils such as
	 * a {@code resolveMessageCodes} method to resolve an error code.
	 * @see BeanPropertyBindingResult#addError
	 * @see BeanPropertyBindingResult#resolveMessageCodes
	 */
	/**
	 * 将缺少的字段错误应用于给定的BindException。 
	 *  <p>通常，会为缺少的必填字段创建字段错误。 
	 *  
	 * @param  missingField绑定期间缺少的字段
	 * @param  bindingResult错误对象以将错误添加到其中。 
	 * 您可以添加多个错误，甚至可以忽略它。 
	 *  {@code  BindingResult}对象具有便利工具，例如用于解决错误代码的{@code  resolveMessageCodes}方法。 
	 *  
	 * @see  BeanPropertyBindingResult＃addError 
	 * @see  BeanPropertyBindingResult＃resolveMessageCodes
	 */
	void processMissingFieldError(String missingField, BindingResult bindingResult);

	/**
	 * Translate the given {@code PropertyAccessException} to an appropriate
	 * error registered on the given {@code Errors} instance.
	 * <p>Note that two error types are available: {@code FieldError} and
	 * {@code ObjectError}. Usually, field errors are created, but in certain
	 * situations one might want to create a global {@code ObjectError} instead.
	 * @param ex the {@code PropertyAccessException} to translate
	 * @param bindingResult the errors object to add the error(s) to.
	 * You can add more than just one error or maybe even ignore it.
	 * The {@code BindingResult} object features convenience utils such as
	 * a {@code resolveMessageCodes} method to resolve an error code.
	 * @see Errors
	 * @see FieldError
	 * @see ObjectError
	 * @see MessageCodesResolver
	 * @see BeanPropertyBindingResult#addError
	 * @see BeanPropertyBindingResult#resolveMessageCodes
	 */
	/**
	 * 将给定的{@code  PropertyAccessException}转换为在给定的{@code  Errors}实例上注册的适当错误。 
	 *  <p>请注意，有两种错误类型可用：{@code  FieldError}和{@code  ObjectError}。 
	 * 通常，会创建字段错误，但在某些情况下，可能需要创建全局{@code  ObjectError}。 
	 *  
	 * @param ，从{@code  PropertyAccessException}转换为
	 * @param  bindingResult，将错误对象添加到错误中。 
	 * 您可以添加多个错误，甚至可以忽略它。 
	 *  {@code  BindingResult}对象具有便利工具，例如用于解决错误代码的{@code  resolveMessageCodes}方法。 
	 *  
	 * @see 错误
	 * @see  FieldError 
	 * @see  ObjectError 
	 * @see  MessageCodesResolver 
	 * @see  BeanPropertyBindingResult＃addError 
	 * @see  BeanPropertyBindingResult＃resolveMessageCodes
	 */
	void processPropertyAccessException(PropertyAccessException ex, BindingResult bindingResult);

}
