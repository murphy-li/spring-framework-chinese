/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.support;

import java.util.Hashtable;

import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;

/**
 * Helper class for the creation of {@link javax.management.ObjectName} instances.
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 1.2
 * @see javax.management.ObjectName#getInstance(String)
 */
/**
 * 用于创建{@link  javax.management.ObjectName}实例的帮助程序类。 
 *  @author  Rob Harrop @author  Juergen Hoeller @始于1.2 
 * @see  javax.management.ObjectName＃getInstance（String）
 */
public final class ObjectNameManager {

	private ObjectNameManager() {
	}


	/**
	 * Retrieve the {@code ObjectName} instance corresponding to the supplied name.
	 * @param objectName the {@code ObjectName} in {@code ObjectName} or
	 * {@code String} format
	 * @return the {@code ObjectName} instance
	 * @throws MalformedObjectNameException in case of an invalid object name specification
	 * @see ObjectName#ObjectName(String)
	 * @see ObjectName#getInstance(String)
	 */
	/**
	 * 检索与提供的名称对应的{@code  ObjectName}实例。 
	 *  
	 * @param  objectName {@@code> ObjectName}或{@code  String}格式的{@code  ObjectName} 
	 * @return  {@code  ObjectName}实例
	 * @throws  MalformedObjectNameException对象名称规范的定义
	 * @see  ObjectName＃ObjectName（String）
	 * @see  ObjectName＃getInstance（String）
	 */
	public static ObjectName getInstance(Object objectName) throws MalformedObjectNameException {
		if (objectName instanceof ObjectName) {
			return (ObjectName) objectName;
		}
		if (!(objectName instanceof String)) {
			throw new MalformedObjectNameException("Invalid ObjectName value type [" +
					objectName.getClass().getName() + "]: only ObjectName and String supported.");
		}
		return getInstance((String) objectName);
	}

	/**
	 * Retrieve the {@code ObjectName} instance corresponding to the supplied name.
	 * @param objectName the {@code ObjectName} in {@code String} format
	 * @return the {@code ObjectName} instance
	 * @throws MalformedObjectNameException in case of an invalid object name specification
	 * @see ObjectName#ObjectName(String)
	 * @see ObjectName#getInstance(String)
	 */
	/**
	 * 检索与提供的名称对应的{@code  ObjectName}实例。 
	 *  
	 * @param  objectName {{@code> String}格式的{@code  ObjectName} 
	 * @return  {@code  ObjectName}实例
	 * @throws  MalformedObjectNameException，如果对象名称规范无效<@请参见> ObjectName＃ObjectName（String）<@请参见> ObjectName＃getInstance（String）
	 */
	public static ObjectName getInstance(String objectName) throws MalformedObjectNameException {
		return ObjectName.getInstance(objectName);
	}

	/**
	 * Retrieve an {@code ObjectName} instance for the specified domain and a
	 * single property with the supplied key and value.
	 * @param domainName the domain name for the {@code ObjectName}
	 * @param key the key for the single property in the {@code ObjectName}
	 * @param value the value for the single property in the {@code ObjectName}
	 * @return the {@code ObjectName} instance
	 * @throws MalformedObjectNameException in case of an invalid object name specification
	 * @see ObjectName#ObjectName(String, String, String)
	 * @see ObjectName#getInstance(String, String, String)
	 */
	/**
	 * 检索指定域的{@code  ObjectName}实例和具有提供的键和值的单个属性。 
	 *  
	 * @param  domainName {@code  ObjectName}的域名
	 * @param 键{@code  ObjectName} 
	 * @param 中单个属性的键值{@code  ObjectName} 
	 * @return  {@code  ObjectName}实例
	 * @throws  MalformedObjectNameException在对象名称规范无效的情况下
	 * @see  ObjectName＃ObjectName（String，String，String）<
	 * @see > ObjectName＃getInstance（字符串，字符串，字符串）
	 */
	public static ObjectName getInstance(String domainName, String key, String value)
			throws MalformedObjectNameException {

		return ObjectName.getInstance(domainName, key, value);
	}

	/**
	 * Retrieve an {@code ObjectName} instance with the specified domain name
	 * and the supplied key/name properties.
	 * @param domainName the domain name for the {@code ObjectName}
	 * @param properties the properties for the {@code ObjectName}
	 * @return the {@code ObjectName} instance
	 * @throws MalformedObjectNameException in case of an invalid object name specification
	 * @see ObjectName#ObjectName(String, java.util.Hashtable)
	 * @see ObjectName#getInstance(String, java.util.Hashtable)
	 */
	/**
	 * 使用指定的域名和提供的键/名称属性检索{@code  ObjectName}实例。 
	 *  
	 * @param  domainName {@code  ObjectName}的域名
	 * @param 属性{{@@code> ObjectName}的属性
	 * @return  {@code  ObjectName}实例的属性
	 * @throws 如果对象名称规范无效，则为MalformedObjectNameException 
	 * @see  ObjectName＃ObjectName（String，java.util.Hashtable）
	 * @see  ObjectName＃getInstance（String，java.util.Hashtable）
	 */
	public static ObjectName getInstance(String domainName, Hashtable<String, String> properties)
			throws MalformedObjectNameException {

		return ObjectName.getInstance(domainName, properties);
	}

}
