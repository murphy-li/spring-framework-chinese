/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.export.metadata;

import java.lang.reflect.Method;

import org.springframework.lang.Nullable;

/**
 * Interface used by the {@code MetadataMBeanInfoAssembler} to
 * read source-level metadata from a managed resource's class.
 *
 * @author Rob Harrop
 * @author Jennifer Hickey
 * @since 1.2
 * @see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler#setAttributeSource
 * @see org.springframework.jmx.export.MBeanExporter#setAssembler
 */
/**
 * {@code  MetadataMBeanInfoAssembler}使用的接口从托管资源的类中读取源级元数据。 
 *  @author  Rob Harrop @author 詹妮弗·希基（Jennifer Hickey）@自1.2起
 * @see  org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler＃setAttributeSource
 */
public interface JmxAttributeSource {

	/**
	 * Implementations should return an instance of {@code ManagedResource}
	 * if the supplied {@code Class} has the appropriate metadata.
	 * Otherwise should return {@code null}.
	 * @param clazz the class to read the attribute data from
	 * @return the attribute, or {@code null} if not found
	 * @throws InvalidMetadataException in case of invalid attributes
	 */
	/**
	 * 如果提供的{@code 类}具有适当的元数据，则实现应返回{@code  ManagedResource}的实例。 
	 * 否则应返回{@code  null}。 
	 *  
	 * @param 吸引类从
	 * @return 属性中读取属性数据，如果找不到，则返回{@code  null} 
	 * @throws  InvalidMetadataException如果属性无效
	 */
	@Nullable
	ManagedResource getManagedResource(Class<?> clazz) throws InvalidMetadataException;

	/**
	 * Implementations should return an instance of {@code ManagedAttribute}
	 * if the supplied {@code Method} has the corresponding metadata.
	 * Otherwise should return {@code null}.
	 * @param method the method to read the attribute data from
	 * @return the attribute, or {@code null} if not found
	 * @throws InvalidMetadataException in case of invalid attributes
	 */
	/**
	 * 如果提供的{@code 方法}具有相应的元数据，则实现应返回{@code  ManagedAttribute}的实例。 
	 * 否则应返回{@code  null}。 
	 *  
	 * @param 方法从
	 * @return 属性读取属性数据的方法； 
	 * 如果找不到，则返回{@code  null} 
	 * @throws  InvalidMetadataException如果属性无效
	 */
	@Nullable
	ManagedAttribute getManagedAttribute(Method method) throws InvalidMetadataException;

	/**
	 * Implementations should return an instance of {@code ManagedMetric}
	 * if the supplied {@code Method} has the corresponding metadata.
	 * Otherwise should return {@code null}.
	 * @param method the method to read the attribute data from
	 * @return the metric, or {@code null} if not found
	 * @throws InvalidMetadataException in case of invalid attributes
	 */
	/**
	 * 如果提供的{@code 方法}具有相应的元数据，则实现应返回{@code  ManagedMetric}的实例。 
	 * 否则应返回{@code  null}。 
	 *  
	 * @param 方法：从
	 * @return 指标读取属性数据的方法； 
	 * 如果未找到，则返回{@code  null} 
	 * @throws  InvalidMetadataException（如果属性无效）
	 */
	@Nullable
	ManagedMetric getManagedMetric(Method method) throws InvalidMetadataException;

	/**
	 * Implementations should return an instance of {@code ManagedOperation}
	 * if the supplied {@code Method} has the corresponding metadata.
	 * Otherwise should return {@code null}.
	 * @param method the method to read the attribute data from
	 * @return the attribute, or {@code null} if not found
	 * @throws InvalidMetadataException in case of invalid attributes
	 */
	/**
	 * 如果提供的{@code 方法}具有相应的元数据，则实现应返回{@code  ManagedOperation}的实例。 
	 * 否则应返回{@code  null}。 
	 *  
	 * @param 方法从
	 * @return 属性读取属性数据的方法； 
	 * 如果找不到，则返回{@code  null} 
	 * @throws  InvalidMetadataException如果属性无效
	 */
	@Nullable
	ManagedOperation getManagedOperation(Method method) throws InvalidMetadataException;

	/**
	 * Implementations should return an array of {@code ManagedOperationParameter}
	 * if the supplied {@code Method} has the corresponding metadata. Otherwise
	 * should return an empty array if no metadata is found.
	 * @param method the {@code Method} to read the metadata from
	 * @return the parameter information.
	 * @throws InvalidMetadataException in the case of invalid attributes.
	 */
	/**
	 * 如果提供的{@code 方法}具有相应的元数据，则实现应返回{@code  ManagedOperationParameter}数组。 
	 * 否则，如果未找到元数据，则应返回一个空数组。 
	 *  
	 * @param 方法{@code 方法}从
	 * @return 参数信息中读取元数据。 
	 *  
	 * @throws  InvalidMetadataException（如果属性无效）。 
	 * 
	 */
	ManagedOperationParameter[] getManagedOperationParameters(Method method) throws InvalidMetadataException;

	/**
	 * Implementations should return an array of {@link ManagedNotification ManagedNotifications}
	 * if the supplied the {@code Class} has the corresponding metadata. Otherwise
	 * should return an empty array.
	 * @param clazz the {@code Class} to read the metadata from
	 * @return the notification information
	 * @throws InvalidMetadataException in the case of invalid metadata
	 */
	/**
	 * 如果提供的{@code 类}具有相应的元数据，则实现应返回{@link  ManagedNotification ManagedNotifications}的数组。 
	 * 否则应返回一个空数组。 
	 *  
	 * @param 鼓励{@code  Class}从
	 * @return 通知信息
	 * @throws  InvalidMetadataException中读取元数据（如果元数据无效）
	 */
	ManagedNotification[] getManagedNotifications(Class<?> clazz) throws InvalidMetadataException;



}
