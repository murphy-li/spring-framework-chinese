/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.export.notification;

import javax.management.Notification;

/**
 * Simple interface allowing Spring-managed MBeans to publish JMX notifications
 * without being aware of how those notifications are being transmitted to the
 * {@link javax.management.MBeanServer}.
 *
 * <p>Managed resources can access a {@code NotificationPublisher} by
 * implementing the {@link NotificationPublisherAware} interface. After a particular
 * managed resource instance is registered with the {@link javax.management.MBeanServer},
 * Spring will inject a {@code NotificationPublisher} instance into it if that
 * resource implements the {@link NotificationPublisherAware} interface.
 *
 * <p>Each managed resource instance will have a distinct instance of a
 * {@code NotificationPublisher} implementation. This instance will keep
 * track of all the {@link javax.management.NotificationListener NotificationListeners}
 * registered for a particular mananaged resource.
 *
 * <p>Any existing, user-defined MBeans should use standard JMX APIs for notification
 * publication; this interface is intended for use only by Spring-created MBeans.
 *
 * @author Rob Harrop
 * @since 2.0
 * @see NotificationPublisherAware
 * @see org.springframework.jmx.export.MBeanExporter
 */
/**
 * 简单的界面允许Spring托管的MBean发布JMX通知，而无需知道这些通知如何传输到{@link  javax.management.MBeanServer}。 
 *  <p>受管资源可以通过实现{@link  NotificationPublisherAware}接口来访问{@code  NotificationPublisher}。 
 * 在将特定的托管资源实例注册到{@link  javax.management.MBeanServer}之后，如果该资源实现了{@link  NotificationPublisherAware}接口，则Spring将向其中注入一个{@code  NotificationPublisher}实例。 
 *  <p>每个托管资源实例将具有{@code  NotificationPublisher}实现的不同实例。 
 * 该实例将跟踪为特定管理资源注册的所有{@link  javax.management.NotificationListener NotificationListeners}。 
 *  <p>任何现有的用户定义的MBean都应使用标准JMX API进行通知发布； 
 * 该接口仅适用于Spring创建的MBean。 
 *  @author  Rob Harrop @since 2.0起
 * @see  NotificationPublisherAware 
 * @see  org.springframework.jmx.export.MBeanExporter
 */
@FunctionalInterface
public interface NotificationPublisher {

	/**
	 * Send the specified {@link javax.management.Notification} to all registered
	 * {@link javax.management.NotificationListener NotificationListeners}.
	 * Managed resources are <strong>not</strong> responsible for managing the list
	 * of registered {@link javax.management.NotificationListener NotificationListeners};
	 * that is performed automatically.
	 * @param notification the JMX Notification to send
	 * @throws UnableToSendNotificationException if sending failed
	 */
	/**
	 * 将指定的{@link  javax.management.Notification}发送到所有已注册的{@link  javax.management.NotificationListener NotificationListeners}。 
	 * 托管资源<strong>不</ strong>不负责管理已注册的{@link  javax.management.NotificationListener NotificationListeners}的列表。 
	 * 这是自动执行的。 
	 *  
	 * @param 通知JMX通知发送
	 * @throws  UnableToSendNotificationException（如果发送失败）
	 */
	void sendNotification(Notification notification) throws UnableToSendNotificationException;

}
