/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.export.assembler;

import javax.management.Descriptor;
import javax.management.JMException;
import javax.management.modelmbean.ModelMBeanAttributeInfo;
import javax.management.modelmbean.ModelMBeanConstructorInfo;
import javax.management.modelmbean.ModelMBeanInfo;
import javax.management.modelmbean.ModelMBeanInfoSupport;
import javax.management.modelmbean.ModelMBeanNotificationInfo;
import javax.management.modelmbean.ModelMBeanOperationInfo;

import org.springframework.aop.support.AopUtils;
import org.springframework.jmx.support.JmxUtils;

/**
 * Abstract implementation of the {@code MBeanInfoAssembler} interface
 * that encapsulates the creation of a {@code ModelMBeanInfo} instance
 * but delegates the creation of metadata to subclasses.
 *
 * <p>This class offers two flavors of Class extraction from a managed bean
 * instance: {@link #getTargetClass}, extracting the target class behind
 * any kind of AOP proxy, and {@link #getClassToExpose}, returning the
 * class or interface that will be searched for annotations and exposed
 * to the JMX runtime.
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 1.2
 */
/**
 * {@code  MBeanInfoAssembler}接口的抽象实现，该实现封装了{@code  ModelMBeanInfo}实例的创建，但将元数据的创建委托给子类。 
 *  <p>该类提供了两种从托管bean实例提取类的方法：{@link  #getTargetClass}，在任何类型的AOP代理后面提取目标类，以及{@link  #getClassToExpose}，返回该类或将在其中搜索注释并向JMX运行时公开的接口。 
 *  @author  Rob Harrop @author  Juergen Hoeller @始于1.2
 */
public abstract class AbstractMBeanInfoAssembler implements MBeanInfoAssembler {

	/**
	 * Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all
	 * JMX implementations and populates the metadata through calls to the subclass.
	 * @param managedBean the bean that will be exposed (might be an AOP proxy)
	 * @param beanKey the key associated with the managed bean
	 * @return the populated ModelMBeanInfo instance
	 * @throws JMException in case of errors
	 * @see #getDescription(Object, String)
	 * @see #getAttributeInfo(Object, String)
	 * @see #getConstructorInfo(Object, String)
	 * @see #getOperationInfo(Object, String)
	 * @see #getNotificationInfo(Object, String)
	 * @see #populateMBeanDescriptor(javax.management.Descriptor, Object, String)
	 */
	/**
	 * 创建所有JMX实现随附的{@code  ModelMBeanInfoSupport}类的实例，并通过对子类的调用来填充元数据。 
	 *  
	 * @param  managedBean将要公开的bean（可能是AOP代理）
	 * @param  beanKey与托管bean关联的键
	 * @return 填充的ModelMBeanInfo实例
	 * @throws  JMException，如果出现错误<
	 * @see > #getDescription（Object，String）
	 * @see  #getAttributeInfo（Object，String）
	 * @see  #getConstructorInfo（Object，String）
	 * @see  #getOperationInfo（Object，String）
	 * @see  #getNotificationInfo（Object，字符串）
	 * @see  #populateMBeanDescriptor（javax.management.Descriptor，Object，String）
	 */
	@Override
	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {
		checkManagedBean(managedBean);
		ModelMBeanInfo info = new ModelMBeanInfoSupport(
				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),
				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),
				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey));
		Descriptor desc = info.getMBeanDescriptor();
		populateMBeanDescriptor(desc, managedBean, beanKey);
		info.setMBeanDescriptor(desc);
		return info;
	}

	/**
	 * Check the given bean instance, throwing an IllegalArgumentException
	 * if it is not eligible for exposure with this assembler.
	 * <p>Default implementation is empty, accepting every bean instance.
	 * @param managedBean the bean that will be exposed (might be an AOP proxy)
	 * @throws IllegalArgumentException the bean is not valid for exposure
	 */
	/**
	 * 检查给定的bean实例，如果不适合使用此汇编器公开，则抛出IllegalArgumentException。 
	 *  <p>默认实现为空，接受每个bean实例。 
	 *  
	 * @param  managedBean将要公开的bean（可能是AOP代理）
	 * @throws  IllegalArgumentException该bean对公开无效
	 */
	protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {
	}

	/**
	 * Return the actual bean class of the given bean instance.
	 * This is the class exposed to description-style JMX properties.
	 * <p>Default implementation returns the target class for an AOP proxy,
	 * and the plain bean class else.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @return the bean class to expose
	 * @see org.springframework.aop.support.AopUtils#getTargetClass(Object)
	 */
	/**
	 * 返回给定bean实例的实际bean类。 
	 * 这是公开给描述样式的JMX属性的类。 
	 *  <p>默认实现返回AOP代理的目标类，否则返回普通bean类。 
	 *  
	 * @param  managedBean Bean实例（可能是AOP代理）
	 * @return  Bean类以公开
	 * @see  org.springframework.aop.support.AopUtils＃getTargetClass（Object）
	 */
	protected Class<?> getTargetClass(Object managedBean) {
		return AopUtils.getTargetClass(managedBean);
	}

	/**
	 * Return the class or interface to expose for the given bean.
	 * This is the class that will be searched for attributes and operations
	 * (for example, checked for annotations).
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @return the bean class to expose
	 * @see JmxUtils#getClassToExpose(Object)
	 */
	/**
	 * 返回类或接口以公开给定的bean。 
	 * 这是将搜索属性和操作（例如，检查注释）的类。 
	 *  
	 * @param  managedBean bean实例（可能是AOP代理）
	 * @return  bean类以公开
	 * @see  JmxUtils＃getClassToExpose（Object）
	 */
	protected Class<?> getClassToExpose(Object managedBean) {
		return JmxUtils.getClassToExpose(managedBean);
	}

	/**
	 * Return the class or interface to expose for the given bean class.
	 * This is the class that will be searched for attributes and operations
	 * @param beanClass the bean class (might be an AOP proxy class)
	 * @return the bean class to expose
	 * @see JmxUtils#getClassToExpose(Class)
	 */
	/**
	 * 返回该类或接口以公开给定的bean类。 
	 * 这是将搜索属性和操作的类
	 * @param  beanClass bean类（可能是AOP代理类）
	 * @return  bean类以公开
	 * @see  JmxUtils＃getClassToExpose（Class）
	 */
	protected Class<?> getClassToExpose(Class<?> beanClass) {
		return JmxUtils.getClassToExpose(beanClass);
	}

	/**
	 * Get the class name of the MBean resource.
	 * <p>Default implementation returns a simple description for the MBean
	 * based on the class name.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @return the MBean description
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的类名。 
	 *  <p>默认实现根据类名称返回MBean的简单描述。 
	 *  
	 * @param  managedBean Bean实例（可能是AOP代理）。 
	 * 发生错误时的JMException
	 */
	protected String getClassName(Object managedBean, String beanKey) throws JMException {
		return getTargetClass(managedBean).getName();
	}

	/**
	 * Get the description of the MBean resource.
	 * <p>Default implementation returns a simple description for the MBean
	 * based on the class name.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的描述。 
	 *  <p>默认实现根据类名称返回MBean的简单描述。 
	 *  
	 * @param  managedBean bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中的MBean关联的键
	 * @throws  JMException发生错误的情况
	 */
	protected String getDescription(Object managedBean, String beanKey) throws JMException {
		String targetClassName = getTargetClass(managedBean).getName();
		if (AopUtils.isAopProxy(managedBean)) {
			return "Proxy for " + targetClassName;
		}
		return targetClassName;
	}

	/**
	 * Called after the {@code ModelMBeanInfo} instance has been constructed but
	 * before it is passed to the {@code MBeanExporter}.
	 * <p>Subclasses can implement this method to add additional descriptors to the
	 * MBean metadata. Default implementation is empty.
	 * @param descriptor the {@code Descriptor} for the MBean resource.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @throws JMException in case of errors
	 */
	/**
	 * 在构造{@code  ModelMBeanInfo}实例之后但在将其传递给{@code  MBeanExporter}之前调用。 
	 *  <p>子类可以实现此方法以向MBean元数据添加其他描述符。 
	 * 默认实现为空。 
	 *  
	 * @param 描述符是MBean资源的{@code 描述符}。 
	 *  
	 * @param  managedBean bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中的MBean关联的键
	 * @throws  JMException发生错误的情况
	 */
	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)
			throws JMException {
	}

	/**
	 * Get the constructor metadata for the MBean resource. Subclasses should implement
	 * this method to return the appropriate metadata for all constructors that should
	 * be exposed in the management interface for the managed resource.
	 * <p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @return the constructor metadata
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的构造函数元数据。 
	 * 子类应实现此方法，以为应该在托管资源的管理接口中公开的所有构造函数返回适当的元数据。 
	 *  <p>默认实现返回{@code  ModelMBeanConstructorInfo}的空数组。 
	 *  
	 * @param  ManagedBean Bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中与MBean关联的键
	 * @return 构造函数元数据
	 * @throws 发生错误时的JMException
	 */
	protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)
			throws JMException {
		return new ModelMBeanConstructorInfo[0];
	}

	/**
	 * Get the notification metadata for the MBean resource. Subclasses should implement
	 * this method to return the appropriate metadata for all notifications that should
	 * be exposed in the management interface for the managed resource.
	 * <p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @return the notification metadata
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的通知元数据。 
	 * 子类应实现此方法，以为应该在托管资源的管理接口中公开的所有通知返回适当的元数据。 
	 *  <p>默认实现返回一个{@code  ModelMBeanNotificationInfo}的空数组。 
	 *  
	 * @param  ManagedBean Bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中与MBean关联的密钥
	 * @return 通知元数据
	 * @throws 发生错误时的JMException
	 */
	protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)
			throws JMException {
		return new ModelMBeanNotificationInfo[0];
	}


	/**
	 * Get the attribute metadata for the MBean resource. Subclasses should implement
	 * this method to return the appropriate metadata for all the attributes that should
	 * be exposed in the management interface for the managed resource.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @return the attribute metadata
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的属性元数据。 
	 * 子类应实现此方法，以返回应在托管资源的管理接口中公开的所有属性的适当元数据。 
	 *  
	 * @param  ManagedBean Bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中与MBean关联的键
	 * @return 属性元数据
	 * @throws 发生错误时的JMException
	 */
	protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)
			throws JMException;

	/**
	 * Get the operation metadata for the MBean resource. Subclasses should implement
	 * this method to return the appropriate metadata for all operations that should
	 * be exposed in the management interface for the managed resource.
	 * @param managedBean the bean instance (might be an AOP proxy)
	 * @param beanKey the key associated with the MBean in the beans map
	 * of the {@code MBeanExporter}
	 * @return the operation metadata
	 * @throws JMException in case of errors
	 */
	/**
	 * 获取MBean资源的操作元数据。 
	 * 子类应实现此方法，以为应该在托管资源的管理接口中公开的所有操作返回适当的元数据。 
	 *  
	 * @param  ManagedBean Bean实例（可能是AOP代理）
	 * @param  beanKey与{@code  MBeanExporter}的bean映射中与MBean关联的键
	 * @return 操作元数据
	 * @throws 发生错误时的JMException
	 */
	protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)
			throws JMException;

}
