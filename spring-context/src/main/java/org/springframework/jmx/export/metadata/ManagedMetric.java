/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.export.metadata;

import org.springframework.jmx.support.MetricType;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Metadata that indicates to expose a given bean property as a JMX attribute,
 * with additional descriptor properties that indicate that the attribute is a
 * metric. Only valid when used on a JavaBean getter.
 *
 * @author Jennifer Hickey
 * @since 3.0
 * @see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler
 */
/**
 * 指示将给定bean属性公开为JMX属性的元数据，以及指示该属性为度量标准的其他描述符属性。 
 * 仅在JavaBean getter上使用时有效。 
 *  @author 詹妮弗·希基（Jennifer Hickey）@从3.0开始
 * @see  org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler
 */
public class ManagedMetric extends AbstractJmxAttribute {

	@Nullable
	private String category;

	@Nullable
	private String displayName;

	private MetricType metricType = MetricType.GAUGE;

	private int persistPeriod = -1;

	@Nullable
	private String persistPolicy;

	@Nullable
	private String unit;


	/**
	 * The category of this metric (ex. throughput, performance, utilization).
	 */
	/**
	 * 此指标的类别（例如，吞吐量，性能，利用率）。 
	 * 
	 */
	public void setCategory(@Nullable String category) {
		this.category = category;
	}

	/**
	 * The category of this metric (ex. throughput, performance, utilization).
	 */
	/**
	 * 此指标的类别（例如，吞吐量，性能，利用率）。 
	 * 
	 */
	@Nullable
	public String getCategory() {
		return this.category;
	}

	/**
	 * A display name for this metric.
	 */
	/**
	 * 该指标的显示名称。 
	 * 
	 */
	public void setDisplayName(@Nullable String displayName) {
		this.displayName = displayName;
	}

	/**
	 * A display name for this metric.
	 */
	/**
	 * 该指标的显示名称。 
	 * 
	 */
	@Nullable
	public String getDisplayName() {
		return this.displayName;
	}

	/**
	 * A description of how this metric's values change over time.
	 */
	/**
	 * 有关此度量标准值如何随时间变化的描述。 
	 * 
	 */
	public void setMetricType(MetricType metricType) {
		Assert.notNull(metricType, "MetricType must not be null");
		this.metricType = metricType;
	}

	/**
	 * A description of how this metric's values change over time.
	 */
	/**
	 * 有关此度量标准值如何随时间变化的描述。 
	 * 
	 */
	public MetricType getMetricType() {
		return this.metricType;
	}

	/**
	 * The persist period for this metric.
	 */
	/**
	 * 此指标的持续时间。 
	 * 
	 */
	public void setPersistPeriod(int persistPeriod) {
		this.persistPeriod = persistPeriod;
	}

	/**
	 * The persist period for this metric.
	 */
	/**
	 * 此指标的持续时间。 
	 * 
	 */
	public int getPersistPeriod() {
		return this.persistPeriod;
	}

	/**
	 * The persist policy for this metric.
	 */
	/**
	 * 此指标的持久策略。 
	 * 
	 */
	public void setPersistPolicy(@Nullable String persistPolicy) {
		this.persistPolicy = persistPolicy;
	}

	/**
	 * The persist policy for this metric.
	 */
	/**
	 * 此指标的持久策略。 
	 * 
	 */
	@Nullable
	public String getPersistPolicy() {
		return this.persistPolicy;
	}

	/**
	 * The expected unit of measurement values.
	 */
	/**
	 * 预期的测量值单位。 
	 * 
	 */
	public void setUnit(@Nullable String unit) {
		this.unit = unit;
	}

	/**
	 * The expected unit of measurement values.
	 */
	/**
	 * 预期的测量值单位。 
	 * 
	 */
	@Nullable
	public String getUnit() {
		return this.unit;
	}

}
