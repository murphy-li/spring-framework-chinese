/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jmx.export.naming;

import java.util.Hashtable;

import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;

import org.springframework.jmx.support.ObjectNameManager;
import org.springframework.lang.Nullable;
import org.springframework.util.ClassUtils;
import org.springframework.util.ObjectUtils;

/**
 * An implementation of the {@code ObjectNamingStrategy} interface that
 * creates a name based on the identity of a given instance.
 *
 * <p>The resulting {@code ObjectName} will be in the form
 * <i>package</i>:class=<i>class name</i>,hashCode=<i>identity hash (in hex)</i>
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 1.2
 */
/**
 * {@code  ObjectNamingStrategy}接口的实现，该实现基于给定实例的身份创建名称。 
 *  <p>生成的{@code  ObjectName}的格式为<i>包</ i>：class = <i>类名</ i>，hashCode = <i>身份哈希（以十六进制表示）< / i> @author  Rob Harrop @author  Juergen Hoeller @始于1.2
 */
public class IdentityNamingStrategy implements ObjectNamingStrategy {

	/**
	 * The type key.
	 */
	/**
	 * 类型键。 
	 * 
	 */
	public static final String TYPE_KEY = "type";

	/**
	 * The hash code key.
	 */
	/**
	 * 哈希码密钥。 
	 * 
	 */
	public static final String HASH_CODE_KEY = "hashCode";


	/**
	 * Returns an instance of {@code ObjectName} based on the identity
	 * of the managed resource.
	 */
	/**
	 * 根据托管资源的身份返回{@code  ObjectName}的实例。 
	 * 
	 */
	@Override
	public ObjectName getObjectName(Object managedBean, @Nullable String beanKey) throws MalformedObjectNameException {
		String domain = ClassUtils.getPackageName(managedBean.getClass());
		Hashtable<String, String> keys = new Hashtable<>();
		keys.put(TYPE_KEY, ClassUtils.getShortName(managedBean.getClass()));
		keys.put(HASH_CODE_KEY, ObjectUtils.getIdentityHexString(managedBean));
		return ObjectNameManager.getInstance(domain, keys);
	}

}
