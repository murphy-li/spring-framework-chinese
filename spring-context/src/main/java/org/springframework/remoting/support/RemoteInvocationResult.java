/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.remoting.support;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;

import org.springframework.lang.Nullable;

/**
 * Encapsulates a remote invocation result, holding a result value or an exception.
 * Used for HTTP-based serialization invokers.
 *
 * <p>This is an SPI class, typically not used directly by applications.
 * Can be subclassed for additional invocation parameters.
 *
 * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed
 * for use with standard Java serialization as well as JavaBean-style serialization.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see RemoteInvocation
 */
/**
 * 封装一个远程调用结果，保存结果值或异常。 
 * 用于基于HTTP的序列化调用程序。 
 *  <p>这是SPI类，通常不被应用程序直接使用。 
 * 可以子类化以获取其他调用参数。 
 *  <p> {@link  RemoteInvocation}和{@link  RemoteInvocationResult}都设计用于标准Java序列化以及JavaBean样式的序列化。 
 *  @author  Juergen Hoeller自1.1起
 * @see  RemoteInvocation
 */
public class RemoteInvocationResult implements Serializable {

	/** Use serialVersionUID from Spring 1.1 for interoperability. */
	/**
	 * 使用Spring 1.1中的serialVersionUID来实现互操作性。 
	 * 
	 */
	private static final long serialVersionUID = 2138555143707773549L;


	@Nullable
	private Object value;

	@Nullable
	private Throwable exception;


	/**
	 * Create a new RemoteInvocationResult for the given result value.
	 * @param value the result value returned by a successful invocation
	 * of the target method
	 */
	/**
	 * 为给定的结果值创建一个新的RemoteInvocationResult。 
	 *  
	 * @param 值成功调用目标方法返回的结果值
	 */
	public RemoteInvocationResult(@Nullable Object value) {
		this.value = value;
	}

	/**
	 * Create a new RemoteInvocationResult for the given exception.
	 * @param exception the exception thrown by an unsuccessful invocation
	 * of the target method
	 */
	/**
	 * 为给定的异常创建一个新的RemoteInvocationResult。 
	 *  
	 * @param 异常由目标方法的未成功调用引发的异常
	 */
	public RemoteInvocationResult(@Nullable Throwable exception) {
		this.exception = exception;
	}

	/**
	 * Create a new RemoteInvocationResult for JavaBean-style deserialization
	 * (e.g. with Jackson).
	 * @see #setValue
	 * @see #setException
	 */
	/**
	 * 为JavaBean样式的反序列化创建一个新的RemoteInvocationResult（例如，使用Jackson）。 
	 *  
	 * @see  #setValue 
	 * @see  #setException
	 */
	public RemoteInvocationResult() {
	}


	/**
	 * Set the result value returned by a successful invocation of the
	 * target method, if any.
	 * <p>This setter is intended for JavaBean-style deserialization.
	 * Use {@link #RemoteInvocationResult(Object)} otherwise.
	 * @see #RemoteInvocationResult()
	 */
	/**
	 * 设置成功调用目标方法返回的结果值（如果有）。 
	 *  <p>此设置程序用于JavaBean风格的反序列化。 
	 * 否则，请使用{@link  #RemoteInvocationResult（Object）}。 
	 *  
	 * @see  #RemoteInvocationResult（）
	 */
	public void setValue(@Nullable Object value) {
		this.value = value;
	}

	/**
	 * Return the result value returned by a successful invocation
	 * of the target method, if any.
	 * @see #hasException
	 */
	/**
	 * 返回通过成功调用目标方法返回的结果值（如果有）。 
	 *  
	 * @see  #hasException
	 */
	@Nullable
	public Object getValue() {
		return this.value;
	}

	/**
	 * Set the exception thrown by an unsuccessful invocation of the
	 * target method, if any.
	 * <p>This setter is intended for JavaBean-style deserialization.
	 * Use {@link #RemoteInvocationResult(Throwable)} otherwise.
	 * @see #RemoteInvocationResult()
	 */
	/**
	 * 设置因未成功调用目标方法而引发的异常。 
	 *  <p>此设置程序用于JavaBean风格的反序列化。 
	 * 否则，请使用{@link  #RemoteInvocationResult（Throwable）}。 
	 *  
	 * @see  #RemoteInvocationResult（）
	 */
	public void setException(@Nullable Throwable exception) {
		this.exception = exception;
	}

	/**
	 * Return the exception thrown by an unsuccessful invocation
	 * of the target method, if any.
	 * @see #hasException
	 */
	/**
	 * 如果目标方法调用失败，则返回抛出的异常。 
	 *  
	 * @see  #hasException
	 */
	@Nullable
	public Throwable getException() {
		return this.exception;
	}

	/**
	 * Return whether this invocation result holds an exception.
	 * If this returns {@code false}, the result value applies
	 * (even if it is {@code null}).
	 * @see #getValue
	 * @see #getException
	 */
	/**
	 * 返回此调用结果是否包含异常。 
	 * 如果返回{@code  false}，那么将应用结果值（即使它是{@code  null}）。 
	 *  
	 * @see  #getValue 
	 * @see  #getException
	 */
	public boolean hasException() {
		return (this.exception != null);
	}

	/**
	 * Return whether this invocation result holds an InvocationTargetException,
	 * thrown by an invocation of the target method itself.
	 * @see #hasException()
	 */
	/**
	 * 返回此调用结果是否包含由目标方法本身的调用引发的InvocationTargetException。 
	 *  
	 * @see  #hasException（）
	 */
	public boolean hasInvocationTargetException() {
		return (this.exception instanceof InvocationTargetException);
	}


	/**
	 * Recreate the invocation result, either returning the result value
	 * in case of a successful invocation of the target method, or
	 * rethrowing the exception thrown by the target method.
	 * @return the result value, if any
	 * @throws Throwable the exception, if any
	 */
	/**
	 * 重新创建调用结果，或者在成功调用目标方法的情况下返回结果值，或者重新抛出目标方法抛出的异常。 
	 *  
	 * @return 结果值（如果有）
	 * @throws 可抛出异常（如果有）
	 */
	@Nullable
	public Object recreate() throws Throwable {
		if (this.exception != null) {
			Throwable exToThrow = this.exception;
			if (this.exception instanceof InvocationTargetException) {
				exToThrow = ((InvocationTargetException) this.exception).getTargetException();
			}
			RemoteInvocationUtils.fillInClientStackTraceIfPossible(exToThrow);
			throw exToThrow;
		}
		else {
			return this.value;
		}
	}

}
