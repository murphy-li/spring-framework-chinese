/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.remoting.support;

import org.aopalliance.intercept.MethodInvocation;

/**
 * Abstract base class for remote service accessors that are based
 * on serialization of {@link RemoteInvocation} objects.
 *
 * Provides a "remoteInvocationFactory" property, with a
 * {@link DefaultRemoteInvocationFactory} as default strategy.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see #setRemoteInvocationFactory
 * @see RemoteInvocation
 * @see RemoteInvocationFactory
 * @see DefaultRemoteInvocationFactory
 */
/**
 * 基于{@link  RemoteInvocation}对象的序列化的远程服务访问器的抽象基类。 
 * 提供"remoteInvocationFactory"属性，并将{@link  DefaultRemoteInvocationFactory}作为默认策略。 
 *  @author  Juergen Hoeller @since 1.1起
 * @see  #setRemoteInvocationFactory 
 * @see  RemoteInvocation 
 * @see  RemoteInvocationFactory 
 * @see  DefaultRemoteInvocationFactory
 */
public abstract class RemoteInvocationBasedAccessor extends UrlBasedRemoteAccessor {

	private RemoteInvocationFactory remoteInvocationFactory = new DefaultRemoteInvocationFactory();


	/**
	 * Set the RemoteInvocationFactory to use for this accessor.
	 * Default is a {@link DefaultRemoteInvocationFactory}.
	 * <p>A custom invocation factory can add further context information
	 * to the invocation, for example user credentials.
	 */
	/**
	 * 设置要用于此访问器的RemoteInvocationFactory。 
	 * 默认值为{@link  DefaultRemoteInvocationFactory}。 
	 *  <p>自定义调用工厂可以向调用添加其他上下文信息，例如用户凭据。 
	 * 
	 */
	public void setRemoteInvocationFactory(RemoteInvocationFactory remoteInvocationFactory) {
		this.remoteInvocationFactory =
				(remoteInvocationFactory != null ? remoteInvocationFactory : new DefaultRemoteInvocationFactory());
	}

	/**
	 * Return the RemoteInvocationFactory used by this accessor.
	 */
	/**
	 * 返回此访问器使用的RemoteInvocationFactory。 
	 * 
	 */
	public RemoteInvocationFactory getRemoteInvocationFactory() {
		return this.remoteInvocationFactory;
	}

	/**
	 * Create a new RemoteInvocation object for the given AOP method invocation.
	 * <p>The default implementation delegates to the configured
	 * {@link #setRemoteInvocationFactory RemoteInvocationFactory}.
	 * This can be overridden in subclasses in order to provide custom RemoteInvocation
	 * subclasses, containing additional invocation parameters (e.g. user credentials).
	 * <p>Note that it is preferable to build a custom RemoteInvocationFactory
	 * as a reusable strategy, instead of overriding this method.
	 * @param methodInvocation the current AOP method invocation
	 * @return the RemoteInvocation object
	 * @see RemoteInvocationFactory#createRemoteInvocation
	 */
	/**
	 * 为给定的AOP方法调用创建一个新的RemoteInvocation对象。 
	 *  <p>默认实现将委派给已配置的{@link  #setRemoteInvocationFactory RemoteInvocationFactory}。 
	 * 为了提供包含附加调用参数（例如，用户凭据）的自定义RemoteInvocation子类，可以在子类中重写此方法。 
	 *  <p>请注意，最好将自定义RemoteInvocationFactory构建为可重用策略，而不是重写此方法。 
	 *  
	 * @param  methodInvocation当前AOP方法调用
	 * @return  RemoteInvocation对象
	 * @see  RemoteInvocationFactory＃createRemoteInvocation
	 */
	protected RemoteInvocation createRemoteInvocation(MethodInvocation methodInvocation) {
		return getRemoteInvocationFactory().createRemoteInvocation(methodInvocation);
	}

	/**
	 * Recreate the invocation result contained in the given RemoteInvocationResult object.
	 * <p>The default implementation calls the default {@code recreate()} method.
	 * This can be overridden in subclass to provide custom recreation, potentially
	 * processing the returned result object.
	 * @param result the RemoteInvocationResult to recreate
	 * @return a return value if the invocation result is a successful return
	 * @throws Throwable if the invocation result is an exception
	 * @see RemoteInvocationResult#recreate()
	 */
	/**
	 * 重新创建包含在给定RemoteInvocationResult对象中的调用结果。 
	 *  <p>默认实现调用默认的{@code  recreate（）}方法。 
	 * 可以在子类中重写此方法以提供自定义重新创建，从而有可能处理返回的结果对象。 
	 *  
	 * @param 导致RemoteInvocationResult重新创建
	 * @return 如果调用结果是成功的返回，则返回值
	 * @throws 如果调用结果是异常，则可抛出
	 * @see  RemoteInvocationResult＃recreate（）
	 */
	protected Object recreateRemoteInvocationResult(RemoteInvocationResult result) throws Throwable {
		return result.recreate();
	}

}
