/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.remoting;

import org.springframework.core.NestedRuntimeException;

/**
 * Generic remote access exception. A service proxy for any remoting
 * protocol should throw this exception or subclasses of it, in order
 * to transparently expose a plain Java business interface.
 *
 * <p>When using conforming proxies, switching the actual remoting protocol
 * e.g. from Hessian does not affect client code. Clients work with a plain
 * natural Java business interface that the service exposes. A client object
 * simply receives an implementation for the interface that it needs via a
 * bean reference, like it does for a local bean as well.
 *
 * <p>A client may catch RemoteAccessException if it wants to, but as
 * remote access errors are typically unrecoverable, it will probably let
 * such exceptions propagate to a higher level that handles them generically.
 * In this case, the client code doesn't show any signs of being involved in
 * remote access, as there aren't any remoting-specific dependencies.
 *
 * <p>Even when switching from a remote service proxy to a local implementation
 * of the same interface, this amounts to just a matter of configuration. Obviously,
 * the client code should be somewhat aware that it <i>might be working</i>
 * against a remote service, for example in terms of repeated method calls that
 * cause unnecessary roundtrips etc. However, it doesn't have to be aware whether
 * it is <i>actually working</i> against a remote service or a local implementation,
 * or with which remoting protocol it is working under the hood.
 *
 * @author Juergen Hoeller
 * @since 14.05.2003
 */
/**
 * 通用远程访问异常。 
 * 任何远程协议的服务代理都应抛出此异常或其子类，以便透明地公开纯Java业务接口。 
 *  <p>使用一致代理时，请切换实际的远程协议，例如来自Hessian的代码不会影响客户端代码。 
 * 客户端使用服务公开的自然Java业务接口。 
 * 客户端对象只是通过Bean引用接收其所需接口的实现，就像本地Bean一样。 
 *  <p>如果愿意，客户端可以捕获RemoteAccessException，但是由于远程访问错误通常是不可恢复的，因此它可能会使此类异常传播到更高级别，以一般方式处理它们。 
 * 在这种情况下，客户端代码不会显示任何参与远程访问的迹象，因为没有任何特定于远程的依赖关系。 
 *  <p>即使从远程服务代理切换到同一接口的本地实现，这也仅是配置问题。 
 * 显然，客户端代码应该稍微意识到它可能针对远程服务工作，例如，在反复的方法调用中会导致不必要的往返等。 
 * 但是，不必知道无论它实际上是针对远程服务还是针对本地实现工作，还是它在后台使用哪种远程协议。 
 *  @author  Juergen Hoeller @2003年5月14日
 */
public class RemoteAccessException extends NestedRuntimeException {

	/** Use serialVersionUID from Spring 1.2 for interoperability. */
	/**
	 * 使用Spring 1.2中的serialVersionUID来实现互操作性。 
	 * 
	 */
	private static final long serialVersionUID = -4906825139312227864L;


	/**
	 * Constructor for RemoteAccessException.
	 * @param msg the detail message
	 */
	/**
	 * RemoteAccessException的构造方法。 
	 *  
	 * @param  msg详细信息
	 */
	public RemoteAccessException(String msg) {
		super(msg);
	}

	/**
	 * Constructor for RemoteAccessException.
	 * @param msg the detail message
	 * @param cause the root cause (usually from using an underlying
	 * remoting API such as RMI)
	 */
	/**
	 * RemoteAccessException的构造方法。 
	 *  
	 * @param  msg详细消息
	 * @param 引起根本原因（通常是由于使用诸如RMI之类的基础远程API）
	 */
	public RemoteAccessException(String msg, Throwable cause) {
		super(msg, cause);
	}

}
