/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.stereotype;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.core.annotation.AliasFor;

/**
 * Indicates that an annotated class is a "Repository", originally defined by
 * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,
 * retrieval, and search behavior which emulates a collection of objects".
 *
 * <p>Teams implementing traditional Java EE patterns such as "Data Access Object"
 * may also apply this stereotype to DAO classes, though care should be taken to
 * understand the distinction between Data Access Object and DDD-style repositories
 * before doing so. This annotation is a general-purpose stereotype and individual teams
 * may narrow their semantics and use as appropriate.
 *
 * <p>A class thus annotated is eligible for Spring
 * {@link org.springframework.dao.DataAccessException DataAccessException} translation
 * when used in conjunction with a {@link
 * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor
 * PersistenceExceptionTranslationPostProcessor}. The annotated class is also clarified as
 * to its role in the overall application architecture for the purpose of tooling,
 * aspects, etc.
 *
 * <p>As of Spring 2.5, this annotation also serves as a specialization of
 * {@link Component @Component}, allowing for implementation classes to be autodetected
 * through classpath scanning.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 2.0
 * @see Component
 * @see Service
 * @see org.springframework.dao.DataAccessException
 * @see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor
 */
/**
 * 指示带注释的类是"存储库"，最初由Domain-Driven Design（Evans，2003）定义为"一种封装存储，检索和搜索行为的机制，该机制模仿对象的集合"。 
 *  <p>实现诸如"数据访问对象"之类的传统Java EE模式的团队也可以将此构造型应用于DAO类，尽管在这样做之前应注意理解数据访问对象和DDD样式存储库之间的区别。 
 * 此注释是通用的构造型，各个团队可以缩小其语义并适当使用。 
 *  <p>如此注释的类与{@link  org.springframework.dao.annotation.PersistenceExceptionTranslationPostPostor PersistenceExceptionTranslationPostProcessor}结合使用时，可以进行Spring {@link  org.springframework.dao.DataAccessException DataAccessException}翻译。 
 * 注释的类还明确了其在整体应用程序体系结构中出于工具，方面等目的的作用。 
 * <p>从Spring 2.5开始，此注释还用作{@link  Component @Component}的特殊化。 
 *  ，允许通过类路径扫描自动检测实现类。 
 *  @author  Rod Johnson @author  Juergen Hoeller @since 2.0起
 * @see 组件
 * @see 服务
 * @see  org.springframework.dao.DataAccessException 
 * @see  org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor
 */
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface Repository {

	/**
	 * The value may indicate a suggestion for a logical component name,
	 * to be turned into a Spring bean in case of an autodetected component.
	 * @return the suggested component name, if any (or empty String otherwise)
	 */
	/**
	 * 该值可能表明建议使用逻辑组件名称，以在自动检测到组件的情况下将其转换为Spring bean。 
	 *  
	 * @return 建议的组件名称（如果有）（否则为空String）
	 */
	@AliasFor(annotation = Component.class)
	String value() default "";

}
