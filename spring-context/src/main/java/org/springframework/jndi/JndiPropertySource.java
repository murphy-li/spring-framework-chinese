/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jndi;

import javax.naming.NamingException;

import org.springframework.core.env.PropertySource;
import org.springframework.lang.Nullable;

/**
 * {@link PropertySource} implementation that reads properties from an underlying Spring
 * {@link JndiLocatorDelegate}.
 *
 * <p>By default, the underlying {@code JndiLocatorDelegate} will be configured with its
 * {@link JndiLocatorDelegate#setResourceRef(boolean) "resourceRef"} property set to
 * {@code true}, meaning that names looked up will automatically be prefixed with
 * "java:comp/env/" in alignment with published
 * <a href="https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html">JNDI
 * naming conventions</a>. To override this setting or to change the prefix, manually
 * configure a {@code JndiLocatorDelegate} and provide it to one of the constructors here
 * that accepts it. The same applies when providing custom JNDI properties. These should
 * be specified using {@link JndiLocatorDelegate#setJndiEnvironment(java.util.Properties)}
 * prior to construction of the {@code JndiPropertySource}.
 *
 * <p>Note that {@link org.springframework.web.context.support.StandardServletEnvironment
 * StandardServletEnvironment} includes a {@code JndiPropertySource} by default, and any
 * customization of the underlying {@link JndiLocatorDelegate} may be performed within an
 * {@link org.springframework.context.ApplicationContextInitializer
 * ApplicationContextInitializer} or {@link org.springframework.web.WebApplicationInitializer
 * WebApplicationInitializer}.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @see JndiLocatorDelegate
 * @see org.springframework.context.ApplicationContextInitializer
 * @see org.springframework.web.WebApplicationInitializer
 * @see org.springframework.web.context.support.StandardServletEnvironment
 */
/**
 * 从底层Spring {@link  JndiLocatorDelegate}读取属性的{@link  PropertySource}实现。 
 *  <p>默认情况下，将使用其{@link  JndiLocatorDelegate＃setResourceRef（boolean）"resourceRef"}属性设置为{@code  true}来配置基础{@code  JndiLocatorDelegate} up会自动以"java：comp / env /"作为前缀，以与已发布的<a href="https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html"> JNDI命名保持一致约定</a>。 
 * 要覆盖此设置或更改前缀，请手动配置{@code  JndiLocatorDelegate}并将其提供给此处接受它的构造函数之一。 
 * 提供自定义JNDI属性时，也是如此。 
 * 在构造{@code  JndiPropertySource}之前，应使用{@link  JndiLocatorDelegate＃setJndiEnvironment（java.util.Properties）}指定这些属性。 
 *  <p>请注意，默认情况下，{@link  org.springframework.web.context.support.StandardServletEnvironment StandardServletEnvironment}包括一个{@code  JndiPropertySource}，并且对底层{@link  JndiLocatorDelegate}的任何自定义在{@link  org.springframework.context.ApplicationContextInitializer ApplicationContextInitializer}或{@link  org.springframework.web.WebApplicationInitializer WebApplicationInitializer}中执行。 
 *  @author  Chris Beams @author  Juergen Hoeller @since 3.1起
 * @see  JndiLocatorDelegate 
 * @see  org.springframework.context.ApplicationContextInitializer 
 * @see  org.springframework.web.WebApplicationInitializer 
 * @see  org.springframework。 
 *  web.context.support.StandardServletEnvironment
 */
public class JndiPropertySource extends PropertySource<JndiLocatorDelegate> {

	/**
	 * Create a new {@code JndiPropertySource} with the given name
	 * and a {@link JndiLocatorDelegate} configured to prefix any names with
	 * "java:comp/env/".
	 */
	/**
	 * 使用给定名称创建一个新的{@code  JndiPropertySource}，并配置一个{@link  JndiLocatorDelegate}以为任何名称加上"java：comp / env /"作为前缀。 
	 * 
	 */
	public JndiPropertySource(String name) {
		this(name, JndiLocatorDelegate.createDefaultResourceRefLocator());
	}

	/**
	 * Create a new {@code JndiPropertySource} with the given name and the given
	 * {@code JndiLocatorDelegate}.
	 */
	/**
	 * 用给定的名称和给定的{@code  JndiLocatorDelegate}创建一个新的{@code  JndiPropertySource}。 
	 * 
	 */
	public JndiPropertySource(String name, JndiLocatorDelegate jndiLocator) {
		super(name, jndiLocator);
	}


	/**
	 * This implementation looks up and returns the value associated with the given
	 * name from the underlying {@link JndiLocatorDelegate}. If a {@link NamingException}
	 * is thrown during the call to {@link JndiLocatorDelegate#lookup(String)}, returns
	 * {@code null} and issues a DEBUG-level log statement with the exception message.
	 */
	/**
	 * 此实现查找并从基础{@link  JndiLocatorDelegate}返回与给定名称关联的值。 
	 * 如果在调用{@link  JndiLocatorDelegate＃lookup（String）}的过程中抛出{@link  NamingException}，则返回{@code  null}并发出带有异常消息的DEBUG级别的日志语句。 
	 * 
	 */
	@Override
	@Nullable
	public Object getProperty(String name) {
		if (getSource().isResourceRef() && name.indexOf(':') != -1) {
			// We're in resource-ref (prefixing with "java:comp/env") mode. Let's not bother
			// with property names with a colon it since they're probably just containing a
			// default value clause, very unlikely to match including the colon part even in
			// a textual property source, and effectively never meant to match that way in
			// JNDI where a colon indicates a separator between JNDI scheme and actual name.
			return null;
		}

		try {
			Object value = this.source.lookup(name);
			if (logger.isDebugEnabled()) {
				logger.debug("JNDI lookup for name [" + name + "] returned: [" + value + "]");
			}
			return value;
		}
		catch (NamingException ex) {
			if (logger.isDebugEnabled()) {
				logger.debug("JNDI lookup for name [" + name + "] threw NamingException " +
						"with message: " + ex.getMessage() + ". Returning null.");
			}
			return null;
		}
	}

}
