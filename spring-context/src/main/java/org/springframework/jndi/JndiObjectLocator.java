/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jndi;

import javax.naming.NamingException;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

/**
 * Convenient superclass for JNDI-based service locators,
 * providing configurable lookup of a specific JNDI resource.
 *
 * <p>Exposes a {@link #setJndiName "jndiName"} property. This may or may not
 * include the "java:comp/env/" prefix expected by Java EE applications when
 * accessing a locally mapped (Environmental Naming Context) resource. If it
 * doesn't, the "java:comp/env/" prefix will be prepended if the "resourceRef"
 * property is true (the default is <strong>false</strong>) and no other scheme
 * (e.g. "java:") is given.
 *
 * <p>Subclasses may invoke the {@link #lookup()} method whenever it is appropriate.
 * Some classes might do this on initialization, while others might do it
 * on demand. The latter strategy is more flexible in that it allows for
 * initialization of the locator before the JNDI object is available.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see #setJndiName
 * @see #setJndiTemplate
 * @see #setJndiEnvironment
 * @see #setResourceRef
 * @see #lookup()
 */
/**
 * 基于JNDI的服务定位器的便捷超类，可提供对特定JNDI资源的可配置查找。 
 *  <p>公开一个{@link  #setJndiName"jndiName"}属性。 
 * 当访问本地映射的（环境命名上下文）资源时，这可能包含或可能不包含Java EE应用程序期望的"java：comp / env /"前缀。 
 * 如果不是，则如果"resourceRef"属性为true（默认为<strong> false </ strong>）并且没有其他方案（例如"java："），则将在前缀"java：comp / env /"之前添加前缀） 给出。 
 *  <p>子类可以在适当的时候调用{@link  #lookup（）}方法。 
 * 一些类可能会在初始化时执行此操作，而其他类可能会按需执行此操作。 
 * 后一种策略更加灵活，因为它允许在JNDI对象可用之前初始化定位器。 
 *  @author  Juergen Hoeller @since 1.1起
 * @see  #setJndiName 
 * @see  #setJndiTemplate 
 * @see  #setJndiEnvironment 
 * @see  #setResourceRef 
 * @see  #lookup（）
 */
public abstract class JndiObjectLocator extends JndiLocatorSupport implements InitializingBean {

	@Nullable
	private String jndiName;

	@Nullable
	private Class<?> expectedType;


	/**
	 * Specify the JNDI name to look up. If it doesn't begin with "java:comp/env/"
	 * this prefix is added automatically if "resourceRef" is set to "true".
	 * @param jndiName the JNDI name to look up
	 * @see #setResourceRef
	 */
	/**
	 * 指定要查找的JNDI名称。 
	 * 如果它不是以"java：comp / env /"开头，则在"resourceRef"设置为"true"的情况下会自动添加该前缀。 
	 *  
	 * @param  jndiName要查找的JNDI名称
	 * @see  #setResourceRef
	 */
	public void setJndiName(@Nullable String jndiName) {
		this.jndiName = jndiName;
	}

	/**
	 * Return the JNDI name to look up.
	 */
	/**
	 * 返回JNDI名称以进行查找。 
	 * 
	 */
	@Nullable
	public String getJndiName() {
		return this.jndiName;
	}

	/**
	 * Specify the type that the located JNDI object is supposed
	 * to be assignable to, if any.
	 */
	/**
	 * 指定所定位的JNDI对象应该分配给的类型（如果有）。 
	 * 
	 */
	public void setExpectedType(@Nullable Class<?> expectedType) {
		this.expectedType = expectedType;
	}

	/**
	 * Return the type that the located JNDI object is supposed
	 * to be assignable to, if any.
	 */
	/**
	 * 返回所定位的JNDI对象应该分配给的类型（如果有）。 
	 * 
	 */
	@Nullable
	public Class<?> getExpectedType() {
		return this.expectedType;
	}

	@Override
	public void afterPropertiesSet() throws IllegalArgumentException, NamingException {
		if (!StringUtils.hasLength(getJndiName())) {
			throw new IllegalArgumentException("Property 'jndiName' is required");
		}
	}


	/**
	 * Perform the actual JNDI lookup for this locator's target resource.
	 * @return the located target object
	 * @throws NamingException if the JNDI lookup failed or if the
	 * located JNDI object is not assignable to the expected type
	 * @see #setJndiName
	 * @see #setExpectedType
	 * @see #lookup(String, Class)
	 */
	/**
	 * 对此定位器的目标资源执行实际的JNDI查找。 
	 *  
	 * @return 定位的目标对象
	 * @throws  NamingException，如果JNDI查找失败或无法将定位的JNDI对象分配给期望的类型
	 * @see  #setJndiName 
	 * @see  #setExpectedType 
	 * @see  #lookup（字符串，类）
	 */
	protected Object lookup() throws NamingException {
		String jndiName = getJndiName();
		Assert.state(jndiName != null, "No JNDI name specified");
		return lookup(jndiName, getExpectedType());
	}

}
