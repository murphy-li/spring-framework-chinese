/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans;

import java.beans.PropertyEditor;

import org.springframework.lang.Nullable;

/**
 * Encapsulates methods for registering JavaBeans {@link PropertyEditor PropertyEditors}.
 * This is the central interface that a {@link PropertyEditorRegistrar} operates on.
 *
 * <p>Extended by {@link BeanWrapper}; implemented by {@link BeanWrapperImpl}
 * and {@link org.springframework.validation.DataBinder}.
 *
 * @author Juergen Hoeller
 * @since 1.2.6
 * @see java.beans.PropertyEditor
 * @see PropertyEditorRegistrar
 * @see BeanWrapper
 * @see org.springframework.validation.DataBinder
 */
/**
 * 封装用于注册JavaBeans {@link  PropertyEditor PropertyEditors}的方法。 
 * 这是{@link  PropertyEditorRegistrar}进行操作的中央界面。 
 *  <p>由{@link  BeanWrapper}扩展； 
 * 由{@link  BeanWrapperImpl}和{@link  org.springframework.validation.DataBinder}实现。 
 *  @author  Juergen Hoeller @1.2.6起
 * @see  java.beans.PropertyEditor 
 * @see  PropertyEditorRegistrar 
 * @see  BeanWrapper 
 * @see  org.springframework.validation.DataBinder
 */
public interface PropertyEditorRegistry {

	/**
	 * Register the given custom property editor for all properties of the given type.
	 * @param requiredType the type of the property
	 * @param propertyEditor the editor to register
	 */
	/**
	 * 为给定类型的所有属性注册给定的定制属性编辑器。 
	 *  
	 * @param  requiredType属性的类型
	 * @param  propertyEditor编辑器进行注册
	 */
	void registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor);

	/**
	 * Register the given custom property editor for the given type and
	 * property, or for all properties of the given type.
	 * <p>If the property path denotes an array or Collection property,
	 * the editor will get applied either to the array/Collection itself
	 * (the {@link PropertyEditor} has to create an array or Collection value) or
	 * to each element (the {@code PropertyEditor} has to create the element type),
	 * depending on the specified required type.
	 * <p>Note: Only one single registered custom editor per property path
	 * is supported. In the case of a Collection/array, do not register an editor
	 * for both the Collection/array and each element on the same property.
	 * <p>For example, if you wanted to register an editor for "items[n].quantity"
	 * (for all values n), you would use "items.quantity" as the value of the
	 * 'propertyPath' argument to this method.
	 * @param requiredType the type of the property. This may be {@code null}
	 * if a property is given but should be specified in any case, in particular in
	 * case of a Collection - making clear whether the editor is supposed to apply
	 * to the entire Collection itself or to each of its entries. So as a general rule:
	 * <b>Do not specify {@code null} here in case of a Collection/array!</b>
	 * @param propertyPath the path of the property (name or nested path), or
	 * {@code null} if registering an editor for all properties of the given type
	 * @param propertyEditor editor to register
	 */
	/**
	 * 为给定类型和属性，或给定类型的所有属性注册给定的定制属性编辑器。 
	 *  <p>如果属性路径表示数组或Collection属性，则编辑器将应用于数组/ Collection本身（{@link  PropertyEditor}必须创建数组或Collection值）或每个元素（ {@code  PropertyEditor}必须创建元素类型），具体取决于指定的必需类型。 
	 *  <p>注意：每个属性路径仅支持一个注册的定制编辑器。 
	 * 对于集合/数组，请不要为集合/数组以及同一属性上的每个元素都注册编辑器。 
	 *  <p>例如，如果您想为"items [n] .quantity"（对于所有值n）注册编辑器，则可以将"items.quantity"用作此方法的"propertyPath"参数的值。 
	 *  
	 * @param  requiredType属性的类型。 
	 * 如果提供了属性，但在任何情况下都应指定属性，则可以为{@code  null}，尤其是在Collection的情况下-明确说明编辑器是应应用于整个Collection本身还是应用于其每个Collection条目。 
	 * 因此，作为一般规则：<b>在使用Collection / array的情况下，请勿在此处指定{@code  null}！ 
	 * </ b> 
	 * @param  propertyPath属性的路径（名称或嵌套路径），或者{@code  null}如果注册给定类型的所有属性的编辑器
	 * @param  propertyEditor编辑器进行注册
	 */
	void registerCustomEditor(@Nullable Class<?> requiredType, @Nullable String propertyPath, PropertyEditor propertyEditor);

	/**
	 * Find a custom property editor for the given type and property.
	 * @param requiredType the type of the property (can be {@code null} if a property
	 * is given but should be specified in any case for consistency checking)
	 * @param propertyPath the path of the property (name or nested path), or
	 * {@code null} if looking for an editor for all properties of the given type
	 * @return the registered editor, or {@code null} if none
	 */
	/**
	 * 查找给定类型和属性的自定义属性编辑器。 
	 *  
	 * @param  requiredType属性的类型（如果给出了属性，则可以为{@code  null}，但在任何情况下都应指定以进行一致性检查）
	 * @param  propertyPath属性的路径（名称或嵌套路径）路径）； 
	 * 如果正在寻找给定类型的所有属性的编辑器，则为{@code  null}； 
	 * 如果没有，则为{@code  null}； 
	 * 如果没有，则为{@code  null}
	 */
	@Nullable
	PropertyEditor findCustomEditor(@Nullable Class<?> requiredType, @Nullable String propertyPath);

}
