/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans;

import java.util.Map;

import org.springframework.core.convert.TypeDescriptor;
import org.springframework.lang.Nullable;

/**
 * Common interface for classes that can access named properties
 * (such as bean properties of an object or fields in an object)
 * Serves as base interface for {@link BeanWrapper}.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see BeanWrapper
 * @see PropertyAccessorFactory#forBeanPropertyAccess
 * @see PropertyAccessorFactory#forDirectFieldAccess
 */
/**
 * 可以访问命名属性（例如，对象的Bean属性或对象中的字段）的类的通用接口用作{@link  BeanWrapper}的基本接口。 
 *  @author  Juergen Hoeller @从1.1开始
 * @see  BeanWrapper 
 * @see  PropertyAccessorFactory＃forBeanPropertyAccess 
 * @see  PropertyAccessorFactory＃forDirectFieldAccess
 */
public interface PropertyAccessor {

	/**
	 * Path separator for nested properties.
	 * Follows normal Java conventions: getFoo().getBar() would be "foo.bar".
	 */
	/**
	 * 嵌套属性的路径分隔符。 
	 * 遵循正常的Java约定：getFoo（）。 
	 * getBar（）将为"foo.bar"。 
	 * 
	 */
	String NESTED_PROPERTY_SEPARATOR = ".";

	/**
	 * Path separator for nested properties.
	 * Follows normal Java conventions: getFoo().getBar() would be "foo.bar".
	 */
	/**
	 * 嵌套属性的路径分隔符。 
	 * 遵循正常的Java约定：getFoo（）。 
	 * getBar（）将为"foo.bar"。 
	 * 
	 */
	char NESTED_PROPERTY_SEPARATOR_CHAR = '.';

	/**
	 * Marker that indicates the start of a property key for an
	 * indexed or mapped property like "person.addresses[0]".
	 */
	/**
	 * 指示已索引或映射属性（例如"person.addresses [0]"）的属性键的开始的标记。 
	 * 
	 */
	String PROPERTY_KEY_PREFIX = "[";

	/**
	 * Marker that indicates the start of a property key for an
	 * indexed or mapped property like "person.addresses[0]".
	 */
	/**
	 * 指示已索引或映射属性（例如"person.addresses [0]"）的属性键的开始的标记。 
	 * 
	 */
	char PROPERTY_KEY_PREFIX_CHAR = '[';

	/**
	 * Marker that indicates the end of a property key for an
	 * indexed or mapped property like "person.addresses[0]".
	 */
	/**
	 * 指示已索引或映射属性（例如"person.addresses [0]"）的属性键结尾的标记。 
	 * 
	 */
	String PROPERTY_KEY_SUFFIX = "]";

	/**
	 * Marker that indicates the end of a property key for an
	 * indexed or mapped property like "person.addresses[0]".
	 */
	/**
	 * 指示已索引或映射属性（例如"person.addresses [0]"）的属性键结尾的标记。 
	 * 
	 */
	char PROPERTY_KEY_SUFFIX_CHAR = ']';


	/**
	 * Determine whether the specified property is readable.
	 * <p>Returns {@code false} if the property doesn't exist.
	 * @param propertyName the property to check
	 * (may be a nested path and/or an indexed/mapped property)
	 * @return whether the property is readable
	 */
	/**
	 * 确定指定的属性是否可读。 
	 *  <p>如果该属性不存在，则返回{@code  false}。 
	 *  
	 * @param  property命名要检查的属性（可以是嵌套路径和/或索引/映射的属性）
	 * @return 该属性是否可读
	 */
	boolean isReadableProperty(String propertyName);

	/**
	 * Determine whether the specified property is writable.
	 * <p>Returns {@code false} if the property doesn't exist.
	 * @param propertyName the property to check
	 * (may be a nested path and/or an indexed/mapped property)
	 * @return whether the property is writable
	 */
	/**
	 * 确定指定的属性是否可写。 
	 *  <p>如果该属性不存在，则返回{@code  false}。 
	 *  
	 * @param  property命名要检查的属性（可以是嵌套路径和/或索引/映射的属性）
	 * @return 该属性是否可写
	 */
	boolean isWritableProperty(String propertyName);

	/**
	 * Determine the property type for the specified property,
	 * either checking the property descriptor or checking the value
	 * in case of an indexed or mapped element.
	 * @param propertyName the property to check
	 * (may be a nested path and/or an indexed/mapped property)
	 * @return the property type for the particular property,
	 * or {@code null} if not determinable
	 * @throws PropertyAccessException if the property was valid but the
	 * accessor method failed
	 */
	/**
	 * 确定指定属性的属性类型，请检查属性描述符或在使用索引或映射元素的情况下检查值。 
	 *  
	 * @param  property命名要检查的属性（可以是嵌套路径和/或索引/映射的属性）
	 * @return 特定属性的属性类型，如果无法确定，则为{@code  null} <
	 * @throws > PropertyAccessException如果属性有效，但访问器方法失败
	 */
	@Nullable
	Class<?> getPropertyType(String propertyName) throws BeansException;

	/**
	 * Return a type descriptor for the specified property:
	 * preferably from the read method, falling back to the write method.
	 * @param propertyName the property to check
	 * (may be a nested path and/or an indexed/mapped property)
	 * @return the property type for the particular property,
	 * or {@code null} if not determinable
	 * @throws PropertyAccessException if the property was valid but the
	 * accessor method failed
	 */
	/**
	 * 返回指定属性的类型描述符：最好从read方法返回到write方法。 
	 *  
	 * @param  property命名要检查的属性（可以是嵌套路径和/或索引/映射的属性）
	 * @return 特定属性的属性类型，如果无法确定，则为{@code  null} <
	 * @throws > PropertyAccessException如果属性有效，但访问器方法失败
	 */
	@Nullable
	TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException;

	/**
	 * Get the current value of the specified property.
	 * @param propertyName the name of the property to get the value of
	 * (may be a nested path and/or an indexed/mapped property)
	 * @return the value of the property
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't readable
	 * @throws PropertyAccessException if the property was valid but the
	 * accessor method failed
	 */
	/**
	 * 获取指定属性的当前值。 
	 *  
	 * @param  propertyName要获取其值的属性的名称（可以是嵌套路径和/或索引/映射的属性）
	 * @return 属性的值
	 * @throws  InvalidPropertyException（如果没有此类属性）或如果属性不可读
	 * @throws  PropertyAccessException如果属性有效但访问器方法失败
	 */
	@Nullable
	Object getPropertyValue(String propertyName) throws BeansException;

	/**
	 * Set the specified value as current property value.
	 * @param propertyName the name of the property to set the value of
	 * (may be a nested path and/or an indexed/mapped property)
	 * @param value the new value
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyAccessException if the property was valid but the
	 * accessor method failed or a type mismatch occurred
	 */
	/**
	 * 将指定的值设置为当前属性值。 
	 *  
	 * @param  propertyName设置属性值的属性名称（可以是嵌套路径和/或索引/映射的属性）。 
	 * 
	 * @param 为新值设置值。 
	 * @
	 * @throws> InvalidPropertyException如果没有这样的属性，或者如果属性不可写
	 * @throws  PropertyAccessException如果属性有效，但访问器方法失败或发生类型不匹配
	 */
	void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException;

	/**
	 * Set the specified value as current property value.
	 * @param pv an object containing the new property value
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyAccessException if the property was valid but the
	 * accessor method failed or a type mismatch occurred
	 */
	/**
	 * 将指定的值设置为当前属性值。 
	 *  
	 * @param  pv包含新属性值的对象
	 * @throws  InvalidPropertyException（如果没有此类属性或该属性不可写）
	 * @throws  PropertyAccessException（如果属性有效，但访问器方法失败或类型不匹配）发生
	 */
	void setPropertyValue(PropertyValue pv) throws BeansException;

	/**
	 * Perform a batch update from a Map.
	 * <p>Bulk updates from PropertyValues are more powerful: This method is
	 * provided for convenience. Behavior will be identical to that of
	 * the {@link #setPropertyValues(PropertyValues)} method.
	 * @param map a Map to take properties from. Contains property value objects,
	 * keyed by property name
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyBatchUpdateException if one or more PropertyAccessExceptions
	 * occurred for specific properties during the batch update. This exception bundles
	 * all individual PropertyAccessExceptions. All other properties will have been
	 * successfully updated.
	 */
	/**
	 * 从地图执行批量更新。 
	 *  <p> PropertyValues的批量更新功能更强大：提供此方法是为了方便。 
	 * 行为将与{@link  #setPropertyValues（PropertyValues）}方法的行为相同。 
	 *  
	 * @param 映射地图以从中获取属性。 
	 * 包含属性值对象，如果没有这样的属性，或者如果该属性不可写，则以属性名称
	 * @throws  InvalidPropertyException为键。 
	 * 
	 * @throws  PropertyBatchUpdateException如果批处理更新期间特定属性发生一个或多个PropertyAccessException。 
	 * 此异常将所有单独的PropertyAccessException捆绑在一起。 
	 * 所有其他属性将已成功更新。 
	 * 
	 */
	void setPropertyValues(Map<?, ?> map) throws BeansException;

	/**
	 * The preferred way to perform a batch update.
	 * <p>Note that performing a batch update differs from performing a single update,
	 * in that an implementation of this class will continue to update properties
	 * if a <b>recoverable</b> error (such as a type mismatch, but <b>not</b> an
	 * invalid field name or the like) is encountered, throwing a
	 * {@link PropertyBatchUpdateException} containing all the individual errors.
	 * This exception can be examined later to see all binding errors.
	 * Properties that were successfully updated remain changed.
	 * <p>Does not allow unknown fields or invalid fields.
	 * @param pvs a PropertyValues to set on the target object
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyBatchUpdateException if one or more PropertyAccessExceptions
	 * occurred for specific properties during the batch update. This exception bundles
	 * all individual PropertyAccessExceptions. All other properties will have been
	 * successfully updated.
	 * @see #setPropertyValues(PropertyValues, boolean, boolean)
	 */
	/**
	 * 执行批量更新的首选方法。 
	 *  <p>请注意，执行批量更新与执行单次更新不同，因为如果发生<b>可恢复</ b>错误（例如类型不匹配，但<b>否</ b>无效的字段名称或类似名称），抛出包含所有单个错误的{@link  PropertyBatchUpdateException}。 
	 * 以后可以检查此异常以查看所有绑定错误。 
	 * 成功更新的属性保持更改。 
	 *  <p>不允许未知字段或无效字段。 
	 *  
	 * @param  pvs一个PropertyValues来在目标对象上设置
	 * @throws  InvalidPropertyException如果没有这样的属性或该属性不可写
	 * @throws  PropertyBatchUpdateException如果在批处理更新期间特定属性发生了一个或多个PropertyAccessExceptions 。 
	 * 此异常将所有单独的PropertyAccessException捆绑在一起。 
	 * 所有其他属性将已成功更新。 
	 *  
	 * @see  #setPropertyValues（PropertyValues，boolean，boolean）
	 */
	void setPropertyValues(PropertyValues pvs) throws BeansException;

	/**
	 * Perform a batch update with more control over behavior.
	 * <p>Note that performing a batch update differs from performing a single update,
	 * in that an implementation of this class will continue to update properties
	 * if a <b>recoverable</b> error (such as a type mismatch, but <b>not</b> an
	 * invalid field name or the like) is encountered, throwing a
	 * {@link PropertyBatchUpdateException} containing all the individual errors.
	 * This exception can be examined later to see all binding errors.
	 * Properties that were successfully updated remain changed.
	 * @param pvs a PropertyValues to set on the target object
	 * @param ignoreUnknown should we ignore unknown properties (not found in the bean)
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyBatchUpdateException if one or more PropertyAccessExceptions
	 * occurred for specific properties during the batch update. This exception bundles
	 * all individual PropertyAccessExceptions. All other properties will have been
	 * successfully updated.
	 * @see #setPropertyValues(PropertyValues, boolean, boolean)
	 */
	/**
	 * 执行批处理更新，以更好地控制行为。 
	 *  <p>请注意，执行批量更新与执行单次更新不同，因为如果发生<b>可恢复</ b>错误（例如类型不匹配，但<b>否</ b>无效的字段名称或类似名称），抛出包含所有单个错误的{@link  PropertyBatchUpdateException}。 
	 * 以后可以检查此异常以查看所有绑定错误。 
	 * 成功更新的属性保持更改。 
	 *  
	 * @param  pvs要在目标对象上设置的PropertyValues 
	 * @param  ignoreUnknown我们应该忽略未知属性（在Bean中找不到）
	 * @throws  InvalidPropertyException，如果没有此类属性或该属性不可写
	 * @throws  PropertyBatchUpdateException，如果在批处理更新期间针对特定属性发生一个或多个PropertyAccessExceptions。 
	 * 此异常将所有单独的PropertyAccessException捆绑在一起。 
	 * 所有其他属性将已成功更新。 
	 *  
	 * @see  #setPropertyValues（PropertyValues，boolean，boolean）
	 */
	void setPropertyValues(PropertyValues pvs, boolean ignoreUnknown)
			throws BeansException;

	/**
	 * Perform a batch update with full control over behavior.
	 * <p>Note that performing a batch update differs from performing a single update,
	 * in that an implementation of this class will continue to update properties
	 * if a <b>recoverable</b> error (such as a type mismatch, but <b>not</b> an
	 * invalid field name or the like) is encountered, throwing a
	 * {@link PropertyBatchUpdateException} containing all the individual errors.
	 * This exception can be examined later to see all binding errors.
	 * Properties that were successfully updated remain changed.
	 * @param pvs a PropertyValues to set on the target object
	 * @param ignoreUnknown should we ignore unknown properties (not found in the bean)
	 * @param ignoreInvalid should we ignore invalid properties (found but not accessible)
	 * @throws InvalidPropertyException if there is no such property or
	 * if the property isn't writable
	 * @throws PropertyBatchUpdateException if one or more PropertyAccessExceptions
	 * occurred for specific properties during the batch update. This exception bundles
	 * all individual PropertyAccessExceptions. All other properties will have been
	 * successfully updated.
	 */
	/**
	 * 在完全控制行为的情况下执行批处理更新。 
	 *  <p>请注意，执行批量更新与执行单次更新不同，因为如果发生<b>可恢复</ b>错误（例如类型不匹配，但<b>否</ b>无效的字段名称或类似名称），抛出包含所有单个错误的{@link  PropertyBatchUpdateException}。 
	 * 以后可以检查此异常以查看所有绑定错误。 
	 * 成功更新的属性保持更改。 
	 *  
	 * @param  pvs要在目标对象上设置的PropertyValues 
	 * @param  ignoreUnknown我们应该忽略未知属性（在Bean中找不到）
	 * @param  ignoreInvalid我们应该忽略无效属性（发现但不可访问）
	 * @throws 如果没有这样的属性，或者该属性不可写，则返回InvalidPropertyException 
	 * @throws  PropertyBatchUpdateException，如果在批处理更新期间针对特定属性发生了一个或多个PropertyAccessException。 
	 * 此异常将所有单独的PropertyAccessException捆绑在一起。 
	 * 所有其他属性将已成功更新。 
	 * 
	 */
	void setPropertyValues(PropertyValues pvs, boolean ignoreUnknown, boolean ignoreInvalid)
			throws BeansException;

}
