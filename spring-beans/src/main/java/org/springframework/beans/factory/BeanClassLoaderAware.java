/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory;

/**
 * Callback that allows a bean to be aware of the bean
 * {@link ClassLoader class loader}; that is, the class loader used by the
 * present bean factory to load bean classes.
 *
 * <p>This is mainly intended to be implemented by framework classes which
 * have to pick up application classes by name despite themselves potentially
 * being loaded from a shared class loader.
 *
 * <p>For a list of all bean lifecycle methods, see the
 * {@link BeanFactory BeanFactory javadocs}.
 *
 * @author Juergen Hoeller
 * @author Chris Beams
 * @since 2.0
 * @see BeanNameAware
 * @see BeanFactoryAware
 * @see InitializingBean
 */
/**
 * 允许bean知道bean {@link  ClassLoader class loader}的回调； 
 * 也就是说，当前bean工厂使用的类加载器来加载bean类。 
 *  <p>这主要是由框架类实现的，尽管它们可能是从共享类加载器加载的，但它们必须按名称选择应用程序类。 
 *  <p>有关所有bean生命周期方法的列表，请参见{@link  BeanFactory BeanFactory javadocs}。 
 *  @author  Juergen Hoeller @author 克里斯·比姆斯（Chris Beams）@since 2.0起
 * @see  BeanNameAware 
 * @see  BeanFactoryAware 
 * @see  InitializingBean
 */
public interface BeanClassLoaderAware extends Aware {

	/**
	 * Callback that supplies the bean {@link ClassLoader class loader} to
	 * a bean instance.
	 * <p>Invoked <i>after</i> the population of normal bean properties but
	 * <i>before</i> an initialization callback such as
	 * {@link InitializingBean InitializingBean's}
	 * {@link InitializingBean#afterPropertiesSet()}
	 * method or a custom init-method.
	 * @param classLoader the owning class loader
	 */
	/**
	 * 将bean {@link  ClassLoader class loader}提供给bean实例的回调。 
	 *  <p>在通常的bean属性填充之后但在<i>之前</ i>初始化回调（例如{@link  InitializingBean InitializingBean's）{@link  InitializingBean＃afterPropertiesSet（） }方法或自定义的初始化方法。 
	 *  
	 * @param  classLoader拥有的类加载器
	 */
	void setBeanClassLoader(ClassLoader classLoader);

}
