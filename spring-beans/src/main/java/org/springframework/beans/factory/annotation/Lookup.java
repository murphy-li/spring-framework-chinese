/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * An annotation that indicates 'lookup' methods, to be overridden by the container
 * to redirect them back to the {@link org.springframework.beans.factory.BeanFactory}
 * for a {@code getBean} call. This is essentially an annotation-based version of the
 * XML {@code lookup-method} attribute, resulting in the same runtime arrangement.
 *
 * <p>The resolution of the target bean can either be based on the return type
 * ({@code getBean(Class)}) or on a suggested bean name ({@code getBean(String)}),
 * in both cases passing the method's arguments to the {@code getBean} call
 * for applying them as target factory method arguments or constructor arguments.
 *
 * <p>Such lookup methods can have default (stub) implementations that will simply
 * get replaced by the container, or they can be declared as abstract - for the
 * container to fill them in at runtime. In both cases, the container will generate
 * runtime subclasses of the method's containing class via CGLIB, which is why such
 * lookup methods can only work on beans that the container instantiates through
 * regular constructors: i.e. lookup methods cannot get replaced on beans returned
 * from factory methods where we cannot dynamically provide a subclass for them.
 *
 * <p><b>Concrete limitations in typical Spring configuration scenarios:</b>
 * When used with component scanning or any other mechanism that filters out abstract
 * beans, provide stub implementations of your lookup methods to be able to declare
 * them as concrete classes. And please remember that lookup methods won't work on
 * beans returned from {@code @Bean} methods in configuration classes; you'll have
 * to resort to {@code @Inject Provider<TargetBean>} or the like instead.
 *
 * @author Juergen Hoeller
 * @since 4.1
 * @see org.springframework.beans.factory.BeanFactory#getBean(Class, Object...)
 * @see org.springframework.beans.factory.BeanFactory#getBean(String, Object...)
 */
/**
 * 指示"查找"方法的注释，将被容器覆盖以将其重定向回{@link  org.springframework.beans.factory.BeanFactory}以进行{@code  getBean}调用。 
 * 本质上，这是XML {@code  lookup-method}属性的基于注释的版本，从而导致相同的运行时安排。 
 *  <p>目标bean的分辨率可以基于返回类型（{@code  getBean（Class）}）或基于建议的bean名称（{@code  getBean（String）}），两者都可以。 
 * 将方法的参数传递给{@code  getBean}调用的情况下，将它们应用为目标工厂方法参数或构造函数参数。 
 *  <p>此类查找方法可以具有默认的（存根）实现，这些实现将简单地由容器替换，或者可以将它们声明为抽象-以便容器在运行时填充它们。 
 * 在这两种情况下，容器都将通过CGLIB生成方法的包含类的运行时子类，这就是为什么这种查找方法只能在容器通过常规构造函数实例化的bean上起作用的原因：即，无法在工厂方法返回的bean上替换查找方法，其中我们无法为它们动态提供子类。 
 *  <p> <b>典型的Spring配置方案中的具体限制：</ b>当与组件扫描或其他用于过滤抽象bean的机制一起使用时，请提供查找方法的存根实现，以便能够将它们声明为具体类。 
 * 并且请记住，在配置类中，从{@code  @Bean}方法返回的bean上，查找方法无效。 
 * 您必须改为使用{@code  @Inject Provider <TargetBean>}等。 
 *  @author  Juergen Hoeller @始于4.1 
 * @see  org.springframework.beans.factory.BeanFactory＃getBean（Class，Object ...）宾语...）
 */
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Lookup {

	/**
	 * This annotation attribute may suggest a target bean name to look up.
	 * If not specified, the target bean will be resolved based on the
	 * annotated method's return type declaration.
	 */
	/**
	 * 此注释属性可以建议要查找的目标bean名称。 
	 * 如果未指定，则将基于带注释的方法的返回类型声明来解析目标bean。 
	 * 
	 */
	String value() default "";

}
