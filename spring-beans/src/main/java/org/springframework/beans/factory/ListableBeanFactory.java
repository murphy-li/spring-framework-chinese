/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory;

import java.lang.annotation.Annotation;
import java.util.Map;

import org.springframework.beans.BeansException;
import org.springframework.core.ResolvableType;
import org.springframework.lang.Nullable;

/**
 * Extension of the {@link BeanFactory} interface to be implemented by bean factories
 * that can enumerate all their bean instances, rather than attempting bean lookup
 * by name one by one as requested by clients. BeanFactory implementations that
 * preload all their bean definitions (such as XML-based factories) may implement
 * this interface.
 *
 * <p>If this is a {@link HierarchicalBeanFactory}, the return values will <i>not</i>
 * take any BeanFactory hierarchy into account, but will relate only to the beans
 * defined in the current factory. Use the {@link BeanFactoryUtils} helper class
 * to consider beans in ancestor factories too.
 *
 * <p>The methods in this interface will just respect bean definitions of this factory.
 * They will ignore any singleton beans that have been registered by other means like
 * {@link org.springframework.beans.factory.config.ConfigurableBeanFactory}'s
 * {@code registerSingleton} method, with the exception of
 * {@code getBeanNamesOfType} and {@code getBeansOfType} which will check
 * such manually registered singletons too. Of course, BeanFactory's {@code getBean}
 * does allow transparent access to such special beans as well. However, in typical
 * scenarios, all beans will be defined by external bean definitions anyway, so most
 * applications don't need to worry about this differentiation.
 *
 * <p><b>NOTE:</b> With the exception of {@code getBeanDefinitionCount}
 * and {@code containsBeanDefinition}, the methods in this interface
 * are not designed for frequent invocation. Implementations may be slow.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 16 April 2001
 * @see HierarchicalBeanFactory
 * @see BeanFactoryUtils
 */
/**
 * {@link  BeanFactory}接口的扩展将由可以枚举其所有bean实例的bean工厂实现，而不是按照客户端的要求按名称一一尝试。 
 * 预加载其所有bean定义的BeanFactory实现（例如，基于XML的工厂）可以实现此接口。 
 *  <p>如果这是{@link  HierarchicalBeanFactory}，则返回值将<i>不</ i>考虑任何BeanFactory层次结构，而仅与当前工厂中定义的Bean有关。 
 * 也可以使用{@link  BeanFactoryUtils}帮助器类来考虑祖先工厂中的bean。 
 *  <p>此接口中的方法将仅遵守该工厂的bean definitions 。
 * 他们将忽略通过其他方式（例如{@link  org.springframework.beans.factory.config.ConfigurableBeanFactory}的{@code  registerSingleton}方法注册的任何单例bean，但{@code getBeanNamesOfType}和{@code  getBeansOfType}，它们也将检查此类手动注册的单例。
 * 当然，BeanFactory的{@code  getBean}确实也允许透明访问此类特殊bean。 
 * 但是，在典型情况下，无论如何，所有bean都将由外部bean定义来定义，因此大多数应用程序不必担心这种区别。 
 *  <p> <b>注意：</ b>除了{@code  getBeanDefinitionCount}和{@code  containsBeanDefinition}以外，此接口中的方法并非设计用于频繁调用。实现可能很慢。
 *  @author  Rod Johnson @author  Juergen Hoeller @自2001年4月16日以来
 * @see  HierarchicalBeanFactory 
 * @see  BeanFactoryUtils
 */
public interface ListableBeanFactory extends BeanFactory {

	/**
	 * Check if this bean factory contains a bean definition with the given name.
	 * <p>Does not consider any hierarchy this factory may participate in,
	 * and ignores any singleton beans that have been registered by
	 * other means than bean definitions.
	 * @param beanName the name of the bean to look for
	 * @return if this bean factory contains a bean definition with the given name
	 * @see #containsBean
	 */
	/**
	 * 检查此bean工厂是否包含具有给定名称的bean定义。 
	 *  <p>不考虑该工厂可能参与的任何层次结构，并且忽略通过bean定义以外的其他方式注册的任何singleton bean。 
	 *  
	 * @param  beanName 如果此bean工厂包含具有给定名称的bean定义，请查找
	 * @return 的bean名称。 
	 * 
	 * @see  #containsBean
	 */
	boolean containsBeanDefinition(String beanName);

	/**
	 * Return the number of beans defined in the factory.
	 * <p>Does not consider any hierarchy this factory may participate in,
	 * and ignores any singleton beans that have been registered by
	 * other means than bean definitions.
	 * @return the number of beans defined in the factory
	 */
	/**
	 * 返回工厂定义的bean数。 
	 *  <p>不考虑该工厂可能参与的任何层次结构，并且忽略通过bean定义以外的其他方式注册的任何singleton bean。 
	 *  
	 * @return 工厂中定义的bean数
	 */
	int getBeanDefinitionCount();

	/**
	 * Return the names of all beans defined in this factory.
	 * <p>Does not consider any hierarchy this factory may participate in,
	 * and ignores any singleton beans that have been registered by
	 * other means than bean definitions.
	 * @return the names of all beans defined in this factory,
	 * or an empty array if none defined
	 */
	/**
	 * 返回此工厂中定义的所有bean的名称。 
	 *  <p>不考虑该工厂可能参与的任何层次结构，并且忽略通过bean定义以外的其他方式注册的任何singleton bean。 
	 *  
	 * @return 此工厂中定义的所有bean的名称； 
	 * 如果未定义，则为空数组
	 */
	String[] getBeanDefinitionNames();

	/**
	 * Return the names of beans matching the given type (including subclasses),
	 * judging from either bean definitions or the value of {@code getObjectType}
	 * in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans, which means that FactoryBeans
	 * will get initialized. If the object created by the FactoryBean doesn't match,
	 * the raw FactoryBean itself will be matched against the type.
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>This version of {@code getBeanNamesForType} matches all kinds of beans,
	 * be it singletons, prototypes, or FactoryBeans. In most implementations, the
	 * result will be the same as for {@code getBeanNamesForType(type, true, true)}.
	 * <p>Bean names returned by this method should always return bean names <i>in the
	 * order of definition</i> in the backend configuration, as far as possible.
	 * @param type the generically typed class or interface to match
	 * @return the names of beans (or objects created by FactoryBeans) matching
	 * the given object type (including subclasses), or an empty array if none
	 * @since 4.2
	 * @see #isTypeMatch(String, ResolvableType)
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定类型（包括子类）匹配的bean的名称。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beanNamesForTypeIn includedAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 *  <p>此版本的{@code  getBeanNamesForType}可以匹配所有类型的bean，无论是单例，原型还是FactoryBean。 
	 * 在大多数实现中，结果将与{@code  getBeanNamesForType（type，true，true）}的结果相同。 
	 * 在后端配置中，此方法返回的<p> Bean名称应始终按定义顺序</ i>返回Bean名称。 
	 *  
	 * @param type 通用类型的类或接口以匹配
	 * @return 与给定对象类型（包括子类）匹配的bean（或由FactoryBeans创建的对象）的名称； 
	 * 如果没有，则为空数组@@4.2起> #isTypeMatch（String，ResolvableType）
	 * @see  FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beanNamesForTypeInIncludeAncestors（ListableBeanFactory，ResolvableType）
	 */
	String[] getBeanNamesForType(ResolvableType type);

	/**
	 * Return the names of beans matching the given type (including subclasses),
	 * judging from either bean definitions or the value of {@code getObjectType}
	 * in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,
	 * which means that FactoryBeans will get initialized. If the object created by the
	 * FactoryBean doesn't match, the raw FactoryBean itself will be matched against the
	 * type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked
	 * (which doesn't require initialization of each FactoryBean).
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>Bean names returned by this method should always return bean names <i>in the
	 * order of definition</i> in the backend configuration, as far as possible.
	 * @param type the generically typed class or interface to match
	 * @param includeNonSingletons whether to include prototype or scoped beans too
	 * or just singletons (also applies to FactoryBeans)
	 * @param allowEagerInit whether to initialize <i>lazy-init singletons</i> and
	 * <i>objects created by FactoryBeans</i> (or by factory methods with a
	 * "factory-bean" reference) for the type check. Note that FactoryBeans need to be
	 * eagerly initialized to determine their type: So be aware that passing in "true"
	 * for this flag will initialize FactoryBeans and "factory-bean" references.
	 * @return the names of beans (or objects created by FactoryBeans) matching
	 * the given object type (including subclasses), or an empty array if none
	 * @since 5.2
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType, boolean, boolean)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定类型（包括子类）匹配的bean的名称。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>如果设置了"allowEagerInit"标志，是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 * 如果未设置"allowEagerInit"，将仅检查原始FactoryBean（不需要初始化每个FactoryBean）。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beanNamesForTypeIn includedAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 * 在后端配置中，此方法返回的<p> Bean名称应始终按定义顺序</ i>返回Bean名称。 
	 *  
	 * @param type 通用类型的类或接口以匹配
	 * @param  includeNonSingletons 是是否也包含原型或范围内的bean还是仅包含单例（也适用于FactoryBean）。
	 *  </ i>和<i>由FactoryBeans </ i>（或带有"factory-bean"引用的工厂方法）创建的对象进行类型检查。 
	 * 请注意，必须急切初始化FactoryBeans以确定它们的类型：因此请注意，为此标志传递"true"将初始化FactoryBeans和"factory-bean"引用。 
	 *  
	 * @return 匹配给定对象类型（包括子类）的bean（或由FactoryBeans创建的对象）的名称，如果没有，则为空数组@@5.2起，@
	 * @see> FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beanNamesForTypeInclusionAncestors（ListableBeanFactory ，ResolvableType，布尔值，布尔值）
	 */
	String[] getBeanNamesForType(ResolvableType type, boolean includeNonSingletons, boolean allowEagerInit);

	/**
	 * Return the names of beans matching the given type (including subclasses),
	 * judging from either bean definitions or the value of {@code getObjectType}
	 * in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans, which means that FactoryBeans
	 * will get initialized. If the object created by the FactoryBean doesn't match,
	 * the raw FactoryBean itself will be matched against the type.
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>This version of {@code getBeanNamesForType} matches all kinds of beans,
	 * be it singletons, prototypes, or FactoryBeans. In most implementations, the
	 * result will be the same as for {@code getBeanNamesForType(type, true, true)}.
	 * <p>Bean names returned by this method should always return bean names <i>in the
	 * order of definition</i> in the backend configuration, as far as possible.
	 * @param type the class or interface to match, or {@code null} for all bean names
	 * @return the names of beans (or objects created by FactoryBeans) matching
	 * the given object type (including subclasses), or an empty array if none
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定类型（包括子类）匹配的bean的名称。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beanNamesForTypeIn includedAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 *  <p>此版本的{@code  getBeanNamesForType}可以匹配所有类型的bean，无论是单例，原型还是FactoryBean。 
	 * 在大多数实现中，结果将与{@code  getBeanNamesForType（type，true，true）}的结果相同。 
	 * 在后端配置中，此方法返回的<p> Bean名称应始终按定义顺序</ i>返回Bean名称。 
	 *  
	 * @param type 要匹配的类或接口，或者为所有bean名称输入{@code  null}
	 * @return 匹配给定对象类型（包括子类）的bean（或FactoryBeans创建的对象）的名称，或者如果没有，则返回一个空数组
	 * @see  FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beanNamesForTypeIn includedAncestors（ListableBeanFactory，Class）
	 */
	String[] getBeanNamesForType(@Nullable Class<?> type);

	/**
	 * Return the names of beans matching the given type (including subclasses),
	 * judging from either bean definitions or the value of {@code getObjectType}
	 * in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,
	 * which means that FactoryBeans will get initialized. If the object created by the
	 * FactoryBean doesn't match, the raw FactoryBean itself will be matched against the
	 * type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked
	 * (which doesn't require initialization of each FactoryBean).
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>Bean names returned by this method should always return bean names <i>in the
	 * order of definition</i> in the backend configuration, as far as possible.
	 * @param type the class or interface to match, or {@code null} for all bean names
	 * @param includeNonSingletons whether to include prototype or scoped beans too
	 * or just singletons (also applies to FactoryBeans)
	 * @param allowEagerInit whether to initialize <i>lazy-init singletons</i> and
	 * <i>objects created by FactoryBeans</i> (or by factory methods with a
	 * "factory-bean" reference) for the type check. Note that FactoryBeans need to be
	 * eagerly initialized to determine their type: So be aware that passing in "true"
	 * for this flag will initialize FactoryBeans and "factory-bean" references.
	 * @return the names of beans (or objects created by FactoryBeans) matching
	 * the given object type (including subclasses), or an empty array if none
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定类型（包括子类）匹配的bean的名称。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>如果设置了"allowEagerInit"标志，是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 * 如果未设置"allowEagerInit"，将仅检查原始FactoryBean（不需要初始化每个FactoryBean）。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beanNamesForTypeIn includedAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 * 在后端配置中，此方法返回的<p> Bean名称应始终按定义顺序</ i>返回Bean名称。 
	 *  
	 * @param type 要匹配的类或接口，或为所有bean名称输入{@code  null}
	 * @param  includeNonSingletons 是否也包含原型或范围内的bean或仅包含单例（也适用于FactoryBean）
	 * @param  allowEagerInit 是否初始化由工厂bean </ i>（或带有"factory-bean"引用的工厂方法）创建的<i> lazy-init单例</ i>和<i>对象，以进行类型检查。
	 * 请注意，必须急切初始化FactoryBeans以确定它们的类型：因此请注意，为此标志传递"true"将初始化FactoryBeans和"factory-bean"引用。 
	 *  
	 * @return 匹配给定对象类型（包括子类）的bean（或由FactoryBeans创建的对象）的名称，如果没有，则返回一个空数组
	 * @see  FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beanNamesForTypeIn includedAncestors（ListableBeanFactory，Class，布尔值，布尔值）
	 */
	String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit);

	/**
	 * Return the bean instances that match the given object type (including
	 * subclasses), judging from either bean definitions or the value of
	 * {@code getObjectType} in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans, which means that FactoryBeans
	 * will get initialized. If the object created by the FactoryBean doesn't match,
	 * the raw FactoryBean itself will be matched against the type.
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>This version of getBeansOfType matches all kinds of beans, be it
	 * singletons, prototypes, or FactoryBeans. In most implementations, the
	 * result will be the same as for {@code getBeansOfType(type, true, true)}.
	 * <p>The Map returned by this method should always return bean names and
	 * corresponding bean instances <i>in the order of definition</i> in the
	 * backend configuration, as far as possible.
	 * @param type the class or interface to match, or {@code null} for all concrete beans
	 * @return a Map with the matching beans, containing the bean names as
	 * keys and the corresponding bean instances as values
	 * @throws BeansException if a bean could not be created
	 * @since 1.1.2
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定对象类型（包括子类）匹配的bean实例。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beansOfTypeInclusionAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 *  <p>此版本的getBeansOfType匹配所有类型的bean，无论是单例，原型还是FactoryBeans。 
	 * 在大多数实现中，结果将与{@code  getBeansOfType（type，true，true）}的结果相同。 
	 *  <p>此方法返回的Map应该始终尽可能在后端配置中按定义顺序返回<i> bean名称和相应的bean实例</ i>。 
	 *  
	 * @param type 要匹配的类或接口，或者为所有具体bean输入{@code  null}
	 * @return 具有匹配bean的Map，其中包含bean名称作为键，并包含对应的bean实例作为值<@如果无法创建豆，则抛出throws> BeansException。 
	 * @1.1.2起
	 * @see  FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beansOfTypeInIncludeAncestors（ListableBeanFactory，Class）
	 */
	<T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException;

	/**
	 * Return the bean instances that match the given object type (including
	 * subclasses), judging from either bean definitions or the value of
	 * {@code getObjectType} in the case of FactoryBeans.
	 * <p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>
	 * check nested beans which might match the specified type as well.
	 * <p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,
	 * which means that FactoryBeans will get initialized. If the object created by the
	 * FactoryBean doesn't match, the raw FactoryBean itself will be matched against the
	 * type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked
	 * (which doesn't require initialization of each FactoryBean).
	 * <p>Does not consider any hierarchy this factory may participate in.
	 * Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}
	 * to include beans in ancestor factories too.
	 * <p>Note: Does <i>not</i> ignore singleton beans that have been registered
	 * by other means than bean definitions.
	 * <p>The Map returned by this method should always return bean names and
	 * corresponding bean instances <i>in the order of definition</i> in the
	 * backend configuration, as far as possible.
	 * @param type the class or interface to match, or {@code null} for all concrete beans
	 * @param includeNonSingletons whether to include prototype or scoped beans too
	 * or just singletons (also applies to FactoryBeans)
	 * @param allowEagerInit whether to initialize <i>lazy-init singletons</i> and
	 * <i>objects created by FactoryBeans</i> (or by factory methods with a
	 * "factory-bean" reference) for the type check. Note that FactoryBeans need to be
	 * eagerly initialized to determine their type: So be aware that passing in "true"
	 * for this flag will initialize FactoryBeans and "factory-bean" references.
	 * @return a Map with the matching beans, containing the bean names as
	 * keys and the corresponding bean instances as values
	 * @throws BeansException if a bean could not be created
	 * @see FactoryBean#getObjectType
	 * @see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean)
	 */
	/**
	 * 根据FactoryBeans的bean定义或{@code  getObjectType}的值判断，返回与给定对象类型（包括子类）匹配的bean实例。 
	 *  <p> <b>注意：此方法仅自检顶级bean。 
	 * </ b>它不会<i>不</ i>检查也可能与指定类型匹配的嵌套bean。 
	 *  <p>如果设置了"allowEagerInit"标志，是否考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans。 
	 * 如果由FactoryBean创建的对象不匹配，则原始FactoryBean本身将与该类型匹配。 
	 * 如果未设置"allowEagerInit"，将仅检查原始FactoryBean（不需要初始化每个FactoryBean）。 
	 *  <p>不考虑该工厂可能参与的任何层次结构。 
	 * 也可以使用BeanFactoryUtils的{@code  beansOfTypeInclusionAncestors}将Bean包括在祖先工厂中。 
	 *  <p>注意：<i>不</ i>会忽略通过bean定义以外的其他方式注册的单例bean。 
	 *  <p>此方法返回的Map应该始终尽可能在后端配置中按定义顺序返回<i> bean名称和相应的bean实例</ i>。 
	 *  
	 * @param type 要匹配的类或接口，或者为所有具体bean输入{@code  null}
	 * @param  includeNonSingletons 是否也包含原型或作用域bean或仅包含单例（也适用于FactoryBeans）
	 * @param  allowEagerInit 是否初始化由工厂bean </ i>（或带有"factory-bean"引用的工厂方法）创建的<i> lazy-init单例</ i>和<i>对象，以进行类型检查。
	 * 请注意，必须急切初始化FactoryBeans以确定它们的类型：因此请注意，为此标志传递"true"将初始化FactoryBeans和"factory-bean"引用。 
	 *  
	 * @return 包含匹配bean的Map，包含bean名称作为键，并包含对应的bean实例作为值
	 * @throws  BeansException 如果无法创建bean
	 * @see  FactoryBean＃getObjectType 
	 * @see  BeanFactoryUtils＃beansOfTypeInclusionAncestors （ListableBeanFactory，Class，boolean，boolean）
	 */
	<T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)
			throws BeansException;

	/**
	 * Find all names of beans which are annotated with the supplied {@link Annotation}
	 * type, without creating corresponding bean instances yet.
	 * <p>Note that this method considers objects created by FactoryBeans, which means
	 * that FactoryBeans will get initialized in order to determine their object type.
	 * @param annotationType the type of annotation to look for
	 * (at class, interface or factory method level of the specified bean)
	 * @return the names of all matching beans
	 * @since 4.0
	 * @see #findAnnotationOnBean
	 */
	/**
	 * 查找使用提供的{@link  Annotation}类型进行注释的bean的所有名称，而无需创建相应的bean实例。 
	 *  <p>请注意，此方法考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans以确定其对象类型。 
	 *  
	 * @param annotationType 要查找的注解类型（在指定bean的类，接口或工厂方法级别）
	 * @return 所有匹配的bean的名称@自4.0起
	 * @see  #findAnnotationOnBean
	 */
	String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType);

	/**
	 * Find all beans which are annotated with the supplied {@link Annotation} type,
	 * returning a Map of bean names with corresponding bean instances.
	 * <p>Note that this method considers objects created by FactoryBeans, which means
	 * that FactoryBeans will get initialized in order to determine their object type.
	 * @param annotationType the type of annotation to look for
	 * (at class, interface or factory method level of the specified bean)
	 * @return a Map with the matching beans, containing the bean names as
	 * keys and the corresponding bean instances as values
	 * @throws BeansException if a bean could not be created
	 * @since 3.0
	 * @see #findAnnotationOnBean
	 */
	/**
	 * 查找所有使用提供的{@link  Annotation}类型进行注释的bean，并返回具有相应bean实例的bean名称的Map。 
	 *  <p>请注意，此方法考虑由FactoryBeans创建的对象，这意味着将初始化FactoryBeans以确定其对象类型。 
	 *  
	 * @param annotationType 要查找的注解类型（在指定bean的类，接口或工厂方法级别）
	 * @return 包含匹配bean的Map，其中包含bean名称作为键，并包含对应的bean实例作为值
	 * @throws  BeansException 如果从3.0开始无法创建bean @
	 * @see> #findAnnotationOnBean
	 */
	Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException;

	/**
	 * Find an {@link Annotation} of {@code annotationType} on the specified bean,
	 * traversing its interfaces and super classes if no annotation can be found on
	 * the given class itself, as well as checking the bean's factory method (if any).
	 * @param beanName the name of the bean to look for annotations on
	 * @param annotationType the type of annotation to look for
	 * (at class, interface or factory method level of the specified bean)
	 * @return the annotation of the given type if found, or {@code null} otherwise
	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name
	 * @since 3.0
	 * @see #getBeanNamesForAnnotation
	 * @see #getBeansWithAnnotation
	 */
	/**
	 * 在指定的bean上找到{@code Annotation}的{@link annotationType}，遍历其接口和超类（如果在给定类本身上找不到注解），并检查bean的factory方法（如果任何）。
	 *  
	 * @param  beanName 要在注解上查找注释的bean的名称
	 * @param annotationType 要查找的注释的类型（在指定bean的类，接口或工厂方法级别）
	 * @return 给定的注释如果找到，则键入，否则为{@code  null}，否则为{
	 * @throws> NoSuchBeanDefinitionException，如果没有给定名称的bean @since 3.0 
	 * @see  #getBeanNamesForAnnotation 
	 * @see  #getBeansWithAnnotation
	 */
	@Nullable
	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)
			throws NoSuchBeanDefinitionException;

}
