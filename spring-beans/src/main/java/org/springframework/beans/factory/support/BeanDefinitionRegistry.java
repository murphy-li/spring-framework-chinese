/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.support;

import org.springframework.beans.factory.BeanDefinitionStoreException;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.core.AliasRegistry;

/**
 * Interface for registries that hold bean definitions, for example RootBeanDefinition
 * and ChildBeanDefinition instances. Typically implemented by BeanFactories that
 * internally work with the AbstractBeanDefinition hierarchy.
 *
 * <p>This is the only interface in Spring's bean factory packages that encapsulates
 * <i>registration</i> of bean definitions. The standard BeanFactory interfaces
 * only cover access to a <i>fully configured factory instance</i>.
 *
 * <p>Spring's bean definition readers expect to work on an implementation of this
 * interface. Known implementors within the Spring core are DefaultListableBeanFactory
 * and GenericApplicationContext.
 *
 * @author Juergen Hoeller
 * @since 26.11.2003
 * @see org.springframework.beans.factory.config.BeanDefinition
 * @see AbstractBeanDefinition
 * @see RootBeanDefinition
 * @see ChildBeanDefinition
 * @see DefaultListableBeanFactory
 * @see org.springframework.context.support.GenericApplicationContext
 * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader
 * @see PropertiesBeanDefinitionReader
 */
/**
 * 包含bean定义的注册表的接口，例如RootBeanDefinition和ChildBeanDefinition实例。 
 * 通常由内部使用AbstractBeanDefinition层次结构的BeanFactories实现。 
 *  <p>这是Spring的bean工厂包中唯一封装<i>注册</ i> bean定义的接口。 
 * 标准BeanFactory接口仅涵盖对<i>完全配置的工厂实例</ i>的访问。 
 *  <p> Spring的Bean定义读者希望可以使用此接口的实现。 
 *  Spring核心中的已知实现者是DefaultListableBeanFactory和GenericApplicationContext。 
 *  @author  Juergen Hoeller @2003年11月26日起
 * @see  org.springframework.beans.factory.config.BeanDefinition 
 * @see  AbstractBeanDefinition 
 * @see  RootBeanDefinition 
 * @see  ChildBeanDefinition 
 * @see  DefaultListableBeanFactory 
 * @see  org.springframework.context.support.GenericApplicationContext 
 * @see  org.springframework.beans.factory.xml.XmlBeanDefinitionReader 
 * @see  PropertiesBeanDefinitionReader
 */
public interface BeanDefinitionRegistry extends AliasRegistry {

	/**
	 * Register a new bean definition with this registry.
	 * Must support RootBeanDefinition and ChildBeanDefinition.
	 * @param beanName the name of the bean instance to register
	 * @param beanDefinition definition of the bean instance to register
	 * @throws BeanDefinitionStoreException if the BeanDefinition is invalid
	 * @throws BeanDefinitionOverrideException if there is already a BeanDefinition
	 * for the specified bean name and we are not allowed to override it
	 * @see GenericBeanDefinition
	 * @see RootBeanDefinition
	 * @see ChildBeanDefinition
	 */
	/**
	 * 在此注册表中注册新的bean定义。 
	 * 必须支持RootBeanDefinition和ChildBeanDefinition。 
	 *  
	 * @param  beanName要注册的bean实例的名称
	 * @param 要注册的bean实例的定义
	 * @throws  BeanDefinitionStoreException如果BeanDefinition无效
	 * @throws  BeanDefinitionOverrideException如果指定的bean已经有BeanDefinition名称，并且不允许我们覆盖它
	 * @see  GenericBeanDefinition 
	 * @see  RootBeanDefinition 
	 * @see  ChildBeanDefinition
	 */
	void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)
			throws BeanDefinitionStoreException;

	/**
	 * Remove the BeanDefinition for the given name.
	 * @param beanName the name of the bean instance to register
	 * @throws NoSuchBeanDefinitionException if there is no such bean definition
	 */
	/**
	 * 删除给定名称的BeanDefinition。 
	 *  
	 * @param  beanName要注册的bean实例的名称
	 * @throws  NoSuchBeanDefinitionException如果没有这样的bean定义
	 */
	void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;

	/**
	 * Return the BeanDefinition for the given bean name.
	 * @param beanName name of the bean to find a definition for
	 * @return the BeanDefinition for the given name (never {@code null})
	 * @throws NoSuchBeanDefinitionException if there is no such bean definition
	 */
	/**
	 * 返回给定bean名称的BeanDefinition。 
	 *  
	 * @param  beanName Bean的名称，以查找给定名称的BeanDefinition 
	 * @return （绝对{<@@code> null}）
	 * @throws  NoSuchBeanDefinitionException如果没有这样的bean定义
	 */
	BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException;

	/**
	 * Check if this registry contains a bean definition with the given name.
	 * @param beanName the name of the bean to look for
	 * @return if this registry contains a bean definition with the given name
	 */
	/**
	 * 检查此注册表是否包含具有给定名称的bean定义。 
	 *  
	 * @param  beanName如果此注册表包含具有给定名称的bean定义，则要查找
	 * @return 的bean的名称。 
	 * 
	 */
	boolean containsBeanDefinition(String beanName);

	/**
	 * Return the names of all beans defined in this registry.
	 * @return the names of all beans defined in this registry,
	 * or an empty array if none defined
	 */
	/**
	 * 返回此注册表中定义的所有bean的名称。 
	 *  
	 * @return 此注册表中定义的所有bean的名称； 
	 * 如果未定义，则为空数组
	 */
	String[] getBeanDefinitionNames();

	/**
	 * Return the number of beans defined in the registry.
	 * @return the number of beans defined in the registry
	 */
	/**
	 * 返回注册表中定义的bean数。 
	 *  
	 * @return 注册表中定义的bean数
	 */
	int getBeanDefinitionCount();

	/**
	 * Determine whether the given bean name is already in use within this registry,
	 * i.e. whether there is a local bean or alias registered under this name.
	 * @param beanName the name to check
	 * @return whether the given bean name is already in use
	 */
	/**
	 * 确定给定的b​​ean名称是否已在此注册表中使用，即是否在此名称下注册了本地bean或别名。 
	 *  
	 * @param  beanName要检查的名称
	 * @return 给定的bean名称是否已被使用
	 */
	boolean isBeanNameInUse(String beanName);

}
