/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory;

import org.springframework.lang.Nullable;

/**
 * Interface to be implemented by objects used within a {@link BeanFactory} which
 * are themselves factories for individual objects. If a bean implements this
 * interface, it is used as a factory for an object to expose, not directly as a
 * bean instance that will be exposed itself.
 *
 * <p><b>NB: A bean that implements this interface cannot be used as a normal bean.</b>
 * A FactoryBean is defined in a bean style, but the object exposed for bean
 * references ({@link #getObject()}) is always the object that it creates.
 *
 * <p>FactoryBeans can support singletons and prototypes, and can either create
 * objects lazily on demand or eagerly on startup. The {@link SmartFactoryBean}
 * interface allows for exposing more fine-grained behavioral metadata.
 *
 * <p>This interface is heavily used within the framework itself, for example for
 * the AOP {@link org.springframework.aop.framework.ProxyFactoryBean} or the
 * {@link org.springframework.jndi.JndiObjectFactoryBean}. It can be used for
 * custom components as well; however, this is only common for infrastructure code.
 *
 * <p><b>{@code FactoryBean} is a programmatic contract. Implementations are not
 * supposed to rely on annotation-driven injection or other reflective facilities.</b>
 * {@link #getObjectType()} {@link #getObject()} invocations may arrive early in
 * the bootstrap process, even ahead of any post-processor setup. If you need access
 * other beans, implement {@link BeanFactoryAware} and obtain them programmatically.
 *
 * <p>Finally, FactoryBean objects participate in the containing BeanFactory's
 * synchronization of bean creation. There is usually no need for internal
 * synchronization other than for purposes of lazy initialization within the
 * FactoryBean itself (or the like).
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 08.03.2003
 * @param <T> the bean type
 * @see org.springframework.beans.factory.BeanFactory
 * @see org.springframework.aop.framework.ProxyFactoryBean
 * @see org.springframework.jndi.JndiObjectFactoryBean
 */
/**
 * 由{@link  BeanFactory}中使用的对象实现的接口，这些对象本身就是单个对象的工厂。 
 * 如果Bean实现此接口，则它将用作对象公开的工厂，而不是直接用作将自身公开的Bean实例。 
 *  <p> <b> NB：实现此接口的bean不能用作普通bean。 
 * </ b> FactoryBean以bean样式定义，但是该对象公开以供bean引用使用（{@link  #getObject （）}）始终是它创建的对象。 
 *  <p> FactoryBeans可以支持单例和原型，并且可以按需延迟创建或在启动时急于创建对象。 
 *  {@link  SmartFactoryBean}接口允许公开更细粒度的行为元数据。 
 *  <p>此接口在框架本身中大量使用，例如，用于AOP {@link  org.springframework.aop.framework.ProxyFactoryBean}或{@link  org.springframework.jndi.JndiObjectFactoryBean}。 
 * 它也可以用于自定义组件。 
 * 但是，这仅在基础结构代码中很常见。 
 *  <p> <b> {<@code> FactoryBean}是程序性合同。 
 * 实现不应依赖于注释驱动的注入或其他反射工具。 
 * </ b> {@link  #getObjectType（）} {@link  #getObject（）}调用可能会在引导过程的早期到达提前进行任何后处理器设置。 
 * 如果需要访问其他bean，请实现{@link  BeanFactoryAware}并以编程方式获取它们。 
 *  <p>最后，FactoryBean对象参与包含BeanFactory的Bean创建同步。 
 * 除了出于FactoryBean自身（或类似方式）内部的延迟初始化的目的之外，通常不需要内部同步。 
 *  @author  Rod Johnson @author  Juergen Hoeller @2003年3月8日起
 * @param  <T> bean类型
 * @see  org.springframework.beans.factory.BeanFactory 
 * @see  org.springframework.aop.framework.ProxyFactoryBean
 * @see org.springframework.jndi.JndiObjectFactoryBean
 */
public interface FactoryBean<T> {

	/**
	 * The name of an attribute that can be
	 * {@link org.springframework.core.AttributeAccessor#setAttribute set} on a
	 * {@link org.springframework.beans.factory.config.BeanDefinition} so that
	 * factory beans can signal their object type when it can't be deduced from
	 * the factory bean class.
	 * @since 5.2
	 */
	/**
	 * 属性名称可以是{@link  org.springframework.beans.factory.config.BeanDefinition}上的{@link  org.springframework.core.AttributeAccessor＃setAttribute set}，以便工厂bean可以发出信号通知它们无法从工厂bean类推导出的对象类型。 
	 *  @5.2起
	 */
	String OBJECT_TYPE_ATTRIBUTE = "factoryBeanObjectType";


	/**
	 * Return an instance (possibly shared or independent) of the object
	 * managed by this factory.
	 * <p>As with a {@link BeanFactory}, this allows support for both the
	 * Singleton and Prototype design pattern.
	 * <p>If this FactoryBean is not fully initialized yet at the time of
	 * the call (for example because it is involved in a circular reference),
	 * throw a corresponding {@link FactoryBeanNotInitializedException}.
	 * <p>As of Spring 2.0, FactoryBeans are allowed to return {@code null}
	 * objects. The factory will consider this as normal value to be used; it
	 * will not throw a FactoryBeanNotInitializedException in this case anymore.
	 * FactoryBean implementations are encouraged to throw
	 * FactoryBeanNotInitializedException themselves now, as appropriate.
	 * @return an instance of the bean (can be {@code null})
	 * @throws Exception in case of creation errors
	 * @see FactoryBeanNotInitializedException
	 */
	/**
	 * 返回此工厂管理的对象的实例（可能是共享的或独立的）。 
	 *  <p>与{@link  BeanFactory}一样，这允许同时支持Singleton和Prototype设计模式。 
	 *  <p>如果在调用时尚未完全初始化此FactoryBean（例如，因为它包含在循环引用中），请抛出相应的{@link  FactoryBeanNotInitializedException}。 
	 *  <p>从Spring 2.0开始，FactoryBeans被允许返回{@code  null}对象。 
	 * 工厂将其视为正常值使用； 
	 * 在这种情况下，它将不再抛出FactoryBeanNotInitializedException。 
	 * 鼓励FactoryBean实现现在酌情自行抛出FactoryBeanNotInitializedException。 
	 *  
	 * @return  bean的实例（可以为{@code  null}）
	 * @throws 创建错误时的异常
	 * @see  FactoryBeanNotInitializedException
	 */
	@Nullable
	T getObject() throws Exception;

	/**
	 * Return the type of object that this FactoryBean creates,
	 * or {@code null} if not known in advance.
	 * <p>This allows one to check for specific types of beans without
	 * instantiating objects, for example on autowiring.
	 * <p>In the case of implementations that are creating a singleton object,
	 * this method should try to avoid singleton creation as far as possible;
	 * it should rather estimate the type in advance.
	 * For prototypes, returning a meaningful type here is advisable too.
	 * <p>This method can be called <i>before</i> this FactoryBean has
	 * been fully initialized. It must not rely on state created during
	 * initialization; of course, it can still use such state if available.
	 * <p><b>NOTE:</b> Autowiring will simply ignore FactoryBeans that return
	 * {@code null} here. Therefore it is highly recommended to implement
	 * this method properly, using the current state of the FactoryBean.
	 * @return the type of object that this FactoryBean creates,
	 * or {@code null} if not known at the time of the call
	 * @see ListableBeanFactory#getBeansOfType
	 */
	/**
	 * 返回此FactoryBean创建的对象的类型； 
	 * 如果事先未知，则返回{@code  null}。 
	 *  <p>这使您无需实例化对象即可检查特定类型的bean，例如在自动装配时。 
	 *  <p>对于正在创建单例对象的实现，此方法应尝试尽可能避免创建单例。 
	 * 它应该提前估计类型。 
	 * 对于原型，建议在此处返回有意义的类型。 
	 *  <p>在完全初始化FactoryBean之前，可以先调用此方法。 
	 * 它一定不能依赖初始化期间创建的状态。 
	 * 当然，如果可用，它仍然可以使用这种状态。 
	 *  <p> <b>注意：</ b>自动装配将仅忽略在此处返回{@code  null}的FactoryBean。 
	 * 因此，强烈建议使用FactoryBean的当前状态正确实现此方法。 
	 *  
	 * @return 此FactoryBean创建的对象的类型，如果在调用时未知，则为{<@@code> null} 
	 * @see  ListableBeanFactory＃getBeansOfType
	 */
	@Nullable
	Class<?> getObjectType();

	/**
	 * Is the object managed by this factory a singleton? That is,
	 * will {@link #getObject()} always return the same object
	 * (a reference that can be cached)?
	 * <p><b>NOTE:</b> If a FactoryBean indicates to hold a singleton object,
	 * the object returned from {@code getObject()} might get cached
	 * by the owning BeanFactory. Hence, do not return {@code true}
	 * unless the FactoryBean always exposes the same reference.
	 * <p>The singleton status of the FactoryBean itself will generally
	 * be provided by the owning BeanFactory; usually, it has to be
	 * defined as singleton there.
	 * <p><b>NOTE:</b> This method returning {@code false} does not
	 * necessarily indicate that returned objects are independent instances.
	 * An implementation of the extended {@link SmartFactoryBean} interface
	 * may explicitly indicate independent instances through its
	 * {@link SmartFactoryBean#isPrototype()} method. Plain {@link FactoryBean}
	 * implementations which do not implement this extended interface are
	 * simply assumed to always return independent instances if the
	 * {@code isSingleton()} implementation returns {@code false}.
	 * <p>The default implementation returns {@code true}, since a
	 * {@code FactoryBean} typically manages a singleton instance.
	 * @return whether the exposed object is a singleton
	 * @see #getObject()
	 * @see SmartFactoryBean#isPrototype()
	 */
	/**
	 * 该工厂管理的对象是单例吗？也就是说，{<@link> #getObject（）}将始终返回相同的对象（可以缓存的引用）吗？ <p> <b>注意：</ b>如果FactoryBean指示保留单个对象，则从{@code  getObject（）}返回的对象可能会被拥有的BeanFactory缓存。 
	 * 因此，除非FactoryBean始终公开相同的引用，否则不要返回{@code  true}。 
	 *  <p> FactoryBean本身的单例状态通常由拥有的BeanFactory提供； 
	 * 通常，它必须在那里定义为单例。 
	 *  <p> <b>注意：</ b>此返回{@code  false}的方法不一定表示返回的对象是独立的实例。 
	 * 扩展的{@link  SmartFactoryBean}接口的实现可以通过其{@link  SmartFactoryBean＃isPrototype（）}方法显式指示独立的实例。 
	 * 如果{@code  isSingleton（）}实现返回{@code  false}，则简单假定未实现此扩展接口的普通{@link  FactoryBean}实现始终返回独立的实例。 
	 *  <p>默认实现返回{@code  true}，因为{@code  FactoryBean}通常管理一个单例实例。 
	 *  
	 * @return 公开的对象是否为单例
	 * @see  #getObject（）
	 * @see  SmartFactoryBean＃isPrototype（）
	 */
	default boolean isSingleton() {
		return true;
	}

}
