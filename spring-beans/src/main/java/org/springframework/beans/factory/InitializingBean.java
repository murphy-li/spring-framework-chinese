/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory;

/**
 * Interface to be implemented by beans that need to react once all their properties
 * have been set by a {@link BeanFactory}: e.g. to perform custom initialization,
 * or merely to check that all mandatory properties have been set.
 *
 * <p>An alternative to implementing {@code InitializingBean} is specifying a custom
 * init method, for example in an XML bean definition. For a list of all bean
 * lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @see DisposableBean
 * @see org.springframework.beans.factory.config.BeanDefinition#getPropertyValues()
 * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getInitMethodName()
 */
/**
 * 由{@link  BeanFactory}设置完所有属性后需要响应的bean所实现的接口：执行自定义初始化，或仅检查是否已设置所有必填属性。 
 *  <p>实现{@code  InitializingBean}的另一种方法是指定自定义init方法，例如在XML bean定义中。 
 * 有关所有bean生命周期方法的列表，请参见{@link  BeanFactory BeanFactory javadocs}。 
 *  @author  Rod Johnson @author  Juergen Hoeller 
 * @see  DisposableBean 
 * @see  org.springframework.beans.factory.config.BeanDefinition＃getPropertyValues（）
 * @see  org.springframework.beans.factory.support。 
 *  AbstractBeanDefinition＃getInitMethodName（）
 */
public interface InitializingBean {

	/**
	 * Invoked by the containing {@code BeanFactory} after it has set all bean properties
	 * and satisfied {@link BeanFactoryAware}, {@code ApplicationContextAware} etc.
	 * <p>This method allows the bean instance to perform validation of its overall
	 * configuration and final initialization when all bean properties have been set.
	 * @throws Exception in the event of misconfiguration (such as failure to set an
	 * essential property) or if initialization fails for any other reason
	 */
	/**
	 * 由包含的{@code  BeanFactory}设置所有bean属性并满足{@link  BeanFactoryAware}，{<@code> ApplicationContextAware}等后调用。 
	 * <p>此方法允许bean实例执行对以下各项的验证设置了所有bean属性后，将对其进行整体配置并进行最终初始化。 
	 *  
	 * @throws 如果配置错误（例如未能设置基本属性）或初始化由于任何其他原因而失败，则发生异常
	 */
	void afterPropertiesSet() throws Exception;

}
