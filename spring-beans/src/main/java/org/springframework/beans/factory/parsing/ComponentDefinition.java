/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.parsing;

import org.springframework.beans.BeanMetadataElement;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.BeanReference;

/**
 * Interface that describes the logical view of a set of {@link BeanDefinition BeanDefinitions}
 * and {@link BeanReference BeanReferences} as presented in some configuration context.
 *
 * <p>With the introduction of {@link org.springframework.beans.factory.xml.NamespaceHandler pluggable custom XML tags},
 * it is now possible for a single logical configuration entity, in this case an XML tag, to
 * create multiple {@link BeanDefinition BeanDefinitions} and {@link BeanReference RuntimeBeanReferences}
 * in order to provide more succinct configuration and greater convenience to end users. As such, it can
 * no longer be assumed that each configuration entity (e.g. XML tag) maps to one {@link BeanDefinition}.
 * For tool vendors and other users who wish to present visualization or support for configuring Spring
 * applications it is important that there is some mechanism in place to tie the {@link BeanDefinition BeanDefinitions}
 * in the {@link org.springframework.beans.factory.BeanFactory} back to the configuration data in a way
 * that has concrete meaning to the end user. As such, {@link org.springframework.beans.factory.xml.NamespaceHandler}
 * implementations are able to publish events in the form of a {@code ComponentDefinition} for each
 * logical entity being configured. Third parties can then {@link ReaderEventListener subscribe to these events},
 * allowing for a user-centric view of the bean metadata.
 *
 * <p>Each {@code ComponentDefinition} has a {@link #getSource source object} which is configuration-specific.
 * In the case of XML-based configuration this is typically the {@link org.w3c.dom.Node} which contains the user
 * supplied configuration information. In addition to this, each {@link BeanDefinition} enclosed in a
 * {@code ComponentDefinition} has its own {@link BeanDefinition#getSource() source object} which may point
 * to a different, more specific, set of configuration data. Beyond this, individual pieces of bean metadata such
 * as the {@link org.springframework.beans.PropertyValue PropertyValues} may also have a source object giving an
 * even greater level of detail. Source object extraction is handled through the
 * {@link SourceExtractor} which can be customized as required.
 *
 * <p>Whilst direct access to important {@link BeanReference BeanReferences} is provided through
 * {@link #getBeanReferences}, tools may wish to inspect all {@link BeanDefinition BeanDefinitions} to gather
 * the full set of {@link BeanReference BeanReferences}. Implementations are required to provide
 * all {@link BeanReference BeanReferences} that are required to validate the configuration of the
 * overall logical entity as well as those required to provide full user visualisation of the configuration.
 * It is expected that certain {@link BeanReference BeanReferences} will not be important to
 * validation or to the user view of the configuration and as such these may be omitted. A tool may wish to
 * display any additional {@link BeanReference BeanReferences} sourced through the supplied
 * {@link BeanDefinition BeanDefinitions} but this is not considered to be a typical case.
 *
 * <p>Tools can determine the important of contained {@link BeanDefinition BeanDefinitions} by checking the
 * {@link BeanDefinition#getRole role identifier}. The role is essentially a hint to the tool as to how
 * important the configuration provider believes a {@link BeanDefinition} is to the end user. It is expected
 * that tools will <strong>not</strong> display all {@link BeanDefinition BeanDefinitions} for a given
 * {@code ComponentDefinition} choosing instead to filter based on the role. Tools may choose to make
 * this filtering user configurable. Particular notice should be given to the
 * {@link BeanDefinition#ROLE_INFRASTRUCTURE INFRASTRUCTURE role identifier}. {@link BeanDefinition BeanDefinitions}
 * classified with this role are completely unimportant to the end user and are required only for
 * internal implementation reasons.
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @since 2.0
 * @see AbstractComponentDefinition
 * @see CompositeComponentDefinition
 * @see BeanComponentDefinition
 * @see ReaderEventListener#componentRegistered(ComponentDefinition)
 */
/**
 * 描述某些配置上下文中呈现的{{@link> BeanDefinition BeanDefinitions}和{@link  BeanReference BeanReferences}集合的逻辑视图的接口。 
 *  <p>通过引入{@link  org.springframework.beans.factory.xml.NamespaceHandler可插入自定义XML标签}，现在可以使用单个逻辑配置实体（在这种情况下为XML标签）创建多个{@link  BeanDefinition BeanDefinitions}和{@link  BeanReference RuntimeBeanReferences}以便为最终用户提供更简洁的配置和更大的便利。 
 * 因此，不能再假定每个配置实体（例如XML标记）都映射到一个{@link  BeanDefinition}。 
 * 对于希望提供可视化或配置Spring应用程序支持的工具供应商和其他用户，重要的是要有某种适当的机制来将{@link  BeanDefinition BeanDefinitions}绑定到org.springframework.beans中。 
 *  .factory.BeanFactory}以对最终用户具有特定意义的方式返回到配置数据。 
 * 这样，{<@link> org.springframework.beans.factory.xml.NamespaceHandler}实现可以为每个配置的逻辑实体以{@code  ComponentDefinition}的形式发布事件。 
 * 然后，第三方可以{@link  ReaderEventListener订阅这些事件}，从而允许以用户为中心的Bean元数据视图。 
 *  <p>每个{@code  ComponentDefinition}都有一个特定于配置的{@link  #getSource源对象}。 
 * 对于基于XML的配置，通常是{@link  org.w3c.dom.Node}，其中包含用户提供的配置信息。 
 * 除此之外，{<@code> ComponentDefinition}中包含的每个{@link  BeanDefinition}都有自己的{@link  BeanDefinition＃getSource（）源对象}，它们可能指向不同的，更具体的设置配置数据。 
 * 除此之外，各个豆元数据片段（例如{@link  org.springframework.beans.PropertyValue PropertyValues}）也可以具有一个源对象，该对象提供了更高的详细程度。 
 * 通过{@link  SourceExtractor}处理源对象提取，可以根据需要对其进行自定义。 
 *  <p>虽然通过{@link  #getBeanReferences}提供了对重要的{@link  BeanReferences BeanReferences}的直接访问，但是工具可能希望检查所有{@link  BeanDefinition BeanDefinitions}以收集完整的{@link  BeanReference BeanReferences}。 
 * 需要实现以提供所有{@link  BeanReference BeanReferences}，这些{@@link> BeanReference BeanReferences}是验证整个逻辑实体的配置以及提供完整的用户可视化配置所必需的。 
 * 可以预期，某些{@link  BeanReference BeanReferences}对于验证或对配置的用户视图而言并不重要，因此可以将其省略。 
 * 一个工具可能希望显示通过提供的{@link  BeanDefinition BeanDefinitions}派生的任何其他{@link  BeanReference BeanReferences}，但这不是典型的情况。 
 *  <p>工具可以通过检查{@link  BeanDefinition＃getRole角色标识符}来确定所包含的{@link  BeanDefinition BeanDefinitions}的重要性。 
 * 该角色实质上是对该工具的提示，说明配置提供者认为{@link  BeanDefinition}对最终用户的重要性。 
 * 预期工具将<strong>不</ strong>针对给定的{@code  ComponentDefinition}显示所有{@link  BeanDefinition BeanDefinitions}，而是根据角色进行过滤。 
 * 工具可以选择使该筛选用户可配置。 
 * 应该特别注意{@link  BeanDefinition＃ROLE_INFRASTRUCTURE INFRASTRUCTURE角色标识符}。 
 * 以此角色进行分类的{@link  BeanDefinition BeanDefinitions}对最终用户而言完全不重要，仅出于内部实现原因才需要。 
 *  @author  Rob Harrop @author  Juergen Hoeller @since 2.0起
 * @see  AbstractComponentDefinition 
 * @see  CompositeComponentDefinition 
 * @see  BeanComponentDefinition 
 * @see  ReaderEventListener＃componentRegistered（ComponentDefinition）
 */
public interface ComponentDefinition extends BeanMetadataElement {

	/**
	 * Get the user-visible name of this {@code ComponentDefinition}.
	 * <p>This should link back directly to the corresponding configuration data
	 * for this component in a given context.
	 */
	/**
	 * 获取此{@code  ComponentDefinition}的用户可见名称。 
	 *  <p>这应该直接链接回给定上下文中该组件的相应配置数据。 
	 * 
	 */
	String getName();

	/**
	 * Return a friendly description of the described component.
	 * <p>Implementations are encouraged to return the same value from
	 * {@code toString()}.
	 */
	/**
	 * 返回所描述组件的友好描述。 
	 * 鼓励<p>实现从{@code  toString（）}返回相同的值。 
	 * 
	 */
	String getDescription();

	/**
	 * Return the {@link BeanDefinition BeanDefinitions} that were registered
	 * to form this {@code ComponentDefinition}.
	 * <p>It should be noted that a {@code ComponentDefinition} may well be related with
	 * other {@link BeanDefinition BeanDefinitions} via {@link BeanReference references},
	 * however these are <strong>not</strong> included as they may be not available immediately.
	 * Important {@link BeanReference BeanReferences} are available from {@link #getBeanReferences()}.
	 * @return the array of BeanDefinitions, or an empty array if none
	 */
	/**
	 * 返回已注册形成此{@code  ComponentDefinition}的{@link  BeanDefinition BeanDefinitions}。 
	 *  <p>应该注意，{<@code> ComponentDefinition}可能很容易通过{@link  BeanReference references}与其他{@link  BeanDefinition BeanDefinitions}相关，但是这些不是<strong> </ strong> >包含在内，因为它们可能无法立即使用。 
	 * 重要的{@link  BeanReference BeanReferences}可从{@link  #getBeanReferences（）}获得。 
	 *  
	 * @return  BeanDefinitions数组，如果没有则为空数组
	 */
	BeanDefinition[] getBeanDefinitions();

	/**
	 * Return the {@link BeanDefinition BeanDefinitions} that represent all relevant
	 * inner beans within this component.
	 * <p>Other inner beans may exist within the associated {@link BeanDefinition BeanDefinitions},
	 * however these are not considered to be needed for validation or for user visualization.
	 * @return the array of BeanDefinitions, or an empty array if none
	 */
	/**
	 * 返回表示该组件内所有相关内部Bean的{@link  BeanDefinition BeanDefinitions}。 
	 *  <p>其他内部bean可能存在于关联的{@link  BeanDefinition BeanDefinitions}中，但是不认为这些对于验证或用户可视化是必需的。 
	 *  
	 * @return  BeanDefinitions数组，如果没有则为空数组
	 */
	BeanDefinition[] getInnerBeanDefinitions();

	/**
	 * Return the set of {@link BeanReference BeanReferences} that are considered
	 * to be important to this {@code ComponentDefinition}.
	 * <p>Other {@link BeanReference BeanReferences} may exist within the associated
	 * {@link BeanDefinition BeanDefinitions}, however these are not considered
	 * to be needed for validation or for user visualization.
	 * @return the array of BeanReferences, or an empty array if none
	 */
	/**
	 * 返回被认为对此{@code  ComponentDefinition}重要的{{@link> BeanReference BeanReferences}集。 
	 *  <p>其他{@link  BeanReference BeanReferences}可能存在于关联的{@link  BeanDefinition BeanDefinitions}中，但是不认为这些对于验证或用户可视化是必需的。 
	 *  
	 * @return  BeanReferences的数组，如果没有则为空数组
	 */
	BeanReference[] getBeanReferences();

}
