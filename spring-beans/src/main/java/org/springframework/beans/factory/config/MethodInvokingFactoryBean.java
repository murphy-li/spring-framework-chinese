/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.config;

import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.FactoryBeanNotInitializedException;
import org.springframework.lang.Nullable;

/**
 * {@link FactoryBean} which returns a value which is the result of a static or instance
 * method invocation. For most use cases it is better to just use the container's
 * built-in factory method support for the same purpose, since that is smarter at
 * converting arguments. This factory bean is still useful though when you need to
 * call a method which doesn't return any value (for example, a static class method
 * to force some sort of initialization to happen). This use case is not supported
 * by factory methods, since a return value is needed to obtain the bean instance.
 *
 * <p>Note that as it is expected to be used mostly for accessing factory methods,
 * this factory by default operates in a <b>singleton</b> fashion. The first request
 * to {@link #getObject} by the owning bean factory will cause a method invocation,
 * whose return value will be cached for subsequent requests. An internal
 * {@link #setSingleton singleton} property may be set to "false", to cause this
 * factory to invoke the target method each time it is asked for an object.
 *
 * <p><b>NOTE: If your target method does not produce a result to expose, consider
 * {@link MethodInvokingBean} instead, which avoids the type determination and
 * lifecycle limitations that this {@link MethodInvokingFactoryBean} comes with.</b>
 *
 * <p>This invoker supports any kind of target method. A static method may be specified
 * by setting the {@link #setTargetMethod targetMethod} property to a String representing
 * the static method name, with {@link #setTargetClass targetClass} specifying the Class
 * that the static method is defined on. Alternatively, a target instance method may be
 * specified, by setting the {@link #setTargetObject targetObject} property as the target
 * object, and the {@link #setTargetMethod targetMethod} property as the name of the
 * method to call on that target object. Arguments for the method invocation may be
 * specified by setting the {@link #setArguments arguments} property.
 *
 * <p>This class depends on {@link #afterPropertiesSet()} being called once
 * all properties have been set, as per the InitializingBean contract.
 *
 * <p>An example (in an XML based bean factory definition) of a bean definition
 * which uses this class to call a static factory method:
 *
 * <pre class="code">
 * &lt;bean id="myObject" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
 *   &lt;property name="staticMethod" value="com.whatever.MyClassFactory.getInstance"/>
 * &lt;/bean></pre>
 *
 * <p>An example of calling a static method then an instance method to get at a
 * Java system property. Somewhat verbose, but it works.
 *
 * <pre class="code">
 * &lt;bean id="sysProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
 *   &lt;property name="targetClass" value="java.lang.System"/>
 *   &lt;property name="targetMethod" value="getProperties"/>
 * &lt;/bean>
 *
 * &lt;bean id="javaVersion" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
 *   &lt;property name="targetObject" ref="sysProps"/>
 *   &lt;property name="targetMethod" value="getProperty"/>
 *   &lt;property name="arguments" value="java.version"/>
 * &lt;/bean></pre>
 *
 * @author Colin Sampaleanu
 * @author Juergen Hoeller
 * @since 21.11.2003
 * @see MethodInvokingBean
 * @see org.springframework.util.MethodInvoker
 */
/**
 * {@link  FactoryBean}返回一个值，该值是静态或实例方法调用的结果。 
 * 在大多数情况下，最好仅出于相同目的使用容器的内置工厂方法支持，因为这样在转换参数时会更聪明。 
 * 尽管当您需要调用不返回任何值的方法时（例如，静态类方法强制进行某种初始化），该工厂bean仍然有用。 
 * 工厂方法不支持此用例，因为需要返回值来获取bean实例。 
 *  <p>请注意，由于预期该方法主要用于访问工厂方法，因此该工厂默认情况下以<b> singleton </ b>方式运行。 
 * 拥有的bean工厂对{@link  #getObject}的第一个请求将导致方法调用，该方法的返回值将被缓存以用于后续请求。 
 * 内部{@link  #setSingleton singleton}属性可以设置为"false"，以使该工厂在每次请求对象时都调用目标方法。 
 *  <p> <b>注意：如果您的目标方法没有产生要暴露的结果，请考虑使用{@link  MethodInvokingBean}，这避免了此{@link  MethodInvokingFactoryBean}附带的类型确定和生命周期限制。 
 *  </ b> <p>此调用程序支持任何类型的目标方法。 
 * 可以通过将{@link  #setTargetMethod targetMethod}属性设置为表示静态方法名称的String来指定静态方法，其中{@link  #setTargetClass targetClass}指定在其上定义静态方法的Class。 
 * 或者，可以通过将{@link  #setTargetObject targetObject}属性设置为目标对象，并将{@link  #setTargetMethod targetMethod}属性设置为要在其上调用的方法的名称来指定目标实例方法目标对象。 
 * 可以通过设置{@link  #setArguments arguments}属性来指定方法调用的参数。 
 *  <p>根据InitializingBean合同，一旦设置了所有属性，此类将取决于{@link  #afterPropertiesSet（）}被调用。 
 *  <p>使用此类调用静态工厂方法的bean定义的示例（在基于XML的bean工厂定义中）：<pre class ="code"> <bean id ="myObject"class ="org.springframework .beans.factory.config.MethodInvokingFactoryBean"> <property name ="staticMethod"value ="com.whatever.MyClassFactory.getInstance"/> </ bean> </ pre> <p>调用静态方法的示例实例方法来获取Java系统属性。 
 * 有点冗长，但是有效。 
 *  <pre class ="code"> <bean id ="sysProps"class ="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> <property name ="targetClass"value ="java.lang.System"/> <属性名称="targetMethod"值="getProperties"/> </ bean> <bean id ="javaVersion"class ="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> <属性名称="targetObject"ref ="sysProps"/> <属性名称="targetMethod"值="getProperty"/> <属性名称="arguments"值="java.version"/> </ bean> </ pre> @author  Colin Sampaleanu <@作者> Juergen Hoeller @2003年11月21日以来
 * @see  MethodInvokingBean 
 * @see  org.springframework.util.MethodInvoker
 */
public class MethodInvokingFactoryBean extends MethodInvokingBean implements FactoryBean<Object> {

	private boolean singleton = true;

	private boolean initialized = false;

	/** Method call result in the singleton case. */
	/**
	 * 在单例情况下的方法调用结果。 
	 * 
	 */
	@Nullable
	private Object singletonObject;


	/**
	 * Set if a singleton should be created, or a new object on each
	 * {@link #getObject()} request otherwise. Default is "true".
	 */
	/**
	 * 设置是否创建单例，否则，在每个{@link  #getObject（）}请求上创建一个新对象。 
	 * 默认值为"true"。 
	 * 
	 */
	public void setSingleton(boolean singleton) {
		this.singleton = singleton;
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		prepare();
		if (this.singleton) {
			this.initialized = true;
			this.singletonObject = invokeWithTargetException();
		}
	}


	/**
	 * Returns the same value each time if the singleton property is set
	 * to "true", otherwise returns the value returned from invoking the
	 * specified method on the fly.
	 */
	/**
	 * 如果singleton属性设置为"true"，则每次都返回相同的值，否则返回动态调用指定方法所返回的值。 
	 * 
	 */
	@Override
	@Nullable
	public Object getObject() throws Exception {
		if (this.singleton) {
			if (!this.initialized) {
				throw new FactoryBeanNotInitializedException();
			}
			// Singleton: return shared object.
			return this.singletonObject;
		}
		else {
			// Prototype: new object on each call.
			return invokeWithTargetException();
		}
	}

	/**
	 * Return the type of object that this FactoryBean creates,
	 * or {@code null} if not known in advance.
	 */
	/**
	 * 返回此FactoryBean创建的对象的类型； 
	 * 如果事先未知，则返回{@code  null}。 
	 * 
	 */
	@Override
	public Class<?> getObjectType() {
		if (!isPrepared()) {
			// Not fully initialized yet -> return null to indicate "not known yet".
			return null;
		}
		return getPreparedMethod().getReturnType();
	}

	@Override
	public boolean isSingleton() {
		return this.singleton;
	}

}
