/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.support;

import org.springframework.beans.factory.config.BeanDefinitionHolder;
import org.springframework.beans.factory.config.DependencyDescriptor;
import org.springframework.lang.Nullable;

/**
 * Strategy interface for determining whether a specific bean definition
 * qualifies as an autowire candidate for a specific dependency.
 *
 * @author Juergen Hoeller
 * @author Mark Fisher
 * @since 2.5
 */
/**
 * 用于确定特定bean定义是否有资格作为特定依赖项的自动装配候选的策略接口。 
 *  @author  Juergen Hoeller @author 马克·费舍尔@since 2.5
 */
public interface AutowireCandidateResolver {

	/**
	 * Determine whether the given bean definition qualifies as an
	 * autowire candidate for the given dependency.
	 * <p>The default implementation checks
	 * {@link org.springframework.beans.factory.config.BeanDefinition#isAutowireCandidate()}.
	 * @param bdHolder the bean definition including bean name and aliases
	 * @param descriptor the descriptor for the target method parameter or field
	 * @return whether the bean definition qualifies as autowire candidate
	 * @see org.springframework.beans.factory.config.BeanDefinition#isAutowireCandidate()
	 */
	/**
	 * 确定给定的b​​ean定义是否符合给定依赖项的自动装配候选条件。 
	 *  <p>默认实现检查{@link  org.springframework.beans.factory.config.BeanDefinition＃isAutowireCandidate（）}。 
	 *  
	 * @param  bd保留bean定义，包括bean名称和别名
	 * @param 描述符目标方法参数或字段的描述符
	 * @return  bean定义是否符合自动装配候选要求
	 * @see  org.springframework.beans.factory .config.BeanDefinition＃isAutowireCandidate（）
	 */
	default boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {
		return bdHolder.getBeanDefinition().isAutowireCandidate();
	}

	/**
	 * Determine whether the given descriptor is effectively required.
	 * <p>The default implementation checks {@link DependencyDescriptor#isRequired()}.
	 * @param descriptor the descriptor for the target method parameter or field
	 * @return whether the descriptor is marked as required or possibly indicating
	 * non-required status some other way (e.g. through a parameter annotation)
	 * @since 5.0
	 * @see DependencyDescriptor#isRequired()
	 */
	/**
	 * 确定是否确实需要给定的描述符。 
	 *  <p>默认实现检查{@link  DependencyDescriptor＃isRequired（）}。 
	 *  
	 * @param 描述符目标方法参数或字段的描述符
	 * @return 描述符是标记为必需的还是可能以其他方式（例如，通过参数注释）指示非必需状态@自5.0起
	 * @see  DependencyDescriptor ＃是必须的（）
	 */
	default boolean isRequired(DependencyDescriptor descriptor) {
		return descriptor.isRequired();
	}

	/**
	 * Determine whether the given descriptor declares a qualifier beyond the type
	 * (typically - but not necessarily - a specific kind of annotation).
	 * <p>The default implementation returns {@code false}.
	 * @param descriptor the descriptor for the target method parameter or field
	 * @return whether the descriptor declares a qualifier, narrowing the candidate
	 * status beyond the type match
	 * @since 5.1
	 * @see org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver#hasQualifier
	 */
	/**
	 * 确定给定的描述符是否声明了类型之外的限定符（通常-但不一定-特定类型的注释）。 
	 *  <p>默认实现返回{@code  false}。 
	 *  
	 * @param 描述符是目标方法参数或字段的描述符。 
	 * 
	 * @return 描述符是否声明了限定符，从而使候选状态的范围超出类型匹配范围，从5.1开始。 
	 * 
	 * @see  org.springframework.beans.factory.annotation。 
	 *  QualifierAnnotationAutowireCandidateResolver＃hasQualifier
	 */
	default boolean hasQualifier(DependencyDescriptor descriptor) {
		return false;
	}

	/**
	 * Determine whether a default value is suggested for the given dependency.
	 * <p>The default implementation simply returns {@code null}.
	 * @param descriptor the descriptor for the target method parameter or field
	 * @return the value suggested (typically an expression String),
	 * or {@code null} if none found
	 * @since 3.0
	 */
	/**
	 * 确定是否建议给定依赖项的默认值。 
	 *  <p>默认实现只是返回{@code  null}。 
	 *  
	 * @param 描述符目标方法参数或字段的描述符
	 * @return 所建议的值（通常是表达式字符串），如果未找到，则为{@code  null} @since 3.0
	 */
	@Nullable
	default Object getSuggestedValue(DependencyDescriptor descriptor) {
		return null;
	}

	/**
	 * Build a proxy for lazy resolution of the actual dependency target,
	 * if demanded by the injection point.
	 * <p>The default implementation simply returns {@code null}.
	 * @param descriptor the descriptor for the target method parameter or field
	 * @param beanName the name of the bean that contains the injection point
	 * @return the lazy resolution proxy for the actual dependency target,
	 * or {@code null} if straight resolution is to be performed
	 * @since 4.0
	 */
	/**
	 * 如果注入点要求，则为实际依赖关系目标的延迟解析构建代理。 
	 *  <p>默认实现只是返回{@code  null}。 
	 *  
	 * @param 描述符目标方法参数或字段的描述符
	 * @param  beanName包含注入点的bean的名称
	 * @return 实际依赖目标的惰性解析代理，或{@code  null }如果要从@4.0开始执行直接分辨率
	 */
	@Nullable
	default Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, @Nullable String beanName) {
		return null;
	}

}
