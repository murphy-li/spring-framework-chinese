/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.xml;

import org.w3c.dom.Node;

import org.springframework.beans.factory.config.BeanDefinitionHolder;

/**
 * Interface used by the {@link DefaultBeanDefinitionDocumentReader}
 * to handle custom, nested (directly under a {@code <bean>}) tags.
 *
 * <p>Decoration may also occur based on custom attributes applied to the
 * {@code <bean>} tag. Implementations are free to turn the metadata in the
 * custom tag into as many
 * {@link org.springframework.beans.factory.config.BeanDefinition BeanDefinitions} as
 * required and to transform the
 * {@link org.springframework.beans.factory.config.BeanDefinition} of the enclosing
 * {@code <bean>} tag, potentially even returning a completely different
 * {@link org.springframework.beans.factory.config.BeanDefinition} to replace the
 * original.
 *
 * <p>{@link BeanDefinitionDecorator BeanDefinitionDecorators} should be aware that
 * they may be part of a chain. In particular, a {@link BeanDefinitionDecorator} should
 * be aware that a previous {@link BeanDefinitionDecorator} may have replaced the
 * original {@link org.springframework.beans.factory.config.BeanDefinition} with a
 * {@link org.springframework.aop.framework.ProxyFactoryBean} definition allowing for
 * custom {@link org.aopalliance.intercept.MethodInterceptor interceptors} to be added.
 *
 * <p>{@link BeanDefinitionDecorator BeanDefinitionDecorators} that wish to add an
 * interceptor to the enclosing bean should extend
 * {@link org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator}
 * which handles the chaining ensuring that only one proxy is created and that it
 * contains all interceptors from the chain.
 *
 * <p>The parser locates a {@link BeanDefinitionDecorator} from the
 * {@link NamespaceHandler} for the namespace in which the custom tag resides.
 *
 * @author Rob Harrop
 * @since 2.0
 * @see NamespaceHandler
 * @see BeanDefinitionParser
 */
/**
 * {@link  DefaultBeanDefinitionDocumentReader}用于处理自定义的嵌套（直接在{@code  <bean>}下）标记的接口。 
 *  <p>也可能基于应用于{@code  <bean>}标签的自定义属性来进行装饰。 
 * 实现是免费的，可以根据需要将自定义标记中的元数据转换为尽可能多的{@link  org.springframework.beans.factory.config.BeanDefinition BeanDefinitions}并转换{@link  org.springframework.beans.factory {@code  <bean>}标记的.config.BeanDefinition}，甚至可能返回完全不同的{@link  org.springframework.beans.factory.config.BeanDefinition}来替换原始的。 
 *  <p> {<@link> BeanDefinitionDecorator BeanDefinitionDecorators}应该意识到它们可能是链的一部分。 
 * 特别是，{@link  BeanDefinitionDecorator}应该意识到，以前的{@link  BeanDefinitionDecorator}可能已经用{@link  org.springframework.aop.framework.ProxyFactoryBean}定义允许添加自定义{@link  org.aopalliance.intercept.MethodInterceptor拦截器}。 
 * 希望向封闭的Bean添加拦截器的<p> {<@link> BeanDefinitionDecorator BeanDefinitionDecorators}应该扩展{@link  org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator}，以处理链接，确保仅创建和创建一个代理。 
 * 它包含了链中的所有拦截器。 
 *  <p>解析器从{@link  NamespaceHandler}中找到自定义标签所在的命名空间的{@link  BeanDefinitionDecorator}。 
 *  @author  Rob Harrop @since 2.0起
 * @see  NamespaceHandler 
 * @see  BeanDefinitionParser
 */
public interface BeanDefinitionDecorator {

	/**
	 * Parse the specified {@link Node} (either an element or an attribute) and decorate
	 * the supplied {@link org.springframework.beans.factory.config.BeanDefinition},
	 * returning the decorated definition.
	 * <p>Implementations may choose to return a completely new definition, which will
	 * replace the original definition in the resulting
	 * {@link org.springframework.beans.factory.BeanFactory}.
	 * <p>The supplied {@link ParserContext} can be used to register any additional
	 * beans needed to support the main definition.
	 */
	/**
	 * 解析指定的{@link 节点}（元素或属性），并修饰提供的{@link  org.springframework.beans.factory.config.BeanDefinition}，返回修饰后的定义。 
	 *  <p>实现可以选择返回一个全新的定义，它将替换生成的{@link  org.springframework.beans.factory.BeanFactory}中的原始定义。 
	 *  <p>提供的{@link  ParserContext}可以用于注册支持主定义所需的任何其他bean。 
	 * 
	 */
	BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext);

}
