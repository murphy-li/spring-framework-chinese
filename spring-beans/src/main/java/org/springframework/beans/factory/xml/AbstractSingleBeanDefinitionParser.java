/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.xml;

import org.w3c.dom.Element;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.AbstractBeanDefinition;
import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.lang.Nullable;

/**
 * Base class for those {@link BeanDefinitionParser} implementations that
 * need to parse and define just a <i>single</i> {@code BeanDefinition}.
 *
 * <p>Extend this parser class when you want to create a single bean definition
 * from an arbitrarily complex XML element. You may wish to consider extending
 * the {@link AbstractSimpleBeanDefinitionParser} when you want to create a
 * single bean definition from a relatively simple custom XML element.
 *
 * <p>The resulting {@code BeanDefinition} will be automatically registered
 * with the {@link org.springframework.beans.factory.support.BeanDefinitionRegistry}.
 * Your job simply is to {@link #doParse parse} the custom XML {@link Element}
 * into a single {@code BeanDefinition}.
 *
 * @author Rob Harrop
 * @author Juergen Hoeller
 * @author Rick Evans
 * @since 2.0
 * @see #getBeanClass
 * @see #getBeanClassName
 * @see #doParse
 */
/**
 * 需要解析和定义一个<i>单个</ i> {@code  BeanDefinition}的{@link  BeanDefinitionParser}实现的基类。 
 *  <p>当您想从任意复杂的XML元素创建单个bean定义时，请扩展此解析器类。 
 * 当您想从相对简单的自定义XML元素创建单个bean定义时，您可能希望考虑扩展{@link  AbstractSimpleBeanDefinitionParser}。 
 *  <p>生成的{@code  BeanDefinition}将自动注册到{@link  org.springframework.beans.factory.support.BeanDefinitionRegistry}。 
 * 您的工作仅仅是将定制XML {@link 元素} {@link  #doParse解析}到单个{@code  BeanDefinition}中。 
 *  @author  Rob Harrop @author  Juergen Hoeller @author  Rick Evans @since 2.0 
 * @see  #getBeanClass 
 * @see  #getBeanClassName 
 * @see  #doParse
 */
public abstract class AbstractSingleBeanDefinitionParser extends AbstractBeanDefinitionParser {

	/**
	 * Creates a {@link BeanDefinitionBuilder} instance for the
	 * {@link #getBeanClass bean Class} and passes it to the
	 * {@link #doParse} strategy method.
	 * @param element the element that is to be parsed into a single BeanDefinition
	 * @param parserContext the object encapsulating the current state of the parsing process
	 * @return the BeanDefinition resulting from the parsing of the supplied {@link Element}
	 * @throws IllegalStateException if the bean {@link Class} returned from
	 * {@link #getBeanClass(org.w3c.dom.Element)} is {@code null}
	 * @see #doParse
	 */
	/**
	 * 为{@link  #getBeanClass bean Class}创建一个{@link  BeanDefinitionBuilder}实例，并将其传递给{@link  #doParse}策略方法。 
	 *  
	 * @param 元素要解析为单个BeanDefinition的元素
	 * @param  parserContext封装解析过程的当前状态的对象
	 * @return 解析由提供的{@link 元素得到的BeanDefinition } 
	 * @throws  IllegalStateException如果从{@link  #getBeanClass（org.w3c.dom.Element）}返回的bean {@link  Class}为{@code  null} 
	 * @see  #doParse
	 */
	@Override
	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {
		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();
		String parentName = getParentName(element);
		if (parentName != null) {
			builder.getRawBeanDefinition().setParentName(parentName);
		}
		Class<?> beanClass = getBeanClass(element);
		if (beanClass != null) {
			builder.getRawBeanDefinition().setBeanClass(beanClass);
		}
		else {
			String beanClassName = getBeanClassName(element);
			if (beanClassName != null) {
				builder.getRawBeanDefinition().setBeanClassName(beanClassName);
			}
		}
		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));
		BeanDefinition containingBd = parserContext.getContainingBeanDefinition();
		if (containingBd != null) {
			// Inner bean definition must receive same scope as containing bean.
			builder.setScope(containingBd.getScope());
		}
		if (parserContext.isDefaultLazyInit()) {
			// Default-lazy-init applies to custom bean definitions as well.
			builder.setLazyInit(true);
		}
		doParse(element, parserContext, builder);
		return builder.getBeanDefinition();
	}

	/**
	 * Determine the name for the parent of the currently parsed bean,
	 * in case of the current bean being defined as a child bean.
	 * <p>The default implementation returns {@code null},
	 * indicating a root bean definition.
	 * @param element the {@code Element} that is being parsed
	 * @return the name of the parent bean for the currently parsed bean,
	 * or {@code null} if none
	 */
	/**
	 * 在将当前bean定义为子bean的情况下，确定当前已解析bean的父对象的名称。 
	 *  <p>默认实现返回{@code  null}，指示根bean定义。 
	 *  
	 * @param 元素正在解析的{@code 元素} 
	 * @return 当前解析的bean的父bean的名称； 
	 * 如果没有，则为{@code  null}
	 */
	@Nullable
	protected String getParentName(Element element) {
		return null;
	}

	/**
	 * Determine the bean class corresponding to the supplied {@link Element}.
	 * <p>Note that, for application classes, it is generally preferable to
	 * override {@link #getBeanClassName} instead, in order to avoid a direct
	 * dependence on the bean implementation class. The BeanDefinitionParser
	 * and its NamespaceHandler can be used within an IDE plugin then, even
	 * if the application classes are not available on the plugin's classpath.
	 * @param element the {@code Element} that is being parsed
	 * @return the {@link Class} of the bean that is being defined via parsing
	 * the supplied {@code Element}, or {@code null} if none
	 * @see #getBeanClassName
	 */
	/**
	 * 确定与提供的{@link 元素}相对应的bean类。 
	 *  <p>请注意，对于应用程序类，通常最好改写{@link  #getBeanClassName}，以避免直接依赖Bean实现类。 
	 * 然后，即使应用程序类在插件的类路径中不可用，也可以在IDE插件中使用BeanDefinitionParser及其NamespaceHandler。 
	 *  
	 * @param 元素正在解析的{@code 元素} 
	 * @return 通过解析提供的{@code 元素}所定义的bean的{@link 类}，或者{ @code  null}（如果没有）
	 * @see  #getBeanClassName
	 */
	@Nullable
	protected Class<?> getBeanClass(Element element) {
		return null;
	}

	/**
	 * Determine the bean class name corresponding to the supplied {@link Element}.
	 * @param element the {@code Element} that is being parsed
	 * @return the class name of the bean that is being defined via parsing
	 * the supplied {@code Element}, or {@code null} if none
	 * @see #getBeanClass
	 */
	/**
	 * 确定与提供的{@link 元素}相对应的bean类名称。 
	 *  
	 * @param 元素正在解析的{@code 元素} 
	 * @return 通过解析提供的{@code 元素}所定义的bean的类名，或者{@code  null }如果没有
	 * @see  #getBeanClass
	 */
	@Nullable
	protected String getBeanClassName(Element element) {
		return null;
	}

	/**
	 * Parse the supplied {@link Element} and populate the supplied
	 * {@link BeanDefinitionBuilder} as required.
	 * <p>The default implementation delegates to the {@code doParse}
	 * version without ParserContext argument.
	 * @param element the XML element being parsed
	 * @param parserContext the object encapsulating the current state of the parsing process
	 * @param builder used to define the {@code BeanDefinition}
	 * @see #doParse(Element, BeanDefinitionBuilder)
	 */
	/**
	 * 解析提供的{@link 元素}，并根据需要填充提供的{@link  BeanDefinitionBuilder}。 
	 *  <p>默认实现将不带ParserContext参数的版本委托给{@code  doParse}版本。 
	 *  
	 * @param 元素被解析的XML元素
	 * @param  parserContext封装解析过程当前状态的对象
	 * @param 构建器，用于定义{@code  BeanDefinition} 
	 * @see  #doParse（Element， BeanDefinitionBuilder）
	 */
	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {
		doParse(element, builder);
	}

	/**
	 * Parse the supplied {@link Element} and populate the supplied
	 * {@link BeanDefinitionBuilder} as required.
	 * <p>The default implementation does nothing.
	 * @param element the XML element being parsed
	 * @param builder used to define the {@code BeanDefinition}
	 */
	/**
	 * 解析提供的{@link 元素}，并根据需要填充提供的{@link  BeanDefinitionBuilder}。 
	 *  <p>默认实现不执行任何操作。 
	 *  
	 * @param 元素被解析的XML元素
	 * @param 构建器，用于定义{@code  BeanDefinition}
	 */
	protected void doParse(Element element, BeanDefinitionBuilder builder) {
	}

}
