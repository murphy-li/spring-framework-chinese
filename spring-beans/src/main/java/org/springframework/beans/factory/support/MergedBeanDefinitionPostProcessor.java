/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.support;

import org.springframework.beans.factory.config.BeanPostProcessor;

/**
 * Post-processor callback interface for <i>merged</i> bean definitions at runtime.
 * {@link BeanPostProcessor} implementations may implement this sub-interface in order
 * to post-process the merged bean definition (a processed copy of the original bean
 * definition) that the Spring {@code BeanFactory} uses to create a bean instance.
 *
 * <p>The {@link #postProcessMergedBeanDefinition} method may for example introspect
 * the bean definition in order to prepare some cached metadata before post-processing
 * actual instances of a bean. It is also allowed to modify the bean definition but
 * <i>only</i> for definition properties which are actually intended for concurrent
 * modification. Essentially, this only applies to operations defined on the
 * {@link RootBeanDefinition} itself but not to the properties of its base classes.
 *
 * @author Juergen Hoeller
 * @since 2.5
 * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#getMergedBeanDefinition
 */
/**
 * 在运行时用于<i>合并的</ i> Bean定义的后处理器回调接口。 
 *  {@link  BeanPostProcessor}实现可以实现此子接口，以便对Spring {@code  BeanFactory}用于创建bean实例的合并bean定义（原始bean定义的处理副本）进行后处理。 
 *  。 
 *  <p> {<@link> #postProcessMergedBeanDefinition}方法例如可以对bean定义进行内部检查，以便在对bean的实际实例进行后处理之前准备一些缓存的元数据。 
 * 还允许修改bean定义，但只能<i> </ i>修改实际上用于并行修改的定义属性。 
 * 本质上，这仅适用于在{@link  RootBeanDefinition}本身上定义的操作，而不适用于其基类的属性。 
 *  @author 于尔根·霍勒（Juergen Hoeller）@从2.5开始
 * @see  org.springframework.beans.factory.config.ConfigurableBeanFactory＃getMergedBeanDefinition
 */
public interface MergedBeanDefinitionPostProcessor extends BeanPostProcessor {

	/**
	 * Post-process the given merged bean definition for the specified bean.
	 * @param beanDefinition the merged bean definition for the bean
	 * @param beanType the actual type of the managed bean instance
	 * @param beanName the name of the bean
	 * @see AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors
	 */
	/**
	 * 对指定bean的给定合并bean定义进行后处理。 
	 *  
	 * @param  beanDefinition bean的合并bean定义
	 * @param  beanType受管bean实例的实际类型
	 * @param  beanName bean的名称
	 * @see  AbstractAutowireCapableBeanFactory＃applyMergedBeanDefinitionPostProcessors
	 */
	void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanType, String beanName);

	/**
	 * A notification that the bean definition for the specified name has been reset,
	 * and that this post-processor should clear any metadata for the affected bean.
	 * <p>The default implementation is empty.
	 * @param beanName the name of the bean
	 * @since 5.1
	 * @see DefaultListableBeanFactory#resetBeanDefinition
	 */
	/**
	 * 通知，已重新设置指定名称的Bean定义，并且此后处理器应清除受影响的Bean的所有元数据。 
	 *  <p>默认实现为空。 
	 *  
	 * @param  beanName自5.1起的bean名称。 
	 * 
	 * @see  DefaultListableBeanFactory＃resetBeanDefinition
	 */
	default void resetBeanDefinition(String beanName) {
	}

}
