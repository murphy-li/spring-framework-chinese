/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.beans.factory.config;

import java.beans.PropertyDescriptor;

import org.springframework.beans.BeansException;
import org.springframework.beans.PropertyValues;
import org.springframework.lang.Nullable;

/**
 * Subinterface of {@link BeanPostProcessor} that adds a before-instantiation callback,
 * and a callback after instantiation but before explicit properties are set or
 * autowiring occurs.
 *
 * <p>Typically used to suppress default instantiation for specific target beans,
 * for example to create proxies with special TargetSources (pooling targets,
 * lazily initializing targets, etc), or to implement additional injection strategies
 * such as field injection.
 *
 * <p><b>NOTE:</b> This interface is a special purpose interface, mainly for
 * internal use within the framework. It is recommended to implement the plain
 * {@link BeanPostProcessor} interface as far as possible, or to derive from
 * {@link InstantiationAwareBeanPostProcessorAdapter} in order to be shielded
 * from extensions to this interface.
 *
 * @author Juergen Hoeller
 * @author Rod Johnson
 * @since 1.2
 * @see org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#setCustomTargetSourceCreators
 * @see org.springframework.aop.framework.autoproxy.target.LazyInitTargetSourceCreator
 */
/**
 * {@link  BeanPostProcessor}的子接口，它添加了实例化之前的回调，以及在实例化之后但设置了显式属性或发生自动装配之前的回调。 
 *  <p>通常用于禁止特定目标bean的默认实例化，例如，创建具有特殊TargetSource的代理（池目标，延迟初始化目标等），或实施其他注入策略，例如字段注入。 
 *  <p> <b>注意：</ b>此接口是一个专用接口，主要供框架内部使用。 
 * 建议尽可能实现普通的{@link  BeanPostProcessor}接口，或从{@link  InstantiationAwareBeanPostProcessorAdapter}派生，以免对此接口进行扩展。 
 *  @author 尤尔根·霍勒（Juergen Hoeller）@author 罗德·约翰逊（Rod Johnson）@since 1.2起（
 * @see）
 */
public interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor {

	/**
	 * Apply this BeanPostProcessor <i>before the target bean gets instantiated</i>.
	 * The returned bean object may be a proxy to use instead of the target bean,
	 * effectively suppressing default instantiation of the target bean.
	 * <p>If a non-null object is returned by this method, the bean creation process
	 * will be short-circuited. The only further processing applied is the
	 * {@link #postProcessAfterInitialization} callback from the configured
	 * {@link BeanPostProcessor BeanPostProcessors}.
	 * <p>This callback will be applied to bean definitions with their bean class,
	 * as well as to factory-method definitions in which case the returned bean type
	 * will be passed in here.
	 * <p>Post-processors may implement the extended
	 * {@link SmartInstantiationAwareBeanPostProcessor} interface in order
	 * to predict the type of the bean object that they are going to return here.
	 * <p>The default implementation returns {@code null}.
	 * @param beanClass the class of the bean to be instantiated
	 * @param beanName the name of the bean
	 * @return the bean object to expose instead of a default instance of the target bean,
	 * or {@code null} to proceed with default instantiation
	 * @throws org.springframework.beans.BeansException in case of errors
	 * @see #postProcessAfterInstantiation
	 * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getBeanClass()
	 * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getFactoryMethodName()
	 */
	/**
	 * 在实例化目标bean之前，先应用BeanPostProcessor <i> </ i>。 
	 * 返回的bean对象可以是代替目标bean使用的代理，从而有效地抑制了目标bean的默认实例化。 
	 *  <p>如果此方法返回一个非null对象，则Bean创建过程将被短路。 
	 * 唯一应用的进一步处理是来自已配置的{@link  BeanPostProcessor BeanPostProcessors}的{@link  #postProcessAfterInitialization}回调。 
	 *  <p>此回调将应用于具有其bean类的bean定义以及工厂方法定义，在这种情况下，返回的bean类型将在此处传递。 
	 *  <p>后处理器可以实现扩展的{@link  SmartInstantiationAwareBeanPostProcessor}接口，以便预测它们将在此处返回的bean对象的类型。 
	 *  <p>默认实现返回{@code  null}。 
	 *  
	 * @param  beanClass要实例化的bean的类
	 * @param  beanName bean的名称
	 * @return 要公开的bean对象，而不是目标bean的默认实例，或者{@code  null}在发生错误的情况下继续进行默认实例化
	 * @throws  org.springframework.beans.BeansException 
	 * @see  #postProcessAfterInstantiation 
	 * @see  org.springframework.beans.factory.support.AbstractBeanDefinition＃getBeanClass（）
	 * @see  org .springframework.beans.factory.support.AbstractBeanDefinition＃getFactoryMethodName（）
	 */
	@Nullable
	default Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {
		return null;
	}

	/**
	 * Perform operations after the bean has been instantiated, via a constructor or factory method,
	 * but before Spring property population (from explicit properties or autowiring) occurs.
	 * <p>This is the ideal callback for performing custom field injection on the given bean
	 * instance, right before Spring's autowiring kicks in.
	 * <p>The default implementation returns {@code true}.
	 * @param bean the bean instance created, with properties not having been set yet
	 * @param beanName the name of the bean
	 * @return {@code true} if properties should be set on the bean; {@code false}
	 * if property population should be skipped. Normal implementations should return {@code true}.
	 * Returning {@code false} will also prevent any subsequent InstantiationAwareBeanPostProcessor
	 * instances being invoked on this bean instance.
	 * @throws org.springframework.beans.BeansException in case of errors
	 * @see #postProcessBeforeInstantiation
	 */
	/**
	 * 通过构造函数或工厂方法在实例化bean之后但在发生Spring属性填充（通过显式属性或自动装配）之前执行操作。 
	 *  <p>这是在给定的bean实例上执行自定义字段注入的理想回调，正好在Spring自动装配开始之前。 
	 * <p>默认实现返回{@code  true}。 
	 *  
	 * @param  bean创建的bean实例，尚未设置属性
	 * @param  beanName bean的名称
	 * @return  {@code  true}（如果应在bean上设置属性）； 
	 *  {@code  false}如果应该跳过属性填充。 
	 * 正常的实现应返回{@code  true}。 
	 * 返回{@code  false}也将防止对此bean实例调用任何后续的InstantiationAwareBeanPostProcessor实例。 
	 *  
	 * @throws 发生错误时org.springframework.beans.BeansException 
	 * @see  #postProcessBeforeInstantiation
	 */
	default boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {
		return true;
	}

	/**
	 * Post-process the given property values before the factory applies them
	 * to the given bean, without any need for property descriptors.
	 * <p>Implementations should return {@code null} (the default) if they provide a custom
	 * {@link #postProcessPropertyValues} implementation, and {@code pvs} otherwise.
	 * In a future version of this interface (with {@link #postProcessPropertyValues} removed),
	 * the default implementation will return the given {@code pvs} as-is directly.
	 * @param pvs the property values that the factory is about to apply (never {@code null})
	 * @param bean the bean instance created, but whose properties have not yet been set
	 * @param beanName the name of the bean
	 * @return the actual property values to apply to the given bean (can be the passed-in
	 * PropertyValues instance), or {@code null} which proceeds with the existing properties
	 * but specifically continues with a call to {@link #postProcessPropertyValues}
	 * (requiring initialized {@code PropertyDescriptor}s for the current bean class)
	 * @throws org.springframework.beans.BeansException in case of errors
	 * @since 5.1
	 * @see #postProcessPropertyValues
	 */
	/**
	 * 在工厂将它们应用于给定bean之前，对给定的属性值进行后处理，而无需使用属性描述符。 
	 * 如果实现提供自定义的{@link  #postProcessPropertyValues}实现，则实现应返回{@code  null}（默认值），否则返回{@code  pvs}。 
	 * 在此接口的将来版本中（删除了{@link  #postProcessPropertyValues}），默认实现将直接返回给定的{@code  pvs}。 
	 *  
	 * @param  pvs工厂将要应用的属性值（从来没有{@code  null}）
	 * @param  bean创建的bean实例，但是其属性尚未设置的
	 * @param  beanName名称Bean的
	 * @return 应用于给定Bean的实际属性值（可以是传入的PropertyValues实例），或者是{@code  null}，它继续使用现有属性，但特别是继续调用{ @link  #postProcessPropertyValues}（对于当前的bean类，需要初始化的{@code  PropertyDescriptor} s）
	 * @throws  org.springframework.beans.BeansException（自5.1起出现错误）
	 * @see  #postProcessPropertyValues
	 */
	@Nullable
	default PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)
			throws BeansException {

		return null;
	}

	/**
	 * Post-process the given property values before the factory applies them
	 * to the given bean. Allows for checking whether all dependencies have been
	 * satisfied, for example based on a "Required" annotation on bean property setters.
	 * <p>Also allows for replacing the property values to apply, typically through
	 * creating a new MutablePropertyValues instance based on the original PropertyValues,
	 * adding or removing specific values.
	 * <p>The default implementation returns the given {@code pvs} as-is.
	 * @param pvs the property values that the factory is about to apply (never {@code null})
	 * @param pds the relevant property descriptors for the target bean (with ignored
	 * dependency types - which the factory handles specifically - already filtered out)
	 * @param bean the bean instance created, but whose properties have not yet been set
	 * @param beanName the name of the bean
	 * @return the actual property values to apply to the given bean (can be the passed-in
	 * PropertyValues instance), or {@code null} to skip property population
	 * @throws org.springframework.beans.BeansException in case of errors
	 * @see #postProcessProperties
	 * @see org.springframework.beans.MutablePropertyValues
	 * @deprecated as of 5.1, in favor of {@link #postProcessProperties(PropertyValues, Object, String)}
	 */
	/**
	 * 在工厂将它们应用于给定bean之前，对给定属性值进行后处理。 
	 * 允许检查是否满足所有依赖关系，例如基于bean属性设置器上的"Required"注释。 
	 *  <p>还允许替换要应用的属性值，通常是通过基于原始PropertyValues创建一个新的MutablePropertyValues实例，添加或删除特定值来实现的。 
	 *  <p>默认实现按原样返回给定的{@code  pvs}。 
	 *  
	 * @param  pvs工厂将要应用的属性值（从不{@code  null}）
	 * @param  pds目标Bean的相关属性描述符（具有被忽略的依赖类型-工厂专门处理的依赖类型-已过滤掉）
	 * @param  bean创建的bean实例，但尚未设置其属性
	 * @param  beanName bean的名称
	 * @return 应用于给定bean的实际属性值（可以是传入的PropertyValues实例），或者使用{@code  null}跳过属性填充
	 * @throws  org.springframework.beans.BeansException，以防出现错误
	 * @see  #postProcessProperties 
	 * @see  org.springframework.beans。 
	 * 自5.1版起已弃用MutablePropertyValues，建议使用{@link  #postProcessProperties（PropertyValues，Object，String）}
	 */
	@Deprecated
	@Nullable
	default PropertyValues postProcessPropertyValues(
			PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException {

		return pvs;
	}

}
