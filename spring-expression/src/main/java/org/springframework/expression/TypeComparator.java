/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import org.springframework.lang.Nullable;

/**
 * Instances of a type comparator should be able to compare pairs of objects for equality.
 * The specification of the return value is the same as for {@link java.lang.Comparable}.
 *
 * @author Andy Clement
 * @since 3.0
 * @see java.lang.Comparable
 */
/**
 * 类型比较器的实例应该能够比较对象对是否相等。 
 * 返回值的规范与{@link  java.lang.Comparable}的规范相同。 
 *  @author 安迪·克莱门特（Andy Clement）@从3.0开始
 * @see  java.lang.Comparable
 */
public interface TypeComparator {

	/**
	 * Return {@code true} if the comparator can compare these two objects.
	 * @param firstObject the first object
	 * @param secondObject the second object
	 * @return {@code true} if the comparator can compare these objects
	 */
	/**
	 * 如果比较器可以比较这两个对象，则返回{@code  true}。 
	 *  
	 * @param  firstObject第一个对象
	 * @param  secondObject第二个对象
	 * @return  {@code  true}如果比较器可以比较这些对象
	 */
	boolean canCompare(@Nullable Object firstObject, @Nullable Object secondObject);

	/**
	 * Compare two given objects.
	 * @param firstObject the first object
	 * @param secondObject the second object
	 * @return 0 if they are equal, <0 if the first is smaller than the second,
	 * or >0 if the first is larger than the second
	 * @throws EvaluationException if a problem occurs during comparison
	 * (or if they are not comparable in the first place)
	 */
	/**
	 * 比较两个给定的对象。 
	 *  
	 * @param  firstObject第一个对象
	 * @param  secondObject第二个对象
	 * @return 如果相等，则为0； 
	 * 如果第一个小于第二个，则为<0； 
	 * 如果第一个大于第二个，则为> 0。 
	 * 如果在比较过程中发生问题（或者如果它们最初不具有可比性），则引发throws> EvaluationException
	 */
	int compare(@Nullable Object firstObject, @Nullable Object secondObject) throws EvaluationException;

}
