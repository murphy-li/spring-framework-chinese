/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import java.util.List;

import org.springframework.lang.Nullable;

/**
 * Expressions are executed in an evaluation context. It is in this context that
 * references are resolved when encountered during expression evaluation.
 *
 * <p>There is a default implementation of this EvaluationContext interface:
 * {@link org.springframework.expression.spel.support.StandardEvaluationContext}
 * which can be extended, rather than having to implement everything manually.
 *
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 表达式在评估上下文中执行。 
 * 在这种情况下，在表达式求值期间遇到引用时，解析引用。 
 *  <p>此EvaluationContext接口有一个默认实现：{@link  org.springframework.expression.spel.support.StandardEvaluationContext}可以扩展，而不必手动实现。 
 *  @author 安迪·克莱门特@author  Juergen Hoeller @从3.0开始
 */
public interface EvaluationContext {

	/**
	 * Return the default root context object against which unqualified
	 * properties/methods/etc should be resolved. This can be overridden
	 * when evaluating an expression.
	 */
	/**
	 * 返回默认根上下文对象，应针对该对象解析不合格的属性/方法/ etc。 
	 * 评估表达式时可以覆盖此设置。 
	 * 
	 */
	TypedValue getRootObject();

	/**
	 * Return a list of accessors that will be asked in turn to read/write a property.
	 */
	/**
	 * 返回访问者列表，依次要求他们读取/写入属性。 
	 * 
	 */
	List<PropertyAccessor> getPropertyAccessors();

	/**
	 * Return a list of resolvers that will be asked in turn to locate a constructor.
	 */
	/**
	 * 返回一个解析器列表，该列表将依次被要求查找构造函数。 
	 * 
	 */
	List<ConstructorResolver> getConstructorResolvers();

	/**
	 * Return a list of resolvers that will be asked in turn to locate a method.
	 */
	/**
	 * 返回解析器列表，系统将依次要求其定位方法。 
	 * 
	 */
	List<MethodResolver> getMethodResolvers();

	/**
	 * Return a bean resolver that can look up beans by name.
	 */
	/**
	 * 返回一个可以通过名称查找bean的bean解析器。 
	 * 
	 */
	@Nullable
	BeanResolver getBeanResolver();

	/**
	 * Return a type locator that can be used to find types, either by short or
	 * fully qualified name.
	 */
	/**
	 * 返回一个类型定位符，可用于按简短名称或完全限定名称查找类型。 
	 * 
	 */
	TypeLocator getTypeLocator();

	/**
	 * Return a type converter that can convert (or coerce) a value from one type to another.
	 */
	/**
	 * 返回可以将值从一种类型转换（或强制）为另一种类型的类型转换器。 
	 * 
	 */
	TypeConverter getTypeConverter();

	/**
	 * Return a type comparator for comparing pairs of objects for equality.
	 */
	/**
	 * 返回类型比较器，以比较对象对是否相等。 
	 * 
	 */
	TypeComparator getTypeComparator();

	/**
	 * Return an operator overloader that may support mathematical operations
	 * between more than the standard set of types.
	 */
	/**
	 * 返回一个运算符重载程序，该重载程序可能支持比标准类型集更多的数学运算。 
	 * 
	 */
	OperatorOverloader getOperatorOverloader();

	/**
	 * Set a named variable within this evaluation context to a specified value.
	 * @param name variable to set
	 * @param value value to be placed in the variable
	 */
	/**
	 * 在此评估上下文中将命名变量设置为指定值。 
	 *  
	 * @param 名称变量，用于设置要放置在变量中的
	 * @param 值
	 */
	void setVariable(String name, @Nullable Object value);

	/**
	 * Look up a named variable within this evaluation context.
	 * @param name variable to lookup
	 * @return the value of the variable, or {@code null} if not found
	 */
	/**
	 * 在此评估上下文中查找命名变量。 
	 *  
	 * @param 要查找的名称变量
	 * @return 变量的值，如果找不到，则为{@code  null}
	 */
	@Nullable
	Object lookupVariable(String name);

}
