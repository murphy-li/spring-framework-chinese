/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

/**
 * MethodExecutors are built by the resolvers and can be cached by the infrastructure to
 * repeat an operation quickly without going back to the resolvers. For example, the
 * particular method to run on an object may be discovered by the reflection method
 * resolver - it will then build a MethodExecutor that executes that method and the
 * MethodExecutor can be reused without needing to go back to the resolver to discover
 * the method again.
 *
 * <p>They can become stale, and in that case should throw an AccessException:
 * This will cause the infrastructure to go back to the resolvers to ask for a new one.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * MethodExecutor由解析器构建，并且可以由基础结构缓存以快速重复操作，而无需返回解析器。 
 * 例如，在对象上运行的特定方法可以由反射方法解析器发现-然后它将构建一个执行该方法的MethodExecutor，并且可以重用该MethodExecutor，而无需返回到解析器再次发现该方法。 
 *  <p>它们可能会变得过时，并且在这种情况下，应引发AccessException：这将导致基础结构返回到解析器以请求新的解析器。 
 *  @author 安迪·克莱门特@始于3.0
 */
public interface MethodExecutor {

	/**
	 * Execute a command using the specified arguments, and using the specified expression state.
	 * @param context the evaluation context in which the command is being executed
	 * @param target the target object of the call - null for static methods
	 * @param arguments the arguments to the executor, should match (in terms of number
	 * and type) whatever the command will need to run
	 * @return the value returned from execution
	 * @throws AccessException if there is a problem executing the command or the
	 * MethodExecutor is no longer valid
	 */
	/**
	 * 使用指定的参数并使用指定的表达式状态执行命令。 
	 *  
	 * @param 上下文在其中执行命令的评估上下文
	 * @param 以调用的目标对象为目标-静态方法为null。 
	 * 
	 * @param 参数执行者的参数应匹配（就数字和类型），如果执行命令时遇到问题或MethodExecutor不再有效，则执行该命令所需的命令
	 * @return 从执行
	 * @throws  AccessException返回的值
	 */
	TypedValue execute(EvaluationContext context, Object target, Object... arguments) throws AccessException;

}
