/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression.common;

import org.springframework.core.convert.TypeDescriptor;
import org.springframework.expression.EvaluationContext;
import org.springframework.expression.EvaluationException;
import org.springframework.expression.TypeConverter;
import org.springframework.expression.TypedValue;
import org.springframework.lang.Nullable;
import org.springframework.util.ClassUtils;

/**
 * Common utility functions that may be used by any Expression Language provider.
 *
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 任何表达式语言提供程序都可以使用的通用实用程序功能。 
 *  @author 安迪·克莱门特@author  Juergen Hoeller @从3.0开始
 */
public abstract class ExpressionUtils {

	/**
	 * Determines if there is a type converter available in the specified context and
	 * attempts to use it to convert the supplied value to the specified type. Throws an
	 * exception if conversion is not possible.
	 * @param context the evaluation context that may define a type converter
	 * @param typedValue the value to convert and a type descriptor describing it
	 * @param targetType the type to attempt conversion to
	 * @return the converted value
	 * @throws EvaluationException if there is a problem during conversion or conversion
	 * of the value to the specified type is not supported
	 */
	/**
	 * 确定在指定的上下文中是否存在类型转换器，并尝试使用它将提供的值转换为指定的类型。 
	 * 如果无法进行转换，则引发异常。 
	 *  
	 * @param 上下文可以定义类型转换器的评估上下文
	 * @param  typedValue要转换的值和描述它的类型描述符
	 * @param  targetType尝试转换为
	 * @return 转换后的值<
	 * @throws的类型> EvaluationException如果在转换期间存在问题或不支持将值转换为指定类型
	 */
	@SuppressWarnings("unchecked")
	@Nullable
	public static <T> T convertTypedValue(
			@Nullable EvaluationContext context, TypedValue typedValue, @Nullable Class<T> targetType) {

		Object value = typedValue.getValue();
		if (targetType == null) {
			return (T) value;
		}
		if (context != null) {
			return (T) context.getTypeConverter().convertValue(
					value, typedValue.getTypeDescriptor(), TypeDescriptor.valueOf(targetType));
		}
		if (ClassUtils.isAssignableValue(targetType, value)) {
			return (T) value;
		}
		throw new EvaluationException("Cannot convert value '" + value + "' to type '" + targetType.getName() + "'");
	}

	/**
	 * Attempt to convert a typed value to an int using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为int。 
	 * 
	 */
	public static int toInt(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Integer.class);
	}

	/**
	 * Attempt to convert a typed value to a boolean using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为布尔值。 
	 * 
	 */
	public static boolean toBoolean(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Boolean.class);
	}

	/**
	 * Attempt to convert a typed value to a double using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为双精度型。 
	 * 
	 */
	public static double toDouble(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Double.class);
	}

	/**
	 * Attempt to convert a typed value to a long using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为long型。 
	 * 
	 */
	public static long toLong(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Long.class);
	}

	/**
	 * Attempt to convert a typed value to a char using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为char。 
	 * 
	 */
	public static char toChar(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Character.class);
	}

	/**
	 * Attempt to convert a typed value to a short using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为short。 
	 * 
	 */
	public static short toShort(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Short.class);
	}

	/**
	 * Attempt to convert a typed value to a float using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为浮点型。 
	 * 
	 */
	public static float toFloat(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Float.class);
	}

	/**
	 * Attempt to convert a typed value to a byte using the supplied type converter.
	 */
	/**
	 * 尝试使用提供的类型转换器将类型化的值转换为字节。 
	 * 
	 */
	public static byte toByte(TypeConverter typeConverter, TypedValue typedValue) {
		return convertValue(typeConverter, typedValue, Byte.class);
	}

	@SuppressWarnings("unchecked")
	private static <T> T convertValue(TypeConverter typeConverter, TypedValue typedValue, Class<T> targetType) {
		Object result = typeConverter.convertValue(typedValue.getValue(), typedValue.getTypeDescriptor(),
				TypeDescriptor.valueOf(targetType));
		if (result == null) {
			throw new IllegalStateException("Null conversion result for value [" + typedValue.getValue() + "]");
		}
		return (T) result;
	}

}
