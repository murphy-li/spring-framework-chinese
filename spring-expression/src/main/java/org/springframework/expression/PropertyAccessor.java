/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import org.springframework.lang.Nullable;

/**
 * A property accessor is able to read from (and possibly write to) an object's properties.
 *
 * <p>This interface places no restrictions, and so implementors are free to access properties
 * directly as fields or through getters or in any other way they see as appropriate.
 *
 * <p>A resolver can optionally specify an array of target classes for which it should be
 * called. However, if it returns {@code null} from {@link #getSpecificTargetClasses()},
 * it will be called for all property references and given a chance to determine if it
 * can read or write them.
 *
 * <p>Property resolvers are considered to be ordered, and each will be called in turn.
 * The only rule that affects the call order is that any resolver naming the target
 * class directly in {@link #getSpecificTargetClasses()} will be called first, before
 * the general resolvers.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * 属性访问器能够读取（甚至可能写入）对象的属性。 
 *  <p>此接口没有任何限制，因此实现者可以自由地直接作为字段或通过getter或以他们认为合适的任何其他方式来访问属性。 
 *  <p>解析器可以选择指定应为其调用的目标类的数组。 
 * 但是，如果它从{@link  #getSpecificTargetClasses（）}返回{@code  null}，则将为所有属性引用调用它，并有机会确定它是否可以读取或写入它们。 
 *  <p>属性解析器被认为是有序的，并且每个将依次调用。 
 * 唯一影响调用顺序的规则是，在通用解析器之前，将首先调用直接在{@link  #getSpecificTargetClasses（）}中命名目标类的解析器。 
 *  @author 安迪·克莱门特@始于3.0
 */
public interface PropertyAccessor {

	/**
	 * Return an array of classes for which this resolver should be called.
	 * <p>Returning {@code null} indicates this is a general resolver that
	 * can be called in an attempt to resolve a property on any type.
	 * @return an array of classes that this resolver is suitable for
	 * (or {@code null} if a general resolver)
	 */
	/**
	 * 返回应为其调用此解析器的类的数组。 
	 *  <p>返回{@code  null}表示这是一个通用解析程序，可以调用它来解析任何类型的属性。 
	 *  
	 * @return 此解析器适合的类的数组（如果是通用解析器，则为{@code  null}）
	 */
	@Nullable
	Class<?>[] getSpecificTargetClasses();

	/**
	 * Called to determine if a resolver instance is able to access a specified property
	 * on a specified target object.
	 * @param context the evaluation context in which the access is being attempted
	 * @param target the target object upon which the property is being accessed
	 * @param name the name of the property being accessed
	 * @return true if this resolver is able to read the property
	 * @throws AccessException if there is any problem determining whether the property can be read
	 */
	/**
	 * 调用以确定解析程序实例是否能够访问指定目标对象上的指定属性。 
	 *  
	 * @param 上下文尝试在其中进行访问的评估上下文
	 * @param 以正在访问属性的目标对象为目标
	 * @param 名称正在访问的属性的名称
	 * @return 如果此解析器为true如果确定是否可以读取属性有任何问题，则能够读取属性
	 * @throws  AccessException
	 */
	boolean canRead(EvaluationContext context, @Nullable Object target, String name) throws AccessException;

	/**
	 * Called to read a property from a specified target object.
	 * Should only succeed if {@link #canRead} also returns {@code true}.
	 * @param context the evaluation context in which the access is being attempted
	 * @param target the target object upon which the property is being accessed
	 * @param name the name of the property being accessed
	 * @return a TypedValue object wrapping the property value read and a type descriptor for it
	 * @throws AccessException if there is any problem accessing the property value
	 */
	/**
	 * 调用以从指定的目标对象读取属性。 
	 * 仅当{@link  #canRead}也返回{@code  true}时，成功。 
	 *  
	 * @param 上下文尝试在其中进行访问的评估上下文
	 * @param 以要访问其属性的目标对象为目标
	 * @param 命名要访问的属性的名称
	 * @return 一个TypedValue对象包装如果访问属性值有任何问题，则读取的属性值及其类型描述符
	 * @throws  AccessException
	 */
	TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException;

	/**
	 * Called to determine if a resolver instance is able to write to a specified
	 * property on a specified target object.
	 * @param context the evaluation context in which the access is being attempted
	 * @param target the target object upon which the property is being accessed
	 * @param name the name of the property being accessed
	 * @return true if this resolver is able to write to the property
	 * @throws AccessException if there is any problem determining whether the
	 * property can be written to
	 */
	/**
	 * 调用以确定解析程序实例是否能够写入指定目标对象上的指定属性。 
	 *  
	 * @param 上下文尝试在其中进行访问的评估上下文
	 * @param 以正在访问属性的目标对象为目标
	 * @param 名称正在访问的属性的名称
	 * @return 如果此解析器为true如果在确定是否可以将属性写入时遇到任何问题，则可以写入属性
	 * @throws  AccessException
	 */
	boolean canWrite(EvaluationContext context, @Nullable Object target, String name) throws AccessException;

	/**
	 * Called to write to a property on a specified target object.
	 * Should only succeed if {@link #canWrite} also returns {@code true}.
	 * @param context the evaluation context in which the access is being attempted
	 * @param target the target object upon which the property is being accessed
	 * @param name the name of the property being accessed
	 * @param newValue the new value for the property
	 * @throws AccessException if there is any problem writing to the property value
	 */
	/**
	 * 调用以写入指定目标对象上的属性。 
	 * 仅当{@link  #canWrite}还返回{@code  true}时才应该成功。 
	 *  
	 * @param 上下文尝试在其中进行访问的评估上下文
	 * @param 以正在访问其属性的目标对象为目标
	 * @param 名称正在访问的属性的名称
	 * @param  newValue新值对于属性
	 * @throws  AccessException，如果写入属性值有任何问题
	 */
	void write(EvaluationContext context, @Nullable Object target, String name, @Nullable Object newValue)
			throws AccessException;

}
