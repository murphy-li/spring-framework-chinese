/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import java.util.List;

import org.springframework.core.convert.TypeDescriptor;
import org.springframework.lang.Nullable;

/**
 * A constructor resolver attempts locate a constructor and returns a ConstructorExecutor
 * that can be used to invoke that constructor. The ConstructorExecutor will be cached but
 * if it 'goes stale' the resolvers will be called again.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * 构造函数解析器尝试查找构造函数，并返回可用于调用该构造函数的ConstructorExecutor。 
 *  ConstructorExecutor将被缓存，但是如果它"过时"，则将再次调用解析器。 
 *  @author 安迪·克莱门特@始于3.0
 */
@FunctionalInterface
public interface ConstructorResolver {

	/**
	 * Within the supplied context determine a suitable constructor on the supplied type
	 * that can handle the specified arguments. Return a ConstructorExecutor that can be
	 * used to invoke that constructor (or {@code null} if no constructor could be found).
	 * @param context the current evaluation context
	 * @param typeName the type upon which to look for the constructor
	 * @param argumentTypes the arguments that the constructor must be able to handle
	 * @return a ConstructorExecutor that can invoke the constructor, or null if non found
	 */
	/**
	 * 在提供的上下文中，根据提供的类型确定一个合适的构造函数，该构造函数可以处理指定的参数。 
	 * 返回一个可用于调用该构造函数的ConstructorExecutor（如果找不到构造函数，则返回{@code  null}）。 
	 *  
	 * @param 上下文当前评估上下文
	 * @param  typeName查找构造函数的类型
	 * @param  argumentsTypes构造函数必须能够处理的参数
	 * @return 可以调用构造函数的ConstructorExecutor，如果未找到，则返回null
	 */
	@Nullable
	ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes)
			throws AccessException;

}
