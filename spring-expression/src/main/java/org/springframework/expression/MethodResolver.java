/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import java.util.List;

import org.springframework.core.convert.TypeDescriptor;
import org.springframework.lang.Nullable;

/**
 * A method resolver attempts locate a method and returns a command executor that can be
 * used to invoke that method. The command executor will be cached but if it 'goes stale'
 * the resolvers will be called again.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * 方法解析器尝试找到方法，并返回可用于调用该方法的命令执行程序。 
 * 命令执行程序将被缓存，但是如果它"过时"，则将再次调用解析程序。 
 *  @author 安迪·克莱门特@始于3.0
 */
public interface MethodResolver {

	/**
	 * Within the supplied context determine a suitable method on the supplied object that
	 * can handle the specified arguments. Return a {@link MethodExecutor} that can be used
	 * to invoke that method, or {@code null} if no method could be found.
	 * @param context the current evaluation context
	 * @param targetObject the object upon which the method is being called
	 * @param argumentTypes the arguments that the constructor must be able to handle
	 * @return a MethodExecutor that can invoke the method, or null if the method cannot be found
	 */
	/**
	 * 在提供的上下文中，在提供的对象上确定可以处理指定参数的合适方法。 
	 * 返回可用于调用该方法的{@link  MethodExecutor}； 
	 * 如果找不到方法，则返回{@code  null}。 
	 *  
	 * @param 上下文当前评估上下文
	 * @param  targetObject在其上调用方法的对象
	 * @param 参数类型构造函数必须能够处理的参数
	 * @return 一个可以调用该方法的MethodExecutor，如果找不到该方法，则返回null
	 */
	@Nullable
	MethodExecutor resolve(EvaluationContext context, Object targetObject, String name,
			List<TypeDescriptor> argumentTypes) throws AccessException;

}
