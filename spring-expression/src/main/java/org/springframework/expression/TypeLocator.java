/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

/**
 * Implementers of this interface are expected to be able to locate types.
 * They may use a custom {@link ClassLoader} and/or deal with common
 * package prefixes (e.g. {@code java.lang}) however they wish.
 *
 * <p>See {@link org.springframework.expression.spel.support.StandardTypeLocator}
 * for an example implementation.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * 该接口的实现者应该能够找到类型。 
 * 他们可以根据需要使用自定义的{@link  ClassLoader}和/或处理常见的软件包前缀（例如{@code  java.lang}）。 
 *  <p>有关示例实现，请参见{@link  org.springframework.expression.spel.support.StandardTypeLocator}。 
 *  @author 安迪·克莱门特@始于3.0
 */
@FunctionalInterface
public interface TypeLocator {

	/**
	 * Find a type by name. The name may or may not be fully qualified
	 * (e.g. {@code String} or {@code java.lang.String}).
	 * @param typeName the type to be located
	 * @return the {@code Class} object representing that type
	 * @throws EvaluationException if there is a problem finding the type
	 */
	/**
	 * 通过名称查找类型。 
	 * 名称可能是完全限定的，也可能不是完全限定的（例如{@code  String}或{@code  java.lang.String}）。 
	 *  
	 * @param  typeName要定位的类型
	 * @return 表示该类型的{@code  Class}对象
	 * @throws  EvaluationException如果发现类型有问题
	 */
	Class<?> findType(String typeName) throws EvaluationException;

}
