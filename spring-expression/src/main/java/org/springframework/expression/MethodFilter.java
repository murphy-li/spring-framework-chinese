/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import java.lang.reflect.Method;
import java.util.List;

/**
 * MethodFilter instances allow SpEL users to fine tune the behaviour of the method
 * resolution process. Method resolution (which translates from a method name in an
 * expression to a real method to invoke) will normally retrieve candidate methods for
 * invocation via a simple call to 'Class.getMethods()' and will choose the first one that
 * is suitable for the input parameters. By registering a MethodFilter the user can
 * receive a callback and change the methods that will be considered suitable.
 *
 * @author Andy Clement
 * @since 3.0.1
 */
/**
 * MethodFilter实例使SpEL用户可以微调方法解析过程的行为。 
 * 方法解析（从表达式中的方法名称转换为要调用的真实方法）通常将通过对"Class.getMethods（）"的简单调用来检索候选方法以进行调用，并将选择适合输入的第一个方法参数。 
 * 通过注册MethodFilter，用户可以接收回调并更改将被认为合适的方法。 
 *  @author 安迪·克莱门特@3.0.1起
 */
@FunctionalInterface
public interface MethodFilter {

	/**
	 * Called by the method resolver to allow the SpEL user to organize the list of
	 * candidate methods that may be invoked. The filter can remove methods that should
	 * not be considered candidates and it may sort the results. The resolver will then
	 * search through the methods as returned from the filter when looking for a suitable
	 * candidate to invoke.
	 * @param methods the full list of methods the resolver was going to choose from
	 * @return a possible subset of input methods that may be sorted by order of relevance
	 */
	/**
	 * 由方法解析器调用，以允许SpEL用户组织可以调用的候选方法的列表。 
	 * 筛选器可以删除不应视为候选方法的方法，并且可以对结果进行排序。 
	 * 然后，当寻找合适的候选者来调用时，解析器将搜索从过滤器返回的方法。 
	 *  
	 * @param 方法解析程序将要从
	 * @return 选择的输入方法的可能子集的完整列表，可以按相关性顺序对其进行排序
	 */
	List<Method> filter(List<Method> methods);

}
