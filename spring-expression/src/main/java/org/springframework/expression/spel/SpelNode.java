/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression.spel;

import org.springframework.expression.EvaluationException;
import org.springframework.expression.TypedValue;
import org.springframework.lang.Nullable;

/**
 * Represents a node in the AST for a parsed expression.
 *
 * @author Andy Clement
 * @since 3.0
 */
/**
 * 表示AST中用于已解析表达式的节点。 
 *  @author 安迪·克莱门特@始于3.0
 */
public interface SpelNode {

	/**
	 * Evaluate the expression node in the context of the supplied expression state
	 * and return the value.
	 * @param expressionState the current expression state (includes the context)
	 * @return the value of this node evaluated against the specified state
	 */
	/**
	 * 在提供的表达式状态的上下文中评估表达式节点并返回该值。 
	 *  
	 * @param  expressionState当前表达式状态（包括上下文）
	 * @return 针对指定状态评估的此节点的值
	 */
	@Nullable
	Object getValue(ExpressionState expressionState) throws EvaluationException;

	/**
	 * Evaluate the expression node in the context of the supplied expression state
	 * and return the typed value.
	 * @param expressionState the current expression state (includes the context)
	 * @return the type value of this node evaluated against the specified state
	 */
	/**
	 * 在提供的表达式状态的上下文中评估表达式节点，并返回键入的值。 
	 *  
	 * @param  expressionState当前表达式状态（包括上下文）
	 * @return 根据指定状态评估的此节点的类型值
	 */
	TypedValue getTypedValue(ExpressionState expressionState) throws EvaluationException;

	/**
	 * Determine if this expression node will support a setValue() call.
	 * @param expressionState the current expression state (includes the context)
	 * @return true if the expression node will allow setValue()
	 * @throws EvaluationException if something went wrong trying to determine
	 * if the node supports writing
	 */
	/**
	 * 确定此表达式节点是否将支持setValue（）调用。 
	 *  
	 * @param  expressionState当前表达式状态（包括上下文）
	 * @return 如果表达式节点将允许setValue（），则为true 
	 * @throws  EvaluationException如果在尝试确定节点是否支持写入时出错
	 */
	boolean isWritable(ExpressionState expressionState) throws EvaluationException;

	/**
	 * Evaluate the expression to a node and then set the new value on that node.
	 * For example, if the expression evaluates to a property reference, then the
	 * property will be set to the new value.
	 * @param expressionState the current expression state (includes the context)
	 * @param newValue the new value
	 * @throws EvaluationException if any problem occurs evaluating the expression or
	 * setting the new value
	 */
	/**
	 * 将表达式求值到一个节点，然后在该节点上设置新值。 
	 * 例如，如果表达式求值为属性引用，则该属性将设置为新值。 
	 *  
	 * @param  expressionState当前表达式状态（包括上下文）
	 * @param  newValue新值
	 * @throws  EvaluationException如果在评估表达式或设置新值时发生任何问题
	 */
	void setValue(ExpressionState expressionState, @Nullable Object newValue) throws EvaluationException;

	/**
	 * Return the string form the this AST node.
	 * @return the string form
	 */
	/**
	 * 从此AST节点返回字符串。 
	 *  
	 * @return 字符串形式
	 */
	String toStringAST();

	/**
	 * Return the number of children under this node.
	 * @return the child count
	 */
	/**
	 * 返回此节点下的子级数。 
	 *  
	 * @return 子计数
	 */
	int getChildCount();

	/**
	 * Helper method that returns a SpelNode rather than an Antlr Tree node.
	 * @return the child node cast to a SpelNode
	 */
	/**
	 * 返回SpelNode而不是Antlr Tree节点的Helper方法。 
	 *  
	 * @return 子节点强制转换为SpelNode
	 */
	SpelNode getChild(int index);

	/**
	 * Determine the class of the object passed in, unless it is already a class object.
	 * @param obj the object that the caller wants the class of
	 * @return the class of the object if it is not already a class object,
	 * or {@code null} if the object is {@code null}
	 */
	/**
	 * 确定传入的对象的类，除非它已经是一个类对象。 
	 *  
	 * @param  obj调用方想要的类的对象
	 * @return 对象的类（如果还不是类对象）； 
	 * 如果对象不是{@code  null，则为{@code  null} }
	 */
	@Nullable
	Class<?> getObjectClass(@Nullable Object obj);

	/**
	 * Return the start position of this AST node in the expression string.
	 * @return the start position
	 */
	/**
	 * 返回此AST节点在表达式字符串中的开始位置。 
	 *  
	 * @return 开始位置
	 */
	int getStartPosition();

	/**
	 * Return the end position of this AST node in the expression string.
	 * @return the end position
	 */
	/**
	 * 返回此AST节点在表达式字符串中的结束位置。 
	 *  
	 * @return 结束位置
	 */
	int getEndPosition();

}
