/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression.spel.ast;

import org.springframework.expression.TypedValue;
import org.springframework.expression.spel.SpelEvaluationException;
import org.springframework.expression.spel.SpelMessage;
import org.springframework.lang.Nullable;

/**
 * Represents a reference to a value.  With a reference it is possible to get or set the
 * value. Passing around value references rather than the values themselves can avoid
 * incorrect duplication of operand evaluation. For example in 'list[index++]++' without
 * a value reference for 'list[index++]' it would be necessary to evaluate list[index++]
 * twice (once to get the value, once to determine where the value goes) and that would
 * double increment index.
 *
 * @author Andy Clement
 * @since 3.2
 */
/**
 * 表示对值的引用。 
 * 使用参考可以获取或设置该值。 
 * 传递值引用而不是值本身可以避免对操作数求值的错误重复。 
 * 例如，在"list [index ++] ++"中没有"list [index ++]"的值引用的情况下，有必要对list [index ++]进行两次评估（一次获取值，一次确定值去向），然后将使索引增加一倍。 
 *  @author  Andy Clement @自3.2起
 */
public interface ValueRef {

	/**
	 * Returns the value this ValueRef points to, it should not require expression
	 * component re-evaluation.
	 * @return the value
	 */
	/**
	 * 返回此ValueRef指向的值，它不要求表达式组件重新求值。 
	 *  
	 * @return 值
	 */
	TypedValue getValue();

	/**
	 * Sets the value this ValueRef points to, it should not require expression component
	 * re-evaluation.
	 * @param newValue the new value
	 */
	/**
	 * 设置此ValueRef指向的值，它不需要重新计算表达式组件。 
	 *  
	 * @param  newValue新值
	 */
	void setValue(@Nullable Object newValue);

	/**
	 * Indicates whether calling setValue(Object) is supported.
	 * @return true if setValue() is supported for this value reference.
	 */
	/**
	 * 指示是否支持调用setValue（Object）。 
	 *  
	 * @return 如果此值引用支持setValue（），则为true。 
	 * 
	 */
	boolean isWritable();


	/**
	 * A ValueRef for the null value.
	 */
	/**
	 * 空值的ValueRef。 
	 * 
	 */
	class NullValueRef implements ValueRef {

		static final NullValueRef INSTANCE = new NullValueRef();

		@Override
		public TypedValue getValue() {
			return TypedValue.NULL;
		}

		@Override
		public void setValue(@Nullable Object newValue) {
			// The exception position '0' isn't right but the overhead of creating
			// instances of this per node (where the node is solely for error reporting)
			// would be unfortunate.
			throw new SpelEvaluationException(0, SpelMessage.NOT_ASSIGNABLE, "null");
		}

		@Override
		public boolean isWritable() {
			return false;
		}
	}


	/**
	 * A ValueRef holder for a single value, which cannot be set.
	 */
	/**
	 * 单个值的ValueRef持有者，无法设置。 
	 * 
	 */
	class TypedValueHolderValueRef implements ValueRef {

		private final TypedValue typedValue;

		private final SpelNodeImpl node;  // used only for error reporting

		public TypedValueHolderValueRef(TypedValue typedValue, SpelNodeImpl node) {
			this.typedValue = typedValue;
			this.node = node;
		}

		@Override
		public TypedValue getValue() {
			return this.typedValue;
		}

		@Override
		public void setValue(@Nullable Object newValue) {
			throw new SpelEvaluationException(
					this.node.getStartPosition(), SpelMessage.NOT_ASSIGNABLE, this.node.toStringAST());
		}

		@Override
		public boolean isWritable() {
			return false;
		}
	}

}
