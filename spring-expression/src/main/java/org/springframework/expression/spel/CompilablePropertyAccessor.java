/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression.spel;

import org.springframework.asm.MethodVisitor;
import org.springframework.asm.Opcodes;
import org.springframework.expression.PropertyAccessor;

/**
 * A compilable property accessor is able to generate bytecode that represents
 * the access operation, facilitating compilation to bytecode of expressions
 * that use the accessor.
 *
 * @author Andy Clement
 * @since 4.1
 */
/**
 * 可编译的属性访问器能够生成表示访问操作的字节码，从而有助于编译为使用该访问器的表达式的字节码。 
 *  @author 安迪·克莱门特@始于4.1
 */
public interface CompilablePropertyAccessor extends PropertyAccessor, Opcodes {

	/**
	 * Return {@code true} if this property accessor is currently suitable for compilation.
	 */
	/**
	 * 如果此属性访问器当前适合编译，则返回{@code  true}。 
	 * 
	 */
	boolean isCompilable();

	/**
	 * Return the type of the accessed property - may only be known once an access has occurred.
	 */
	/**
	 * 返回所访问属性的类型-只有在发生访问后才能知道。 
	 * 
	 */
	Class<?> getPropertyType();

	/**
	 * Generate the bytecode the performs the access operation into the specified MethodVisitor
	 * using context information from the codeflow where necessary.
	 * @param propertyName the name of the property
	 * @param mv the Asm method visitor into which code should be generated
	 * @param cf the current state of the expression compiler
	 */
	/**
	 * 生成字节码，并在必要时使用来自代码流的上下文信息来执行对指定MethodVisitor的访问操作。 
	 *  
	 * @param  propertyName属性的名称
	 * @param  mv应该向其中生成代码的Asm方法访问者
	 * @param  cf表达式编译器的当前状态
	 */
	void generateCode(String propertyName, MethodVisitor mv, CodeFlow cf);

}
