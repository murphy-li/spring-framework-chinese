/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression.spel.support;

import java.lang.reflect.Method;

/**
 * A {@link org.springframework.expression.PropertyAccessor} variant for data binding
 * purposes, using reflection to access properties for reading and possibly writing.
 *
 * <p>A property can be referenced through a public getter method (when being read)
 * or a public setter method (when being written), and also as a public field.
 *
 * <p>This accessor is explicitly designed for user-declared properties and does not
 * resolve technical properties on {@code java.lang.Object} or {@code java.lang.Class}.
 * For unrestricted resolution, choose {@link ReflectivePropertyAccessor} instead.
 *
 * @author Juergen Hoeller
 * @since 4.3.15
 * @see #forReadOnlyAccess()
 * @see #forReadWriteAccess()
 * @see SimpleEvaluationContext
 * @see StandardEvaluationContext
 * @see ReflectivePropertyAccessor
 */
/**
 * 一个{@link  org.springframework.expression.PropertyAccessor}变体，用于数据绑定，它使用反射来访问属性以进行读取和写入。 
 *  <p>可以通过公共getter方法（在读取时）或公共setter方法（在编写时）以及作为公共字段来引用属性。 
 *  <p>此访问器是专门为用户声明的属性设计的，并且不会解析{@code  java.lang.Object}或{@code  java.lang.Class}上的技术属性。 
 * 对于不受限制的分辨率，请选择{@link  ReflectivePropertyAccessor}。 
 *  @author  Juergen Hoeller @4.3.15起
 * @see  #forReadOnlyAccess（）
 * @see  #forReadWriteAccess（）
 * @see  SimpleEvaluationContext 
 * @see  StandardEvaluationContext 
 * @see  ReflectivePropertyAccessor
 */
public final class DataBindingPropertyAccessor extends ReflectivePropertyAccessor {

	/**
	 * Create a new property accessor for reading and possibly also writing.
	 * @param allowWrite whether to also allow for write operations
	 * @see #canWrite
	 */
	/**
	 * 创建一个新的属性访问器以进行读取，也可以进行写入。 
	 *  
	 * @param  allowWrite是否也允许写操作
	 * @see  #canWrite
	 */
	private DataBindingPropertyAccessor(boolean allowWrite) {
		super(allowWrite);
	}

	@Override
	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {
		Class<?> clazz = method.getDeclaringClass();
		return (clazz != Object.class && clazz != Class.class && !ClassLoader.class.isAssignableFrom(targetClass));
	}


	/**
	 * Create a new data-binding property accessor for read-only operations.
	 */
	/**
	 * 为只读操作创建一个新的数据绑定属性访问器。 
	 * 
	 */
	public static DataBindingPropertyAccessor forReadOnlyAccess() {
		return new DataBindingPropertyAccessor(false);
	}

	/**
	 * Create a new data-binding property accessor for read-write operations.
	 */
	/**
	 * 创建一个新的数据绑定属性访问器以进行读写操作。 
	 * 
	 */
	public static DataBindingPropertyAccessor forReadWriteAccess() {
		return new DataBindingPropertyAccessor(true);
	}

}
