/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.expression;

import org.springframework.core.convert.TypeDescriptor;
import org.springframework.lang.Nullable;

/**
 * An expression capable of evaluating itself against context objects.
 * Encapsulates the details of a previously parsed expression string.
 * Provides a common abstraction for expression evaluation.
 *
 * @author Keith Donald
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
/**
 * 一种能够根据上下文对象求值的表达式。 
 * 封装以前解析的表达式字符串的详细信息。 
 * 提供用于表达式评估的通用抽象。 
 *  @author 基思·唐纳德@author 安迪·克莱门特@author  Juergen Hoeller @since 3.0
 */
public interface Expression {

	/**
	 * Return the original string used to create this expression (unmodified).
	 * @return the original expression string
	 */
	/**
	 * 返回用于创建此表达式的原始字符串（未修改）。 
	 *  
	 * @return 原始表达式字符串
	 */
	String getExpressionString();

	/**
	 * Evaluate this expression in the default standard context.
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在默认标准上下文中评估此表达式。 
	 *  
	 * @return 评估结果
	 * @throws  EvaluationException如果评估期间出现问题
	 */
	@Nullable
	Object getValue() throws EvaluationException;

	/**
	 * Evaluate the expression in the default context. If the result
	 * of the evaluation does not match (and cannot be converted to)
	 * the expected result type then an exception will be returned.
	 * @param desiredResultType the class the caller would like the result to be
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在默认上下文中评估表达式。 
	 * 如果评估结果与预期结果类型不匹配（并且不能转换为预期结果类型），则将返回异常。 
	 *  
	 * @param  requiredResultType调用方希望结果为
	 * @return 评估结果的类
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	<T> T getValue(@Nullable Class<T> desiredResultType) throws EvaluationException;

	/**
	 * Evaluate this expression against the specified root object.
	 * @param rootObject the root object against which to evaluate the expression
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 针对指定的根对象评估此表达式。 
	 *  
	 * @param  rootObject要对其评估表达式的根对象
	 * @return 评估结果
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	Object getValue(@Nullable Object rootObject) throws EvaluationException;

	/**
	 * Evaluate the expression in the default context against the specified root
	 * object. If the result of the evaluation does not match (and cannot be
	 * converted to) the expected result type then an exception will be returned.
	 * @param rootObject the root object against which to evaluate the expression
	 * @param desiredResultType the class the caller would like the result to be
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在默认上下文中针对指定的根对象评估表达式。 
	 * 如果评估结果与预期结果类型不匹配（并且不能转换为预期结果类型），则将返回异常。 
	 *  
	 * @param  rootObject要对其评估表达式的根对象
	 * @param  requiredResultType调用方希望结果为
	 * @return 评估结果的类
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	<T> T getValue(@Nullable Object rootObject, @Nullable Class<T> desiredResultType) throws EvaluationException;

	/**
	 * Evaluate this expression in the provided context and return the result
	 * of evaluation.
	 * @param context the context in which to evaluate the expression
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在提供的上下文中评估此表达式并返回评估结果。 
	 *  
	 * @param 上下文在其中评估表达式的上下文<@r​​eturn>评估结果
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	Object getValue(EvaluationContext context) throws EvaluationException;

	/**
	 * Evaluate this expression in the provided context and return the result
	 * of evaluation, but use the supplied root context as an override for any
	 * default root object specified in the context.
	 * @param context the context in which to evaluate the expression
	 * @param rootObject the root object against which to evaluate the expression
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在提供的上下文中评估此表达式并返回评估结果，但将提供的根上下文用作上下文中指定的任何默认根对象的替代。 
	 *  
	 * @param 上下文用来评估表达式的上下文
	 * @param  rootObject用来评估表达式的根对象
	 * @return 评估结果
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	Object getValue(EvaluationContext context, @Nullable Object rootObject) throws EvaluationException;

	/**
	 * Evaluate the expression in a specified context which can resolve references
	 * to properties, methods, types, etc. The type of the evaluation result is
	 * expected to be of a particular class and an exception will be thrown if it
	 * is not and cannot be converted to that type.
	 * @param context the context in which to evaluate the expression
	 * @param desiredResultType the class the caller would like the result to be
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在指定的上下文中评估表达式，该表达式可以解析对属性，方法，类型等的引用。 
	 * 评估结果的类型应为特定类，否则将引发异常，并且不能将其转换为该异常类型。 
	 *  
	 * @param 上下文在其中评估表达式的上下文
	 * @param  desirableResultType调用方希望结果为
	 * @return 评估结果的类
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	@Nullable
	<T> T getValue(EvaluationContext context, @Nullable Class<T> desiredResultType) throws EvaluationException;

	/**
	 * Evaluate the expression in a specified context which can resolve references
	 * to properties, methods, types, etc. The type of the evaluation result is
	 * expected to be of a particular class and an exception will be thrown if it
	 * is not and cannot be converted to that type. The supplied root object
	 * overrides any default specified on the supplied context.
	 * @param context the context in which to evaluate the expression
	 * @param rootObject the root object against which to evaluate the expression
	 * @param desiredResultType the class the caller would like the result to be
	 * @return the evaluation result
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在指定的上下文中评估表达式，该表达式可以解析对属性，方法，类型等的引用。 
	 * 评估结果的类型应为特定类，否则将引发异常，并且不能将其转换为该异常类型。 
	 * 提供的根对象将覆盖提供的上下文中指定的任何默认值。 
	 *  
	 * @param 上下文在其中评估表达式的上下文
	 * @param  rootObject根在其上评估表达式的对象
	 * @param  requiredResultType调用者希望结果为
	 * @return 评估结果的类
	 * @throws  EvaluationException如果评估期间出现问题
	 */
	@Nullable
	<T> T getValue(EvaluationContext context, @Nullable Object rootObject, @Nullable Class<T> desiredResultType)
			throws EvaluationException;

	/**
	 * Return the most general type that can be passed to a {@link #setValue}
	 * method using the default context.
	 * @return the most general type of value that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回使用默认上下文可以传递给{@link  #setValue}方法的最通用类型。 
	 *  
	 * @return 可以在此上下文中设置的最通用的值类型
	 * @throws 如果确定类型存在问题，则为EvaluationException
	 */
	@Nullable
	Class<?> getValueType() throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(Object, Object)} method using the default context.
	 * @param rootObject the root object against which to evaluate the expression
	 * @return the most general type of value that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回使用默认上下文可以传递给{@link  #setValue（Object，Object）}方法的最通用类型。 
	 *  
	 * @param  rootObject用来评估表达式的根对象
	 * @return 可以在此上下文中设置的最通用的值类型
	 * @throws  EvaluationException如果确定类型的问题
	 */
	@Nullable
	Class<?> getValueType(@Nullable Object rootObject) throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(EvaluationContext, Object)} method for the given context.
	 * @param context the context in which to evaluate the expression
	 * @return the most general type of value that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回给定上下文可以传递给{@link  #setValue（EvaluationContext，Object）}方法的最通用类型。 
	 *  
	 * @param 上下文在其中评估表达式的上下文<@r​​eturn>可以在此上下文上设置的最通用值类型
	 * @throws 如果确定类型有问题，则为EvaluationException
	 */
	@Nullable
	Class<?> getValueType(EvaluationContext context) throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(EvaluationContext, Object, Object)} method for the given
	 * context. The supplied root object overrides any specified in the context.
	 * @param context the context in which to evaluate the expression
	 * @param rootObject the root object against which to evaluate the expression
	 * @return the most general type of value that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回给定上下文可以传递给{@link  #setValue（EvaluationContext，Object，Object）}方法的最通用类型。 
	 * 提供的根对象将覆盖上下文中指定的任何对象。 
	 *  
	 * @param 上下文在其中评估表达式的上下文
	 * @param  rootObject根在其上评估表达式的根对象
	 * @return 可以在此上下文中设置的最通用的值类型
	 * @throws  EvaluationException如果确定类型时有问题
	 */
	@Nullable
	Class<?> getValueType(EvaluationContext context, @Nullable Object rootObject) throws EvaluationException;

	/**
	 * Return the most general type that can be passed to a {@link #setValue}
	 * method using the default context.
	 * @return a type descriptor for values that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回使用默认上下文可以传递给{@link  #setValue}方法的最通用类型。 
	 *  
	 * @return 可在此上下文上设置的值的类型描述符
	 * @throws  EvaluationException如果确定类型有问题
	 */
	@Nullable
	TypeDescriptor getValueTypeDescriptor() throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(Object, Object)} method using the default context.
	 * @param rootObject the root object against which to evaluate the expression
	 * @return a type descriptor for values that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回使用默认上下文可以传递给{@link  #setValue（Object，Object）}方法的最通用类型。 
	 *  
	 * @param  rootObject用来评估表达式的根对象
	 * @return 一个类型描述符，用于在此上下文中可以设置的值
	 * @throws  EvaluationException如果确定类型有问题
	 */
	@Nullable
	TypeDescriptor getValueTypeDescriptor(@Nullable Object rootObject) throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(EvaluationContext, Object)} method for the given context.
	 * @param context the context in which to evaluate the expression
	 * @return a type descriptor for values that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回给定上下文可以传递给{@link  #setValue（EvaluationContext，Object）}方法的最通用类型。 
	 *  
	 * @param  context在其中评估表达式的上下文<@r​​eturn>类型描述符，用于可在此上下文中设置的值
	 * @throws  EvaluationException如果确定类型有问题
	 */
	@Nullable
	TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException;

	/**
	 * Return the most general type that can be passed to the
	 * {@link #setValue(EvaluationContext, Object, Object)} method for the given
	 * context. The supplied root object overrides any specified in the context.
	 * @param context the context in which to evaluate the expression
	 * @param rootObject the root object against which to evaluate the expression
	 * @return a type descriptor for values that can be set on this context
	 * @throws EvaluationException if there is a problem determining the type
	 */
	/**
	 * 返回给定上下文可以传递给{@link  #setValue（EvaluationContext，Object，Object）}方法的最通用类型。 
	 * 提供的根对象将覆盖上下文中指定的任何对象。 
	 *  
	 * @param  context在其中评估表达式的上下文
	 * @param  rootObject根在其上评估表达式的根对象
	 * @return 类型描述符，用于可在此上下文中设置的值
	 * @throws  EvaluationException确定类型是一个问题
	 */
	@Nullable
	TypeDescriptor getValueTypeDescriptor(EvaluationContext context, @Nullable Object rootObject) throws EvaluationException;

	/**
	 * Determine if an expression can be written to, i.e. setValue() can be called.
	 * @param rootObject the root object against which to evaluate the expression
	 * @return {@code true} if the expression is writable; {@code false} otherwise
	 * @throws EvaluationException if there is a problem determining if it is writable
	 */
	/**
	 * 确定是否可以写入表达式，即可以调用setValue（）。 
	 *  
	 * @param  rootObject表达式可写的根对象。 
	 * 
	 * @return  {@code  true}； 
	 * 如果表达式可写； 
	 *  {@code  false}否则为
	 * @throws  EvaluationException如果确定它是否可写时存在问题
	 */
	boolean isWritable(@Nullable Object rootObject) throws EvaluationException;

	/**
	 * Determine if an expression can be written to, i.e. setValue() can be called.
	 * @param context the context in which the expression should be checked
	 * @return {@code true} if the expression is writable; {@code false} otherwise
	 * @throws EvaluationException if there is a problem determining if it is writable
	 */
	/**
	 * 确定是否可以写入表达式，即可以调用setValue（）。 
	 *  
	 * @param  context如果表达式可写，则应在其中检查表达式的上下文<@r​​eturn> {@code  true}； 
	 *  {@code  false}否则为
	 * @throws  EvaluationException如果确定它是否可写时存在问题
	 */
	boolean isWritable(EvaluationContext context) throws EvaluationException;

	/**
	 * Determine if an expression can be written to, i.e. setValue() can be called.
	 * The supplied root object overrides any specified in the context.
	 * @param context the context in which the expression should be checked
	 * @param rootObject the root object against which to evaluate the expression
	 * @return {@code true} if the expression is writable; {@code false} otherwise
	 * @throws EvaluationException if there is a problem determining if it is writable
	 */
	/**
	 * 确定是否可以写入表达式，即可以调用setValue（）。 
	 * 提供的根对象将覆盖上下文中指定的任何对象。 
	 *  
	 * @param  context应当在其中检查表达式的上下文。 
	 * 
	 * @param  rootObject评估表达式的根对象。 
	 * 
	 * @return  {@code  true}，如果表达式可写； 
	 *  {@code  false}否则为
	 * @throws  EvaluationException如果确定它是否可写时存在问题
	 */
	boolean isWritable(EvaluationContext context, @Nullable Object rootObject) throws EvaluationException;

	/**
	 * Set this expression in the provided context to the value provided.
	 * @param rootObject the root object against which to evaluate the expression
	 * @param value the new value
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在提供的上下文中将此表达式设置为提供的值。 
	 *  
	 * @param  rootObject要对其评估表达式的根对象
	 * @param 为新值赋值
	 * @throws  EvaluationException如果评估期间出现问题
	 */
	void setValue(@Nullable Object rootObject, @Nullable Object value) throws EvaluationException;

	/**
	 * Set this expression in the provided context to the value provided.
	 * @param context the context in which to set the value of the expression
	 * @param value the new value
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在提供的上下文中将此表达式设置为提供的值。 
	 *  
	 * @param 上下文在其中设置表达式值的上下文
	 * @param 值新值
	 * @throws  EvaluationException如果评估期间出现问题
	 */
	void setValue(EvaluationContext context, @Nullable Object value) throws EvaluationException;

	/**
	 * Set this expression in the provided context to the value provided.
	 * The supplied root object overrides any specified in the context.
	 * @param context the context in which to set the value of the expression
	 * @param rootObject the root object against which to evaluate the expression
	 * @param value the new value
	 * @throws EvaluationException if there is a problem during evaluation
	 */
	/**
	 * 在提供的上下文中将此表达式设置为提供的值。 
	 * 提供的根对象将覆盖上下文中指定的任何对象。 
	 *  
	 * @param 上下文在其中设置表达式值的上下文
	 * @param  rootObject评估表达式的根对象
	 * @param 值新值
	 * @throws  EvaluationException如果评估期间存在问题
	 */
	void setValue(EvaluationContext context, @Nullable Object rootObject, @Nullable Object value) throws EvaluationException;

}
