/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.mail.javamail;

import java.io.InputStream;

import javax.mail.internet.MimeMessage;

import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;

/**
 * Extended {@link org.springframework.mail.MailSender} interface for JavaMail,
 * supporting MIME messages both as direct arguments and through preparation
 * callbacks. Typically used in conjunction with the {@link MimeMessageHelper}
 * class for convenient creation of JavaMail {@link MimeMessage MimeMessages},
 * including attachments etc.
 *
 * <p>Clients should talk to the mail sender through this interface if they need
 * mail functionality beyond {@link org.springframework.mail.SimpleMailMessage}.
 * The production implementation is {@link JavaMailSenderImpl}; for testing,
 * mocks can be created based on this interface. Clients will typically receive
 * the JavaMailSender reference through dependency injection.
 *
 * <p>The recommended way of using this interface is the {@link MimeMessagePreparator}
 * mechanism, possibly using a {@link MimeMessageHelper} for populating the message.
 * See {@link MimeMessageHelper MimeMessageHelper's javadoc} for an example.
 *
 * <p>The entire JavaMail {@link javax.mail.Session} management is abstracted
 * by the JavaMailSender. Client code should not deal with a Session in any way,
 * rather leave the entire JavaMail configuration and resource handling to the
 * JavaMailSender implementation. This also increases testability.
 *
 * <p>A JavaMailSender client is not as easy to test as a plain
 * {@link org.springframework.mail.MailSender} client, but still straightforward
 * compared to traditional JavaMail code: Just let {@link #createMimeMessage()}
 * return a plain {@link MimeMessage} created with a
 * {@code Session.getInstance(new Properties())} call, and check the passed-in
 * messages in your mock implementations of the various {@code send} methods.
 *
 * @author Juergen Hoeller
 * @since 07.10.2003
 * @see javax.mail.internet.MimeMessage
 * @see javax.mail.Session
 * @see JavaMailSenderImpl
 * @see MimeMessagePreparator
 * @see MimeMessageHelper
 */
/**
 * 扩展了JavaMail的{@link  org.springframework.mail.MailSender}接口，支持MIME消息作为直接参数并通过准备回调。 
 * 通常与{@link  MimeMessageHelper}类结合使用，以方便地创建JavaMail {@link  MimeMessage MimeMessages}，包括附件等。 
 * <p>如果客户需要邮件功能，则应通过此接口与邮件发件人联系除了{@link  org.springframework.mail.SimpleMailMessage}。 
 * 生产实现为{@link  JavaMailSenderImpl};为了进行测试，可以基于此接口创建模拟。 
 * 客户端通常将通过依赖项注入接收JavaMailSender参考。 
 *  <p>推荐使用此接口的方法是{@link  MimeMessagePreparator}机制，可能使用{@link  MimeMessageHelper}来填充消息。 
 * 有关示例，请参见{@link  MimeMessageHelper MimeMessageHelper的javadoc}。 
 *  <p>整个JavaMail {@link  javax.mail.Session}管理是由JavaMailSender抽象的。 
 * 客户端代码不应以任何方式处理会话，而应将整个JavaMail配置和资源处理留给JavaMailSender实现。 
 * 这也增加了可测试性。 
 *  <p> JavaMailSender客户端不像普通的{@link  org.springframework.mail.MailSender}客户端那样容易测试，但是与传统的JavaMail代码相比仍然很简单：只需让{@link  #createMimeMessage（） }返回使用{@code  Session.getInstance（new Properties（））}调用创建的普通{@link  MimeMessage}，并在各种{@code 的模拟实现中检查传递的消息发送}方法。 
 *  @author  Juergen Hoeller @2003年10月7日起
 * @see  javax.mail.internet.MimeMessage 
 * @see  javax.mail.Session 
 * @see  JavaMailSenderImpl 
 * @see  MimeMessagePreparator 
 * @see  MimeMessageHelper
 */
public interface JavaMailSender extends MailSender {

	/**
	 * Create a new JavaMail MimeMessage for the underlying JavaMail Session
	 * of this sender. Needs to be called to create MimeMessage instances
	 * that can be prepared by the client and passed to send(MimeMessage).
	 * @return the new MimeMessage instance
	 * @see #send(MimeMessage)
	 * @see #send(MimeMessage[])
	 */
	/**
	 * 为此发件人的基础JavaMail会话创建一个新的JavaMail MimeMessage。 
	 * 需要调用以创建可由客户端准备并传递给send（MimeMessage）的MimeMessage实例。 
	 *  
	 * @return 新的MimeMessage实例
	 * @see  #send（MimeMessage）
	 * @see  #send（MimeMessage []）
	 */
	MimeMessage createMimeMessage();

	/**
	 * Create a new JavaMail MimeMessage for the underlying JavaMail Session
	 * of this sender, using the given input stream as the message source.
	 * @param contentStream the raw MIME input stream for the message
	 * @return the new MimeMessage instance
	 * @throws org.springframework.mail.MailParseException
	 * in case of message creation failure
	*/
	/**
	 * 使用给定的输入流作为消息源，为此发送者的基础JavaMail Session创建一个新的JavaMail MimeMessage。 
	 *  
	 * @param  contentStream消息的原始MIME输入流
	 * @return 新的MimeMessage实例
	 * @throws  org.springframework.mail.MailParseException如果消息创建失败
	 */
	MimeMessage createMimeMessage(InputStream contentStream) throws MailException;

	/**
	 * Send the given JavaMail MIME message.
	 * The message needs to have been created with {@link #createMimeMessage()}.
	 * @param mimeMessage message to send
	 * @throws org.springframework.mail.MailAuthenticationException
	 * in case of authentication failure
	 * @throws org.springframework.mail.MailSendException
	 * in case of failure when sending the message
	 * @see #createMimeMessage
	 */
	/**
	 * 发送给定的JavaMail MIME消息。 
	 * 该消息需要使用{@link  #createMimeMessage（）}创建。 
	 *  
	 * @param  mimeMessage消息，用于在身份验证失败时发送
	 * @throws  org.springframework.mail.MailAuthenticationException 
	 * @throws  org.springframework.mail.MailSendException如果发送消息时失败
	 * @see  #createMimeMessage
	 */
	void send(MimeMessage mimeMessage) throws MailException;

	/**
	 * Send the given array of JavaMail MIME messages in batch.
	 * The messages need to have been created with {@link #createMimeMessage()}.
	 * @param mimeMessages messages to send
	 * @throws org.springframework.mail.MailAuthenticationException
	 * in case of authentication failure
	 * @throws org.springframework.mail.MailSendException
	 * in case of failure when sending a message
	 * @see #createMimeMessage
	 */
	/**
	 * 批量发送给定的JavaMail MIME消息数组。 
	 * 必须使用{@link  #createMimeMessage（）}创建消息。 
	 *  
	 * @param  mimeMessages消息以在验证失败的情况下发送
	 * @throws  org.springframework.mail.MailAuthenticationException 
	 * @throws  org.springframework.mail.MailSendException在发送消息失败的情况下
	 * @see  #createMimeMessage
	 */
	void send(MimeMessage... mimeMessages) throws MailException;

	/**
	 * Send the JavaMail MIME message prepared by the given MimeMessagePreparator.
	 * <p>Alternative way to prepare MimeMessage instances, instead of
	 * {@link #createMimeMessage()} and {@link #send(MimeMessage)} calls.
	 * Takes care of proper exception conversion.
	 * @param mimeMessagePreparator the preparator to use
	 * @throws org.springframework.mail.MailPreparationException
	 * in case of failure when preparing the message
	 * @throws org.springframework.mail.MailParseException
	 * in case of failure when parsing the message
	 * @throws org.springframework.mail.MailAuthenticationException
	 * in case of authentication failure
	 * @throws org.springframework.mail.MailSendException
	 * in case of failure when sending the message
	 */
	/**
	 * 发送由给定的MimeMessagePreparator准备的JavaMail MIME消息。 
	 *  <p>准备MimeMessage实例的替代方法，而不是{@link  #createMimeMessage（）}和{@link  #send（MimeMessage）}调用。 
	 * 负责适当的异常转换。 
	 *  
	 * @param  mimeMessagePreparator准备者在准备消息时失败时使用
	 * @throws  org.springframework.mail.MailPreparationException 
	 * @throws  org.springframework.mail.Mail.ParseException在解析消息<
	 * @throws时失败> org.springframework.mail.MailAuthenticationException如果发生身份验证失败
	 * @throws  org.springframework.mail.MailSendException如果发生消息发送失败
	 */
	void send(MimeMessagePreparator mimeMessagePreparator) throws MailException;

	/**
	 * Send the JavaMail MIME messages prepared by the given MimeMessagePreparators.
	 * <p>Alternative way to prepare MimeMessage instances, instead of
	 * {@link #createMimeMessage()} and {@link #send(MimeMessage[])} calls.
	 * Takes care of proper exception conversion.
	 * @param mimeMessagePreparators the preparator to use
	 * @throws org.springframework.mail.MailPreparationException
	 * in case of failure when preparing a message
	 * @throws org.springframework.mail.MailParseException
	 * in case of failure when parsing a message
	 * @throws org.springframework.mail.MailAuthenticationException
	 * in case of authentication failure
	 * @throws org.springframework.mail.MailSendException
	 * in case of failure when sending a message
	 */
	/**
	 * 发送由给定的MimeMessagePreparators准备的JavaMail MIME消息。 
	 *  <p>准备MimeMessage实例的替代方法，而不是{@link  #createMimeMessage（）}和{@link  #send（MimeMessage []）}调用。 
	 * 负责适当的异常转换。 
	 *  
	 * @param  mimeMessagePreparators准备者在准备消息时失败时使用
	 * @throws  org.springframework.mail.MailPreparationException 
	 * @throws  org.springframework.mail.Mail.ParseException在解析消息时失败<
	 * @throws > org.springframework.mail.MailAuthenticationException如果发生身份验证失败
	 * @throws  org.springframework.mail.MailSendException如果发生消息发送失败
	 */
	void send(MimeMessagePreparator... mimeMessagePreparators) throws MailException;

}
