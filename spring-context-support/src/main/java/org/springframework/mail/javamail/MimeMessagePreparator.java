/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.mail.javamail;

import javax.mail.internet.MimeMessage;

/**
 * Callback interface for the preparation of JavaMail MIME messages.
 *
 * <p>The corresponding {@code send} methods of {@link JavaMailSender}
 * will take care of the actual creation of a {@link MimeMessage} instance,
 * and of proper exception conversion.
 *
 * <p>It is often convenient to use a {@link MimeMessageHelper} for populating
 * the passed-in MimeMessage, in particular when working with attachments or
 * special character encodings.
 * See {@link MimeMessageHelper MimeMessageHelper's javadoc} for an example.
 *
 * @author Juergen Hoeller
 * @since 07.10.2003
 * @see JavaMailSender#send(MimeMessagePreparator)
 * @see JavaMailSender#send(MimeMessagePreparator[])
 * @see MimeMessageHelper
 */
/**
 * 用于编写JavaMail MIME消息的回调接口。 
 *  <p> {@link  JavaMailSender}的相应{@code  send}方法将处理{@link  MimeMessage}实例的实际创建以及适当的异常转换。 
 *  <p>使用{@link  MimeMessageHelper}来填充传入的MimeMessage通常很方便，尤其是在处理附件或特殊字符编码时。 
 * 有关示例，请参见{@link  MimeMessageHelper MimeMessageHelper的javadoc}。 
 *  @author  Juergen Hoeller @2003年10月7日起
 * @see  JavaMailSender＃send（MimeMessagePreparator）
 * @see  JavaMailSender＃send（MimeMessagePreparator []）
 * @see  MimeMessageHelper
 */
@FunctionalInterface
public interface MimeMessagePreparator {

	/**
	 * Prepare the given new MimeMessage instance.
	 * @param mimeMessage the message to prepare
	 * @throws javax.mail.MessagingException passing any exceptions thrown by MimeMessage
	 * methods through for automatic conversion to the MailException hierarchy
	 * @throws java.io.IOException passing any exceptions thrown by MimeMessage methods
	 * through for automatic conversion to the MailException hierarchy
	 * @throws Exception if mail preparation failed, for example when a
	 * FreeMarker template cannot be rendered for the mail text
	 */
	/**
	 * 准备给定的新MimeMessage实例。 
	 *  
	 * @param  mimeMessage消息准备
	 * @throws  javax.mail.MessagingException传递MimeMessage方法抛出的所有异常，以自动转换为MailException层次结构
	 * @throws  java.io.IOException传递MimeMessage方法抛出的所有异常用于自动转换为MailException层次结构
	 * @throws 如果邮件准备失败（例如，无法为邮件文本呈现FreeMarker模板时），则异常
	 */
	void prepare(MimeMessage mimeMessage) throws Exception;

}
