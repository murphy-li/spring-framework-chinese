/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling.quartz;

import org.springframework.core.NestedRuntimeException;
import org.springframework.util.MethodInvoker;

/**
 * Unchecked exception that wraps an exception thrown from a target method.
 * Propagated to the Quartz scheduler from a Job that reflectively invokes
 * an arbitrary target method.
 *
 * @author Juergen Hoeller
 * @since 2.5.3
 * @see MethodInvokingJobDetailFactoryBean
 */
/**
 * 包含从目标方法引发的异常的未经检查的异常。 
 * 从Job传播到Quartz调度程序，该Job反射性地调用任意目标方法。 
 *  @author  Juergen Hoeller @2.5.3起
 * @see  MethodInvokingJobDetailFactoryBean
 */
@SuppressWarnings("serial")
public class JobMethodInvocationFailedException extends NestedRuntimeException {

	/**
	 * Constructor for JobMethodInvocationFailedException.
	 * @param methodInvoker the MethodInvoker used for reflective invocation
	 * @param cause the root cause (as thrown from the target method)
	 */
	/**
	 * JobMethodInvocationFailedException的构造方法。 
	 *  
	 * @param  methodInvoker用于反射调用的MethodInvoker 
	 * @param 引起根本原因（从目标方法抛出）
	 */
	public JobMethodInvocationFailedException(MethodInvoker methodInvoker, Throwable cause) {
		super("Invocation of method '" + methodInvoker.getTargetMethod() +
				"' on target class [" + methodInvoker.getTargetClass() + "] failed", cause);
	}

}
