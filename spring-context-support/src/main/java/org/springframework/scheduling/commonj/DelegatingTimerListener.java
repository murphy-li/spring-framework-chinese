/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.scheduling.commonj;

import commonj.timers.Timer;
import commonj.timers.TimerListener;

import org.springframework.util.Assert;

/**
 * Simple TimerListener adapter that delegates to a given Runnable.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see commonj.timers.TimerListener
 * @see java.lang.Runnable
 * @deprecated as of 5.1, in favor of EE 7's
 * {@link org.springframework.scheduling.concurrent.DefaultManagedTaskScheduler}
 */
/**
 * 委托给定Runnable的简单TimerListener适配器。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  commonj.timers.TimerListener 
 * @see  java.lang.Runnable @从5.1开始不推荐使用，而支持EE 7的{@link  org.springframework.scheduling.concurrent .DefaultManagedTaskScheduler}
 */
@Deprecated
public class DelegatingTimerListener implements TimerListener {

	private final Runnable runnable;


	/**
	 * Create a new DelegatingTimerListener.
	 * @param runnable the Runnable implementation to delegate to
	 */
	/**
	 * 创建一个新的DelegatingTimerListener。 
	 *  
	 * @param  runnable Runnable实现委托给
	 */
	public DelegatingTimerListener(Runnable runnable) {
		Assert.notNull(runnable, "Runnable is required");
		this.runnable = runnable;
	}


	/**
	 * Delegates execution to the underlying Runnable.
	 */
	/**
	 * 将执行委托给基础的Runnable。 
	 * 
	 */
	@Override
	public void timerExpired(Timer timer) {
		this.runnable.run();
	}

}
