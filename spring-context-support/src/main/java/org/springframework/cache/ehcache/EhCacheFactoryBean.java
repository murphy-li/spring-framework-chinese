/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.ehcache;

import java.util.Set;

import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheException;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Ehcache;
import net.sf.ehcache.bootstrap.BootstrapCacheLoader;
import net.sf.ehcache.config.CacheConfiguration;
import net.sf.ehcache.constructs.blocking.BlockingCache;
import net.sf.ehcache.constructs.blocking.CacheEntryFactory;
import net.sf.ehcache.constructs.blocking.SelfPopulatingCache;
import net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;
import net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache;
import net.sf.ehcache.event.CacheEventListener;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.beans.factory.BeanNameAware;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.lang.Nullable;

/**
 * {@link FactoryBean} that creates a named EhCache {@link net.sf.ehcache.Cache} instance
 * (or a decorator that implements the {@link net.sf.ehcache.Ehcache} interface),
 * representing a cache region within an EhCache {@link net.sf.ehcache.CacheManager}.
 *
 * <p>If the specified named cache is not configured in the cache configuration descriptor,
 * this FactoryBean will construct an instance of a Cache with the provided name and the
 * specified cache properties and add it to the CacheManager for later retrieval. If some
 * or all properties are not set at configuration time, this FactoryBean will use defaults.
 *
 * <p>Note: If the named Cache instance is found, the properties will be ignored and the
 * Cache instance will be retrieved from the CacheManager.
 *
 * <p>Note: As of Spring 5.0, Spring's EhCache support requires EhCache 2.10 or higher.
 *
 * @author Juergen Hoeller
 * @author Dmitriy Kopylenko
 * @since 1.1.1
 * @see #setCacheManager
 * @see EhCacheManagerFactoryBean
 * @see net.sf.ehcache.Cache
 */
/**
 * {@link  FactoryBean}创建一个名为EhCache {@link  net.sf.ehcache.Cache}实例（或实现{@link  net.sf.ehcache.Ehcache}接口的装饰器），表示EhCache {@link  net.sf.ehcache.CacheManager}中的缓存区域。 
 *  <p>如果未在缓存配置描述符中配置指定的命名缓存，则此FactoryBean将使用提供的名称和指定的缓存属性构造一个Cache实例，并将其添加到CacheManager中以供以后检索。 
 * 如果在配置时未设置某些或所有属性，则此FactoryBean将使用默认值。 
 *  <p>注意：如果找到了命名的Cache实例，则将忽略属性，并从CacheManager中检索Cache实例。 
 *  <p>注意：从Spring 5.0开始，Spring的EhCache支持需要EhCache 2.10或更高版本。 
 *  @author  Juergen Hoeller @author  Dmitriy Kopylenko @从1.1.1开始
 * @see  #setCacheManager 
 * @see  EhCacheManagerFactoryBean 
 * @see  net.sf.ehcache.Cache
 */
public class EhCacheFactoryBean extends CacheConfiguration implements FactoryBean<Ehcache>, BeanNameAware, InitializingBean {

	protected final Log logger = LogFactory.getLog(getClass());

	@Nullable
	private CacheManager cacheManager;

	private boolean blocking = false;

	@Nullable
	private CacheEntryFactory cacheEntryFactory;

	@Nullable
	private BootstrapCacheLoader bootstrapCacheLoader;

	@Nullable
	private Set<CacheEventListener> cacheEventListeners;

	private boolean disabled = false;

	@Nullable
	private String beanName;

	@Nullable
	private Ehcache cache;


	public EhCacheFactoryBean() {
		setMaxEntriesLocalHeap(10000);
		setMaxEntriesLocalDisk(10000000);
		setTimeToLiveSeconds(120);
		setTimeToIdleSeconds(120);
	}


	/**
	 * Set a CacheManager from which to retrieve a named Cache instance.
	 * By default, {@code CacheManager.getInstance()} will be called.
	 * <p>Note that in particular for persistent caches, it is advisable to
	 * properly handle the shutdown of the CacheManager: Set up a separate
	 * EhCacheManagerFactoryBean and pass a reference to this bean property.
	 * <p>A separate EhCacheManagerFactoryBean is also necessary for loading
	 * EhCache configuration from a non-default config location.
	 * @see EhCacheManagerFactoryBean
	 * @see net.sf.ehcache.CacheManager#getInstance
	 */
	/**
	 * 设置一个CacheManager，从中检索命名的Cache实例。 
	 * 默认情况下，将调用{@code  CacheManager.getInstance（）}。 
	 *  <p>请注意，特别是对于持久性缓存，建议正确处理CacheManager的关闭：设置单独的EhCacheManagerFactoryBean并将引用传递给此bean属性。 
	 *  <p>从非默认配置位置加载EhCache配置时，还需要单独的EhCacheManagerFactoryBean。 
	 *  
	 * @see  EhCacheManagerFactoryBean 
	 * @see  net.sf.ehcache.CacheManager＃getInstance
	 */
	public void setCacheManager(CacheManager cacheManager) {
		this.cacheManager = cacheManager;
	}

	/**
	 * Set a name for which to retrieve or create a cache instance.
	 * Default is the bean name of this EhCacheFactoryBean.
	 */
	/**
	 * 设置要检索或创建缓存实例的名称。 
	 * 默认值为此EhCacheFactoryBean的bean名称。 
	 * 
	 */
	public void setCacheName(String cacheName) {
		setName(cacheName);
	}

	/**
	 * Set the time to live.
	 * @see #setTimeToLiveSeconds(long)
	 */
	/**
	 * 设定生存时间。 
	 *  
	 * @see  #setTimeToLiveSeconds（long）
	 */
	public void setTimeToLive(int timeToLive) {
		setTimeToLiveSeconds(timeToLive);
	}

	/**
	 * Set the time to idle.
	 * @see #setTimeToIdleSeconds(long)
	 */
	/**
	 * 将时间设置为空闲。 
	 *  
	 * @see  #setTimeToIdleSeconds（long）
	 */
	public void setTimeToIdle(int timeToIdle) {
		setTimeToIdleSeconds(timeToIdle);
	}

	/**
	 * Set the disk spool buffer size (in MB).
	 * @see #setDiskSpoolBufferSizeMB(int)
	 */
	/**
	 * 设置磁盘假脱机缓冲区大小（以MB为单位）。 
	 *  
	 * @see  #setDiskSpoolBufferSizeMB（int）
	 */
	public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {
		setDiskSpoolBufferSizeMB(diskSpoolBufferSize);
	}

	/**
	 * Set whether to use a blocking cache that lets read attempts block
	 * until the requested element is created.
	 * <p>If you intend to build a self-populating blocking cache,
	 * consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}.
	 * @see net.sf.ehcache.constructs.blocking.BlockingCache
	 * @see #setCacheEntryFactory
	 */
	/**
	 * 设置是否使用阻止缓存尝试直到创建所请求的元素之前的阻止缓存。 
	 *  <p>如果打算构建自填充的阻塞缓存，请考虑指定一个{@link  #setCacheEntryFactory CacheEntryFactory}。 
	 *  
	 * @see  net.sf.ehcache.constructs.blocking.BlockingCache 
	 * @see  #setCacheEntryFactory
	 */
	public void setBlocking(boolean blocking) {
		this.blocking = blocking;
	}

	/**
	 * Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}
	 * to use for a self-populating cache. If such a factory is specified,
	 * the cache will be decorated with EhCache's
	 * {@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}.
	 * <p>The specified factory can be of type
	 * {@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},
	 * which will lead to the use of an
	 * {@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}.
	 * <p>Note: Any such self-populating cache is automatically a blocking cache.
	 * @see net.sf.ehcache.constructs.blocking.SelfPopulatingCache
	 * @see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache
	 * @see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory
	 */
	/**
	 * 设置一个EhCache {@link  net.sf.ehcache.constructs.blocking.CacheEntryFactory}以用于自填充缓存。 
	 * 如果指定了这样的工厂，则缓存将使用EhCache的{@link  net.sf.ehcache.constructs.blocking.SelfPopulatingCache}装饰。 
	 *  <p>指定的工厂可以是{@link  net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory}类型，这将导致使用{@link  net.sf.ehcache.constructs.blocking .UpdatingSelfPopulatingCache}。 
	 *  <p>注意：任何此类自填充高速缓存都将自动成为阻塞高速缓存。 
	 *  
	 * @see  net.sf.ehcache.constructs.blocking.SelfPopulatingCache 
	 * @see  net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache 
	 * @see  net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory
	 */
	public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {
		this.cacheEntryFactory = cacheEntryFactory;
	}

	/**
	 * Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}
	 * for this cache, if any.
	 */
	/**
	 * 为此缓存设置一个EhCache {@link  net.sf.ehcache.bootstrap.BootstrapCacheLoader}。 
	 * 
	 */
	public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {
		this.bootstrapCacheLoader = bootstrapCacheLoader;
	}

	/**
	 * Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}
	 * to registered with this cache.
	 */
	/**
	 * 指定EhCache {@link  net.sf.ehcache.event.CacheEventListener缓存事件侦听器}以在此缓存中注册。 
	 * 
	 */
	public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {
		this.cacheEventListeners = cacheEventListeners;
	}

	/**
	 * Set whether this cache should be marked as disabled.
	 * @see net.sf.ehcache.Cache#setDisabled
	 */
	/**
	 * 设置是否将此缓存标记为禁用。 
	 *  
	 * @see  net.sf.ehcache.Cache＃setDisabled
	 */
	public void setDisabled(boolean disabled) {
		this.disabled = disabled;
	}

	@Override
	public void setBeanName(String name) {
		this.beanName = name;
	}


	@Override
	public void afterPropertiesSet() throws CacheException {
		// If no cache name given, use bean name as cache name.
		String cacheName = getName();
		if (cacheName == null) {
			cacheName = this.beanName;
			if (cacheName != null) {
				setName(cacheName);
			}
		}

		// If no CacheManager given, fetch the default.
		if (this.cacheManager == null) {
			if (logger.isDebugEnabled()) {
				logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'");
			}
			this.cacheManager = CacheManager.getInstance();
		}

		synchronized (this.cacheManager) {
			// Fetch cache region: If none with the given name exists, create one on the fly.
			Ehcache rawCache;
			boolean cacheExists = this.cacheManager.cacheExists(cacheName);

			if (cacheExists) {
				if (logger.isDebugEnabled()) {
					logger.debug("Using existing EhCache cache region '" + cacheName + "'");
				}
				rawCache = this.cacheManager.getEhcache(cacheName);
			}
			else {
				if (logger.isDebugEnabled()) {
					logger.debug("Creating new EhCache cache region '" + cacheName + "'");
				}
				rawCache = createCache();
				rawCache.setBootstrapCacheLoader(this.bootstrapCacheLoader);
			}

			if (this.cacheEventListeners != null) {
				for (CacheEventListener listener : this.cacheEventListeners) {
					rawCache.getCacheEventNotificationService().registerListener(listener);
				}
			}

			// Needs to happen after listener registration but before setStatisticsEnabled
			if (!cacheExists) {
				this.cacheManager.addCache(rawCache);
			}

			if (this.disabled) {
				rawCache.setDisabled(true);
			}

			Ehcache decoratedCache = decorateCache(rawCache);
			if (decoratedCache != rawCache) {
				this.cacheManager.replaceCacheWithDecoratedCache(rawCache, decoratedCache);
			}
			this.cache = decoratedCache;
		}
	}

	/**
	 * Create a raw Cache object based on the configuration of this FactoryBean.
	 */
	/**
	 * 根据此FactoryBean的配置创建一个原始Cache对象。 
	 * 
	 */
	protected Cache createCache() {
		return new Cache(this);
	}

	/**
	 * Decorate the given Cache, if necessary.
	 * @param cache the raw Cache object, based on the configuration of this FactoryBean
	 * @return the (potentially decorated) cache object to be registered with the CacheManager
	 */
	/**
	 * 如有必要，装饰给定的缓存。 
	 *  
	 * @param 根据此FactoryBean的配置来缓存原始Cache对象。 
	 * 
	 * @return 要注册到CacheManager的（可能修饰的）缓存对象。 
	 * 
	 */
	protected Ehcache decorateCache(Ehcache cache) {
		if (this.cacheEntryFactory != null) {
			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {
				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory);
			}
			else {
				return new SelfPopulatingCache(cache, this.cacheEntryFactory);
			}
		}
		if (this.blocking) {
			return new BlockingCache(cache);
		}
		return cache;
	}


	@Override
	@Nullable
	public Ehcache getObject() {
		return this.cache;
	}

	/**
	 * Predict the particular {@code Ehcache} implementation that will be returned from
	 * {@link #getObject()} based on logic in {@link #createCache()} and
	 * {@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.
	 */
	/**
	 * 根据{@link  #createCache（）}和{@link  #decorateCache（Ehcache）中的逻辑，预测将从{@link  #getObject（）}返回的特定{@code  Ehcache}实现）}由{@link  #afterPropertiesSet（）}安排。 
	 * 
	 */
	@Override
	public Class<? extends Ehcache> getObjectType() {
		if (this.cache != null) {
			return this.cache.getClass();
		}
		if (this.cacheEntryFactory != null) {
			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {
				return UpdatingSelfPopulatingCache.class;
			}
			else {
				return SelfPopulatingCache.class;
			}
		}
		if (this.blocking) {
			return BlockingCache.class;
		}
		return Cache.class;
	}

	@Override
	public boolean isSingleton() {
		return true;
	}

}
