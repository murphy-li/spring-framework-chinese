/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.cache.ehcache;

import java.io.IOException;
import java.io.InputStream;

import net.sf.ehcache.CacheException;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.config.Configuration;
import net.sf.ehcache.config.ConfigurationFactory;

import org.springframework.core.io.Resource;

/**
 * Convenient builder methods for EhCache 2.5+ {@link CacheManager} setup,
 * providing easy programmatic bootstrapping from a Spring-provided resource.
 * This is primarily intended for use within {@code @Bean} methods in a
 * Spring configuration class.
 *
 * <p>These methods are a simple alternative to custom {@link CacheManager} setup
 * code. For any advanced purposes, consider using {@link #parseConfiguration},
 * customizing the configuration object, and then calling the
 * {@link CacheManager#CacheManager(Configuration)} constructor.
 *
 * @author Juergen Hoeller
 * @since 4.1
 */
/**
 * 用于EhCache 2.5+ {@link  CacheManager}设置的便捷构建器方法，可从Spring提供的资源中轻松进行编程式引导。 
 * 它主要用于Spring配置类的{@code  @Bean}方法中。 
 *  <p>这些方法是自定义{@link  CacheManager}安装代码的简单替代方法。 
 * 对于任何高级用途，请考虑使用{@link  #parseConfiguration}，自定义配置对象，然后调用{@link  CacheManager＃CacheManager（Configuration）}构造函数。 
 *  @author  Juergen Hoeller @始于4.1
 */
public abstract class EhCacheManagerUtils {

	/**
	 * Build an EhCache {@link CacheManager} from the default configuration.
	 * <p>The CacheManager will be configured from "ehcache.xml" in the root of the class path
	 * (that is, default EhCache initialization - as defined in the EhCache docs - will apply).
	 * If no configuration file can be found, a fail-safe fallback configuration will be used.
	 * @return the new EhCache CacheManager
	 * @throws CacheException in case of configuration parsing failure
	 */
	/**
	 * 从默认配置构建EhCache {@link  CacheManager}。 
	 *  <p>将在类路径的根目录中从"ehcache.xml"配置CacheManager（即，将应用EhCache文档中定义的默认EhCache初始化）。 
	 * 如果找不到配置文件，则将使用故障安全后备配置。 
	 *  
	 * @return 新的EhCache CacheManager 
	 * @throws  CacheException，以防配置解析失败
	 */
	public static CacheManager buildCacheManager() throws CacheException {
		return new CacheManager(ConfigurationFactory.parseConfiguration());
	}

	/**
	 * Build an EhCache {@link CacheManager} from the default configuration.
	 * <p>The CacheManager will be configured from "ehcache.xml" in the root of the class path
	 * (that is, default EhCache initialization - as defined in the EhCache docs - will apply).
	 * If no configuration file can be found, a fail-safe fallback configuration will be used.
	 * @param name the desired name of the cache manager
	 * @return the new EhCache CacheManager
	 * @throws CacheException in case of configuration parsing failure
	 */
	/**
	 * 从默认配置构建EhCache {@link  CacheManager}。 
	 *  <p>将在类路径的根目录中从"ehcache.xml"配置CacheManager（即，将应用EhCache文档中定义的默认EhCache初始化）。 
	 * 如果找不到配置文件，则将使用故障安全后备配置。 
	 *  
	 * @param 命名缓存管理器的所需名称
	 * @return 新的EhCache CacheManager 
	 * @throws  CacheException，以防配置解析失败
	 */
	public static CacheManager buildCacheManager(String name) throws CacheException {
		Configuration configuration = ConfigurationFactory.parseConfiguration();
		configuration.setName(name);
		return new CacheManager(configuration);
	}

	/**
	 * Build an EhCache {@link CacheManager} from the given configuration resource.
	 * @param configLocation the location of the configuration file (as a Spring resource)
	 * @return the new EhCache CacheManager
	 * @throws CacheException in case of configuration parsing failure
	 */
	/**
	 * 从给定的配置资源构建一个EhCache {@link  CacheManager}。 
	 *  
	 * @param  configLocation配置文件的位置（作为Spring资源）
	 * @return 新的EhCache CacheManager 
	 * @throws  CacheException（在配置解析失败的情况下）
	 */
	public static CacheManager buildCacheManager(Resource configLocation) throws CacheException {
		return new CacheManager(parseConfiguration(configLocation));
	}

	/**
	 * Build an EhCache {@link CacheManager} from the given configuration resource.
	 * @param name the desired name of the cache manager
	 * @param configLocation the location of the configuration file (as a Spring resource)
	 * @return the new EhCache CacheManager
	 * @throws CacheException in case of configuration parsing failure
	 */
	/**
	 * 从给定的配置资源构建一个EhCache {@link  CacheManager}。 
	 *  
	 * @param 命名缓存管理器的所需名称
	 * @param  configLocation配置文件的位置（作为Spring资源）
	 * @return 新的EhCache CacheManager 
	 * @throws  CacheException如果配置解析失败
	 */
	public static CacheManager buildCacheManager(String name, Resource configLocation) throws CacheException {
		Configuration configuration = parseConfiguration(configLocation);
		configuration.setName(name);
		return new CacheManager(configuration);
	}

	/**
	 * Parse EhCache configuration from the given resource, for further use with
	 * custom {@link CacheManager} creation.
	 * @param configLocation the location of the configuration file (as a Spring resource)
	 * @return the EhCache Configuration handle
	 * @throws CacheException in case of configuration parsing failure
	 * @see CacheManager#CacheManager(Configuration)
	 * @see CacheManager#create(Configuration)
	 */
	/**
	 * 从给定资源中解析EhCache配置，以进一步用于自定义{@link  CacheManager}创建。 
	 *  
	 * @param  configLocation配置文件的位置（作为Spring资源）
	 * @return 在配置解析失败的情况下，EhCache配置句柄
	 * @throws  CacheException 
	 * @see  CacheManager＃CacheManager（Configuration）
	 * @see  CacheManager＃create（配置）
	 */
	public static Configuration parseConfiguration(Resource configLocation) throws CacheException {
		InputStream is = null;
		try {
			is = configLocation.getInputStream();
			return ConfigurationFactory.parseConfiguration(is);
		}
		catch (IOException ex) {
			throw new CacheException("Failed to parse EhCache configuration resource", ex);
		}
		finally {
			if (is != null) {
				try {
					is.close();
				}
				catch (IOException ex) {
					// ignore
				}
			}
		}
	}

}
