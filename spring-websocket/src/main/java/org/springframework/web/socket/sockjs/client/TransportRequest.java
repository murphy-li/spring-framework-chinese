/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2015的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.sockjs.client;

import java.net.URI;
import java.security.Principal;

import org.springframework.http.HttpHeaders;
import org.springframework.lang.Nullable;
import org.springframework.web.socket.sockjs.frame.SockJsMessageCodec;

/**
 * Exposes information, typically to {@link Transport} and
 * {@link AbstractClientSockJsSession session} implementations, about a request
 * to connect to a SockJS server endpoint over a given transport.
 *
 * <p>Note that a single request to connect via {@link SockJsClient} may result
 * in multiple instances of {@link TransportRequest}, one for each transport
 * before a connection is successfully established.
 *
 * @author Rossen Stoyanchev
 * @since 4.1
 */
/**
 * 向{@link  Transport}和{@link  AbstractClientSockJsSession session}实现公开信息，有关通过给定传输连接到SockJS服务器端点的请求的信息。 
 *  <p>请注意，通过{@link  SockJsClient}连接的单个请求可能会导致{@link  TransportRequest}的多个实例，在成功建立连接之前，每个传输都需要一个实例。 
 *  @author  Rossen Stoyanchev @从4.1开始
 */
public interface TransportRequest {

	/**
	 * Return information about the SockJS URL including server and session ID.
	 */
	/**
	 * 返回有关SockJS URL的信息，包括服务器和会话ID。 
	 * 
	 */
	SockJsUrlInfo getSockJsUrlInfo();

	/**
	 * Return the headers to send with the connect request.
	 */
	/**
	 * 返回标题以与连接请求一起发送。 
	 * 
	 */
	HttpHeaders getHandshakeHeaders();

	/**
	 * Return the headers to add to all other HTTP requests besides the handshake
	 * request such as XHR receive and send requests.
	 * @since 4.2
	 */
	/**
	 * 返回标头以添加到除握手请求（例如XHR接收和发送请求）之外的所有其他HTTP请求中。 
	 *  @4.2起
	 */
	HttpHeaders getHttpRequestHeaders();

	/**
	 * Return the transport URL for the given transport.
	 * <p>For an {@link XhrTransport} this is the URL for receiving messages.
	 */
	/**
	 * 返回给定传输的传输URL。 
	 *  <p>对于{@link  XhrTransport}，这是用于接收邮件的URL。 
	 * 
	 */
	URI getTransportUrl();

	/**
	 * Return the user associated with the request, if any.
	 */
	/**
	 * 返回与请求关联的用户（如果有）。 
	 * 
	 */
	@Nullable
	Principal getUser();

	/**
	 * Return the message codec to use for encoding SockJS messages.
	 */
	/**
	 * 返回消息编解码器，用于编码SockJS消息。 
	 * 
	 */
	SockJsMessageCodec getMessageCodec();

	/**
	 * Register a timeout cleanup task to invoke if the SockJS session is not
	 * fully established within the calculated retransmission timeout period.
	 */
	/**
	 * 如果在计算的重传超时时间内未完全建立SockJS会话，请注册超时清除任务以调用。 
	 * 
	 */
	void addTimeoutTask(Runnable runnable);

}
