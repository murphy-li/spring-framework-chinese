/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.messaging;

import java.util.List;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.WebSocketMessage;
import org.springframework.web.socket.WebSocketSession;

/**
 * A contract for handling WebSocket messages as part of a higher level protocol,
 * referred to as "sub-protocol" in the WebSocket RFC specification.
 * Handles both {@link WebSocketMessage WebSocketMessages} from a client
 * as well as {@link Message Messages} to a client.
 *
 * <p>Implementations of this interface can be configured on a
 * {@link SubProtocolWebSocketHandler} which selects a sub-protocol handler to
 * delegate messages to based on the sub-protocol requested by the client through
 * the {@code Sec-WebSocket-Protocol} request header.
 *
 * @author Andy Wilkinson
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 作为高级协议一部分处理WebSocket消息的合同，在WebSocket RFC规范中称为"子协议"。 
 * 处理来自客户端的{@link  WebSocketMessage WebSocketMessages}以及发送给客户端的{@link  Message Messages}。 
 *  <p>可以在{@link  SubProtocolWebSocketHandler}上配置此接口的实现，该接口根据客户端通过{@code  Sec-WebSocket请求的子协议，选择一个子协议处理程序来委托消息。 
 *  -Protocol}请求标头。 
 *  @author 安迪·威尔金森@author  Rossen Stoyanchev @从4.0开始
 */
public interface SubProtocolHandler {

	/**
	 * Return the list of sub-protocols supported by this handler (never {@code null}).
	 */
	/**
	 * 返回此处理程序支持的子协议的列表（不要{@code  null}）。 
	 * 
	 */
	List<String> getSupportedProtocols();

	/**
	 * Handle the given {@link WebSocketMessage} received from a client.
	 * @param session the client session
	 * @param message the client message
	 * @param outputChannel an output channel to send messages to
	 */
	/**
	 * 处理从客户端收到的给定的{@link  WebSocketMessage}。 
	 *  
	 * @param 会话客户端会话
	 * @param 消息客户端消息
	 * @param  outputChannel一个输出通道，用于将消息发送到
	 */
	void handleMessageFromClient(WebSocketSession session, WebSocketMessage<?> message, MessageChannel outputChannel)
			throws Exception;

	/**
	 * Handle the given {@link Message} to the client associated with the given WebSocket session.
	 * @param session the client session
	 * @param message the client message
	 */
	/**
	 * 将给定的{@link 消息}处理到与给定WebSocket会话关联的客户端。 
	 *  
	 * @param 会话客户端会话
	 * @param 消息客户端消息
	 */
	void handleMessageToClient(WebSocketSession session, Message<?> message) throws Exception;

	/**
	 * Resolve the session id from the given message or return {@code null}.
	 * @param message the message to resolve the session id from
	 */
	/**
	 * 从给定的消息中解析会话ID或返回{@code  null}。 
	 *  
	 * @param 向消息发送消息，以从中解析会话ID
	 */
	@Nullable
	String resolveSessionId(Message<?> message);

	/**
	 * Invoked after a {@link WebSocketSession} has started.
	 * @param session the client session
	 * @param outputChannel a channel
	 */
	/**
	 * 在{@link  WebSocketSession}启动之后调用。 
	 *  
	 * @param 会话客户端会话
	 * @param  outputChannel一个通道
	 */
	void afterSessionStarted(WebSocketSession session, MessageChannel outputChannel) throws Exception;

	/**
	 * Invoked after a {@link WebSocketSession} has ended.
	 * @param session the client session
	 * @param closeStatus the reason why the session was closed
	 * @param outputChannel a channel
	 */
	/**
	 * {@link  WebSocketSession}结束后调用。 
	 *  
	 * @param 会话客户端会话
	 * @param  closeStatus会话被关闭的原因
	 * @param  outputChannel一个通道
	 */
	void afterSessionEnded(WebSocketSession session, CloseStatus closeStatus, MessageChannel outputChannel)
			throws Exception;

}
