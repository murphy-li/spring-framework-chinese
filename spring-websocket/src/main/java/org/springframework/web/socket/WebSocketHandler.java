/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2013的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket;

/**
 * A handler for WebSocket messages and lifecycle events.
 *
 * <p>Implementations of this interface are encouraged to handle exceptions locally where
 * it makes sense or alternatively let the exception bubble up in which case by default
 * the exception is logged and the session closed with
 * {@link CloseStatus#SERVER_ERROR SERVER_ERROR(1011)}. The exception handling
 * strategy is provided by
 * {@link org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator
 * ExceptionWebSocketHandlerDecorator} and it can be customized or replaced by decorating
 * the {@link WebSocketHandler} with a different decorator.
 *
 * @author Rossen Stoyanchev
 * @author Phillip Webb
 * @since 4.0
 */
/**
 * WebSocket消息和生命周期事件的处理程序。 
 *  <p>鼓励该接口的实现在有意义的地方处理异常，或者让异常冒泡，在这种情况下，默认情况下会记录异常，并使用{@link  CloseStatus＃SERVER_ERROR SERVER_ERROR（1011）关闭会话}。 
 * 异常处理策略由{@link  org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator ExceptionWebSocketHandlerDecorator}提供，可以通过使用不同的装饰器修饰{@link  WebSocketHandler}来对其进行自定义或替换。 
 *  <@作者> Rossen Stoyanchev <@作者>菲利普·韦伯@始于4.0
 */
public interface WebSocketHandler {

	/**
	 * Invoked after WebSocket negotiation has succeeded and the WebSocket connection is
	 * opened and ready for use.
	 * @throws Exception this method can handle or propagate exceptions; see class-level
	 * Javadoc for details.
	 */
	/**
	 * 在WebSocket协商成功且WebSocket连接已打开并可以使用后调用。 
	 *  
	 * @throws 异常此方法可以处理或传播异常。 
	 * 有关详细信息，请参见类级Javadoc。 
	 * 
	 */
	void afterConnectionEstablished(WebSocketSession session) throws Exception;

	/**
	 * Invoked when a new WebSocket message arrives.
	 * @throws Exception this method can handle or propagate exceptions; see class-level
	 * Javadoc for details.
	 */
	/**
	 * 当新的WebSocket消息到达时调用。 
	 *  
	 * @throws 异常此方法可以处理或传播异常。 
	 * 有关详细信息，请参见类级Javadoc。 
	 * 
	 */
	void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;

	/**
	 * Handle an error from the underlying WebSocket message transport.
	 * @throws Exception this method can handle or propagate exceptions; see class-level
	 * Javadoc for details.
	 */
	/**
	 * 处理来自基础WebSocket消息传输的错误。 
	 *  
	 * @throws 异常此方法可以处理或传播异常。 
	 * 有关详细信息，请参见类级Javadoc。 
	 * 
	 */
	void handleTransportError(WebSocketSession session, Throwable exception) throws Exception;

	/**
	 * Invoked after the WebSocket connection has been closed by either side, or after a
	 * transport error has occurred. Although the session may technically still be open,
	 * depending on the underlying implementation, sending messages at this point is
	 * discouraged and most likely will not succeed.
	 * @throws Exception this method can handle or propagate exceptions; see class-level
	 * Javadoc for details.
	 */
	/**
	 * 在任一侧关闭WebSocket连接之后或发生传输错误之后调用。 
	 * 尽管从技术上来说，会话​​可能仍处于打开状态，但根据底层实现，不鼓励在此时发送消息，并且很可能不会成功。 
	 *  
	 * @throws 异常此方法可以处理或传播异常。 
	 * 有关详细信息，请参见类级Javadoc。 
	 * 
	 */
	void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception;

	/**
	 * Whether the WebSocketHandler handles partial messages. If this flag is set to
	 * {@code true} and the underlying WebSocket server supports partial messages,
	 * then a large WebSocket message, or one of an unknown size may be split and
	 * maybe received over multiple calls to
	 * {@link #handleMessage(WebSocketSession, WebSocketMessage)}. The flag
	 * {@link org.springframework.web.socket.WebSocketMessage#isLast()} indicates if
	 * the message is partial and whether it is the last part.
	 */
	/**
	 * WebSocketHandler是否处理部分消息。 
	 * 如果此标志设置为{@code  true}，并且基础WebSocket服务器支持部分消息，则可能会拆分大的WebSocket消息或大小未知的消息，并且可能会通过多次调用{@link ＃ handleMessage（WebSocketSession，WebSocketMessage）}。 
	 * 标志{@link  org.springframework.web.socket.WebSocketMessage＃isLast（）}指示该消息是否为部分消息以及是否为最后一部分。 
	 * 
	 */
	boolean supportsPartialMessages();

}
