/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.sockjs;

import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator;

/**
 * The main entry point for processing HTTP requests from SockJS clients.
 *
 * <p>In a Servlet 3+ container, {@link org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler}
 * can be used to invoke this service. The processing servlet, as well as all filters involved,
 * must have asynchronous support enabled through the ServletContext API or by adding an
 * <code>&lt;async-support&gt;true&lt;/async-support&gt;</code> element to servlet and filter declarations
 * in web.xml.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 * @see org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler
 */
/**
 * 处理来自SockJS客户端的HTTP请求的主要入口点。 
 *  <p>在Servlet 3+容器中，可以使用{@link  org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler}来调用此服务。 
 * 处理Servlet以及所涉及的所有过滤器必须通过ServletContext API或通过向Servlet中的<code> <async-support> true </ async-support> </ code>元素添加异步支持来启用，并且其中的过滤器声明web.xml。 
 *  @author  Rossen Stoyanchev @从4.0开始
 * @see  org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler
 */
public interface SockJsService {

	/**
	 * Process a SockJS HTTP request.
	 * <p>See the "Base URL", "Static URLs", and "Session URLs" sections of the <a
	 * href="https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html">SockJS
	 * protocol</a> for details on the types of URLs expected.
	 * @param request the current request
	 * @param response the current response
	 * @param sockJsPath the remainder of the path within the SockJS service prefix
	 * @param handler the handler that will exchange messages with the SockJS client
	 * @throws SockJsException raised when request processing fails; generally, failed
	 * attempts to send messages to clients automatically close the SockJS session
	 * and raise {@link SockJsTransportFailureException}; failed attempts to read
	 * messages from clients do not automatically close the session and may result
	 * in {@link SockJsMessageDeliveryException} or {@link SockJsException};
	 * exceptions from the WebSocketHandler can be handled internally or through
	 * {@link ExceptionWebSocketHandlerDecorator} or some alternative decorator.
	 * The former is automatically added when using
	 * {@link org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler}.
	 */
	/**
	 * 处理一个SockJS HTTP请求。 
	 *  <p>请参见<a href ="https://sockjs.github.io/sockjs-protocol/sockjs-protocol-3.0.3的""基本URL"，"静态URL"和"会话URL"部分。 
	 *  html"> SockJS协议</a>，详细了解所需的URL类型。 
	 *  
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param  sockJsPath SockJS服务前缀
	 * @param 处理程序中路径的其余部分处理程序将与SockJS客户端交换消息的处理程序
	 * @throws 请求处理失败时引发SockJsException； 
	 * 通常，失败的向客户端发送消息的尝试会自动关闭SockJS会话并引发{@link  SockJsTransportFailureException};从客户端读取消息的尝试失败不会自动关闭会话，并且可能导致{@link  SockJsMessageDeliveryException}或{@link  SockJsException}； 
	 *  WebSocketHandler的异常可以在内部处理，也可以通过{@link  ExceptionWebSocketHandlerDecorator}或其他修饰器进行处理。 
	 * 使用{@link  org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler}时，会自动添加前者。 
	 * 
	 */
	void handleRequest(ServerHttpRequest request, ServerHttpResponse response,
			@Nullable String sockJsPath, WebSocketHandler handler) throws SockJsException;

}
