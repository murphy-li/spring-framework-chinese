/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.server;

import java.util.Map;

import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.handler.PerConnectionWebSocketHandler;

/**
 * Contract for processing a WebSocket handshake request.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 * @see HandshakeInterceptor
 * @see org.springframework.web.socket.server.support.WebSocketHttpRequestHandler
 * @see org.springframework.web.socket.sockjs.SockJsService
 */
/**
 * 处理WebSocket握手请求的合同。 
 *  @author  Rossen Stoyanchev @从4.0开始
 * @see  HandshakeInterceptor 
 * @see  org.springframework.web.socket.server.support.WebSocketHttpRequestHandler 
 * @see  org.springframework.web.socket.sockjs.SockJsService
 */
public interface HandshakeHandler {

	/**
	 * Initiate the handshake.
	 * @param request the current request
	 * @param response the current response
	 * @param wsHandler the handler to process WebSocket messages; see
	 * {@link PerConnectionWebSocketHandler} for providing a handler with
	 * per-connection lifecycle.
	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket
	 * session; the provided attributes are copied, the original map is not used.
	 * @return whether the handshake negotiation was successful or not. In either case the
	 * response status, headers, and body will have been updated to reflect the
	 * result of the negotiation
	 * @throws HandshakeFailureException thrown when handshake processing failed to
	 * complete due to an internal, unrecoverable error, i.e. a server error as
	 * opposed to a failure to successfully negotiate the handshake.
	 */
	/**
	 * 启动握手。 
	 *  
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param  wsHandler处理程序以处理WebSocket消息； 
	 * 有关为处理程序提供每个连接生命周期的信息，请参见{@link  PerConnectionWebSocketHandler}。 
	 *  
	 * @param 属性来自HTTP握手的属性，以与WebSocket会话关联； 
	 * 提供的属性被复制，不使用原始地图。 
	 *  
	 * @return 握手协商是否成功。 
	 * 无论哪种情况，响应状态，标头和正文都将被更新，以反映协商的结果
	 * @throws 当握手处理由于内部不可恢复的错误而无法完成时抛出的HandshakeFailureException异常，即服务器错误而不是无法成功协商握手。 
	 * 
	 */
	boolean doHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,
			Map<String, Object> attributes) throws HandshakeFailureException;

}
