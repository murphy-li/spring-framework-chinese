/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.config.annotation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.lang.Nullable;
import org.springframework.web.socket.handler.WebSocketHandlerDecoratorFactory;

/**
 * Configure the processing of messages received from and sent to WebSocket clients.
 *
 * @author Rossen Stoyanchev
 * @since 4.0.3
 */
/**
 * 配置对从WebSocket客户端接收和发送的消息的处理。 
 *  @author 罗森·斯托扬切夫（Rossen Stoyanchev）@4.0.3起
 */
public class WebSocketTransportRegistration {

	@Nullable
	private Integer messageSizeLimit;

	@Nullable
	private Integer sendTimeLimit;

	@Nullable
	private Integer sendBufferSizeLimit;

	@Nullable
	private Integer timeToFirstMessage;

	private final List<WebSocketHandlerDecoratorFactory> decoratorFactories = new ArrayList<>(2);


	/**
	 * Configure the maximum size of an inbound sub-protocol message, such as
	 * a STOMP frame which may be aggregated from multiple WebSocket messages.
	 * <p>The default value is 64K (i.e. 64 * 1024).
	 * <p><strong>Note:</strong> This is not the same as the size of an
	 * individual WebSocket message which needs to be configured at the WebSocket
	 * server level instead. See the reference documentation for details.
	 */
	/**
	 * 配置入站子协议消息的最大大小，例如可以从多个WebSocket消息聚合的STOMP帧。 
	 *  <p>默认值为64K（即641024）。 
	 *  <p> <strong>注意</ strong>：这与需要在WebSocket服务器级别配置的单个WebSocket消息的大小不同。 
	 * 有关详细信息，请参见参考文档。 
	 * 
	 */
	public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {
		this.messageSizeLimit = messageSizeLimit;
		return this;
	}

	/**
	 * Protected accessor for internal use.
	 */
	/**
	 * 受保护的访问器，供内部使用。 
	 * 
	 */
	@Nullable
	protected Integer getMessageSizeLimit() {
		return this.messageSizeLimit;
	}

	/**
	 * Configure a time limit (in milliseconds) for the maximum amount of a time
	 * allowed when sending messages to a WebSocket session or writing to an
	 * HTTP response when SockJS fallback option are in use.
	 * <p>In general WebSocket servers expect that messages to a single WebSocket
	 * session are sent from a single thread at a time. This is automatically
	 * guaranteed when using {@code @EnableWebSocketMessageBroker} configuration.
	 * If message sending is slow, or at least slower than rate of messages sending,
	 * subsequent messages are buffered until either the {@code sendTimeLimit}
	 * or the {@code sendBufferSizeLimit} are reached at which point the session
	 * state is cleared and an attempt is made to close the session.
	 * <p><strong>NOTE</strong> that the session time limit is checked only
	 * on attempts to send additional messages. So if only a single message is
	 * sent and it hangs, the session will not time out until another message is
	 * sent or the underlying physical socket times out. So this is not a
	 * replacement for WebSocket server or HTTP connection timeout but is rather
	 * intended to control the extent of buffering of unsent messages.
	 * <p><strong>NOTE</strong> that closing the session may not succeed in
	 * actually closing the physical socket and may also hang. This is true
	 * especially when using blocking IO such as the BIO connector in Tomcat
	 * that is used by default on Tomcat 7. Therefore it is recommended to ensure
	 * the server is using non-blocking IO such as Tomcat's NIO connector that
	 * is used by default on Tomcat 8. If you must use blocking IO consider
	 * customizing OS-level TCP settings, for example
	 * {@code /proc/sys/net/ipv4/tcp_retries2} on Linux.
	 * <p>The default value is 10 seconds (i.e. 10 * 10000).
	 * @param timeLimit the timeout value in milliseconds; the value must be
	 * greater than 0, otherwise it is ignored.
	 */
	/**
	 * 在使用SockJS fallback选项时，将时间限制（以毫秒为单位）配置为将消息发送到WebSocket会话或写入HTTP响应时所允许的最大时间。 
	 *  <p>通常，WebSocket服务器期望到单个WebSocket会话的消息是一次从单个线程发送的。 
	 * 使用{@code  @EnableWebSocketMessageBroker}配置时，这是自动保证的。 
	 * 如果消息发送速度慢，或至少慢于消息发送速度，则会缓冲后续消息，直到到达{@code  sendTimeLimit}或{@code  sendBufferSizeLimit}为止，此时将清除会话状态并试图关闭会话。 
	 *  <p> <strong>注意</ strong>，仅在尝试发送其他消息时才检查会话时间限制。 
	 * 因此，如果仅发送一条消息并将其挂起，则会话将不会超时，直到发送另一条消息或基础物理套接字超时为止。 
	 * 因此，这不是WebSocket服务器或HTTP连接超时的替代品，而是旨在控制未发送消息的缓冲程度。 
	 *  <p> <strong>注意</ strong>，关闭会话可能无法成功关闭物理套接字，并且可能会挂起。 
	 * 尤其是在使用阻塞IO（例如在Tomcat 7上默认使用的Tomcat中的BIO连接器）时，因此是正确的。 
	 * 因此，建议确保服务器使用非阻塞IO，例如在Tomcat上默认使用的Tomcat的NIO连接器。 
	 *  8.如果必须使用阻塞IO，请考虑自定义操作系统级别的TCP设置，例如Linux上的{@code  / proc / sys / net / ipv4 / tcp_retries2}。 
	 *  <p>默认值为10秒（即10 10000）。 
	 *  
	 * @param  timeLimit超时值，以毫秒为单位； 
	 * 该值必须大于0，否则将被忽略。 
	 * 
	 */
	public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {
		this.sendTimeLimit = timeLimit;
		return this;
	}

	/**
	 * Protected accessor for internal use.
	 */
	/**
	 * 受保护的访问器，供内部使用。 
	 * 
	 */
	@Nullable
	protected Integer getSendTimeLimit() {
		return this.sendTimeLimit;
	}

	/**
	 * Configure the maximum amount of data to buffer when sending messages
	 * to a WebSocket session, or an HTTP response when SockJS fallback
	 * option are in use.
	 * <p>In general WebSocket servers expect that messages to a single WebSocket
	 * session are sent from a single thread at a time. This is automatically
	 * guaranteed when using {@code @EnableWebSocketMessageBroker} configuration.
	 * If message sending is slow, or at least slower than rate of messages sending,
	 * subsequent messages are buffered until either the {@code sendTimeLimit}
	 * or the {@code sendBufferSizeLimit} are reached at which point the session
	 * state is cleared and an attempt is made to close the session.
	 * <p><strong>NOTE</strong> that closing the session may not succeed in
	 * actually closing the physical socket and may also hang. This is true
	 * especially when using blocking IO such as the BIO connector in Tomcat
	 * configured by default on Tomcat 7. Therefore it is recommended to ensure
	 * the server is using non-blocking IO such as Tomcat's NIO connector used
	 * by default on Tomcat 8. If you must use blocking IO consider customizing
	 * OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}
	 * on Linux.
	 * <p>The default value is 512K (i.e. 512 * 1024).
	 * @param sendBufferSizeLimit the maximum number of bytes to buffer when
	 * sending messages; if the value is less than or equal to 0 then buffering
	 * is effectively disabled.
	 */
	/**
	 * 配置将消息发送到WebSocket会话或使用SockJS fallback选项时的HTTP响应时要缓冲的最大数据量。 
	 *  <p>通常，WebSocket服务器期望到单个WebSocket会话的消息是一次从单个线程发送的。 
	 * 使用{@code  @EnableWebSocketMessageBroker}配置时，这是自动保证的。 
	 * 如果消息发送速度慢，或至少慢于消息发送速度，则会缓冲后续消息，直到到达{@code  sendTimeLimit}或{@code  sendBufferSizeLimit}为止，此时将清除会话状态并试图关闭会话。 
	 *  <p> <strong>注意</ strong>，关闭会话可能无法成功关闭物理套接字，并且可能会挂起。 
	 * 尤其是当使用阻塞IO（例如在Tomcat 7上默认配置的Tomcat中的BIO连接器）时，因此是正确的。 
	 * 因此，建议确保服务器使用非阻塞IO，例如在Tomcat 8上默认使用的Tomcat的NIO连接器。 
	 * 必须使用阻塞IO来考虑自定义操作系统级别的TCP设置，例如Linux上的{@code  / proc / sys / net / ipv4 / tcp_retries2}。 
	 *  <p>默认值为512K（即5121024）。 
	 *  
	 * @param  sendBufferSizeLimit发送消息时要缓冲的最大字节数； 
	 * 如果该值小于或等于0，则有效禁用缓冲。 
	 * 
	 */
	public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {
		this.sendBufferSizeLimit = sendBufferSizeLimit;
		return this;
	}

	/**
	 * Protected accessor for internal use.
	 */
	/**
	 * 受保护的访问器，供内部使用。 
	 * 
	 */
	@Nullable
	protected Integer getSendBufferSizeLimit() {
		return this.sendBufferSizeLimit;
	}

	/**
	 * Set the maximum time allowed in milliseconds after the WebSocket connection
	 * is established and before the first sub-protocol message is received.
	 * <p>This handler is for WebSocket connections that use a sub-protocol.
	 * Therefore, we expect the client to send at least one sub-protocol message
	 * in the beginning, or else we assume the connection isn't doing well, e.g.
	 * proxy issue, slow network, and can be closed.
	 * <p>By default this is set to {@code 60,000} (1 minute).
	 * @param timeToFirstMessage the maximum time allowed in milliseconds
	 * @since 5.1
	 */
	/**
	 * 设置在建立WebSocket连接之后和接收到第一个子协议消息之前允许的最长时间（以毫秒为单位）。 
	 *  <p>此处理程序用于使用子协议的WebSocket连接。 
	 * 因此，我们希望客户端在开始时至少发送一条子协议消息，否则我们假设连接运行不正常，例如代理问题，网络速度慢，并且可以关闭。 
	 *  <p>默认情况下，此设置为{@code  60,000}（1分钟）。 
	 *  
	 * @param  timeToFirstMessage从5.1开始的最大允许时间（以毫秒为单位）
	 */
	public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {
		this.timeToFirstMessage = timeToFirstMessage;
		return this;
	}

	/**
	 * Protected accessor for internal use.
	 */
	/**
	 * 受保护的访问器，供内部使用。 
	 * 
	 */
	@Nullable
	protected Integer getTimeToFirstMessage() {
		return this.timeToFirstMessage;
	}

	/**
	 * Configure one or more factories to decorate the handler used to process
	 * WebSocket messages. This may be useful in some advanced use cases, for
	 * example to allow Spring Security to forcibly close the WebSocket session
	 * when the corresponding HTTP session expires.
	 * @since 4.1.2
	 */
	/**
	 * 配置一个或多个工厂来装饰用于处理WebSocket消息的处理程序。 
	 * 在某些高级用例中，这可能很有用，例如，当相应的HTTP会话过期时，允许Spring Security强制关闭WebSocket会话。 
	 *  @从4.1.2开始
	 */
	public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {
		this.decoratorFactories.addAll(Arrays.asList(factories));
		return this;
	}

	/**
	 * Add a factory that to decorate the handler used to process WebSocket
	 * messages. This may be useful for some advanced use cases, for example
	 * to allow Spring Security to forcibly close the WebSocket session when
	 * the corresponding HTTP session expires.
	 * @since 4.1.2
	 */
	/**
	 * 添加一个工厂来装饰用于处理WebSocket消息的处理程序。 
	 * 这对于某些高级用例可能很有用，例如，当相应的HTTP会话过期时，允许Spring Security强制关闭WebSocket会话。 
	 *  @从4.1.2开始
	 */
	public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {
		this.decoratorFactories.add(factory);
		return this;
	}

	protected List<WebSocketHandlerDecoratorFactory> getDecoratorFactories() {
		return this.decoratorFactories;
	}

}
