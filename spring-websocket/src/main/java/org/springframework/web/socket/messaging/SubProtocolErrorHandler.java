/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.messaging;

import org.springframework.lang.Nullable;
import org.springframework.messaging.Message;

/**
 * A contract for handling sub-protocol errors sent to clients.
 *
 * @author Rossen Stoyanchev
 * @since 4.2
 * @param <P> the message payload type
 */
/**
 * 处理发送给客户的子协议错误的合同。 
 *  @author  Rossen Stoyanchev @自4.2起
 * @param  <P>消息有效负载类型
 */
public interface SubProtocolErrorHandler<P> {

	/**
	 * Handle errors thrown while processing client messages providing an
	 * opportunity to prepare the error message or to prevent one from being sent.
	 * <p>Note that the STOMP protocol requires a server to close the connection
	 * after sending an ERROR frame. To prevent an ERROR frame from being sent,
	 * a handler could return {@code null} and send a notification message
	 * through the broker instead, e.g. via a user destination.
	 * @param clientMessage the client message related to the error, possibly
	 * {@code null} if error occurred while parsing a WebSocket message
	 * @param ex the cause for the error, never {@code null}
	 * @return the error message to send to the client, or {@code null} in which
	 * case no message will be sent.
	 */
	/**
	 * 处理客户消息时处理的错误提供了准备错误消息或阻止发送错误消息的机会。 
	 *  <p>请注意，STOMP协议要求服务器在发送ERROR帧后关闭连接。 
	 * 为防止发送ERROR帧，处理程序可以返回{@code  null}并通过代理（例如，代理）发送通知消息。 
	 * 通过用户目的地。 
	 *  
	 * @param  clientMessage与错误有关的客户端消息，如果在解析WebSocket消息时发生错误，则可能为{@code  null}错误原因之外，请永远不要{@code  null} <
	 * @return>要发送给客户端的错误消息，或者为{@code  null}，在这种情况下将不发送任何消息。 
	 * 
	 */
	@Nullable
	Message<P> handleClientMessageProcessingError(@Nullable Message<P> clientMessage, Throwable ex);

	/**
	 * Handle errors sent from the server side to clients, e.g. errors from the
	 * {@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler
	 * "broke relay"} because connectivity failed or the external broker sent an
	 * error message, etc.
	 * @param errorMessage the error message, never {@code null}
	 * @return the error message to send to the client, or {@code null} in which
	 * case no message will be sent.
	 */
	/**
	 * 处理从服务器端发送到客户端的错误，例如来自{@link  org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler"中断中继"}的错误，因为连接失败或外部代理发送了错误消息等。 
	 * 
	 * @param  errorMessage错误消息，永不{@code  null} 
	 * @return 发送给客户端的错误消息，或者{@code  null}在这种情况下将不发送消息。 
	 * 
	 */
	@Nullable
	Message<P> handleErrorMessageToClient(Message<P> errorMessage);

}
