/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.config.annotation;

import java.util.List;

import org.springframework.messaging.converter.MessageConverter;
import org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver;
import org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler;
import org.springframework.messaging.simp.config.ChannelRegistration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;

/**
 * Defines methods for configuring message handling with simple messaging
 * protocols (e.g. STOMP) from WebSocket clients.
 *
 * <p>Typically used to customize the configuration provided via
 * {@link EnableWebSocketMessageBroker @EnableWebSocketMessageBroker}.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 定义用于使用WebSocket客户端的简单消息传递协议（例如STOMP）配置消息处理的方法。 
 *  <p>通常用于自定义通过{@link  EnableWebSocketMessageBroker @EnableWebSocketMessageBroker}提供的配置。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public interface WebSocketMessageBrokerConfigurer {

	/**
	 * Register STOMP endpoints mapping each to a specific URL and (optionally)
	 * enabling and configuring SockJS fallback options.
	 */
	/**
	 * 注册将每个映射到特定URL的STOMP端点，并（可选）启用和配置SockJS后备选项。 
	 * 
	 */
	default void registerStompEndpoints(StompEndpointRegistry registry) {
	}

	/**
	 * Configure options related to the processing of messages received from and
	 * sent to WebSocket clients.
	 */
	/**
	 * 配置与处理从WebSocket客户端接收和发送的消息有关的选项。 
	 * 
	 */
	default void configureWebSocketTransport(WebSocketTransportRegistration registry) {
	}

	/**
	 * Configure the {@link org.springframework.messaging.MessageChannel} used for
	 * incoming messages from WebSocket clients. By default the channel is backed
	 * by a thread pool of size 1. It is recommended to customize thread pool
	 * settings for production use.
	 */
	/**
	 * 配置{@link  org.springframework.messaging.MessageChannel}用于从WebSocket客户端传入的消息。 
	 * 默认情况下，通道由大小为1的线程池支持。 
	 * 建议自定义线程池设置以供生产使用。 
	 * 
	 */
	default void configureClientInboundChannel(ChannelRegistration registration) {
	}

	/**
	 * Configure the {@link org.springframework.messaging.MessageChannel} used for
	 * outbound messages to WebSocket clients. By default the channel is backed
	 * by a thread pool of size 1. It is recommended to customize thread pool
	 * settings for production use.
	 */
	/**
	 * 配置{@link  org.springframework.messaging.MessageChannel}，用于向WebSocket客户端发送出站消息。 
	 * 默认情况下，通道由大小为1的线程池支持。 
	 * 建议自定义线程池设置以供生产使用。 
	 * 
	 */
	default void configureClientOutboundChannel(ChannelRegistration registration) {
	}

	/**
	 * Add resolvers to support custom controller method argument types.
	 * <p>This does not override the built-in support for resolving handler
	 * method arguments. To customize the built-in support for argument
	 * resolution, configure {@code SimpAnnotationMethodMessageHandler} directly.
	 * @param argumentResolvers the resolvers to register (initially an empty list)
	 * @since 4.1.1
	 */
	/**
	 * 添加解析器以支持自定义控制器方法参数类型。 
	 *  <p>这不会覆盖对解析处理程序方法参数的内置支持。 
	 * 要自定义对参数解析的内置支持，请直接配置{@code  SimpAnnotationMethodMessageHandler}。 
	 *  
	 * @param  argumentsResolvers从4.1.1开始注册的解析器（最初是一个空列表）
	 */
	default void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
	}

	/**
	 * Add handlers to support custom controller method return value types.
	 * <p>Using this option does not override the built-in support for handling
	 * return values. To customize the built-in support for handling return
	 * values, configure  {@code SimpAnnotationMethodMessageHandler} directly.
	 * @param returnValueHandlers the handlers to register (initially an empty list)
	 * @since 4.1.1
	 */
	/**
	 * 添加处理程序以支持自定义控制器方法返回值类型。 
	 *  <p>使用此选项不会覆盖对返回值的内置支持。 
	 * 要自定义对返回值进行处理的内置支持，请直接配置{@code  SimpAnnotationMethodMessageHandler}。 
	 *  
	 * @param  returnValueHandlers从4.1.1开始注册的处理程序（最初是一个空列表）
	 */
	default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {
	}

	/**
	 * Configure the message converters to use when extracting the payload of
	 * messages in annotated methods and when sending messages (e.g. through the
	 * "broker" SimpMessagingTemplate).
	 * <p>The provided list, initially empty, can be used to add message converters
	 * while the boolean return value is used to determine if default message should
	 * be added as well.
	 * @param messageConverters the converters to configure (initially an empty list)
	 * @return whether to also add default converter or not
	 */
	/**
	 * 配置消息转换器以使用带注释的方法提取消息的有效负载以及发送消息时使用（例如通过"经纪人"SimpMessagingTemplate）。 
	 *  <p>提供的列表最初为空，可用于添加消息转换器，而布尔返回值用于确定是否还应添加默认消息。 
	 *  
	 * @param  message转换转换器以配置（初始为空列表）
	 * @return 是否还添加默认转换器
	 */
	default boolean configureMessageConverters(List<MessageConverter> messageConverters) {
		return true;
	}

	/**
	 * Configure message broker options.
	 */
	/**
	 * 配置消息代理选项。 
	 * 
	 */
	default void configureMessageBroker(MessageBrokerRegistry registry) {
	}

}
