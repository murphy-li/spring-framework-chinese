/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket;

import java.io.Closeable;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.security.Principal;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.lang.Nullable;

/**
 * A WebSocket session abstraction. Allows sending messages over a WebSocket
 * connection and closing it.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * WebSocket会话抽象。 
 * 允许通过WebSocket连接发送消息并关闭它。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public interface WebSocketSession extends Closeable {

	/**
	 * Return a unique session identifier.
	 */
	/**
	 * 返回唯一的会话标识符。 
	 * 
	 */
	String getId();

	/**
	 * Return the URI used to open the WebSocket connection.
	 */
	/**
	 * 返回用于打开WebSocket连接的URI。 
	 * 
	 */
	@Nullable
	URI getUri();

	/**
	 * Return the headers used in the handshake request (never {@code null}).
	 */
	/**
	 * 返回握手请求中使用的标头（不要{@code  null}）。 
	 * 
	 */
	HttpHeaders getHandshakeHeaders();

	/**
	 * Return the map with attributes associated with the WebSocket session.
	 * <p>On the server side the map can be populated initially through a
	 * {@link org.springframework.web.socket.server.HandshakeInterceptor
	 * HandshakeInterceptor}. On the client side the map can be populated via
	 * {@link org.springframework.web.socket.client.WebSocketClient
	 * WebSocketClient} handshake methods.
	 * @return a Map with the session attributes (never {@code null})
	 */
	/**
	 * 返回具有与WebSocket会话关联的属性的映射。 
	 *  <p>在服务器端，可以首先通过{@link  org.springframework.web.socket.server.HandshakeInterceptor HandshakeInterceptor}来填充地图。 
	 * 在客户端，可以通过{@link  org.springframework.web.socket.client.WebSocketClient WebSocketClient}握手方法来填充地图。 
	 *  
	 * @return 具有会话属性的Map（从不{@code  null}）
	 */
	Map<String, Object> getAttributes();

	/**
	 * Return a {@link java.security.Principal} instance containing the name
	 * of the authenticated user.
	 * <p>If the user has not been authenticated, the method returns <code>null</code>.
	 */
	/**
	 * 返回一个包含已认证用户名称的{@link  java.security.Principal}实例。 
	 *  <p>如果用户尚未通过身份验证，则该方法返回<code> null </ code>。 
	 * 
	 */
	@Nullable
	Principal getPrincipal();

	/**
	 * Return the address on which the request was received.
	 */
	/**
	 * 返回接收请求的地址。 
	 * 
	 */
	@Nullable
	InetSocketAddress getLocalAddress();

	/**
	 * Return the address of the remote client.
	 */
	/**
	 * 返回远程客户端的地址。 
	 * 
	 */
	@Nullable
	InetSocketAddress getRemoteAddress();

	/**
	 * Return the negotiated sub-protocol.
	 * @return the protocol identifier, or {@code null} if no protocol
	 * was specified or negotiated successfully
	 */
	/**
	 * 返回协商的子协议。 
	 *  
	 * @return 协议标识符，如果未指定或未成功协商协议，则为{@code  null}
	 */
	@Nullable
	String getAcceptedProtocol();

	/**
	 * Configure the maximum size for an incoming text message.
	 */
	/**
	 * 配置传入短信的最大大小。 
	 * 
	 */
	void setTextMessageSizeLimit(int messageSizeLimit);

	/**
	 * Get the configured maximum size for an incoming text message.
	 */
	/**
	 * 获取传入短信的最大配置大小。 
	 * 
	 */
	int getTextMessageSizeLimit();

	/**
	 * Configure the maximum size for an incoming binary message.
	 */
	/**
	 * 配置传入的二进制消息的最大大小。 
	 * 
	 */
	void setBinaryMessageSizeLimit(int messageSizeLimit);

	/**
	 * Get the configured maximum size for an incoming binary message.
	 */
	/**
	 * 获取传入的二进制消息的配置的最大大小。 
	 * 
	 */
	int getBinaryMessageSizeLimit();

	/**
	 * Determine the negotiated extensions.
	 * @return the list of extensions, or an empty list if no extension
	 * was specified or negotiated successfully
	 */
	/**
	 * 确定协商的扩展名。 
	 *  
	 * @return 扩展名列表； 
	 * 如果未指定或成功协商任何扩展名，则为空列表
	 */
	List<WebSocketExtension> getExtensions();

	/**
	 * Send a WebSocket message: either {@link TextMessage} or {@link BinaryMessage}.
	 *
	 * <p><strong>Note:</strong> The underlying standard WebSocket session (JSR-356) does
	 * not allow concurrent sending. Therefore sending must be synchronized. To ensure
	 * that, one option is to wrap the {@code WebSocketSession} with the
	 * {@link org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator
	 * ConcurrentWebSocketSessionDecorator}.
	 * @see org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator
	 */
	/**
	 * 发送WebSocket消息：{@link  TextMessage}或{@link  BinaryMessage}。 
	 *  <p> <strong>注意</ strong>：基础标准WebSocket会话（JSR-356）不允许并发发送。 
	 * 因此，发送必须同步。 
	 * 为了确保这一点，一种选择是用{@link  org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator ConcurrentWebSocketSessionDecorator}包装{@code  WebSocketSession}。 
	 *  
	 * @see  org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator
	 */
	void sendMessage(WebSocketMessage<?> message) throws IOException;

	/**
	 * Return whether the connection is still open.
	 */
	/**
	 * 返回连接是否仍然打开。 
	 * 
	 */
	boolean isOpen();

	/**
	 * Close the WebSocket connection with status 1000, i.e. equivalent to:
	 * <pre class="code">
	 * session.close(CloseStatus.NORMAL);
	 * </pre>
	 */
	/**
	 * 关闭状态为1000的WebSocket连接，即相当于：<pre class ="code"> session.close（CloseStatus.NORMAL）; </ pre>
	 */
	@Override
	void close() throws IOException;

	/**
	 * Close the WebSocket connection with the given close status.
	 */
	/**
	 * 以给定的关闭状态关闭WebSocket连接。 
	 * 
	 */
	void close(CloseStatus status) throws IOException;

}
