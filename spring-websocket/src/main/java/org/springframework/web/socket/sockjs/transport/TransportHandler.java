/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.sockjs.transport;

import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.sockjs.SockJsException;
import org.springframework.web.socket.sockjs.SockJsService;

/**
 * Handle a SockJS session URL, i.e. transport-specific request.
 *
 * @author Rossen Stoyanchev
 * @author Juergen Hoeller
 * @since 4.0
 */
/**
 * 处理SockJS会话网址，即特定于传输的请求。 
 *  @author  Rossen Stoyanchev @author  Juergen Hoeller @始于4.0
 */
public interface TransportHandler {

	/**
	 * Initialize this handler with the given configuration.
	 * @param serviceConfig the configuration as defined by the containing
	 * {@link org.springframework.web.socket.sockjs.SockJsService}
	 */
	/**
	 * 使用给定的配置初始化此处理程序。 
	 *  
	 * @param  serviceConfig由包含的{@link  org.springframework.web.socket.sockjs.SockJsService}定义的配置
	 */
	void initialize(SockJsServiceConfig serviceConfig);

	/**
	 * Return the transport type supported by this handler.
	 */
	/**
	 * 返回此处理程序支持的传输类型。 
	 * 
	 */
	TransportType getTransportType();

	/**
	 * Check whether the type of the given session matches the transport type
	 * of this {@code TransportHandler} where session id and the transport type
	 * are extracted from the SockJS URL.
	 * @return {@code true} if the session matches (and would therefore get
	 * accepted by {@link #handleRequest}), or {@code false} otherwise
	 * @since 4.3.4
	 */
	/**
	 * 检查给定会话的类型是否与此{@code  TransportHandler}的传输类型匹配，其中会话ID和传输类型是从SockJS URL中提取的。 
	 *  
	 * @return  {@code  true}如果会话匹配（因此将被{@link  #handleRequest}接受），否则为{@code  false}，否则@4.3.4起
	 */
	boolean checkSessionType(SockJsSession session);

	/**
	 * Handle the given request and delegate messages to the provided
	 * {@link WebSocketHandler}.
	 * @param request the current request
	 * @param response the current response
	 * @param handler the target WebSocketHandler (never {@code null})
	 * @param session the SockJS session (never {@code null})
	 * @throws SockJsException raised when request processing fails as
	 * explained in {@link SockJsService}
	 */
	/**
	 * 处理给定的请求并将消息委派给提供的{@link  WebSocketHandler}。 
	 *  
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param 处理程序目标WebSocketHandler（从未{@code  null}）
	 * @param 会话SockJS会话（从未{@code  null }）
	 * @throws 当请求处理失败时引发SockJsException，如{@link  SockJsService}中所述
	 */
	void handleRequest(ServerHttpRequest request, ServerHttpResponse response,
			WebSocketHandler handler, SockJsSession session) throws SockJsException;

}
