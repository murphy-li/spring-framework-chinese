/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2017的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.web.socket.server;

import java.security.Principal;
import java.util.List;
import java.util.Map;

import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.lang.Nullable;
import org.springframework.web.socket.WebSocketExtension;
import org.springframework.web.socket.WebSocketHandler;

/**
 * A server-specific strategy for performing the actual upgrade to a WebSocket exchange.
 *
 * @author Rossen Stoyanchev
 * @since 4.0
 */
/**
 * 用于执行实际升级到WebSocket交换的特定于服务器的策略。 
 *  @author  Rossen Stoyanchev @从4.0开始
 */
public interface RequestUpgradeStrategy {

	/**
	 * Return the supported WebSocket protocol versions.
	 */
	/**
	 * 返回支持的WebSocket协议版本。 
	 * 
	 */
	String[] getSupportedVersions();

	/**
	 * Return the WebSocket protocol extensions supported by the underlying WebSocket server.
	 */
	/**
	 * 返回基础WebSocket服务器支持的WebSocket协议扩展。 
	 * 
	 */
	List<WebSocketExtension> getSupportedExtensions(ServerHttpRequest request);

	/**
	 * Perform runtime specific steps to complete the upgrade. Invoked after successful
	 * negotiation of the handshake request.
	 * @param request the current request
	 * @param response the current response
	 * @param selectedProtocol the selected sub-protocol, if any
	 * @param selectedExtensions the selected WebSocket protocol extensions
	 * @param user the user to associate with the WebSocket session
	 * @param wsHandler the handler for WebSocket messages
	 * @param attributes handshake request specific attributes to be set on the WebSocket
	 * session via {@link org.springframework.web.socket.server.HandshakeInterceptor} and
	 * thus made available to the {@link org.springframework.web.socket.WebSocketHandler}
	 * @throws HandshakeFailureException thrown when handshake processing failed to
	 * complete due to an internal, unrecoverable error, i.e. a server error as
	 * opposed to a failure to successfully negotiate the requirements of the
	 * handshake request.
	 */
	/**
	 * 执行特定于运行时的步骤以完成升级。 
	 * 成功协商握手请求后调用。 
	 *  
	 * @param 请求当前请求
	 * @param 响应当前响应
	 * @param  selectedProtocol所选子协议（如果有）
	 * @param  selectedExtensions所选WebSocket协议扩展
	 * @param 用户，该用户与WebSocket会话
	 * @param  wsHandler WebSocket消息的处理程序
	 * @param 属性握手请求特定的属性，可通过{@link  org.springframework.web.socket.server.HandshakeInterceptor}在WebSocket会话上进行设置，从而使其可用到{@link  org.springframework.web.socket.WebSocketHandler} 
	 * @throws  HandshakeFailureException当握​​手处理由于内部不可恢复的错误而无法完成时抛出，即服务器错误，而不是未能成功协商握手请求的要求。 
	 * 
	 */
	void upgrade(ServerHttpRequest request, ServerHttpResponse response,
			@Nullable String selectedProtocol, List<WebSocketExtension> selectedExtensions,
			@Nullable Principal user, WebSocketHandler wsHandler, Map<String, Object> attributes)
			throws HandshakeFailureException;

}
