/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jca.cci.object;

import java.sql.SQLException;

import javax.resource.ResourceException;
import javax.resource.cci.ConnectionFactory;
import javax.resource.cci.InteractionSpec;
import javax.resource.cci.Record;
import javax.resource.cci.RecordFactory;

import org.springframework.dao.DataAccessException;
import org.springframework.jca.cci.core.RecordCreator;
import org.springframework.jca.cci.core.RecordExtractor;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * EIS operation object that expects mapped input and output objects,
 * converting to and from CCI Records.
 *
 * <p>Concrete subclasses must implement the abstract
 * {@code createInputRecord(RecordFactory, Object)} and
 * {@code extractOutputData(Record)} methods, to create an input
 * Record from an object and to convert an output Record into an object,
 * respectively.
 *
 * @author Thierry Templier
 * @author Juergen Hoeller
 * @since 1.2
 * @see #createInputRecord(javax.resource.cci.RecordFactory, Object)
 * @see #extractOutputData(javax.resource.cci.Record)
 */
/**
 * 期望映射的输入和输出对象的EIS操作对象，往返于CCI记录。 
 *  <p>混凝土子类必须实现抽象的{@code  createInputRecord（RecordFactory，Object）}和{@code  extractOutputData（Record）}方法，才能从对象创建输入Record并将输出Record转换为对象。 
 *  @author 蒂埃里·坦佩尔（Thierry Templier）@author 于尔根·霍勒（Juergen Hoeller）@从1.2开始
 * @see  #createInputRecord（javax.resource.cci.RecordFactory，Object）
 */
public abstract class MappingRecordOperation extends EisOperation {

	/**
	 * Constructor that allows use as a JavaBean.
	 */
	/**
	 * 允许用作JavaBean的构造方法。 
	 * 
	 */
	public MappingRecordOperation() {
	}

	/**
	 * Convenient constructor with ConnectionFactory and specifications
	 * (connection and interaction).
	 * @param connectionFactory the ConnectionFactory to use to obtain connections
	 */
	/**
	 * 带有ConnectionFactory和规范（连接和交互）的便捷构造函数。 
	 *  
	 * @param  connectionFactory用于获取连接的ConnectionFactory
	 */
	public MappingRecordOperation(ConnectionFactory connectionFactory, InteractionSpec interactionSpec) {
		getCciTemplate().setConnectionFactory(connectionFactory);
		setInteractionSpec(interactionSpec);
	}

	/**
	 * Set a RecordCreator that should be used for creating default output Records.
	 * <p>Default is none: CCI's {@code Interaction.execute} variant
	 * that returns an output Record will be called.
	 * <p>Specify a RecordCreator here if you always need to call CCI's
	 * {@code Interaction.execute} variant with a passed-in output Record.
	 * This RecordCreator will then be invoked to create a default output Record instance.
	 * @see javax.resource.cci.Interaction#execute(javax.resource.cci.InteractionSpec, Record)
	 * @see javax.resource.cci.Interaction#execute(javax.resource.cci.InteractionSpec, Record, Record)
	 * @see org.springframework.jca.cci.core.CciTemplate#setOutputRecordCreator
	 */
	/**
	 * 设置一个RecordCreator，用于创建默认输出记录。 
	 *  <p>默认为无：将调用CCI的{@code  Interaction.execute}变体返回输出Record。 
	 *  <p>如果您始终需要使用传入的输出Record调用CCI的{@code  Interaction.execute}变体，请在此处指定RecordCreator。 
	 * 然后将调用该RecordCreator来创建默认的输出Record实例。 
	 *  
	 * @see  javax.resource.cci.Interaction＃execute（javax.resource.cci.InteractionSpec，Record）
	 * @see  javax.resource.cci.Interaction＃execute（javax.resource.cci.InteractionSpec，Record，Record） 
	 * @see  org.springframework.jca.cci.core.CciTemplate＃setOutputRecordCreator
	 */
	public void setOutputRecordCreator(RecordCreator creator) {
		getCciTemplate().setOutputRecordCreator(creator);
	}

	/**
	 * Execute the interaction encapsulated by this operation object.
	 * @param inputObject the input data, to be converted to a Record
	 * by the {@code createInputRecord} method
	 * @return the output data extracted with the {@code extractOutputData} method
	 * @throws DataAccessException if there is any problem
	 * @see #createInputRecord
	 * @see #extractOutputData
	 */
	/**
	 * 执行此操作对象封装的交互。 
	 *  
	 * @param  inputObject要通过{@code  createInputRecord}方法转换为Record的输入数据
	 * @return 用{@code  extractOutputData}方法
	 * @throws 提取的输出数据DataAccessException有什么问题吗？@
	 * @see> #createInputRecord 
	 * @see  #extractOutputData
	 */
	@Nullable
	public Object execute(Object inputObject) throws DataAccessException {
		InteractionSpec interactionSpec = getInteractionSpec();
		Assert.state(interactionSpec != null, "No InteractionSpec set");
		return getCciTemplate().execute(
				interactionSpec, new RecordCreatorImpl(inputObject), new RecordExtractorImpl());
	}


	/**
	 * Subclasses must implement this method to generate an input Record
	 * from an input object passed into the {@code execute} method.
	 * @param inputObject the passed-in input object
	 * @return the CCI input Record
	 * @throws ResourceException if thrown by a CCI method, to be auto-converted
	 * to a DataAccessException
	 * @see #execute(Object)
	 */
	/**
	 * 子类必须实现此方法才能从传递到{@code  execute}方法的输入对象生成输入Record。 
	 *  
	 * @param  inputObject传入的输入对象
	 * @return  CCI输入Record 
	 * @throws  ResourceException如果由CCI方法抛出，则将其自动转换为DataAccessException 
	 * @see  #execute（Object）
	 */
	protected abstract Record createInputRecord(RecordFactory recordFactory, Object inputObject)
			throws ResourceException, DataAccessException;

	/**
	 * Subclasses must implement this method to convert the Record returned
	 * by CCI execution into a result object for the {@code execute} method.
	 * @param outputRecord the Record returned by CCI execution
	 * @return the result object
	 * @throws ResourceException if thrown by a CCI method, to be auto-converted
	 * to a DataAccessException
	 * @see #execute(Object)
	 */
	/**
	 * 子类必须实现此方法，才能将CCI执行返回的Record转换为{@code  execute}方法的结果对象。 
	 *  
	 * @param  outputRecord由CCI执行返回的记录
	 * @return 结果对象
	 * @throws  ResourceException如果由CCI方法抛出，则将其自动转换为DataAccessException 
	 * @see  #execute（Object）
	 */
	protected abstract Object extractOutputData(Record outputRecord)
			throws ResourceException, SQLException, DataAccessException;


	/**
	 * Implementation of RecordCreator that calls the enclosing
	 * class's {@code createInputRecord} method.
	 */
	/**
	 * RecordCreator的实现，该方法调用封闭类的{@code  createInputRecord}方法。 
	 * 
	 */
	protected class RecordCreatorImpl implements RecordCreator {

		private final Object inputObject;

		public RecordCreatorImpl(Object inObject) {
			this.inputObject = inObject;
		}

		@Override
		public Record createRecord(RecordFactory recordFactory) throws ResourceException, DataAccessException {
			return createInputRecord(recordFactory, this.inputObject);
		}
	}


	/**
	 * Implementation of RecordExtractor that calls the enclosing
	 * class's {@code extractOutputData} method.
	 */
	/**
	 * RecordExtractor的实现，该方法调用封闭类的{@code  extractOutputData}方法。 
	 * 
	 */
	protected class RecordExtractorImpl implements RecordExtractor<Object> {

		@Override
		public Object extractData(Record record) throws ResourceException, SQLException, DataAccessException {
			return extractOutputData(record);
		}
	}

}
