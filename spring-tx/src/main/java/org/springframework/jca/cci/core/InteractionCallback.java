/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jca.cci.core;

import java.sql.SQLException;

import javax.resource.ResourceException;
import javax.resource.cci.ConnectionFactory;
import javax.resource.cci.Interaction;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Generic callback interface for code that operates on a CCI Interaction.
 * Allows to execute any number of operations on a single Interaction, for
 * example a single execute call or repeated execute calls with varying
 * parameters.
 *
 * <p>This is particularly useful for delegating to existing data access code
 * that expects an Interaction to work on and throws ResourceException. For newly
 * written code, it is strongly recommended to use CciTemplate's more specific
 * {@code execute} variants.
 *
 * @author Thierry Templier
 * @author Juergen Hoeller
 * @since 1.2
 * @param <T> the result type
 * @see CciTemplate#execute(InteractionCallback)
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, javax.resource.cci.Record)
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, RecordCreator, RecordExtractor)
 */
/**
 * 在CCI交互上运行的代码的通用回调接口。 
 * 允许在单个交互上执行任意数量的操作，例如，单个执行调用或具有变化参数的重复执行调用。 
 *  <p>这对于委托给期望进行交互并抛出ResourceException的现有数据访问代码特别有用。 
 * 对于新编写的代码，强烈建议使用CciTemplate的更具体的{@code  execute}变体。 
 *  @author  Thierry Templier @author  Juergen Hoeller @since 1.2起
 * @param  <T>结果类型
 * @see  CciTemplate＃execute（InteractionCallback）
 * @see  CciTemplate＃execute（javax.resource.cci.InteractionSpec ，javax.resource.cci.Record）
 * @see  CciTemplate＃execute（javax.resource.cci.InteractionSpec，RecordCreator，RecordExtractor）
 */
@FunctionalInterface
public interface InteractionCallback<T> {

	/**
	 * Gets called by {@code CciTemplate.execute} with an active CCI Interaction.
	 * Does not need to care about activating or closing the Interaction, or
	 * handling transactions.
	 * <p>If called without a thread-bound CCI transaction (initiated by
	 * CciLocalTransactionManager), the code will simply get executed on the CCI
	 * Interaction with its transactional semantics. If CciTemplate is configured
	 * to use a JTA-aware ConnectionFactory, the CCI Interaction and thus the callback
	 * code will be transactional if a JTA transaction is active.
	 * <p>Allows for returning a result object created within the callback, i.e.
	 * a domain object or a collection of domain objects. Note that there's special
	 * support for single step actions: see the {@code CciTemplate.execute}
	 * variants. A thrown RuntimeException is treated as application exception:
	 * it gets propagated to the caller of the template.
	 * @param interaction active CCI Interaction
	 * @param connectionFactory the CCI ConnectionFactory that the Connection was
	 * created with (gives access to RecordFactory and ResourceAdapterMetaData)
	 * @return a result object, or {@code null} if none
	 * @throws ResourceException if thrown by a CCI method, to be auto-converted
	 * to a DataAccessException
	 * @throws SQLException if thrown by a ResultSet method, to be auto-converted
	 * to a DataAccessException
	 * @throws DataAccessException in case of custom exceptions
	 * @see javax.resource.cci.ConnectionFactory#getRecordFactory()
	 * @see javax.resource.cci.ConnectionFactory#getMetaData()
	 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, RecordCreator, RecordExtractor)
	 */
	/**
	 * 由{@code  CciTemplate.execute}通过有效的CCI交互进行调用。 
	 * 无需关心激活或关闭交互或处理事务。 
	 *  <p>如果在没有线程绑定CCI事务（由CciLocalTransactionManager发起）的情况下调用，则代码将简单地以其事务语义在CCI交互上执行。 
	 * 如果将CciTemplate配置为使用支持JTA的ConnectionFactory，则在JTA事务处于活动状态时，CCI交互以及因此回调代码将是事务性的。 
	 *  <p>允许返回在回调中创建的结果对象，即域对象或域对象的集合。 
	 * 请注意，单步操作特别受支持：请参见{@code  CciTemplate.execute}变体。 
	 * 抛出的RuntimeException被视为应用程序异常：它被传播到模板的调用者。 
	 *  
	 * @param 交互活动CCI交互
	 * @param  connectionFactory创建连接所使用的CCI ConnectionFactory（允许访问RecordFactory和ResourceAdapterMetaData）
	 * @return 一个结果对象，如果没有，则为{@code  null} <@如果是CCI方法抛出的，则throws> ResourceException，如果被ResultSet方法抛出，则将被自动转换为DataAccessException 
	 * @throws  SQLException，如果是自定义异常，则是被自动转换为DataAccessException 
	 * @throws  DataAccessException。 
	 * 请参阅> javax.resource.cci.ConnectionFactory＃getRecordFactory（）<@请参阅> javax.resource.cci.ConnectionFactory＃getMetaData（）<@请参阅> CciTemplate＃execute（javax.resource.cci.InteractionSpec，RecordCreator，RecordExtractor）
	 */
	@Nullable
	T doInInteraction(Interaction interaction, ConnectionFactory connectionFactory)
			throws ResourceException, SQLException, DataAccessException;

}
