/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jca.cci.core;

import javax.resource.ResourceException;
import javax.resource.cci.Record;
import javax.resource.cci.RecordFactory;

import org.springframework.dao.DataAccessException;

/**
 * Callback interface for creating a CCI Record instance,
 * usually based on the passed-in CCI RecordFactory.
 *
 * <p>Used for input Record creation in CciTemplate. Alternatively,
 * Record instances can be passed into CciTemplate's corresponding
 * {@code execute} methods directly, either instantiated manually
 * or created through CciTemplate's Record factory methods.
 *
 * <P>Also used for creating default output Records in CciTemplate.
 * This is useful when the JCA connector needs an explicit output Record
 * instance, but no output Records should be passed into CciTemplate's
 * {@code execute} methods.
 *
 * @author Thierry Templier
 * @author Juergen Hoeller
 * @since 1.2
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, RecordCreator)
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, RecordCreator, RecordExtractor)
 * @see CciTemplate#createIndexedRecord(String)
 * @see CciTemplate#createMappedRecord(String)
 * @see CciTemplate#setOutputRecordCreator(RecordCreator)
 */
/**
 * 用于通常基于传入的CCI RecordFactory创建CCI Record实例的回调接口。 
 *  <p>用于在CciTemplate中创建记录的输入。 
 * 另外，可以将Record实例直接传递到CciTemplate的相应{@code  execute}方法中，可以手动实例化，也可以通过CciTemplate的Record工厂方法创建。 
 *  <P>也用于在CciTemplate中创建默认输出记录。 
 * 当JCA连接器需要显式输出Record实例，但不应将任何输出Records传递到CciTemplate的{@code  execute}方法中时，此方法很有用。 
 *  @author  Thierry Templier @author  Juergen Hoeller @since 1.2起@
 * @see> CciTemplate＃execute（javax.resource.cci.InteractionSpec，RecordCreator）
 * @see  CciTemplate＃execute（javax.resource.cci.InteractionSpec，RecordCreator ，RecordExtractor）
 * @see  CciTemplate＃createIndexedRecord（String）
 * @see  CciTemplate＃createMappedRecord（String）
 * @see  CciTemplate＃setOutputRecordCreator（RecordCreator）
 */
@FunctionalInterface
public interface RecordCreator {

	/**
	 * Create a CCI Record instance, usually based on the passed-in CCI RecordFactory.
	 * <p>For use as <i>input</i> creator with CciTemplate's {@code execute} methods,
	 * this method should create a <i>populated</i> Record instance. For use as
	 * <i>output</i> Record creator, it should return an <i>empty</i> Record instance.
	 * @param recordFactory the CCI RecordFactory (never {@code null}, but not guaranteed to be
	 * supported by the connector: its create methods might throw NotSupportedException)
	 * @return the Record instance
	 * @throws ResourceException if thrown by a CCI method, to be auto-converted
	 * to a DataAccessException
	 * @throws DataAccessException in case of custom exceptions
	 */
	/**
	 * 通常基于传入的CCI RecordFactory创建CCI Record实例。 
	 *  <p>要用作CciTemplate的{@code  execute}方法的<i> input </ i>创建者，此方法应创建一个<i>填充的</ i> Record实例。 
	 * 要用作<i> output </ i>记录创建者，它应该返回<i> empty </ i> Record实例。 
	 *  
	 * @param  recordFactory CCI RecordFactory（永远不{@code  null}，但不能保证连接器支持：其创建方法可能会抛出NotSupportedException）
	 * @return 记录实例
	 * @throws  ResourceException（如果抛出）一个CCI方法，在自定义异常的情况下将自动转换为DataAccessException 
	 * @throws  DataAccessException
	 */
	Record createRecord(RecordFactory recordFactory) throws ResourceException, DataAccessException;

}
