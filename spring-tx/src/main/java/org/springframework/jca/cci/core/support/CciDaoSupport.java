/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jca.cci.core.support;

import javax.resource.cci.Connection;
import javax.resource.cci.ConnectionFactory;
import javax.resource.cci.ConnectionSpec;

import org.springframework.dao.support.DaoSupport;
import org.springframework.jca.cci.CannotGetCciConnectionException;
import org.springframework.jca.cci.connection.ConnectionFactoryUtils;
import org.springframework.jca.cci.core.CciTemplate;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

/**
 * Convenient super class for CCI-based data access objects.
 *
 * <p>Requires a {@link javax.resource.cci.ConnectionFactory} to be set,
 * providing a {@link org.springframework.jca.cci.core.CciTemplate} based
 * on it to subclasses through the {@link #getCciTemplate()} method.
 *
 * <p>This base class is mainly intended for CciTemplate usage but can
 * also be used when working with a Connection directly or when using
 * {@code org.springframework.jca.cci.object} classes.
 *
 * @author Thierry Templier
 * @author Juergen Hoeller
 * @since 1.2
 * @see #setConnectionFactory
 * @see #getCciTemplate
 * @see org.springframework.jca.cci.core.CciTemplate
 */
/**
 * 基于CCI的数据访问对象的便捷超类。 
 *  <p>需要设置{@link  javax.resource.cci.ConnectionFactory}，并基于{@link  org.springframework.jca.cci.core.CciTemplate}通过{@link  #getCciTemplate（）}方法。 
 *  <p>此基类主要用于CciTemplate，但在直接使用Connection或使用{@code  org.springframework.jca.cci.object}类时也可以使用。 
 *  @author  Thierry Templier @author  Juergen Hoeller @since 1.2起
 * @see  #setConnectionFactory 
 * @see  #getCciTemplate 
 * @see  org.springframework.jca.cci.core.CciTemplate
 */
public abstract class CciDaoSupport extends DaoSupport {

	@Nullable
	private CciTemplate cciTemplate;


	/**
	 * Set the ConnectionFactory to be used by this DAO.
	 */
	/**
	 * 设置此DAO使用的ConnectionFactory。 
	 * 
	 */
	public final void setConnectionFactory(ConnectionFactory connectionFactory) {
		if (this.cciTemplate == null || connectionFactory != this.cciTemplate.getConnectionFactory()) {
			this.cciTemplate = createCciTemplate(connectionFactory);
		}
	}

	/**
	 * Create a CciTemplate for the given ConnectionFactory.
	 * Only invoked if populating the DAO with a ConnectionFactory reference!
	 * <p>Can be overridden in subclasses to provide a CciTemplate instance
	 * with different configuration, or a custom CciTemplate subclass.
	 * @param connectionFactory the CCI ConnectionFactory to create a CciTemplate for
	 * @return the new CciTemplate instance
	 * @see #setConnectionFactory(javax.resource.cci.ConnectionFactory)
	 */
	/**
	 * 为给定的ConnectionFactory创建一个CciTemplate。 
	 * 仅在使用ConnectionFactory引用填充DAO时调用！ 
	 *  <p>可以在子类中重写，以提供具有不同配置的CciTemplate实例或自定义CciTemplate子类。 
	 *  
	 * @param  connectionFactory CCI ConnectionFactory为
	 * @return 新的CciTemplate实例创建一个CciTemplate 
	 * @see  #setConnectionFactory（javax.resource.cci.ConnectionFactory）
	 */
	protected CciTemplate createCciTemplate(ConnectionFactory connectionFactory) {
		return new CciTemplate(connectionFactory);
	}

	/**
	 * Return the ConnectionFactory used by this DAO.
	 */
	/**
	 * 返回此DAO使用的ConnectionFactory。 
	 * 
	 */
	@Nullable
	public final ConnectionFactory getConnectionFactory() {
		return (this.cciTemplate != null ? this.cciTemplate.getConnectionFactory() : null);
	}

	/**
	 * Set the CciTemplate for this DAO explicitly,
	 * as an alternative to specifying a ConnectionFactory.
	 */
	/**
	 * 显式设置此DAO的CciTemplate，作为指定ConnectionFactory的替代方法。 
	 * 
	 */
	public final void setCciTemplate(CciTemplate cciTemplate) {
		this.cciTemplate = cciTemplate;
	}

	/**
	 * Return the CciTemplate for this DAO,
	 * pre-initialized with the ConnectionFactory or set explicitly.
	 */
	/**
	 * 返回此DAO的CciTemplate，并使用ConnectionFactory对其进行预先初始化或进行显式设置。 
	 * 
	 */
	@Nullable
	public final CciTemplate getCciTemplate() {
		return this.cciTemplate;
	}

	@Override
	protected final void checkDaoConfig() {
		if (this.cciTemplate == null) {
			throw new IllegalArgumentException("'connectionFactory' or 'cciTemplate' is required");
		}
	}


	/**
	 * Obtain a CciTemplate derived from the main template instance,
	 * inheriting the ConnectionFactory and other settings but
	 * overriding the ConnectionSpec used for obtaining Connections.
	 * @param connectionSpec the CCI ConnectionSpec that the returned
	 * template instance is supposed to obtain Connections for
	 * @return the derived template instance
	 * @see org.springframework.jca.cci.core.CciTemplate#getDerivedTemplate(javax.resource.cci.ConnectionSpec)
	 */
	/**
	 * 获取从主模板实例派生的CciTemplate，该实例继承ConnectionFactory和其他设置，但覆盖用于获取Connections的ConnectionSpec。 
	 *  
	 * @param  connectionSpec CCI ConnectionSpec，假定返回的模板实例应获取
	 * @return 派生的模板实例的连接
	 * @see  org.springframework.jca.cci.core.CciTemplate＃getDerivedTemplate（javax.resource.cci .ConnectionSpec）
	 */
	protected final CciTemplate getCciTemplate(ConnectionSpec connectionSpec) {
		CciTemplate cciTemplate = getCciTemplate();
		Assert.state(cciTemplate != null, "No CciTemplate set");
		return cciTemplate.getDerivedTemplate(connectionSpec);
	}

	/**
	 * Get a CCI Connection, either from the current transaction or a new one.
	 * @return the CCI Connection
	 * @throws org.springframework.jca.cci.CannotGetCciConnectionException
	 * if the attempt to get a Connection failed
	 * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#getConnection(javax.resource.cci.ConnectionFactory)
	 */
	/**
	 * 从当前事务或新事务中获取CCI连接。 
	 *  
	 * @return  CCI连接
	 * @throws  org.springframework.jca.cci.CannotGetCciConnectionException如果尝试获取连接失败
	 * @see  org.springframework.jca.cci.connection.ConnectionFactoryUtils＃getConnection（javax.resource。 
	 *  cci.ConnectionFactory）
	 */
	protected final Connection getConnection() throws CannotGetCciConnectionException {
		ConnectionFactory connectionFactory = getConnectionFactory();
		Assert.state(connectionFactory != null, "No ConnectionFactory set");
		return ConnectionFactoryUtils.getConnection(connectionFactory);
	}

	/**
	 * Close the given CCI Connection, created via this bean's ConnectionFactory,
	 * if it isn't bound to the thread.
	 * @param con the Connection to close
	 * @see org.springframework.jca.cci.connection.ConnectionFactoryUtils#releaseConnection
	 */
	/**
	 * 如果未绑定到线程，则关闭通过此bean的ConnectionFactory创建的给定CCI连接。 
	 *  
	 * @param 设置连接以关闭
	 * @see  org.springframework.jca.cci.connection.ConnectionFactoryUtils＃releaseConnection
	 */
	protected final void releaseConnection(Connection con) {
		ConnectionFactoryUtils.releaseConnection(con, getConnectionFactory());
	}

}
