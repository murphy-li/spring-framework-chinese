/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.jca.cci.core;

import java.sql.SQLException;

import javax.resource.ResourceException;
import javax.resource.cci.Record;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Callback interface for extracting a result object from a CCI Record instance.
 *
 * <p>Used for output object creation in CciTemplate. Alternatively, output
 * Records can also be returned to client code as-is. In case of a CCI ResultSet
 * as execution result, you will almost always want to implement a RecordExtractor,
 * to be able to read the ResultSet in a managed fashion, with the CCI Connection
 * still open while reading the ResultSet.
 *
 * <p>Implementations of this interface perform the actual work of extracting
 * results, but don't need to worry about exception handling. ResourceExceptions
 * will be caught and handled correctly by the CciTemplate class.
 *
 * @author Thierry Templier
 * @author Juergen Hoeller
 * @since 1.2
 * @param <T> the result type
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, Record, RecordExtractor)
 * @see CciTemplate#execute(javax.resource.cci.InteractionSpec, RecordCreator, RecordExtractor)
 * @see javax.resource.cci.ResultSet
 */
/**
 * 用于从CCI记录实例中提取结果对象的回调接口。 
 *  <p>用于在CciTemplate中创建输出对象。 
 * 另外，输出记录也可以按原样返回给客户端代码。 
 * 如果将CCI ResultSet作为执行结果，则几乎总是要实现一个RecordExtractor，以便能够以托管方式读取ResultSet，而CCI Connection在读取ResultSet时仍处于打开状态。 
 *  <p>此接口的实现执行提取结果的实际工作，但无需担心异常处理。 
 *  CciTemplate类将正确捕获和处理ResourceExceptions。 
 *  @author  Thierry Templier @author  Juergen Hoeller @since 1.2起
 * @param  <T>结果类型
 * @see  CciTemplate＃execute（javax.resource.cci.InteractionSpec，Record，RecordExtractor）
 * @see  CciTemplate #execute（javax.resource.cci.InteractionSpec，RecordCreator，RecordExtractor）
 * @see  javax.resource.cci.ResultSet
 */
@FunctionalInterface
public interface RecordExtractor<T> {

	/**
	 * Process the data in the given Record, creating a corresponding result object.
	 * @param record the Record to extract data from
	 * (possibly a CCI ResultSet)
	 * @return an arbitrary result object, or {@code null} if none
	 * (the extractor will typically be stateful in the latter case)
	 * @throws ResourceException if thrown by a CCI method, to be auto-converted
	 * to a DataAccessException
	 * @throws SQLException if thrown by a ResultSet method, to be auto-converted
	 * to a DataAccessException
	 * @throws DataAccessException in case of custom exceptions
	 * @see javax.resource.cci.ResultSet
	 */
	/**
	 * 处理给定记录中的数据，创建一个相应的结果对象。 
	 *  
	 * @param 记录记录以从（可能是CCI ResultSet）<
	 * @return>任意结果对象中提取数据，或者如果没有则为{@code  null}（在后一种情况下提取器通常是有状态的）<@如果是CCI方法抛出的，则throws> ResourceException，如果被ResultSet方法抛出，则将被自动转换为DataAccessException 
	 * @throws  SQLException，如果是自定义异常，则是被自动转换为DataAccessException 
	 * @throws  DataAccessException。 
	 * 请参阅> javax.resource.cci.ResultSet
	 */
	@Nullable
	T extractData(Record record) throws ResourceException, SQLException, DataAccessException;

}
