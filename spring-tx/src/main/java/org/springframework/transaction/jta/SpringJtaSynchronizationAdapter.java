/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.jta;

import javax.transaction.Status;
import javax.transaction.Synchronization;
import javax.transaction.TransactionManager;
import javax.transaction.UserTransaction;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.lang.Nullable;
import org.springframework.transaction.support.TransactionSynchronization;
import org.springframework.transaction.support.TransactionSynchronizationManager;
import org.springframework.util.Assert;

/**
 * Adapter that implements the JTA {@link javax.transaction.Synchronization}
 * interface delegating to an underlying Spring
 * {@link org.springframework.transaction.support.TransactionSynchronization}.
 *
 * <p>Useful for synchronizing Spring resource management code with plain
 * JTA / EJB CMT transactions, despite the original code being built for
 * Spring transaction synchronization.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see javax.transaction.Transaction#registerSynchronization
 * @see org.springframework.transaction.support.TransactionSynchronization
 */
/**
 * 实现JTA {@link  javax.transaction.Synchronization}接口的适配器，该接口委派给基础Spring {@link  org.springframework.transaction.support.TransactionSynchronization}。 
 *  <p>尽管已为Spring事务同步构建了原始代码，但仍可用于将Spring资源管理代码与普通JTA / EJB CMT事务同步。 
 *  @author  Juergen Hoeller @since 2.0起
 * @see  javax.transaction.Transaction＃registerSynchronization 
 * @see  org.springframework.transaction.support.TransactionSynchronization
 */
public class SpringJtaSynchronizationAdapter implements Synchronization {

	protected static final Log logger = LogFactory.getLog(SpringJtaSynchronizationAdapter.class);

	private final TransactionSynchronization springSynchronization;

	@Nullable
	private UserTransaction jtaTransaction;

	private boolean beforeCompletionCalled = false;


	/**
	 * Create a new SpringJtaSynchronizationAdapter for the given Spring
	 * TransactionSynchronization and JTA TransactionManager.
	 * @param springSynchronization the Spring TransactionSynchronization to delegate to
	 */
	/**
	 * 为给定的Spring TransactionSynchronization和JTA TransactionManager创建一个新的SpringJtaSynchronizationAdapter。 
	 *  
	 * @param  springSynchronization将Spring TransactionSynchronization委托给
	 */
	public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization) {
		Assert.notNull(springSynchronization, "TransactionSynchronization must not be null");
		this.springSynchronization = springSynchronization;
	}

	/**
	 * Create a new SpringJtaSynchronizationAdapter for the given Spring
	 * TransactionSynchronization and JTA TransactionManager.
	 * <p>Note that this adapter will never perform a rollback-only call on WebLogic,
	 * since WebLogic Server is known to automatically mark the transaction as
	 * rollback-only in case of a {@code beforeCompletion} exception. Hence,
	 * on WLS, this constructor is equivalent to the single-arg constructor.
	 * @param springSynchronization the Spring TransactionSynchronization to delegate to
	 * @param jtaUserTransaction the JTA UserTransaction to use for rollback-only
	 * setting in case of an exception thrown in {@code beforeCompletion}
	 * (can be omitted if the JTA provider itself marks the transaction rollback-only
	 * in such a scenario, which is required by the JTA specification as of JTA 1.1).
	 */
	/**
	 * 为给定的Spring TransactionSynchronization和JTA TransactionManager创建一个新的SpringJtaSynchronizationAdapter。 
	 *  <p>请注意，此适配器将永远不会在WebLogic上执行仅回滚调用，因为已知WebLogic Server在发生{@code  beforeCompletion}异常的情况下会自动将事务标记为仅回滚。 
	 * 因此，在WLS上，此构造函数等效于single-arg构造函数。 
	 *  
	 * @param  springSynchronization Spring TransactionSynchronization委托给
	 * @param  jtaUserTransaction JTA UserTransaction用于仅回滚设置，以防在{@code  beforeCompletion}中引发异常的情况下（如果JTA提供者本身标记为在这种情况下，仅事务回滚，这是JTA 1.1版以来的JTA规范所要求的。 
	 * 
	 */
	public SpringJtaSynchronizationAdapter(TransactionSynchronization springSynchronization,
			@Nullable UserTransaction jtaUserTransaction) {

		this(springSynchronization);
		if (jtaUserTransaction != null && !jtaUserTransaction.getClass().getName().startsWith("weblogic.")) {
			this.jtaTransaction = jtaUserTransaction;
		}
	}

	/**
	 * Create a new SpringJtaSynchronizationAdapter for the given Spring
	 * TransactionSynchronization and JTA TransactionManager.
	 * <p>Note that this adapter will never perform a rollback-only call on WebLogic,
	 * since WebLogic Server is known to automatically mark the transaction as
	 * rollback-only in case of a {@code beforeCompletion} exception. Hence,
	 * on WLS, this constructor is equivalent to the single-arg constructor.
	 * @param springSynchronization the Spring TransactionSynchronization to delegate to
	 * @param jtaTransactionManager the JTA TransactionManager to use for rollback-only
	 * setting in case of an exception thrown in {@code beforeCompletion}
	 * (can be omitted if the JTA provider itself marks the transaction rollback-only
	 * in such a scenario, which is required by the JTA specification as of JTA 1.1)
	 */
	/**
	 * 为给定的Spring TransactionSynchronization和JTA TransactionManager创建一个新的SpringJtaSynchronizationAdapter。 
	 *  <p>请注意，此适配器将永远不会在WebLogic上执行仅回滚调用，因为已知WebLogic Server在发生{@code  beforeCompletion}异常的情况下会自动将事务标记为仅回滚。 
	 * 因此，在WLS上，此构造函数等效于single-arg构造函数。 
	 *  
	 * @param  springSynchronization Spring TransactionSynchronization委托给JTA TransactionManager jtaTransactionManager jtaTransactionManager，以用于仅回滚设置，以防在{@code  beforeCompletion}中引发异常（如果JTA提供程序本身标记为，则可以省略在这种情况下，仅事务回滚，这是JTA 1.1版开始的JTA规范所要求的）
	 */
	public SpringJtaSynchronizationAdapter(
			TransactionSynchronization springSynchronization, @Nullable TransactionManager jtaTransactionManager) {

		this(springSynchronization);
		if (jtaTransactionManager != null && !jtaTransactionManager.getClass().getName().startsWith("weblogic.")) {
			this.jtaTransaction = new UserTransactionAdapter(jtaTransactionManager);
		}
	}


	/**
	 * JTA {@code beforeCompletion} callback: just invoked before commit.
	 * <p>In case of an exception, the JTA transaction will be marked as rollback-only.
	 * @see org.springframework.transaction.support.TransactionSynchronization#beforeCommit
	 */
	/**
	 * JTA {@code  beforeCompletion}回调：刚在提交之前调用。 
	 *  <p>在发生异常的情况下，JTA事务将被标记为仅回滚。 
	 *  
	 * @see  org.springframework.transaction.support.TransactionSynchronization＃beforeCommit
	 */
	@Override
	public void beforeCompletion() {
		try {
			boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();
			this.springSynchronization.beforeCommit(readOnly);
		}
		catch (RuntimeException | Error ex) {
			setRollbackOnlyIfPossible();
			throw ex;
		}
		finally {
			// Process Spring's beforeCompletion early, in order to avoid issues
			// with strict JTA implementations that issue warnings when doing JDBC
			// operations after transaction completion (e.g. Connection.getWarnings).
			this.beforeCompletionCalled = true;
			this.springSynchronization.beforeCompletion();
		}
	}

	/**
	 * Set the underlying JTA transaction to rollback-only.
	 */
	/**
	 * 将基础JTA事务设置为仅回滚。 
	 * 
	 */
	private void setRollbackOnlyIfPossible() {
		if (this.jtaTransaction != null) {
			try {
				this.jtaTransaction.setRollbackOnly();
			}
			catch (UnsupportedOperationException ex) {
				// Probably Hibernate's WebSphereExtendedJTATransactionLookup pseudo JTA stuff...
				logger.debug("JTA transaction handle does not support setRollbackOnly method - " +
						"relying on JTA provider to mark the transaction as rollback-only based on " +
						"the exception thrown from beforeCompletion", ex);
			}
			catch (Throwable ex) {
				logger.error("Could not set JTA transaction rollback-only", ex);
			}
		}
		else {
			logger.debug("No JTA transaction handle available and/or running on WebLogic - " +
						"relying on JTA provider to mark the transaction as rollback-only based on " +
						"the exception thrown from beforeCompletion");
			}
	}

	/**
	 * JTA {@code afterCompletion} callback: invoked after commit/rollback.
	 * <p>Needs to invoke the Spring synchronization's {@code beforeCompletion}
	 * at this late stage in case of a rollback, since there is no corresponding
	 * callback with JTA.
	 * @see org.springframework.transaction.support.TransactionSynchronization#beforeCompletion
	 * @see org.springframework.transaction.support.TransactionSynchronization#afterCompletion
	 */
	/**
	 * JTA {@code  afterCompletion}回调：在提交/回滚后调用。 
	 *  <p>在回滚的情况下，需要在此后期调用Spring同步的{@code  beforeCompletion}，因为JTA没有相应的回调。 
	 *  
	 * @see  org.springframework.transaction.support.TransactionSynchronization＃beforeCompletion 
	 * @see  org.springframework.transaction.support.TransactionSynchronization＃afterCompletion
	 */
	@Override
	public void afterCompletion(int status) {
		if (!this.beforeCompletionCalled) {
			// beforeCompletion not called before (probably because of JTA rollback).
			// Perform the cleanup here.
			this.springSynchronization.beforeCompletion();
		}
		// Call afterCompletion with the appropriate status indication.
		switch (status) {
			case Status.STATUS_COMMITTED:
				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_COMMITTED);
				break;
			case Status.STATUS_ROLLEDBACK:
				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_ROLLED_BACK);
				break;
			default:
				this.springSynchronization.afterCompletion(TransactionSynchronization.STATUS_UNKNOWN);
		}
	}

}
