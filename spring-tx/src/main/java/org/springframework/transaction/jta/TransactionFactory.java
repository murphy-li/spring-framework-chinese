/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.jta;

import javax.transaction.NotSupportedException;
import javax.transaction.SystemException;
import javax.transaction.Transaction;

import org.springframework.lang.Nullable;

/**
 * Strategy interface for creating JTA {@link javax.transaction.Transaction}
 * objects based on specified transactional characteristics.
 *
 * <p>The default implementation, {@link SimpleTransactionFactory}, simply
 * wraps a standard JTA {@link javax.transaction.TransactionManager}.
 * This strategy interface allows for more sophisticated implementations
 * that adapt to vendor-specific JTA extensions.
 *
 * @author Juergen Hoeller
 * @since 2.5
 * @see javax.transaction.TransactionManager#getTransaction()
 * @see SimpleTransactionFactory
 * @see JtaTransactionManager
 */
/**
 * 用于基于指定的事务特征创建JTA {@link  javax.transaction.Transaction}对象的策略接口。 
 *  <p>默认实现{@link  SimpleTransactionFactory}仅包装标准JTA {@link  javax.transaction.TransactionManager}。 
 * 该策略接口允许更复杂的实现，以适应特定于供应商的JTA扩展。 
 *  @author  Juergen Hoeller @since 2.5起
 * @see  javax.transaction.TransactionManager＃getTransaction（）
 * @see  SimpleTransactionFactory 
 * @see  JtaTransactionManager
 */
public interface TransactionFactory {

	/**
	 * Create an active Transaction object based on the given name and timeout.
	 * @param name the transaction name (may be {@code null})
	 * @param timeout the transaction timeout (may be -1 for the default timeout)
	 * @return the active Transaction object (never {@code null})
	 * @throws NotSupportedException if the transaction manager does not support
	 * a transaction of the specified type
	 * @throws SystemException if the transaction manager failed to create the
	 * transaction
	 */
	/**
	 * 根据给定的名称和超时创建一个活动的Transaction对象。 
	 *  
	 * @param 为事务名称命名（可以为{@code  null}）
	 * @param 超时事务超时（对于默认超时可以为-1）
	 * @return 活动事务对象（从不{<@代码> null}）
	 * @throws  NotSupportedException如果事务管理器不支持指定类型的事务
	 * @throws  SystemException如果事务管理器无法创建事务
	 */
	Transaction createTransaction(@Nullable String name, int timeout) throws NotSupportedException, SystemException;

	/**
	 * Determine whether the underlying transaction manager supports XA transactions
	 * managed by a resource adapter (i.e. without explicit XA resource enlistment).
	 * <p>Typically {@code false}. Checked by
	 * {@link org.springframework.jca.endpoint.AbstractMessageEndpointFactory}
	 * in order to differentiate between invalid configuration and valid
	 * ResourceAdapter-managed transactions.
	 * @see javax.resource.spi.ResourceAdapter#endpointActivation
	 * @see javax.resource.spi.endpoint.MessageEndpointFactory#isDeliveryTransacted
	 */
	/**
	 * 确定基础事务管理器是否支持由资源适配器管理的XA事务（即没有明确的XA资源征募）。 
	 *  <p>通常为{@code  false}。 
	 * 由{@link  org.springframework.jca.endpoint.AbstractMessageEndpointFactory}检查，以区分无效配置和有效的ResourceAdapter管理的事务。 
	 *  
	 * @see  javax.resource.spi.ResourceAdapter＃endpointActivation 
	 * @see  javax.resource.spi.endpoint.MessageEndpointFactory＃isDeliveryTransacted
	 */
	boolean supportsResourceAdapterManagedTransactions();

}
