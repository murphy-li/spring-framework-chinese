/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2012的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.jta;

import java.util.List;

import javax.transaction.Status;
import javax.transaction.Synchronization;

import org.springframework.transaction.support.TransactionSynchronization;
import org.springframework.transaction.support.TransactionSynchronizationUtils;

/**
 * Adapter for a JTA Synchronization, invoking the {@code afterCommit} /
 * {@code afterCompletion} callbacks of Spring {@link TransactionSynchronization}
 * objects callbacks after the outer JTA transaction has completed.
 * Applied when participating in an existing (non-Spring) JTA transaction.
 *
 * @author Juergen Hoeller
 * @since 2.0
 * @see TransactionSynchronization#afterCommit
 * @see TransactionSynchronization#afterCompletion
 */
/**
 * JTA同步的适配器，在外部JTA事务完成后，调用Spring {@link  TransactionSynchronization}对象回调的{@code  afterCommit} / {@code  afterCompletion}回调。 
 * 参与现有（非春季）JTA交易时应用。 
 *  @author  Juergen Hoeller @从2.0开始
 * @see  TransactionSynchronization＃afterCommit 
 * @see  TransactionSynchronization＃afterCompletion
 */
public class JtaAfterCompletionSynchronization implements Synchronization {

	private final List<TransactionSynchronization> synchronizations;


	/**
	 * Create a new JtaAfterCompletionSynchronization for the given synchronization objects.
	 * @param synchronizations the List of TransactionSynchronization objects
	 * @see org.springframework.transaction.support.TransactionSynchronization
	 */
	/**
	 * 为给定的同步对象创建一个新的JtaAfterCompletionSynchronization。 
	 *  
	 * @param 同步TransactionSynchronization对象的列表
	 * @see  org.springframework.transaction.support.TransactionSynchronization
	 */
	public JtaAfterCompletionSynchronization(List<TransactionSynchronization> synchronizations) {
		this.synchronizations = synchronizations;
	}


	@Override
	public void beforeCompletion() {
	}

	@Override
	public void afterCompletion(int status) {
		switch (status) {
			case Status.STATUS_COMMITTED:
				try {
					TransactionSynchronizationUtils.invokeAfterCommit(this.synchronizations);
				}
				finally {
					TransactionSynchronizationUtils.invokeAfterCompletion(
							this.synchronizations, TransactionSynchronization.STATUS_COMMITTED);
				}
				break;
			case Status.STATUS_ROLLEDBACK:
				TransactionSynchronizationUtils.invokeAfterCompletion(
						this.synchronizations, TransactionSynchronization.STATUS_ROLLED_BACK);
				break;
			default:
				TransactionSynchronizationUtils.invokeAfterCompletion(
						this.synchronizations, TransactionSynchronization.STATUS_UNKNOWN);
		}
	}
}
