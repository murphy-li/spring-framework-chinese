/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.support;

import org.springframework.lang.Nullable;
import org.springframework.transaction.TransactionStatus;

/**
 * Callback interface for transactional code. Used with {@link TransactionTemplate}'s
 * {@code execute} method, often as anonymous class within a method implementation.
 *
 * <p>Typically used to assemble various calls to transaction-unaware data access
 * services into a higher-level service method with transaction demarcation. As an
 * alternative, consider the use of declarative transaction demarcation (e.g. through
 * Spring's {@link org.springframework.transaction.annotation.Transactional} annotation).
 *
 * @author Juergen Hoeller
 * @since 17.03.2003
 * @see TransactionTemplate
 * @see CallbackPreferringPlatformTransactionManager
 * @param <T> the result type
 */
/**
 * 事务代码的回调接口。 
 * 与{@link  TransactionTemplate}的{@code  execute}方法一起使用，通常作为方法实现中的匿名类。 
 *  <p>通常用于将对不知道事务的数据访问服务的各种调用组合成具有事务划分的更高级别的服务方法。 
 * 或者，考虑使用声明式事务划分（例如通过Spring的{@link  org.springframework.transaction.annotation.Transactional}注释）。 
 *  @author  Juergen Hoeller @2003年3月17日起
 * @see  TransactionTemplate 
 * @see  CallbackPreferringPlatformTransactionManager 
 * @param  <T>结果类型
 */
@FunctionalInterface
public interface TransactionCallback<T> {

	/**
	 * Gets called by {@link TransactionTemplate#execute} within a transactional context.
	 * Does not need to care about transactions itself, although it can retrieve and
	 * influence the status of the current transaction via the given status object,
	 * e.g. setting rollback-only.
	 * <p>Allows for returning a result object created within the transaction, i.e. a
	 * domain object or a collection of domain objects. A RuntimeException thrown by the
	 * callback is treated as application exception that enforces a rollback. Any such
	 * exception will be propagated to the caller of the template, unless there is a
	 * problem rolling back, in which case a TransactionException will be thrown.
	 * @param status associated transaction status
	 * @return a result object, or {@code null}
	 * @see TransactionTemplate#execute
	 * @see CallbackPreferringPlatformTransactionManager#execute
	 */
	/**
	 * 在事务上下文中由{@link  TransactionTemplate＃execute}调用。 
	 * 尽管它可以通过给定的状态对象（例如）获取并影响当前交易的状态，但无需关心交易本身。 
	 * 设置仅回滚。 
	 *  <p>允许返回在事务内创建的结果对象，即域对象或域对象的集合。 
	 * 回调引发的RuntimeException被视为强制执行回滚的应用程序异常。 
	 * 除非存在回滚问题，否则任何此类异常都会传播到模板的调用者，在这种情况下，将抛出TransactionException。 
	 *  
	 * @param 与状态关联的事务状态
	 * @return 一个结果对象，或者{@code  null} 
	 * @see  TransactionTemplate＃execute 
	 * @see  CallbackPreferringPlatformTransactionManager＃execute
	 */
	@Nullable
	T doInTransaction(TransactionStatus status);

}
