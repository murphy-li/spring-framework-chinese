/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.support;

import java.util.function.Consumer;

import org.springframework.lang.Nullable;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/**
 * Interface specifying basic transaction execution operations.
 * Implemented by {@link TransactionTemplate}. Not often used directly,
 * but a useful option to enhance testability, as it can easily be
 * mocked or stubbed.
 *
 * @author Juergen Hoeller
 * @since 2.0.4
 */
/**
 * 指定基本事务执行操作的接口。 
 * 由{@link  TransactionTemplate}实现。 
 * 它不经常直接使用，而是增强可测试性的有用选项，因为它很容易被嘲笑或存根。 
 *  @author  Juergen Hoeller @始于2.0.4
 */
public interface TransactionOperations {

	/**
	 * Execute the action specified by the given callback object within a transaction.
	 * <p>Allows for returning a result object created within the transaction, that is,
	 * a domain object or a collection of domain objects. A RuntimeException thrown
	 * by the callback is treated as a fatal exception that enforces a rollback.
	 * Such an exception gets propagated to the caller of the template.
	 * @param action the callback object that specifies the transactional action
	 * @return a result object returned by the callback, or {@code null} if none
	 * @throws TransactionException in case of initialization, rollback, or system errors
	 * @throws RuntimeException if thrown by the TransactionCallback
	 * @see #executeWithoutResult(Consumer)
	 */
	/**
	 * 在事务中执行由给定的回调对象指定的操作。 
	 *  <p>允许返回在事务内创建的结果对象，即域对象或域对象的集合。 
	 * 回调引发的RuntimeException被视为执行回滚的致命异常。 
	 * 这样的异常会传播到模板的调用者。 
	 *  
	 * @param 操作指定事务操作的回调对象
	 * @return 回调返回的结果对象，如果没有，则返回{@code  null} 
	 * @throws 在初始化，回滚或系统错误的情况下为TransactionException 
	 * @throws  RuntimeException，如果由TransactionCallback引发
	 * @see  #executeWithoutResult（Consumer）
	 */
	@Nullable
	<T> T execute(TransactionCallback<T> action) throws TransactionException;

	/**
	 * Execute the action specified by the given {@link Runnable} within a transaction.
	 * <p>If you need to return an object from the callback or access the
	 * {@link org.springframework.transaction.TransactionStatus} from within the callback,
	 * use {@link #execute(TransactionCallback)} instead.
	 * <p>This variant is analogous to using a {@link TransactionCallbackWithoutResult}
	 * but with a simplified signature for common cases - and conveniently usable with
	 * Java 8 lambda expressions.
	 * @param action the Runnable that specifies the transactional action
	 * @throws TransactionException in case of initialization, rollback, or system errors
	 * @throws RuntimeException if thrown by the Runnable
	 * @since 5.2
	 * @see #execute(TransactionCallback)
	 * @see TransactionCallbackWithoutResult
	 */
	/**
	 * 在事务中执行由给定的{@link  Runnable}指定的操作。 
	 *  <p>如果您需要从回调中返回对象或从回调中访问{@link  org.springframework.transaction.TransactionStatus}，请改用{@link  #execute（TransactionCallback）}。 
	 *  <p>此变体类似于使用{@link  TransactionCallbackWithoutResult}，但在常见情况下具有简化的签名-可以方便地与Java 8 lambda表达式一起使用。 
	 *  
	 * @param 操作在初始化，回滚或系统错误的情况下指定事务操作的Runnable 
	 * @throws  TransactionException 
	 * @throws 如果由Runnable @since 5.2引发，则抛出RuntimeException 
	 * @see  #execute（TransactionCallback）
	 * @see  TransactionCallbackWithoutResult
	 */
	default void executeWithoutResult(Consumer<TransactionStatus> action) throws TransactionException {
		execute(status -> {
			action.accept(status);
			return null;
		});
	}


	/**
	 * Return an implementation of the {@code TransactionOperations} interface which
	 * executes a given {@link TransactionCallback} without an actual transaction.
	 * <p>Useful for testing: The behavior is equivalent to running with a
	 * transaction manager with no actual transaction (PROPAGATION_SUPPORTS)
	 * and no synchronization (SYNCHRONIZATION_NEVER).
	 * <p>For a {@link TransactionOperations} implementation with actual
	 * transaction processing, use {@link TransactionTemplate} with an appropriate
	 * {@link org.springframework.transaction.PlatformTransactionManager}.
	 * @since 5.2
	 * @see org.springframework.transaction.TransactionDefinition#PROPAGATION_SUPPORTS
	 * @see AbstractPlatformTransactionManager#SYNCHRONIZATION_NEVER
	 * @see TransactionTemplate
	 */
	/**
	 * 返回{@code  TransactionOperations}接口的实现，该实现在没有实际交易的情况下执行给定的{@link  TransactionCallback}。 
	 *  <p>对于测试有用：此行为等效于在没有实际事务（PROPAGATION_SUPPORTS）和同步（SYNCHRONIZATION_NEVER）的情况下与事务管理器一起运行。 
	 *  <p>对于具有实际事务处理的{@link  TransactionOperations}实现，请结合使用{@link  TransactionTemplate}和适当的{@link  org.springframework.transaction.PlatformTransactionManager}。 
	 *  @since 5.2 
	 * @see  org.springframework.transaction.TransactionDefinition＃PROPAGATION_SUPPORTS 
	 * @see  AbstractPlatformTransactionManager＃SYNCHRONIZATION_NEVER 
	 * @see  TransactionTemplate
	 */
	static TransactionOperations withoutTransaction() {
		return WithoutTransactionOperations.INSTANCE;
	}

}
