/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction;

/**
 * Exception that represents a transaction failure caused by a heuristic
 * decision on the side of the transaction coordinator.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 17.03.2003
 */
/**
 * 表示由事务协调器方面的启发式决策导致的事务失败的异常。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @2003年3月17日起
 */
@SuppressWarnings("serial")
public class HeuristicCompletionException extends TransactionException {

	/**
	 * Unknown outcome state.
	 */
	/**
	 * 结果状态未知。 
	 * 
	 */
	public static final int STATE_UNKNOWN = 0;

	/**
	 * Committed outcome state.
	 */
	/**
	 * 承诺结果状态。 
	 * 
	 */
	public static final int STATE_COMMITTED = 1;

	/**
	 * Rolledback outcome state.
	 */
	/**
	 * 回滚结果状态。 
	 * 
	 */
	public static final int STATE_ROLLED_BACK = 2;

	/**
	 * Mixed outcome state.
	 */
	/**
	 * 混合结果状态。 
	 * 
	 */
	public static final int STATE_MIXED = 3;


	public static String getStateString(int state) {
		switch (state) {
			case STATE_COMMITTED:
				return "committed";
			case STATE_ROLLED_BACK:
				return "rolled back";
			case STATE_MIXED:
				return "mixed";
			default:
				return "unknown";
		}
	}


	/**
	 * The outcome state of the transaction: have some or all resources been committed?
	 */
	/**
	 * 事务的结果状态：是否已承诺部分或全部资源？
	 */
	private final int outcomeState;


	/**
	 * Constructor for HeuristicCompletionException.
	 * @param outcomeState the outcome state of the transaction
	 * @param cause the root cause from the transaction API in use
	 */
	/**
	 * HeuristicCompletionException的构造方法。 
	 *  
	 * @param  resultState事务的结果状态
	 * @param 引起使用中的事务API的根本原因
	 */
	public HeuristicCompletionException(int outcomeState, Throwable cause) {
		super("Heuristic completion: outcome state is " + getStateString(outcomeState), cause);
		this.outcomeState = outcomeState;
	}

	/**
	 * Return the outcome state of the transaction state,
	 * as one of the constants in this class.
	 * @see #STATE_UNKNOWN
	 * @see #STATE_COMMITTED
	 * @see #STATE_ROLLED_BACK
	 * @see #STATE_MIXED
	 */
	/**
	 * 返回事务状态的结果状态，作为此类中的常量之一。 
	 *  
	 * @see  #STATE_UNKNOWN 
	 * @see  #STATE_COMMITTED 
	 * @see  #STATE_ROLLED_BACK 
	 * @see  #STATE_MIXED
	 */
	public int getOutcomeState() {
		return this.outcomeState;
	}

}
