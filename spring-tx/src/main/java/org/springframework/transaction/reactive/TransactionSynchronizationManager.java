/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.reactive;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import reactor.core.publisher.Mono;

import org.springframework.core.annotation.AnnotationAwareOrderComparator;
import org.springframework.lang.Nullable;
import org.springframework.transaction.NoTransactionException;
import org.springframework.util.Assert;

/**
 * Central delegate that manages resources and transaction synchronizations per
 * subscriber context.
 * To be used by resource management code but not by typical application code.
 *
 * <p>Supports one resource per key without overwriting, that is, a resource needs
 * to be removed before a new one can be set for the same key.
 * Supports a list of transaction synchronizations if synchronization is active.
 *
 * <p>Resource management code should check for context-bound resources, e.g.
 * database connections, via {@code getResource}. Such code is normally not
 * supposed to bind resources to units of work, as this is the responsibility
 * of transaction managers. A further option is to lazily bind on first use if
 * transaction synchronization is active, for performing transactions that span
 * an arbitrary number of resources.
 *
 * <p>Transaction synchronization must be activated and deactivated by a transaction
 * manager via {@link #initSynchronization()} and {@link #clearSynchronization()}.
 * This is automatically supported by {@link AbstractReactiveTransactionManager},
 * and thus by all standard Spring transaction managers.
 *
 * <p>Resource management code should only register synchronizations when this
 * manager is active, which can be checked via {@link #isSynchronizationActive};
 * it should perform immediate resource cleanup else. If transaction synchronization
 * isn't active, there is either no current transaction, or the transaction manager
 * doesn't support transaction synchronization.
 *
 * <p>Synchronization is for example used to always return the same resources within
 * a transaction, e.g. a database connection for any given connection factory.
 *
 * @author Mark Paluch
 * @author Juergen Hoeller
 * @since 5.2
 * @see #isSynchronizationActive
 * @see #registerSynchronization
 * @see TransactionSynchronization
 */
/**
 * 中央委托人，用于管理每个订户上下文的资源和事务同步。 
 * 由资源管理代码而非典型的应用程序代码使用。 
 *  <p>每个键支持一个资源而不会被覆盖，也就是说，需要先删除一个资源，然后才能为同一键设置新的资源。 
 * 如果同步处于活动状态，则支持事务同步列表。 
 *  <p>资源管理代码应检查上下文相关资源，例如通过{@code  getResource}进行数据库连接。 
 * 此类代码通常不应将资源绑定到工作单元，因为这是事务管理器的责任。 
 * 另一个选择是如果事务同步处于活动状态，则在首次使用时延迟绑定，以执行跨越任意数量资源的事务。 
 *  <p>事务同步必须由事务管理器通过{@link  #initSynchronization（）}和{@link  #clearSynchronization（）}进行激活和停用。 
 *  {@link  AbstractReactiveTransactionManager}自动支持此功能，因此所有标准Spring事务管理器也自动支持此功能。 
 *  <p>仅当此管理器处于活动状态时，资源管理代码才应注册同步，可以通过{@link  #isSynchronizationActive}进行检查； 
 * 它应该立即执行其他资源清理。 
 * 如果事务同步未处于活动状态，则说明当前没有事务，或者事务管理器不支持事务同步。 
 *  <p>例如，同步用于始终在事务中返回相同的资源，例如任何给定连接工厂的数据库连接。 
 *  @author  Mark Paluch @author  Juergen Hoeller @5.2起，
 * @see  #isSynchronizationActive 
 * @see  #registerSynchronization 
 * @see  TransactionSynchronization
 */
public class TransactionSynchronizationManager {

	private static final Log logger = LogFactory.getLog(TransactionSynchronizationManager.class);

	private final TransactionContext transactionContext;


	public TransactionSynchronizationManager(TransactionContext transactionContext) {
		this.transactionContext = transactionContext;
	}


	/**
	 * Get the {@link TransactionSynchronizationManager} that is associated with
	 * the current transaction context.
	 * <p>Mainly intended for code that wants to bind resources or synchronizations.
	 * @throws NoTransactionException if the transaction info cannot be found &mdash;
	 * for example, because the method was invoked outside a managed transaction
	 */
	/**
	 * 获取与当前事务上下文关联的{@link  TransactionSynchronizationManager}。 
	 *  <p>主要用于想要绑定资源或同步的代码。 
	 *  
	 * @throws  NoTransactionException-如果找不到交易信息，例如，因为该方法是在托管交易之外调用的
	 */
	public static Mono<TransactionSynchronizationManager> forCurrentTransaction() {
		return TransactionContextManager.currentContext().map(TransactionSynchronizationManager::new);
	}

	/**
	 * Check if there is a resource for the given key bound to the current thread.
	 * @param key the key to check (usually the resource factory)
	 * @return if there is a value bound to the current thread
	 */
	/**
	 * 检查给定键是否有资源绑定到当前线程。 
	 *  
	 * @param 键该键检查（通常是资源工厂）<
	 * @return>当前线程是否绑定了值
	 */
	public boolean hasResource(Object key) {
		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);
		Object value = doGetResource(actualKey);
		return (value != null);
	}

	/**
	 * Retrieve a resource for the given key that is bound to the current thread.
	 * @param key the key to check (usually the resource factory)
	 * @return a value bound to the current thread (usually the active
	 * resource object), or {@code null} if none
	 */
	/**
	 * 为绑定到当前线程的给定键检索资源。 
	 *  
	 * @param 键是用于检查（通常是资源工厂）的键（通常是资源工厂）。 
	 * 
	 */
	@Nullable
	public Object getResource(Object key) {
		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);
		Object value = doGetResource(actualKey);
		if (value != null && logger.isTraceEnabled()) {
			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to context [" +
					this.transactionContext.getName() + "]");
		}
		return value;
	}

	/**
	 * Actually check the value of the resource that is bound for the given key.
	 */
	/**
	 * 实际上检查为给定键绑定的资源的值。 
	 * 
	 */
	@Nullable
	private Object doGetResource(Object actualKey) {
		return this.transactionContext.getResources().get(actualKey);
	}

	/**
	 * Bind the given resource for the given key to the current context.
	 * @param key the key to bind the value to (usually the resource factory)
	 * @param value the value to bind (usually the active resource object)
	 * @throws IllegalStateException if there is already a value bound to the context
	 */
	/**
	 * 将给定键的给定资源绑定到当前上下文。 
	 *  
	 * @param 键绑定值的键（通常是资源工厂）
	 * @param 值绑定的值（通常是活动资源对象）
	 * @throws  IllegalStateException如果已经有绑定到上下文的值
	 */
	public void bindResource(Object key, Object value) throws IllegalStateException {
		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);
		Assert.notNull(value, "Value must not be null");
		Map<Object, Object> map = this.transactionContext.getResources();
		Object oldValue = map.put(actualKey, value);
		if (oldValue != null) {
			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +
					actualKey + "] bound to context [" + this.transactionContext.getName() + "]");
		}
		if (logger.isTraceEnabled()) {
			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to context [" +
					this.transactionContext.getName() + "]");
		}
	}

	/**
	 * Unbind a resource for the given key from the current context.
	 * @param key the key to unbind (usually the resource factory)
	 * @return the previously bound value (usually the active resource object)
	 * @throws IllegalStateException if there is no value bound to the context
	 */
	/**
	 * 从当前上下文中取消给定键的资源的绑定。 
	 *  
	 * @param 键取消绑定的键（通常是资源工厂）
	 * @return 先前绑定的值（通常是活动资源对象）
	 * @throws 如果上下文没有绑定值，则抛出IllegalStateException
	 */
	public Object unbindResource(Object key) throws IllegalStateException {
		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);
		Object value = doUnbindResource(actualKey);
		if (value == null) {
			throw new IllegalStateException(
					"No value for key [" + actualKey + "] bound to context [" + this.transactionContext.getName() + "]");
		}
		return value;
	}

	/**
	 * Unbind a resource for the given key from the current context.
	 * @param key the key to unbind (usually the resource factory)
	 * @return the previously bound value, or {@code null} if none bound
	 */
	/**
	 * 从当前上下文中取消给定键的资源的绑定。 
	 *  
	 * @param 键取消绑定（通常是资源工厂）的键
	 * @return 先前绑定的值，如果没有绑定，则为{@code  null}
	 */
	@Nullable
	public Object unbindResourceIfPossible(Object key) {
		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);
		return doUnbindResource(actualKey);
	}

	/**
	 * Actually remove the value of the resource that is bound for the given key.
	 */
	/**
	 * 实际上删除给定键绑定的资源的值。 
	 * 
	 */
	@Nullable
	private Object doUnbindResource(Object actualKey) {
		Map<Object, Object> map = this.transactionContext.getResources();
		Object value = map.remove(actualKey);
		if (value != null && logger.isTraceEnabled()) {
			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from context [" +
					this.transactionContext.getName() + "]");
		}
		return value;
	}


	//-------------------------------------------------------------------------
	// Management of transaction synchronizations
	//-------------------------------------------------------------------------

	/**
	 * Return if transaction synchronization is active for the current context.
	 * Can be called before register to avoid unnecessary instance creation.
	 * @see #registerSynchronization
	 */
	/**
	 * 如果事务同步在当前上下文中处于活动状态，则返回。 
	 * 可以在注册之前调用以避免不必要的实例创建。 
	 *  
	 * @see  #register同步
	 */
	public boolean isSynchronizationActive() {
		return (this.transactionContext.getSynchronizations() != null);
	}

	/**
	 * Activate transaction synchronization for the current context.
	 * Called by a transaction manager on transaction begin.
	 * @throws IllegalStateException if synchronization is already active
	 */
	/**
	 * 为当前上下文激活事务同步。 
	 * 由事务管理器在事务开始时调用。 
	 *  
	 * @throws  IllegalStateException如果同步已处于活动状态
	 */
	public void initSynchronization() throws IllegalStateException {
		if (isSynchronizationActive()) {
			throw new IllegalStateException("Cannot activate transaction synchronization - already active");
		}
		logger.trace("Initializing transaction synchronization");
		this.transactionContext.setSynchronizations(new LinkedHashSet<>());
	}

	/**
	 * Register a new transaction synchronization for the current context.
	 * Typically called by resource management code.
	 * <p>Note that synchronizations can implement the
	 * {@link org.springframework.core.Ordered} interface.
	 * They will be executed in an order according to their order value (if any).
	 * @param synchronization the synchronization object to register
	 * @throws IllegalStateException if transaction synchronization is not active
	 * @see org.springframework.core.Ordered
	 */
	/**
	 * 为当前上下文注册一个新的事务同步。 
	 * 通常由资源管理代码调用。 
	 *  <p>请注意，同步可以实现{@link  org.springframework.core.Ordered}接口。 
	 * 它们将根据其订单值（如果有）按订单执行。 
	 *  
	 * @param 同步同步对象以注册
	 * @throws 如果事务同步未处于活动状态，则IllegalStateException 
	 * @see  org.springframework.core.Ordered
	 */
	public void registerSynchronization(TransactionSynchronization synchronization)
			throws IllegalStateException {

		Assert.notNull(synchronization, "TransactionSynchronization must not be null");
		Set<TransactionSynchronization> synchs = this.transactionContext.getSynchronizations();
		if (synchs == null) {
			throw new IllegalStateException("Transaction synchronization is not active");
		}
		synchs.add(synchronization);
	}

	/**
	 * Return an unmodifiable snapshot list of all registered synchronizations
	 * for the current context.
	 * @return unmodifiable List of TransactionSynchronization instances
	 * @throws IllegalStateException if synchronization is not active
	 * @see TransactionSynchronization
	 */
	/**
	 * 返回当前上下文所有已注册同步的不可修改快照列表。 
	 *  
	 * @return 无法修改的TransactionSynchronization实例列表
	 * @throws 如果同步未处于活动状态，则抛出IllegalStateException 
	 * @see  TransactionSynchronization
	 */
	public List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {
		Set<TransactionSynchronization> synchs = this.transactionContext.getSynchronizations();
		if (synchs == null) {
			throw new IllegalStateException("Transaction synchronization is not active");
		}
		// Return unmodifiable snapshot, to avoid ConcurrentModificationExceptions
		// while iterating and invoking synchronization callbacks that in turn
		// might register further synchronizations.
		if (synchs.isEmpty()) {
			return Collections.emptyList();
		}
		else {
			// Sort lazily here, not in registerSynchronization.
			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs);
			AnnotationAwareOrderComparator.sort(sortedSynchs);
			return Collections.unmodifiableList(sortedSynchs);
		}
	}

	/**
	 * Deactivate transaction synchronization for the current context.
	 * Called by the transaction manager on transaction cleanup.
	 * @throws IllegalStateException if synchronization is not active
	 */
	/**
	 * 停用当前上下文的事务同步。 
	 * 由事务管理器在事务清理中调用。 
	 *  
	 * @throws  IllegalStateException如果同步未激活
	 */
	public void clearSynchronization() throws IllegalStateException {
		if (!isSynchronizationActive()) {
			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active");
		}
		logger.trace("Clearing transaction synchronization");
		this.transactionContext.setSynchronizations(null);
	}


	//-------------------------------------------------------------------------
	// Exposure of transaction characteristics
	//-------------------------------------------------------------------------

	/**
	 * Expose the name of the current transaction, if any.
	 * Called by the transaction manager on transaction begin and on cleanup.
	 * @param name the name of the transaction, or {@code null} to reset it
	 * @see org.springframework.transaction.TransactionDefinition#getName()
	 */
	/**
	 * 公开当前交易的名称（如果有）。 
	 * 事务管理器在事务开始和清理时调用。 
	 *  
	 * @param 命名事务的名称，或者使用{@code  null}重设它。 
	 * 
	 * @see  org.springframework.transaction.TransactionDefinition＃getName（）
	 */
	public void setCurrentTransactionName(@Nullable String name) {
		this.transactionContext.setCurrentTransactionName(name);
	}

	/**
	 * Return the name of the current transaction, or {@code null} if none set.
	 * To be called by resource management code for optimizations per use case,
	 * for example to optimize fetch strategies for specific named transactions.
	 * @see org.springframework.transaction.TransactionDefinition#getName()
	 */
	/**
	 * 返回当前事务的名称，如果未设置，则返回{@code  null}。 
	 * 由资源管理代码调用以针对每个用例进行优化，例如针对特定的命名事务优化获取策略。 
	 *  
	 * @see  org.springframework.transaction.TransactionDefinition＃getName（）
	 */
	@Nullable
	public String getCurrentTransactionName() {
		return this.transactionContext.getCurrentTransactionName();
	}

	/**
	 * Expose a read-only flag for the current transaction.
	 * Called by the transaction manager on transaction begin and on cleanup.
	 * @param readOnly {@code true} to mark the current transaction
	 * as read-only; {@code false} to reset such a read-only marker
	 * @see org.springframework.transaction.TransactionDefinition#isReadOnly()
	 */
	/**
	 * 公开当前事务的只读标志。 
	 * 事务管理器在事务开始和清理时调用。 
	 *  
	 * @param  readOnly {@code  true}将当前事务标记为只读； 
	 *  {@code  false}重置这样的只读标记
	 * @see  org.springframework.transaction.TransactionDefinition＃isReadOnly（）
	 */
	public void setCurrentTransactionReadOnly(boolean readOnly) {
		this.transactionContext.setCurrentTransactionReadOnly(readOnly);
	}

	/**
	 * Return whether the current transaction is marked as read-only.
	 * To be called by resource management code when preparing a newly
	 * created resource.
	 * <p>Note that transaction synchronizations receive the read-only flag
	 * as argument for the {@code beforeCommit} callback, to be able
	 * to suppress change detection on commit. The present method is meant
	 * to be used for earlier read-only checks.
	 * @see org.springframework.transaction.TransactionDefinition#isReadOnly()
	 * @see TransactionSynchronization#beforeCommit(boolean)
	 */
	/**
	 * 返回当前事务是否标记为只读。 
	 * 准备新创建的资源时由资源管理代码调用。 
	 *  <p>请注意，事务同步将只读标记作为{@code  beforeCommit}回调的参数接收，以便能够抑制提交时的更改检测。 
	 * 本方法旨在用于较早的只读检查。 
	 *  
	 * @see  org.springframework.transaction.TransactionDefinition＃isReadOnly（）
	 * @see  TransactionSynchronization＃beforeCommit（boolean）
	 */
	public boolean isCurrentTransactionReadOnly() {
		return this.transactionContext.isCurrentTransactionReadOnly();
	}

	/**
	 * Expose an isolation level for the current transaction.
	 * Called by the transaction manager on transaction begin and on cleanup.
	 * @param isolationLevel the isolation level to expose, according to the
	 * R2DBC Connection constants (equivalent to the corresponding Spring
	 * TransactionDefinition constants), or {@code null} to reset it
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE
	 * @see org.springframework.transaction.TransactionDefinition#getIsolationLevel()
	 */
	/**
	 * 公开当前事务的隔离级别。 
	 * 事务管理器在事务开始和清理时调用。 
	 *  
	 * @param  isolationLevel根据R2DBC Connection常量（相当于相应的Spring TransactionDefinition常量）公开要显示的隔离级别，或者使用{@code  null}重置它的
	 * @see  org.springframework.transaction.TransactionDefinition＃ ISOLATION_READ_UNCOMMITTED 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_READ_COMMITTED 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_REPEATABLE_READ 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_SERIALIZABLE。 
	 *  TransactionDefinition＃getIsolationLevel（）
	 */
	public void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel) {
		this.transactionContext.setCurrentTransactionIsolationLevel(isolationLevel);
	}

	/**
	 * Return the isolation level for the current transaction, if any.
	 * To be called by resource management code when preparing a newly
	 * created resource (for example, a R2DBC Connection).
	 * @return the currently exposed isolation level, according to the
	 * R2DBC Connection constants (equivalent to the corresponding Spring
	 * TransactionDefinition constants), or {@code null} if none
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ
	 * @see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE
	 * @see org.springframework.transaction.TransactionDefinition#getIsolationLevel()
	 */
	/**
	 * 返回当前事务的隔离级别（如果有）。 
	 * 在准备新创建的资源（例如，R2DBC连接）时由资源管理代码调用。 
	 * 根据R2DBC连接常量（相当于相应的Spring TransactionDefinition常量），<
	 * @return>当前公开的隔离级别，如果没有，则为{@code  null} 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_READ_UNCOMMITTED 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_READ_COMMITTED 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_REPEATABLE_READ 
	 * @see  org.springframework.transaction.TransactionDefinition＃ISOLATION_SERIALIZABLE 
	 * @see  org.springframework.transaction.TransactionDefinition getIsolationLevel（）
	 */
	@Nullable
	public Integer getCurrentTransactionIsolationLevel() {
		return this.transactionContext.getCurrentTransactionIsolationLevel();
	}

	/**
	 * Expose whether there currently is an actual transaction active.
	 * Called by the transaction manager on transaction begin and on cleanup.
	 * @param active {@code true} to mark the current context as being associated
	 * with an actual transaction; {@code false} to reset that marker
	 */
	/**
	 * 公开当前是否有实际的交易活动。 
	 * 事务管理器在事务开始和清理时调用。 
	 *  
	 * @param  active {@code  true}以将当前上下文标记为与实际事务关联； 
	 *  {@code  false}重设该标记
	 */
	public void setActualTransactionActive(boolean active) {
		this.transactionContext.setActualTransactionActive(active);
	}

	/**
	 * Return whether there currently is an actual transaction active.
	 * This indicates whether the current context is associated with an actual
	 * transaction rather than just with active transaction synchronization.
	 * <p>To be called by resource management code that wants to discriminate
	 * between active transaction synchronization (with or without backing
	 * resource transaction; also on PROPAGATION_SUPPORTS) and an actual
	 * transaction being active (with backing resource transaction;
	 * on PROPAGATION_REQUIRED, PROPAGATION_REQUIRES_NEW, etc).
	 * @see #isSynchronizationActive()
	 */
	/**
	 * 返回当前是否有实际的事务处于活动状态。 
	 * 这表明当前上下文是否与实际事务相关联，而不仅与活动事务同步相关联。 
	 *  <p>由资源管理代码调用，该资源管理代码要区分活动事务同步（有或没有后备资源事务； 
	 * 在PROPAGATION_SUPPORTS上）和实际活动的事务（有后备资源事务； 
	 * 在PROPAGATION_REQUIRED，PROPAGATION_REQUIRES_NEW等上）。 
	 *  
	 * @see  #isSynchronizationActive（）
	 */
	public boolean isActualTransactionActive() {
		return this.transactionContext.isActualTransactionActive();
	}

	/**
	 * Clear the entire transaction synchronization state:
	 * registered synchronizations as well as the various transaction characteristics.
	 * @see #clearSynchronization()
	 * @see #setCurrentTransactionName
	 * @see #setCurrentTransactionReadOnly
	 * @see #setCurrentTransactionIsolationLevel
	 * @see #setActualTransactionActive
	 */
	/**
	 * 清除整个事务同步状态：已注册的同步以及各种事务特征。 
	 *  
	 * @see  #clearSynchronization（）
	 * @see  #setCurrentTransactionName 
	 * @see  #setCurrentTransactionReadOnly 
	 * @see  #setCurrentTransactionIsolationLevel 
	 * @see  #setActualTransactionActive
	 */
	public void clear() {
		this.transactionContext.clear();
	}

}
