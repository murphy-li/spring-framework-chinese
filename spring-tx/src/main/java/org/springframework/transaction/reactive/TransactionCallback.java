/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.reactive;

import org.reactivestreams.Publisher;

import org.springframework.transaction.ReactiveTransaction;

/**
 * Callback interface for reactive transactional code. Used with {@link TransactionalOperator}'s
 * {@code execute} method, often as anonymous class within a method implementation.
 *
 * <p>Typically used to assemble various calls to transaction-unaware data access
 * services into a higher-level service method with transaction demarcation. As an
 * alternative, consider the use of declarative transaction demarcation (e.g. through
 * Spring's {@link org.springframework.transaction.annotation.Transactional} annotation).
 *
 * @author Mark Paluch
 * @author Juergen Hoeller
 * @since 5.2
 * @see TransactionalOperator
 * @param <T> the result type
 */
/**
 * 响应式事务代码的回调接口。 
 * 与{@link  TransactionalOperator}的{@code  execute}方法一起使用，通常与方法实现中的匿名类一起使用。 
 *  <p>通常用于将对不知道事务的数据访问服务的各种调用组合成具有事务划分的更高级别的服务方法。 
 * 或者，考虑使用声明式事务划分（例如通过Spring的{@link  org.springframework.transaction.annotation.Transactional}注释）。 
 *  @author  Mark Paluch @author  Juergen Hoeller @从5.2起
 * @see  TransactionalOperator 
 * @param  <T>结果类型
 */
@FunctionalInterface
public interface TransactionCallback<T> {

	/**
	 * Gets called by {@link TransactionalOperator} within a transactional context.
	 * Does not need to care about transactions itself, although it can retrieve and
	 * influence the status of the current transaction via the given status object,
	 * e.g. setting rollback-only.
	 * @param status associated transaction status
	 * @return a result publisher
	 * @see TransactionalOperator#transactional
	 */
	/**
	 * 由{@link  TransactionalOperator}在事务上下文中调用。 
	 * 尽管它可以通过给定的状态对象（例如）获取并影响当前交易的状态，但无需关心交易本身。 
	 * 设置仅回滚。 
	 *  
	 * @param 状态关联的交易状态
	 * @return 结果发布者
	 * @see  TransactionalOperator＃transactional
	 */
	Publisher<T> doInTransaction(ReactiveTransaction status);

}
