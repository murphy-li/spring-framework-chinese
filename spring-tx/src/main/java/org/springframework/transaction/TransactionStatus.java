/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction;

import java.io.Flushable;

/**
 * Representation of the status of a transaction.
 *
 * <p>Transactional code can use this to retrieve status information,
 * and to programmatically request a rollback (instead of throwing
 * an exception that causes an implicit rollback).
 *
 * <p>Includes the {@link SavepointManager} interface to provide access
 * to savepoint management facilities. Note that savepoint management
 * is only available if supported by the underlying transaction manager.
 *
 * @author Juergen Hoeller
 * @since 27.03.2003
 * @see #setRollbackOnly()
 * @see PlatformTransactionManager#getTransaction
 * @see org.springframework.transaction.support.TransactionCallback#doInTransaction
 * @see org.springframework.transaction.interceptor.TransactionInterceptor#currentTransactionStatus()
 */
/**
 * 交易状态的表示。 
 *  <p>事务代码可以使用它来检索状态信息，并以编程方式请求回滚（而不是引发导致隐式回滚的异常）。 
 *  <p>包括{@link  SavepointManager}界面，以提供对保存点管理工具的访问。 
 * 请注意，只有在基础事务管理器支持的情况下，保存点管理才可用。 
 *  @author  Juergen Hoeller @2003年3月27日起
 * @see  #setRollbackOnly（）
 * @see  PlatformTransactionManager＃getTransaction 
 * @see  org.springframework.transaction.support.TransactionCallback＃doInTransaction 
 * @see  org.springframework.transaction .interceptor.TransactionInterceptor＃currentTransactionStatus（）
 */
public interface TransactionStatus extends TransactionExecution, SavepointManager, Flushable {

	/**
	 * Return whether this transaction internally carries a savepoint,
	 * that is, has been created as nested transaction based on a savepoint.
	 * <p>This method is mainly here for diagnostic purposes, alongside
	 * {@link #isNewTransaction()}. For programmatic handling of custom
	 * savepoints, use the operations provided by {@link SavepointManager}.
	 * @see #isNewTransaction()
	 * @see #createSavepoint()
	 * @see #rollbackToSavepoint(Object)
	 * @see #releaseSavepoint(Object)
	 */
	/**
	 * 返回此事务是否在内部携带保存点，即是否已基于保存点将其创建为嵌套事务。 
	 *  <p>此方法主要用于诊断目的，与{@link  #isNewTransaction（）}一起使用。 
	 * 要以编程方式处理自定义保存点，请使用{@link  SavepointManager}提供的操作。 
	 *  
	 * @see  #isNewTransaction（）
	 * @see  #createSavepoint（）
	 * @see  #rollbackToSavepoint（对象）
	 * @see  #releaseSavepoint（对象）
	 */
	boolean hasSavepoint();

	/**
	 * Flush the underlying session to the datastore, if applicable:
	 * for example, all affected Hibernate/JPA sessions.
	 * <p>This is effectively just a hint and may be a no-op if the underlying
	 * transaction manager does not have a flush concept. A flush signal may
	 * get applied to the primary resource or to transaction synchronizations,
	 * depending on the underlying resource.
	 */
	/**
	 * 如果适用，将基础会话刷新到数据存储区：例如，所有受影响的Hibernate / JPA会话。 
	 *  <p>这实际上只是一个提示，如果基础事务管理器没有冲洗概念，则可能是不做任何事情。 
	 * 根据基础资源，刷新信号可能会应用于主要资源或事务同步。 
	 * 
	 */
	@Override
	void flush();

}
