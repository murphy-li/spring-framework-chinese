/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction;

import org.springframework.lang.Nullable;

/**
 * Interface that defines Spring-compliant transaction properties.
 * Based on the propagation behavior definitions analogous to EJB CMT attributes.
 *
 * <p>Note that isolation level and timeout settings will not get applied unless
 * an actual new transaction gets started. As only {@link #PROPAGATION_REQUIRED},
 * {@link #PROPAGATION_REQUIRES_NEW} and {@link #PROPAGATION_NESTED} can cause
 * that, it usually doesn't make sense to specify those settings in other cases.
 * Furthermore, be aware that not all transaction managers will support those
 * advanced features and thus might throw corresponding exceptions when given
 * non-default values.
 *
 * <p>The {@link #isReadOnly() read-only flag} applies to any transaction context,
 * whether backed by an actual resource transaction or operating non-transactionally
 * at the resource level. In the latter case, the flag will only apply to managed
 * resources within the application, such as a Hibernate {@code Session}.
 *
 * @author Juergen Hoeller
 * @since 08.05.2003
 * @see PlatformTransactionManager#getTransaction(TransactionDefinition)
 * @see org.springframework.transaction.support.DefaultTransactionDefinition
 * @see org.springframework.transaction.interceptor.TransactionAttribute
 */
/**
 * 定义与Spring兼容的事务属性的接口。 
 * 基于类似于EJB CMT属性的传播行为定义。 
 *  <p>请注意，除非启动实际的新事务，否则不会应用隔离级别和超时设置。 
 * 由于只有{@link  #PROPAGATION_REQUIRED}，{<@link> #PROPAGATION_REQUIRES_NEW}和{@link  #PROPAGATION_NESTED}会导致这种情况，因此在其他情况下指定这些设置通常是没有意义的。 
 * 此外，请注意，并非所有的事务管理器都将支持那些高级功能，因此在给定非默认值时可能会引发相应的异常。 
 *  <p> {<@link> #isReadOnly（）只读标志}适用于任何事务上下文，无论是由实际资源事务支持还是在资源级别进行非事务操作。 
 * 在后一种情况下，该标志仅适用于应用程序内的托管资源，例如Hibernate {@code  Session}。 
 *  @author  Juergen Hoeller @2003年5月8日起
 * @see  PlatformTransactionManager＃getTransaction（TransactionDefinition）
 * @see  org.springframework.transaction.support.DefaultTransactionDefinition 
 * @see  org.springframework.transaction.interceptor.TransactionAttribute
 */
public interface TransactionDefinition {

	/**
	 * Support a current transaction; create a new one if none exists.
	 * Analogous to the EJB transaction attribute of the same name.
	 * <p>This is typically the default setting of a transaction definition,
	 * and typically defines a transaction synchronization scope.
	 */
	/**
	 * 支持当前交易； 
	 * 如果不存在，请创建一个新的。 
	 * 类似于同名的EJB事务属性。 
	 *  <p>这通常是事务定义的默认设置，并且通常定义事务同步作用域。 
	 * 
	 */
	int PROPAGATION_REQUIRED = 0;

	/**
	 * Support a current transaction; execute non-transactionally if none exists.
	 * Analogous to the EJB transaction attribute of the same name.
	 * <p><b>NOTE:</b> For transaction managers with transaction synchronization,
	 * {@code PROPAGATION_SUPPORTS} is slightly different from no transaction
	 * at all, as it defines a transaction scope that synchronization might apply to.
	 * As a consequence, the same resources (a JDBC {@code Connection}, a
	 * Hibernate {@code Session}, etc) will be shared for the entire specified
	 * scope. Note that the exact behavior depends on the actual synchronization
	 * configuration of the transaction manager!
	 * <p>In general, use {@code PROPAGATION_SUPPORTS} with care! In particular, do
	 * not rely on {@code PROPAGATION_REQUIRED} or {@code PROPAGATION_REQUIRES_NEW}
	 * <i>within</i> a {@code PROPAGATION_SUPPORTS} scope (which may lead to
	 * synchronization conflicts at runtime). If such nesting is unavoidable, make sure
	 * to configure your transaction manager appropriately (typically switching to
	 * "synchronization on actual transaction").
	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setTransactionSynchronization
	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#SYNCHRONIZATION_ON_ACTUAL_TRANSACTION
	 */
	/**
	 * 支持当前交易； 
	 * 如果不存在，则以非事务方式执行。 
	 * 类似于同名的EJB事务属性。 
	 *  <p> <b>注意：</ b>对于具有事务同步的事务管理器，{<@code> PROPAGATION_SUPPORTS}与根本没有事务略有不同，因为它定义了同步可能适用的事务范围。 
	 * 因此，将为整个指定范围共享相同的资源（JDBC {@code 连接}，Hibernate {@code 会话}等）。 
	 * 请注意，确切的行为取决于事务管理器的实际同步配置！ 
	 *  <p>通常，请小心使用{@code  PROPAGATION_SUPPORTS}！ 
	 * 特别是，请勿在{@code  PROPAGATION_SUPPORTS}范围内（在运行时可能导致同步冲突）依靠{@code  PROPAGATION_REQUIRED}或{@code  PROPAGATION_REQUIRES_NEW} <i>。 
	 * 如果这种嵌套是不可避免的，请确保适当地配置您的事务管理器（通常切换到"实际事务的同步"）。 
	 *  
	 * @see  org.springframework.transaction.support.AbstractPlatformTransactionManager＃setTransactionSynchronization 
	 * @see  org.springframework.transaction.support.AbstractPlatformTransactionManager＃SYNCHRONIZATION_ON_ACTUAL_TRANSACTION
	 */
	int PROPAGATION_SUPPORTS = 1;

	/**
	 * Support a current transaction; throw an exception if no current transaction
	 * exists. Analogous to the EJB transaction attribute of the same name.
	 * <p>Note that transaction synchronization within a {@code PROPAGATION_MANDATORY}
	 * scope will always be driven by the surrounding transaction.
	 */
	/**
	 * 支持当前交易； 
	 * 如果当前事务不存在，则引发异常。 
	 * 类似于同名的EJB事务属性。 
	 *  <p>请注意，{<@code> PROPAGATION_MANDATORY}范围内的事务同步将始终由周围的事务驱动。 
	 * 
	 */
	int PROPAGATION_MANDATORY = 2;

	/**
	 * Create a new transaction, suspending the current transaction if one exists.
	 * Analogous to the EJB transaction attribute of the same name.
	 * <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box
	 * on all transaction managers. This in particular applies to
	 * {@link org.springframework.transaction.jta.JtaTransactionManager},
	 * which requires the {@code javax.transaction.TransactionManager} to be
	 * made available it to it (which is server-specific in standard Java EE).
	 * <p>A {@code PROPAGATION_REQUIRES_NEW} scope always defines its own
	 * transaction synchronizations. Existing synchronizations will be suspended
	 * and resumed appropriately.
	 * @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager
	 */
	/**
	 * 创建一个新事务，如果存在则暂停当前事务。 
	 * 类似于同名的EJB事务属性。 
	 *  <p> <b>注意：</ b>并非所有交易管理器都可以立即使用实际的交易暂停功能。 
	 * 这尤其适用于{@link  org.springframework.transaction.jta.JtaTransactionManager}，它要求{@code  javax.transaction.TransactionManager}对其可用（标准中特定于服务器） Java EE）。 
	 *  <p> {<@code> PROPAGATION_REQUIRES_NEW}范围始终定义自己的事务同步。 
	 * 现有同步将被暂停并适当恢复。 
	 *  
	 * @see  org.springframework.transaction.jta.JtaTransactionManager＃setTransactionManager
	 */
	int PROPAGATION_REQUIRES_NEW = 3;

	/**
	 * Do not support a current transaction; rather always execute non-transactionally.
	 * Analogous to the EJB transaction attribute of the same name.
	 * <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box
	 * on all transaction managers. This in particular applies to
	 * {@link org.springframework.transaction.jta.JtaTransactionManager},
	 * which requires the {@code javax.transaction.TransactionManager} to be
	 * made available it to it (which is server-specific in standard Java EE).
	 * <p>Note that transaction synchronization is <i>not</i> available within a
	 * {@code PROPAGATION_NOT_SUPPORTED} scope. Existing synchronizations
	 * will be suspended and resumed appropriately.
	 * @see org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager
	 */
	/**
	 * 不支持当前交易； 
	 * 而是始终以非事务方式执行。 
	 * 类似于同名的EJB事务属性。 
	 *  <p> <b>注意：</ b>并非所有交易管理器都可以立即使用实际的交易暂停功能。 
	 * 这尤其适用于{@link  org.springframework.transaction.jta.JtaTransactionManager}，它要求{@code  javax.transaction.TransactionManager}对其可用（标准中特定于服务器） Java EE）。 
	 *  <p>请注意，在{@code  PROPAGATION_NOT_SUPPORTED}范围内，<i>不</ i>不提供事务同步。 
	 * 现有同步将被暂停并适当恢复。 
	 *  
	 * @see  org.springframework.transaction.jta.JtaTransactionManager＃setTransactionManager
	 */
	int PROPAGATION_NOT_SUPPORTED = 4;

	/**
	 * Do not support a current transaction; throw an exception if a current transaction
	 * exists. Analogous to the EJB transaction attribute of the same name.
	 * <p>Note that transaction synchronization is <i>not</i> available within a
	 * {@code PROPAGATION_NEVER} scope.
	 */
	/**
	 * 不支持当前交易； 
	 * 如果当前事务存在，则引发异常。 
	 * 类似于同名的EJB事务属性。 
	 *  <p>请注意，在{@code  PROPAGATION_NEVER}范围内，<i>不</ i>不提供事务同步。 
	 * 
	 */
	int PROPAGATION_NEVER = 5;

	/**
	 * Execute within a nested transaction if a current transaction exists,
	 * behave like {@link #PROPAGATION_REQUIRED} otherwise. There is no
	 * analogous feature in EJB.
	 * <p><b>NOTE:</b> Actual creation of a nested transaction will only work on
	 * specific transaction managers. Out of the box, this only applies to the JDBC
	 * {@link org.springframework.jdbc.datasource.DataSourceTransactionManager}
	 * when working on a JDBC 3.0 driver. Some JTA providers might support
	 * nested transactions as well.
	 * @see org.springframework.jdbc.datasource.DataSourceTransactionManager
	 */
	/**
	 * 如果当前事务存在，则在嵌套事务中执行，否则，其行为类似于{@link  #PROPAGATION_REQUIRED}。 
	 *  EJB中没有类似功能。 
	 *  <p> <b>注意：</ b>嵌套事务的实际创建仅适用于特定的事务管理器。 
	 * 开箱即用，仅在使用JDBC 3.0驱动程序时才适用于JDBC {@link  org.springframework.jdbc.datasource.DataSourceTransactionManager}。 
	 * 一些JTA提供程序可能也支持嵌套事务。 
	 *  
	 * @see  org.springframework.jdbc.datasource.DataSourceTransactionManager
	 */
	int PROPAGATION_NESTED = 6;


	/**
	 * Use the default isolation level of the underlying datastore.
	 * All other levels correspond to the JDBC isolation levels.
	 * @see java.sql.Connection
	 */
	/**
	 * 使用基础数据存储的默认隔离级别。 
	 * 所有其他级别对应于JDBC隔离级别。 
	 *  
	 * @see  java.sql.Connection
	 */
	int ISOLATION_DEFAULT = -1;

	/**
	 * Indicates that dirty reads, non-repeatable reads and phantom reads
	 * can occur.
	 * <p>This level allows a row changed by one transaction to be read by another
	 * transaction before any changes in that row have been committed (a "dirty read").
	 * If any of the changes are rolled back, the second transaction will have
	 * retrieved an invalid row.
	 * @see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED
	 */
	/**
	 * 表示可能发生脏读，不可重复读和幻像读。 
	 *  <p>此级别允许在提交某一行之前所做的任何更改（"脏读"）之前，另一事务读取该事务更改的行。 
	 * 如果任何更改被回滚，则第二个事务将检索到无效的行。 
	 *  
	 * @see  java.sql.Connection＃TRANSACTION_READ_UNCOMMITTED
	 */
	int ISOLATION_READ_UNCOMMITTED = 1;  // same as java.sql.Connection.TRANSACTION_READ_UNCOMMITTED;

	/**
	 * Indicates that dirty reads are prevented; non-repeatable reads and
	 * phantom reads can occur.
	 * <p>This level only prohibits a transaction from reading a row
	 * with uncommitted changes in it.
	 * @see java.sql.Connection#TRANSACTION_READ_COMMITTED
	 */
	/**
	 * 指示防止脏读； 
	 * 可能会发生不可重复的读取和幻像读取。 
	 *  <p>此级别仅禁止事务读取行中未提交的更改。 
	 *  
	 * @see  java.sql.Connection＃TRANSACTION_READ_COMMITTED
	 */
	int ISOLATION_READ_COMMITTED = 2;  // same as java.sql.Connection.TRANSACTION_READ_COMMITTED;

	/**
	 * Indicates that dirty reads and non-repeatable reads are prevented;
	 * phantom reads can occur.
	 * <p>This level prohibits a transaction from reading a row with uncommitted changes
	 * in it, and it also prohibits the situation where one transaction reads a row,
	 * a second transaction alters the row, and the first transaction re-reads the row,
	 * getting different values the second time (a "non-repeatable read").
	 * @see java.sql.Connection#TRANSACTION_REPEATABLE_READ
	 */
	/**
	 * 指示防止脏读和不可重复读； 
	 * 幻像读取可能发生。 
	 *  <p>此级别禁止事务读取其中未提交更改的行，并且还禁止以下情况：一个事务读取一行，第二个事务更改该行，第一个事务重新读取该行，从而变得不同值第二次（"不可重复读取"）。 
	 *  
	 * @see  java.sql.Connection＃TRANSACTION_REPEATABLE_READ
	 */
	int ISOLATION_REPEATABLE_READ = 4;  // same as java.sql.Connection.TRANSACTION_REPEATABLE_READ;

	/**
	 * Indicates that dirty reads, non-repeatable reads and phantom reads
	 * are prevented.
	 * <p>This level includes the prohibitions in {@link #ISOLATION_REPEATABLE_READ}
	 * and further prohibits the situation where one transaction reads all rows that
	 * satisfy a {@code WHERE} condition, a second transaction inserts a row
	 * that satisfies that {@code WHERE} condition, and the first transaction
	 * re-reads for the same condition, retrieving the additional "phantom" row
	 * in the second read.
	 * @see java.sql.Connection#TRANSACTION_SERIALIZABLE
	 */
	/**
	 * 表示防止脏读，不可重复读和幻像读。 
	 *  <p>该级别包括{@link  #ISOLATION_REPEATABLE_READ}中的禁止条件，并进一步禁止一种事务读取满足{@code  WHERE}条件的所有行，第二种事务插入满足{ @code  WHERE}条件，并且第一个事务重新读取相同的条件，并在第二次读取中检索其他"幻像"行。 
	 *  
	 * @see  java.sql.Connection＃TRANSACTION_SERIALIZABLE
	 */
	int ISOLATION_SERIALIZABLE = 8;  // same as java.sql.Connection.TRANSACTION_SERIALIZABLE;


	/**
	 * Use the default timeout of the underlying transaction system,
	 * or none if timeouts are not supported.
	 */
	/**
	 * 使用基础事务系统的默认超时； 
	 * 如果不支持超时，则不使用默认超时。 
	 * 
	 */
	int TIMEOUT_DEFAULT = -1;


	/**
	 * Return the propagation behavior.
	 * <p>Must return one of the {@code PROPAGATION_XXX} constants
	 * defined on {@link TransactionDefinition this interface}.
	 * <p>The default is {@link #PROPAGATION_REQUIRED}.
	 * @return the propagation behavior
	 * @see #PROPAGATION_REQUIRED
	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#isActualTransactionActive()
	 */
	/**
	 * 返回传播行为。 
	 *  <p>必须返回在{@link  TransactionDefinition此接口}上定义的{@code  PROPAGATION_XXX}常量之一。 
	 *  <p>默认值为{@link  #PROPAGATION_REQUIRED}。 
	 *  
	 * @return 传播行为
	 * @see  #PROPAGATION_REQUIRED 
	 * @see  org.springframework.transaction.support.TransactionSynchronizationManager＃isActualTransactionActive（）
	 */
	default int getPropagationBehavior() {
		return PROPAGATION_REQUIRED;
	}

	/**
	 * Return the isolation level.
	 * <p>Must return one of the {@code ISOLATION_XXX} constants defined on
	 * {@link TransactionDefinition this interface}. Those constants are designed
	 * to match the values of the same constants on {@link java.sql.Connection}.
	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or
	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started
	 * transactions. Consider switching the "validateExistingTransactions" flag to
	 * "true" on your transaction manager if you'd like isolation level declarations
	 * to get rejected when participating in an existing transaction with a different
	 * isolation level.
	 * <p>The default is {@link #ISOLATION_DEFAULT}. Note that a transaction manager
	 * that does not support custom isolation levels will throw an exception when
	 * given any other level than {@link #ISOLATION_DEFAULT}.
	 * @return the isolation level
	 * @see #ISOLATION_DEFAULT
	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction
	 */
	/**
	 * 返回隔离级别。 
	 *  <p>必须返回在{@link  TransactionDefinition此接口}上定义的{@code  ISOLATION_XXX}常量之一。 
	 * 这些常量旨在与{@link  java.sql.Connection}上相同常量的值匹配。 
	 *  <p>专门设计用于{@link  #PROPAGATION_REQUIRED}或{@link  #PROPAGATION_REQUIRES_NEW}，因为它仅适用于新启动的交易。 
	 * 如果希望在参与具有不同隔离级别的现有事务时拒绝隔离级别声明，请考虑在事务管理器上将"validateExistingTransactions"标志切换为"true"。 
	 *  <p>默认值为{@link  #ISOLATION_DEFAULT}。 
	 * 请注意，不支持自定义隔离级别的事务管理器在给定除{@link  #ISOLATION_DEFAULT}以外的任何其他级别时，将引发异常。 
	 *  
	 * @return 隔离级别
	 * @see  #ISOLATION_DEFAULT 
	 * @see  org.springframework.transaction.support.AbstractPlatformTransactionManager＃setValidateExistingTransaction
	 */
	default int getIsolationLevel() {
		return ISOLATION_DEFAULT;
	}

	/**
	 * Return the transaction timeout.
	 * <p>Must return a number of seconds, or {@link #TIMEOUT_DEFAULT}.
	 * <p>Exclusively designed for use with {@link #PROPAGATION_REQUIRED} or
	 * {@link #PROPAGATION_REQUIRES_NEW} since it only applies to newly started
	 * transactions.
	 * <p>Note that a transaction manager that does not support timeouts will throw
	 * an exception when given any other timeout than {@link #TIMEOUT_DEFAULT}.
	 * <p>The default is {@link #TIMEOUT_DEFAULT}.
	 * @return the transaction timeout
	 */
	/**
	 * 返回事务超时。 
	 *  <p>必须返回秒数，或{@link  #TIMEOUT_DEFAULT}。 
	 *  <p>专门设计用于{@link  #PROPAGATION_REQUIRED}或{@link  #PROPAGATION_REQUIRES_NEW}，因为它仅适用于新启动的交易。 
	 *  <p>请注意，不提供超时的事务管理器会在{{@@link> #TIMEOUT_DEFAULT}以外的其他任何超时下抛出异常。 
	 *  <p>默认值为{@link  #TIMEOUT_DEFAULT}。 
	 *  
	 * @return 事务超时
	 */
	default int getTimeout() {
		return TIMEOUT_DEFAULT;
	}

	/**
	 * Return whether to optimize as a read-only transaction.
	 * <p>The read-only flag applies to any transaction context, whether backed
	 * by an actual resource transaction ({@link #PROPAGATION_REQUIRED}/
	 * {@link #PROPAGATION_REQUIRES_NEW}) or operating non-transactionally at
	 * the resource level ({@link #PROPAGATION_SUPPORTS}). In the latter case,
	 * the flag will only apply to managed resources within the application,
	 * such as a Hibernate {@code Session}.
	 * <p>This just serves as a hint for the actual transaction subsystem;
	 * it will <i>not necessarily</i> cause failure of write access attempts.
	 * A transaction manager which cannot interpret the read-only hint will
	 * <i>not</i> throw an exception when asked for a read-only transaction.
	 * @return {@code true} if the transaction is to be optimized as read-only
	 * ({@code false} by default)
	 * @see org.springframework.transaction.support.TransactionSynchronization#beforeCommit(boolean)
	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly()
	 */
	/**
	 * 返回是否优化为只读事务。 
	 *  <p>只读标志适用于任何事务上下文，无论是由实际资源事务（{@link  #PROPAGATION_REQUIRED} / {@link  #PROPAGATION_REQUIRES_NEW}）支持还是在资源级别上非事务操作（ {@link  #PROPAGATION_SUPPORTS}）。 
	 * 在后一种情况下，该标志仅适用于应用程序内的托管资源，例如Hibernate {@code  Session}。 
	 *  <p>这仅是实际交易子系统的提示； 
	 *  <i>不一定</ i>会导致写访问尝试失败。 
	 * 当请求只读事务时，无法解释只读提示的事务管理器将<i>不</ i>抛出异常。 
	 *  
	 * @return  {@code  true}，如果要将事务优化为只读（默认为{@code  false}）
	 * @see  org.springframework.transaction.support.TransactionSynchronization＃beforeCommit（boolean ）
	 * @see  org.springframework.transaction.support.TransactionSynchronizationManager＃isCurrentTransactionReadOnly（）
	 */
	default boolean isReadOnly() {
		return false;
	}

	/**
	 * Return the name of this transaction. Can be {@code null}.
	 * <p>This will be used as the transaction name to be shown in a
	 * transaction monitor, if applicable (for example, WebLogic's).
	 * <p>In case of Spring's declarative transactions, the exposed name will be
	 * the {@code fully-qualified class name + "." + method name} (by default).
	 * @return the name of this transaction ({@code null} by default}
	 * @see org.springframework.transaction.interceptor.TransactionAspectSupport
	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionName()
	 */
	/**
	 * 返回此交易的名称。 
	 * 可以为{@code  null}。 
	 *  <p>这将用作要在事务监视器中显示的事务名称（例如，WebLogic的名称）。 
	 *  <p>对于Spring的声明式事务，公开的名称将是{@code 完全限定的类名称+"。 
	 *  +方法名称}（默认情况下）。 
	 *  
	 * @return 此事务的名称（默认为{<@@code> null}} 
	 * @see  org.springframework.transaction.interceptor.TransactionAspectSupport 
	 * @see  org.springframework.transaction.support.TransactionSynchronizationManager＃getCurrentTransactionName（）
	 */
	@Nullable
	default String getName() {
		return null;
	}


	// Static builder methods

	/**
	 * Return an unmodifiable {@code TransactionDefinition} with defaults.
	 * <p>For customization purposes, use the modifiable
	 * {@link org.springframework.transaction.support.DefaultTransactionDefinition}
	 * instead.
	 * @since 5.2
	 */
	/**
	 * 返回带有默认值的不可修改的{@code  TransactionDefinition}。 
	 *  <p>出于自定义目的，请改用可修改的{@link  org.springframework.transaction.support.DefaultTransactionDefinition}。 
	 *  @5.2起
	 */
	static TransactionDefinition withDefaults() {
		return StaticTransactionDefinition.INSTANCE;
	}

}
