/** Generated by english-annotation-buster, Powered by Google Translate.**/
/**
 * AOP-based solution for declarative transaction demarcation.
 * Builds on the AOP infrastructure in org.springframework.aop.framework.
 * Any POJO can be transactionally advised with Spring.
 *
 * <p>The TransactionFactoryProxyBean can be used to create transactional
 * AOP proxies transparently to code that uses them.
 *
 * <p>The TransactionInterceptor is the AOP Alliance MethodInterceptor that
 * delivers transactional advice, based on the Spring transaction abstraction.
 * This allows declarative transaction management in any environment,
 * even without JTA if an application uses only a single database.
 */
/**
 * 基于AOP的声明式事务划分解决方案。 
 * 以org.springframework.aop.framework中的AOP基础结构为基础。 
 *  Spring可以为任何POJO提供交易建议。 
 *  <p> TransactionFactoryProxyBean可用于透明地创建事务性AOP代理，以使用它们的代码。 
 *  <p> TransactionInterceptor是AOP Alliance MethodInterceptor，它基于Spring事务抽象来提供事务建议。 
 * 这允许在任何环境中进行声明式事务管理，即使应用程序仅使用单个数据库，也无需JTA。 
 * 
 */
@NonNullApi
@NonNullFields
package org.springframework.transaction.interceptor;

import org.springframework.lang.NonNullApi;
import org.springframework.lang.NonNullFields;
