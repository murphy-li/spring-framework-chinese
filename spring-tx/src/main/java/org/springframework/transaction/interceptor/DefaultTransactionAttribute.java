/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.interceptor;

import org.springframework.lang.Nullable;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.util.StringUtils;

/**
 * Spring's common transaction attribute implementation.
 * Rolls back on runtime, but not checked, exceptions by default.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 16.03.2003
 */
/**
 * Spring的通用事务属性实现。 
 * 默认情况下，在运行时回滚但不检查异常。 
 *  @author  Rod Johnson @author  Juergen Hoeller @自2003年3月16日起
 */
@SuppressWarnings("serial")
public class DefaultTransactionAttribute extends DefaultTransactionDefinition implements TransactionAttribute {

	@Nullable
	private String qualifier;

	@Nullable
	private String descriptor;


	/**
	 * Create a new DefaultTransactionAttribute, with default settings.
	 * Can be modified through bean property setters.
	 * @see #setPropagationBehavior
	 * @see #setIsolationLevel
	 * @see #setTimeout
	 * @see #setReadOnly
	 * @see #setName
	 */
	/**
	 * 使用默认设置创建一个新的DefaultTransactionAttribute。 
	 * 可以通过bean属性设置器进行修改。 
	 *  
	 * @see  #setPropagationBehavior 
	 * @see  #setIsolationLevel 
	 * @see  #setTimeout 
	 * @see  #setReadOnly 
	 * @see  #setName
	 */
	public DefaultTransactionAttribute() {
		super();
	}

	/**
	 * Copy constructor. Definition can be modified through bean property setters.
	 * @see #setPropagationBehavior
	 * @see #setIsolationLevel
	 * @see #setTimeout
	 * @see #setReadOnly
	 * @see #setName
	 */
	/**
	 * 复制构造函数。 
	 * 可以通过bean属性设置器来修改定义。 
	 *  
	 * @see  #setPropagationBehavior 
	 * @see  #setIsolationLevel 
	 * @see  #setTimeout 
	 * @see  #setReadOnly 
	 * @see  #setName
	 */
	public DefaultTransactionAttribute(TransactionAttribute other) {
		super(other);
	}

	/**
	 * Create a new DefaultTransactionAttribute with the given
	 * propagation behavior. Can be modified through bean property setters.
	 * @param propagationBehavior one of the propagation constants in the
	 * TransactionDefinition interface
	 * @see #setIsolationLevel
	 * @see #setTimeout
	 * @see #setReadOnly
	 */
	/**
	 * 使用给定的传播行为创建一个新的DefaultTransactionAttribute。 
	 * 可以通过bean属性设置器进行修改。 
	 *  
	 * @param  propagationBehavior在TransactionDefinition接口中的传播常量之一
	 * @see  #setIsolationLevel 
	 * @see  #setTimeout 
	 * @see  #setReadOnly
	 */
	public DefaultTransactionAttribute(int propagationBehavior) {
		super(propagationBehavior);
	}


	/**
	 * Associate a qualifier value with this transaction attribute.
	 * <p>This may be used for choosing a corresponding transaction manager
	 * to process this specific transaction.
	 * @since 3.0
	 */
	/**
	 * 将限定符值与此交易属性相关联。 
	 *  <p>这可用于选择相应的交易管理器来处理此特定交易。 
	 *  @从3.0起
	 */
	public void setQualifier(@Nullable String qualifier) {
		this.qualifier = qualifier;
	}

	/**
	 * Return a qualifier value associated with this transaction attribute.
	 * @since 3.0
	 */
	/**
	 * 返回与此事务属性关联的限定符值。 
	 *  @从3.0起
	 */
	@Override
	@Nullable
	public String getQualifier() {
		return this.qualifier;
	}

	/**
	 * Set a descriptor for this transaction attribute,
	 * e.g. indicating where the attribute is applying.
	 * @since 4.3.4
	 */
	/**
	 * 为此交易属性设置一个描述符，例如指示属性在哪里应用。 
	 *  @自4.3.4起
	 */
	public void setDescriptor(@Nullable String descriptor) {
		this.descriptor = descriptor;
	}

	/**
	 * Return a descriptor for this transaction attribute,
	 * or {@code null} if none.
	 * @since 4.3.4
	 */
	/**
	 * 返回此事务属性的描述符，如果没有，则返回{@code  null}。 
	 *  @自4.3.4起
	 */
	@Nullable
	public String getDescriptor() {
		return this.descriptor;
	}

	/**
	 * The default behavior is as with EJB: rollback on unchecked exception
	 * ({@link RuntimeException}), assuming an unexpected outcome outside of any
	 * business rules. Additionally, we also attempt to rollback on {@link Error} which
	 * is clearly an unexpected outcome as well. By contrast, a checked exception is
	 * considered a business exception and therefore a regular expected outcome of the
	 * transactional business method, i.e. a kind of alternative return value which
	 * still allows for regular completion of resource operations.
	 * <p>This is largely consistent with TransactionTemplate's default behavior,
	 * except that TransactionTemplate also rolls back on undeclared checked exceptions
	 * (a corner case). For declarative transactions, we expect checked exceptions to be
	 * intentionally declared as business exceptions, leading to a commit by default.
	 * @see org.springframework.transaction.support.TransactionTemplate#execute
	 */
	/**
	 * 缺省行为与EJB相同：假设未考虑任何业务规则之外的意外结果，则在未经检查的异常（{@link  RuntimeException}）上回滚。 
	 * 此外，我们还尝试回退{@link  Error}，这显然也是意外的结果。 
	 * 相反，被检查的异常被视为业务异常，因此是交易业务方法的常规预期结果，即一种替代返回值，其仍允许资源操作的常规完成。 
	 *  <p>这与TransactionTemplate的默认行为基本一致，不同之处在于TransactionTemplate还会在未声明的检查异常（极端情况）上回滚。 
	 * 对于声明式事务，我们希望将检查异常特意声明为业务异常，从而导致默认情况下的提交。 
	 *  
	 * @see  org.springframework.transaction.support.TransactionTemplate＃execute
	 */
	@Override
	public boolean rollbackOn(Throwable ex) {
		return (ex instanceof RuntimeException || ex instanceof Error);
	}


	/**
	 * Return an identifying description for this transaction attribute.
	 * <p>Available to subclasses, for inclusion in their {@code toString()} result.
	 */
	/**
	 * 返回此事务属性的标识描述。 
	 *  <p>子类可用，包含在它们的{@code  toString（）}结果中。 
	 * 
	 */
	protected final StringBuilder getAttributeDescription() {
		StringBuilder result = getDefinitionDescription();
		if (StringUtils.hasText(this.qualifier)) {
			result.append("; '").append(this.qualifier).append("'");
		}
		return result;
	}

}
