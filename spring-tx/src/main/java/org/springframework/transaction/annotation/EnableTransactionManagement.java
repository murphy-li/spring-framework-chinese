/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.annotation.AdviceMode;
import org.springframework.context.annotation.Import;
import org.springframework.core.Ordered;

/**
 * Enables Spring's annotation-driven transaction management capability, similar to
 * the support found in Spring's {@code <tx:*>} XML namespace. To be used on
 * {@link org.springframework.context.annotation.Configuration @Configuration}
 * classes as follows:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableTransactionManagement
 * public class AppConfig {
 *
 *     &#064;Bean
 *     public FooRepository fooRepository() {
 *         // configure and return a class having &#064;Transactional methods
 *         return new JdbcFooRepository(dataSource());
 *     }
 *
 *     &#064;Bean
 *     public DataSource dataSource() {
 *         // configure and return the necessary JDBC DataSource
 *     }
 *
 *     &#064;Bean
 *     public PlatformTransactionManager txManager() {
 *         return new DataSourceTransactionManager(dataSource());
 *     }
 * }</pre>
 *
 * <p>For reference, the example above can be compared to the following Spring XML
 * configuration:
 *
 * <pre class="code">
 * &lt;beans&gt;
 *
 *     &lt;tx:annotation-driven/&gt;
 *
 *     &lt;bean id="fooRepository" class="com.foo.JdbcFooRepository"&gt;
 *         &lt;constructor-arg ref="dataSource"/&gt;
 *     &lt;/bean&gt;
 *
 *     &lt;bean id="dataSource" class="com.vendor.VendorDataSource"/&gt;
 *
 *     &lt;bean id="transactionManager" class="org.sfwk...DataSourceTransactionManager"&gt;
 *         &lt;constructor-arg ref="dataSource"/&gt;
 *     &lt;/bean&gt;
 *
 * &lt;/beans&gt;
 * </pre>
 *
 * In both of the scenarios above, {@code @EnableTransactionManagement} and {@code
 * <tx:annotation-driven/>} are responsible for registering the necessary Spring
 * components that power annotation-driven transaction management, such as the
 * TransactionInterceptor and the proxy- or AspectJ-based advice that weave the
 * interceptor into the call stack when {@code JdbcFooRepository}'s {@code @Transactional}
 * methods are invoked.
 *
 * <p>A minor difference between the two examples lies in the naming of the {@code
 * PlatformTransactionManager} bean: In the {@code @Bean} case, the name is
 * <em>"txManager"</em> (per the name of the method); in the XML case, the name is
 * <em>"transactionManager"</em>. The {@code <tx:annotation-driven/>} is hard-wired to
 * look for a bean named "transactionManager" by default, however
 * {@code @EnableTransactionManagement} is more flexible; it will fall back to a by-type
 * lookup for any {@code PlatformTransactionManager} bean in the container. Thus the name
 * can be "txManager", "transactionManager", or "tm": it simply does not matter.
 *
 * <p>For those that wish to establish a more direct relationship between
 * {@code @EnableTransactionManagement} and the exact transaction manager bean to be used,
 * the {@link TransactionManagementConfigurer} callback interface may be implemented -
 * notice the {@code implements} clause and the {@code @Override}-annotated method below:
 *
 * <pre class="code">
 * &#064;Configuration
 * &#064;EnableTransactionManagement
 * public class AppConfig implements TransactionManagementConfigurer {
 *
 *     &#064;Bean
 *     public FooRepository fooRepository() {
 *         // configure and return a class having &#064;Transactional methods
 *         return new JdbcFooRepository(dataSource());
 *     }
 *
 *     &#064;Bean
 *     public DataSource dataSource() {
 *         // configure and return the necessary JDBC DataSource
 *     }
 *
 *     &#064;Bean
 *     public PlatformTransactionManager txManager() {
 *         return new DataSourceTransactionManager(dataSource());
 *     }
 *
 *     &#064;Override
 *     public PlatformTransactionManager annotationDrivenTransactionManager() {
 *         return txManager();
 *     }
 * }</pre>
 *
 * This approach may be desirable simply because it is more explicit, or it may be
 * necessary in order to distinguish between two {@code PlatformTransactionManager} beans
 * present in the same container.  As the name suggests, the
 * {@code annotationDrivenTransactionManager()} will be the one used for processing
 * {@code @Transactional} methods. See {@link TransactionManagementConfigurer} Javadoc
 * for further details.
 *
 * <p>The {@link #mode} attribute controls how advice is applied: If the mode is
 * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior
 * of the proxying. Please note that proxy mode allows for interception of calls through
 * the proxy only; local calls within the same class cannot get intercepted that way.
 *
 * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the
 * value of the {@link #proxyTargetClass} attribute will be ignored. Note also that in
 * this case the {@code spring-aspects} module JAR must be present on the classpath, with
 * compile-time weaving or load-time weaving applying the aspect to the affected classes.
 * There is no proxy involved in such a scenario; local calls will be intercepted as well.
 *
 * @author Chris Beams
 * @author Juergen Hoeller
 * @since 3.1
 * @see TransactionManagementConfigurer
 * @see TransactionManagementConfigurationSelector
 * @see ProxyTransactionManagementConfiguration
 * @see org.springframework.transaction.aspectj.AspectJTransactionManagementConfiguration
 */
/**
 * 启用S​​pring的注释驱动的事务管理功能，类似于Spring的{@code  <tx：>} XML名称空间中的支持。 
 * 要在{@link  org.springframework.context.annotation.Configuration @Configuration}类上使用，如下所示：<pre class ="code"> @Configuration @EnableTransactionManagement公共类AppConfig {@Bean public FooRepository fooRepository（）{/ /配置并返回具有@Transactional方法的类返回new JdbcFooRepository（dataSource（））; } @Bean public DataSource dataSource（）{//配置并返回必要的JDBC DataSource} @Bean public PlatformTransactionManager txManager（）{return new DataSourceTransactionManager（dataSource（））; }} </ pre> <p>作为参考，可以将上面的示例与以下Spring XML配置进行比较：<pre class ="code"> <beans> <tx：annotation-driven /> <bean id ="fooRepository "class ="com.foo.JdbcFooRepository"> <constructor-arg ref ="dataSource"/> </ bean> <bean id ="dataSource"class ="com.vendor.VendorDataSource"/> <bean id ="transactionManager "class ="org.sfwk ... DataSourceTransactionManager"> <constructor-arg ref ="dataSource"/> </ bean> </ beans> </ pre>在上述两种情况下，{@code  @EnableTransactionManagement }和{@code  <tx：annotation-driven />}负责注册必要的Spring组件，这些组件可为注释驱动的事务管理提供支持，例如TransactionInterceptor和将拦截器编织到其中的基于代理或基于AspectJ的建议调用{@code  JdbcFooRepository}的{@code  @Transactional}方法时的调用堆栈。 
 *  <p>两个示例之间的微小区别在于{@code  PlatformTransactionManager} bean的命名：在{@code  @Bean}情况下，名称为<em>"txManager"</ em> （根据方法的名称）； 
 * 在XML情况下，名称为<em>"transactionManager"</ em>。 
 *  {@code  <tx：annotation-driven />}硬连接默认情况下查找名为"transactionManager"的bean，但是{@code  @EnableTransactionManagement}更为灵活。 
 * 它将退回到容器中任何{@code  PlatformTransactionManager} bean的按类型查找。 
 * 因此，名称可以是"txManager"，"transactionManager"或"tm"：根本没关系。 
 *  <p>对于那些希望在{@code  @EnableTransactionManagement}和要使用的确切事务管理器bean之间建立更直接关系的用户，可以实现{@link  TransactionManagementConfigurer}回调接口-注意{ @code> Implements}子句和下面的{@code  @Override}-带注释的方法：<pre class ="code"> @Configuration @EnableTransactionManagement公共类AppConfig实现TransactionManagementConfigurer {@Bean public FooRepository fooRepository（）{//配置并返回具有@Transactional方法的类返回new JdbcFooRepository（dataSource（））; } @Bean public DataSource dataSource（）{//配置并返回必要的JDBC DataSource} @Bean public PlatformTransactionManager txManager（）{return new DataSourceTransactionManager（dataSource（））; } @Override公共PlatformTransactionManager注解DrivenTransactionManager（）{return txManager（）; }} </ pre>这种方法可能是简单的，因为它更加明确，可能是合乎需要的，或者可能是有必要的，以便区分同一容器中存在的两个{@code  PlatformTransactionManager} bean。 
 * 顾名思义，{@code 注解DrivenTransactionManager（）}将用于处理{@code  @Transactional}方法。 
 * 有关更多详细信息，请参见{@link  TransactionManagementConfigurer} Javadoc。 
 *  <p> {<@link> #mode}属性控制如何应用建议：如果模式为{@link  AdviceMode＃PROXY}（默认），则其他属性控制代理的行为。 
 * 请注意，代理模式仅允许通过代理拦截呼叫； 
 * 同一类中的本地调用无法以这种方式被拦截。 
 *  <p>请注意，如果将{@link  plain #mode}设置为{@link  AdviceMode＃ASPECTJ}，则{@link  #proxyTargetClass}属性的值将被忽略。 
 * 还要注意，在这种情况下，{<@code> spring-aspects}模块JAR必须存在于类路径中，并通过编译时编织或加载时编织将方面应用于受影响的类。 
 * 在这种情况下不涉及任何代理； 
 * 本地电话也会被拦截。 
 *  @author 克里斯·比姆斯（Chris Beams）@author 尤尔根·霍勒（Juergen Hoeller）@since 3.1起
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(TransactionManagementConfigurationSelector.class)
public @interface EnableTransactionManagement {

	/**
	 * Indicate whether subclass-based (CGLIB) proxies are to be created ({@code true}) as
	 * opposed to standard Java interface-based proxies ({@code false}). The default is
	 * {@code false}. <strong>Applicable only if {@link #mode()} is set to
	 * {@link AdviceMode#PROXY}</strong>.
	 * <p>Note that setting this attribute to {@code true} will affect <em>all</em>
	 * Spring-managed beans requiring proxying, not just those marked with
	 * {@code @Transactional}. For example, other beans marked with Spring's
	 * {@code @Async} annotation will be upgraded to subclass proxying at the same
	 * time. This approach has no negative impact in practice unless one is explicitly
	 * expecting one type of proxy vs another, e.g. in tests.
	 */
	/**
	 * 指示是否要创建基于子类（CGLIB）的代理（{@code  true}），而不是基于标准Java接口的代理（{@code  false}）。 
	 * 默认值为{@code  false}。 
	 *  <strong>仅在{@link  #mode（）}设置为{@link  AdviceMode＃PROXY} </ strong>时适用。 
	 *  <p>请注意，将此属性设置为{@code  true}将影响<em>所有</ em>需要代理的Spring管理的bean，而不仅仅是标记有{@code  @Transactional}的bean。 
	 * 例如，其他标有Spring的{@code  @Async}注解的bean将同时升级为子类代理。 
	 * 这种方法在实践中不会产生负面影响，除非一个人明确地期望一种代理相对于另一种，例如。 
	 * 在测试中。 
	 * 
	 */
	boolean proxyTargetClass() default false;

	/**
	 * Indicate how transactional advice should be applied.
	 * <p><b>The default is {@link AdviceMode#PROXY}.</b>
	 * Please note that proxy mode allows for interception of calls through the proxy
	 * only. Local calls within the same class cannot get intercepted that way; an
	 * {@link Transactional} annotation on such a method within a local call will be
	 * ignored since Spring's interceptor does not even kick in for such a runtime
	 * scenario. For a more advanced mode of interception, consider switching this to
	 * {@link AdviceMode#ASPECTJ}.
	 */
	/**
	 * 指出如何应用交易建议。 
	 *  <p> <b>默认值为{@link  AdviceMode＃PROXY}。 
	 * </ b>请注意，代理模式仅允许通过代理拦截呼叫。 
	 * 同一类中的本地调用不能以这种方式被拦截； 
	 * 在本地调用中，此类方法上的{@link  Transactional}注释将被忽略，因为Spring的拦截器甚至不会在这种运行时场景中起作用。 
	 * 有关更高级的拦截模式，请考虑将其切换为{@link  AdviceMode＃ASPECTJ}。 
	 * 
	 */
	AdviceMode mode() default AdviceMode.PROXY;

	/**
	 * Indicate the ordering of the execution of the transaction advisor
	 * when multiple advices are applied at a specific joinpoint.
	 * <p>The default is {@link Ordered#LOWEST_PRECEDENCE}.
	 */
	/**
	 * 当在特定的连接点上应用多个建议时，指示事务顾问的执行顺序。 
	 *  <p>默认值为{@link  Ordered＃LOWEST_PRECEDENCE}。 
	 * 
	 */
	int order() default Ordered.LOWEST_PRECEDENCE;

}
