/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.core.annotation.AliasFor;
import org.springframework.transaction.TransactionDefinition;

/**
 * Describes a transaction attribute on an individual method or on a class.
 *
 * <p>At the class level, this annotation applies as a default to all methods of
 * the declaring class and its subclasses. Note that it does not apply to ancestor
 * classes up the class hierarchy; methods need to be locally redeclared in order
 * to participate in a subclass-level annotation.
 *
 * <p>This annotation type is generally directly comparable to Spring's
 * {@link org.springframework.transaction.interceptor.RuleBasedTransactionAttribute}
 * class, and in fact {@link AnnotationTransactionAttributeSource} will directly
 * convert the data to the latter class, so that Spring's transaction support code
 * does not have to know about annotations. If no rules are relevant to the exception,
 * it will be treated like
 * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute}
 * (rolling back on {@link RuntimeException} and {@link Error} but not on checked
 * exceptions).
 *
 * <p>For specific information about the semantics of this annotation's attributes,
 * consult the {@link org.springframework.transaction.TransactionDefinition} and
 * {@link org.springframework.transaction.interceptor.TransactionAttribute} javadocs.
 *
 * @author Colin Sampaleanu
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @since 1.2
 * @see org.springframework.transaction.interceptor.TransactionAttribute
 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute
 * @see org.springframework.transaction.interceptor.RuleBasedTransactionAttribute
 */
/**
 * 描述单个方法或类上的事务属性。 
 *  <p>在类级别，此注释默认情况下适用于声明类及其子类的所有方法。 
 * 注意，它不适用于类层次结构中的祖先类。 
 * 需要在本地重新声明方法，以参与子类级别的注释。 
 *  <p>此注释类型通常可以直接与Spring的{@link  org.springframework.transaction.interceptor.RuleBasedTransactionAttribute}类进行比较，实际上{@link  AnnotationTransactionAttributeSource}会将数据直接转换为后一个类，因此Spring的事务支持代码不必了解注释。 
 * 如果没有与异常相关的规则，则将其视为{@link  org.springframework.transaction.interceptor.DefaultTransactionAttribute}（回退到{@link  RuntimeException}和{@link  Error}上，但不会根据检查的异常）。 
 *  <p>有关此注解属性的语义的特定信息，请查阅{@link  org.springframework.transaction.TransactionDefinition}和{@link  org.springframework.transaction.interceptor.TransactionAttribute} javadocs。 
 *  @author  Colin Sampaleanu @author  Juergen Hoeller @author  Sam Brannen @since 1.2 
 * @see  org.springframework.transaction.interceptor.TransactionAttribute 
 * @see  org.springframework.transaction.interceptor.DefaultTransactionAttribute <
 * @see > org.springframework.transaction.interceptor.RuleBasedTransactionAttribute
 */
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Transactional {

	/**
	 * Alias for {@link #transactionManager}.
	 * @see #transactionManager
	 */
	/**
	 * {@link  #transactionManager}的别名。 
	 *  
	 * @see  #transactionManager
	 */
	@AliasFor("transactionManager")
	String value() default "";

	/**
	 * A <em>qualifier</em> value for the specified transaction.
	 * <p>May be used to determine the target transaction manager,
	 * matching the qualifier value (or the bean name) of a specific
	 * {@link org.springframework.transaction.PlatformTransactionManager}
	 * bean definition.
	 * @since 4.2
	 * @see #value
	 */
	/**
	 * 指定交易的<em>限定符</ em>值。 
	 *  <p>可用于确定目标事务管理器，使其与特定{@link  org.springframework.transaction.PlatformTransactionManager} bean定义的限定符值（或bean名称）匹配。 
	 *  @since 4.2 
	 * @see ＃值
	 */
	@AliasFor("value")
	String transactionManager() default "";

	/**
	 * The transaction propagation type.
	 * <p>Defaults to {@link Propagation#REQUIRED}.
	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getPropagationBehavior()
	 */
	/**
	 * 事务传播类型。 
	 *  <p>默认为{@link  Propagation＃REQUIRED}。 
	 *  
	 * @see  org.springframework.transaction.interceptor.TransactionAttribute＃getPropagationBehavior（）
	 */
	Propagation propagation() default Propagation.REQUIRED;

	/**
	 * The transaction isolation level.
	 * <p>Defaults to {@link Isolation#DEFAULT}.
	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or
	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started
	 * transactions. Consider switching the "validateExistingTransactions" flag to
	 * "true" on your transaction manager if you'd like isolation level declarations
	 * to get rejected when participating in an existing transaction with a different
	 * isolation level.
	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getIsolationLevel()
	 * @see org.springframework.transaction.support.AbstractPlatformTransactionManager#setValidateExistingTransaction
	 */
	/**
	 * 事务隔离级别。 
	 *  <p>默认为{@link  Isolation＃DEFAULT}。 
	 *  <p>专门设计用于{@link  Propagation＃REQUIRED}或{@link  Propagation＃REQUIRES_NEW}，因为它仅适用于新启动的交易。 
	 * 如果希望在参与具有不同隔离级别的现有事务时拒绝隔离级别声明，请考虑在事务管理器上将"validateExistingTransactions"标志切换为"true"。 
	 *  
	 * @see  org.springframework.transaction.interceptor.TransactionAttribute＃getIsolationLevel（）
	 * @see  org.springframework.transaction.support.AbstractPlatformTransactionManager＃setValidateExistingTransaction
	 */
	Isolation isolation() default Isolation.DEFAULT;

	/**
	 * The timeout for this transaction (in seconds).
	 * <p>Defaults to the default timeout of the underlying transaction system.
	 * <p>Exclusively designed for use with {@link Propagation#REQUIRED} or
	 * {@link Propagation#REQUIRES_NEW} since it only applies to newly started
	 * transactions.
	 * @see org.springframework.transaction.interceptor.TransactionAttribute#getTimeout()
	 */
	/**
	 * 此事务的超时时间（以秒为单位）。 
	 *  <p>默认为基础事务系统的默认超时。 
	 *  <p>专门设计用于{@link  Propagation＃REQUIRED}或{@link  Propagation＃REQUIRES_NEW}，因为它仅适用于新启动的交易。 
	 *  
	 * @see  org.springframework.transaction.interceptor.TransactionAttribute＃getTimeout（）
	 */
	int timeout() default TransactionDefinition.TIMEOUT_DEFAULT;

	/**
	 * A boolean flag that can be set to {@code true} if the transaction is
	 * effectively read-only, allowing for corresponding optimizations at runtime.
	 * <p>Defaults to {@code false}.
	 * <p>This just serves as a hint for the actual transaction subsystem;
	 * it will <i>not necessarily</i> cause failure of write access attempts.
	 * A transaction manager which cannot interpret the read-only hint will
	 * <i>not</i> throw an exception when asked for a read-only transaction
	 * but rather silently ignore the hint.
	 * @see org.springframework.transaction.interceptor.TransactionAttribute#isReadOnly()
	 * @see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly()
	 */
	/**
	 * 如果事务实际上是只读的，则可以将布尔标志设置为{@code  true}，从而允许在运行时进行相应的优化。 
	 *  <p>默认为{@code  false}。 
	 *  <p>这仅是实际交易子系统的提示； 
	 *  <i>不一定</ i>会导致写访问尝试失败。 
	 * 当请求只读事务时，不能解释只读提示的事务管理器将<i>不会</ i>抛出异常，而会默默地忽略该提示。 
	 *  
	 * @see  org.springframework.transaction.interceptor.TransactionAttribute＃isReadOnly（）
	 * @see  org.springframework.transaction.support.TransactionSynchronizationManager＃isCurrentTransactionReadOnly（）
	 */
	boolean readOnly() default false;

	/**
	 * Defines zero (0) or more exception {@link Class classes}, which must be
	 * subclasses of {@link Throwable}, indicating which exception types must cause
	 * a transaction rollback.
	 * <p>By default, a transaction will be rolling back on {@link RuntimeException}
	 * and {@link Error} but not on checked exceptions (business exceptions). See
	 * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)}
	 * for a detailed explanation.
	 * <p>This is the preferred way to construct a rollback rule (in contrast to
	 * {@link #rollbackForClassName}), matching the exception class and its subclasses.
	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class clazz)}.
	 * @see #rollbackForClassName
	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)
	 */
	/**
	 * 定义零（0）个或多个异常{@link 类类}，该异常必须是{@link  Throwable}的子类，指示哪些异常类型必须引起事务回滚。 
	 *  <p>默认情况下，事务将在{@link  RuntimeException}和{@link  Error}上回滚，但不会在检查的异常（业务异常）上回滚。 
	 * 有关详细说明，请参见{@link  org.springframework.transaction.interceptor.DefaultTransactionAttribute＃rollbackOn（Throwable）}。 
	 *  <p>这是构造回滚规则（与{@link  #rollbackForClassName}相比）的首选方法，它匹配异常类及其子类。 
	 *  <p>类似于{@link  org.springframework.transaction.interceptor.RollbackRuleAttribute＃RollbackRuleAttribute（Class clazz）}。 
	 *  
	 * @see  #rollbackForClassName 
	 * @see  org.springframework.transaction.interceptor.DefaultTransactionAttribute＃rollbackOn（Throwable）
	 */
	Class<? extends Throwable>[] rollbackFor() default {};

	/**
	 * Defines zero (0) or more exception names (for exceptions which must be a
	 * subclass of {@link Throwable}), indicating which exception types must cause
	 * a transaction rollback.
	 * <p>This can be a substring of a fully qualified class name, with no wildcard
	 * support at present. For example, a value of {@code "ServletException"} would
	 * match {@code javax.servlet.ServletException} and its subclasses.
	 * <p><b>NB:</b> Consider carefully how specific the pattern is and whether
	 * to include package information (which isn't mandatory). For example,
	 * {@code "Exception"} will match nearly anything and will probably hide other
	 * rules. {@code "java.lang.Exception"} would be correct if {@code "Exception"}
	 * were meant to define a rule for all checked exceptions. With more unusual
	 * {@link Exception} names such as {@code "BaseBusinessException"} there is no
	 * need to use a FQN.
	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(String exceptionName)}.
	 * @see #rollbackFor
	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)
	 */
	/**
	 * 定义零（0）个或多个异常名称（对于必须是{@link  Throwable}的子类的异常），指示哪些异常类型必须引起事务回滚。 
	 *  <p>这可以是完全限定的类名的子字符串，目前不支持通配符。 
	 * 例如，值{@code "ServletException"}将匹配{@code  javax.servlet.ServletException}及其子类。 
	 *  <p> <b> NB：</ b>请仔细考虑该模式的具体程度以及是否包括包装信息（这不是强制性的）。 
	 * 例如，{<@code>"Exception"}将几乎匹配任何内容，并且可能会隐藏其他规则。 
	 * 如果要使用{@code "Exception"}为所有检查的异常定义规则，则{@code "java.lang.Exception"}是正确的。 
	 * 使用更常见的{@link 异常}名称，例如{@code "BaseBusinessException"}，则无需使用FQN。 
	 *  <p>类似于{@link  org.springframework.transaction.interceptor.RollbackRuleAttribute＃RollbackRuleAttribute（String exceptionName）}。 
	 *  
	 * @see  #rollbackFor 
	 * @see  org.springframework.transaction.interceptor.DefaultTransactionAttribute＃rollbackOn（Throwable）
	 */
	String[] rollbackForClassName() default {};

	/**
	 * Defines zero (0) or more exception {@link Class Classes}, which must be
	 * subclasses of {@link Throwable}, indicating which exception types must
	 * <b>not</b> cause a transaction rollback.
	 * <p>This is the preferred way to construct a rollback rule (in contrast
	 * to {@link #noRollbackForClassName}), matching the exception class and
	 * its subclasses.
	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(Class clazz)}.
	 * @see #noRollbackForClassName
	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)
	 */
	/**
	 * 定义零（0）个或更多的异常{@link 类类}，该类必须是{@link  Throwable}的子类，指示哪些异常类型必须<b>不</ b>引起事务回滚。 
	 *  <p>这是构造回滚规则的首选方法（与{@link  #noRollbackForClassName}相反），它与异常类及其子类相匹配。 
	 *  <p>类似于{@link  org.springframework.transaction.interceptor.NoRollbackRuleAttribute＃NoRollbackRuleAttribute（Class clazz）}。 
	 *  
	 * @see  #noRollbackForClassName 
	 * @see  org.springframework.transaction.interceptor.DefaultTransactionAttribute＃rollbackOn（Throwable）
	 */
	Class<? extends Throwable>[] noRollbackFor() default {};

	/**
	 * Defines zero (0) or more exception names (for exceptions which must be a
	 * subclass of {@link Throwable}) indicating which exception types must <b>not</b>
	 * cause a transaction rollback.
	 * <p>See the description of {@link #rollbackForClassName} for further
	 * information on how the specified names are treated.
	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(String exceptionName)}.
	 * @see #noRollbackFor
	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)
	 */
	/**
	 * 定义零（0）个或多个异常名称（对于必须是{@link  Throwable}的子类的异常），指示哪些异常类型必须<b>不</ b>引起事务回滚。 
	 *  <p>有关如何处理指定名称的更多信息，请参见{@link  #rollbackForClassName}的描述。 
	 *  <p>类似于{@link  org.springframework.transaction.interceptor.NoRollbackRuleAttribute＃NoRollbackRuleAttribute（String exceptionName）}。 
	 *  
	 * @see  #noRollbackFor 
	 * @see  org.springframework.transaction.interceptor.DefaultTransactionAttribute＃rollbackOn（Throwable）
	 */
	String[] noRollbackForClassName() default {};

}
