/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.annotation;

import java.lang.reflect.AnnotatedElement;

import org.springframework.lang.Nullable;
import org.springframework.transaction.interceptor.TransactionAttribute;

/**
 * Strategy interface for parsing known transaction annotation types.
 * {@link AnnotationTransactionAttributeSource} delegates to such
 * parsers for supporting specific annotation types such as Spring's own
 * {@link Transactional}, JTA 1.2's {@link javax.transaction.Transactional}
 * or EJB3's {@link javax.ejb.TransactionAttribute}.
 *
 * @author Juergen Hoeller
 * @since 2.5
 * @see AnnotationTransactionAttributeSource
 * @see SpringTransactionAnnotationParser
 * @see Ejb3TransactionAnnotationParser
 * @see JtaTransactionAnnotationParser
 */
/**
 * 用于解析已知事务注释类型的策略接口。 
 *  {@link  AnnotationTransactionAttributeSource}委托此类解析器支持特定的注释类型，例如Spring自己的{@link  Transactional}，JTA 1.2的{@link  javax.transaction.Transactional}或EJB3的{@link  javax.ejb.TransactionAttribute}。 
 *  @author  Juergen Hoeller @since 2.5起
 * @see  AnnotationTransactionAttributeSource 
 * @see  SpringTransactionAnnotationParser 
 * @see  Ejb3TransactionAnnotationParser 
 * @see  JtaTransactionAnnotationParser
 */
public interface TransactionAnnotationParser {

	/**
	 * Determine whether the given class is a candidate for transaction attributes
	 * in the annotation format of this {@code TransactionAnnotationParser}.
	 * <p>If this method returns {@code false}, the methods on the given class
	 * will not get traversed for {@code #parseTransactionAnnotation} introspection.
	 * Returning {@code false} is therefore an optimization for non-affected
	 * classes, whereas {@code true} simply means that the class needs to get
	 * fully introspected for each method on the given class individually.
	 * @param targetClass the class to introspect
	 * @return {@code false} if the class is known to have no transaction
	 * annotations at class or method level; {@code true} otherwise. The default
	 * implementation returns {@code true}, leading to regular introspection.
	 * @since 5.2
	 */
	/**
	 * 以此{@code  TransactionAnnotationParser}的注释格式确定给定类是否为事务属性的候选对象。 
	 *  <p>如果此方法返回{@code  false}，则不会因{@code  #parseTransactionAnnotation}内省而遍历给定类上的方法。 
	 * 因此，返回{@code  false}是对不受影响的类的优化，而{@code  true}只是意味着该类需要对给定类上的每个方法分别进行全面自省。 
	 *  
	 * @param  targetClass要内省的类
	 * @return  {@code  false}，如果已知该类在类或方法级别没有事务注释； 
	 * 否则为{@code  true}。 
	 * 默认实现返回{@code  true}，从而导致常规自省。 
	 *  @5.2起
	 */
	default boolean isCandidateClass(Class<?> targetClass) {
		return true;
	}

	/**
	 * Parse the transaction attribute for the given method or class,
	 * based on an annotation type understood by this parser.
	 * <p>This essentially parses a known transaction annotation into Spring's metadata
	 * attribute class. Returns {@code null} if the method/class is not transactional.
	 * @param element the annotated method or class
	 * @return the configured transaction attribute, or {@code null} if none found
	 * @see AnnotationTransactionAttributeSource#determineTransactionAttribute
	 */
	/**
	 * 根据此解析器理解的注释类型，解析给定方法或类的事务属性。 
	 *  <p>这实际上将已知的事务注释解析为Spring的元数据属性类。 
	 * 如果方法/类不是事务性的，则返回{@code  null}。 
	 *  
	 * @param 元素，带注释的方法或类
	 * @return 已配置的事务属性，如果找不到，则为{@code  null} 
	 * @see  AnnotationTransactionAttributeSource＃determineTransactionAttribute
	 */
	@Nullable
	TransactionAttribute parseTransactionAnnotation(AnnotatedElement element);

}
