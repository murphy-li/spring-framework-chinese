/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2019的原始作者或作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction.event;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import org.springframework.context.event.EventListener;
import org.springframework.core.annotation.AliasFor;

/**
 * An {@link EventListener} that is invoked according to a {@link TransactionPhase}.
 *
 * <p>If the event is not published within an active transaction, the event is discarded
 * unless the {@link #fallbackExecution} flag is explicitly set. If a transaction is
 * running, the event is processed according to its {@code TransactionPhase}.
 *
 * <p>Adding {@link org.springframework.core.annotation.Order @Order} to your annotated
 * method allows you to prioritize that listener amongst other listeners running before
 * or after transaction completion.
 *
 * @author Stephane Nicoll
 * @author Sam Brannen
 * @since 4.2
 */
/**
 * 根据{@link  TransactionPhase}调用的{@link  EventListener}。 
 *  <p>如果未在活动事务中发布事件，则除非明确设置{@link  #fallbackExecution}标志，否则将丢弃该事件。 
 * 如果事务正在运行，则根据事件的{@code  TransactionPhase}处理事件。 
 *  <p>在已注释的方法中添加{@link  org.springframework.core.annotation.Order @Order}可以使您在事务完成之前或之后运行的其他侦听器之间优先处理该侦听器。 
 *  @author  Stephane Nicoll @author  Sam Brannen @从4.2开始
 */
@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@EventListener
public @interface TransactionalEventListener {

	/**
	 * Phase to bind the handling of an event to.
	 * <p>The default phase is {@link TransactionPhase#AFTER_COMMIT}.
	 * <p>If no transaction is in progress, the event is not processed at
	 * all unless {@link #fallbackExecution} has been enabled explicitly.
	 */
	/**
	 * 绑定事件处理的阶段。 
	 *  <p>默认阶段为{@link  TransactionPhase＃AFTER_COMMIT}。 
	 *  <p>如果没有事务在进行中，则除非明确启用{@link  #fallbackExecution}，否则根本不会处理该事件。 
	 * 
	 */
	TransactionPhase phase() default TransactionPhase.AFTER_COMMIT;

	/**
	 * Whether the event should be processed if no transaction is running.
	 */
	/**
	 * 如果没有事务正在运行，是否应该处理事件。 
	 * 
	 */
	boolean fallbackExecution() default false;

	/**
	 * Alias for {@link #classes}.
	 */
	/**
	 * {@link  #classes}的别名。 
	 * 
	 */
	@AliasFor(annotation = EventListener.class, attribute = "classes")
	Class<?>[] value() default {};

	/**
	 * The event classes that this listener handles.
	 * <p>If this attribute is specified with a single value, the annotated
	 * method may optionally accept a single parameter. However, if this
	 * attribute is specified with multiple values, the annotated method
	 * must <em>not</em> declare any parameters.
	 */
	/**
	 * 该侦听器处理的事件类。 
	 *  <p>如果使用单个值指定此属性，则带注释的方法可以选择接受单个参数。 
	 * 但是，如果此属性指定了多个值，则带注释的方法必须<em> not </ em>声明任何参数。 
	 * 
	 */
	@AliasFor(annotation = EventListener.class, attribute = "classes")
	Class<?>[] classes() default {};

	/**
	 * Spring Expression Language (SpEL) attribute used for making the event
	 * handling conditional.
	 * <p>The default is {@code ""}, meaning the event is always handled.
	 * @see EventListener#condition
	 */
	/**
	 * Spring Expression Language（SpEL）属性用于使事件处理成为条件。 
	 *  <p>默认值为{@code ""}，表示始终处理该事件。 
	 *  
	 * @see  EventListener＃condition
	 */
	String condition() default "";

}
