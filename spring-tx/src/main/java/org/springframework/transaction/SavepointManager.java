/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2014的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.transaction;

/**
 * Interface that specifies an API to programmatically manage transaction
 * savepoints in a generic fashion. Extended by TransactionStatus to
 * expose savepoint management functionality for a specific transaction.
 *
 * <p>Note that savepoints can only work within an active transaction.
 * Just use this programmatic savepoint handling for advanced needs;
 * else, a subtransaction with PROPAGATION_NESTED is preferable.
 *
 * <p>This interface is inspired by JDBC 3.0's Savepoint mechanism
 * but is independent from any specific persistence technology.
 *
 * @author Juergen Hoeller
 * @since 1.1
 * @see TransactionStatus
 * @see TransactionDefinition#PROPAGATION_NESTED
 * @see java.sql.Savepoint
 */
/**
 * 该接口指定用于以通用方式以编程方式管理事务保存点的API。 
 * 由TransactionStatus扩展，以公开特定事务的保存点管理功能。 
 *  <p>请注意，保存点只能在活动事务中工作。 
 * 只需使用此程序化保存点处理即可满足高级需求； 
 * 否则，最好使用PROPAGATION_NESTED的子事务。 
 *  <p>此接口受JDBC 3.0的Savepoint机制的启发，但独立于任何特定的持久性技术。 
 *  @author  Juergen Hoeller @自1.1起
 * @see  TransactionStatus 
 * @see  TransactionDefinition＃PROPAGATION_NESTED 
 * @see  java.sql.Savepoint
 */
public interface SavepointManager {

	/**
	 * Create a new savepoint. You can roll back to a specific savepoint
	 * via {@code rollbackToSavepoint}, and explicitly release a savepoint
	 * that you don't need anymore via {@code releaseSavepoint}.
	 * <p>Note that most transaction managers will automatically release
	 * savepoints at transaction completion.
	 * @return a savepoint object, to be passed into
	 * {@link #rollbackToSavepoint} or {@link #releaseSavepoint}
	 * @throws NestedTransactionNotSupportedException if the underlying
	 * transaction does not support savepoints
	 * @throws TransactionException if the savepoint could not be created,
	 * for example because the transaction is not in an appropriate state
	 * @see java.sql.Connection#setSavepoint
	 */
	/**
	 * 创建一个新的保存点。 
	 * 您可以通过{@code  rollbackToSavepoint}回滚到特定的保存点，并通过{@code  releaseSavepoint}显式释放不再需要的保存点。 
	 *  <p>请注意，大多数事务管理器将在事务完成时自动释放保存点。 
	 *  
	 * @return 一个保存点对象，如果基础事务不支持保存点，则传递给{@link  #rollbackToSavepoint}或{@link  #releaseSavepoint} 
	 * @throws  NestedTransactionNotSupportedException 
	 * @throws  TransactionException如果保存点无法创建，例如由于事务未处于适当状态而无法创建
	 * @see  java.sql.Connection＃setSavepoint
	 */
	Object createSavepoint() throws TransactionException;

	/**
	 * Roll back to the given savepoint.
	 * <p>The savepoint will <i>not</i> be automatically released afterwards.
	 * You may explicitly call {@link #releaseSavepoint(Object)} or rely on
	 * automatic release on transaction completion.
	 * @param savepoint the savepoint to roll back to
	 * @throws NestedTransactionNotSupportedException if the underlying
	 * transaction does not support savepoints
	 * @throws TransactionException if the rollback failed
	 * @see java.sql.Connection#rollback(java.sql.Savepoint)
	 */
	/**
	 * 回滚到给定的保存点。 
	 *  <p>此保存点将<i>不</ i>随后自动释放。 
	 * 您可以显式调用{@link  #releaseSavepoint（Object）}或在事务完成时依靠自动释放。 
	 *  
	 * @param 保存点如果基础事务不支持保存点，则保存点将回滚到
	 * @throws  NestedTransactionNotSupportedException 
	 * @throws  TransactionException如果回滚失败
	 * @see  java.sql.Connection＃rollback（java.sql.Savepoint ）
	 */
	void rollbackToSavepoint(Object savepoint) throws TransactionException;

	/**
	 * Explicitly release the given savepoint.
	 * <p>Note that most transaction managers will automatically release
	 * savepoints on transaction completion.
	 * <p>Implementations should fail as silently as possible if proper
	 * resource cleanup will eventually happen at transaction completion.
	 * @param savepoint the savepoint to release
	 * @throws NestedTransactionNotSupportedException if the underlying
	 * transaction does not support savepoints
	 * @throws TransactionException if the release failed
	 * @see java.sql.Connection#releaseSavepoint
	 */
	/**
	 * 明确释放给定的保存点。 
	 *  <p>请注意，大多数事务管理器将在事务完成时自动释放保存点。 
	 *  <p>如果在事务完成时最终将进行适当的资源清理，则实施应尽可能地以失败告终。 
	 *  
	 * @param  savepoint要释放的保存点
	 * @throws 如果基础事务不支持保存点，则释放NestedTransactionNotSupportedException 
	 * @throws 如果发布失败，则抛出TransactionException 
	 * @see  java.sql.Connection＃releaseSavepoint
	 */
	void releaseSavepoint(Object savepoint) throws TransactionException;

}
