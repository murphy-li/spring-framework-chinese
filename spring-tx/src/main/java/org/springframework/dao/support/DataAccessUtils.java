/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.dao.support;

import java.util.Collection;

import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.dao.TypeMismatchDataAccessException;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;
import org.springframework.util.CollectionUtils;
import org.springframework.util.NumberUtils;

/**
 * Miscellaneous utility methods for DAO implementations.
 * Useful with any data access technology.
 *
 * @author Juergen Hoeller
 * @since 1.0.2
 */
/**
 * DAO实现的其他实用程序方法。 
 * 与任何数据访问技术一起使用。 
 *  @author  Juergen Hoeller @始于1.0.2
 */
public abstract class DataAccessUtils {

	/**
	 * Return a single result object from the given Collection.
	 * <p>Returns {@code null} if 0 result objects found;
	 * throws an exception if more than 1 element found.
	 * @param results the result Collection (can be {@code null})
	 * @return the single result object, or {@code null} if none
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * element has been found in the given Collection
	 */
	/**
	 * 从给定的Collection返回单个结果对象。 
	 *  <p>如果找到0个结果对象，则返回{@code  null}； 
	 * 如果找到多个元素，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}）
	 * @return 单个结果对象，如果没有，则为{@code  null} 
	 * @throws  IncorrectResultSizeDataAccessException如果已经有多个元素在给定的集合中找到
	 */
	@Nullable
	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {
		if (CollectionUtils.isEmpty(results)) {
			return null;
		}
		if (results.size() > 1) {
			throw new IncorrectResultSizeDataAccessException(1, results.size());
		}
		return results.iterator().next();
	}

	/**
	 * Return a single result object from the given Collection.
	 * <p>Throws an exception if 0 or more than 1 element found.
	 * @param results the result Collection (can be {@code null}
	 * but is not expected to contain {@code null} elements)
	 * @return the single result object
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * element has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no element at all
	 * has been found in the given Collection
	 */
	/**
	 * 从给定的Collection返回单个结果对象。 
	 *  <p>如果找到0个或多个1个元素，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，但不应包含{@code  null}元素）
	 * @return 单个结果对象
	 * @throws 如果不止一个，则IncorrectResultSizeDataAccessException如果在给定Collection中根本找不到元素，则在给定Collection 
	 * @throws  EmptyResultDataAccessException中找到元素
	 */
	public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {
		if (CollectionUtils.isEmpty(results)) {
			throw new EmptyResultDataAccessException(1);
		}
		if (results.size() > 1) {
			throw new IncorrectResultSizeDataAccessException(1, results.size());
		}
		return results.iterator().next();
	}

	/**
	 * Return a single result object from the given Collection.
	 * <p>Throws an exception if 0 or more than 1 element found.
	 * @param results the result Collection (can be {@code null}
	 * and is also expected to contain {@code null} elements)
	 * @return the single result object
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * element has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no element at all
	 * has been found in the given Collection
	 * @since 5.0.2
	 */
	/**
	 * 从给定的Collection返回单个结果对象。 
	 *  <p>如果找到0个或多个1个元素，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，并且还应包含{@code  null}元素）
	 * @return 单个结果对象
	 * @throws 如果不止一个，则IncorrectResultSizeDataAccessException如果在给定Collection中没有找到元素，则自给定Collection 
	 * @throws 中找到元素@
	 * @throws 5.3.2
	 */
	@Nullable
	public static <T> T nullableSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {
		// This is identical to the requiredSingleResult implementation but differs in the
		// semantics of the incoming Collection (which we currently can't formally express)
		if (CollectionUtils.isEmpty(results)) {
			throw new EmptyResultDataAccessException(1);
		}
		if (results.size() > 1) {
			throw new IncorrectResultSizeDataAccessException(1, results.size());
		}
		return results.iterator().next();
	}

	/**
	 * Return a unique result object from the given Collection.
	 * <p>Returns {@code null} if 0 result objects found;
	 * throws an exception if more than 1 instance found.
	 * @param results the result Collection (can be {@code null})
	 * @return the unique result object, or {@code null} if none
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * result object has been found in the given Collection
	 * @see org.springframework.util.CollectionUtils#hasUniqueObject
	 */
	/**
	 * 从给定的Collection返回唯一的结果对象。 
	 *  <p>如果找到0个结果对象，则返回{@code  null}； 
	 * 如果找到多个实例，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}）
	 * @return 唯一的结果对象，如果没有，则为{@code  null} 
	 * @throws 如果有多个结果对象具有IncorrectResultSizeDataAccessException在给定的Collection 
	 * @see  org.springframework.util.CollectionUtils＃hasUniqueObject中找到
	 */
	@Nullable
	public static <T> T uniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {
		if (CollectionUtils.isEmpty(results)) {
			return null;
		}
		if (!CollectionUtils.hasUniqueObject(results)) {
			throw new IncorrectResultSizeDataAccessException(1, results.size());
		}
		return results.iterator().next();
	}

	/**
	 * Return a unique result object from the given Collection.
	 * <p>Throws an exception if 0 or more than 1 instance found.
	 * @param results the result Collection (can be {@code null}
	 * but is not expected to contain {@code null} elements)
	 * @return the unique result object
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * result object has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no result object at all
	 * has been found in the given Collection
	 * @see org.springframework.util.CollectionUtils#hasUniqueObject
	 */
	/**
	 * 从给定的Collection返回唯一的结果对象。 
	 *  <p>如果找到0个或1个以上实例，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，但不应包含{@code  null}元素）
	 * @return 唯一的结果对象
	 * @throws 如果不止一个，则IncorrectResultSizeDataAccessException如果在给定的集合
	 * @see 中根本没有找到结果对象，则在给定的集合
	 * @throws  EmptyResultDataAccessException中找到结果对象org.springframework.util.CollectionUtils＃hasUniqueObject
	 */
	public static <T> T requiredUniqueResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException {
		if (CollectionUtils.isEmpty(results)) {
			throw new EmptyResultDataAccessException(1);
		}
		if (!CollectionUtils.hasUniqueObject(results)) {
			throw new IncorrectResultSizeDataAccessException(1, results.size());
		}
		return results.iterator().next();
	}

	/**
	 * Return a unique result object from the given Collection.
	 * Throws an exception if 0 or more than 1 result objects found,
	 * of if the unique result object is not convertible to the
	 * specified required type.
	 * @param results the result Collection (can be {@code null}
	 * but is not expected to contain {@code null} elements)
	 * @return the unique result object
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * result object has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no result object
	 * at all has been found in the given Collection
	 * @throws TypeMismatchDataAccessException if the unique object does
	 * not match the specified required type
	 */
	/**
	 * 从给定的Collection返回唯一的结果对象。 
	 * 如果找到0个或多个1个结果对象，或者唯一的结果对象不可转换为指定的必需类型，则抛出异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，但不应包含{@code  null}元素）
	 * @return 唯一结果对象
	 * @throws 如果不止一个，则IncorrectResultSizeDataAccessException如果在给定的集合
	 * @throws 中根本没有找到结果对象，则在给定的集合
	 * @throws 中找到结果对象EmptyResultDataAccessException如果唯一的对象与指定的必需类型不匹配，则类型为MismatchDataAccessException
	 */
	@SuppressWarnings("unchecked")
	public static <T> T objectResult(@Nullable Collection<?> results, @Nullable Class<T> requiredType)
			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {

		Object result = requiredUniqueResult(results);
		if (requiredType != null && !requiredType.isInstance(result)) {
			if (String.class == requiredType) {
				result = result.toString();
			}
			else if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) {
				try {
					result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType);
				}
				catch (IllegalArgumentException ex) {
					throw new TypeMismatchDataAccessException(ex.getMessage());
				}
			}
			else {
				throw new TypeMismatchDataAccessException(
						"Result object is of type [" + result.getClass().getName() +
						"] and could not be converted to required type [" + requiredType.getName() + "]");
			}
		}
		return (T) result;
	}

	/**
	 * Return a unique int result from the given Collection.
	 * Throws an exception if 0 or more than 1 result objects found,
	 * of if the unique result object is not convertible to an int.
	 * @param results the result Collection (can be {@code null}
	 * but is not expected to contain {@code null} elements)
	 * @return the unique int result
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * result object has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no result object
	 * at all has been found in the given Collection
	 * @throws TypeMismatchDataAccessException if the unique object
	 * in the collection is not convertible to an int
	 */
	/**
	 * 从给定的Collection返回唯一的int结果。 
	 * 如果找到0个或多个1个结果对象，或者唯一的结果对象不可转换为int，则抛出异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，但不应包含{@code  null}元素）
	 * @return 唯一的int结果
	 * @throws  IncorrectResultSizeDataAccessException，如果多个如果在给定的集合
	 * @throws 中根本找不到结果对象，则在给定的集合
	 * @throws 中找到结果对象Type @MismatchDataAccessException如果集合中的唯一对象无法转换为int
	 */
	public static int intResult(@Nullable Collection<?> results)
			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {

		return objectResult(results, Number.class).intValue();
	}

	/**
	 * Return a unique long result from the given Collection.
	 * Throws an exception if 0 or more than 1 result objects found,
	 * of if the unique result object is not convertible to a long.
	 * @param results the result Collection (can be {@code null}
	 * but is not expected to contain {@code null} elements)
	 * @return the unique long result
	 * @throws IncorrectResultSizeDataAccessException if more than one
	 * result object has been found in the given Collection
	 * @throws EmptyResultDataAccessException if no result object
	 * at all has been found in the given Collection
	 * @throws TypeMismatchDataAccessException if the unique object
	 * in the collection is not convertible to a long
	 */
	/**
	 * 从给定的Collection返回唯一的长结果。 
	 * 如果找到0个或多个1个结果对象，或者唯一的结果对象不可转换为long类型，则引发异常。 
	 *  
	 * @param 生成结果Collection（可以为{@code  null}，但不应包含{@code  null}元素）
	 * @return 唯一的长结果
	 * @throws 如果不止一个，则IncorrectResultSizeDataAccessException如果在给定的集合
	 * @throws 中根本没有找到结果对象，则在给定的集合
	 * @throws 中发现结果对象Type @MismatchDataAccessException如果集合中的唯一对象不能转换为long类型
	 */
	public static long longResult(@Nullable Collection<?> results)
			throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException {

		return objectResult(results, Number.class).longValue();
	}


	/**
	 * Return a translated exception if this is appropriate,
	 * otherwise return the given exception as-is.
	 * @param rawException an exception that we may wish to translate
	 * @param pet the PersistenceExceptionTranslator to use to perform the translation
	 * @return a translated persistence exception if translation is possible,
	 * or the raw exception if it is not
	 */
	/**
	 * 如果合适，则返回翻译后的异常，否则按原样返回给定的异常。 
	 *  
	 * @param  rawException我们可能希望翻译的异常
	 * @param 允许PersistenceExceptionTranslator用于执行翻译
	 * @return 如果可以翻译，则为已翻译的持久性异常； 
	 * 如果不是，则为原始异常
	 */
	public static RuntimeException translateIfNecessary(
			RuntimeException rawException, PersistenceExceptionTranslator pet) {

		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null");
		DataAccessException dae = pet.translateExceptionIfPossible(rawException);
		return (dae != null ? dae : rawException);
	}

}
