/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2016的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.dao.support;

import org.springframework.dao.DataAccessException;
import org.springframework.lang.Nullable;

/**
 * Interface implemented by Spring integrations with data access technologies
 * that throw runtime exceptions, such as JPA and Hibernate.
 *
 * <p>This allows consistent usage of combined exception translation functionality,
 * without forcing a single translator to understand every single possible type
 * of exception.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 2.0
 */
/**
 * 通过Spring集成实现的接口，该接口与抛出运行时异常的数据访问技术（例如JPA和Hibernate）结合在一起。 
 *  <p>这允许一致地使用组合的异常转换功能，而不必强迫单个翻译者理解每种可能的异常类型。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @始于2.0
 */
@FunctionalInterface
public interface PersistenceExceptionTranslator {

	/**
	 * Translate the given runtime exception thrown by a persistence framework to a
	 * corresponding exception from Spring's generic
	 * {@link org.springframework.dao.DataAccessException} hierarchy, if possible.
	 * <p>Do not translate exceptions that are not understood by this translator:
	 * for example, if coming from another persistence framework, or resulting
	 * from user code or otherwise unrelated to persistence.
	 * <p>Of particular importance is the correct translation to
	 * DataIntegrityViolationException, for example on constraint violation.
	 * Implementations may use Spring JDBC's sophisticated exception translation
	 * to provide further information in the event of SQLException as a root cause.
	 * @param ex a RuntimeException to translate
	 * @return the corresponding DataAccessException (or {@code null} if the
	 * exception could not be translated, as in this case it may result from
	 * user code rather than from an actual persistence problem)
	 * @see org.springframework.dao.DataIntegrityViolationException
	 * @see org.springframework.jdbc.support.SQLExceptionTranslator
	 */
	/**
	 * 如果可能，将持久性框架抛出的给定运行时异常转换为Spring的通用{@link  org.springframework.dao.DataAccessException}层次结构中的相应异常。 
	 *  <p>不要翻译该转换器无法理解的异常：例如，如果是来自另一个持久性框架，或者是由于用户代码或与持久性无关的其他结果。 
	 *  <p>尤其重要的是正确转换为DataIntegrityViolationException，例如在违反约束时。 
	 * 实现可能会使用Spring JDBC的复杂异常转换来在SQLException事件作为根本原因的情况下提供更多信息。 
	 *  
	 * @param 可以通过RuntimeException来翻译
	 * @return 相应的DataAccessException（如果无法翻译该异常，则为{@code  null}，因为在这种情况下，它可能是由于用户代码而不是实际的持久性问题导致的）
	 * @see  org.springframework.dao.DataIntegrityViolationException 
	 * @see  org.springframework.jdbc.support.SQLExceptionTranslator
	 */
	@Nullable
	DataAccessException translateExceptionIfPossible(RuntimeException ex);

}
