/** Generated by english-annotation-buster, Powered by Google Translate.**/
/*
 * Copyright 2002-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 版权所有2002-2018的原始作者。 
 * 根据Apache许可证2.0版（"许可证"）获得许可； 
 * 除非遵守许可，否则不得使用此文件。 
 * 您可以在https://www.apache.org/licenses/LICENSE-2.0上获得许可的副本。 
 * 除非适用法律要求或以书面形式同意，否则根据"许可"分发的软件将按"现状"分发，没有任何明示或暗示的保证或条件。 
 * 有关许可下特定的语言管理权限和限制，请参阅许可。 
 * 
 */

package org.springframework.instrument;

import java.lang.instrument.Instrumentation;

/**
 * Java agent that saves the {@link Instrumentation} interface from the JVM
 * for later use.
 *
 * @author Rod Johnson
 * @author Juergen Hoeller
 * @since 2.0
 * @see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver
 */
/**
 * 从JVM保存{@link  Instrumentation}接口以供以后使用的Java代理。 
 *  @author 罗德·约翰逊@author  Juergen Hoeller @从2.0起
 * @see  org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver
 */
public final class InstrumentationSavingAgent {

	private static volatile Instrumentation instrumentation;


	private InstrumentationSavingAgent() {
	}


	/**
	 * Save the {@link Instrumentation} interface exposed by the JVM.
	 */
	/**
	 * 保存JVM公开的{@link  Instrumentation}接口。 
	 * 
	 */
	public static void premain(String agentArgs, Instrumentation inst) {
		instrumentation = inst;
	}

	/**
	 * Save the {@link Instrumentation} interface exposed by the JVM.
	 * This method is required to dynamically load this Agent with the Attach API.
	 */
	/**
	 * 保存JVM公开的{@link  Instrumentation}接口。 
	 * 要使用附加API动态加载此代理，需要使用此方法。 
	 * 
	 */
	public static void agentmain(String agentArgs, Instrumentation inst) {
		instrumentation = inst;
	}

	/**
	 * Return the {@link Instrumentation} interface exposed by the JVM.
	 * <p>Note that this agent class will typically not be available in the classpath
	 * unless the agent is actually specified on JVM startup. If you intend to do
	 * conditional checking with respect to agent availability, consider using
	 * {@link org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()}
	 * instead - which will work without the agent class in the classpath as well.
	 * @return the {@code Instrumentation} instance previously saved when
	 * the {@link #premain} or {@link #agentmain} methods was called by the JVM;
	 * will be {@code null} if this class was not used as Java agent when this
	 * JVM was started or it wasn't installed as agent using the Attach API.
	 * @see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver#getInstrumentation()
	 */
	/**
	 * 返回JVM公开的{@link  Instrumentation}接口。 
	 *  <p>请注意，除非在JVM启动时实际指定了代理，否则该代理类通常在类路径中不可用。 
	 * 如果您打算对代理程序的可用性进行条件检查，请考虑使用{@link  org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver＃getInstrumentation（）} －在类路径中也没有代理程序类的情况下也可以使用。 
	 *  
	 * @return 先前在由JVM调用{@link  #premain}或{@link  #agentmain}方法时保存的{@code  Instrumentation}实例； 
	 * 如果在启动此JVM时未将此类用作Java代理，或者未使用Attach API将其作为代理安装，则将为{@code  null}。 
	 *  
	 * @see  org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver＃getInstrumentation（）
	 */
	public static Instrumentation getInstrumentation() {
		return instrumentation;
	}

}
